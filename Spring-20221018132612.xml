<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.10/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.10/ http://www.mediawiki.org/xml/export-0.10.xsd" version="0.10" xml:lang="en">
  <siteinfo>
    <sitename>Spring</sitename>
    <dbname>mediawiki</dbname>
    <base>https://springrts.com/wiki/Main_Page</base>
    <generator>MediaWiki 1.31.12</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2" case="first-letter">Media</namespace>
      <namespace key="-1" case="first-letter">Special</namespace>
      <namespace key="0" case="first-letter" />
      <namespace key="1" case="first-letter">Talk</namespace>
      <namespace key="2" case="first-letter">User</namespace>
      <namespace key="3" case="first-letter">User talk</namespace>
      <namespace key="4" case="first-letter">Spring</namespace>
      <namespace key="5" case="first-letter">Spring talk</namespace>
      <namespace key="6" case="first-letter">File</namespace>
      <namespace key="7" case="first-letter">File talk</namespace>
      <namespace key="8" case="first-letter">MediaWiki</namespace>
      <namespace key="9" case="first-letter">MediaWiki talk</namespace>
      <namespace key="10" case="first-letter">Template</namespace>
      <namespace key="11" case="first-letter">Template talk</namespace>
      <namespace key="12" case="first-letter">Help</namespace>
      <namespace key="13" case="first-letter">Help talk</namespace>
      <namespace key="14" case="first-letter">Category</namespace>
      <namespace key="15" case="first-letter">Category talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>1v0ry k1ng's Works</title>
    <ns>0</ns>
    <id>1915</id>
    <revision>
      <id>17976</id>
      <parentid>12274</parentid>
      <timestamp>2009-12-26T15:27:09Z</timestamp>
      <contributor>
        <username>Mongus</username>
        <id>53</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="226">[[Image:Alwaysspringtimefv5.jpg]]

[[Image:When2eb2.jpg]]

[[Image:Weaselbalancelolpx6.jpg]]

[[Image:Tanoobsvclansjk9.jpg]]

[[Image:Takinadviceoh6.jpg]]

[[Image:Omgesrl9.jpg ]]

[[Image:Genderfunjo4.jpg]]


[[Category:xta]]</text>
      <sha1>of36kjdec1o2vsutqk0zq13rejchszf</sha1>
    </revision>
  </page>
  <page>
    <title>3DModels:AssimpMetadata</title>
    <ns>0</ns>
    <id>3837</id>
    <revision>
      <id>31013</id>
      <timestamp>2019-03-27T19:07:57Z</timestamp>
      <contributor>
        <username>Maddox</username>
        <id>2934</id>
      </contributor>
      <comment>Added specific assimp metadata wiki entry</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2844">= Assimp mesh Meta Reference =
You may add additional, Spring-specific information to .dae, .lwo and other assimp-supported files in this extra lua file. It's usually named after the models extension and placed at the /objects folder, next to it. For instance, for testobject.dae you'd use testobject.dae.lua.

Variables are organised as such:
{{tag|name=VariableName|type=type|range=[valid range]|special=Required|default=value
|description=Description}}

==Source==
The engine source code which reads this file is viewable here:

* {{sourcelink|file=rts/Rendering/Models/AssParser.cpp}}

= General Formatting =
check [http://www.lua.org/docs.html Lua Documentation].

=Data Types=
{{DataTypes}}

= Notes =
* the script MUST return exactly one model-table (which may be named arbitrarily)
* the tree must reference ONLY object names defined in the assimp file
* a piece-table key may NOT be &quot;name&quot; or &quot;offset&quot; (these are reserved keywords)
= Sections =
== modelfilename.lua ==
&lt;code&gt;&lt;pre&gt;model = {
    pieces = {
       ...
    },
    radius = 0,
    midpos = { 0, 0, 0 },
    tex1 = &quot;&quot;,
    --tex2 = &quot;&quot;,
    numpieces = 1,

    globalvertexoffset = true,
    localpieceoffset = true,
}
return model&lt;/pre&gt;&lt;/code&gt;

===== meshname =====
name of your mesh...

{{tag|name=midpos|type=float3|special=Required
|description=the local of the median point of the mesh from the origin}}

{{tag|name=radius|type=float|special=Required
|description=from the midpos the radius of the mesh, used for occlusion culling}}

{{tag|name=tex1|type=string
|description=filename of the texture image to use for diffuse and teamcolor}}

{{tag|name=tex2|type=string
|description=filename of the texture image to use for ambient, specular and transparency}}

{{tag|name=globalvertexoffsets|type=bool
|description=whether the vertex coordinates are relative to the global origin, or the local origin}}

{{tag|name=localpieceoffsets|type=bool
|description=whether the piece offsets are relative to the global origin, or the parent offset}}

{{tag|name=nodenamesfromids|type=bool|default=false
|description=uses names as unique object identifiers, instead of node ids. Useful for non-Blender .dae files. New in 104 maintenance 1153-gfb53422}}

== pieces ==
Specifies the hierarchy of objects
&lt;code&gt;&lt;pre&gt;model = {
    pieces = {
        piecename = {
            offset = {0.0, 0.0, 0.0},
            anotherpiecename = {
                offset = {0.0, 0.0, 0.0},
                ...
            },
            ...
        },
    },
    ...
}
return model&lt;/pre&gt;&lt;/code&gt;

{{tag|name=name|type=string|special=Required
|description=each piece name needs to correspond to an object in the mesh file. For an .obj file it would be the &quot;o&quot; tag}}

{{tag|name=offset|type=float3
|description=the offset of the piece vertices either in parent or world space}}

[[Category:3D Models]]</text>
      <sha1>m4tqs4qps6j5w5n9l3ftoeiyot3quym</sha1>
    </revision>
  </page>
  <page>
    <title>3DModels:AssimpWorkflow</title>
    <ns>0</ns>
    <id>3817</id>
    <revision>
      <id>30478</id>
      <parentid>30477</parentid>
      <timestamp>2017-10-03T04:34:34Z</timestamp>
      <contributor>
        <username>Maddox</username>
        <id>2934</id>
      </contributor>
      <comment>/* Other File Formats */ minor fix to the alpha-saving format now used by PS</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5184">[[Category:3D Models]]
== Standard Assimp Workflow ==

This Workflow is provided for a standard 3D Modeling package using the Z = forward, Y = upwards convention, like Maya, Modo or Lightwave. You can also use Blender for ASSIMP, but it won't be covered here. Bear in mind that the default DAE/FBX exporter from Maya might present issues with the texture overriding options of the model .lua script (version tested: Maya 2017). 3rd-Party DAE exporters from Maya might suit you best.

I. In the 3D Modeling Package:
# Create your models as usual, after making sure all separate pieces share a single UV set. There shouldn't be more than one UV set in the file. All packages have a way to merge multiple UV sets as needed, bear in mind that in some of them you need to combine all objects first.
# To set the separate pieces pivot points, ''don't use your modeling package's set pivot functionality'', it'll usually reset it to the world's origin (0,0,0) upon save to .dae. Instead, add an empty object / locator, move it to where you want the pivot to be, and parent the actual mesh to that object.
# Remember Spring uses a quite unique coordinates system, which probably won't correspond to your 3D Apps for rotation of pieces.

II. In Photoshop:

# Install the DDS export/import plugin ([[3DModels:AssimpWorkflow#Other File Formats|Other image file formats]]). If you have an older Photoshop, you can use nVidia's older 32-bit release. If you use a newer Photoshop (tested on CC.2017) make sure you download this amazing open source plugin [http://fnordware.blogspot.com.br/2014/09/dds-plug-in-for-after-effects-and.html here]
# With the main (diffuse) texture opened, select the areas of the UV you want to have team color on. Select &gt; Save Selection, click ok. A new 'Alpha 1' channel will be created and accessible from Photoshop's 'Channels' panel, usually docked as a tab next to 'Layers'.
# Use 'Levels' (Ctrl+L) to make sure you have no pure black or white in the Alpha Channel. First select the Alpha Channel from the Channels tab of the Layer panel. In the 'Output Levels' box (at the bottom) set the left field to 5 and the right field to 250.
# Click 'Save As', select DDS file format. Make sure to keep 'Alpha Channels' selected
# In the 'DDS Options' panel, select Format 'DXT5' (for main/team texture), keep 'Mipmap' and the Alpha Channel enabled (usually 'Alpha 1'). No need to mess with anything else, defaults are fine. Save the texture to your mod's 'unittextures' folder.
# Now it's time to create your 2nd texture. ''If you don't, the model will show all transparent in-game and you'll keep scratching your head.'' A quick way to do that, if you don't want to spend time properly separating the channels, is to turn the RGB image into grayscale (Image &gt; Adjust &gt; Hue Saturation, set Saturation to 0). Now select the Alpha Channel again, hit D (default colors) then Ctrl+Delete (Fill layer with bg color, white in this case).
# Save the 2nd texture as DDS to your mod's 'unittextures' folder too, this time using DXT1 format, with Alpha selected.

III. In Spring:

# Place your spanking new DDS textures in the '\unittextures' folder of your game/mod
# In your unit's .lua file (the UnitDef one), set object = &quot;3dmeshname.dae&quot;, replacing the filename with your own model name of course. You need to add the .dae extension for Spring to load this file instead of searching for an .s3o file
## Attention: For the FeatureDef property of the UnitDef, its inner 'object' value shouldn't take the extension, or else Spring will fail loading it. Also make sure the corpse property is set to that same value. Eg.:
 &lt;nowiki&gt;
		corpse = &quot;3dmeshname&quot;,
		featuredefs = {
			dead = {
				object = &quot;3dmeshname&quot;,
			}
		}&lt;/nowiki&gt;
# Place your .dae file in the objects3d folder
# Add a new .lua file to the objects3d folder, in our case &quot;3dmeshname.dae.lua&quot;
# Add the following code to it, editing the field values as needed. `tex2` is commented out, but your 2nd unit texture (for reflectivity/glow/clipping) may also be defined here.
 &lt;nowiki&gt;
	model = {
	      radius = 25.0,
	      height = 40,
	      tex1 = &quot;3dmeshname_tex.dds&quot;,
	      tex2 = &quot;3dmeshname_tex2.dds&quot;,
	      midpos = {0,0,0},
	}
	return model
&lt;/nowiki&gt;

Done. Go test your new unit model and texture in-game.

== Other File Formats ==

DDS is a native nVidia format, it holds all mipmaps and has many great image compression algorithms. Bear in mind that the image packed inside DDS can't be altered (like &quot;flipped vertically&quot;) through commands in the model configuration .lua file. 
If you don't want to use DDS for any reason, like not having support in your image app, make sure to use TARGA (.TGA) 32-bits. That's because, although ASSIMP also supports JPG, PNG, and BMP, the first has no support for alpha channels and the other two, for optmization reasons, may embed the alpha channel in a non-standard way. In Photoshop, until version CS6, PNG and BMP saved their alpha channels separately, after that version and up to the latest (CC.2017 at the time of this writing) it embeds the alpha information in the RGB channels. TARGA format always saves the alpha channel separately, as expected by ASSIMP.</text>
      <sha1>t22taifrdz9rqoxzsiy2hjpee3os1rb</sha1>
    </revision>
  </page>
  <page>
    <title>3DModels:Textures</title>
    <ns>0</ns>
    <id>1010</id>
    <revision>
      <id>30467</id>
      <parentid>30466</parentid>
      <timestamp>2017-09-22T01:02:27Z</timestamp>
      <contributor>
        <username>Maddox</username>
        <id>2934</id>
      </contributor>
      <minor/>
      <comment>cleanup</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11107">[[Engine_Development|Development]] &lt; [[Game_and_Unit_development|Game Development]] &lt; {{FULLPAGENAME}}

==Textures for S3O==

S3O has some tricky bits.  One of them is learning to use the right texture formats to achieve your goals.  Luckily for would-be content developers, Spring is very forgiving about image file-types, and allows users to make use of the TGA, PNG, BMP and DDS image file formats.

S3Os that are being rendered with Spring's ARB shaders (i.e., the default rendering pipeline) have &lt;u&gt;two&lt;/u&gt; textures, each of which is supposed to be RGBA, not just RGB- i.e., 32-bit, not 24-bit.  The alpha channel, which something many new modelers / painters aren't familiar with, has specific uses.  If you don't know what an alpha channel is, please Google it and read a bit before continuing with this lesson.

===Texture1=== 

This texture is used to store the color values of the model (i.e., what people usually call the &quot;skin&quot;) and the team-color values are stored in the alpha channel, as a grayscale, where white is pure team-color, black is none at all, and all gray values are in between.  This is blended with the color values, reflective and glow values to arrive at a final color in the engine.  Until you have more experience with graphics programming, it's enough to know that if you don't put any colors into your alpha channel, the model won't have team-color, and if you fill it with white, you will not see your colors at all.

===Texture2===

This is the &quot;secondary&quot; texture, but it is probably the most important, in terms of your final quality.  

This texture uses RGBA, just like Texture1, but it uses each color channel indepedently, due to the way the ARB shader works.  If you haven't learned to view the Channels in your images yet, this is where you should start learning, right now.  To get the most out of this area of Spring (or for that matter, practically any game engine these days) it's important to understand how to work with image channels for precise control over the color values of any given pixel.

Green values are reflectivity.  The more green in a given pixel, the more reflective it will be.

Red values are glow.  The more red in a given pixel, the more glow it will have, overriding the light levels in a scene.  A white Texture1 pixel with a totally red Texture2 pixel will always be completely white, no matter what.

Blue values do not have a use, in the standard ARB shader.  There are variants of the ARB shader available, where the blue value does various things.  These derivative versions of Spring's ARB shader code are Open Source, so please ask around if you want to know more about these, people will be happy to share them with you.

The alpha channel is one bit, if you're using Spring's default ARB shader.  Black pixels == &quot;clear&quot;, and will not be rendered at all.  White pixels are &quot;solid&quot;.  This can be used to create &quot;holes&quot; in your models, etc.

===Texture Formats For S3O===

Spring supports PNG, JPG, TGA, DDS, and BMP.

TGA and PNG have no performance advantages, are rendered upside-down in [[upspring]] (which makes it hard to see if the final model is correct, without running the engine), and take up full texture RAM on the GPU.  Neither format is recommended, but they are easier for newbies to use.

DDS is the preferred image format, and is what UpSpring was designed to use.

===General Guidelines For DDS Textures===

* It is recommended to use DXT5 or DXT3 compression for Texture 1, and DXT1 with alpha channel for Texture2
* Turn on mipmaps.  You MUST make all of the mipmaps.  Not one, not two, not four... all of them.  This means when making a DDS, it may take a few moments to compress, especially if it's large.  This is normal, do not be alarmed.
* If your texture is invisible ingame or is just plain black/white, make sure you have turned on Mipmaps, set a radius and height for your model in UpSpring, and not have pure black or white backgrounds (255,255,255)/(0,0,0), set them to anything other than those.
* DDS requires specific settings, in order to reduce compression artifacts and sharpen the mipmaps so that the resulting images look their best in Spring.  This gives you much more control over quality than PNG or TGA, where the end-user's hardware determines what the mipmaps look like (which frequently will look a lot worse than DDS), but it requires some study.

[http://developer.nvidia.com/object/photoshop_dds_plugins.html However, if you have a 32-bits Photoshop, you can just get the nVidia DDS Plugin from here], and use [http://www.wolfegames.com/TA_Section/Standard_DDS_Settings.7z Argh's DDS compression settings], which work well with DXT1, DXT3 and DXT5, but are not optimized for DXT5 normalmaps. Due to their intricacy, normal maps are better left uncompressed, if you can afford the extra disk space.

If you use a newer Photoshop, especially a 64-bits version which's not compatible to the older nVidia release, make sure you [http://fnordware.blogspot.com.br/2014/09/dds-plug-in-for-after-effects-and.html download and use this amazing open source plugin instead.]

You can find a more detailed guide of how to set up a .dae + .dds model in Spring [https://springrts.com/wiki/3DModels:AssimpWorkflow here.]

==Textures - Assimp Model Formats (DAE,MDL,MD3 and others except OBJ)==
Assimp is a library used by Spring to handle a large variety of common model formats. In general Assimp follows the same rules for textures as S3O models but there are some issues to be aware of - especially with regards to DDS textures.

Assimp supports a metadata file (&lt;modelname&gt;.lua or &lt;modelname&gt;.&lt;model extension&gt;.lua) in the same directory as your model. The file should return a lua table that will be hereafter refered to simply as 'metadata'.

'''Note 1:''' It's important to know that there are 2 seperate texture loading processes. DDS textures are passed directly from Spring to the nv_dds library (NVIDIA DDS Library). All other Assimp textures are handled by Spring's S30Texture and Bitmap classes which perform loading and editing tasks via the DevIL library. For content developers the primary distinction is that DDS images cannot be modified by Spring and as a consequence ''the metadata properties invertteamcolor and fliptextures have no effect on DDS.''
 
'''Note 2:''' Unlike S3O models the Assimp loader allows you to define relative paths to your texture in the metadata using the string keys tex1 and tex2.

'''Issue 1:''' DDS has different coordinates (y-axis flip) from other textures because it was designed for DirectX which is backwards from OpenGL and normal image orientation. Assimp can flip textures for you using fliptextures=true/false in your metadata. By default this value is false. This key has no effect on DDS however (See Note 1).

'''Issue 2:''' S3O textures use the alpha channel of tex1 for teamcolor however it treats opaque (0 alpha) as full teamcolor. This makes a normal JPG/PNG appear entirely as teamcolor and makes those textures hard to edit in normal tools. Assimp tries to correct this issue by inverting teamcolor automatically so &quot;normal&quot; textures work as expected. If you took a texture from an existing Spring model or created your texture following any existing S3O texture guide then it will be incorrect in Assimp UNLESS you create a metadata file with an invertteamcolor=false telling Assimp to leave it alone. If you create a texture/model from any other source it will just work. As far as Assimp (and common sense) is concerned existing Spring textures are busted and you should probably just invert your alpha channel in an image editor prior to moving content from S3O to Assimp. ''Be aware that DDS are not automatically inverted (or controlled by inverteamcolor) so PNG/JPG and DDS textures may be the inverse of each other for teamcolor (See Note 1)''. If you convert PNG-&gt;DDS your models may turn red until you invert your alpha in an image editor.

'''Issue 3:''' Spring does not currently support per-node/per-piece textures or other multitexture arrangements. Your textures must be per-model and follow the rules for S3O (see above).

==Textures- 3DO (i.e., OTA game ports)==
Textures are stored in the &lt;b&gt;UnitTextures&lt;/b&gt; directory of your game. They may be Windows .BMP format at 24 bit color depth, or a Targa .TGA file in 32 bit (alpha layer) color depth.

==Rules for textures==
OTA mods using 3DO models store their textures in a Texture Atlas.  This is a single 2048 / 2048 image that is built by Spring automatically from the small images used as tiles in OTA.  Thus, the total size of all of your 3DO textures cannot exceed 2048 / 2048.  This is rarely a problem, if you're just porting an OTA mod.

===Logo Textures / Team Color===
In the case of logo textures, you must edit the file &lt;b&gt;teamtex.txt&lt;/b&gt; in the &lt;b&gt;UnitTextures/tatex&lt;/b&gt; directory (or in your game / mod, as it will overwrite Spring's values).

Just add the name of your texture to the list, without the &quot;00&quot;. For example, if you wanted to add ArmLogo00.bmp to the team color list, you would put ArmLogo in the teamtex.txt file. The image must have only values in the Red, Blue and Alpha channels, to function correctly as teamcolor- the Green channel should be left black.  So the resulting image will look &quot;purple&quot;.  If you are not experienced working with color channels, ask somebody for help, or read some tutorials.

===Reflections===
To make a texture reflect its environment, you must create a Targa file with an alpha layer with a program such as the [http://gimp-win.sourceforge.net/stable.html GIMP] or [http://www.adobe.com/products/tryadobe/main.jsp#product=39 Photoshop]. 

The procedure is the same as making team-color textures, but with two twists:

1.  &lt;u&gt;Don't&lt;/u&gt; name the file in the &lt;b&gt;teamtex.txt&lt;/b&gt; file.

2.  You can use all four channels- RGBA, for full colors and alpha- and the alpha layer's white / black values determine how reflective the object is.  If white, that area is totally reflective.  If black, it will not reflect the world at all.  It should be noted that some image editors have trouble setting alpha layers to 100% and cause Spring to display the image as completely black, hence it is suggested you make it about 99%.

===Conversion from .GAF===
In Total Annihilation textures were stored in /Textures/*.gaf. If you're porting an old TA mods, there will be hundreds of textures to convert to Spring format. There is an easy way to automatically extract all the texture from all the .gaf into well named .bmp: Download [http://www.planetannihilation.com/bsr/downloads/GAFDump.zip GAF Dump]. Then run GAFDump.exe, from inside the folder your textures are, and with the '''-b''' commandline option.

To save yourself some more trouble, we strongly suggest that you use 3DOBleacher to remove all of the &quot;shading&quot; versions of the textures from the mod you're porting, as well.  This will save a huge amount of space on the Texture Atlas and the final results will look a lot more professional in Spring.  3DOBleacher requires some reading and a lot of work to set up, however.

[[Category:3D Models]]</text>
      <sha1>8rkswc1igx7udd2tsorodnb26jxrfix</sha1>
    </revision>
  </page>
  <page>
    <title>3DModels:Wings3DTutorial</title>
    <ns>0</ns>
    <id>1290</id>
    <revision>
      <id>27913</id>
      <parentid>26794</parentid>
      <timestamp>2013-10-29T18:13:32Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>Flozi moved page [[Units:CreateModel]] to [[3DModels:Wings3DTutorial]]: bye bye, Units:</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4973">=== Prerequisites ===

Firstly you're going to need a modelling programme, for this tutorial I'll be using [http://www.wings3d.com Wings3D]. It's free and small so go download it now!(it seems [http://www.blender.org/] is beter and free too but have a lot of useless option for this work like making movie or game engine ...)
Also you're going to need [[upspring]], so get that as well.
This tutorial will use Photoshop but the same principles will apply to GIMP or any image editor of your choice.

=== Making the Model and UVmap ===

I'll assume you know how to model in wings and have your model ready, so I am going to be using a three piece tank, chassis, turret and barrel...

[[Image:Creating1.JPG]]

So, the next step is to UV map it, this isn't as hard as it has been made out to be.
Firstly, you'll want to combine it, then UVmap-&gt;ForceSegment. This will bring up your unit in the UV mapping window, from there you'll want to use theSegment-&gt;Projection function, which will leave your model looking something like this...

[[Image:Creating2.JPG]]

The different colours show the different pieces your model will be broken up into when its placed on the texture.
Now to get it there, you'll want to go Continue-&gt;Unfolding, which will make the UVmap and leave you with something that looks like this...

http://img240.imageshack.us/img240/1449/creating37uy.jpg

A nice pattern, but not very useful for when we want to texture it, so rightclick-&gt;CreateTexture, and use these parameters for now...

http://img111.imageshack.us/img111/8757/creating45wi.jpg

And that will give us this...

[[Image:Creating5.JPG]]

That's what you'll draw your texture onto later, but for now, close that window and head back to the main view. Now we want to convert the model to a format that UpSpring can use, OBJ suits our purposes.

However to animate it, we will need to have it in seperate pieces, so seperate it to undo the combine we used to help us UVmap. Now select a piece, then go File-&gt;ExportSelected-&gt;Wavefront (obj)... and repeat for all the other pieces. Make sure you Export SELECTED rather than just exporting.

So now you have 3 obj files called something like chassis.obj, turret.obj and barrel.obj. Now you can close Wings3D and crack open upspring.

Load your base object by going File-&gt;LoadModel and choosing your chassis, it should now appear in the views of UpSpring. First thing you want to do with it is give it a name. Chassis would be an appropriate one, so go to the Objects tab on your right and you'll see an empty list of pieces, and select where it should be,and give it a name so you can see it...

[[Image:Creating6.png]]

Now with that object still selected, you'll want to import the piece that will be attached to it, the turret, to do this we don't want to load a new model because that will delete the one we already have, so instead we go Object-&gt;Insert Object from file and select turret.obj.

Now you'll want to give the turret piece a name, I suggest turret, then repeat the same action but with the turret only selected and import the barrel.

The final piece you'll want to add is a fire point, click add empty and name it flare.

Now unless your model was enormous in the modeller you'll want to scale it up to make it look alright in spring and be easier to handling in UpSpring, so go to the objects tab if you're not still there, and with the chassis selected, set all the scale values to about 10 to start of with, then click apply transform.

Next to make sure the pieces turn around the right spots when you animate it we have to set the orrigins, these are represented by red dots in the upspring view windows.
To do this for the turret we select it and switch to move mode, represented by a four pointed arrow on the left side of your screen. Now move it so that the point you want it to rotate around is at (0,0,0) in the 2d views, then press apply transform and move it back to where it should actually be on the model.

For the next piece you need to move where you want the barrel to rotate around to the orrigin of the turret, hit apply transform, and move back.
For the firepoint you can just move it into place since all it is effectively is  a orrigin.

Now you'll probably want to switch back to view mode so you don't accidentally move your pieces around, do this by clicking on the crosshair at the top left under File.

Remember that texture we got when we exported the model? Nows when we get that to display properly in spring. Open it in Photoshop and the first thing you'll want to do is go flip it vertically, spring requires you do this, although I have no idea why, but it can be achieved by going Image-&gt;Rotate Canvas-&gt;Flip Canvas Vertically.

The second thing we want to do to the texture is add an alpha layer and stick it at about 99% darkness, this makes sure spring displays it correctly, you can also draw lighter patches that will appear as team colour.
&lt;b&gt;To Be Continued...&lt;/b&gt;

[[Category:3D Models]]</text>
      <sha1>aly39qhkbr4f2ylwjz3shrepha8aeyn</sha1>
    </revision>
  </page>
  <page>
    <title>3DModels:obj meta</title>
    <ns>0</ns>
    <id>3302</id>
    <revision>
      <id>28760</id>
      <parentid>26635</parentid>
      <timestamp>2014-10-02T17:03:32Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>/* Data Types */ template</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2810">= .obj Mesh Meta Reference =
so because wavefront .obj files dont contain all the required information for 3d models in spring this extra file was needed to fill in the missing pieces.

the file accompanies your mesh such that:

&lt;code&gt;objects3d/myobjmesh.obj&lt;/code&gt;

&lt;code&gt;objects3d/myobjmesh.lua&lt;/code&gt; (this is the meta info file)

variables are organised as such:
{{tag|name=VariableName|type=type|range=[valid range]|special=Required|default=value
|description=Description}}

If you notice something is incorrect, fix it please!
==Source==
The engine source code which reads this file is viewable here:

* {{sourcelink|file=rts/Rendering/Models/OBJParser.cpp}}

= General Formatting =
check [http://www.lua.org/docs.html Lua Documentation].

=Data Types=
{{DataTypes}}

= Notes =
* each model-table must define EXACTLY one root-piece in its &quot;pieces&quot; sub-table
* the script MUST return exactly one model-table (which may be named arbitrarily)
* the tree must reference ONLY object names defined in the .obj file
* a piece-table key may NOT be &quot;name&quot; or &quot;offset&quot; (these are reserved keywords)
= Sections =
== meshname.lua ==
&lt;code&gt;&lt;pre&gt;meshname = {
    pieces = {
       ...
    },

    radius = 0,
    midpos = 0,
    tex1 = &quot;&quot;,
    --tex2 = &quot;&quot;,
    numpieces = 1,

    globalvertexoffset = true,
    localpieceoffset = true,
}
return meshname&lt;/pre&gt;&lt;/code&gt;

===== meshname =====
name of your mesh...

{{tag|name=midpos|type=float3|special=Required
|description=the local of the median point of the mesh from the origin}}

{{tag|name=radius|type=float|special=Required
|description=from the midpos the radius of the mesh, used for occlusion culling}}

{{tag|name=tex1|type=string
|description=filename of the texture image to use for diffuse and teamcolor}}

{{tag|name=tex2|type=string
|description=filename of the texture image to use for ambient, specular and transparency}}

{{tag|name=globalvertexoffsets|type=bool
|description=whether the vertex coordinates are relative to the global origin, or the local origin}}

{{tag|name=localpieceoffsets|type=bool
|description=whether the piece offsets are relative to the global origin, or the parent offset}}

== pieces ==
Specifies the hierarchy of objects
&lt;code&gt;&lt;pre&gt;meshname = {
    pieces = {
        piecename = {
            offset = {0.0, 0.0, 0.0},
            anotherpiecename = {
                offset = {0.0, 0.0, 0.0},
                ...
            },
            ...
        },
    },
    ...
}
return meshname&lt;/pre&gt;&lt;/code&gt;

{{tag|name=name|type=string|special=Required
|description=each piece name needs to correspond to an object in the mesh file. For an .obj file it would be the &quot;o&quot; tag}}

{{tag|name=offset|type=float3|special=Required
|description=the offset of the piece vertices either in parent or world space}}
[[Category:3D Models]]</text>
      <sha1>m3iimbt01571g1vl2zfneab6wts85wn</sha1>
    </revision>
  </page>
  <page>
    <title>4v4BA</title>
    <ns>0</ns>
    <id>2780</id>
    <revision>
      <id>26659</id>
      <parentid>26476</parentid>
      <timestamp>2013-03-20T17:30:02Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>1cat</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2665">= This is a list of around 45 good maps for 4v4 games (BA) =


'''Picked from tasclient maps page (ordered from smaller to bigger)'''

May give other order when i have the time.

See the [http://mapinfo.adune.nl/?act=show&amp;do=1&amp;maps=FolsomDamFinal.sd7%0D%0AFolsomDamFlooded.sd7%0D%0AHundred+isles+remake%0D%0ACrossing_4_final.sd7%0D%0AKappa_Basin.sd7%0D%0AValles_Marineris_v2.sd7%0D%0AEscarpment-v2%0D%0ASierra-v2.sd7%0D%0ASupreme_Lake_Dry_v2_fixed_loading.sd7%0D%0ASupreme_Lake_V3.sd7%0D%0ATitan-v2.sd7%0D%0A1944+Titan%0D%0AMotkottava_Nakkivahvero-v01%0D%0ANuclear_Winter_v1.sd7%0D%0ADeserted_Gully-v05%0D%0ACastel_godsV21%0D%0ASplinteredTropicsV2%0D%0AXenolithic_v3%0D%0AZeus05_A%0D%0AFrozenFourwayV2.sd7%0D%0ASmall_Supreme_Battlefield_V2.sd7%0D%0ASmall_Supreme_Islands_v2.sd7%0D%0ASmall_Supreme_Battlefield_Dry.sd7%0D%0Ariverbed%0D%0A2_Mountains_Battlefield%0D%0Acharlieinthehillsv21.sd7%0D%0AAmazonDeltav20%0D%0ATalus%0D%0ATangerine%0D%0AArcticPlainsV2.1%0D%0AFour_Lakes_V2%0D%0ATundra%0D%0AAltored_Arctic%0D%0ADigSite%0D%0ALand_Bridge_BETA2.sd7%0D%0AMercury_v1%0D%0AGreenValley%0D%0AEE-RiverGlade-v02%0D%0AIslands_In_War_1.0%0D%0AIslandDivide%0D%0ADowns_of_Destruction.sd7%0D%0AKochCanyon-v02%0D%0APorky_Islands%0D%0AConquest_of_Paradise_v1%0D%0AScorpioBattleground+ same list with nice minimaps] thanks to http://mapinfo.adune.nl

[http://mapinfo.adune.nl/?act=show&amp;do=1&amp;maps=Kappa_Basin.sd7%0D%0AEpsilonSiegeDry_alpha2.sd7%0D%0ADeltaSiegeDry.sd7%0D%0AFort_Delta.sd7%0D%0ARustyDelta_v2.sd7%0D%0ATalenFortB1.sd7%0D%0ADSD_Balanced.sd7%0D%0ANuclear_Winter_1944.sd7%0D%0ADesertSiege_v2.sd7%0D%0AValles_Marineris.sd7%0D%0ASupreme_Lake_Dry_V5.sd7%0D%0ALLTAComplexV2.sd7%0D%0AIsisDelta.sd7 Another interesting list], maybe overlapping this one, not checked.

*Folsom Dam
*Folsom Dam Flooded
*Hundred isles remake
*Crossing 4 final
*Kappa Basin
*Valles Marineris v2
*Escarpment-v2
*Sierra v2
*Supreme lake dry v2
*Supreme lake v3
*Titan v2 / 1944 Titan
*Motkottava_Nakkivahvero-v01
*Nuclear winter v1
*Deserted_Gully-v05
*Castel_godsV21
*SplinteredTropicsV2
*Xenolithic_v3
*Zeus05_A
*FrozenFourwayV2
*Small_Supreme_Battlefield_V2
*Small_Supreme_Islands_v2
*Small_Supreme_Battlefield_Dry
*riverbed
*2_Mountains_Battlefield
*charlieinthehillsv21
*AmazonDeltav20
*Talus
*Tangerine
*ArcticPlainsV2.1
*Four_Lakes_V2
*Tundra
*Altored_Arctic
*DigSite
*Land_Bridge_BETA2
*Mercury_v1
*GreenValley
*EE-RiverGlade-v02
*Islands_In_War_1.0
*IslandDivide
*Downs_of_Destruction (sw vs ne)
*KochCanyon-v02
*Porky_Islands
*Conquest_of_Paradise_v1
*ScorpioBattleground

Others worth trying from time to time:

*Banana dunes
*Frostbitev2
*Hard charge


[[Category:Balanced Annihilation]]</text>
      <sha1>lqcxcxl2j4smnfyu4k7tlo9ghfzo5u7</sha1>
    </revision>
  </page>
  <page>
    <title>AA</title>
    <ns>0</ns>
    <id>1131</id>
    <redirect title="Absolute Annihilation" />
    <revision>
      <id>10959</id>
      <parentid>3212</parentid>
      <timestamp>2006-03-29T00:08:31Z</timestamp>
      <contributor>
        <username>Egarwaen</username>
        <id>207</id>
      </contributor>
      <comment>Redirect to the AA mod page.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="35">#REDIRECT [[Absolute Annihilation]]</text>
      <sha1>2zn51vyvnn7lkd1vu5zf1xnlagj88ha</sha1>
    </revision>
  </page>
  <page>
    <title>AAI</title>
    <ns>0</ns>
    <id>1178</id>
    <redirect title="AI:AAI" />
    <revision>
      <id>11005</id>
      <timestamp>2005-12-23T10:48:24Z</timestamp>
      <contributor>
        <username>Hoehrer</username>
        <id>103</id>
      </contributor>
      <minor/>
      <comment>redirect to AI:AAI</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20">#REDIRECT [[AI:AAI]]</text>
      <sha1>6l3mnn14onkmj45a192x0h6qjclbqtx</sha1>
    </revision>
  </page>
  <page>
    <title>AF</title>
    <ns>0</ns>
    <id>1777</id>
    <redirect title="User:AF" />
    <revision>
      <id>11591</id>
      <timestamp>2006-09-16T02:50:53Z</timestamp>
      <contributor>
        <username>FoeOfTheBee</username>
        <id>20</id>
      </contributor>
      <comment>AF moved to User:AF</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="22">#REDIRECT [[User:AF]]
</text>
      <sha1>8sgv3roy7vqppuf1visf4cgg3qukla4</sha1>
    </revision>
  </page>
  <page>
    <title>AI</title>
    <ns>0</ns>
    <id>2634</id>
    <redirect title="AI:Skirmish:List" />
    <revision>
      <id>21578</id>
      <parentid>16269</parentid>
      <timestamp>2011-04-02T18:12:32Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>Redirected page to [[AI:Skirmish:List]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30">#REDIRECT [[AI:Skirmish:List]]</text>
      <sha1>d68202uhh4wfwfeegp2bungbhf0025f</sha1>
    </revision>
  </page>
  <page>
    <title>AI:AAI</title>
    <ns>0</ns>
    <id>1165</id>
    <revision>
      <id>26995</id>
      <parentid>26994</parentid>
      <timestamp>2013-04-12T02:43:51Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>/* License */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2574">{{AI|AAI|[[User:Submarine|Submarine]]|V0.9|XTA, BA, AA, TA:WD, SWTA, TLL, KuroTA, FF, Gundam, TA Battle Fleet, Spring 1944|Under Active Development| To 0.70 Closed Source, &lt;br&gt;from 0.70 Open Source (GPL)|C|LegacyCpp}}

'''AAI''' is being developed by [[User:Submarine|Submarine]]. It is rather stable and supports most popular [[games]] (e.g. AA, TA:WD, XTA, SWTA and TLL). 

AAI attempts to learn about the mod while playing. However it will take at least a few games, in the beginning AAI will suffer from ineffective build choices. Not only does it keep track of combat efficiency of single units it will also try to learn about which unit categories are used on a specific map and how often it is attacked by certain units (e.g. air units instead of ground units). Therefore AAI will in a limited way adapt to its opponent's playstyle. It also places its defences according to where it has been attacked. 

Since AAI 0.50, a new economy management has been implemented. AAI will build all kinds of power plants, storages and metal makers according to its current demand and situation. AAI will also try to exchange metal extractors with better versions once they are available.

AAI will use its airforce to weaken enemy defences, destroy outposts and support ground assault units.

Since version 0.60, limited water support has been implemented. However AAI will have problems especially on mixed land/water maps.

AAI needs a separate config file to be able to run with a specific mod. There are cfg files available for most common games, however it's not very hard to create one yourself, see readme.txt and mod cfg helpfiles for more information. If AAI cannot find a suitable mod cfg file it will display an error message and print the name of the file it had been looking for in the ai log.

=== Info ===
*Playability : especially on big maps with lots of metal it will put up a decent fight (play against 3 AAIs on Comet Catcher Remake :) )
*Limitations : AAI does not build mobile artillery so far and there is no support for nukes/anti nukes etc.

== License ==
* AAI 0.7 (and above) will have a license change from unknown license to GPL (version not specified, ask Submarine for futher details)

=== Related forum threads ===
* [http://springrts.com/phpbb/viewtopic.php?f=15&amp;t=18941 &quot;AAI v0.90&quot;]
* [http://springrts.com/phpbb/viewtopic.php?f=15&amp;t=13467 &quot;AAI v0.86&quot;]
* [http://springrts.com/phpbb/viewtopic.php?t=6094 &quot;AAI v0.70&quot;]
* [http://springrts.com/phpbb/viewtopic.php?t=7539 &quot;AAI v0.75&quot;]


'''[[AI:Skirmish:List|&lt;- Back to AI page]]'''

[[Category: AI]]</text>
      <sha1>1vjv2y36xesjeatxjrbokccvtdn5ddl</sha1>
    </revision>
  </page>
  <page>
    <title>AI:AGAI</title>
    <ns>0</ns>
    <id>2799</id>
    <revision>
      <id>18899</id>
      <parentid>18064</parentid>
      <timestamp>2010-03-13T17:02:50Z</timestamp>
      <contributor>
        <username>Koshi</username>
        <id>2371</id>
      </contributor>
      <comment>fix category</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="70">For more information see http://abma.de/projects/agai

[[Category:AI]]</text>
      <sha1>sby8xx99k2lq9dg6tzm0k3b8a5didm3</sha1>
    </revision>
  </page>
  <page>
    <title>AI:AIInterface Development</title>
    <ns>0</ns>
    <id>2656</id>
    <redirect title="AI:Development:Interface" />
    <revision>
      <id>16481</id>
      <timestamp>2009-06-03T06:18:01Z</timestamp>
      <contributor>
        <username>Hoijui</username>
        <id>2288</id>
      </contributor>
      <comment>[[AI:AIInterface Development]] moved to [[AI:Development:Interface]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="38">#REDIRECT [[AI:Development:Interface]]</text>
      <sha1>kv960w6nomn9worl2bmgb3vfu9i9svp</sha1>
    </revision>
  </page>
  <page>
    <title>AI:AI Development</title>
    <ns>0</ns>
    <id>2660</id>
    <redirect title="AI:Links" />
    <revision>
      <id>16508</id>
      <timestamp>2009-06-03T08:51:11Z</timestamp>
      <contributor>
        <username>Hoijui</username>
        <id>2288</id>
      </contributor>
      <comment>[[AI:AI Development]] moved to [[AI:Links]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="22">#REDIRECT [[AI:Links]]</text>
      <sha1>hzoegdenyecog8trxnkn7lkkgtbwnke</sha1>
    </revision>
  </page>
  <page>
    <title>AI:BAI</title>
    <ns>0</ns>
    <id>2854</id>
    <revision>
      <id>19269</id>
      <parentid>19268</parentid>
      <timestamp>2010-05-08T14:57:52Z</timestamp>
      <contributor>
        <username>Hoijui</username>
        <id>2288</id>
      </contributor>
      <minor/>
      <comment>full name</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="424">{{AI|Balanced Annihiliation AI|Petah|0.1|BA|Under Active Development|[http://creativecommons.org/licenses/by/3.0/ Creative Commons Attribution License 3.0]|Java|JavaOO}}

Project page:
http://github.com/Petah/BAI

Sources (git):
'''git://github.com/Petah/BAI.git'''

=== Related forum threads ===
* [http://springrts.com/phpbb/viewtopic.php?f=15&amp;t=22590 BAI]


'''[[AI:Skirmish:List|&lt;- Back to AI page]]'''

[[Category: AI]]</text>
      <sha1>8eqxo3s9wi2kxv03fet0be6o5jobkk0</sha1>
    </revision>
  </page>
  <page>
    <title>AI:BKPAI</title>
    <ns>0</ns>
    <id>2667</id>
    <revision>
      <id>16580</id>
      <parentid>16575</parentid>
      <timestamp>2009-06-08T10:57:47Z</timestamp>
      <contributor>
        <username>Hoijui</username>
        <id>2288</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="812">{{AI|BKPAI|Baczek|1.2|Kernel Panic|Under Active Development|???|C|LegacyCpp}}

== Baczek's Kernel Panic AI ==

==== Description ====
This Skirmish AI works with [[Kernel_Panic|Kernel Panic]] only, but is therefore a quite decent opponent.

For a more detailed description, see [[#Forum Threads|the forum thread]].

==== Forum Threads ====
* [http://springrts.com/phpbb/viewtopic.php?f=15&amp;t=18960 Baczek's KP AI]

==== Download ====
For downloading (Windows) binaries, see [[#Forum Threads|the forum thread]].

The source can be found here:&lt;br&gt;
http://github.com/imbaczek/baczek-kpai/tree/master

==== Bugs ====
'''Known Crashes:'''
* None

Please report bugs under
[http://springrts.com/mantis/ Mantis]
to the AI subproject or to Baczek directly.


'''[[AI:Skirmish:List|&lt;- Back to AI page]]'''

[[Category: AI]]</text>
      <sha1>g7sw6w8stbvcn9bcgsuzh9mgqobbete</sha1>
    </revision>
  </page>
  <page>
    <title>AI:CSAI</title>
    <ns>0</ns>
    <id>1851</id>
    <revision>
      <id>29430</id>
      <parentid>23079</parentid>
      <timestamp>2015-08-09T10:31:30Z</timestamp>
      <contributor>
        <username>Hughperkins</username>
        <id>673</id>
      </contributor>
      <comment>redirect manageddreams.com to hughperkins.com, and add github repo link</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9481">== CSAI ==

CSAI works ok as ARM on land maps, using the AA2.23 or XTA7 mod.

CSAI is written in C#, by Hugh Perkins

== Supported Mods ==

*AA2.23
*XTA7

== Supported Platforms ==

*Windows

== Supported Maps ==

CSAI works best with maps with one large contiguous land segment.

The following maps have been tested and work ok:
*SmallDivide
*CometCatcher Remake v02
*SpeedMetal
*Small Supreme Battlefield

== Screenshots ==

CSAI scout sets off, SSB, XTA7:

[[File:csaivsaai_xta7_ssb_4zippysetsoffsmall.JPG]]

CSAI tanks leave trail of destruction through AAI base, SSB, XTA7:

[[File:csaivsaai_xta7_ssb_23trailofdestructionthroughaaibasesmall.JPG]]

CSAI tanks kill AAI commander on SSB, XTA7:

[[File:csaivsaai_xta7_ssb_25byebyeaaicommandersmall.JPG]]

CSAI (in red) approaches TSI base, SpeedMetal, AA2.23.  That plasma beam could cause some pain.

[[File:csaivstsispeedmetal_arriveatbase.JPG]]

Plasma beam down, CSAI overruns TSI base, SpeedMetal, AA2.23.

[[File:csaivstsispeedmetal_2plasmagoneoverrun.JPG]]

CSAI (in red) attacks AAI, SpeedMetal, AA2.23

[[File:speedmetalzergsmall.JPG]]

CSAI units approach TSI base, SmallDivide, AA2.23

[[File:vstsismalldivide_1_attackgroupapproachingbase.JPG]]

CSAI units kill TSI commander, SmallDivide, AA2.23

[[File:vstsismalldivide_6tsicommanderdies.JPG]]

== Replays ==

Here are some replays to give you an impression of how CSAI fights.

CSAI vs AAI 0.75, XTA7:

Small Supreme Battlefield

*[http://hughperkins.com/csai/061026-SmallSupremeBattlefield-0.73b1-0-csai-vs-aai-xta7.sdf http://hughperkins.com/csai/061026-SmallSupremeBattlefield-0.73b1-0-csai-vs-aai-xta7.sdf] 

CSAI vs AAI 0.75, AA2.23:

*[http://hughperkins.com/csai/061023-SmallDivide-0.73b1-20.sdf http://hughperkins.com/csai/061023-SmallDivide-0.73b1-20.sdf]
*[http://hughperkins.com/csai/061023-CometCatcherRemake-v02-0.73b1-0.sdf http://hughperkins.com/csai/061023-CometCatcherRemake-v02-0.73b1-0.sdf]
*[http://hughperkins.com/csai/061025-SpeedMetal-0.73b1-2.sdf http://hughperkins.com/csai/061025-SpeedMetal-0.73b1-2.sdf]

CSAI vs TSI 0.12, AA2.23:

*[http://hughperkins.com/csai/061025-CometCatcherRemake-v02-0.73b1-3.sdf http://hughperkins.com/csai/061025-CometCatcherRemake-v02-0.73b1-3.sdf]
*[http://hughperkins.com/csai/061025-SpeedMetal-0.73b1-0-csai-vs-tsi-aa223.sdf http://hughperkins.com/csai/061025-SpeedMetal-0.73b1-0-csai-vs-tsi-aa223.sdf]
*[http://hughperkins.com/csai/061025-SmallDivide-0.73b1-0-csai-vs-tsi-aa223.sdf http://hughperkins.com/csai/061025-SmallDivide-0.73b1-0-csai-vs-tsi-aa223.sdf]

== Downloads ==

Latest release:
*[http://hughperkins.com/csai/CSharpAI-20061028.zip http://hughperkins.com/csai/CSharpAI-20061028.zip]

Previous releases:
*[http://hughperkins.com/csai/CSharpAI_20061026b.zip http://hughperkins.com/csai/CSharpAI_20061026b.zip]
*[http://hughperkins.com/csai/CSharpAI_20061026.zip http://hughperkins.com/csai/CSharpAI_20061026.zip]
*[http://hughperkins.com/csai/CSharpAI_20061025.zip http://hughperkins.com/csai/CSharpAI_20061025.zip]
*[http://hughperkins.com/csai/CSharpAI_20061024.zip http://hughperkins.com/csai/CSharpAI_20061024.zip]

== To Install ==

*Ensure that you have the Microsoft Framework .Net 1.1 runtime installed.  You can download this from Microsoft, for free.
*Ensure that you have the latest version of Spring installed, 0.73b.
*Download the latest CSharpAI zipfile from the Downloads section and unzip it.
*Run setup.exe
*Confirm the Spring installation directory
*The CSAI dlls should be automatically installed into the Spring directory

== To use ==

To run the bot:
*create a multiplayer game, using Absolute Annihilation 2.23
*specify start positions as &quot;random&quot; or &quot;fixed&quot;
*click &quot;add bot&quot;
*specify the ai as &quot;csailoader.dll&quot;
*&lt;b&gt;Important: ensure bot plays as ARM&lt;/b&gt;

You can find a logfile in the Spring/AI/CSAI directory, called csharpai_team0.log  , where 0 is the name of the team

== Commands available ==

You can talk to your AI whilst it plays.

Commands to the ai always start with &quot;.csai &quot;, then the command.

Type &quot;.csai help&quot; for a list of available commands.  Here are some of them:

*.csai commanderbuildpower  Commander builds a solar cell near him
*.csai commanderbuildextractor Commander builds a metal extractor on nearest available metal spot
*.csai commandermove 0 1000 1500   Move team 0 commander to position (1000,1500)
*.csai commandergetpos   Ask for commander's current position
*.csai commanderbuild armvp   Ask commander to build a vehicle plant next to him.  Use any valid unit name here (see logfile for list) (must be buildable by arm commander)

*.csai killallfriendly    Kills all units belonging to AI, except for commander  This is sometimes useful during AI testing
*.csai unitcount (countunits?)   Shows number of units currently

*.csai showmetalspots   Show detected optimal metal extractor positions.  Also shows metalspots that have been marked used

*.csai tankscount   Find out how many tanks are available
*.csai tanksmoveto 0 500 1000    Move all team 0 tanks to position 500, 1000

*.csai autoshowenemieson  Shows detected mobile enemies (samson icon) and static enemies (antinuke icon)

== How to beat CSAI ==

Here are some strategies that will kill the current release of CSAI.

Massive concentration of defense near AI's base:

http://hughperkins.com/csai/screenshots/silpkillcsai-3.JPG

Replay:
[http://hughperkins.com/csai/silp3-061031-Core_Faf-0.73b1-2.sdf http://hughperkins.com/csai/silp3-061031-Core_Faf-0.73b1-2.sdf]

== Known issues ==

*All current released versions: on computers where the regional settings specifies the decimal separator as something other than &quot;.&quot;, the metal cache will fail to load correctly.  This means the commander will put extractors along the top of the screen and lose.  This affects computers in France and Germany.

== Release notes ==

=== Release 28 October ===

C  /C# Interface

*corrected critical bug in AICallbackProxy::GetMetalMap()
*augmented number of allowed units to 10000 in AICallbackProxy

CSAI

*(experimental) created setup.exe to facilitate installation

=== Release 26 October 2006 b ===

C  /C# Interface
*No changes

CSAI
*created PackCoordinator architecture
*fixed bug that caused infantry factories to shutdown occasionally when playing XTA
*spreadsearch initiated more aggressively

=== Release 26 October 2006 ===

C  /C# Interface
*No changes

CSAI
*supports XTA 7
*modified Metal algo to prefer spots which are over actual metal, rather than offset to one side
*(experimental) clearance around metal extractors reduced to improve location precision.  NOTE: this may increase unit blocking, to be verified
*you can turn debug on by creating an empty file called &quot;debug.flg&quot; in the ai/csai directory
*(experimental) added search algo for tanks if they havent seen an enemy for about a minute and there's at least 100 of them
*improved radar deployment

=== Release 25 October 2006 ===

C  /C# Interface
*No changes

CSAI
*added support for metal maps
*fixed bug with metalspots being marked used even if not
*added constructor controller, to ensure always at least one constructor
*added anti-sticking patch for constructors
*added memory for buildings to enemycontroller (since buildings cant move)
*corrected bugs in enemy selection algorithm
*trimmed cpu resource drain for stuck constructors
*removed default drawing of detected enemies; you can say &quot;.csai autoshowenemieson&quot; to reactivate this
*removed default drawing of planned construction site; you can say &quot;.csai constructorshownextbuildsiteon&quot; to reactivate this
*experimenting with kbot factory
*experimenting with replacing samsons by jethros
*factories no longer announce their creation
*added AttackPackCoordinator to improve pack grouping

=== Release 24 October 2006 ===

C  /C# Interface
*CSAI.dll moved to AI/CSAI (only CSAIInterfaces.dll remains in Spring root)
*&lt;csailoaderfilename&gt;.xml config file added, to configure which C# AI dll to load
*batchfile building no longer supported (please use nant)
*added IMoveData
*added IUnitDef.movedata
*added all command constants, eg MOVE, SELFD, to Command.cs
*added operators to Float3
*added UnitIsBusy to AICallback (checks GetCurrentUnitCommands returns empty deque)
*documentation moved to wiki at http://springrts.com/wiki/AI:CSAIInterface

CSAI
*added commands to move commander, and get commander to build things
*logfiles moved to AI/CSAI , in line with AI standards
*batchfile building no longer supported (please use nant)
*UnitController added, to register player-owned units
*FactoryController added, to register player-owned factories
*added port of AF's UnitDefHelp
*added architecture for strategies
*event architecture added to CSAI for unitcreated, unitfinished, unitdamaged, etc
*added PowerController to control energy
*added MetalController to control metal
*added TankController to manage tanks (bootstrapping class only)
*added EnemyController to monitor enemies
*added RadarController to manage radars
*added simple heuristic to prevent commander blocking himself in or factories
*added ScoutController
*added Request system to factories, to decide what to build
*documentation moved to wiki at http://springrts.com/wiki/AI:CSAI

== Developer resources ==

You may wish to extend or modify CSAI.  If so, the following pages may be useful:

* github repo: https://github.com/hughperkins/SpringRTS-CSharpAI
*[[CSAI Build Instructions]]  How to build CSAI
*[[AI:CSAIInterface]]   Information on the C  /C# interface
[[Category:AI]]</text>
      <sha1>2kescymowrhkmu2zw4a0nziwwe7fj7f</sha1>
    </revision>
  </page>
  <page>
    <title>AI:CSAIInterface</title>
    <ns>0</ns>
    <id>1857</id>
    <revision>
      <id>26839</id>
      <parentid>18901</parentid>
      <timestamp>2013-03-23T16:42:26Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>AI -&gt; AI Dev</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7685">== CSAI Interface ==

CSAI Interface makes it possible to build Global AIs for Spring using .Net Framework 1.1 or 2.0.  This means you can write AIs using C#, VB, Boo (Python.Net), or any language capable of being compiled into ILSM bytecode assemblies.  Fairly complete list at [http://www.dotnetpowered.com/languages.aspx] .

.Net languages run fast and are easy to debug.  In addition, using CSAI Interface makes it possible to dynamically recompile and reload your AI dll in the middle of a game.

Helloworlds are available in C#, VB and Boo (Python.Net)

You can get CSAI Interface from within the CSAI download on the [[AI:CSAI|CSAI page]].

CSAI Interface was written by Hugh Perkins

== Platforms ==

CSAI Interface runs on Windows using .Net Framework 1.1 or 2.0

It would be possible to write bindings for Mono.  Discussion at [[GlobalAI Mono Bindings]].

== How to use ==

*[[AI:CSAI]]  Please see the CSAI installation instructions for installation instructions; for now these are integrated and identical
*[[CSAI Build Instructions]]  For now, the build instructions for CSAI and CSAI Interface are integrated and identical

== Dynamic dll recompilation and reloading ==

To dynamically recompile and reload your AI dll in the middle of a game:
*recompile your dll
*in the game say &quot;.reloadai&quot;

You can do this whilst paused if you want.

Note that this only applies to the C# AI dll itself.  CSAIInterfaces.dll and CSAILoader.dll require the game to be shut down during recompilation.

== dll loading, CSAILoader.dll configuration ==

CSAILoader.dll searches for a configuration file with the same name (ie CSAILoader.xml), in the same directory.  This configuration file defines the C# AI dll to reload.  If you want you can name your C# dll mysuperai.dll , as long as you change the name of the dll in the configuration file.  You can also change the name of the directory and the name of the main C# dll class.

Be really careful to double-check the name of the dll, directory and class if you change them.  Your only warning that something is wrong will be an AI exception when you start the game ;-)

You can rename CSAILoader.dll to anything you like.  The dll will look for a configuration file with the same name.

All this means that it is very easy for you to create your own C# AI dlls with your own name, and that it wont conflict with other people's C# AIs.

Note that CSAIInterfaces.dll is immutable, never needs to be renamed.

== C# AI base class ==

Your C# AI needs to have a class that derives from CSharpAI.IGlobalAI

You can see the definition of this interfaces in CSAIInterfaces\IGlobalAI.cs

You will need to ensure that the name of the class specified in your CSAILoader.xml configuration file matches the name and namespace of this class.

If you're unsure, just call this class CSAI, in namespace CSharpAI.  Then you won't need to change the configuration file

== Creating a C# dll using Visual Studio ==

*Create a new project of type &quot;class library&quot;
*Add a reference to CSAIInterfaces\CSAIInterfaces.dll

This will automatically configure your project to build as a dll, and make the types from CSAIInterfaces.dll available to your project.

== CSAI Interface Architecture ==

You won't need to know this unless you want to extend the interface, but it might be interesting as background.

=== spring.exe ===

Spring.exe is the Spring RTS game that loads the AI.

The main classes that are important are:
- IGlobalAI     The AI's main class should derive from this
- AICallback    Passed to AI, to provide functions for AI to drive Spring
- UnitDef       Unit definitions
- Command       Commands passed to AICallback-&gt;GiveOrder
- MoveData      Information on movements, part of a UnitDef

Other helper classes include:
- float3        vector of 3 floats

=== csailoader.dll ===

This is a managed C++ component that binds Spring.exe to CSAI.dll

- CSAIProxy        derives from Spring.exe/IGlobalAI.  This is the proxy from Spring.exe to CSAI.dll
- AICallbackProxy  derives from CSAI.dll/IAICallback.  This proxies requests from CSAI.dll to Spring.exe
- UnitDefProxy     derives from CSAI.dll/IUnitDef.  This is a proxy of the actual Spring.exe UnitDef

=== CSAIInterfaces.dll ===

This holds interfaces that are used to abstract CSAI.dll classes away from csailoader.dll  It is written in C#

This gives us the possibility to dynamically reload CSAI without reloading Spring.

- CSharpAI.IGlobalAI     C# version of Spring.exe/IGlobalAI
- CSharpAI.IAICallback   C# version of Spring.exe/IAICallback

Some helper classes:
- CSharpAI.Command      used to hold commands passed to IAICallback.GiveOrder
- CSharpAI.IUnitDef     holds definition of a unit
- CSharpAI.Float3       holds vectors of 3 floats

=== CSAI.dll ===

This is the C# AI component.

- CSAI       the main class, equivalent to a C++ IGLobalAI derivative

+ The C# AI's classes go here, eg:
- ScoutController.cs
- TankController.cs
- CommanderController.cs
- StrategyController.cs
- ...

== How this works, C++/C# binding ==

Some background information on how the C++/C# binding works.

*C++ can be built in mixed mode, with both managed and unmanaged classes
*we do this by simply specifying /clr in the commandline
*managed classes have __gc at the start, unmanaged ones dont.  This is always true

*managed objects dont need deleting or memory management, unmanaged ones do
*managed objects can freely call into unmanaged code, and hold pointers to unmanaged objects
*unmanaged objects can freely call into managed code
*an unmanaged object can hold a pointer to a managed object, as long as the pointer variable is declared as gcroot, or it exists only for the lifetime of a method call

== How this works, dynamic recompilation and reloading ==

Some background information on how .reloadai works

What this is:
- you can recompile CSAI.dll when you like, because CSAI.dll and CSAI.pdb are not locked
- you can reload the CSAI.dll during a game by saying &quot;.reloadai&quot;

This works best if you run spring in windowed mode, and set its priority to &quot;Low&quot;.
 
Why would you want to do this?
*saves time during AI development and debugging

Doesnt this mean the AI doesnt know what happened before?
*yes, but it's pretty easy for it to ask Spring to remind it what is happening

How does this work / why this is hard

*when managed code that loads an assembly is run, that assembly/dll will be automatically loaded, and locked
*assemblies cant be unloaded from an appdomain without destroying the entire appdomain

We can load assemblies dynamically, without locking them, by reading the assembly's dll file as a binaryfile, and passing the raw bytes to Assembly.Load  The old assemblies are not unloaded, but they will be CPU-starved because our CSAIProxy class will no longer be forwarding events to them

Just in case we create new threads within our AI, there is a Shutdown method in the CSAI main class, where we can shut these down.  This can also be used to close open handles to a logfile.

This comes close to solving the problem, however:
*when we create variables using types defined in our target C# assembly, the CLR will automatically load that assembly ...
*... locking the assembly so we cant swap it out with a new one

A solution is to abstract any C# interfaces used by the C++ dll into a new dll, CSAIInterfaces.dll.  This dll will be fairly stable wrt changes to C# AI code.

One last point: in order to get detailed debugging information during exceptions, with line numbers, we need the pdb file.  We can load the pdb file also by reading it as a binaryfile, and pass the raw bytes to Assembly.Load along with the main assembly bytes.
[[Category:AI Dev]]</text>
      <sha1>ihk7zsk3z6evncnbla6mt2d3h1n18gn</sha1>
    </revision>
  </page>
  <page>
    <title>AI:Compare</title>
    <ns>0</ns>
    <id>2785</id>
    <revision>
      <id>17878</id>
      <parentid>17869</parentid>
      <timestamp>2009-11-19T21:13:45Z</timestamp>
      <contributor>
        <username>Slogic</username>
        <id>2429</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="289">[[Category: AI]]

Here you can find a reference to AI comparing tables. AIs can be compared per mod base only.

AI comparing tables per mod:
* [[AI:Compare:*A|*A]]
* [[AI:Compare:Kernel_Panic|Kernel Panic]]
* [[AI:Compare:Spring_1944|Spring: 1944]]

[[AI:Skirmish|&lt;- Back to AI Main page]]</text>
      <sha1>civbegay9vog0n7bx4w5r22mg6v1t0q</sha1>
    </revision>
  </page>
  <page>
    <title>AI:Compare:*A</title>
    <ns>0</ns>
    <id>2786</id>
    <revision>
      <id>19255</id>
      <parentid>18455</parentid>
      <timestamp>2010-05-03T14:49:12Z</timestamp>
      <contributor>
        <username>Slogic</username>
        <id>2429</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="12642">[[Category: AI]]

Welcome to AI comparing table for *A ([[Balanced_Annihilation|BA]], [[BOTA]], [[Absolute_Annihilation|AA]] etc.) mods.


&lt;table border=&quot;1&quot; cellpadding=&quot;1&quot; cellspacing=&quot;0&quot;&gt;
&lt;tr&gt;
  &lt;th &gt;AI&lt;/th&gt;
  &lt;th width=&quot;10%&quot;&gt;AAI&lt;/th&gt;
  &lt;th width=&quot;10%&quot;&gt;E232AI&lt;/th&gt;
  &lt;th width=&quot;10%&quot;&gt;KAIK&lt;/th&gt;
  &lt;th width=&quot;10%&quot;&gt;NTAi&lt;/th&gt;
  &lt;th width=&quot;10%&quot;&gt;RAI&lt;/th&gt;
  &lt;th width=&quot;10%&quot;&gt;XAI&lt;/th&gt;
  &lt;th width=&quot;10%&quot;&gt;Shard&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;version&lt;/th&gt;
  &lt;th&gt;0.9&lt;/th&gt;
  &lt;th&gt;[http://github.com/downloads/slogic/E323AI/E323AI-3.20.0-RC2-win32.zip 3.20.0]&lt;/th&gt;
  &lt;th&gt;0.13&lt;/th&gt;
  &lt;th&gt;[http://redmine.darkstars.co.uk/attachments/download/14/NTaiXE10.1bWin.rar XE10.1b]&lt;/th&gt;
  &lt;th&gt;0.601&lt;/th&gt;
  &lt;th&gt;[http://springrts.com/phpbb/download/file.php?id=2894 0.123]&lt;/th&gt;
  &lt;th&gt;[http://www.darkstars.co.uk/downloads/view.php?file=releases/shard/Shard.0.21.rar 0.21]&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Mod features&lt;/th&gt;
  &lt;td colspan=&quot;7&quot; align=&quot;center&quot;&gt;marks (0 - no support, 10 - best of all AIs)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;  
  &lt;td&gt;non-cheating&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;AAI&quot;&gt;10&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;E232AI&quot;&gt;0&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;KAIK&quot;&gt;0&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;NTAi&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;RAI&quot;&gt;10&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;XAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;  
  &lt;td&gt;teamplay support&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;AAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;E232AI&quot;&gt;1&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;KAIK&quot;&gt;10&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;NTAi&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;RAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;XAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;  
  &lt;td&gt;com-sharing support&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;AAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;E232AI&quot;&gt;8&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;KAIK&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;NTAi&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;RAI&quot;&gt;10&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;XAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;  
  &lt;td&gt;unit support&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;AAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;E232AI&quot;&gt;6&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;KAIK&quot;&gt;3&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;NTAi&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;RAI&quot;&gt;10&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;XAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;div style=&quot;margin-left: 10px&quot;&gt;kbots&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;AAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;E232AI&quot;&gt;10&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;KAIK&quot;&gt;10&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;NTAi&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;RAI&quot;&gt;10&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;XAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;div style=&quot;margin-left: 10px&quot;&gt;vehicles&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;AAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;E232AI&quot;&gt;8&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;KAIK&quot;&gt;10&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;NTAi&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;RAI&quot;&gt;10&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;XAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;div style=&quot;margin-left: 10px&quot;&gt;hovercraft&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;AAI&quot;&gt;5&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;E232AI&quot;&gt;8&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;KAIK&quot;&gt;0&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;NTAi&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;RAI&quot;&gt;10&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;XAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;div style=&quot;margin-left: 10px&quot;&gt;aircraft&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;AAI&quot;&gt;5&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;E232AI&quot;&gt;10&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;KAIK&quot;&gt;2&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;NTAi&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;RAI&quot;&gt;8&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;XAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;div style=&quot;margin-left: 10px&quot;&gt;naval&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;AAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;E232AI&quot;&gt;0&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;KAIK&quot;&gt;0&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;NTAi&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;RAI&quot;&gt;10&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;XAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;economy&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;AAI&quot;&gt;3&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;E232AI&quot;&gt;10&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;KAIK&quot;&gt;5&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;NTAi&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;RAI&quot;&gt;8&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;XAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;div style=&quot;margin-left: 10px&quot;&gt;mex upgrading&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;AAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;E232AI&quot;&gt;0&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;KAIK&quot;&gt;10&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;NTAi&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;RAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;XAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;div style=&quot;margin-left: 10px&quot;&gt;geothermal usage&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;AAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;E232AI&quot;&gt;8&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;KAIK&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;NTAi&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;RAI&quot;&gt;10&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;XAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;div style=&quot;margin-left: 10px&quot;&gt;reclaiming&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;AAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;E232AI&quot;&gt;10&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;KAIK&quot;&gt;10&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;NTAi&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;RAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;XAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;div style=&quot;margin-left: 10px&quot;&gt;misc intelligence&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;AAI&quot;&gt;3&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;E232AI&quot;&gt;10&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;KAIK&quot;&gt;7&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;NTAi&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;RAI&quot;&gt;3&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;XAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;attacking&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;AAI&quot;&gt;2.5&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;E232AI&quot;&gt;10&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;KAIK&quot;&gt;9&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;NTAi&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;RAI&quot;&gt;4&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;XAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;div style=&quot;margin-left: 10px&quot;&gt;in the beginning&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;AAI&quot;&gt;2&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;E232AI&quot;&gt;10&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;KAIK&quot;&gt;7&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;NTAi&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;RAI&quot;&gt;3&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;XAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;div style=&quot;margin-left: 10px&quot;&gt;in the middle&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;AAI&quot;&gt;3&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;E232AI&quot;&gt;10&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;KAIK&quot;&gt;7&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;NTAi&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;RAI&quot;&gt;5&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;XAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;div style=&quot;margin-left: 10px&quot;&gt;harassing&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;AAI&quot;&gt;1&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;E232AI&quot;&gt;10&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;KAIK&quot;&gt;0&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;NTAi&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;RAI&quot;&gt;1&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;XAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;div style=&quot;margin-left: 10px&quot;&gt;nukes&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;AAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;E232AI&quot;&gt;0&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;KAIK&quot;&gt;0&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;NTAi&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;RAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;XAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;div style=&quot;margin-left: 10px&quot;&gt;LRPC&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;AAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;E232AI&quot;&gt;0&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;KAIK&quot;&gt;0&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;NTAi&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;RAI&quot;&gt;10&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;XAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;div style=&quot;margin-left: 10px&quot;&gt;D-Gunning&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;AAI&quot;&gt;0&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;E232AI&quot;&gt;0&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;KAIK&quot;&gt;10&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;NTAi&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;RAI&quot;&gt;10&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;XAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
  &lt;td&gt;defending&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;AAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;E232AI&quot;&gt;8&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;KAIK&quot;&gt;5&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;NTAi&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;RAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;XAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;div style=&quot;margin-left: 10px&quot;&gt;static&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;AAI&quot;&gt;6&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;E232AI&quot;&gt;4&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;KAIK&quot;&gt;0&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;NTAi&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;RAI&quot;&gt;10&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;XAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;div style=&quot;margin-left: 10px&quot;&gt;mobile&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;AAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;E232AI&quot;&gt;7&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;KAIK&quot;&gt;5&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;NTAi&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;RAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;XAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;div style=&quot;margin-left: 10px&quot;&gt;unit repairing&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;AAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;E232AI&quot;&gt;6&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;KAIK&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;NTAi&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;RAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;XAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;div style=&quot;margin-left: 10px&quot;&gt;antinukes&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;AAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;E232AI&quot;&gt;0&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;KAIK&quot;&gt;0&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;NTAi&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;RAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;XAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;div style=&quot;margin-left: 10px&quot;&gt;shields&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;AAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;E232AI&quot;&gt;0&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;KAIK&quot;&gt;0&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;NTAi&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;RAI&quot;&gt;0&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;XAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
  &lt;td&gt;build assisting&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;AAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;E232AI&quot;&gt;10&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;KAIK&quot;&gt;6&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;NTAi&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;RAI&quot;&gt;1&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;XAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
  &lt;td&gt;capturing ability&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;AAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;E232AI&quot;&gt;0&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;KAIK&quot;&gt;10&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;NTAi&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;RAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;XAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
  &lt;td&gt;resurrecting ability&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;AAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;E232AI&quot;&gt;0&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;KAIK&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;NTAi&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;RAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;XAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
  &lt;td&gt;transport usage&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;AAI&quot;&gt;0&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;E232AI&quot;&gt;0&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;KAIK&quot;&gt;0&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;NTAi&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;RAI&quot;&gt;0&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;XAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
  &lt;td&gt;threatmap usage&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;AAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;E232AI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;KAIK&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;NTAi&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;RAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div align=&quot;right&quot; title=&quot;XAI&quot;&gt;?&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

[[AI:Compare|&lt;- Previous page]]</text>
      <sha1>erwedhattnrre2k3q26jurccobw0xpe</sha1>
    </revision>
  </page>
  <page>
    <title>AI:Compare:Spring 1944</title>
    <ns>0</ns>
    <id>3129</id>
    <revision>
      <id>26364</id>
      <parentid>22613</parentid>
      <timestamp>2013-03-08T17:45:24Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>[[Category:AI]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="216">Spring:1944 uses the AI C.R.A.I.G., which stands for Configurable Reusable Artificial Intelligence Gadget.
It is a skirmish AI written in Lua, and works in Spring:1944 and Star Wars: Imperial Winter.

[[Category:AI]]</text>
      <sha1>fjpxuc4aerzcuvsqbu8p3hd6ettsijt</sha1>
    </revision>
  </page>
  <page>
    <title>AI:CppTestAI</title>
    <ns>0</ns>
    <id>2665</id>
    <revision>
      <id>28139</id>
      <parentid>16556</parentid>
      <timestamp>2014-01-08T15:52:39Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>/* How to compile */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1149">{{AI|CppTestAI|hoijui|0.1|Supports everything / Does nothing|beta|GNU GPL V2+|C|Cpp}}

== C++ Test AI ==

==== Description ====
This Skirmish AI is written in C++ and uses the new C++ wrapper over the C AI Interface to prove that this wrapper works, and for testing purposes.

It is an empty implementation, meaning it will load, but do absolutely nothing. CppTestAI can be used to test the AI interface, or for exploring a map if one wants the end game screen not to appear. It should also be used as a template for new C++ Skirmish AI projects.

==== Download ====
It comes with spring source. Reffer to [[Building_spring#Obtaining_the_Source|Obtaining the Source]].

==== Known Crashes ====
* None

==== How to compile ====
Use CMake. Reffer to [[Building_spring|Building Spring]].

==== How to install ====
from: ''{spring_source}/AI/Skirmish/NullLegacyCppAI/''&lt;br&gt;
to: ''{spring_data_dir}/AI/Skirmish/NullLegacyCppAI/{NullLegacyCppAI-version}/''
* copy ''build/libNullLegacyCppAI.so'', ''build/libNullLegacyCppAI.dylib'' or ''build/NullLegacyCppAI.dll'' to ''./''
* copy ''data/*'' to ''./''

''' [[AIs|&lt;- Back to AI page]]'''

[[Category: AI]]</text>
      <sha1>ckrrcuei9q3gajpxgz6hm2o7jzgyucb</sha1>
    </revision>
  </page>
  <page>
    <title>AI:Development</title>
    <ns>0</ns>
    <id>2653</id>
    <revision>
      <id>28972</id>
      <parentid>28971</parentid>
      <timestamp>2014-10-22T23:45:09Z</timestamp>
      <contributor>
        <username>Paulomorfeo</username>
        <id>2902</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3382">[[Engine_Development|Development]] &lt; AI Development

=How to write a Skirmish AI for Spring=
This section gives help on how to create Artificial Intelligence agents that control teams (as if a player) - &quot;Skirmish AI&quot;.

The SpringRTS engine interacts with the Skirmish AIs through an &quot;Interface&quot;. There are stable (10-2014, Spring v98) interfaces for the languages C/C++ and Java (not currently sure about the others but I think Lua too).


==Quick Start==
See these pages for tutorials on how to setup a development environment, connect to the appropriate &quot;Interface&quot; and how to build your first example Skirmish AI:

* '''[[AI:Development:Lang:Cpp|C++]]'''&lt;br&gt;
* '''[[AI:Development:Lang:C|C]]'''&lt;br&gt;
* '''[[AI:Development:Lang:Java|Java]]''' ''(up-to-date as of 10-2014, SpringRTS v98)''&lt;br&gt;
* '''[[AI:Development:Lang:Lua|Lua]]'''&lt;br&gt;
* '''[[AI:Development:Lang:Python|Python]]'''&lt;br&gt;
* '''[[AI:Development:Lang:CSharp|C#]]'''&lt;br&gt;
* '''[[AI:Development:Lang:Groovy|Groovy]]'''&lt;br&gt;


==I have setup my development environment. What now?==

* '''[[AI:Development:System|SpringRTS &lt;-&gt; AIs architecture]]''' - architecture of SpringRTS and how it interacts with the AIs.
* '''[[AI:Development:TheMaps|The mappings provided by the AI Interface]]''' - how the engine maps the game area and how the interface exposes those maps.
* '''[[AI:Development:MonitorAndDebug|How to monitor and debug your Skirmish AI]]''' - How to monitor and debug your Skirmish AI.
* '''[[AI:Skirmish:List|AIs for Spring]]''' - list of some of the Skirmish AIs that have already been developed for SpringRTS.


==Overall AI ideas, practical examples, useful resources==

* '''[[AI:Links|AI related links]]''' - ranging from how to conceptualize AI agents all the way down to how to tackle very specific problems like pathfinding.
* '''[[AI:GameInferences|Useful inferences]]''' - how to infer where the opponents might have started, where on the maps can your units go, etc..
* '''[http://springrts.com/phpbb/viewforum.php?f=15 Springs AI dev forum]''' - comunity's forum dedicated to AI development.
* '''[[AI:Development:Interface|AI Interfaces &amp; Wrappers]]''' - semi-technical description of the Interfaces that expose the SpringRTS engine to the AI agents.


== Other hints, tips and interesting infos ==

*''' AI &quot;frame skipping&quot;'''
http://springrts.com/phpbb/viewtopic.php?p=463953#p463953&lt;br&gt;
As in: if a Java/C/C++ SkirmishAI gets delayed responding back to the Interface, the SpringRTS engine will wait on the AI. Thus delaying the game, thus not having the AI &quot;skip&quot; frames.


*''' Engine commands to control the AIs'''
In spring you have some control over AIs with these commands:
&lt;code&gt;&lt;pre&gt;
/aireload
/ailist
/aikill
/aicontrol
&lt;/pre&gt;&lt;/code&gt;


*''' Lua&lt;--&gt;AI communications [in Spring 0.83+]'''
http://springrts.com/phpbb/viewtopic.php?f=15&amp;t=26298
He shall say that only it once!


*''' Link to source code of the Interface, engine-side'''
Chances are you'll have doubts about what exactly the commands abc(), qwe() or xyz() do. Asking in the AI forum is a good way to clarify. The most reliable is probably to look at the source code (if you're able to navigate the maze of C++ code in all its glory, that is):&lt;br&gt;
https://github.com/spring/spring/blob/develop/rts/ExternalAI/AICallback.h&lt;br&gt;
https://github.com/spring/spring/blob/develop/rts/ExternalAI/AICallback.cpp&lt;br&gt;

[[Category: AI Dev]]</text>
      <sha1>8j2k1wdq88y7qcs3c5cpxtouypkiwpl</sha1>
    </revision>
  </page>
  <page>
    <title>AI:Development:Interface</title>
    <ns>0</ns>
    <id>2652</id>
    <revision>
      <id>26841</id>
      <parentid>26669</parentid>
      <timestamp>2013-03-23T16:42:49Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>AI -&gt; AI Dev</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1602">== AI interfaces and wrappers ==

==== Introduction ====
For an explanation of what AI interfaces and wrappers are,
have a look at the [[AI:Development:System|AI Interface system]] page.

==== In active development ====

; '''[[AIInterface:C|C &amp; C++ AI ''Interface'']]'''         : &lt;font color=&quot;#AAAAAA&quot;&gt;~stable&lt;/font&gt;, basically just a stub plugin, forwarding the plain C AI Interface, do not use directly, but through a wrapper&lt;br&gt;&lt;br&gt;
; '''[[AIWrapper:LegacyCpp|Legacy C++ AI Wrapper]]'''  : &lt;font color=&quot;#EE0000&quot;&gt;deprecated&lt;/font&gt;, ensures AIs written for springs old C++ AI interface can still be used&lt;br&gt;&lt;br&gt;
; '''[[AIWrapper:Cpp|New C++ AI Wrapper]]'''           : &lt;font color=&quot;#00AAFF&quot;&gt;alpha&lt;/font&gt;, allows writing C++ AIs using the new OO structure and all possibilities of the C Interface&lt;br&gt;&lt;br&gt;
; '''[[AIInterface:Java|Java AI ''Interface'']]'''         : &lt;font color=&quot;#AAAAAA&quot;&gt;~stable&lt;/font&gt;, loads AIs written in any language supported by the JVM&lt;br&gt;&lt;br&gt;
; '''[[AIWrapper:ModularAI|ModularAI ''Wrapper'']]'''         : &lt;font color=&quot;orange&quot;&gt;beta&lt;/font&gt;, simplifies handling of Units and provides a lot of common functionality for Java AIs&lt;br&gt;&lt;br&gt;
; '''[[AIInterface:Python|Spring PyAI Interface]]'''           : &lt;font color=&quot;orange&quot;&gt;beta&lt;/font&gt;, Python AI Interface&lt;br&gt;&lt;br&gt;

==== In inactive development ====

; '''[[AIInterface:Mono|Mono AI ''Interface'']]'''         : &lt;font color=&quot;orange&quot;&gt;beta&lt;/font&gt;, will support loading AIs written in a '''[http://en.wikipedia.org/wiki/Common_Language_Infrastructure CLI]''' language&lt;br&gt;&lt;br&gt;


''' [[AIs|&lt;- Back to AI page]]'''

[[Category: AI Dev]]</text>
      <sha1>1bqks7j7l0vbcqcg4nu8a75lzdeqgde</sha1>
    </revision>
  </page>
  <page>
    <title>AI:Development:Lang:C</title>
    <ns>0</ns>
    <id>2662</id>
    <revision>
      <id>26842</id>
      <parentid>26670</parentid>
      <timestamp>2013-03-23T16:42:59Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>AI -&gt; AI Dev</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="672">[[Engine_Development|Development]] &lt; [[AI:Development|AI Development]] &lt; C AI Development

=Writing a Skirmish AI in C=

Even though this is possible, it is not recommended to write your Skirmish AI in pure C. Please consider using [[AI:Development:Lang:Cpp|C++]] or any of the [[AI:Development|other]] languages instead.

If you insist on using pure C, you may have a look at [[AI:NullAI|NullAI]], which is a minimal implementation of a pure C AI for Spring. All the info you need to know about Spring to code your AI, are contained within the headers at ''{spring_source}/rts/ExternalAI/Interface/*.h''.

For further info, have a look at the forum.

[[Category: AI Dev]]</text>
      <sha1>47enxnc2xfepwcbdt4663feuw1uinpk</sha1>
    </revision>
  </page>
  <page>
    <title>AI:Development:Lang:CSharp</title>
    <ns>0</ns>
    <id>3704</id>
    <revision>
      <id>30318</id>
      <parentid>29432</parentid>
      <timestamp>2016-12-17T13:07:24Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>Categorise though it is barely worth it</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="214">A really old C# AI is at https://springrts.com/wiki/AI:CSAI  It probably needs some tweaking, since it was written in 2006 :-P  The code is at https://github.com/hughperkins/SpringRTS-CSharpAI


[[Category:AI Dev]]</text>
      <sha1>qkjtc9bly73mxhir504jqufrqldjvbc</sha1>
    </revision>
  </page>
  <page>
    <title>AI:Development:Lang:Cpp</title>
    <ns>0</ns>
    <id>3160</id>
    <revision>
      <id>28180</id>
      <parentid>28179</parentid>
      <timestamp>2014-01-31T12:53:50Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>/* Writing a Skirmish AI in C++ */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1229">[[Engine_Development|Development]] &lt; [[AI:Development|AI Development]] &lt; C++ AI Development

=Writing a Skirmish AI in C++=

There are two ways of writing a C++ AI, using the [[AIWrapper:LegacyCpp| deprecated legacy API]] or the [[AIWrapper:Cpp| C++ Wrapper API]]. The legacy API is used for AIs using the old interface ( e.g. KAI, RAI, AAI etc ).

For an example of an AI using the new OO C++ Wrapper interface, refer to [[AI:Shard|Shard]] by AF.

For further info, have a look at the forum: http://springrts.com/phpbb/viewtopic.php?p=552433#p552433

==Start off==

easiest is to copy the existing CpptestAI to a new folder:

&lt;code&gt;&lt;pre&gt;cp -rv AI/Skirmish/CppTestAI/* AI/Skirmish/myAI/ &lt;/pre&gt;&lt;/code&gt;

adjust AI/Skirmish/myAI/cont/data/AIInfo.lua, for example change &quot;value  = 'CppTestAI'&quot;, &quot;to 'myAI'&quot;.

==Compile==

run cmake again in the root of the spring source to make the buildsystem recoginize the newly created folder:
&lt;code&gt;&lt;pre&gt;cmake .&lt;/pre&gt;&lt;/code&gt;

To create the needed interface files run:

&lt;code&gt;&lt;pre&gt;make Cpp-AIWrapper&lt;/pre&gt;&lt;/code&gt;

for each AI there exists such an target, for example:

&lt;code&gt;&lt;pre&gt;make myAI&lt;/pre&gt;&lt;/code&gt;

to list all available targets run

&lt;code&gt;&lt;pre&gt;make help&lt;/pre&gt;&lt;/code&gt;


[[Category: AI Dev]]</text>
      <sha1>mda91y5lnbdlrvx95w7iadg51n8j6bj</sha1>
    </revision>
  </page>
  <page>
    <title>AI:Development:Lang:Java</title>
    <ns>0</ns>
    <id>2663</id>
    <revision>
      <id>29688</id>
      <parentid>29655</parentid>
      <timestamp>2015-11-03T18:45:39Z</timestamp>
      <contributor>
        <username>Paulomorfeo</username>
        <id>2902</id>
      </contributor>
      <comment>Update about serious quirk</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="19465">[[Engine_Development|Development]] &lt; [[AI:Development|AI Development]] &lt; Java AI Development

== Getting Started on your own Java AI ==

''Note:'' This tutorial assumes you have Spring working on your machine. The Spring directory will be referred to as 'Spring' from here on.

You will also need to make sure that Java AI's run properly on your machine. This is most easily done by running a Spring game with the ''NullOOJavaAI'' that comes with the engine. You will need the JRE 1.5 or greater, and to set the ''JAVA_HOME'' environment variable on your system to point to the correct location.

''Note:'' If you're using a ''64 bit'' version of ''Windows'', you will need a 32 bit Java Runtime Environment/Java Development Kit anyway, because Spring is (as of May 2014) not yet available as a 64bit version for Windows.


=== Setting up a Java Project ===

To start working on your own Java AI, you should first set up a project in your favorite Java IDE. You need to import the Spring Java AI Interface libraries, and then create an AI class and an AI Factory.

'''OUTDATED''' If you are using '''Netbeans IDE''', you can find a detailed tutorial [http://springrts.com/phpbb/download/file.php?id=4970 here] (from [http://springrts.com/phpbb/viewtopic.php?p=448743#p448743 this forum thread]). Otherwise, please continue reading this page.

==== Importing the interface libraries ====

In order to use the Java Interface, you will need to import the Java Interface libraries (optionally, you can attach the sources for JavaDoc support in your editor) 

* &lt;code&gt;Spring/AI/Interfaces/Java/[version]/AIInterface.jar&lt;/code&gt; (sources: jlib/AIInterface-src.jar&lt;/code&gt;)
* &lt;code&gt;Spring/AI/Skirmish/NullOOJavaAI/0.1/jlib/vecmath.jar&lt;/code&gt; (sources: vecmath-src.jar)
* &lt;code&gt;JavaOO-AIWrapper.jar&lt;/code&gt; (sources: TODO)

==== Creating the main class ====

Now that you have the libraries, the next step is to create your AI's main class. Firstly, you may want to create a package to put your classes in, for example, ''myjavaai''. Create a new class, named MyJavaAI (or whatever you would like your AI to be called). MyJavaAI should extend com.springrts.ai.oo.AbstractOOAI.

=== Adding your AI to Spring ===

Your AI needs to have its own folder, and the engine will need to know your AI's attributes.


==== Creating an AI folder ====

Every Spring AI is stored in ''Spring/AI/Skirmish''. You will have to create a folder for your AI as well. It is easiest to go to the directory ''Spring/AI/Skirmish'', make a copy of the folder ''NullOOJavaAI'', and rename the copy to ''MyJavaAI''.


==== Telling the Engine about your AI ====

The ''MyJavaAI'' folder you created contains the different versions of your AI. As of this writing, the ''NullOOJavaAI'' only has a version ''0.1'', so there should be a folder ''0.1'' inside the ''MyJavaAI'' folder. Inside you will find a number of files.
These files are:
* ''SkirmishAI.jar'': the jar file that contains the AI code.
* ''AIInfo.lua'': contains information about the AI.
* ''AIOptions.lua'': you can specify your AI's options in here.
* Possibly some text files: these are log files generated by the ''NullOOJavaAI''. If you don't plan on using the same files, you may as well delete these.

Additionally, there is a folder named ''jlib''. This is where you should place any additional libraries you use in your AI.

In order to let Spring recognize your AI, you will have to edit ''AIInfo.lua''. You can do this with any regular text editor.
When you open it, the file will look something like this:

&lt;code&gt;&lt;pre&gt;
local infos = {
   {
      key    = 'shortName',
      value  = 'NullOOJavaAI',
      desc   = 'machine conform name.',
   },
   {
      key    = 'version',
      value  = '0.1', -- AI version - !This comment is used for parsing!
   },
   {
      key    = 'className',
      value  = 'nulloojavaai.NullOOJavaAI',
      desc   = 'fully qualified name of a class that implements interface com.springrts.ai.AI',
   },
   {
      key    = 'name',
      value  = 'high-level Java stub Skirmish AI',
      desc   = 'human readable name.',
   },
   {
      key    = 'loadSupported',
      value  = 'no',
      desc   = 'whether this AI supports loading or not',
   },
   {
      key    = 'interfaceShortName',
      value  = 'Java', -- AI Interface name - !This comment is used for parsing!
      desc   = 'the shortName of the AI interface this AI needs',
   },
   {
      key    = 'interfaceVersion',
      value  = '0.1', -- AI Interface version - !This comment is used for parsing!
      desc   = 'the minimum version of the AI interface required by this AI',
   },
}

return infos
&lt;/pre&gt;&lt;/code&gt;


The file describes a number of attributes. Each attribute has a key, a value and a desc(ription). The key is the name of the attribute, the description tells you what the attribute is used for, and the value is what you will want to edit.

The shortName attribute is the name used for your AI internally. It's most logical to change this into to the same name you gave your AI class. (MyJavaAI.) The shortName needs to agree with the folder name (see below) and cannot contain the char '_'.

'version' tells the engine which version of your AI this is. If you're in the 0.1 folder, make this 0.1. Your AI should be located at AI/Skirmish/''shortName''/''version''/.

'classname' tells the interface which class is your AIFactory class. Take care that you use the fully qualified class name, or it won't work. In this example, this should be myjavaai.MyJavaAIFactory.

'name' describes your AI to the user. In this example, you might put 'A simple Java AI to learn about AI programming in Spring.'

'loadSupported' is rather self-explanatory. Since you have just started working on your AI, you may not get around to implementing loading support for some time, so it's best to put 'no,' for now.

'interfaceShortName' and 'interfaceversion' tell the engine about the interface your AI uses. Since MyJavaAI uses the same interface as the NullOOJavaAI, leave these as they are.


Finally, the last thing you should do is exporting your AI to SkirmishAI.jar. The way to do this varies depending on your Java editor.

=== Test your AI ===


After following all the above steps, you should be able to run your AI. Either use SpringLobby to start a new game and see if you can add your AI as a bot, or run ''spring.exe'' to see if you can start the script MyJavaAI Test.
Of course, since you haven't told the AI what to do, your starting unit(s) will sit there doing nothing.

== Getting your AI to Do Something ==


After getting your AI running, you will want to make it do something. Traditionally, the first thing to get your AI to is to build a solar plant, assuming you want it to play BA. If not, it is quite straightforward to build other units once you have the general idea.
You will need four things to get your AI to build a solar plant:
* A reference to the callback
* A reference to the commander (your starting unit in BA)
* A reference to the solar plant definition object
* To tell the commander to build the solar plant

However, before we go about building solar plants, first you should know about events. We will use these to get the required object references.


=== Events ===

Nearly everything that happens in the game is an event. When a unit is created, this is an event. Enemy spotted? Also an event. A player sends your AI a message? You got it, this is an event as well.

Every event is made known to your AI. Have a look at the &lt;code&gt;MyJavaAI&lt;/code&gt; class again. &lt;code&gt;MyJavaAI&lt;/code&gt; extends &lt;code&gt;AbstractOOA&lt;/code&gt;. &lt;code&gt;AbstractOOAI&lt;/code&gt; implements a number of methods like &lt;code&gt;unitCreated()&lt;/code&gt;, &lt;code&gt;enemyEnterRadar()&lt;/code&gt; and &lt;code&gt;message()&lt;/code&gt;.
Sound familiar? The method &lt;code&gt;unitCreated(Unit unit, Unit builder)&lt;/code&gt; is called every time a unit is created, and tells you the unit that was created and the unit that built it. Similarly, enemyEnterRadar(Unit enemy) and message(int player, String message) tell you about an enemy unit entering radar range and receiving a message from another player respectively.
There are many other events that all have corresponding methods. To have your AI respond to these events, simply override the method in your &lt;code&gt;MyJavaAI&lt;/code&gt; class.
The return type of these methods is an integer. The return value can be used for debugging. 0 means that no errors occurred, while any other value is threated as an error. This system can be used for debugging, but is it much easier to implement proper logging.

In the sections below you will see an example of the use of these events.


=== Getting a reference to the callback ===

The callback is the object through which the AI communicates with the engine. All information that does not change the state of the engine can be retrieved through individual methods in the callback, and state changing commands (eg to units) will go through a single, specialized method, which is in the callback as well.
Getting a reference to the callback is easy.
First create a class field &lt;code&gt;OOAICallback callback&lt;/code&gt; to put the reference in, then overwrite the method &lt;code&gt;init(int teamId, OOAICallback callback)&lt;/code&gt;. The init method is called at the start of every game (right at the end of the countdown).
As you can see, all that you need to do is set the parameter value callback to the field callback:

&lt;code&gt;&lt;pre&gt;
@Override
public int init(int teamId, OOAICallback callback)
{
    this.callback = callback;
    return 0;
}
&lt;/pre&gt;&lt;/code&gt;

=== Getting a reference to the commander ===

Whenever a unit has been built, the engine sends a unitFinished event. At the start of the game, the engine will send a UnitFinished event for every starting unit. When playing BA, this means you will get a UnitFinished event for the commander. Therefore, the most straightforward way of finding the reference to the commander is overriding the &lt;code&gt;unitFinished()&lt;/code&gt; method:

&lt;code&gt;&lt;pre&gt;
@Override
public int unitFinished(Unit unit) {
    if (unit.getDef().getName().equals(&quot;armcom&quot;)) {
        commander = unit;
    }

    return 0;
}
&lt;/pre&gt;&lt;/code&gt;

=== Getting a reference to the solar plant definition ===

Every unit in Spring has a UnitDef (a 'unit defintion'). This object tells you all there is to know about the properties of the unit type, such as maximum speed, turn rate and what weapons it carries.
One way to get the reference to the definition of a solar plant is to use &lt;code&gt;callback.getUnitDefs()&lt;/code&gt;. This will give you a list of all the available unit types in the game that is currently being played.
The name of the unit def we are looking for is 'armsolar', so we can just iterate through the list and find the one named armsolar, like this:

&lt;code&gt;&lt;pre&gt;
List&lt;UnitDef&gt; unitDefs = this.callback.getUnitDefs();
UnitDef solarPlant = null;
for (UnitDef def : unitDefs)
   if (def.getName().equals(&quot;armsolar&quot;))
   {
       solarPlant = def;
       break;
   }
&lt;/pre&gt;&lt;/code&gt;


=== Telling the commander to build the solar plant ===

Now, the only thing left to do is to tell the commander that we want it to build the solar plant, and where to place it. In short, we need to give the commander a build command.

We want to give this command only once at the first frame of the game. For this we can use the &lt;code&gt;update()&lt;/code&gt; method, which is called at every frame of the game. All we need to do is overwrite the &lt;code&gt;update(int frame)&lt;/code&gt; method and give the command if the frame is 1. This results in the following code:

&lt;code&gt;&lt;pre&gt;
@Override
public int update(int frame)
{
    if (frame == 0)
    {
        // give command here
    }

    return 0;
}
&lt;/pre&gt;&lt;/code&gt;

Commands are issued by invoking the respective method on the &lt;code&gt;Unit&lt;/code&gt; (or &lt;code&gt;Group&lt;/code&gt;). In our case, that's the &lt;code&gt;build&lt;/code&gt; method, which takes the following arguments:

* &lt;code&gt;UnitDef toBuildUnitDef&lt;/code&gt;: the kind of unit to build
* &lt;code&gt;AIFLoat3 buildPos&lt;/code&gt;: the location the unit should be built at (in our case, we use the commander's current position)
* &lt;code&gt;int facing&lt;/code&gt;: the direction the new unit will be facing (mostly matters for buildings, which can not turn after being constructed)
* &lt;code&gt;short options&lt;/code&gt;: a set of UnitCommandOptions. 0 means no option.
* &lt;code&gt;int timeout&lt;/code&gt;: the number of frames after which the command times out. We don't want a timeout, and therefore specify a suitably high number :-)

Therefore, our command looks like this:

&lt;code&gt;
    commander.build(solarDef, commander.getPos(), 0, (short) 0, Integer.MAX_VALUE);
&lt;/code&gt;

At this point you will want to see if your AI actually works. Export your code to ''Spring/AI/Skirmish/MyJavaAI/SkirmishAI.jar'' and start up a game. Your AI should now build a solar plant at its start position.

===Building a metal extractor===
Building a metal extractor is slightly more complicated. Assuming you're not on a metal map, you will need to find a suitable site to place the extractor. Generally, it's preferable to select a site closest to wherever your construction unit (commander) is located.

Modify your code that got a reference to the solar plant by making the following changes:

&lt;code&gt;&lt;pre&gt;
List&lt;UnitDef&gt; unitDefs = this.callback.getUnitDefs(); UnitDef solarPlant = null; for (UnitDef def : unitDefs)

  if (def.getName().equals(&quot;armsolar&quot;))
  {
      solarPlant = def;
  }
  else if (def.getName().equals(&quot;armmex&quot;))
  {
       metalExtractor=def;
  }
&lt;/pre&gt;&lt;/code&gt;

Again, you will need to create a Unitdef metalExtractor field by where you declared your solarPlant field.

Next, you need a method for determining the distance between two 3D coordinates (since Spring locations are three dimensional). A slightly modified version of a distance function is found below.

&lt;code&gt;&lt;pre&gt;
public float calculateDistance(AIFloat3 a, AIFloat3 b)
    {
    float xDistance = a.x - b.x;
    float yDistance = a.y - b.y;
    float zDistance = a.z - b.z;
    float totalDistanceSquared = xDistance*xDistance + yDistance*yDistance + zDistance*zDistance;
    return totalDistanceSquared;
    } 
&lt;/pre&gt;&lt;/code&gt;

The above code actually returns the distance squared, but it will work for our purposes. In your init function, you will want to add the following code above the return statement but below the line defining the callback:

&lt;code&gt;&lt;pre&gt;
checkForMetal();
&lt;/pre&gt;&lt;/code&gt;

This will call the following function you need to place in your code:

&lt;code&gt;&lt;pre&gt;
public void checkForMetal()
    {
    Resource metal=Resource.getInstance(clb, 0);
    availablemetalspots=clb.getMap().getResourceMapSpotsPositions(metal);
    if(availablemetalspots.isEmpty())
        {
        sendTextMsg(&quot;This is a map with no metal spots&quot;);
        metalmap=false;
        }
    else
        {metalmap=true;
        sendTextMsg(&quot;This is a map with metal spots. Listing Values...&quot;);
        for (AIFloat3 metalspot : availablemetalspots) {
            sendTextMsg(&quot;Metal Spot at X: &quot;+metalspot.x + &quot;, Y: &quot;+metalspot.y +&quot;, Z: &quot;+metalspot.z);
        }
        }
    }
&lt;/pre&gt;&lt;/code&gt;

For the above code to function properly, you will need to create a Boolean named metalmap and a List&lt;AIFloat3&gt; availablemetalspots. You will now have a function set up for calculating distance between two points, and a data structure holding a list of positions of metal spots. The next step is to tie these two together:

&lt;code&gt;&lt;pre&gt;
public AIFloat3 closestMetalSpot(AIFloat3 unitposition)
    {
    AIFloat3 closestspot=null;
    for (AIFloat3 metalspot : availablemetalspots) {
            if (closestspot==null)
                {
                closestspot=metalspot;
                }
        else if(calculateDistance(metalspot, unitposition) &lt; calculateDistance(closestspot, unitposition) &amp;&amp; metalspot.hashCode()!=unitposition.hashCode())
                    {
                    closestspot=metalspot;
                    }
        }
    availablemetalspots.remove(closestspot);
    return closestspot;

    }
&lt;/pre&gt;&lt;/code&gt;

The above function accepts an AIFloat3 containing the location of your construction unit (commander). It will then find the closest metal spot and return that location. The next step is to have your commander make use of this.

&lt;code&gt;&lt;pre&gt;
  if (frame == 600)
  {
       if(metalmap){       sendTextMsg(&quot;About to build mex at frame &quot; + frame);
       AIFloat3 closestspot=closestMetalSpot(commander.getPos());
       commander.build(metalExtractor, closestspot, 0, (short) 0, Integer.MAX_VALUE);
  }
&lt;/pre&gt;&lt;/code&gt;

Place the above code in your update() method. When the frame count reaches 600, your commander will start to build a metal extractor at the closest metal spot. The extractor may not be right on top of where the metal spot appears to be, but you can mouse over the extractor to make sure it's drawing the metal properly.

== Frequently Asked Questions ==


'''Q:''' What is the difference between &lt;code&gt;unitCreated()&lt;/code&gt; and &lt;code&gt;unitFinished()&lt;/code&gt;?

'''A:''' The difference is that &lt;code&gt;unitCreated()&lt;/code&gt; is called when construction of a unit starts, while &lt;code&gt;unitFinished()&lt;/code&gt; when construction on the unit has been completed. Any number of things may happen in-between, including the unit under construction being destroyed, so it is important to remember this distinction.

'''Q:''' Do I have to copy and paste my jar file to the directory in Spring/AI/Skirmish/MyAI/0.1 each time I want to test my AI out?

'''A:''' Yes, but it is much easier if you automate the process. In Windows, a simple batch file can be created to move the files over for you. For example

&lt;code&gt;&lt;pre&gt;
copy C:\Users\msm8bball\Documents\NetBeansProjects\MyAI\dist\MyAI.jar &quot;C:\Program Files (x86)\Spring\AI\Skirmish\MyAI\0.1&quot;

del &quot;C:\Program Files (x86)\Spring\AI\Skirmish\MyAI\0.1\SkirmishAI.jar&quot;
rename &quot;C:\Program Files (x86)\Spring\AI\Skirmish\MyAI\0.1\MyAI.jar&quot; SkirmishAI.jar
&lt;/pre&gt;&lt;/code&gt;

Modify the above code to match your computer's directories. Place it in a text file and save it as MoveAI.bat. This will create a batch file that you can double click and it will automatically move your AI to the proper location and rename it. You might wish to put a shortcut to this in your Start menu or taskbar. 

'''Q:''' I have problems with the class-loader in my AI, any idea? 

'''A:''' Each Java AI implementation is loaded by a separate class loader. This is used to load all the AI's class files and dependency libraries (in the ''jlib'' dir). Some libraries though, use the Thread contexts class loader, instead of the one of the current class. Therefore, if you want to load something from the AI's own class-path, make sure to let these libraries use the class-path of your AI classes, eg:
&lt;code&gt;&lt;pre&gt;
ClassLoader myClassLoader = AIFactory.class.getClassLoader();
MySpecialUtil msp = new MySpecialUtil();
msp.setClassLoader(myClassLoader);
&lt;/pre&gt;&lt;/code&gt;
Please do not set this class-loader on the thread with &lt;code&gt;Thread.currentThread().setContextClassLoader(myClassLoader)&lt;/code&gt;, because all AI's are run in the same Java thread, and therefore this will cause problems.


== Links ==
* [[AIInterface:Java|Java AI Interface]]
* [https://springrts.com/dl/buildbot/doc/100.0.1-225-ga4855e7/JavaOO/ Javadoc of the Java AI OO Wrapper]
* '''OUTDATED''' [http://springrts.com/phpbb/download/file.php?id=4970 Netbeans Java Skirmish AI Tutorial] (from [http://springrts.com/phpbb/viewtopic.php?p=448743#p448743 this forum thread])


[[Category: AI Dev]]</text>
      <sha1>m5nlm1j92xknjkrg7sl6vydstcpmx7a</sha1>
    </revision>
  </page>
  <page>
    <title>AI:Development:Lang:Lua</title>
    <ns>0</ns>
    <id>2670</id>
    <revision>
      <id>28718</id>
      <parentid>28073</parentid>
      <timestamp>2014-08-25T01:54:07Z</timestamp>
      <contributor>
        <username>Zwzsg</username>
        <id>29</id>
      </contributor>
      <comment>/* References */ adding Spring Tank AI</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4602">[[Engine_Development|Development]] &lt; [[AI:Development|AI Development]] &lt; Lua AI Development

&lt;h1&gt;Writing a Lua AI&lt;/h1&gt;

== Introduction ==

=== Lua AIs are different ===
Lua for AIs is quite different from all the other AI languages supported by spring. Lua AIs use a completely different interface, and they can not be shipped separately, but only bundled with a mod.

=== Things to know ===
* They have to be bundled with a mod. Therefore, you should consider contacting the mod developer(s) in question early, to see if they are at all interested in an AI.
* A Lua AI is actually a regular gadget. The difference is just that it is listed in the mods LuaAI.lua file. See [[Lua_Scripting|Lua Scripting]] for details.
* This brings up the problem that AIs can &quot;accidentally&quot; cheat or even move units of the enemy! It is up to the AI writer to avoid that. All AI players of the same type also share the same variables and tables. One way to avoid that is to put everything into a teamdata[teamID] table. Or the use of classes.

== How to start ==
For a start, choose a single mod you want your AI to work with.
You will also want to contact the mods developer(s) before you start to code,
or soon thereafter.

Things you need to get comfortable with:
* the Lua scripting language
* Lua scripting for spring (gadgets)

You may combine learning Lua for spring with writing simplistic gadgets or widgets for spring, and publishing them [http://springrts.com/phpbb/viewforum.php?f=23 in the forum],
as this way you get practical training and feedback about your code from the pros, plus the community eventually gets a usefull addon.
When you start feeling comfortable, you should inspect the code of Lua AIs that are already available.
Source code of these AIs can be found in the mod archives, which you may open with 7zip, or it may be available separately (see [[#References|References]]).

=== Integrating the AI Gadget ===
This section explains everything you have to do to integrate your Lua AI into a mod. Which at the same time is everything that separates a Lua AI form a gadget.

In the root of the mods archive, you need the file ''LuaAI.lua'',
which should look about like this:
&lt;code&gt;
 -- file: LuaAI.lua
 local listOfLuaAIs = {
     {
         name = &quot;MyFirstAI&quot;,
         desc = &quot;Beats even the best players with Core, most others with Arm too&quot;,
     },
 }
 return listOfLuaAIs
&lt;/code&gt;

Besides all the other stuff you need for a gadget (you should know this by now),
you will need something like this in your code (eg under ''{mod_root}/LuaRules/Gadgets/MyFirstAI_v01.lua''):
&lt;code&gt;
 function gadget:GetInfo()
     return {
         name    = &quot;MyFirstAI&quot;,
         desc    = &quot;An AI that knows how to play Mod X&quot;,
         author  = &quot;John Doe&quot;,
         date    = &quot;2020-12-31&quot;,
         license = &quot;Public Domain&quot;,
         layer   = 82,
         enabled = true
     }
 end
 
 function gadget:GameStart() 
     -- Initialise AI for all teams that are set to use it
     for _,t in ipairs(Spring.GetTeamList()) do
         local _,_,_,isAI,side = Spring.GetTeamInfo(t)
         if Spring.GetTeamLuaAI(t) == gadget:GetInfo().name then
             Spring.Echo(&quot;Team &quot;..t..&quot; assigned to &quot;..gadget:GetInfo().name)
             local pos = {}
             local home_x,home_y,home_z = Spring.GetTeamStartPosition(t)
         end
     end
 end
&lt;/code&gt;
'''Note:'''
The above example will not work if your AI controls multiple teams because ''home_x,home_y,home_z'' are not stored ''per team.''

That's it, the rest of the game is using regular gadget functions, and in particular [http://springrts.com/wiki/Lua_SyncedCtrl#Give_Order Spring.GiveOrderToUnit()]. Now you should be able to use this AI when starting the modified mod in the lobby, when you click on the ''Add Bot'' button. From Spring 95.0 onwards, lua AIs can be selected from the Spring.exe menu.

Enjoy!

== References ==
* NOE AI: http://springrts.com/phpbb/viewtopic.php?f=55&amp;t=28259
* ST AI source: http://pastebin.com/v1kNRBDj
* KP AI source: http://pastebin.com/f771164a0
* CRAIG source:
** to browse: http://github.com/tvo/craig/tree/master
** for git: git://github.com/tvo/craig.git
* C.R.A.I.G. is inside S44 and SWIW
* forum thread: [http://springrts.com/phpbb/viewtopic.php?f=15&amp;t=25639 LuaAI information] 
* forum threads about an AI for the game Conflict Terra: [http://springrts.com/phpbb/viewtopic.php?f=63&amp;t=26148] [http://springrts.com/phpbb/viewtopic.php?f=63&amp;t=26214] [http://springrts.com/phpbb/viewtopic.php?f=15&amp;t=26207] (among the OT, some more or less common LuaAI problems are discussed)

[[Category: AI Dev]]</text>
      <sha1>r71mkxv72wze1i8gk1m2io80kl7hzzm</sha1>
    </revision>
  </page>
  <page>
    <title>AI:Development:Lang:Python</title>
    <ns>0</ns>
    <id>2858</id>
    <revision>
      <id>26846</id>
      <parentid>26365</parentid>
      <timestamp>2013-03-23T16:43:49Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>AI -&gt; AI Dev</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="493">The interface is currently in an early developement stage, keep that in mind! If you want use it, please contact the developers.

For installing please look at the interface page [[AIInterface:Python]]

An [http://github.com/spring/Python/blob/master/NullPythonAI/src/nullai.py example AI] can be found in the sourcecode of the interface.

Currently it does nothing. :-)

Please report bugs / feedback to the [http://github.com/spring/Python project site] of the interface

[[Category:AI Dev]]</text>
      <sha1>gz8hulsivieujlaozjgjldtha6ku1vq</sha1>
    </revision>
  </page>
  <page>
    <title>AI:Development:MonitorAndDebug</title>
    <ns>0</ns>
    <id>3668</id>
    <revision>
      <id>28966</id>
      <parentid>28960</parentid>
      <timestamp>2014-10-22T21:59:51Z</timestamp>
      <contributor>
        <username>Paulomorfeo</username>
        <id>2902</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2695">[[AI:Development|AI Development]] &lt; AI Development - Monitor and Debug

=How to monitor and debug your Skirmish AI=
You will probably want to monitor what's is happening in the execution and need some form of debugging. This page describes a few options that can be implemented to monitor an AI.

All code examples are using the Java interface.


== Print a text message ingame ==
From the interface, you can request the &quot;Game&quot; object to &quot;sendTextMessage&quot;.

&lt;code&gt;&lt;pre&gt;
_Callback.getGame().sendTextMessage (...);
&lt;/pre&gt;&lt;/code&gt;

This will display a text message to all players just like when a player hits &quot;enter&quot;, types something, then hits &quot;enter&quot; again.

Whatever is sent to that method will show up in the game's GUI but it will also end up logged in the engine's log file. In Linux, it will be: &lt;code&gt;~/.config/spring/infolog.txt&lt;/code&gt;


== Write to the engine's log ==
You can access a &quot;log&quot; from the Interface and send messages to it.
&lt;code&gt;&lt;pre&gt;
_Callback.getLog ().log (msg);
&lt;/pre&gt;&lt;/code&gt;

Doing this .. appears to have the exact same effect as the previous option...


== Write to a custom log ==
SpringRTS is built to run on a variety of different system (Linux, Windows and Mac), each with its own filesystems. Using the Interface you can obtain an appropriate path for the AI to create a log file:

&lt;code&gt;&lt;pre&gt;
String logFilePath = _Callback.getDataDirs ().allocatePath (&quot;PI_P&quot; + _TeamID + &quot;.txt&quot;, 
								true, true, false, false);
&lt;/pre&gt;&lt;/code&gt;

This would return a path like like: &lt;code&gt;/home/paulo/.config/spring/AI/Skirmish/PoucoInteligente/1/PI_P0.txt&lt;/code&gt; which you can use to create a log file.


== Draw a window ==
An extremely powerfull option to have visibility over what's happening in the game in realtime is to draw whatever you want into another window. For example, create a JFrame window (Java) and draw into it a minimap of LineOfSight.

The existing AI zkgbai has code which can be learnt from (or reused) to create a new separate window and to draw a minimap into it.

The AI's class &quot;LosManager&quot; draws a minimap of the LineOfSight, creating an &quot;Image&quot; object:&lt;br&gt;
https://github.com/Anarchid/zkgbai/blob/master/src/zkgbai/los/LosManager.java&lt;br&gt;
The AI's class &quot;DebugView&quot; is the separate window itself and paints &quot;Image&quot; objects - the AI then creates a &lt;code&gt;new DebugView (...)&lt;/code&gt; and hands it over the desired images (like a LOS minimap).&lt;br&gt;
https://github.com/Anarchid/zkgbai/blob/master/src/zkgbai/gui/DebugView.java


== Runtime debugging with the JDK/IDE  ==
TODO: Don't even know yet if this is possible or even how it interacts with the engine (will Spring crash or timeout waiting for a response from the Interface???).

[[Category: AI Dev]]</text>
      <sha1>53zximw70m9yy4ysuitexuqepar3rx1</sha1>
    </revision>
  </page>
  <page>
    <title>AI:Development:System</title>
    <ns>0</ns>
    <id>2657</id>
    <revision>
      <id>26847</id>
      <parentid>26675</parentid>
      <timestamp>2013-03-23T16:44:01Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>AI -&gt; AI Dev</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2600">[[Engine_Development|Development]] &lt; [[AI:Development|AI Development]] &lt; AI API
__NOTOC__
=Spring's AI API=

==Design==
Skirmish AIs are not loaded by the engine directly, but through an interface library.
This allows integration of AIs written in other languages.
An other idea made possible through this, is a library that can load AIs over the network,
and let them run on an AI server (NOTE: this is not planned, just a possibility).
&lt;br&gt;&lt;br&gt;

To get an idea of the overall code and runtime structure of Springs AI Interface system,
have a look at the following diagram.&lt;br&gt;&lt;br&gt;
[[Image:CAIInterfaceCodeStructure.png|thumb|center|722 px|New Code Structure]]

''briefly:'' AI Interfaces are plugins for the spring engine, while Skirmish AIs are plugins for AI Interfaces.

Wrappers are comparable to AI Interfaces, but they rather lay between an AI Interface and an AI.
They consist of code that enhances an interface or AI in some way, and they are compiled directly into the respective library.
An example of one is the Legacy C++ Wrapper.
It makes the C/C++ AI Interface look like the old C++ AI interface of spring,
is used by KAIK and AAI for example, and its code is compiled directly into these AI libraries.

For further info, see [[AI:Development:Interface|AI Interface Development]].

==History==
Global AIs used by spring versions prior to 0.79 have used an AI Interface with the following structure:&lt;br&gt;&lt;br&gt;
[[Image:CAIInterfaceCodeStructureOld.png|thumb|center|722 px|Old Code Structure]]

Therefore, AIs had to be written in C++, and be compiled with the same compiler as the engine.

===Links (not relevant for Spring versions newer then 0.78)===
;'''Metal Handler Class''': Cain has developed and released a Metal Handler Class that succesfully finds metal spots on maps, which can be a major stumbling block for many AI developers. Information about it can be found in [http://taspring.clan-sy.com/phpbb/viewtopic.php?t=2408 this thread].&lt;br&gt;

;'''[[Krogothes_Metal_class|Krogothes Metal Class V3]]''': A useful mex spot finding algorithm, essential for any AI that uses metal extractors&lt;br&gt;

;'''Global AI Interface''': Jouninkomiko has a topic on the [http://taspring.clan-sy.com/phpbb/viewtopic.php?t=923 Global AI Interface] running here.&lt;br&gt;

;'''[[AI:Hughs_global_AI_tutorial|Hugh's global AI tutorial]]''': Hugh's tutorial on writing an AI in C#.&lt;br&gt;

;'''[[AI:CSAIInterface|Global AI .Net Interface]]''': Write Global AIs in .Net, using Hugh Perkins's interface&lt;br&gt;

;'''[[AI:JAI|Global AI Java Interface]]''': Write Global AIs in Java, using JAI&lt;br&gt;

[[Category: AI Dev]]</text>
      <sha1>4j1tucobe7e1vxpaheqmud3c1sso6qe</sha1>
    </revision>
  </page>
  <page>
    <title>AI:Development:TheMaps</title>
    <ns>0</ns>
    <id>3669</id>
    <revision>
      <id>28965</id>
      <parentid>28964</parentid>
      <timestamp>2014-10-22T21:59:37Z</timestamp>
      <contributor>
        <username>Paulomorfeo</username>
        <id>2902</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3163">[[AI:Development|AI Development]] &lt; AI Development - The maps

=The maps provided by the AI Interface=
The SpringRTS engine has a 3 Dimensional game area (x; y; z) but it works by mapping the dimensions X and Z (the ones we see when looking from above) into several bi-demensional &quot;maps&quot;, each representing a different game mechanic. This page describes how the Interface exposes those maps to the AI.


== Maps available ==
The game area is broken down into (at least) these maps:
* HeightMap - map of terrain heights.
* SlopeMap - TODO
* CornersHeightMap - TODO (complicated...)
* LosMap - map of where in the game area you have visibility (Line of Sight).
* RadarMap - map of where in the game area you have radar coverage.
* JammerMap - map of where in the game area you have radar-jamming coverage.
* ResourceMapRaw - map of where in the game area there is metal and/or other resources.
Additionally, there's the game area which is where the units will exist, but is not &quot;mapped&quot; - units will be at position (x; y; z) in the game area but no map for it exists.


== Interface exposure ==
Each of the maps is bi-demensional (x; z), representing the dimensions &quot;x&quot; and &quot;z&quot; of the game area (x; y; z). However, the Interface exposes each map as a '''list''' of values.
&lt;code&gt;&lt;pre&gt;List&lt;float&gt; heightMap = _Callback.getMap().getHeightMap();&lt;/pre&gt;&lt;/code&gt;
This list will contain each row (dimension X) sequentially (Z0, Z1, Z2, ...). Therefore, each position &lt;code&gt;(x;z)&lt;/code&gt; of each map will exist in the list at the index &lt;code&gt;(x + z * {map's width})&lt;/code&gt;.


== Granularities ==
The game areas are large battlefields and the engine does not map them unit by unit. Instead it breaks down the game area in blocks - &quot;granularity&quot; (http://en.wikipedia.org/wiki/Granularity) - creating maps much smaller than the game area. Additionally, each map has a different granularity and, thus, a different size.

The map HeightMap should be considered the main map and the sizes of all other maps (as described in the documentation) are relative to the size of that map.

* HeightMap - main map (ex: 256x256)
* Game area - the game area will be the HeightMap * 8 (ex: 2048x2048)
* SlopeMap - 1/2 the size of the HeightMap (ex: 128x128)
* CornersHeightMap - TODO (complicated...)
* LosMap - size is variable per mod: see below
* RadarMap - 1/8 the size of the HeightMap (ex: 32x32)
* JammerMap - 1/8 the size of the HeightMap (ex: 32x32)
* ResourceMapRaw - 1/2 the size of the HeightMap (ex: 128x128)


== LosMap ==
The map of Line-of-sight has a granularity that is specified per game (&quot;mod&quot;). Each &quot;mod&quot; will specify the property LosMipLevel:
&lt;code&gt;&lt;pre&gt;int losMipLevel = _Callback.getMod().getLosMipLevel();&lt;/pre&gt;&lt;/code&gt;
Raising 2 to the &quot;power&quot; of LosMipLevel will give the relation of the size of LosMap to the HeightMap.&lt;br&gt;
Ex:&lt;br&gt;
# LosMipLevel=0 | 2^0 = '''1''' | Size of the LosMap = size of HeightMap * 1/'''1'''
# LosMipLevel=1 | 2^1 = '''2''' | Size of the LosMap = size of HeightMap * 1/'''2'''
# LosMipLevel=2 | 2^2 = '''4''' | Size of the LosMap = size of HeightMap * 1/'''4'''



http://springrts.com/phpbb/viewtopic.php?f=15&amp;t=32674

[[Category: AI Dev]]</text>
      <sha1>kgmleddq1c6de0xmqb06mkh4dqp2y31</sha1>
    </revision>
  </page>
  <page>
    <title>AI:Epic</title>
    <ns>0</ns>
    <id>1788</id>
    <redirect title="Epic" />
    <revision>
      <id>11602</id>
      <timestamp>2006-09-18T18:38:12Z</timestamp>
      <contributor>
        <username>FoeOfTheBee</username>
        <id>20</id>
      </contributor>
      <comment>AI:Epic moved to Epic</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="19">#REDIRECT [[Epic]]
</text>
      <sha1>mjgxdfbheswbhaudi52ju2muzbk388e</sha1>
    </revision>
  </page>
  <page>
    <title>AI:GameInferences</title>
    <ns>0</ns>
    <id>3667</id>
    <revision>
      <id>28967</id>
      <parentid>28945</parentid>
      <timestamp>2014-10-22T22:24:59Z</timestamp>
      <contributor>
        <username>Paulomorfeo</username>
        <id>2902</id>
      </contributor>
      <comment>Section moved somewhere else</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3875">=Useful inferences derivable from the game's data=

==Description==
This page describes how to infer (derive logical conclusions from permisses) some useful information to get started. For example: try to infer where the opponent might have started.

=Infer spawn positions=
An important first step right at the start of the game is to infer where the opponent(s) might have started.&lt;br&gt;
A forum thread about it: http://springrts.com/phpbb/viewtopic.php?f=15&amp;t=32662&lt;br&gt;
&lt;br&gt;
There are a few methods of varying reliability but, unfortunately, none appears to be absolutely reliable:
* '''Enable cheats, even if only temporarily'''&lt;br&gt;
* '''Parse the startup script'''&lt;br&gt;
* '''Try to parse the map's raw data files'''&lt;br&gt;
* '''Assume symetric starting positions'''&lt;br&gt;

==Enable cheats==
The Java OOInterface allows the enabling and disabling of cheats (not sure about the other interfaces - someone update this). After cheating is enable, querying for all opponents' units will respond with all enemy units even if they are out of sight or radar.&lt;br&gt;
&lt;code&gt;&lt;pre&gt;
Cheats cheats = _OOAICallback.getCheats();
cheats.setEnabled (true); //Enables cheats and sends a message to all players warning the AI is cheating.
cheats.setEventsEnabled (true); //Enables this AI receiving events for also the other player, like the &quot;unitFinished&quot; event.
&lt;/pre&gt;&lt;/code&gt;
&lt;br&gt;
Note - at the very beggining of the game (as in frame 0) the enemy might not yet have spawned (your initial unit might have spawned first). It's necessary to wait a few frames before trying to get this info reliably. (SpringRTS runs at 30 simulation steps per second)&lt;br&gt;
&lt;br&gt;
Note - this method does not work in all conditions. As far as I've read somewhere, cheating will only work when the AI is playing someone in the same host machine and, if any cheating is done with someone else in the game, it will desync the running simulation between the running machines. There is a method that can be used to query that:
&lt;code&gt;&lt;pre&gt;
bool whetherCheatingWillDesyncTheGame = cheats.isOnlyPassive();
&lt;/pre&gt;&lt;/code&gt;

==Parse the startup script==
The lobbies create an instruction script that is passed to SpringRTS when the lobby invokes it. On start, the SpringRTS engine will then parse that script for instructions on what maps to load, etc., and which starting positions to use. In Linux, that script should be in: ~/.config/spring/script.txt.&lt;br&gt;
&lt;br&gt;
In the startup script you can find parameters like:
&lt;code&gt;&lt;pre&gt;
   startpostype=3;

   [TEAM0]
   {
      StartPosX=284;
      StartPosZ=256;
   }
&lt;/pre&gt;&lt;/code&gt;
See the source code for a mapping of what each startpostype means: https://github.com/spring/spring/blob/64733de8b60dfba3533ed2374cc426c2bfb6addb/rts/Game/GameSetup.h#L65&lt;br&gt;
&lt;br&gt;
If &quot;choose in game&quot; option was chosen, the script should have a definition of a rectangle of where each player could have chosen its start position:
&lt;code&gt;&lt;pre&gt;
startrecttop
 startrectbottom
startrectleft
startrectright
&lt;/pre&gt;&lt;/code&gt;

==Try to parse the map's raw data files==
According to user Silentwings, some maps have a mapinfo.lua specifications file with the information on the starting positions on the map. However, not all maps have that file, and each mod/game can override that behaviour anyway.

==Assume symetric starting positions==
As a final last resort, a weak assumption can be made that in a 1v1 match the opponent will start in the symetrical opposite position of the map.&lt;br&gt;
&lt;br&gt;
Example: if the AI starts top left, at position (250; 250), it can make a weak assumption that the opponent will have started roughly at (MaxX-250; MaxZ-250).

=Infer map traversability=
How to infer where in the map each unit can pass through. Usually a submarine won't be able to go inland and a tank won't be able to climb mountains.&lt;br&gt;
TODO&lt;br&gt;
http://springrts.com/phpbb/viewtopic.php?f=15&amp;t=32665

[[Category: AI Dev]]</text>
      <sha1>q1ghp9m0k6cy9rvywf2v3tdhfx9uhn1</sha1>
    </revision>
  </page>
  <page>
    <title>AI:HughAI</title>
    <ns>0</ns>
    <id>2776</id>
    <revision>
      <id>29978</id>
      <parentid>23525</parentid>
      <timestamp>2016-05-17T18:39:21Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>update source link</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3363">== What is HughAI ==

HughAI is a an AI written in Java.  Works quite well at fast rush attacks.

== To install ==

To install

Make sure you have hoijui's Java Interface v0.1 installed. I believe this is installed automatically if you have Windows. Other platforms may have varying mileage.

Once you have Java Interface 0.1 installed ok:

1. Download HughAI from:

sorry, no up to date link.

2. Remove any old AI/Skirmish/HughAI directory

3. untar (using Winzip or your favorite zip utility) into AI/Skirmish, so you should have the following directory structure:

 AI/
   Skirmish/
     HughAI/
       0.1/
         SkirmishAI.jar
         ... other files ...

4. Run springlobby, create a single-player game, and do &quot;add-bot&quot;

Note that the AI needs to be playing as Arm, and on Balanced Annihilation. On anything else, it will probably just sit there and do nothing :-D

It's fairly early days yet, so don't expect too much just yet ;-) I'll update this message as it gets better.

== Mods and maps ==

Works with BA mod, with the AI running as ARM.

== Play-style ==

It's a non-cheating AI by day ... but if you go to the 'Config' tab on the gui and tick the box next to 'maphack' and then click 'apply' or 'save' ... it will become a cheating maphack AI!

Otherwise, its playstyle is essentially to rush.  If it doesn't beat you within a few minutes, it's basically not going to do very much else just yet ;-)  Maybe in the future though ;-)

== Cheating / maphack ==

In the gui, in the 'config' tab, click 'maphack' then 'apply' or 'save' to enable maphack.

Unclick it, and then 'apply' or 'save' to disable it.

== To disable gui ==

Either:

- run spring in windowed mode, in the gui, in the config tab, unclick 'guiactivated' and then click 'save', or
- in the config file BA_2.xml, change guiactivated from 'yes' to 'no'.

== Can it beat other AIs? ==

Yes ;-)  it beats E323 v2.12.0 sometimes.

== Configuration ==

There is a gui with a tab 'Config' that can be used to configure many things.

A few extra things are configurable in the config file 'BA_&lt;side&gt;.xml' , in the AI's directory, where side is core or arm.

There are also a number of workflow xml files in the BA_&lt;side&gt;workflows subdirectory.  Currently, only one of the workflows are used, so there's no point in adding more than one for now ;-)  In the future, it might simply randomly select from one, at random, so a human enemy doesn't know if the AI will tech or rush or whatever.  Sounds reasonable?

The workflow config files define what will get built essentially, with a priority, a unitname, and a quantity.

The higher the priority, the earlier the units will be built.

You can add in the same unit on multiple lines, with different priorities, so you can say: ok, first build a couple of stumpies, then a jeffy, then some more stumpies, or whatever.

== Limitations /ways to beat it ==

Survive the initial rush, and it will probably not do too much else.

== Console ==

For techies, there's a console, where you can directly write Java code.

== Soure-code ==

The sources are available from the following git repository:

https://github.com/spring/HughAI

More details on the architecture can be found in the file src-ai/architecture.txt, in the sources, which I try to keep somewhat up-to-date, but really, if you have any questions, just ask me ;-)
[[Category:AI]]</text>
      <sha1>56cfisgp5j3nil8k04zi0bfnvo9gae1</sha1>
    </revision>
  </page>
  <page>
    <title>AI:HughsUnitGroupingHeuristic</title>
    <ns>0</ns>
    <id>1876</id>
    <revision>
      <id>26849</id>
      <parentid>18903</parentid>
      <timestamp>2013-03-23T16:45:14Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>AI -&gt; AI Dev</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1327">= Unit grouping heuristic =

== Summary ==

The goal of this heuristic is to concentrate units together, to concentrate firepower optimally.  In addition, the units will automatically retreat when necessary to reorg.

This heuristic can be given a group of units, a target, and will automatically:
*group the units together physically
*move the units to the target
*fall back to reorg when necessary
*continue the attack

This heuristic was created by Hugh Perkins

== Details ==

*Select a target to attack
*Find the 5 attacking units closest to the target
*Measure the distance between the 5th and the 1st closest unit
*If the distance is more than some threshold, order the tanks to move to the position of the third unit
*Otherwise order the units to move to the target

The behavior is to form a pack of 5 which pushes into the enemy. Other units will move towards it over time. If the two leading tanks are destroyed, new tanks will keep moving towards the remaining pack. If a third tank is destroyed, the pack will retreat towards the new third-closest unit, which is probably back at base somewhere.

*Computationally it runs in Od, where d is number of attacking units
*Memorywise, it uses constant memory O.

== Example implementation, C# ==

See packcoordinators/AttackPackCoordinator.cs in CSAI
[[Category:AI Dev]]</text>
      <sha1>q981j1i9z11zpcnrvi74sc8ogljm5eh</sha1>
    </revision>
  </page>
  <page>
    <title>AI:Hughs global AI tutorial</title>
    <ns>0</ns>
    <id>1868</id>
    <revision>
      <id>26848</id>
      <parentid>22557</parentid>
      <timestamp>2013-03-23T16:44:37Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>AI -&gt; AI Dev (dead image links :()</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="12317">This page goes step by step through how to create your own global AI.

We'll be writing the AI in C#, because C# is powerful and easy to debug.  You'll need a Windows platform with Visual C# Express 2005 installed.

Note that the C++/C# interface is made available under the GPL licence, so your AI will need to be available under the GPL licence.

= Setting up your own AI Project =

We're going to use the C# loader dlls from CSAI.  We'll get these to run our own AI dll.

*Download CSAI from [[AI:CSAI]], unzip it, and run setup.exe to install it.

In what follows, TASpring in a directory path means the Spring application directory, the one that contains spring.exe.

First, we need to create a loader dll &quot;myailoader.dll&quot;, that will load our AI dll.
*Copy TASpring\AI\Bot-libs\csailoader.dll to TASpring\AI\Bot-libs\myailoader.dll
*Copy TASpring\AI\Bot-libs\csailoader.xml to TASpring\AI\Bot-libs\myailoader.xml
*Open TASpring\AI\Bot-libs\myailoader.xml in notepad, and change the value csaidirectory to &quot;AI/myai&quot;, then save the file
*Create a new directory TASpring\AI\myai
*For now, copy TASpring\AI\CSAI\csai.dll and TASpring\AI\CSAI\csai.pdb into the TASpring\AI\myai directory.

AI\myai is where we'll be placing our own AI dll.  For now we've copied the csai dll into it to check that the loader xml is configured correctly.

Check this is working ok:
*Create a new multiplayer game
*Do &quot;add bot&quot;.  Click &quot;reload&quot;.  You should see &quot;myailoader.dll&quot;
*Select &quot;myaialoader.dll&quot; and do ok
*Do &quot;add bot&quot; and add &quot;emptyai.dll&quot;.  This gives you a dummy opponent so you can spectate
*Click &quot;Spectate&quot; and launch the game
*Check that the game starts and that the commanders appear

If the game started and the commander appeared, everything is working so far.  If you get an error message about a global AI exception, and spring shuts down, recheck the steps above.

Now that we've set up the myailoader.dll , we can create our own AI project.

*Download and unzip [http://manageddreams.com/csai/csaitemplate.zip csaitemplate.zip]
*Start Visual C# 2005 Express
*Create a new project of type &quot;Class library&quot;, called &quot;csai&quot; (note: the name is important)
*Delete the default file &quot;Class1.cs&quot;
*Add the file CSAI.cs and LogFile.cs from the csaitemplate.zip file
*In the solution explorer, open CSAI.cs
**Locate the string variable aidirectory at the top of the class
**Change its value to &quot;myai&quot;
*In the solution explorer, right-click &quot;References&quot;, do &quot;Add Reference...&quot;, select the &quot;Browse&quot; tab, and add TASpring\CSAIInterfaces.dll
*We want to build as Debug, because this gives better error messages.  By default it may build as Release, so:
**Go to &quot;Tools&quot; | &quot;Options...&quot;  Navigate to &quot;Projects and Solutions&quot;, &quot;General&quot;.  Select &quot;Show Advanced build configurations&quot;, then click &quot;ok&quot;
**Go to &quot;Build&quot; | &quot;Configuration Manager...&quot;
**Set Active solution configuration to &quot;Release&quot;, then close the dialog
*Build the solution.  It should build with no errors, otherwise check the last few steps

You've created an empty AI dll.  We need to check that it build ok.
*Locate the bin\Debug directory in your project directory
*You should see csai.dll, csai.pdb, CSAIInterfaces.dll and CSAIInterfaces.pdb
*Copy csai.dll and csai.pdb into the TASpring\AI\myai directory, overwriting the existing csai.dll and csai.pdb

Create a multiplayer game, add the myailoader.dll and emptyai.dll bots as before, click Spectate and Start
*The game should start and the commander should appear

If the game starts and the commander appears, with no error messages about &quot;Global AI Exception&quot; then everything is working so far.  You've created a C# AI project.

= Talking to the player =

Let's make the AI say something to the player.  We use the SendTextMsg function to do this.  The SendTextMsg function is available from the aicallback object in the CSAI class.

SendTextMsg takes two parameters.  The first is the text you want to say, and the second is the number zero.

In the CSAI.cs file, locate the function &quot;InitAI&quot;
*You should see a comment &quot;// your init code here&quot;
*Add the line:
**aicallback.SendTextMsg( &quot;Hello world!&quot;, 0 );

Test that this works:
*Rebuild the project
*Copy the csai.dll and csai.pdb files into TASpring/AI/myai , overwriting the old ones
*Restart the game, or just say &quot;.reloadai&quot; if the old game is still running
*The commander should appear, and the AI should say &quot;Hello world!&quot;

If something went wrong, and the message didnt appear, the AI will almost certainly no longer crash.  
Instead you can find any error messages in the logfile at TASpring/AI/myai/csharpai_team0.log

Just make any corrections, recompile, copy the new dlls over to TASpringAI/myai , and say &quot;.reloadai&quot; in the game to load the corrected AI dll.
= Building your first solar panel =

Let's make the commander build a solar panel.

To do this, we use aicallback.GiveOrder , passing in the commander's id and an appropriately initialized Command object.

The Command object has two parts: 
*an id that specifies the command type, in this case it will be the typeid for a solar cell
*a double array which in this case specifies the position of the new solar cell.

There are a couple of prerequisites:
*we need to know the commander's id, to give to the GiveOrder function
*we need the typeid for a solar cell
*we need to find an appropriate location for the solar panel

== Get Commander id ==

First, let's get the commander's id.  An easy way to do this is using the UnitFinished method in the CSAI class.  This method is essentially an event that fires whenever a new friendly unit has finished building.
We'll get a UnitFinished event for the commander right at the start of the game.

In the UnitFinished function there should be a line &quot;IUnitDef unitdef = aicallback.GetUnitDef( deployedunitid );&quot;.
*this line obtains an IUnitDef object for the newly created unit
*An IUnitDef gives access to data about each unit type, such as its name, its human name, whether it is a commander
*You can browse through the properties available on an IUnitDef using Visual Studio Express:
**On the line just after IUnitDef def = aicallback.GetUnitDef( deployedunitid );, type:
**unitdef.
**Intelisense should automatically produce a list of all the unitdef properties you can read.
Instead of writing &quot;unitdef.&quot;, insert some new code to get the commander's id, type:

if( unitdef.isCommander )
{
   int commanderid = deployedunitid;
   aicallback.SendTextMsg( &quot;Commander id is: &quot; + commanderid, 0 );
}

*Recompile, copy the dlls over to TASpring/AI/myai, and restart the game to test this modification
*The AI should say &quot;Commander id is: &quot; and the commander's id

Note that since the commander is created only once in each game, at the start, you'll need to restart the game, .reloadai is not going to work with this code.

If it works, good.  If there's a problem, you can check the logfile at TASpring/AI/myai/csharpai_team0.log

== Get solar cell typeid ==

Next, let's look at finding the typeid for solar cells.  
To do this, we can use the function aicallback.GetUnitDefList()

IUnitDef[] GetUnitDefList()

This returns an array containing an IUnitDef s for every available unit in the currently loaded mod.

The function takes a while to run, 2-3 seconds, so you probably want to run this only once in your real AI, and store the results.

We can get the solar cell's typeid using the following code.  Add this inside your if, just after the aicallback.SendTextMsg line:

 IUnitDef[] unitdeflist = aicallback.GetUnitDefList();
 IUnitDef solarcelldef = null;
 foreach(IUnitDef thisunitdef in unitdeflist )
 {
    if( thisunitdef.name == &quot;ARMSOLAR&quot; )
    {
       solarcelldef = thisunitdef;
    }
 }
 aicallback.SendTextMsg( &quot;Found solar cell def: &quot; + solarcelldef.id + 
    &quot; human name: &quot; + solarcelldef.humanName, 0 );

Recompile, copy the csai.dll and csai.pdb files over to TASpring/AI/myai and restart the game.

Remember that .reloadai won't work with this code, because we're relying on the UnitFinished event to get the commmander's id.

== Get buildsite ==

Next we need to find an appropriate location for the solar panel.  The function to do this is aicallback.ClosestBuildSite:

aicallback.ClosestBuildSite( IUnitDef unitdef, Float3 targetpos, double searchRadius, int minDistance )

*unitdef: the IUnitDef for the unit we want to build
*targetpos: roughly where we want to build it
*minDistance: not sure, but putting 2 here works
*searchRadius: how far to look for a build spot before giving up

We already have the unitdef for a solar cell, so we just need an approximate location.  We can use the commander's location for this.
We can get this by calling aicallback.GetUnitPos:

Float3 GetUnitPos( int unitdeployedid )

*unitdeployedid:  the unit's deployedid, in this case we'll use commanderid
*returns the position as a Float3

Float3's are used a lot.  They have three properties x, y, z, which typically represent the position of something.

Let's get the commander's position.  After the foreach(){} block above, you can add the following code:

 Float3 commanderpos = aicallback.GetUnitPos( commanderid );
 aicallback.SendTextMsg( &quot;The commander's position is &quot; +
    commanderpos.ToString(), 0 );

Compile, copy the dlls, and restart the game.  You should see the AI say the position of the commander.

Now, we can call ClosestBuildSite to get a good build site for the solar cell.  Add the following code beneath our last aicallback. SendTextMsg line:

 Float3 buildsite = aicallback.ClosestBuildSite( 
    solarcelldef, commanderpos, 1400, 2 );
 aicallback.SendTextMsg( &quot;solar cell buildsite: &quot; + buildsite.ToString(), 0 );

Build, copy the dlls, restart the game
*You should see the ai giving the proposed solar cell position
*Check that it's roughly near the commander's position , otherwise double check the code above

== Build solar cell ==

We've got the information we need.  Now let's build a solarcell.  We can use aicallback.GiveOrder.  The general format for a GiveOrder command is:

aicallback.GiveOrder( targetid, new Command( commandid, new double[]{ x, y, z } ) );

*The targetid in this case is the commander's id, commanderid
*The commandid can take specific predefined values, such as CMD_MOVE or CMD_ATTACK
*For a build command, commandid is minus the type id of the unit to build
*Lastly, an array of doubles, which in this case is the position where we want to build the solar cell

Just underneath the last aicallback.SendTextMsg line, add the following lines:

aicallback.GiveOrder( commanderid, new Command( - solarcelldef.id, buildsite.ToDoubleArray() ) );

The code you just wrote should look something like:

 IUnitDef unitdef = aicallback.GetUnitDef( deployedunitid );
if (unitdef.isCommander)
{
    int commanderid = deployedunitid;
    IUnitDef[] unitdeflist = aicallback.GetUnitDefList();
    IUnitDef solarcelldef = null;
    foreach (IUnitDef thisunitdef in unitdeflist)
    {
        if (thisunitdef.name == &quot;ARMSOLAR&quot;)
        {
            solarcelldef = thisunitdef;
        }
    }
    aicallback.SendTextMsg(&quot;Found solar cell def: &quot; + solarcelldef.id + 
      &quot; human name: &quot; + solarcelldef.humanName, 0 );
    Float3 commanderpos = aicallback.GetUnitPos(commanderid);
    aicallback.SendTextMsg(&quot;The commander's position is &quot; + 
       commanderpos.ToString(), 0 );
    Float3 buildsite = aicallback.ClosestBuildSite(
       solarcelldef, commanderpos, 1400, 2);
    aicallback.SendTextMsg( &quot;solar cell buildsite: &quot; + 
       buildsite.ToString(), 0 );
    aicallback.GiveOrder(commanderid, new Command(-solarcelldef.id,
       buildsite.ToDoubleArray()));
}

Recompile, copy the dlls and restart the game to test.

Important: we're building an ARM solar panel, so the AI must be running as ARM for this to work.

Hopefully you should see the commander build a solar panel.  Otherwise check the logfile for any error message, and try again.

Remember that .reloadai won't work with this code, because we're relying on the UnitFinished event to get the commmander's id, so you'll need to restart the game.  There are ways around this, but that is for later :-) .

Here's some pictures of the commander building a solar panel:

http://manageddreams.com/csai/screenshots/tut_buildsolar1.JPG

http://manageddreams.com/csai/screenshots/tut_buildsolar2.JPG
[[Category:AI Dev]]</text>
      <sha1>jkkylws6iljqq0wi1ua6vrmyngeh0ok</sha1>
    </revision>
  </page>
  <page>
    <title>AI:JAI</title>
    <ns>0</ns>
    <id>2505</id>
    <revision>
      <id>18474</id>
      <parentid>15573</parentid>
      <timestamp>2010-03-03T22:07:04Z</timestamp>
      <contributor>
        <username>Hoijui</username>
        <id>2288</id>
      </contributor>
      <minor/>
      <comment>deprecation</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8858">{{deprecated}}

{{AI|JAI|hoijui|alpha 4 (spring SVN)|Supports All Mods|DEPRECATED|GNU GPL v2+}}

=== Forum threads ===
*[http://spring.clan-sy.com/phpbb/viewtopic.php?f=15&amp;t=12308 Java AI Interface for Spring]
*[http://spring.clan-sy.com/phpbb/viewtopic.php?f=15&amp;t=15019 AI Interface redesign (in C)]

== Description ==
This AI is &lt;font color=&quot;FF0000&quot;&gt;'''DEPRECATED'''&lt;/font&gt;, see [[AIInterface:Java|Java AI Interface]] instead.

JAI is a ''Java wrapper interface'' for the GlobalAI interface of Spring. It allows AIs to be written in Java. It is ''not'' an AI itself.

It is not recommended to use or even test this version, as it is based on the C++ AI interface still. Development is on hold, till the new C interface for AIs is released, after which JAI will be ported to use that interface, for greater simplicity and flexibility.

At the time of writing (May 2008), JAI only works with SVN builds of Spring, due to a necessary change in the way Spring handles AI loading.
The current JAI package has been developed and tested using spring r5956.

== Downloads ==
* [http://spring.jobjol.nl/show_file.php?id=1022 JAI-bin.zip] - for testing JAI with the default Java AI implementation
* [http://spring.jobjol.nl/show_file.php?id=1021 JAI-src.zip] - for implementing your own Java AI and for testing JAI deeper

== How to use/test it ==
First of all, extract the contents of JAI-&lt;version&gt;-bin.zip to your /spring/ directory. Note that, unlike normal AI DLLs, the JAI.dll does NOT belong directly into /spring/AI/Bot-libs, but into the /JAI subdirectory.

Software you need to have installed to be able to run JAI:
* [http://java.sun.com/javase/downloads Java SDK (tested with 1.6.0)]
* spring r5956 (found at [http://planetspring.free.fr/spring the buildbot]), though it may also run on newer builds of spring.

Make sure your Env-Vars are set like this:

On Windows:&lt;br&gt;
&lt;code&gt;
SET JAVA_HOME=C:/Program Files/Java/jre1.6.0_05&lt;br&gt;
SET PATH=%JAVA_HOME%/bin;%JAVA_HOME%/bin/client;%PATH%
&lt;/code&gt;

On Linux:&lt;br&gt;
&lt;code&gt;
export JAVA_HOME=/usr/jre1.6.0_05&lt;br&gt;
export PATH=$JAVA_HOME/bin:$JAVA_HOME/bin/client:$PATH
&lt;/code&gt;

If your lobby of choice does not support adding Java AIs as bots yet (until May 2008 only supported by SpringLobby), you will have to manually edit the startup script for spring.
A simple way to do this is the following:&lt;br&gt;
 1. Start TASClient
 2. Host a new game
 3. Set everything to your liking
 4. Add one or more Bots using a normal AI DLL such as AAI.dll or KAIK.dll
 5. Start the game and abort it using SHIFT+ESCAPE once it's loaded
 6. Open script.txt (in the spring root directory)
 7. Search for aidll=&lt;whatever DLL you choose&gt;
 8. Replace it with aidll=AI/Bot-libs/tst.jar
 9. Open a command line window, navigate to your spring directory
 10. Start Spring using &quot;spring.exe script.txt&quot; on the command line

If the game crashes, See [[#Bug Report|Bug Report]] below
If it does not, and you're using the tst.jar, you can chat numbers from 1 to 7 to test the AI.
This is how tst.jar should react to chat numbers:&lt;br&gt;
 1 List friendly units
 2 Print start position
 3 Listing selected units
 4 Listing UnitDefs
 5 Attack: sends all units to positions of currently visible ememies
 6 Toggle global rally point: move units to random position after creation (default: false)
 7 Attack cheat: sends all units to positions of enemies

Some of these commands may require you to switch your team to the AI's, and build some units first. Do &quot;/cheat&quot; and then &quot;/team 1&quot; to achieve this.

=== Bug Report ===
If the game crashes, check the various log files:
* AI/Bot-libs/JAI/log/
* AI/hoijuiAI/log/
* infolog.txt (spring default log file)
* hotspot.log (JVM log file)
* hserror_pid*.log (indicates a fatal JVM crash)
Most likely, you will not have all of them. They will be reduced in number in future versions, sorry ;-)
Please report any errors to hoijui in the forum or on the main lobby, thanks. Do not commit the error as a bug on mantis please.

== Build from Source ==
(Hint: the whole procedure is currently a bit simpler on windows)
There are two makefiles available:
* windows (tested on XP)
* linux (tested on Upuntu 7.10).
they both compile with mingw and for windows (so they can be used to create for the official release build of spring).

First off, you need the current spring svn version and the build environment set up for it, see [[Source_Development#Setting_up_your_development_environment|Compiling Spring]].
Build spring (make sure that JAI is not yet in AI/Global, as building spring would fail then).

Software you need to have installed to be able to compile JAI:
* [http://java.sun.com/javase/downloads Java SDK 1.6.0+]
* [http://www.swig.org/download.html  SWIG 1.3.31+]

Extract the JAI-src.zip to:
spring_current_svn/AI/Global
in the Makefile(s), you have to adjust the vars:
* JAVA_HOME
* SPRING_CURRENT_WINDOWS (only change this if you use the unix makefile)
on unix, you can set SPRING_CURRENT_WINDOWS to a mount of an smb shared spring on a windows PC, which needs to contains the same build as the one on unix. if you dont do this, you have to manually copy the results to your test machine on windows. As the makefile only compiles for windows, you can not test JAI on linux yet, except you adjust the makefile yourself and get it to work.

Compile with either of the two:

&lt;code&gt;makefile -f Makefile_unix jall&lt;/code&gt;

&lt;code&gt;makefile -f Makefile_win32 jall&lt;/code&gt;

You should now have JAI ready to run, please see [[#How to use/test it|above]].

== Creating your own implementation ==
To create your own implementation, it is best to use hoijui's test implementaion at JAI-&lt;version&gt;-src.zip/src/java-impl-tst or JAI-&lt;version&gt;-src.zip/src/java-impl-hoijui as a start. It are minimal, sample implementations, which come with a netbeans project each.
A Java GlobalAI consist of one implementation for each:
* &lt;code&gt;com.clan_sy.spring.ai.global.java.AI&lt;/code&gt;
* &lt;code&gt;com.clan_sy.spring.ai.global.java.Factory&lt;/code&gt;
To compile, you also need JAI.jar (JAI-&lt;version&gt;-bin.zip/JAI) in your classpath.

You can override methods from the superclass of TstAI.java or HoijuiAI.java to implement AI behavior. Once you are done modifying, just export your classes to a jar, and use it as your Java AI as described [[#How to use/test it|above]]. Make sure to set your new jar in step 8.

If you need further Java libraries, put the jars into AI/Bot-libs/JAI/lib, and native libraries into AI/Bot-libs/JAI/lib aswell.

=== Debugging ===
It is possible to debugg your Java AI while it runs in spring.
To enable debugging, you need to save the following into file AI/Bot-libs/JAI/config.xml:

&lt;code&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;

&lt;JAI-config&gt;
    
    &lt;jvm&gt;
        &lt;!-- MAIN options --&gt;
        &lt;option&gt;-Xms4M&lt;/option&gt;
        &lt;option&gt;-Xmx64M&lt;/option&gt;
        &lt;option&gt;-Xss512K&lt;/option&gt;
        &lt;option&gt;-Xoss400K&lt;/option&gt;
        &lt;!--&lt;option&gt;-XX:+AlwaysRestoreFPU&lt;/option&gt;--&gt;

        &lt;!-- LOGGING options --&gt;
        &lt;option&gt;-verbose:jni&lt;/option&gt;
        &lt;option&gt;-Xcheck:jni&lt;/option&gt;
        &lt;option&gt;-XX:+UnlockDiagnosticVMOptions&lt;/option&gt;
        &lt;option&gt;-XX:+LogVMOutput&lt;/option&gt;
        &lt;!--&lt;option&gt;-XX:LogFile=./AI/Bot-libs/JAI/log/jvm-log.txt&lt;/option&gt;--&gt;

        &lt;!-- DEBUG options --&gt;
        &lt;option&gt;-Xdebug&lt;/option&gt;
        &lt;option&gt;-Xnoagent&lt;/option&gt;
        &lt;option&gt;-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=7777&lt;/option&gt;
        &lt;!-- disables JIT (required for debugging under the classical VM) --&gt;
        &lt;option&gt;-Djava.compiler=NONE&lt;/option&gt;
    &lt;/jvm&gt;
&lt;/JAI-config&gt;
&lt;/code&gt;

Run spring with a JAI implementation. Now you can connect with a java debugger to the machine running spring on port 7777.

== How does it work ==
JAI utilizes the jvm.dll of the JRE/JDK through JNI, to create a virtual machine for the Java AI to run in.
It uses the same C/C++ interface as the native AIs, and just translates calls from one langauge to the other, bidirectional. Most of the sourcecode is generated with SWIG. This has the advantage that it supports a lot of other languages. One side is always C/C++, but the other could be Java, Lua, C#, Phyton, Ruby, ...

See [http://www.swig.org SWIG Home] for further details.
Supporting an other language is not as easy as just switching one variable from &quot;Java&quot; to &quot;Ruby&quot; eg, but if you are desperate, you might want to use JAI as a base to support your favourite language.

=== Used Libraries ===
* JVM: ...cause we are doing Java
* JarClassLoader: loading classes from jars at runntime (Java)
* Apache Commons: logging and parsing XML (Java)
* log4j: logging (Java)
* javax.vecmath.Vector3f: backend for the Java version of float3 (Java)
* TinyXML: parsing XML (C/C++)
* CMetalMap: Krogothes Metal Spot finder (C/C++)

== TODO ==
* making it ready for release -&gt; waiting for feedback

''' [[AIs|&lt;- Back to AI page]]'''
[[Category:AI]]</text>
      <sha1>kd9epwo172j0e722rncwddmmrztqto5</sha1>
    </revision>
  </page>
  <page>
    <title>AI:JCAI</title>
    <ns>0</ns>
    <id>1092</id>
    <revision>
      <id>10922</id>
      <parentid>9254</parentid>
      <timestamp>2007-07-02T07:25:59Z</timestamp>
      <contributor>
        <username>XCarstenx</username>
        <id>2130</id>
      </contributor>
      <comment>Spam deleted - Content taken from 19:10, 13 May 2006 Mcspang</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="585">{{AI|JCAI|Zaphod|V0.24|Supports XTA, AA|No longer under Development|Open Source}}

JCAI is an [[AI]] that is being developed by [[User:Zaphod|Zaphod]]. It is quite good so far, and is being shipped with Spring. It reads mod information from a text file, so additional mods can be supported.

Unfortunately, Zaphod has dropped the JCAI project and taken over as lead programmer of the spring engine.

=== Links ===
* [http://taspring.clan-sy.com/phpbb/viewtopic.php?t=2465 JCAI Forum Thread]
* [http://cvs.sourceforge.net/viewcvs.py/springrts/taspring/JCAI/ JCAI on CVS]
[[Category:AI]]</text>
      <sha1>ighpkdieha8fk4nfnbl6je502w3tbve</sha1>
    </revision>
  </page>
  <page>
    <title>AI:KAI</title>
    <ns>0</ns>
    <id>1790</id>
    <redirect title="KAI" />
    <revision>
      <id>11604</id>
      <timestamp>2006-09-18T18:39:13Z</timestamp>
      <contributor>
        <username>FoeOfTheBee</username>
        <id>20</id>
      </contributor>
      <comment>AI:KAI moved to KAI</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="18">#REDIRECT [[KAI]]
</text>
      <sha1>l1pc87cpycr7ghx44lo5xz1p7iwszt9</sha1>
    </revision>
  </page>
  <page>
    <title>AI:KAIK</title>
    <ns>0</ns>
    <id>2466</id>
    <revision>
      <id>16563</id>
      <parentid>15239</parentid>
      <timestamp>2009-06-08T09:32:37Z</timestamp>
      <contributor>
        <username>Hoijui</username>
        <id>2288</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1229">{{AI | KAIK | Krogothe, Kloot | v0.13 | Most TA-Style Mods | Under Active Development | Open Source (licensed under the GPL) since KAI 0.11 | C | LegacyCpp}}

'''KAIK''' is an evolutionary development of '''KAI''', an AI originally written by Krogothe, Tournesol and Firenu and now maintained by Kloot. It inherits and builds upon the GPL'ed KAI 0.11 codebase, while keeping the core KAI behavioral routines. KAI(K) comes bundled with Spring since 0.74b3, and requires no config files or other user intervention to play most mods (although it does not really like ones that deviate from the TA style of play too much, such as Kernel Panic). For more information, bug reports, etc., visit its forum thread here:

http://spring.clan-sy.com/phpbb/viewtopic.php?t=11343

= List of working MODs = 

If you cannot configure the mod, in order to get an ennemy attacking, you should combine KAIK with the following MODs.

* Balanced Annihilation v6.21 - will create only ground units.

The Following MODs don't works

* Kernel Pannic v2.2 Div 0 - No production at all

The followings MODS would produce an error : 

* KuroTA 0.52 - game stop immediately

TODO: write more


'''[[AI:Skirmish:List|&lt;- Back to AI page]]'''

[[Category: AI]]</text>
      <sha1>8tp0qsfxxykwxr4ran4zolyila70ud2</sha1>
    </revision>
  </page>
  <page>
    <title>AI:Links</title>
    <ns>0</ns>
    <id>944</id>
    <revision>
      <id>28970</id>
      <parentid>28969</parentid>
      <timestamp>2014-10-22T22:37:44Z</timestamp>
      <contributor>
        <username>Paulomorfeo</username>
        <id>2902</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3140">=AI Links=

;'''[[AI_Research | Another &quot;AI Research&quot; wiki page]]''': Another page of similar content (likely lack of syncronization between people editing).

;'''[http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-370-the-battlecode-programming-competition-january-iap-2013/lecture-videos/ MIT lectures on developing RTS AIs]''': Videos of MIT lectures for the class Battlecode (developing AIs for an in-house RTS).&lt;br&gt;

;'''[http://www.darkstars.co.uk Darkstars]''': AF's main site, has a lot of theory on it, including details of his NTai project&lt;br&gt;

;'''[http://taspring.clan-sy.com/phpbb/viewtopic.php?t=539 5 Matrix AI 1,2,3]''': A thread discussing Triaxx' theory and plans for his AI 5 matrix AI/Wormhole AI&lt;br&gt;

;'''[http://taspring.clan-sy.com/phpbb/viewtopic.php?t=2752&amp;highlight= &quot;Research about Pathfinding, AI and Voronoi diagrams&quot;]''': A forum post by Gabba.&lt;br&gt;

;'''[http://taspring.clan-sy.com/phpbb/viewtopic.php?t=4326 Academic research papers on AI in RTS games]''': A forum post by NeuronExMachina.&lt;br&gt;

;'''[[AIResearch | AI research Material]]''': Research links to articles and documents about AI&lt;br&gt;

;'''[http://www.topcoder.com/tc?module=Static&amp;d1=tutorials&amp;d2=greedyAlg Greedy is good]''': Greedy is good tutorial at topcoder.com&lt;br&gt;

;'''[http://www.topcoder.com/tc?module=Static&amp;d1=tutorials&amp;d2=graphsDataStrucs1 Graph and data structures]''': Graph and data structures tutorial at topcoder.com. This includes path-finding using bfs&lt;br&gt;

;'''[[AI:HughsUnitGroupingHeuristic|Unit grouping heuristic]]''': Unit grouping and reorg heuristic by Hugh Perkins&lt;br&gt;

;'''[http://christophermpark.blogspot.co.uk/2009/06/optimizing-30000-ships-in-realtime-in-c.html Optimizing 30,000+ Ships In Realtime In C#]''': Lead developer of game AI Wars discusses performance considerations for his RTS handling 30K+ units. Mostly good ideas on how to build a performance RTS engine but also some ideas applicable on how to make a performant AI agent, like working with fixed-ints rather than floats (especially for sync issues between different computers) or imperfect range checks.&lt;br&gt;

;'''[http://christophermpark.blogspot.co.uk/2009/07/range-checks-approximation-vs-accurate.html Range Checks - Approximation vs Accurate]''': Lead developer of game AI Wars discusses how to improve performance of range checks at the cost of accuracy, which also raises the question of whether we really need 100% accurate range checks always/most times/ever in an AI agent. He states (other post) that range checks was the largest consumer of CPU in the alpha version of the game. He describes how he used an alternative that doesn't use the expensive SquareRoot math calculation.&lt;br&gt;

;'''[http://christophermpark.blogspot.co.uk/2009/06/designing-emergent-ai-part-1.html Designing Emergent AI, Part 1: An Introduction]''': Lead developer of game AI Wars explains how the game's AI works - essentially an overview of how to conceptually construct an AI agent for RTSs. A good resource on how to start going at building an AI agent for an RTS.&lt;br&gt;

''' [[Main_Page|&lt;- Back to Main page page]]'''

[[Category: AI Dev]]</text>
      <sha1>ig19hycq24v0b23luchpoh0tdb5tcin</sha1>
    </revision>
  </page>
  <page>
    <title>AI:NTAI</title>
    <ns>0</ns>
    <id>1093</id>
    <revision>
      <id>25479</id>
      <parentid>25478</parentid>
      <timestamp>2012-11-26T14:14:17Z</timestamp>
      <contributor>
        <username>Af</username>
        <id>2575</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="964">[http://img434.imageshack.us/img434/6500/screen0898vk.jpg http://img432.imageshack.us/img432/8080/thumb0896lz.jpg][http://img393.imageshack.us/img393/536/screen0920qb.jpg  http://img432.imageshack.us/img432/7251/thumb0924ca.jpg][http://img393.imageshack.us/img393/8756/screen0903up.jpg http://img432.imageshack.us/img432/5011/thumb0903nl.jpg]

{{AI|NTai|Tom J Nowell([[User:AF|AF]])|XE10+|Unspecified Mod Support|Indefinite Hiatus|Open Source|C|LegacyCpp}}

'' AF: I would not use this page as a detail on my AI as I havent the time to maintain my wiki entries. This was also written at a time when I tended to overemphasise points while leaving important details out. Instead look at the project/portfolio sub site of my website www.darkstars.co.uk''

== Shard ==

It's advise that you use my newer AI project instead, named [[AI:Shard|Shard]].

== Links ==
* [http://www.darkstars.co.uk AF's site]

'''[[AI:Skirmish:List|&lt;- Back to AI page]]'''

[[Category: AI]]</text>
      <sha1>j8j84lqeyao476vp9hclz0dp3ib5uhq</sha1>
    </revision>
  </page>
  <page>
    <title>AI:NullAI</title>
    <ns>0</ns>
    <id>2566</id>
    <revision>
      <id>16568</id>
      <parentid>16516</parentid>
      <timestamp>2009-06-08T09:52:08Z</timestamp>
      <contributor>
        <username>Hoijui</username>
        <id>2288</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1664">{{AI|NullAI|zenzike &amp; [[User:hoijui|hoijui]]|0.1|Supports everything / Does nothing|Finnished|GNU GPL V2+|C|-}}

=== Description ===
This Skirmish AI is written in pure C, to prove that the C AI interface works. It consists of only the very minimum that is needed for a spring Skirmish AI to load. 

NullAI is an empty implementation, meaning it will load, but do absolutely nothing. It can be used to test the AI interface or for exploring a map if one wants the end game screen not to appear. It can also be used as a template for new C or C++ Skirmish AI projects.

This AI uses the [[AIInterface:C|C &amp; C++ AI Interface library]]. See also [[AI:NullLegacyCppAI|Null Legacy C++ AI]] and [[AI:CppTestAI|C++ Test AI]].

=== Download ===
It comes with spring source. Reffer to [[Building_spring#Obtaining_the_Source|Obtaining the Source]].

=== Known Crashes ===
* None

=== How to compile ===
'''The easy way'''

Use SCons or CMake (refer to [[Building_spring|Building spring]]).

'''The hard way'''

* include directories:
** ''{spring_source}/rts''
** ''{spring_source}/rts/System''
** ''{spring_source}/rts/ExternalAI/Interface''
** ''{spring_source}/AI/Skirmish/NullAI''
* source files:
** ''{spring_source}/AI/Skirmish/NullAI/*.c''
* create dynamic loadable shared library (module)
* should compile with all C compilers (tested with MinGW, GCC, Intel)

=== How to install ===
from: ''{spring_source}/AI/Skirmish/NullAI/''&lt;br&gt;
to: ''{spring_data_dir}/AI/Skirmish/NullAI/{NullAI-version}/''
* copy ''build/libNullAI.so'', ''build/libNullAI.dylib'' or ''build/NullAI.dll'' to ''./''
* copy ''data/*'' to ''./''


''' [[AIs|&lt;- Back to AI page]]'''
[[Category:AI]]</text>
      <sha1>b3p5kmskial5jr0p6hi4wldllhu5u32</sha1>
    </revision>
  </page>
  <page>
    <title>AI:NullJavaAI</title>
    <ns>0</ns>
    <id>2601</id>
    <revision>
      <id>16577</id>
      <parentid>16573</parentid>
      <timestamp>2009-06-08T10:27:58Z</timestamp>
      <contributor>
        <username>Hoijui</username>
        <id>2288</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1595">{{AI|NullJavaAI|[[User:hoijui|hoijui]]|0.1|Supports everything / Does nothing|Finnished|GNU GPL V2|Java|-}}

== Null Java AI ==

==== Description ====
This Skirmish AI is written in pure Java, to prove that the Java AI interface works. It consists of only the very minimum that is needed for a spring Java Skirmish AI to load. 

NullJavaAI is an empty implementation, meaning it will load, but do absolutely nothing. It can be used to test the Java AI interface or for exploring a map if one wants the end game screen not to appear. If you want to write your own Java AI, we recommend using the [[AI:NullOOJavaAI|NullOOJavaAI]] as a template instead of this one.

This AI uses the [[AIInterface:Java|Java AI Interface Library]]. See also [[AI:NullOOJavaAI|Null Object Oriented Java AI]].

==== Download ====
It comes with spring source. Reffer to [[Building_spring#Obtaining_the_Source|Obtaining the Source]].

==== Bugs ====
'''Known Crashes:'''
* None

Please report bugs under
[http://springrts.com/mantis/ Mantis]
to the AI subproject.

==== How to compile ====
multiple ways:
* Spring build environments: either SCons or CMake; refer to [[Building_spring|Building spring]].
* OS specific build script: ''{spring_source}/AI/Skirmish/NullJavaAI/bin/java_compile.(sh|bat)''

==== How to install ====
from: ''{spring_source}/AI/Skirmish/NullJavaAI/''&lt;br&gt;
to: ''{spring_data_dir}/AI/Skirmish/NullJavaAI/{NullJavaAI-version}/''
* copy the created ''SkirmishAI.jar'' and ''SkirmishAI-src.jar'' to ''./''
* copy ''data/*'' to ''./''


'''[[AI:Skirmish:List|&lt;- Back to AI page]]'''

[[Category: AI]]</text>
      <sha1>1nrgbavjd2mfgp3fwli5cexxm4ncc88</sha1>
    </revision>
  </page>
  <page>
    <title>AI:NullLegacyCppAI</title>
    <ns>0</ns>
    <id>2567</id>
    <revision>
      <id>16572</id>
      <parentid>16570</parentid>
      <timestamp>2009-06-08T10:01:56Z</timestamp>
      <contributor>
        <username>Hoijui</username>
        <id>2288</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1842">{{AI|NullLegacyCppAI|UNKNOWN &amp; [[User:hoijui|hoijui]]|0.1|Supports everything / Does nothing|Finnished|-|C|LegacyCpp}}

== Null Legacy C++ AI ==

==== Description ====
This Skirmish AI is written in C++ and uses the legacy C++ wrapper over the C AI Interface to prove that this wrapper works, and for testing purposes.

It is an empty implementation, meaning it will load, but do absolutely nothing. NullLegacyCppAI can be used to test the AI interface, or for exploring a map if one wants the end game screen not to appear. It can also be used as a template for C++ Skirmish AI projects that want to use the legacy C++ interface (not recommended, see [[AI:CppTestAI|Test C++ AI]] instead).

This AI uses the [[AIInterface:C|C &amp; C++ AI Interface Library]]. See also [[AI:NullAI|Null AI (pure C)]].

==== Download ====
It comes with spring source. Reffer to [[Building_spring#Obtaining_the_Source|Obtaining the Source]].

==== Known Crashes ====
* None

==== How to compile ====
* include directories:
** {spring_source}/rts/System
** {spring_source}/AI/Wrappers/LegacyCpp
** {spring_source}/AI/Skirmish/NullLegacyCppAI
** {spring_source}/rts/ExternalAI
** {spring_source}/rts/ExternalAI/Interface
* source files:
** {spring_source}/AI/Skirmish/NullLegacyCppAI/*.cpp
** {spring_source}/AI/Wrappers/LegacyCpp/*.cpp
* create dynamic loadable shared library (module)
* should compile with all C++ compilers, if it does not, please report it, or even better: send a fix

==== How to install ====
from: ''{spring_source}/AI/Skirmish/NullLegacyCppAI/''&lt;br&gt;
to: ''{spring_data_dir}/AI/Skirmish/NullLegacyCppAI/{NullLegacyCppAI-version}/''
* copy ''build/libNullLegacyCppAI.so'', ''build/libNullLegacyCppAI.dylib'' or ''build/NullLegacyCppAI.dll'' to ''./''
* copy ''data/*'' to ''./''

''' [[AI:Skirmish:List|&lt;- Back to AI page]]'''

[[Category: AI]]</text>
      <sha1>j9uw8606dz4dd2ztzg4m4nkzmiis0bz</sha1>
    </revision>
  </page>
  <page>
    <title>AI:NullOOJavaAI</title>
    <ns>0</ns>
    <id>2602</id>
    <revision>
      <id>16578</id>
      <parentid>16574</parentid>
      <timestamp>2009-06-08T10:28:20Z</timestamp>
      <contributor>
        <username>Hoijui</username>
        <id>2288</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1877">{{AI|NullOOJavaAI|[[User:hoijui|hoijui]]|0.1|Supports everything / Does nothing|Finnished|GNU GPL V2+|Java|-}}

== Null Object Oriented Java AI ==

==== Description ====
This Skirmish AI is written in pure Java, to prove that the Java Object Oriented Wrapper works. It consists of only the very minimum that is needed for a spring Java OO Skirmish AI to load. 

NullOOJavaAI is an empty implementation, meaning it will load, but do absolutely nothing. It can be used to test the Java OO wrapper or for exploring a map if one wants the end game screen not to appear. If you want to write your own Java AI, we recommend you to use this AI as a template.

This AI uses the [[AIInterface:Java|Java AI Interface Library]]. See also [[AI:NullJavaAI|Null Java AI]].

==== Download ====
It comes with spring source. Reffer to [[Building_spring#Obtaining_the_Source|Obtaining the Source]].

==== Bugs ====
'''Known Crashes:'''
* None

Please report bugs under
[http://springrts.com/mantis/ Mantis]
to the AI subproject.

==== How to compile ====
possible ways to compile:
* spring build environemnts. either Scons or CMake. refer to [[Building_spring|Building spring]]
* OS specific build script: ''{spring_source}/AI/Skirmish/NullOOJavaAI/bin/java_compile.(sh|bat)''
* Ant build file under ''{spring_source}/AI/Skirmish/NullOOJavaAI/bin''. First edit ''ant.properties'', then run ''ant''

==== How to install ====
'''The easy way'''

Using Ant:&lt;br&gt;
Go to ''{spring_source}/AI/Skirmish/NullOOJavaAI/bin'' and edit ''ant.properties''. then run ''ant dist''.

'''The uncomfortable way'''

from: ''{spring_source}/AI/Skirmish/NullOOJavaAI/''&lt;br&gt;
to: ''{spring_data_dir}/AI/Skirmish/NullOOJavaAI/{NullOOJavaAI-version}/''
* copy the created ''SkirmishAI.jar'' and ''SkirmishAI-src.jar'' to ''./''
* copy ''data/*'' to ''./''


'''[[AI:Skirmish:List|&lt;- Back to AI page]]'''

[[Category: AI]]</text>
      <sha1>tphygf6k7tny5hfgid5egzqqpeghk0j</sha1>
    </revision>
  </page>
  <page>
    <title>AI:RAI</title>
    <ns>0</ns>
    <id>1897</id>
    <revision>
      <id>29052</id>
      <parentid>16561</parentid>
      <timestamp>2014-11-19T16:18:19Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4455">{{AI|RAI|Reth|v0.601|Supports Most Known Mods|Under Active Development|GNU GPL|C|LegacyCpp}}

The [https://github.com/spring/spring/tree/develop/AI/Skirmish/RAI Source code] of RAI is integrated into spring.
=== Forum thread ===

*[http://taspring.clan-sy.com/phpbb/viewtopic.php?t=7924 &quot;RAI v0.601&quot;]

=== Older Version Downloads ===
*[http://www.fileuniverse.com/?p=show&amp;a=it&amp;id=5296 Windows]
*[http://spring.jobjol.nl/show_file.php?id=949 Linux 64bit]
*[http://www.fileuniverse.com/?p=show&amp;a=it&amp;id=5398 Source code]

Mods with incomplete support:
*BloX (transporters unsupported: can't figure out that guns are attached to the transporters to make a tank)
*1944 &amp; Epic Legions (requires a unique method of destroying parts of the enemy base)
*Fibre - units are controlled differently than RAI expected, AI-Events do not occur in the way that is expected
* more generally, any mod that does not have controllable mobile attack units

=== How to compile on Linux ===
Recent versions of spring (0.77+) can compile it without any hassle, using both scons and cmake. A simple ''scons'' or ''make'' (if using cmake) will do.

For older versions of spring (0.76):
* download spring sources [http://spring.clan-sy.com/dl/spring_0.76b1_src.tar.bz2 here], and extract it somewhere
* download RAI sources [http://www.fileuniverse.com/spring/ai/RAI%20v0.553%20source.rar here], and save it into the ''{spring source}/AI/Global/'' folder
* install the glew development package - on Ubuntu it's ''sudo apt-get install libglew1.5-dev''
* open the project in CodeBlocks - there's a project file for CB provided in the RAI/CodeBlocks directory
* then edit the sources a bit to have them be more cross-platform friendly - atm they use a windows function to create folders.
** in v0.553: RAI/Global.cpp, edit line 4 to say ''#include &lt;sys/stat.h&gt;'' instead
** for v0.600: this is RAI/RAI.cpp, line 10
** in v0.553: RAI/Global.cpp, edit lines 157-158 to say:
*** mkdir( &quot;AI/RAI&quot;, S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH );
*** mkdir( &quot;AI/RAI/Metal&quot;, S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH );
** for v0.600: this is RAI/RAI.cpp, lines 1086-1089
* at this point, it'll compile fine, but give some warnings about int floats. The problem is that it doesn't generate a .so somehow though, so some voodoo magic needs to be done
** Go to project properties, and under Build Targets, enable 'auto generate extension'.
* now use clean the project, and recompile the whole thing. You ''should'' get a RAI.so in the CodeBlocks directory. 
* to test, put the .so into ''~/.spring/AI/Bot-libs/'', and since SpringLobby will see it right away, try a single player game.

=== Version History ===
v0.601:
*Fixes
v0.600:
*terrain-map improvements (nearly complete universal map support)
*map-areas generated for each mobile unit-type defined by slope,elevation,hovering,floating capabilities
*units will, virtually, never attempt to make an impossible move (based on the starting terrain)
*factories will no longer be build in sectors/areas that give their units access to less than 20% of the map
*acid/lava and other harmful water maps are now properly detected and will not be built in or moved across (excluding units with hover/flying capabilities)
*KAI's metal-map class has been removed &amp; replaced
*resource linking has been improved (expansion routes)
*the power-manager class has been improved
*early starting unit are monitored more closely to ensure that a starting base is build when possible
v0.551-v0.553 (spring v0.75b2-v0.76b1)
*Fixes
v0.55 (spring v0.75b2)
*Assault units now use basic attack groups
*Remembering enemy positions outside of LOS/Radar
*Restrict hovercraft on certain maps &amp; mods
*Player given orders are now followed until completion
*Unit support added: nano turrets
*Basic building placement added: defenses
*Minor Changes/Fixes
v0.50 (spring v0.74b3)
*Basic hub support &amp; improved build list detection
*Units will now use capture/resurrect/high trajectory and are more willing to reclaim
*Builders will now upgrade extractors/geos
*Expands a little more intelligently
*A bit quicker expansion, slowly seizing available (metal/geo spots)
*Minor Changes/Fixes
v0.40 (spring v0.74b2-v0.74b3)
*Minor Changes/Fixes
v0.355 (spring v0.74b1)
*Fixes
v0.350 (spring v0.73b1)
*Improvements to Building Decisions.
*Support for Water Units/Maps.
*Minor Changes/Fixes
v0.300 (spring v0.73b1)
*First Release

''' [[AI:Skirmish:List|&lt;- Back to AI page]]'''

[[Category: AI]]</text>
      <sha1>tp4g2kvan75p31f09a87w2pjirqlghd</sha1>
    </revision>
  </page>
  <page>
    <title>AI:Shard</title>
    <ns>0</ns>
    <id>3356</id>
    <revision>
      <id>25476</id>
      <parentid>25475</parentid>
      <timestamp>2012-11-26T14:11:16Z</timestamp>
      <contributor>
        <username>Af</username>
        <id>2575</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="478">{{AI|Shard AI|[[User:AF|AF]]|0.4+|All|Under Active Development|LGPL V2|C++|C++-Wrapper}}


Shard is a lua AI built on top of a wrapper of the C++ AI interface. Written by Tom J Nowell/AF, it's distributed with the Spring Engine.


=Source Code=
https://github.com/Tarendai/Shard

=Bugs=
https://github.com/Tarendai/Shard/issues

=Examples=
http://springrts.com/phpbb/viewtopic.php?f=55&amp;p=530088



See also
http://springrts.com/phpbb/viewtopic.php?f=15&amp;t=22582

[[Category: AI]]</text>
      <sha1>k4dnypkx03pitnwpug1zti49trjwnol</sha1>
    </revision>
  </page>
  <page>
    <title>AI:Skirmish</title>
    <ns>0</ns>
    <id>2655</id>
    <revision>
      <id>21078</id>
      <parentid>19294</parentid>
      <timestamp>2011-01-18T20:39:14Z</timestamp>
      <contributor>
        <username>Knorke</username>
        <id>833</id>
      </contributor>
      <minor/>
      <comment>added &quot;ais that come with game are usually best&quot;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3915">== What are AIs/Bots? ==
Skirmish AIs (old term: Global AIs), also called Bots or simply AIs, are what the computer opponents in games are called.
Developing a good Skirmish AI is a major undertaking and requires quite a bit of know how.
As the SY's had more important things to do than developing an AI,
they have left this job up to the community.
Spring Skirmish AIs are a non integral part of the engine (plugins),
and can be added and removed from your spring installation just as mods or maps.

The community and AI research students have released quite a few [[AI:Skirmish:List|Skirmish AIs]] already.

== How to install ==
; '''0.79 +''': The Skirmish AI you have downloaded will likely be an archive (eg &lt;i&gt;.zip&lt;/i&gt;), containing one folder with the AIs short name and a subfolder therein representing its version number, eg: &lt;i&gt;MyAI/1.23&lt;/i&gt;. This has to be extracted into one of your spring data directories under &lt;i&gt;AI/Skirmish/&lt;/i&gt;. On windows, you will simply extract into &lt;i&gt;$mySpringInstallDir/AI/Skirmish/&lt;/i&gt;. The AI should then show up in your lobby, when you start it the next time, or make it reload the list of AIs. You may find further installation instructions in the readme that comes with the AI.

; '''0.78 -''': The Global AI you have downloaded will likely contain one file &lt;i&gt;xxx.dll/so&lt;/i&gt; and possibly other files/folders. The shared library and other files need to be placed in &lt;i&gt;/AI/Bot-libs/&lt;/i&gt;, within the main Spring folder. The AIs should then show up in TASClient/SpringLobby (possibly after restarting the program or refreshing the AI list). You may find further installation instructions in the readme that comes with the AI.

The Spring installer for windows and the Linux packages come with some AIs packaged already.
If you want more AIs, you may search the Spring forum or the [[AI:Skirmish:List|list of Spring Skirmish AIs]].

If the AI you installed does not show up, or is marked by your lobby as too old,
you may have to get a new version of it.

== How to use ==
* on your lobby, create a multiplayer game;
* click on &quot;Add Bot&quot;;
* [[#Which AI to choose|select]] an appropriate AI;
* carry out any additional configuration you wish;
* start the game.

== Which AI to choose ==
If the game comes with an included AI, this AI is usually the best choice.
At least the games Spring S44, Kernel Panic and zero-K have a &quot;specialised&quot; AI that know how to play the game they were made for.

Because the Spring engine is under constant development,
old mods die, common ones change and new ones get created,
plus the fact that AI development is a difficult task in general,
make AI development for Spring a tough job.
In an ideal world, we would only need one Skirmish AI,
that plays all mods of Spring perfectly.
In practice, this is not going to happen.
All current Skirmish AIs for Spring have their strengths and defects.
Some are very competitive in Balanced Annihilation,
but fail to build even a single building in most other mods.
Some need config file management by the user,
but therefore are able to play most mods out there.

Since Spring version 0.79, Skirmish AIs come with meta info
that is shown to you by the lobby when you click on &quot;Add Bot&quot;.
This meta information, among other things, contains a description of the AI
which should give you an idea about whether this AI suits your needs or not.
For further info, you may check out the URL associated with the AI.

In practice, you will probably end up testing some of the AIs with your favourite mod.
Have a look at the [[AI:Skirmish:List|list]] of Spring skirmish AIs.

If you want to know more about how AIs work under Spring,
have a look at the [[AI:Development:System|AI Interface system]] explanation.

== AI comparing tables ==

Click [[AI:Compare|here]].

== How To Write ==
Check out the [[AI:Development|Skirmish AI development]] page.


'''[[Main_Page|&lt;- Back to Main page]]'''

[[Category: AI]]</text>
      <sha1>exwzrimp1cf168adyiz9cpuxu68c5ju</sha1>
    </revision>
  </page>
  <page>
    <title>AI:Skirmish:List</title>
    <ns>0</ns>
    <id>2638</id>
    <revision>
      <id>29198</id>
      <parentid>27671</parentid>
      <timestamp>2015-03-14T13:21:27Z</timestamp>
      <contributor>
        <username>Cranphin</username>
        <id>2842</id>
      </contributor>
      <comment>/* Under Active Development */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4945">[[Main_Page|Main Page]] &lt; AIs


Basics about [[AI:Skirmish|Skirmish AIs]] in Spring.

==== Under Active Development ====
Listed in alphabetical order.

; '''[[AI:AAI|AAI]]'''     : &lt;font color=&quot;orange&quot;&gt;config-based&lt;/font&gt;, &lt;font color=&quot;#000000&quot;&gt;C++&lt;/font&gt;, uses learning techniques, by [[User:Submarine|Submarine]]

; '''[[AI:BAI|BAI]]'''     : &lt;font color=&quot;#00AAFF&quot;&gt;config-less&lt;/font&gt;, &lt;font color=&quot;#00DDFF&quot;&gt;Java&lt;/font&gt;, BA only, by Petah

; '''[[AI:BKPAI|BKPAI]]''' : &lt;font color=&quot;#00AAFF&quot;&gt;config-less&lt;/font&gt;, &lt;font color=&quot;#000000&quot;&gt;C++&lt;/font&gt;, Kernel Panic only, by Baczek

; '''[[Spring_Tanks]]' Borked Advancer''' : &lt;font color=&quot;#00AAFF&quot;&gt;config-less&lt;/font&gt;, &lt;font color=&quot;#000000&quot;&gt;Lua&lt;/font&gt;, Spring Tanks only, by knorke
(Spring Tanks included AI is hardly an &quot;intelligence&quot; but might be usefull if you want to look at an example of a very bare-bones Lua AI. The file is Gadgets\tpAIbork.lua)

; '''[[AI:C.R.A.I.G.|C.R.A.I.G.]]'''     : &lt;font color=&quot;orange&quot;&gt;config-based&lt;/font&gt;, &lt;font color=&quot;yellow&quot;&gt;Lua&lt;/font&gt;, currently [http://spring1944.net/ Spring 1944] and [http://www.imperialwinter.com/ SWIW] only, by Tobi

; '''[https://github.com/cranphin/crans-java-ai CransJavaAI]''' : &lt;font color=&quot;#00AAFF&quot;&gt;config-less&lt;/font&gt;, &lt;font color=&quot;#00DDFF&quot;&gt;Java&lt;/font&gt;, port of KAIK, by cranphin

; '''[http://code.google.com/p/spring-djai/ DJAI]''' : &lt;font color=&quot;orange&quot;&gt;config-based&lt;/font&gt;, &lt;font color=&quot;#00DDFF&quot;&gt;Java&lt;/font&gt;, by DJ

; '''[http://springrts.com/phpbb/viewtopic.php?f=15&amp;t=19450 E323AI]'''  : &lt;font color=&quot;orange&quot;&gt;config-based&lt;/font&gt;, &lt;font color=&quot;#000000&quot;&gt;C++&lt;/font&gt;, plays XTA, BA &amp;amp; BOTA by [http://springrts.com/phpbb/memberlist.php?mode=viewprofile&amp;u=4131 Error323] &amp;amp; [http://springrts.com/phpbb/memberlist.php?mode=viewprofile&amp;u=6441 Simon Logic]

; '''[[AI:HughAI|HughAI]]''' : &lt;font color=&quot;orange&quot;&gt;config-based&lt;/font&gt;, &lt;font color=&quot;#00DDFF&quot;&gt;Java&lt;/font&gt;, port of CSAI, by Hugh Perkins

; '''[[AI:KAIK|KAIK]]'''   : &lt;font color=&quot;#00AAFF&quot;&gt;config-less&lt;/font&gt;, &lt;font color=&quot;#000000&quot;&gt;C++&lt;/font&gt;, best suited for *A mods, based on [[AI:KAI|KAI]] by Krogothe, now developed by [http://springrts.com/phpbb/memberlist.php?mode=viewprofile&amp;u=3405 Kloot]

; '''[http://springrts.com/phpbb/viewtopic.php?f=55&amp;t=28259 NOE]'''   : &lt;font color=&quot;orange&quot;&gt;config-based&lt;/font&gt;, &lt;font color=&quot;yellow&quot;&gt;Lua&lt;/font&gt;, AI for NOTA, gadget AI ready to use, developed by [http://springrts.com/phpbb/memberlist.php?mode=viewprofile&amp;u=9850 PepeAmpere]. Widget version planned. Small [http://code.google.com/p/nota/wiki/NOE_introduction manual on project Wiki].

; '''[[AI:NTAI|NTai]]'''   : &lt;font color=&quot;orange&quot;&gt;config-based&lt;/font&gt;, &lt;font color=&quot;#000000&quot;&gt;C++&lt;/font&gt;, the longest running AI, currently non-functional, by [[User:AF|AF]]

; '''[[AI:RAI|RAI]]'''     : &lt;font color=&quot;#00AAFF&quot;&gt;config-less&lt;/font&gt;, &lt;font color=&quot;#000000&quot;&gt;C++&lt;/font&gt;,  supports many mods due to its universality, by [http://springrts.com/phpbb/memberlist.php?mode=viewprofile&amp;u=2771 Reth]

; '''[[AI:Shard|Shard]]'''   : &lt;font color=&quot;orange&quot;&gt;config-based&lt;/font&gt;, &lt;font color=&quot;#000000&quot;&gt;C++&lt;/font&gt; &amp; &lt;font color=&quot;yellow&quot;&gt;Lua&lt;/font&gt;, highly configurable/adjustable, by [[User:AF|AF]]

==== Special ====

; '''[[AI:NullAI|NullAI]]'''                    : C Test AI, does nothing&lt;br&gt;&lt;br&gt;
; '''[[AI:NullJavaAI|NullJavaAI]]'''            : basic Java Test AI, does nothing&lt;br&gt;&lt;br&gt;
; '''[[AI:NullLegacyCppAI|NullLegacyCppAI]]'''  : Legacy C++ Test AI, does nothing&lt;br&gt;&lt;br&gt;
; '''[[AI:NullOOJavaAI|NullOOJavaAI]]'''        : Java Test AI using the OO wrapper, does nothing&lt;br&gt;&lt;br&gt;

==== No Longer Under Development ====
None of these AIs will work with the current spring release version.
They are listed here, in case someone wants to take up development again,
and for code reference.

; '''[[AI:AGAI|AGAI]]'''     : &lt;font color=&quot;#00AAFF&quot;&gt;config-less&lt;/font&gt;, &lt;font color=&quot;#00DDFF&quot;&gt;Java&lt;/font&gt;, by [[User:abma|abma]]&lt;br&gt;&lt;br&gt;
; '''[[AI:CSAI|CSAI]]'''   : C# AI, by Hugh Perkins&lt;br&gt;&lt;br&gt;
; '''[[AI:JAI|JAI]]'''     : first try at writing an AI in Java, by [[User:hoijui|hoijui]]&lt;br&gt;&lt;br&gt;
; '''[[AI:JCAI|JCAI]]'''   : by Zaphod&lt;br&gt;&lt;br&gt;
; '''[[AI:KAI|KAI]]'''     : by Krogothe&lt;br&gt;&lt;br&gt;
; '''[[AI:MyAI|MyAI]]'''   : An earlier AI, by Berion&lt;br&gt;&lt;br&gt;
; '''[[AI:OTAI|OTAI]]'''   : V1.13, An AI aimed at emulating the AI in OTA, by Veylon&lt;br&gt;&lt;br&gt;
; '''[[AI:QAI|QAI]]'''     : V2.42, A half finished AI, by Qman&lt;br&gt;&lt;br&gt;
; '''[[AI:SAI|SAI]]'''     : V0.15, by Spectre&lt;br&gt;&lt;br&gt;
; '''[[AI:TSI|TSI]]'''     : A Polish project, originally based on [[AI:SAI|SAI]]&lt;br&gt;&lt;br&gt;
; '''[[AI:TAI|TAI]]'''     : replaced by [[AI:NTAI|NTai]], by [[User:AF|AF]]&lt;br&gt;&lt;br&gt;
; '''[[AI:ZcAIn|ZcAIn]]''' : by Cain&lt;br&gt;&lt;br&gt;

==== Planned For Development ====
; '''[[AI:Epic|Epic]]'''   : Next Gen AI, planned by [[User:AF|AF]]&lt;br&gt;&lt;br&gt;
; '''[[AI:GAI|GAI]]'''     : Groovy AI, planned by [[User:hoijui|hoijui]]&lt;br&gt;&lt;br&gt;
; '''[http://github.com/ato/clojai/tree/master ClojAI]'''  : Clojure AI, planned by ato
[[Category: AI]]&lt;br&gt;&lt;br&gt;</text>
      <sha1>k4tnn98hbjxjbl9n7sqebxq54x3znn2</sha1>
    </revision>
  </page>
  <page>
    <title>AI:SkirmishAI List</title>
    <ns>0</ns>
    <id>2654</id>
    <redirect title="AI:Skirmish:List" />
    <revision>
      <id>16476</id>
      <timestamp>2009-06-02T21:23:45Z</timestamp>
      <contributor>
        <username>Hoijui</username>
        <id>2288</id>
      </contributor>
      <comment>[[AI:SkirmishAI List]] moved to [[AI:Skirmish:List]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30">#REDIRECT [[AI:Skirmish:List]]</text>
      <sha1>d68202uhh4wfwfeegp2bungbhf0025f</sha1>
    </revision>
  </page>
  <page>
    <title>AI:TSI</title>
    <ns>0</ns>
    <id>1754</id>
    <revision>
      <id>13398</id>
      <parentid>11568</parentid>
      <timestamp>2007-11-12T07:57:03Z</timestamp>
      <contributor>
        <username>Heavylancer</username>
        <id>2341</id>
      </contributor>
      <comment>Killed off the spam in this page.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="790">{{AI|TSI|Tow.IMPono, Tow.Dragon|V0.12|Supports AA2.11|Under Active Development|GPL}}

'''TSI''' is beeing developed by [[User:Tow.IMPono|Tow.IMPono]] and Tow.Dragon. It is stable and supports the most popular [[Mods|mod]] - [[Absolute_Annihilation|Absolute Annihilation]].
Support for other mods is in development. It will be probably ready in TSI 0.2.

The first versions (0.01 - 0.05) of TSI were based on SAI, but since v0.1 it has its own engine, written from scratch.


=== Info ===
*Playability : Plays quite well, especially on big maps with many metal spots.
*Limitations : No water support, limited support for nukes.

=== Related forum threads ===
* [http://taspring.clan-sy.com/phpbb/viewtopic.php?t=6787 &quot;TSI 0.11 released!!&quot;]


''' [[AIs|&lt;- Back to AI page]]'''
[[Category:AI]]</text>
      <sha1>gcgef0x0eno1gpdr532df0ajm02yy22</sha1>
    </revision>
  </page>
  <page>
    <title>AI:ZcAIn</title>
    <ns>0</ns>
    <id>1094</id>
    <revision>
      <id>18766</id>
      <parentid>10924</parentid>
      <timestamp>2010-03-13T13:18:52Z</timestamp>
      <contributor>
        <username>Koshi</username>
        <id>2371</id>
      </contributor>
      <comment>made historical</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="491">{{Historical}}
{{AI|ZcAIn|Coded by Cain|V0.003|XTA|No longer being Developed|Open Source}}

ZcAIn is an [[AI]] currently being developed by [[User:Cain|Cain]]. It is probably the least developed of the lot, but is coming along nicley. It is a new addition to the AI scene.

=== Links ===
* [http://taspring.clan-sy.com/phpbb/viewtopic.php?t=2587 ZcAIn Forum Thread]
* [http://www.fileuniverse.com/?p=showitem&amp;ID=1658 Download the ZcAIn AI]

''' [[AIs|&lt;- Back to AI page]]'''

[[Category:AI]]</text>
      <sha1>pd5jd3tx7voeudj84t41mx0fcc50i2e</sha1>
    </revision>
  </page>
  <page>
    <title>AIInterface:C</title>
    <ns>0</ns>
    <id>2574</id>
    <revision>
      <id>26664</id>
      <parentid>16544</parentid>
      <timestamp>2013-03-20T17:54:37Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>1cat</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1830">{{AIInterface|C|hoijui|0.1|C &amp; C++|~stable|GNU GPL v2+}}

=== Description ===
This AI interface is written in C++ and allows spring to load AIs written in C and C++. Thes AIs may be compiled with any compiler, as long as they export some C functions in the correct way (see ''{spring_source}/AI/Skirmish/NullAI/AIExport.h'' for reference).

If you plan to write your own AI interface library, it is recommended to use this one as a template, or at least for reference (''{spring_source}/AI/Interfaces/C/''), and possibly the Java one.

=== Used By ===
==== AI Interface Wrappers ====
* '''[[AIWrapper:LegacyCpp|Legacy C++ Wrapper &lt;font color=&quot;red&quot;&gt;DEPRECATED&lt;/font&gt;]]'''
* '''[[AIWrapper:Cpp|(New) C++ Wrapper &lt;font color=&quot;00AAFF&quot;&gt;alpha&lt;/font&gt;]]'''

==== Skirmish AIs ====
* None (directly)

==== Download ====
It comes with a spring default install.

==== Source ====
The source can be found under:
''{spring_source}/AI/Wrappers/LegacyCpp/''

==== Bugs ====
'''Known Crashes:'''
* None

Please report bugs under
[http://springrts.com/mantis/ Mantis]
to the AI subproject.

==== How to compile ====
'''The easy way'''&lt;br&gt;
Use Scons or CMake (refer to [[Building_spring|Building spring]]).

'''The hard way'''
* include directories:
** {spring_source}/rts/System
** {spring_source}/AI/Wrappers/CUtils
** {spring_source}/AI/Interfaces/C
* source files:
** {spring_source}/AI/Interfaces/C/*.c*
* create dynamic loadable shared library (module)
* should compile with all C++ compilers (tested with: MinGW, GCC, Intel)
tested under Linux32 and Win32

==== How to install ====
from: ''{spring_source}/AI/Interfaces/C/''&lt;br&gt;
to: ''{spring_data_dir}/AI/Interfaces/C/{C-AIInterface-version}/''
* copy ''lib*.so'', ''lib*.dylib'' or ''*.dll'' to ''./''
* copy ''data/*'' to ''./''

''' [[AIs|&lt;- Back to AI page]]'''

[[Category: AIWrapper]]</text>
      <sha1>33jp4nootqtfny1fi5zurd3u3pcebc1</sha1>
    </revision>
  </page>
  <page>
    <title>AIInterface:Java</title>
    <ns>0</ns>
    <id>2576</id>
    <revision>
      <id>26663</id>
      <parentid>18478</parentid>
      <timestamp>2013-03-20T17:53:58Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>1cat</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4744">{{AIInterface|Java|hoijui|0.1|[http://en.wikipedia.org/wiki/Java_Virtual_Machine JVM languages]|~stable|GNU GPL v2+}}

== Java AI Interface Wrapper ==

==== Forum threads ====
*[http://spring.clan-sy.com/phpbb/viewtopic.php?f=15&amp;t=12308 Java AI Interface for Spring]
*[http://spring.clan-sy.com/phpbb/viewtopic.php?f=15&amp;t=15019 AI Interface redesign (in C)]

==== Description ====
This AI Interface is written in C, Java and AWK, and heavily relies on JNI and JNA. It allows spring to load AIs written in Java, or any of the other [http://en.wikipedia.org/wiki/Java_Virtual_Machine languages supported by the JVM] like [http://en.wikipedia.org/wiki/Java_%28programming_language%29 Java], [http://en.wikipedia.org/wiki/Groovy_%28programming_language%29 Groovy], [http://en.wikipedia.org/wiki/JRuby JRuby], [http://en.wikipedia.org/wiki/Jython Jython], [http://en.wikipedia.org/wiki/Scala_%28programming_language%29 Scala] or [http://en.wikipedia.org/wiki/Clojure Clojure]. These AIs consist of a ''.jar'' file, which contains at least one class that implements the interface (see ''{spring_source}/AI/Interfaces/Java/java/src/com/springrts/ai/AI.java'').

For reference only: '''[[AI:JAI|JAI]]''' &lt;font color=&quot;red&quot;&gt;DEPRECATED&lt;/font&gt;

==== AIs using it ====
(as of January 2009)

Skirmish AIs:
* '''[[AI:NullJavaAI|NullJavaAI]]'''
* '''[[AI:NullOOJavaAI|NullOOJavaAI]]'''

==== Supported Platforms ====
As this interface uses JNA, it is limited to the platforms where it is available:
(as of Jan 2009)
* Windows	(x86/amd64)
* Linux		(i386/amd64)
* OS X		(ppc/i386/amd64)
* FreeBSD	(i386/amd64)
* OpenBSD	(i386)
* Solaris	(x86/amd64/sparc/sparcv9)
As this includes all platforms and architectures that spring currently runs on,
this should not cause any problems at all.

==== Download ====
It comes with a spring default install.

==== Source ====
The source can be found under ''{spring_source}/AI/Interface/Java/''.
Not all the Java source files are available under this directory,
as a big part of them are generated during the build process, and are therefore only available when you generate them yourself, or in the AIInterface-src.jar in
your spring installation.

==== Bugs ====
'''Known Crashes:'''
* When natively debugging (eg with GDB), you may get random ''SIGSEGV''s/''segmentation fault''s when using Java AIs. This is due to the JVM using ''SIGSEGV'' as a signal for garbage collection. There are two workarounds:
** '''recommended''': issue a ''continue'' in your native debugger; if spring continues normally, it was a JVM garbage collection ''SIGSEGV''
** use the JVM without JIT (Just In Time compilation), as the JVM does not use ''SIGSEGVs'' in this mode. This will make cause additional run-time CPU usage.

Please report bugs under
[http://springrts.com/mantis/ Mantis]
to the AI sub-project.

==== How to compile ====
Make sure your Env-Vars are set like this (replace absolute paths according to your system):

''Windows:''&lt;br&gt;
&lt;code&gt;
SET JAVA_HOME=C:/Program Files/Java/jdk1.6.0
&lt;/code&gt;

''Linux:'' (you may want to place this in your ''~/.profile'' file)&lt;br&gt;
&lt;code&gt;
export JAVA_HOME=/usr/jdk1.6.0
&lt;/code&gt;

'''The easy way'''&lt;br&gt;
Use Scons or CMake (refer to [[Building_spring|Building spring]]).

'''The hard way'''

''C part:''
* include directories:
** {spring_source}/rts/ExternalAI/Interface
** {spring_source}/AI/Wrappers/CUtils
** {spring_source}/AI/Interfaces/Java
* source files:
** {spring_source}/AI/Interfaces/Java/*.c*
* create a dynamic loadable shared library (module)
* should compile with all C++ compilers (tested with: MinGW, GCC, Intel)
tested under Linux32 and Win32

''Java part:''
* Reffer to the shell scripts for your platform: ''{spring_source}/AI/Interfaces/Java/bin/*.sh|.bat''* Refffer to the shell scripts for your 
* Or use the ant build script at: ''{spring_source}/AI/Interfaces/Java/bin/build.xml''

==== How to install/use ====
Additional software you need to have installed to be able to use Java AIs:
* [http://www.java.com/de/download/ Java Runtime Environment v1.5.0+ (tested with 1.6.0)]

Make sure your Env-Vars are set like this (replace absolute paths according to your system):

''Windows:''&lt;br&gt;
&lt;code&gt;
SET JAVA_HOME=C:/Program Files/Java/jre1.6.0
&lt;/code&gt;

''Linux:'' (you may want to place this in your ''~/.profile'' file)&lt;br&gt;
&lt;code&gt;
export JAVA_HOME=/usr/jre1.6.0
&lt;/code&gt;

'''Install the easy way'''&lt;br&gt;
Use Scons or CMake (refer to [[Building_spring|Building spring]]).

''' ... the manual way'''&lt;br&gt;
from: ''{spring_source}/AI/Interfaces/Java/''&lt;br&gt;
to: ''{spring_data_dir}/AI/Interfaces/Java/{Java-AIInterface-version}/''
* copy ''lib*.so'', ''lib*.dylib'' or ''*.dll'' to ''./''
* copy ''data/*'' to ''./''

''' [[AIs|&lt;- Back to AI page]]'''

[[Category: AIInterface]]</text>
      <sha1>1nsdgnsfid6k3p8mnnlni9tx879mp5s</sha1>
    </revision>
  </page>
  <page>
    <title>AIInterface:Mono</title>
    <ns>0</ns>
    <id>2586</id>
    <revision>
      <id>16106</id>
      <parentid>15731</parentid>
      <timestamp>2009-02-15T14:32:18Z</timestamp>
      <contributor>
        <username>Agon</username>
        <id>2275</id>
      </contributor>
      <comment>updated page to fit current status of the MonoAIInterface</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="921">{{AIInterface|Mono|Agon|v0.5 (local copy)|CLI languages|beta|LGPL v2.1+ and MIT}}

=== Forum threads ===
*[http://spring.clan-sy.com/phpbb/viewtopic.php?f=15&amp;t=16872 Mono AI Interface for Spring]

=== Description ===
This AI interface is written in C and allows spring to load AIs written in a CLI compatible language. 

The source of this AI interface library can be found here: ''{spring_source}/AI/Interfaces/Mono/''

=== Currently supported AIs ===
* MonoNullAI
* CSharpSampleAI

=== Download ===
!NO PUBLIC CODE AVAILABLE YET!

=== Known Crashes ===
* Description in AIInfo.lua does not fit to the AI.

=== How to compile and install the interface ===
* Configure with: &quot;cmake -i&quot; or &quot;cmake-gui&quot;
* make (optional with -j&lt;number for jobs&gt;)
* make install (optional with -j&lt;number for jobs&gt;)

=== Required software ===
* Mono 2.0&lt;
* GLib2 (required for Mono)

''' [[AIs|&lt;- Back to AI page]]'''
[[Category:AIInterface]]</text>
      <sha1>sqr64ey1xof7bu2vlbd3yb4n8b1ip1m</sha1>
    </revision>
  </page>
  <page>
    <title>AIInterface:Python</title>
    <ns>0</ns>
    <id>2859</id>
    <revision>
      <id>26363</id>
      <parentid>20309</parentid>
      <timestamp>2013-03-08T17:43:00Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>Category:AIInterface</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1383">Important note: in current spring/master it is currently disabled because of an recently big merge (pureint), it will be fixed soon!

== Spring PyAI ==
The Spring PyAI Interface can be used to write a skirmish AI in Python.
Look at the [[AI:Development:Lang:Python|Development Page of Python]] if you want write an AI.

=== Code ===
http://github.com/spring/Python

=== Building ===

The Python Interface is in spring/master, just git clone it, run &quot;git submodule init&quot; and you can compile/install it!

==Known Issuses/TODO==
*rewrite for pureint
*make thread-safe http://docs.python.org/release/1.5.2/api/threads.html
*ai's cant force a specific python version, add an setting into aiinfo.lua
*only one specific python version can be used, loading different ais using different python versions is currently impossible
*the init event can be replaced by a function / add release function
*there are no docs, look into interface.py if you search a function
*logging could be improved

As a note: most of the Interface is generated by a python script.

=== Status ===
Most functions and Datatypes should work. All classes and functions are generated and because of this, there is no further documentation available.

At github you find the main repository for the Interface:
http://github.com/spring/Python

Check the NullPythonAI for something to start with.

[[Category:AIInterface]]</text>
      <sha1>4mbll8va8q6iqvwyipifw0ml1lw1csc</sha1>
    </revision>
  </page>
  <page>
    <title>AIResearch</title>
    <ns>0</ns>
    <id>1797</id>
    <redirect title="AI Research" />
    <revision>
      <id>11611</id>
      <timestamp>2006-09-18T18:43:37Z</timestamp>
      <contributor>
        <username>FoeOfTheBee</username>
        <id>20</id>
      </contributor>
      <comment>AIResearch moved to AI Research</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="26">#REDIRECT [[AI Research]]
</text>
      <sha1>n1lrkti1hpjr0ita7xhs9mjwjtlzi0u</sha1>
    </revision>
  </page>
  <page>
    <title>AIWrapper:Cpp</title>
    <ns>0</ns>
    <id>2664</id>
    <revision>
      <id>28181</id>
      <parentid>26665</parentid>
      <timestamp>2014-01-31T12:56:05Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>/* Download */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1378">{{AIWrapper|Cpp|hoijui|0.1|C++|alpha|GNU GPL v2+|[[AIInterface:C|C]]}}

== (New) C++ AI Interface Wrapper ==

==== Forum threads ====
*[http://springrts.com/phpbb/viewtopic.php?f=15&amp;t=15019 AI Interface redesign (in C)]

==== Description ====
This AI interface wrapper is written in C++. It allows C++ Skimrish AI devs to write AIs in a more future proof way than the [[AIWrapper:LegacyCpp|legacy wrapper]], which is meant to be replaced by this wrapper over time.
Use this, and not the legacy wrapper for new C++ AIs.

The source is not yet in springs ''master'' branch, but in the ''cppintnew'' one under:
''{spring_source}/AI/Wrappers/Cpp/''

=== Used By ===
==== Skirmish AIs ====
* '''[[AI:CppTestAI|CppTestAI]]'''
* '''[http://springrts.com/phpbb/viewtopic.php?f=15&amp;t=22582 Shard]'''

==== Download ====
Included in the spring engine source code.

==== Source ====
The source can be found in the ''cppintnew'' branch under:
''{spring_source}/AI/Wrappers/Cpp/''

==== Bugs ====
'''Known Crashes:'''
* None

'''Missing Features:'''
* compleet ID -&gt; OO object wrapping (eg no more unitIDs, but only Unit OO objects)

Please report bugs under
[http://springrts.com/mantis/ Mantis]
to the AI subproject.

==== How to compile ====
It is compiled directly into AIs using it. Refer to springs Scons or CMake build files.

''' [[AIs|&lt;- Back to AI page]]'''

[[Category: AIWrapper]]</text>
      <sha1>3af2z6f1x3sip5ma3lt107icuppjvhe</sha1>
    </revision>
  </page>
  <page>
    <title>AIWrapper:LegacyCpp</title>
    <ns>0</ns>
    <id>2604</id>
    <revision>
      <id>26666</id>
      <parentid>19257</parentid>
      <timestamp>2013-03-20T17:55:20Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>1cat (2cat)</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1525">{{deprecated}}
{{AIWrapper|LegacyCpp|hoijui &amp; zenzike|0.1|C++|~stable|GNU GPL v2+|[[AIInterface:C|C]]}}

== Legacy/Old C++ AI Interface Wrapper ==

==== Forum threads ====
*[http://spring.clan-sy.com/phpbb/viewtopic.php?f=15&amp;t=15019 AI Interface redesign (in C)]

==== Description ====
This AI interface wrapper is written in C++. It allows spring to load AIs written for the old C++ AI interface of spring, and should not be used for new projects.

=== Used By ===
==== Skirmish AIs ====
* '''[[AI:AAI|AAI]]'''
* '''[http://springrts.com/phpbb/viewtopic.php?f=15&amp;t=19450 E323AI]'''
* '''[[AI:KAIK|KAIK]]'''
* '''[[AI:NTAI|NTai]]'''
* '''[[AI:NullLegacyCppAI|NullLegacyCppAI]]'''
* '''[[AI:RAI|RAI]]'''

=== Download ===
==== Binary ====
It comes with a spring default install.

==== Source ====
The source can be found under:
''{spring_source}/AI/Wrappers/LegacyCpp/''

=== Bugs ===
Known crashes:
* None

Please report bugs under [http://springrts.com/mantis/ Mantis] to the AI subproject.

=== How to compile ===
It is compiled directly into AIs using it. Refer to springs Scons or CMake build files.

=== How to study body of API function ===
Open ''AI\Wrappers\LegacyCpp\AIAICallback.cpp'', search for desired function, detect appropriate Clb_* function. Then open ''rts\ExternalAI\SSkirmishAICallbackImpl.cpp'' and find goal function body. Also you may try to read additional info in ''rts\ExternalAI\Interface\SSkirmishAICallback.h'' file for Clb_* function.

''' [[AIs|&lt;- Back to AI page]]'''

[[Category: AIWrapper]]</text>
      <sha1>qk598fmnnygcz8c9kiwe8rs04stg6mj</sha1>
    </revision>
  </page>
  <page>
    <title>AIWrapper:ModularAI</title>
    <ns>0</ns>
    <id>2669</id>
    <revision>
      <id>26667</id>
      <parentid>18472</parentid>
      <timestamp>2013-03-20T18:05:38Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>1cat</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10575">{{AIWrapper|ModularAI|LoidThanead|?|Java|beta|GNU GPL v2+|[[AIInterface:Java|Java]]}}

== ModularAI ==

The ModularAI wrapper is a wrapper for the [http://springrts.com/wiki/AIInterface:Java Java AI Interface]. It divides AI functionality up in modules. Each module is self-contained, easily customizable and can be swapped for any the module serving the same function without breaking the AI.

The design goal of the ModularAI wrapper is to provide the AI developer with easily customizable default behavior as well as the ability to add his or her own, without hiding any of the full power of the Java interface underneath.

PM LoidThanead for a copy of the latest version.


=== Overview ===

A ModularAI consists of a collection of modules. Each module is responsible for one aspect of the AI's behavior. The behavior of a module could be to manage the AI's construction queue. Another module might be used to plan and/or execute attacks.

The AI communicates with the modules through Messages. When an event happens in the game, all modules are notified. Modules can also communicate with one another through messages.

To simplify unit handling, the ModularAI wrapper introduces the &lt;code&gt;SimpleUnit&lt;/code&gt;. This is a wrapper around the Unit object that provides a convenient interface for giving orders to units. It also makes the unit's properties (i.e. current/max speed, current/max health, available weapons etc) easily accessible.


=== Use ===

To use the ModularAI wrapper, we should first have a regular Java AI set up, as described in [[AI:Development:Lang:Java]]. Next, we add the ModularAI.jar file to your project. (Make sure it is located in the ''jlib'' subdirectory of your AI's folder.) Then, instead of having &lt;code&gt;MyJavaAI&lt;/code&gt; extend &lt;code&gt;AbstractOOAI&lt;/code&gt;, we extend &lt;code&gt;DefaultModularAI&lt;/code&gt;.

&lt;code&gt;DefaultModularAI&lt;/code&gt; has a constructor, which our AI class will need to call. The &lt;code&gt;MyModularAI&lt;/code&gt; class will look something like this:

&lt;code&gt;
public class MyModularAI extends DefaultModularAI
{
   public MyModularAI(OOAICallback callback)
   {
      super(callback, 6);
   }
}
&lt;/code&gt;

As you can see, the &lt;code&gt;super&lt;/code&gt; constructor has two arguments. The first is the callback, which allows the AI and its modules to communicate with the game engine.
The second parameter, &lt;code&gt;updateInterval&lt;/code&gt;, tells the &lt;code&gt;DefaultModularAI&lt;/code&gt; how often the default modules should update. The choice for an interval of 6 is only an example. At 1x speed, this interval means that every component updates once per second.

A module is updated at frame 1, and every x frames after that, where x is the update interval. So a module with an update interval of 100 is updated at frames 1, 100, 200, etc.
The smallest possible update interval is 1, which means that the module updates every frame. This is 6 times per second at 1x speed! Obviously, you will want to keep update intervals reasonable for modules that perform heavy calculations at updates.
If you do not want a module to update besides the first frame, set the updateInterval to 0. For suggestions about appropriate update intervals, you should consult the documentation for the module in question.
Most of the modules provided in &lt;code&gt;DefaultModularAI&lt;/code&gt; do not require updating at all, and none require heavy computation.

At this point, we technically have a working ModularAI. You may want to export your code and see if there are no errors when you run it. As you may see, your AI does not do anything yet. In order to have our AI do anything intelligent, we will have to use modules.


=== Getting your AI to Do Something ===

As is customary, the details of creating an &lt;code&gt;ModularAI&lt;/code&gt; that actually does something will be explained through an example that shows how to build a solar plant in the BA mod.

The &lt;code&gt;DefaultModularAI&lt;/code&gt; that our AI extends has all the required modules to do the building for us. The only thing we still need to tell it is what to build and when. Therefore, we will create a module, &lt;code&gt;ControlModule&lt;/code&gt;, that makes the necessary decisions.


==== Creating a new Module====

We require a custom module that tells our AI what to build. Technically, we could do this in the &lt;code&gt;MyModularAI&lt;/code&gt; class, but this defeats the purpose of making the AI modular. Therefor, we create a new module, &lt;code&gt;ControlModule&lt;/code&gt;, that tells the built-in &lt;code&gt;BuildManager&lt;/code&gt; module that it has to build a solar plant.

First we create the &lt;code&gt;ControlModule&lt;/code&gt; class. Creating a new module is as easy as creating a class that extends AbstractAIModule. You will need to create a constructor with parameters &lt;code&gt;OOAICallback callback&lt;/code&gt; and &lt;code&gt;int updateInterval&lt;/code&gt;.

The callback enables your module to retrieve information from the engine as well as give commands. Note that giving commands to the engine should not be necessary, as for most actions that require you to talk to the engine directly there are more convenient methods available that do the work for you.
For example, units can be ordered around using the appropriate method. Moving a unit is achieved by using the method &lt;code&gt;moveTo()&lt;/code&gt;, which takes the position to move to as its parameter, and will issue to appropriate move order for you.

The &lt;code&gt;ControlModule&lt;/code&gt; class should look like this:

&lt;code&gt;
public class ControlModule extends AbstractAIModule
{
   public ControlModule(OOAICallback callback, int updateInterval)
   {
      super(callback, updateInterval);
   }
}
&lt;/code&gt;

We simple delegate the work to the constructor of &lt;code&gt;AbstractAIModule&lt;/code&gt;. It is often a good idea to let the AI that uses a module specify the updateInterval, rather than hard-coding it inside the module. This is because an AI with many light-weight modules may be able to update modules that perform heavy calculations more often, while other AI's may wish to do it the other way around.


Let's have our AI build a solar plant at the first frame of the game, frame 1. The easiest way to do that is to overwrite the &lt;code&gt;update()&lt;/code&gt; method.
To let our AI build a unit, we need a &lt;code&gt;BuildUnitCommand&lt;/code&gt;. In its simplest form, the &lt;code&gt;BuildUnitCommand&lt;/code&gt; constructor takes two arguments: a priority and an instance of &lt;code&gt;BuildProperties&lt;/code&gt;.

The priority of a &lt;code&gt;BuildUnitCommand&lt;/code&gt; works much the same as the priority of a module: the lower the priority number and the earlier the position in the build order queue. The difference is that a build order with a higher priority is not necessarily fulfilled first. The &lt;code&gt;BuildManager&lt;/code&gt; keeps track of which available units can be used to fulfill which requests. When a requests prerequisites are met, it assigns the required units to the module that issued the request. When two requests can be fulfilled using the same units, the request priority comes into play: the request with higher priority is processed, while the other one will have to wait for another usable unit to become available.

The second parameter, &lt;code&gt;buildProperties&lt;/code&gt;, describes the details of the build command. The minimum information needed for a build command is the type of unit you would like to build. For all other properties (i.e. build position, number of units to build) defaults are used when they are not specified.

To actually issue the BuildUnitCommand after we've created the object, we can use the &lt;code&gt;sendMessage()&lt;/code&gt; method implemented in &lt;code&gt;AbstractAIModule&lt;code&gt;. This method takes any message as its parameter, then passes it to all AI modules. (This includes the module that sent the message.)

So, to have our AI a build a solar plant, we will overwrite the update method and give a &lt;code&gt;BuildUnitCommand&lt;/code&gt; with unit type 'armsolar.' Now our module looks like this:

&lt;code&gt;
public class ControlModule extends AbstractAIModule
{
   public ControlModule(OOAICallback callback, int updateInterval)
   {
      super(callback, updateInterval);
   }

   @Override
   public int update(int frame)
   {
      int exitcode = 0;

      if (frame == 1 &amp;&amp; exitcode == 0)
      {
         BuildProperties properties = new BuildProperties(&quot;armsolar&quot;);
         Message buildCommand = new BuildUnitCommand(0, properties);
         exitcode = this.sendMessage(buildCommand);
      }

      return exitcode;
   }
}
&lt;/code&gt;

In the above code, we first construct a &lt;code&gt;BuildProperties&lt;/code&gt; object with as only property the unit type 'armsolar,' meaning we will use default values for all other properties.
Then we create the &lt;code&gt;BuildUnitCommand&lt;/code&gt; with priority 0 and the described properties. Zero is normally the highest priority (or lowest priority number) used, although technically negative values can be used as well.
Finally the build command is sent and passed to all modules of our AI.

Just having the &lt;code&gt;ControlModule&lt;/code&gt; class is not enough to make our AI do something. We still need to add it to the AI instance. This will be described in the next section.


==== Adding a module ====

To use a module, we need to it to our AI. Modules are best added in the constructor of your AI class.

The method &lt;code&gt;addModule()&lt;/code&gt; is used to add a new module. This method comes in two variants. The first only takes the module that we wish to add as its argument. The second also lets us specify a priority.
This priority determines in what order modules are notified of events, as well as the sequence in which they are initialized and updated. This can be important if, for example, the initialization of a component requires another component to be already initialized.
Note that a lower priority number means a higher priority. A module with priority 1 will be initialized, updated and notified of events before any module with priority 2. The priority number works as an index in a list. The order in which two modules with the same priority number are handled is undefined, and may vary from moment to moment.
If no priority is specified for a module, it is given a default priority of 10.

In order to let our AI build a solar plant, we will need to add our &lt;code&gt;ControlModule&lt;/code&gt;. To add the module, &lt;code&gt;MyModularAI&lt;/code&gt; should look something like this:

&lt;code&gt;
public class MyModularAI extends DefaultModularAI
{
   public MyModularAI(OOAICallback callback)
   {
      super(callback, 6);
      this.addModule(new ControlModule(callback, 6));
   }
}
&lt;/code&gt;

And with this, our AI should start the game by building a solar plant.

''' [[AIs|&lt;- Back to AI page]]'''

[[Category: AIWrapper]]</text>
      <sha1>pebusu1td82ajasev6zf2qffwsob2ef</sha1>
    </revision>
  </page>
  <page>
    <title>AIWrapper:PyAI</title>
    <ns>0</ns>
    <id>2853</id>
    <redirect title="AIInterface:Python" />
    <revision>
      <id>19327</id>
      <parentid>19326</parentid>
      <timestamp>2010-05-25T08:25:50Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>Redirecting to [[AIInterface:Python]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="32">#REDIRECT [[AIInterface:Python]]</text>
      <sha1>t0ufl8srzpzvfgq4q1l1t6crh5qn5jx</sha1>
    </revision>
  </page>
  <page>
    <title>AI Development</title>
    <ns>0</ns>
    <id>2636</id>
    <redirect title="AI:Skirmish:List" />
    <revision>
      <id>16557</id>
      <parentid>16280</parentid>
      <timestamp>2009-06-08T09:23:23Z</timestamp>
      <contributor>
        <username>Hoijui</username>
        <id>2288</id>
      </contributor>
      <comment>Redirecting to [[AI:Skirmish:List]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30">#REDIRECT [[AI:Skirmish:List]]</text>
      <sha1>d68202uhh4wfwfeegp2bungbhf0025f</sha1>
    </revision>
  </page>
  <page>
    <title>AI Research</title>
    <ns>0</ns>
    <id>1466</id>
    <revision>
      <id>26838</id>
      <parentid>17646</parentid>
      <timestamp>2013-03-23T16:41:40Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>AI -&gt; AI Dev</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3456">Here is a list of articles and case studies, most compiled by ex neuron machina..

* [http://www.cse.lehigh.edu/~munoz/CSE497/ Seminar course on &quot;Topics on AI and Computer Game Programming&quot;]: The lecture slides give a great overview of advances in game AI, with plenty on RTS games

* [http://www.qrg.northwestern.edu/papers/Files/How_QSR_can_improve_strategy_game_AIs_A3ISS_2001.PDF Forbus et al 2001], &quot;How qualitative spatial reasoning can improve strategy game AIs&quot;

*[http://scholar.google.com/url?sa=U&amp;q=http://www.cs.iastate.edu/~dfetter/report.pdf D. Fetter (project report)], &quot;Real-Time Strategy Game Decision Making with Support Vector Machines&quot;: A project which tried using SVMs to learn unit production decisions in Warcraft III, based on replays of top players.

*[http://www.daimi.au.dk/~djn/thesis.pdf R. Laursen &amp; D. Nielsen 2005], &quot;Investigating small scale combat situations in real time strategy computer games&quot;: 164-page Master's thesis on using game trees to determine near-optimal unit behaviors in combat scenarios (unit placement and target selection), which was implemented in the [http://stratagus.sourceforge.net/ Stratagus] warcraft clone. This also gives an overview of the AI techniques used by many popular games.

*[http://www.csse.monash.edu.au/hons/projects/2004/Nicolas.Imrei/ N. Imrei], &quot;Reinforcement Learning in Real-Time Strategy Games&quot; ([http://www.csse.monash.edu.au/hons/projects/2004/Nicolas.Imrei/Downloads/FinalPresentation.ppt&gt;final presentation link], thesis available by email): Honours project used reinforcement learning to develop both overall strategies and agent behaviors in RTS games

*[http://ticc.uvt.nl/~pspronck/pubs/reqrmgai.pdf S. de Jong, P. Spronck &amp; N. Roos 2005], &quot;Requirements for resource management game AI&quot;: This is about how to do resource management in games like Sim City, but it should also be applicable to TA-style games. There's also a [http://www.cs.unimaas.nl/steven.dejong/publications/DeJong2004HybridAIForRMGs.pdf 77-page Master's thesis]

* [http://www.cs.ualberta.ca/~mburo/ Michael Buro's lab]: Much of his lab's research is focused on &quot;real-time planning and learning AI with applications to RTS games.&quot; They've actually created an open-source RTS called ORTS, in order to experiment with various AI techniques. With any luck, they might even be persuaded to switch their focus to TA Spring, or perhaps try implementing some of their algorithms. Also, it might be worthwhile to use elements of ORTS in TA Spring.

**[http://www.cs.ualberta.ca/~mburo/ps/mcplan.pdf M. Chung, M. Buro, and J. Schaeffer 2005], &quot;Monte Carlo Planning in RTS Games&quot;
**[http://www.cs.ualberta.ca/~mburo/ps/RTS-AAAI04.pdf M. Buro 2004], &quot;Call for AI Research in RTS Games&quot;: Gives a nice overview of the current state of AIs in RTS games
**[http://www.cs.ualberta.ca/~mburo/ps/BRIMS-04.pdf M. Buro and T. Furtak], &quot;RTS Games and Real-Time AI Research&quot;

* [http://www.cs.ualberta.ca/~bulitko/F04/projects/LM/LM-final.pdf L. MacDonald 2005], a final-project report on Moving Target Search (MTS). Basically, MTS seems to be an extension of something called Learning Real-Time A* (LRTA*).

* [http://www.cs.berkeley.edu/~russell/classes/cs294/f05/papers/mehta+al-2005.pdf N. Mehta et al 2005], &quot;Transfer in Variable-Reward Hierarchical Reinforcement Learning&quot;: Develops reinforcement-learning techniques and tests them in a simple RTS

''' [[AI|&lt;- Back to AI Development page]]'''

[[category:AI Dev]]</text>
      <sha1>i0x0m7f9zsthd5jxmx5lnpx6jffqvme</sha1>
    </revision>
  </page>
  <page>
    <title>AIs</title>
    <ns>0</ns>
    <id>2658</id>
    <redirect title="AI:Skirmish:List" />
    <revision>
      <id>16558</id>
      <parentid>16501</parentid>
      <timestamp>2009-06-08T09:24:01Z</timestamp>
      <contributor>
        <username>Hoijui</username>
        <id>2288</id>
      </contributor>
      <comment>Redirecting to [[AI:Skirmish:List]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30">#REDIRECT [[AI:Skirmish:List]]</text>
      <sha1>d68202uhh4wfwfeegp2bungbhf0025f</sha1>
    </revision>
  </page>
  <page>
    <title>A Complete Map Making Tutorial</title>
    <ns>0</ns>
    <id>3659</id>
    <redirect title="Tutorial:CompleteMapMaking(Wannes)" />
    <revision>
      <id>28904</id>
      <timestamp>2014-10-18T21:48:46Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>Flozi moved page [[A Complete Map Making Tutorial]] to [[Tutorial:CompleteMapMaking(Wannes)]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="48">#REDIRECT [[Tutorial:CompleteMapMaking(Wannes)]]</text>
      <sha1>m6agkdlua4e6oczswpukaqnc5nx630q</sha1>
    </revision>
  </page>
  <page>
    <title>A Good Offense is the Best Defense</title>
    <ns>0</ns>
    <id>1861</id>
    <revision>
      <id>19010</id>
      <parentid>13826</parentid>
      <timestamp>2010-03-13T18:03:39Z</timestamp>
      <contributor>
        <username>Koshi</username>
        <id>2371</id>
      </contributor>
      <comment>fix category</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1067">'''Getting Rolling'''

When playing this tactic, you never stay in one spot, continously pumping out units and moving from place to place. Scouts are vital for deep striking missions. Level 1 tech is all you need to win. Players following this tactic are rewarded with an almost impeccable ability to continuosly bring the fight to the enemy, and never getting attacked themselves. 

'''Hard, but worth it'''

This tactic is the opposite of porcing, which means it is going to be very hard. No defenses means mobile units, mobile units have more use than defenses, but are weaker. The enemy is never sure of any position you could be at. Here one minute, gone the next. Rushing enemies with 1 or 2 units in the begginning is catastrophic. It can completely wreck the economy, and it could make your enemy try to attack you, but your supposed to have left that base to fend for itself, and moved already.

As many players like to say '''&quot;defense is for bitches&quot;'''

-Snipawolf

PS: This Tactic is not suggested for those of us that are slower...
[[Category: Strategy]]</text>
      <sha1>dh17abgxa1adrmij1raajn5cgcm0wmu</sha1>
    </revision>
  </page>
  <page>
    <title>About</title>
    <ns>0</ns>
    <id>2546</id>
    <revision>
      <id>30649</id>
      <parentid>30534</parentid>
      <timestamp>2018-03-21T03:00:03Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>http -&gt; https</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3091">Spring is a versatile 3D RTS game engine. Using extensively Lua for scripting game-specific code to make nearly every aspect of the engine customizable, from GUI, to unit AI, to pathfinding.

= System requirements =
=== Minimum ===
* 1.6 GHz single core CPU with SSE
* 1 GB of RAM
* 128 MB graphics card (As of 104.0 OpenGL 3.0 is required meaning older integrated GPUs such as Intel G45 are '''not''' supported)
* Roughly 500 MB of hard drive space, depending on how many maps and games you download.

=== Recommended ===
* 3 GHz dual core CPU or better
* 2 GB of RAM or more
* 512 MB graphics card or better
* 5 GB of hard drive space to accommodate more maps and games

For more information on system requirements see [[Requirements]] or for help see [[FAQ]].

= Features =
* Many different [[Games]], made just for Spring.
* Play online, on a LAN or offline Single Player.
* Large battles limited only by the power of your computer; support for up to 5000 units.
* Large, highly detailed maps in which to wage those battles, fully 3D with deformable terrain, forest fires, dynamic and reflective water, and custom skyboxes.
* Several camera modes, allowing for anything to be viewed from almost any angle.
* Fully 3D combat in land, sea, and air, with realistic weapon trajectories (physics engine).
* Complex 3rd party AIs, some of which are quite good.
* An extremely powerful UI, designed to minimize unnecessary micromanagement.
* Utf8 font rendering
* Frequent additions and bugfixes.
&lt;center&gt;
{|style=&quot;margin-top:15px; background:rgb(255,255,255); border: 1px solid rgba(0,0,0,0.5); border-radius: 12px 12px 12px 12px; box-shadow: 0 2px 6px rgba(0,0,0,0.3), inset 0 1px 2px rgba(255,255,255,0.5), inset 0 10px 8px rgba(255,255,255,0.3);&quot; |
|
[[Image:Logo_GPL_gplv3-127x51.png|127px|GPL Logo|link=https://www.gnu.org/licenses/gpl-2.0.html]]
[[Image:Logo_OpenSource_Osi_standard_logo.png|85px|OpenSource Logo|link=https://opensource.org/]]
[[Image:Logo_Ogl.jpg|170px|OpenGL Logo|link=https://www.opengl.org/]]
[[Image:Logo_OpenAL_Openal_c.png|140px|OpenAL Logo|link=https://www.openal.org/]]
[[Image:Logo_SDL_Sdl_powered.png|110px|SDL Logo|link=https://www.libsdl.org/]]
|}
&lt;/center&gt;

= Development =
* Open source (GPLv2). 
* Multi-plattform (Windows &amp; Linux, MacOSX in progress). 
* Written in C++, using OpenGL, Lua, Assimp, streflop, OpenAL, FreeType2, DevIL, SDL2, GLEW, boost, 7zip, zlib, libVorbis, libOgg, LuaSocket, squish, rgEtc1.

= Content Creation =
Thanks to the ability of the Spring engine to run lots of different content, it is possible to
* [[Game_and_Unit_development|Build your own games.]]
* [[Map_development|Create your own maps.]]
* [[AI:Development|Program AI players]] in several languages.

=Authors=
A list of the Spring developers can be found on the [[Authors]] page.

=Organization=
Information about the Spring organizational structure is available at: [[Spring:Organization]]

=History=
Read the [[history]] page if you want know more about its long way.

=Press=
[[Press|History of Spring and its games in the press]]

[[Category:Spring]]
__NOTOC__</text>
      <sha1>jpo8hzgxkujmikiesjej3gjehllwp4v</sha1>
    </revision>
  </page>
  <page>
    <title>About s3o</title>
    <ns>0</ns>
    <id>3186</id>
    <revision>
      <id>26776</id>
      <parentid>26539</parentid>
      <timestamp>2013-03-21T08:59:47Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>recat</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="752">-= Needs more info =-

Format used by the Spring Engine

==Tool used==
*[[Upspring]]

==Tutorials==
* [[Basic s3o unit making guide]] (using UpSpring)
* [[s3o using blender]] (not using UpSpring)
* [[Trouble-shooting s3o units]]

==S3o Texture Render Settings ==
===Full===
* Texture 1
** RGB channels - are color information
** Alpha channel - used for the Team color. 
* Texture 2
** Red Channel - Glow Map
** Green Channel - Reflective and Specular map
** Blue Channel - Unused
** Alpha Channel - 1 bit Transparency
===Basic===
* Texture 1
** RGB channels - are color information
** Alpha channel - used for the Team color. 
* Texture 1
** Ignored
===Texture 1 color===
* -=Needs info=-
===Texture 2 color===
* -=Needs info=-

[[Category:3D Models]]</text>
      <sha1>hkytzglvt57n7yr3ma0j9qb5hvifngf</sha1>
    </revision>
  </page>
  <page>
    <title>Absolute Annihilation</title>
    <ns>0</ns>
    <id>975</id>
    <revision>
      <id>18887</id>
      <parentid>16910</parentid>
      <timestamp>2010-03-13T16:43:03Z</timestamp>
      <contributor>
        <username>Koshi</username>
        <id>2371</id>
      </contributor>
      <comment>made historical</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4868">{{historical}}

===No longer in development===

''Absolute Annihilation's development has officially ceased as of January 30, 2007.''

Caydr has made a claim that he is infact developing this and he will start again soon.

===Overview===
[[Image:SpringAA.jpg|thumb|200px|right|A few of the larger units in AA]]
With 366 balanced units, Absolute Annihilation, or AA, was the single most-downloaded Total Annihilation units pack.  AA has been ported to Spring soon after Spring's development began in earnest and takes advantage of many of the engine's new features.  It is based on [[UberHack]] and so attempts to improve TA balance without radically changing gameplay. However, whereas UberHack added only a few extra units, AA incorporates many new units including some of the most impressive new units concocted by the ever-creative TA community.

AA was under constant development until autumn of 2006, spurred on by its highly active community following, and [http://taspring.clan-sy.com/phpbb/profile.php?mode=viewprofile&amp;u=107 Caydr], who headed up development.  Some units were subject to frequent and sometimes brutal tweaking and pruning, leading many players to feel that the changes were random - in fact, they were simply based on feedback sent through mediums besides the forum.  AA contained new factories, units, resource buildings, sneaky defensive structures and an array of massive &quot;experimental&quot; units for brutalizing the enemy's base.

Players new to the mod should be warned that some old units [[Image:pano2.jpg|thumb|200px|right|Ridiculously huge image depicting every unit in AA]]now fill new roles, while some are more (or less) effective than they were in classic TA as of the 3.1c patch.

AA:Spring is based mostly on version 6.0 of the OTA AA mod.

===Strategy===
Absolute Annihilation is a modification of TA. Therefore, the same basic strategies and tactics that good TA players utilize are also utilized by good AA players.  Although AA is a very complex modification, some important points to remember are: 

# Expand whenever possible, because &quot;porcing&quot; (building nothing but defense) isn't a very good strategy in AA.  Moho metal extractors give greater income than in most other mods, rewarding players who can control the largest area of the map.
# The best defence is a good offense.  Make sure you are able to quickly respond to the unexpected by keeping a standing army even when you make an all-out attack.
# Beware of AA's &quot;superweapons&quot;.  Each side has a unique aircraft, ship, and experimental kbot.  Annihilators and Doomsday Machines are great for defending against Krogoths and Orcones.  Mercuries and Screamers are the best for defending against Liche atomic bombers, while Krow gunships are most vulnerable to advanced fighters.  Finally, heavy subs or an extremely powerful navy are the best way to defend against Epochs and Black Hydras.

The actual units present in AA aren't so important; it takes little time to learn what they all do. The key to victory lies in utilizing them effectively. Always keep the above points in mind when playing, and above all, practice.  Even if you lose, ask the person to whom you lost what you did wrong and right.  Study replays involving experienced players to see what tricks they use.

For further information go to the [[Strategy:Absolute Annihilation|AA Strategy Guide]].

=== Downfall ===

At the height of AA's popularity, Caydr finished his education and became a machinist.  His job and other aspects of real life occupied so much of his time that he became completely out of touch with the AA community for several months, not even realizing that a silly little typo bug, easily fixed, had basically destroyed gameplay for months on end.  This prompted others to try to fill his shoes, some successfully, some unsuccessfully.  A new mod, &quot;Balanced Annihilation&quot;, at first incorporating only minor changes with great gameplay fixes, slowly began to eat away at AA's previously untouchable popularity.

When Caydr finally got some time off during the end of December 2006, he finally discovered what a shambles he'd left AA in due to failing to quickly fix several major problems in the last released version, 2.22.  He realized that this state of affairs was obviously an indicator that he would not longer be able to responsibly remain the main developer of AA, and decided to let AA finally slip away.  Giving his blessing to those who continued the work in his stead, he posted one last message on his website, http://www.caydr.com, and hasn't been heard from since.



=== Links ===
*[http://ta-aa.sourceforge.net AA Homepage] 
*[[Absolute Annihilation/Units|Unit Guide]]
[[Image:groupshot4.jpg|thumb|700px|center|Hey look!  Another freakishly huge picture!]]
*[[Strategy:Absolute_Annihilation|Additional Notes On Strategy In Absolute Annihilation]]

[[Category:Mods]]</text>
      <sha1>lhssytlb1mpyevflsagvuqyh9mv6jdf</sha1>
    </revision>
  </page>
  <page>
    <title>Absolute Annihilation/Units</title>
    <ns>0</ns>
    <id>1336</id>
    <revision>
      <id>26875</id>
      <parentid>22607</parentid>
      <timestamp>2013-03-23T23:10:13Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>remove Category:Units</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="85541">{{deprecated}}

This is the Practical AA Guide.  It has information such as ways to best use units, and things to avoid.  To answer more technical questions, such as exactly how much damage per second a weapon is capable of, or precise build costs of a particular unit, you may want to visit the [http://ta-aa.sourceforge.net/modweb Technical AA Guide].

Basic descriptions, hints, tactics, and tips for Absolute Annihilation units. Level 1 units are those that can be built by basic factories, Commanders, and level 1 construction units. Level 2 units are those that can be built by advanced factories and level 2 construction units. Level 3 units are those that are built by Experimental Gantries.


==Commander==
[[Image:armcom.jpg]][[Image:corcom.jpg]]

You only get one Commander when you start the game, so he's worth special mention. Builds a small selection of things, but has a powerful nanolathe, allowing him to build quickly and assist other construction units. Packs a fairly nasty laser and the D-Gun, a weapon that drains tremendous amounts of energy but does absurd damage. Has a radar and sonar, and can cloak to hide from enemy units. (Though if he's not in a jamming field, they'll see him on radar anyway) Causes an absolutely massive explosion when killed. Moves slowly, but can travel underwater and climb very steep hills. He can also capture enemy units, but this is tricky to pull off, as an alert enemy will usually self-destruct them before he can finish.

There are two main victory conditions in Spring - Commander Dies, Game Continues  (Continues) and Commander Dies, Game Ends (Ends). In Continues games, keeping your Commander alive is nice but not vital. This often leads to the Commander being used very offensively in the late-game, and can also lead to assorted lame early-game Commander tactics. In Ends games, keeping the Commander alive in the late-game against the many things that can kill him in a handful of shots becomes very important. He often spends most of his time assisting construction in the back of your base, under heavy jamming and AA cover.

Your Commander provides an excellent defence against early-game assaults and rushes. Do ''not'', however, use your D-Gun unless your Commander's death is imminent or you are faced with a large, tightly-packed swarm of units. It eats up 400 energy a shot, which is a hefty chunk in the first few minutes of the game, and destroys any reclaimable wreckage. His laser should be more than enough against small groups of raiders. Whatever you do, '''do not''' D-Gun your own structures or units unless it's that or lose the game.

The Commander has a small but constant auto-repair, which makes him better able to handle fire from raiders and sporadic artillery hits. Note that the Commander takes extra damage from stationary defences and that these defences will usually prioritize him due to his high cost.

==Factories==

Factories are what let you construct mobile units. We don't describe individual factories in detail, as most are fairly boring. Level 1 factories build Level 1 units and Level 1 construction units. Level 1 construction units build Level 1 structures and the Level 2 factory for their type. So a Level 1 Construction KBot can build a Level 2 KBot Lab, but can't build a Level 2 Vehicle Plant. Level 2 factories build Level 2 units and Level 2 (&quot;Advanced&quot;) Construction Units. Level 2 Construction units build Level 2 structures and, in the case of Advanced Construction KBots, the Level 3 factory.

All factories can only be built on land, except for Shipyards, Amphibious Facilities, and Seaplane Pads, which must be built in water. Hovercraft factories can be built on water or land. Amphibious Facilities are odd in that they can construct amphibious units of a wide variety of types. All other factories can only construct units of the appropriate type.

==Resource Structures==

Resource structures produce resources - metal and energy - for you to use to build other things.  Quite often, but not always, the winner of a game is whoever builds and successfully protects the most resource-generating structures.

===Common Level 1 Resource Structures===

====Metal Extractor====
[[Image:armmex.jpg]][[Image:cormex.jpg]]

The basic metal-producing structure. These are fairly cheap, but require a little energy to operate, so your metal production will falter if you overtax your energy! They work a little differently from metal extractors in the original Total Annihilation. Each has a range, represented by the red circle around the extractor when you go to place it, over which they extract metal. The extractor's income is determined by the amount of metal within its range. On maps without well-defined metal patches, space out your extractors and avoid overlapping their ranges!

There is also an underwater version of this structure.

[[Image:armuwmex.jpg]][[Image:coruwmex.jpg]]

====Wind Generator====
[[Image:armwin.jpg]][[Image:corwin.jpg]]

A cheap, fast-building energy-producing structure. Wind generators can be built anywhere on the map, but their output varies randomly based on wind strength. They also need to be spaced out, as they explode fairly violently and don't have much health. Always be sure to check the wind strength before going into a game, so you know whether or not to build wind generators!

====Solar Collector====
[[Image:armsolar.jpg]][[Image:corsolar.jpg]]

More expensive than a [[#Wind Generator|wind generator]], solars are also a lot tougher. They give you +20 energy. They close up into a more armored form when attacked. This protects your investment and lets them take a fair amount of punishment from raiders, but they don't produce any energy when closed.

====Tidal Generator====
[[Image:armtide.jpg]][[Image:cortide.jpg]]

Tidal generators provide cheap, constant power on water maps. The exact amount of energy a tidal generator provides varies from map to map, though they usually provide about as much as a Solar Generator. Always check the Tidal Generator income before starting a game on a water map.

====Metal Maker====
[[Image:armmakr.jpg]][[Image:cormakr.jpg]]

Metal Makers convert energy to metal, allowing you to continue expanding your economy even once all available metal has been claimed. Each Metal Maker consumes 100e and produces 1m.

There are also floating versions of this structure, these are somewhat more efficient, consuming 90e and producing 1m.

[[Image:armfmkr.jpg]][[Image:corfmkr.jpg]]

====Advanced Solar Collector====
[[Image:armadvsol.jpg]][[Image:coradvsol.jpg]]

The Advanced Solar Generator produces about four times as much energy (75 per tick) as a regular [[#Solar Collector|Solar Collector]], but costs correspondingly more metal and significantly more energy. Their advantage over regular Solar Collectors is that they have a smaller footprint (4x4 instead of 5x5). They cannot close into a more armored form, but they do have more health.

====Geothermal Powerplant====
[[Image:armgeo.jpg]][[Image:corgeo.jpg]]

These expensive energy-producing structures can only be built on geothermal vents, but are a very efficient way to expand your energy production once you've got a basic economy going. Be careful about when you choose to build them, though, as the geothermal vents on most maps are placed in vulnerable locations.

Geothermal powerplants, much like the level 2 Moho Geothermal Powerplants, have a nasty explosion. Be careful what you build around them since they will be a prime target of opportunity.

Absolute Annihilation gives Arm increased output from geothermal powerplants.

====Energy/Metal Storage====
[[Image:armestor.jpg]][[Image:corestor.jpg]]/[[Image:armmstor.jpg]][[Image:cormstor.jpg]]

As the name indicates, these structures provide you with additional energy and metal storage. Since all resource structures in AA come with some energy/metal storage (as appropriate), these are not very useful. The energy storage can be handy for stockpiling energy for a push to level 2, but you're probably better off building Metal Makers to convert it to metal. The metal storage is virtually useless, as you should usually be using up your metal as fast as you can without stalling. ''However'' if you're reclaiming a lot of things, especially any [[#Commander|Commander]] wreckage laying about, you'll need these in order to make sure you receive all your metal.

===Arm Level 1 Resource Structures===

====Twilight====
[[Image:armamex.jpg]]

A basic metal extractor that can cloak for a mere ten energy. This provides some protection against raiders, but is not infallible. The enemy can still spot them if they get too close, and there are only so many places a metal extractor can be put. When they explode, they paralyze everything in a quite big radius, and can thus be used as mines or traps if necessary. Watch out for this when killing them if the enemy has some units nearby, as paralyzed units are easy prey.

===Core Level 1 Resource Structures===

====Exploiter====
[[Image:corexp.jpg]]

A basic metal extractor with more armor and an LLT on top. Excellent for claiming territory once your basic economy's on solid ground or if your enemy likes raiding.

Has extra armor against attacks by Peewees/AKs and Flashes/Instigators.

===Common Level 2 Resource Structures===

====Moho Mine====
[[Image:armmoho.jpg]][[Image:cormoho.jpg]]

A bigger, better metal extractor. Takes more energy to operate, but extracts more metal from the same ground. These are typically the first things you'll want to build when upgrading to a level 2 economy, as you should easily be able to afford them with a mature level 1 economy. Unlike Moho Mines in [[XTA]], they only cost 25 energy to operate. Start with your biggest and best-protected metal patches, and work out from there.

There are also underwater versions of this structure.

[[Image:armuwmme.jpg]][[Image:coruwmme.jpg]]

====Fusion/Cloakable Fusion====
[[Image:armfus.jpg]][[Image:corfus.jpg]]/[[Image:armckfus.jpg]][[Image:corckfus.jpg]]

These structures provide a high, constant energy income. Like Solar and Wind generators, they can be built anywhere on the map. The Cloakable variant is identical, except that it can cloak (the ability to make it harder for the enemy to find). Tt is slightly more expensive and produces slightly more energy. If you have no easily-defendable geothermal vents available, one of these (with accompanying flak cannons) should be next in your level 2 upgrade plan after you have a few Moho Mines online. A common newbie mistake is building a Fusion plant too early or building too many of them. Don't do this.

Fusions have an impressive explosion, so be sure to space them out.

There are also underwater versions of the regular Fusion plant.

[[Image:armuwfus.jpg]][[Image:coruwfus.jpg]]

Absolute Annihilation gives Core slightly better energy output on their fusion plants.

====Moho Metal Maker====
[[Image:armmmkr.jpg]][[Image:cormmkr.jpg]]

A bigger and better metal maker. Takes much more energy to operate, but produces much more metal, and does so more efficently. On metal-poor maps (or once you've upgraded all your Metal Extractors to Moho Mines), you'll want to produce these to expand your economy, powered by Fusion plants.

There is also an underwater version of this structure, which is the most efficent energy to metal convertor of all.

[[Image:armuwmmm.jpg]][[Image:coruwmmm.jpg]]

====Metal Generator====
[[Image:armmg.jpg]][[Image:cormg.jpg]]

A structure that provides a steady input of 1m at no cost other than initial construction. Fairly expensive and explodes quite violently, so space them out and protect them well.

====Moho Geothermal Powerplant====
[[Image:amgeo.jpg]][[Image:cmgeo.jpg]]

A bigger, better geothermal plant. More efficient than a Fusion with comparable energy output, but produces a ''really'' big blast when destroyed. Build these only in safe areas or with ample defences against air and ground units, as they make very tempting targets.

Absolute Annihilation gives Arm a hefty boost to their output from Moho Geothermal Powerplants.

====Advanced Fusion Reactor====
[[Image:aafus.jpg]][[Image:cafus.jpg]]

A bigger, better fusion reactor. All Advanced Fusions come with a cloaking device.  Usually only worthwhile if you're pressed for space or need energy really badly in the very late-game. Defend it very well, as it makes an extremely tempting target, and produces a very big explosion when destroyed. Can only be built by Advanced Construction Vehicles.

Absolute Annihilation gives Core a hefty boost to their Advanced Fusion Reactor's energy output.  However, this is somewhat offset by the greater cost a Core player must pay if he or she wants to cloak their reactor.

===Arm Level 2 Resource Structures===

====Prude====
[[Image:armgmm.jpg]]

A bigger, better geothermal plant. Doesn't produce quite as much energy as the Moho Geothermal Powerplant, but is cheaper and explodes significantly less violently. A good choice if you have potentially-threatened geothermal vents, or geothermal vents near other vital infrastructure.  Also, keep in mind that it has more health than any other powerplant short of the mohofusion, so it can provide a nearly invincible component to your economy.

===Core Level 2 Resource Structures===

====Moho Exploiter====
[[Image:cormexp.jpg]]

A more heavily-armored Moho Mine with a built-in heavy laser and rocket battery. Looks just like a regular Moho Mine until the enemy comes calling, then deploys its weapons and armor and goes to town. These are a little expensive for general use, but great on or near the front lines.

====Behemoth====
[[Image:corbhmth.jpg]]

A bigger, better geothermal plant with plasma cannons grafted on. Doesn't produce as much energy as the Prude and costs more, but can prove a nasty surprise for enemy assault forces and raiders, especially when near a couple Exploiters. Behemoths have the longest range of any turret except for LRPC/RFLRPCs.

==Defensive Structures==

Defensive structures are buildings that help protect your base. Most have guns, or are designed to help buildings with guns. Most don't do anything else, and are fairly well-armored. However, don't expect them to win you the game alone! At best, defensive structures will stop minor attacks and slow down major attacks until you can get your own combat units into position to respond.

===Radar/Sonar/Jammer===

Though unarmed, the humble Radar Tower is possibly the most important defensive structure, and one that less experienced players can easily underestimate.  It shows enemy units within range and unobstructed by terrain as radar dots.  This means that instead of noticing your opponent is trying to attack the back of your base when the back of your base starts blowing up, you notice when a bunch of dots head that way.  You can then move your mobile defensive units - and I hope you have some - to intercept the attack, and start beefing up your fortifications. Even more importantly, they let you watch the general pattern of enemy movement, giving you a rough idea of what your foe's up to and where he's massing units and defences, which can be invaluable when placing defences of your own or planning an attack.

Longer range units will fire at enemy units shown on radar before they can see them.  The accuracy of a unit is reduced when firing at a target that's only visible as a radar dot, so these shots will often miss. Units firing on radar dots can gain better accuracy if a player or one of his allies builds a radar targeting facility. Radar towers can see further than other units, so building them right next to other defensive structures may improve these structures' line of sight, allowing them to fire more accurately at units a little further away.  Radar towers are cheap and fragile and often an early casualty of an enemy attack, so it doesn't hurt to build spares.

In the early game on spread out maps, consider building radar towers to 'protect' your expansion.  Instead of trying to build defensive structures everywhere, build good radar tower coverage and position your mobile forces to easily intercept attacking forces.

Radar is not infallible. In addition to being blocked by terrain, it can be countered by radar jamming towers and units, which prevent radar detection of any units within their area of effect by either side. Yes, this means that you can't use radar to detect enemy units inside the area of effect of one of your jammers! There are also specialized late-game long-range weapons that quickly, cheaply, and efficiently destroy any radar or jammer towers within their area of effect. Finally, some units (such as the Arm Gremlin tank or Core Vamp fighter) are &quot;Stealthy&quot;, and cannot be detected by radar.

Sonar Stations function similarly to Radar Towers, but can only detect units that are in the water.

There are advanced versions of all of these structures available with a higher cost, more HP, and a longer effective range. There are also floating radar towers that can be built on water.

===Dragon's Eye===

The Dragon's Eye, like the Radar Tower, provides you with advance warning of threats to your base. Dragon's Eyes have a long visual range, can be built underwater, and are stealthy (cannot be detected by radar) and can cloak (hiding themselves from visual detection) for a modest -10e cost. Building Dragon's Eyes around the perimeter of your base near the edge of the sight range of your other defensive structures can help them engage incoming enemies more effectively and gives you information about ''what'' is attacking your base.

In the late game, as more and more of the map gets covered by radar jammers, Dragon's Eyes become one of the most effective ways to keep track of your enemy's activities. They're virtually undectable once built and can't be fooled by radar jamming or stealth, though they still can't see cloaked units.

===Dragon's Teeth/Fortification Walls===

These defensive structures aren't really structures. They do nothing but block the movement of enemy units, but are very cheap and fast to build. They can take a lot of damage, but can be reclaimed by construction units. Heavy units, like [[#Bulldog|Bulldogs]] or [[#Goliath|Goliaths]], can drive over Dragon's Teeth, destroying them in the process.

Commanders and construction planes have a speed advantage in building these, as construction bots and vehicles do a small animation whenver they start or finish constructing something.  This slows them down significantly on such cheap structures.

These can be used in lines to block an enemy advance.  This is useful to prevent fast raiding units from simply rushing past your defences to attack key buildings in the back of your base.  They can also be used in small lines or squares surrounding a defensive structure such as a [[#Sentinel/Gaat_Gun_Heavy_Laser_Tower|heavy laser tower]].  This can provide some protection from small units with direct fire weapons such as the [[#Flash/Instigator|Flash tank]].

Floating Dragon's Teeth can also be built on water.

One interesting use of Dragon's Teeth is terrain modification. DTs have a substantially higher &quot;slope tolerance&quot; (the maximum slope they can be built on) than most structures. They can be reclaimed to recover much of the metal that went into their construction. This makes them excellent for &quot;clearing terrain&quot; for building other structures. Just build a single DT or a small block of them, reclaim them, and build on the now-flattened land! This is great for putting up LLTs on hills, but can also be used to place Guardians/Punishers in unexpected locations. (Tip from Felix the Cat)

===Level 1 Defensive Structures===

====Light Laser Tower====

Very cheap defensive structure that you should build early and often.  Will stop those pesky players who like to send small squads a minute or two in the game from doing damage to your economy that you may never recover from.  This unit is good against light, fast ground forces, but is outranged by anything heavier.  It is weak against air, but does hit sometimes.  Often abbreviated as &quot;LLT&quot;. They're good for covering mostly-blocked approaches to your base (like hills), as they can kill most light raiding forces.

A good way to defend against early to mid-game attacks is to build 3 LLTs in a loose cluster at the top of any hills or in choke points.  Then build a couple of radar towers behind them to help spot enemies.

Throughout any game, even to the end, LLTs should be built in key areas of your base.  They will come in handy in case an enemy slips through your outer perimeter.

====Beamer/Heavy Light Laser Turret (HLLT)====

Designed as a more permanent defensive structure for highly valuable inner-base areas as well as mid-game frontline duty.  Beamers shoot a constant beam (get it? eh? eh?) which causes steady damage.  This makes it ideal for dealing with attacks from both heavier units like Hammers/Thuds or much lighter units like Fleas, where it can instantly move on to the next target when the first one is destroyed, rather than waiting for a lengthy cool-down period.  Probably the most useful function of a beamer is that it slightly outranges an LLT, making it ideal for front-line construction wars.  While a Core player must use an HLT to outrange his enemy's LLTs, the Arm player can drop in a Beamer much more quickly that will outrange and destroy the enemy LLTs.

The HLLT, on the other hand, is pretty much just a beefed up LLT.  It has two turrets, allowing it to target two enemies simultaneously or concentrate on a single one.  They have more than their fair share of hit points.

====Defender/Pulveriser Missile Tower====

Very cheap defensive structure. It can provide protection against early air rushes. Does not need to be built as early as LLTs, as building an air force is slower. Will take out level 1 fighters and level 1 gunships easily.  Effective against level 1 bombers, but several are needed if the opponent attacks in numbers. Not a cost-effective defence against level 2 air, and quite easy to destroy. ''Will not shoot at land units.'' Often abbreviated as MT.

There are also floating versions that can be built on water.

====Packo/SAM Anti-air Turret====

These are much more durable than standard missile towers and fire homing missiles quite rapidly.  They are good at taking out large number of lighter planes quickly, making them a very effective fighter swarm counter.  They will struggle to kill level 2 gunships and bombers unless used in large numbers, making flak cannons and level 2 missile towers a better choice against these units.  The Packo can retract into a shielded underground state, largely protecting it from ground attack.  The SAM just has more hitpoints.

====Chainsaw/Eradicator Anti-bomber Turret====

Moderately expensive heavy-duty version of the missile towers.  Fires a rapid stream of missiles. Quite tough to destroy and can take out large numbers of level 1 air units. Does ok against level 2 air units, but Flak cannons are a better option by this point as they're much more effective and not much more expensive. ''Will not shoot at land units.''

Besides Mercury/Screamer towers, these are the longest-range anti-air units you can build.

These buildings do extra damage against bombers.

====Sentinel/Gaat Gun Heavy Laser Tower====

Moderately expensive defensive structure.  Longer range and harder hitting than a LLT, can do serious damage to even level 2 attackers.  Effective against land but not air.  Can be outranged by longer-ranged level 2 ground units. Often abbreviated HLT. These are vital for protecting your expansions and base in the mid-game, as they can destroy massive swarms of L1 units. They require energy to fire, though, so be sure to have ample power available.

Keep in mind that the HLT has very poor rate-of-fire, so a swarm of fast, light units can easily rush through an HLT-defended line.  Because of this it is important to always mix your defenses and include smaller defensive structures.

There are also floating versions that can be built on water.

====Guardian/Punisher Plasma Cannon====

Expensive plasma cannons. Quite a long range and pack a fair bit of punch. Many games begin with an expansion phase with players marking out territory. Once the territories start to clash in the middle, you can almost guarantee that one or both players will start building plasma cannons.  These can then kill all the LLTs and HLTs in the opponent's front line. Once a cannon is completed it will start shelling any enemy forces that are within range. It can be set to &quot;High trajectory&quot;, which causes it to fire more damaging but highly inaccurate shells with a large area of effect in a high arc, or &quot;Low trajectory&quot;, which causes more direct, more accurate, but less powerful shells to be fired.  &quot;High trajectory&quot; should be preferred for bombardment, while &quot;Low trajectory&quot; should be used during defensive action unless targetting extremely-slow units.  &quot;High trajectory&quot; will lead the target, so attacks of fast units can trick the Guardian into leading so far that it will fire into your own base.

Note that this defense does '''double damage vs. naval units'''.  As such, it is a critical resource in mixed land-water maps.  &quot;Low trajectory&quot; should be preferred when attacking aquatic targets.

The normal reaction is then for the enemy to rush at the Guardian with all available nearby units. An inexperienced player may find he has not adequately protected his Guardian with LLTs, HLTs, or mobile forces, and will then lose a unit that cost a large amount of resources to build. More experienced players learn to build adequate protection or place their Guardian in an established position. This allows them to to devastate the enemy's fixed defences and kill many of the units sent to take out the Guardian, yielding a net metal gain.  In some circumstances it may be better to retreat from the enemy's Guardian position and quickly tech to level 2 or build a small force of Thunders/Shadows for a definitive assault rather than losing units in a futile counter attack.

Another option is to construct a radar jammer near your front lines, which prevents the Guardian from auto-targetting them until something actually sees the units. This allows you to construct a Guardian of your own and return fire.

====Anenome/Jellyfish====

The Anenome/Jellyfish are the only land-based anti-submarine weapon in AA. They launch depth charges that can damage submarines and submersed amphibious units. As land structures, most submarines cannot attack them. Their very short range means that they have to be built on the very edge of your coast, and are not a good general-purpose anti-submarine solution.

These do extra damage against amphibious units, and are therefore a good choice for defending a shoreline against a &quot;fully submerged&quot; opponent.

====Harpoon/Urchin====

These floating torpedo launchers provide close-range anti-submarine/anti-ship defence. They can only be built in water, and can only attack units in the water. They're effective against raiders and submarines, but don't expect them to do much against a serious surface vessel assault, as even the humble plasma cannon on the Crusader/Enforcer outranges them by a significant margin. They are very effective against amphibious units, which move slowly and are unable to fire back.

Cannot attack Hovercraft.

====Dargon's Claw/Dragon's Maw====

These are stealthy defensive structures (really stationary units) that can disguise themselves as Dragon's Teeth. When disguised, they can take significant amounts of damage, just like any &quot;pop-up&quot; weapon. If an enemy wanders into range, they'll reveal themselves and attack with a short-ranged lightning cannon (Arm) or flamethrower (Core). When destroyed, they leave behind ordinary Dragon's Teeth.

===Level 2 Defensive Structures===

====Flakker/Cobra====

Late-game anti-aircraft defence, flak cannons are one of the two replacements for MTs. They're relatively short-ranged, but do a lot of damage, fire quickly, and have a massive area of effect. They're incredible against gunships, which tend to cluster, allowing the flak cannon to damage or destroy several with a single shot. Put these near vital late-game structures to prevent your enemy from swarming and destroying them with gunships. ''Flak cannons cannot attack ground units''.

There are also floating versions that can be built on water.

====Mercury/Screamer====

These upgraded MTs provide late-game anti-aircraft defence. Their guided missiles have a very long range - roughly half that of a VLRPC, do enough damage to kill almost any plane, and have an impressive blast radius.  Very good against level 2 bombers and fighters. ''Cannot attack ground units.''  These units fire quite slowly, so should not be relied on as a primary anti air defence.

====Annihilator/Doomsday Machine====

The big brother of the HLT, these structures fill the same role in the late game. Their weapon, affectionately referred to as the &quot;Blue Laser of Death&quot;, is slow-firing but capable of destroying most units in a single shot. They have an impressive range, but are still outranged by several kinds of artillery, so don't expect them to create an unbreakable defence!

Assaulting a line of BLoDs in the late game can be challenging, especially if they're properly supported by mobile units and anti-air. A good choice is to exploit their slow refire time and throw a swarm of fast, light, cheap units (like Flashes/Instigators, or even Jeffies/Weasels or Peewees/AKs) at them first, then hit them with longer-ranged units (Sharpshooters, Morties, Penetrators, Vanguards, Catapults, Tremors, etc.) while they're chewing on those. If the enemy's neglected to give his BLoDs proper AA support, gunships or bombers can be very effective. If all else fails, a barrage of Cruise Missiles will probably work.

====Ambusher/Toaster====

The big brother of the Guardian. They have a bit more range and a bit more firepower.  When not in use they fold away into a concrete bunker.  This allows them to survive much larger amounts of damage, making them virtually immune to long-range artillery or nuclear weapons.

Currently does '''triple damage to naval units''' so it should be preferred over the L1 plasma cannons in naval maps.

====Moray/Lamprey====

Heavier versions of the Harpoon/Urchin. They do more damage and have a slightly longer range, but are still largely ineffective against surface vessels.  These structures are totally under water, and so can only be targeted by depth charges.

Cannot attack Hovercraft.

====Big Bertha/Intimidator====

These massive plasma cannons, often called Very Long-Range Plasma Cannons (VLRPCs)  can deliver large amounts of firepower across a significant portion of even the largest maps. Their extreme range and destructive power are compensated for by their poor accuracy, low health, and high energy cost per shot. 

At first these appear to be a game ending weapon. They are capable of attacking pretty much anywhere on many maps, and so could, in theory, destroy an entire base. In practice, these seem to take a long time to do significant damage.  Many of the more critical structures, such as factories or Fusion Plants can survive fire from a VLRPC for long enough for a construction unit to repair the damage. Others can simply be rebuilt once the cannon's moved on to other targets.

Sustained fire from several of these cannons over a base acts as an effective siege mechanism.  It makes it much harder to build, as anything under construction is quite vulnerable to being destroyed.  Construction units are also quite vulnerable, and many can be taken out at once by a lucky hit.  This can gradually tilt the balance of economic power in favour of a player with the VLRPC, even with the hefty cost of each shot.

Once one of these cannons starts to fire, there are several possible replies.  An aggressive opponent will normally search for the VLRPC doing the damage, probably with scout aircraft.  Observing the direction the shells are coming from will give a reasonable indication of where to look.  If the cannon has been built without considerable protection, it will normally be attacked and destroyed. If it is heavily protected, the opponent may feel that they must attack anyway and lose a lot of units for nothing. Other options include building your own VRLPC (or better still half a dozen) scattered throughout your base to respond to your enemy's attacks.  Some players may try building a [http://taspring.clan-sy.com/w/index.php?title=Absolute_Annihilation/Units#Deflector deflector] to nullify the effect of the VRLPC, but this can be prohibitively expensive, especially if you try to carpet your entire base.  Building [http://taspring.clan-sy.com/w/index.php?title=Absolute_Annihilation/Units#Radar.2FSonar.2FJammer radar jammers] can be more useful, as these cannons won't fire at something they can't see.  Even with a jammer up, a few cheap air scouts will usually reveal plenty of targets for these cannons to fire at, so they typically have to be backed up with a Mercury/Screamer or two and some smaller MTs near the edges of your base.

====Vulcan/Buzzsaw====

A rapid-fire VLRPC that's even less accurate than its single-shot cousins. Definitely an [[Uberweapon]]. Like the Krogoth and Orcone, there's no reason to build one of these in most games, unless all other porc-cracking options have failed. It drains energy like mad, but its high damage, absurd rate of fire, and insane scatter will destroy all but the most hardened bases. Give it a lot of support, as your opponent ''will'' be coming to kill it as soon as it opens fire on him.

====Protector/Fortitude====

The Protector/Fortitude are purely defensive structures. They have no offensive weapons, but can intercept any nuclear weapons whose trajectories cross their operating range, which is displayed as a circle on your radar, as long as they have ammo. A must in most games as soon as your level 2 economy is on a solid footing, even if just as a precaution against a last-ditch strike by your enemy. In a Commander Dies, Game Ends game, you ''will'' want to keep your Commander well inside the range of a Protector/Fortitude at all times.

You need to construct ammo stores for this weapon. This is done using the normal construction interface. Standard practice is to queue up at least 50 rounds while it's being built and then leave it. If you ever have to intercept more than 50 nuclear missiles, you're doing something wrong.

Be sure to give these good AA cover. Standard practice when launching a nuke strike is to send a mob of Phoenix/Hurricanes to kill the enemy's anti-nuke, then follow up with a nuke volley.

====Retaliator/Silencer====

The Retaliator/Silencer are more offensive weapons than defensive weapons. They can fire nuclear missiles (which must be constructed before launch) all the way across any map, each of which can destroy a substantial portion of an enemy base. Very few things (such as specialized structures that are in an armoured state by default) can survive a nuke blast, though the missiles can be easily intercepted by Protectors/Fortitudes.

====Juno====

The Juno is a much more limited ballistic missile launcher. Its missiles cannot be intercepted, but do no damage to normal units. They will, however, destroy all radar, sonar, or radar/sonar jammer units within their area of effect, and will also destroy Dragon's Eye cameras.

====Deflector====

The Deflector is one of the few proper counters to VLRPCs, other than extensive jamming and AA. It generates a sheild that stops all manner of plasma weapons, gauss shells, and EMG fire, but it cannot deflect lasers, missiles, flamethrowers, lightning shots, or bombs. The field affects all fire directed into it from outside, but ''will not'' affect any shots fired from inside the field. This means that your units can safely fire out, but also that the field will be ineffective if the enemy manages to get inside.

The sheild needs to be charged to stop shells, you can determine it's level of charge by how the sheild appears, a barely visible sheild has no or very low charge whereas a bright white sheild is fully charged. The sheild consumes energy to charge.

The sheild can hold it's onw for quite a while against VLRPCs, bur RFVLRPCS can bring them down near instantly.

====Pitbull/Viper====

Shorter-ranged pop-up weapons, the Arm Pitbull fires a line-of-sight gauss projectile and the Core Viper fires heavy rockets. These structures fill about the same role as an LLT in the late-game and can, if you have the resources, make good support for a BLoD or act as replacements for destroyed HLTs. A cluster of these structures packed into a chokepoint or lined up in front of some Annihilators/Doomsday Machines can do quite a lot of damage. When not in use, they fold away into a concrete bunker, making them effectively immune to long-range artillery and even nuke strikes.

===Arm Level 2 Defensive Structures===

====Detonator====

The Detonator fires ballistic EMP missiles that paralyze units caught inside the blast. Their projectiles cannot be intercepted, making them very good at &quot;preparing&quot; enemy defensive structures or units for an attack. Like nukes and anti-nukes, the Detonator must build each shot before it can be used.

===Core Level 2 Defensive Structures===

====Inferno====

Wide-arc flamethrower.  Good against swarms or for use in conjunction with several other Infernos against bigger units, or simply as one more extra support turret in a massively fortified front line.

====Catalyst====

A short-range tactical nuke launcher. The Catalyst's ballistic missile cannot be intercepted by anti-nukes but do significantly less damage than full-sized nukes. This makes them poor at destroying bases, but very good at softening up an enemy defensive line before an attack.

==Utility Structures==

They don't, strictly speaking, help you kill your enemy, make more units to kill your enemy, or prevent your enemy from killing your base, but these structures can be important all the same.

===Targeting Facility===

This Level 2 structure makes your fire against targets that can be seen only on radar substantially more accurate. It's fairly costly and takes a reasonably hefty chunk of energy to operate, but can be very useful for bombarding your enemy's defences from outside of their effective range.

There is also a floating version of this structure, which is very useful for naval battles, as engagements between surface ships will often happen without either side ever seeing the other.

===Air Repair Pad===

This Level 2 structure makes maintaining a large fleet of aircraft much easier. When switched on, it consumes a small amount of energy (250), and aircraft with &quot;patrol&quot; or &quot;attack&quot; orders will, when they're down to a certain health percentage, seek out an open air repair pad, land there, get repaired, and then return to carrying out their orders. The health percentage can be configured in the unit's orders panel.

==KBots==

KBots are units that use legs to move. They're generally more lightly armed than vehicles and can take less damage, but are cheaper, build faster, and can cross rough terrain and climb hills much better. KBots are generally good for massed assaults or surprise attacks over difficult terrain. The exception is &quot;Level 3&quot; KBots, which have incredibly powerful weapons and can take absurd amounts of damage.

===Common Lvl 1 KBots===

For many lvl1 units, there's no significant difference between the Arm and Core versions. These units get listed here.

====Peewee/AK====

Small cheap infantry KBot.  The die very quickly to any significant opposition, but are speedy and can see farther than other L1 KBots.  Can be used for scouting, [http://taspring.clan-sy.com/wiki/Swarming swarming] and as cannon fodder mixed with more valuable units. Good for early attacks on an enemy base, but they become obsolete very quickly.

====Rocko/Storm====

Slightly more expensive KBot with a long-range rocket launcher. Together with Hammers/Thuds, Rockos/Storms will tend to form the backbone of an early KBot force. Their rockets have a long range but can't fire over other units. Position them carefully, as they will occasionally try, damaging your units in the process! (Using a line-movement command works very nicely for them) Their long range lets them get off at least a couple shots at most L1 defensive structures. They outrange LLTs, but cannot fire at them effectively without spotters.

====Hammer/Thud====

The Hammer and Thud fire small plasma shells, which are shorter-ranged than Rocko/Storm rockets, but can fire over other units and small terrain obstructions.  This means that most units in a mass can fire, whereas for many other units only the front line can fire. They can also fire over wreckage, Dragon's Teeth, and other obstructions. Hammers and Thuds are best used as early heavy main battle units.

====Jethro/Crasher====

Fires guided missiles and can only attack air units.  Basic level 1 mobile anti-air. Pretty much a walking missile tower.  They're generally useless when compared to other forms of anti-air, so should only be used if you have no other option for mobile anti-air.  Otherwise, prefer the static structures, or fighters, or flak tanks.

===Arm Lvl 1 KBots===

====Warrior====

Costs a fair bit more than any other level KBot and is very slow. Has a lot of health and two fast-firing lasers. The Warrior is an excellent defensive unit, as it has a lot of health and powerful weapons. While slow-building and expensive for a L1 KBot, a Warrior is almost the equal of a Zeus, and a small force backed up by other L1 KBots can be an excellent assault force.

====Flea====

Super cheap.  Very fast.  And dies if you yell at it.  Possibly try building a few of them first on large maps and sending a few towards your opponents.  Their speed and cheapness may catch them off guard if you are lucky.  Has a nearly-harmless weapon that most units can outright ignore, so pick your targets carefully if using it for attack.

===Core Lvl 1 KBots===

The Core has no unique Level 1 KBots.

===Common Lvl 2 KBots===

====Decoy Commander====

Useless in Commander Dies, Game Continues games. In Commander Dies, Game Ends games, these units are very handy. They can be used to lure the enemy into making futile or ill-conceived attacks in hope of killing your Commander and wiping out your army. Does absolutely nothing else, but has a number of features to make it a more convincing decoy.

====Rector/Necro====

The stealthy Rector and Necro can bring other units back to life, provided their wreckage hasn't taken too much damage. While this is costly, it can allow you to recover from a well-executed attack by pressing the reanimated corpses of the enemy's attack force into your service to supplement your own army.

====Invader/Roach====

The humble Invader and Roach have no purpose in life beyond crawling towards the enemy extremely slowly and exploding extremely violently. These units can climb very steep hills and are amphibious, allowing them to pop up from unexpected directions. They die very easily, but if you can slip them past the enemy's defenses, they'll do a lot of damage to his economy. Their explosions are significantly more destructive if you self-destruct them.

Take note that they are extremely small targets moving at a substantial speed so most non-beam-weapons will miss them.

====Infiltrator/Parasite====

A stealthy, cloakable KBot, the Infiltrator and Parasite are totally unarmed. They're good for finding out what your enemy's up to. They have the ability to create a medium sized paralysing explosion when they self destruct, making them useful for getting past an enemy's defences.

===Arm Lvl 2 KBots===

====Fido====

A very average level 2 KBot. Weaker than a [[#Zeus|Zeus]] or [[#Maverick|Maverick]] but faster and cheaper. Versatile but not particularly good at any one thing. The Fido has two fire modes, which can be toggled by switching its &quot;Active State&quot; between &quot;On&quot; and &quot;Off&quot;. The default uses a long-range, slow-firing direct-fire gauss cannon. It's fairly accurate but relatively low-damage. The &quot;Ballistic Cannon&quot; mode fires a less-accurate shell that travels in a higher, ballistic arc, allowing it to fire over other units, Dragon's Teeth, and hills.

====Zipper====

Fast [http://taspring.clan-sy.com/wiki/Swarming swarm] unit with a short range direct fire weapon.  Masses of these can survive surprising amounts of fire to do damage to undefended areas of a base. Seem to be able to push level 1 units out of the way, and are also very good at finding their way through wreckage fields due to their small size.

====Maverick====

Moderately expensive Kbot packing two gauss guns with medium range. Average durability and speed for an L2 unit, but capable of doing impressive damage. It destroys L1 units and light defences with ease. The Maverick also auto-repairs in combat and has a longer visual range than most units, making one or two good &quot;spotters&quot; for a unit of other KBots.

====Zeus====

Slow and tough. It has a short-ranged but powerful lightning cannon.  In numbers they can take and dish out a lot of damage, and are excellent defence-busters in the mid-to-late game.

====FatBoy====

Slower and tougher than the Zeus, the Fatboy carries a massive plasma cannon with a long range, high damage, and large area of effect. Very good at supporting swarms of Zeuses, but watch what they're shooting at to make sure they don't blow up your own units.

====Pelican====

This unique amphibious KBot travels quickly over the surface of the water. It packs a direct-fire laser for use against ground units and a homing missile launcher for use against aircraft.

====Eraser====

A mobile radar jammer. Useful for keeping the enemy from noticing an attack force until it's too late.

====FARK====

The Fast Assist Repair KBot can't build much, but is cheap and has a good nanolathe. This makes swarms of FARKs excellent assistants for primary construction units. FARKs are also fairly small and fast, which makes them better at supporting combat units than regular construction units.

====Sharpshooter====

One of the nastiest Arm Lvl2 Kbots, the Sharpshooter is stealthy ''and'' can cloak, making it very hard to spot when it's not firing. Even when firing, it can be tough to find, as its weapon is invisible, but has a very distinctive noise. Its weapon is very slow-firing and long-range, and does absurd amounts of damage. It does even more absurd damage to Krogoths, Orcones, and Juggarnauts, making swarms of Sharpshooters an excellent counter against Uberweapons, provided you have something to soak up enemy fire while the Sharpshooters do their work.

====Recluse====

A spider KBot that can climb up almost anything.  Can cause nightmares for unprepared opponents who don't think land units will be able to cross a steep terrain barrier, and as a result don't build any suitable defence in that direction.  It fires heavy rockets that aren't particularly fast or accurate.

Sometimes you can climb these halfway up a steep slope near some enemy units and stop.  The defenders units won't be able to shoot you because they would have to do so through the rock, but you can lob rockets up and over.

====Spider====

Another spider KBot, similar to the Recluse but smaller, faster, and armed with a paralysing weapon. Even on open ground, the paralyzer weapon makes it an excellent unit to mix in with an assault force, as a couple of shots can take an enemy unit out of the battle for a few seconds, and will probably focus all the enemy's fire on the Spider.

====Scarab====

A mobile anti-nuke. Useful for protecting a force of ground units dispatched to assault a nuclear missile silo, or for covering an expansion until you can get a proper anti-nuke built there.

===Core Lvl 2 KBots===

====Pyro====

Core's level 2 [http://taspring.clan-sy.com/wiki/Swarming swarm]/assault unit unit.  Halfway between a Zipper and a Zeus in toughness and speed.  Packs a flamethrower that can dish out a lot of damage to multiple units if you get within its short range. Doesn't leave wreckage, making it an excellent raider. Generally, you'll want to back these up with Cans.

====Can====

Silly looking KBot that waddles along fairly slowly, but don't laugh if they are coming to get you.  Fairly expensive and very tough.  Packs a pretty fierce punch with its laser weapon, but does not have a big range. Enemy units can sometimes retreat, fire, and then continue retreating, staying out of The Can's range the entire time. They'd better hope they kill it before they run out of room to retreat, though!

====Sumo====

Take The Can and make it much tougher and slower.  Longer weapon range and more power, as well as a much faster fire rate.  Doesn't look quite as silly. Can be used as an extremely slow but hard-to-stop offensive weapon, or as a mobile HLT in your base. Good at countering light Level 3 KBots. Like the Can, it has a combat auto-repair.

====Morty====

A support KBot with a very big gun.  Has a long range and fires fast, but doesn't do a lot of damage and isn't particularly durable. Keep them behind a line of Cans, Sumos, and Pyros, and use them to bombard enemy defences.

====Gimp====

A faster, weaker, amphibious version of the Can. Packs a slightly weaker version of the Can's lasers and a torpedo launcher. The torpedoes are extremely weak against submarines, though, so don't try using this as a general-purpose underwater combat unit!

====Freaker====

A fast-moving construction unit, the Freaker has a very eclectic build menu. It can construct mines, static defenses, and some combat units. Using them to construct Cans or Raiders near the front lines to reinforce your assault force can be very effective!

====Dominator====

Another artillery support KBot, the Dominator fires vertically-launched rockets. These are only slightly longer-ranged than the Morty's shells, but are much more powerful and can fire over practically anything. Protected by a wall of Cans and Sumos, Dominators are wonderful at destroying structures of all kinds. Just don't try using them on mobile units!

====Voyeur====	 

A walking radar tower.

====Termite====

This KBot can climb over practically anything. It's fairly tough and packs a heavy laser. Great for surprise attacks against an unprotected flank of the enemy base, but don't expect them to last long on the front lines.

====Skuttle====

A bigger, badder version of the Roach. Not only does it make a bigger bang, but it can cloak too. Combined with radar jamming, a Skuttle can blast an impressive hole in even the toughest defences.

====Leejen====

A light and fast but totally unarmed scout KBot. Cheap unit, good for scouting ahead of a force for things like stealth units, mines, and enemy defences. Has a very short-ranged radar for spotting cloaked units, etc.

===Common Lvl 3 KBots===

====Avatar/Mauler====

A mobile Big Bertha/Intimidator. Slow and dies pretty much as soon as the enemy looks at it, but can devastate enemy positions from unexpected directions.

===Arm lvl 3===

====Orcone====

An [http://taspring.clan-sy.com/wiki/Uberweapon Uberweapon]. Costs absurd amounts of resources. Slow, but will destroy pretty much anything in its path. Very vulnerable to Sharpshooters, Annihilators/Doomsday Machines, and VLRPCs. Not generally worth investing in unless facing an enemy who's porcing heavily, and even then they need a lot of support from conventional units. If you see one coming, don't panic, start building Annihilators/Doomsday Machines, Sumos, or Sharpshooters and stick them (cloaked, in the case of Sharpshooters) in its path.

====Bantha====

Heavy attack mech.  Shoots guided rockets, blue lasers, and plasma projectiles.  Very hard to kill. Basically a mini-Orcone at a much more practical cost. It can be vulnerable to heavy attack from the air, and also dies to many of the same counters as the Orcone. Don't use these without a lot of support units backing them up!

====Razorback====

A light assault mech. Employs short-ranged but rapid-fire lasers and a multi-hit blaster. Faster than the Bantha or Orcone, much cheaper, and easier to fit into a regular assault force. Support them well, as they're very weak against Gunships, and can be taken out by sufficiently large groups of L2 units, or a few Sumos, though it can outrun the Sumos.

====Marauder====

A medium amphibious assault unit. Very fast moving on land, and can be deadly if your enemy hasn't protected his shoreline properly.

====Vanguard====

A slow but tough unit with a powerful long-range gun. Good as support for a mixed force of Razorbacks and L2 units. Can climb near-vertical walls to attack from unexpected directions and bypass enemy defences.

====Aegis====

A mobile EMP ballistic missile launcher. Its missiles cannot be intercepted by anti-nukes, but do significantly less damage than regular nukes. Slow and dies very easily.

===Core Lvl 3 KBots===

====Krogoth====

An [http://taspring.clan-sy.com/wiki/Uberweapon Uberweapon]. Costs absurd amounts of resources. Slightly more powerful and tougher than the Orcone, and features a shotgun-style blaster which is ideal for concentrated fire on a single heavy target or spread fire over a swarm of lesser units.

====Krogtaar====

A miniature Krogoth. Significantly cheaper, faster, and easier to kill. Fires a riot cannon with a medium range and high damage, making it very good against swarms of level 1 units. Much more practical than the Krogoth.

====Karganeth====

The smallest and cheapest of the Core lvl3 mechs, and thus the most practical. The Karganeth packs rapid-fire homing missiles, making it effective against both land and air targets. This also means it fits very well into a mixed assault force. It also has the ability to climb nearly vertical cliffs, allowing it to bypass an enemy's defences.

====Shiva====

The Core amphibious lvl3 mech, the Shiva is an impressive unit. It carries plasma cannons and a pair of vertical-launch rocket launchers. While vulnerable in the water, if one reaches your shore, you're in trouble. Only worth building on maps with sparse but restrictive water.

====Juggernaut====

Slower and weaker than a Krogoth, but about a quarter the cost. Carries a fast-firing multiple-hit gauss cannon with fairly good damage. Most useful as a mobile turret in your base. Juggernauts have a lot of hit points, so they can also be used as a sort of &quot;rolling front line&quot;. Should ideally have a group of support construction units for when its job is done and it's lost a lot of health.

====Catapult====

This Core Lvl3 mech can unleash a massive, near-continuous stream of powerful, unguided, long-range rockets. It can't take much fire, though.  In groups of three or more, these can tear apart an enemy base in as little as 60 seconds.  They should be guarded well by units such as Sumos, Cans, and Karganeths.

==Vehicles==

Vehicles use wheels or tracks to move. They're generaly fast, heavily armed, and can take a lot of damage, but are more expensive and slower to build than KBots. They are also slowed or stopped entirely by rough terrain and can't climb hills very well. Vehicles are good for frontal assaults and generally smashing through defences.

===Common Lvl 1 Vehicles===

These vehicles are effectively identical for both races, and so are described only once.

====Jeffy/Weasel====

Cheap, fast units with a long line-of-sight. While they are armed, their weapon can't do much damage, and they have almost no HP. They're decent for scouting (you know you've found an enemy when they explode) and good for raiding your enemy's resource structures in the early game.

====Flash/Instigator====

The tank equivalent of the Peewee/AK. Flashes and Instigators have slightly more health and can't see as far, but are otherwise very similar to their KBot cousins.

====Stumpy/Raider====

The tank equivallent of the Hammer/Thud. Stumpies and Raiders are very tough for L1 units, and are very good at killing LLTs and even HLTs. Sometimes they can even survive long enough to do decent damage to larger defensive structures.

====Samson/Slasher====

The tank equivalent of the Jethro/Crasher. These units ''can'' attack ground units, but are much more effective against aircraft. They're very slow, though, making them hard to use effectively.

====Pincer/Garpike====

This otherwise-unremarkable L1 tank can travel underwater, allowing it to cross rivers and small lakes to attack the enemy from an unexpected direction. Don't expect it to survive crossing larger bodies of water, though, as it dies fast to submarines and torpedo launchers.

====Shellshocker/Wolverine====

The only true L1 artillery unit, the Shellshocker and Wolverine fire a projectile that has a very high trajectory and long range but extremely poor accuracy. Useful for taking out fixed defences, but keep them well away from your combat units or set them to hold fire, as their shots will often hit friendly units in the middle of a skirmish. These are excellent assault units, as they outrange LLTs by a wide margin and HLTs by a significant but slim-er margin. If he wants to kill them, your enemy will have to deploy mobile units outside his defences or invest in a Guardian/Punisher.

====Podger/Spoiler====

This unit both lays and clears mines. Although powerful, mines require fair amounts of energy to stay cloaked. If you can spare the power, they're very good at blocking up chokepoints and slowing down attackers. Most players don't bother (to their peril).

===Arm Lvl 1 Vehicles===

====Janus====

This tank packs a slow-firing but very powerful pair of heavy rocket launchers. Its rockets can't always fire over other units (and will do serious damage to them if they get in the way) but have a good range. Very good against most forms of static defence, as long as there are other units to soak up the damage.

===Core Lvl 1 Vehicles===

====Leveler====

The Core's answer to swarm attacks by Flashes is the Leveler. The tank itself is slow, and its weapon is short-ranged, but it packs a ''massive'' punch and has a huge area of effect. Not only that, but it'll send enemy units flying and create craters, severely hampering the enemy's mobility.

===Common Lvl 2 Vehicles===

====Phalanx/Copperhead====

A mobile flak cannon. Excellent anti-aircraft coverage for your level 2 attack force. In fact, the ''only'' dedicated level 2 anti-aircraft unit. Maneuver them carefully, as they're fragile. You want to keep them close enough to cover your forces, but far enough back that enemy ground units can't easily target them.

====Luger/Pillager====

A mobile artillery plasma cannon. Like the Shellshocker/Wolverine, fires its shells in a high arc, allowing them to travel over most things. Has less range and does less damage per shot than the Merl/Diplomat, but fires significantly faster. Decent support for a unit of tanks or Merls/Diplomats.

====Merl/Diplomat====

A mobile artillery missile launcher. The Merl/Diplomat fire their long-range, high-damage missiles vertically, which allows them to fire over practically anything. This also means their missiles take a long time to reach their targets, making them useless against mobile units. Set these things to Hold Fire if your enemy has mobile units (especially aircraft) around, or you ''will'' destroy your own mobile units. They are slower than other forms of mobile artillery but tougher, making them good at assaulting enemy defensive structures.

====Triton/Croc====

A light, amphibious level 2 tank. Faster than the Bulldog, but has less health and a smaller gun. Useful as a spearhead for amphibious assaults, to soak up fire and clear out defenders before heavier units come in. The usual limitations of amphibious units apply.

====Bulldog/Reaper====

The basic, vanilla level 2 tank. Heavily armored, fairly speedy, and equipped with a medium-range, medium-damage plasma cannon that can fire over other units. Bulldogs and Reapers can drive over level 1 unit wreckage and Dragon's Teeth, which makes them good at breaking through heavily contested or fortified areas.

===Arm Lvl 2 Vehicles===

====Panther====

A fast, light level 2 tank. Armed with a lightning cannon similar to the Zeus' (for use against ground units) and a homing missile launcher (for use against aircraft). Its main advantage is its speed, which allows it to spot for heavier tanks and close with defensive structures to use its cannon. Dies very easily, so support them with bigger tanks.

====Penetrator====

A mobile Blue Laser of Death. Slow and not too tough, but can do a lot of damage. Excellent support for a force of Bulldogs, especially once L3 units start rolling out. Its turret can only turn through a small firing arc, so it's easily destroyed by light, fast units. Keep them far back and well-covered.

====Seer====

Radar on wheels.

====Gremlin====

A stealthy, fast, cloakable light tank. It can't take much damage, and has a short-range, low-damage cannon, but is excellent at raiding. If you can find a hole in your enemy's lines and slip a few of these through, you can often do a lot of damage before he can stop them.

====Consul====

The Arm mobile engineer. Can build mines, a nice selection of defensive structures, and a few mobile units, including the Fido and Zeus. These can be used to construct front-line reinforcements or even, with the help of jammers, construct an entire attack force for use against an unwary opponent.

===Core Lvl 2 Vehicles===

====Deleter====

A mobile radar jammer.

====Goliath====

A very tough, very slow-moving tank with a big, indirect-fire, long-range gun with a hefty blast radius. While expensive, a force of goliaths can do very impressive damage and can be very difficult to stop, especially since it auto-repairs even during combat. It can roll over most wreckage and Dragon's Teeth.

====Poison Arrow====

A heavy amphibious tank. Less well-armored than the Goliath but faster. Has a long-ranged, powerful, indirect-fire cannon. Only really useful on maps with small bodies of water as, like most amphibious vehicles, subs do a number on it.

====Intruder====

A heavy amphibious transport, the Intruder's very useful for moving around assault forces. It's quite quick, and can be used to ferry heavy but slow units (like the Can or Sumo) to the front lines, or to bring up additional units to support an amphibious assault.

====Banisher====

A reasonably fast, reasonably tough tank packing a heavy missile launcher. Note that, unlike most other level 2 tank weapons, its rockets ''cannot'' fire over other units. While they can do a lot of damage, this means that you'd better make sure none of your units are in the line of fire.

====Tremor====

Absolutely terrifying mobile artillery. Quite tough, not too sluggish, and packs a rapid-fire indirect-fire cannon. (Basically a mini-Buzzsaw) Individual shots aren't particularly strong and it has about the same range as the Diplomat, but fires faster any other artillery unit. Its shots have a fairly large scatter, making them great at wiping out clustered defences or resource buildings.

====Hedgehog====

A mobile anti-nuke. Useful for protecting a force of ground units dispatched to assault a nuclear missile silo, or for covering an expansion until you can get a proper anti-nuke built there.

==Aircraft==

Aircraft are airborne combat units. They're fast, can cross any terrain, but can take very little damage. Most aircraft are specialized, and designed for a specific task. Against units not built specifically to counter them, aircraft are very effective. Against anti-air units, they are at a significant disadvantage. Generally air units are not a base busting assault weapon, but anyone who assumes that they are useless will play at a significant disadvantage. Aircraft can be put to several uses, even in the late game:

Scouting: You've built a [[#Big Bertha/Intimidator|VLRPC]] (or ten).  The sounds of each successive shell exploding in your enemy's base is slowly ratcheting up the pressure.  But how do you know whether the pride of your army is destroying important enemy buildings, or killing peewees and solar collectors?  Build some airplanes and have a look.  You can then aim your Big Bertha at a worthy target.  If your enemies build LRPCs, but only one player builds planes, guess who will find and destroy the opposing LRPCs first?  

A few light aircraft can also be a great investment ahead of a ground attack.  You can spot holes in the defence to aim for or unexpected resistance to retreat from before taking losses.  They can provide line of sight for long range artillery to start pounding opposing defences.  And what is that blob of units coming towards you on the radar?  A plane can tell you if its 20 peewees or 20 goliaths.  Any empty space on the map?  Send a plane to scout at random intervals; you might find and prevent an opponent preparing a nasty surprise under cover of a radar jammer.

In general terms, scout aircraft are invaluable, as they're a very reliable mechanism for gathering precise information about the battlefield, even through heavy radar jamming and enemy fire.

Overwhelming:  Focus efforts on building a large devestating force of bombers or gunships.  With enough effort or against an unsuspecting victim, you may create a large enough air attack to devestate a base with insufficient anti-air defence.  If your opponent ''does'' build enough anti-air defences, the setback to your economy from this effort will be serious.

Defence:  An often overlooked aspect of aircraft is their use for base defence.  They have the advantage of being able to intercept an attack from any direction quickly.  If the attack force does not include a significant anti air componenent, your planes can attack while taking very little damage in return. [[#Hawk/Vamp|Hawks/Vamps]] are particularly good at this, and while they're unlikely to do fatal damage to ground units, they're excellent at intercepting and destroying enemy airstrikes. Level 2 bombers and gunships can provide a more adiquate dfence against ground assaults. A few Arm Stilletos, for instance, can provide an effective defence against nearly any attack.

Strategic strikes:  Sometimes your opponent has a key building you badly want to destroy.  It might be a [[#Retaliator/Silencer|nuclear silo]], [[#Protector/Fortitude|nuclear defence]], or a [[#Vulcan/Buzzsaw|rapid fire LRPC]].  Perhaps a [[#Moho Geothermal Powerplant|moho geothermal]], or [[#Advanced Fusion Reactor|advanced fusion]] that could take half the base with it if you can kill it.  Or a [[#Commander|Commander]].  A determined bombing assault can often do the trick.  Air has an unequaled ability to rapidly move and concentrate force to attack a key location.  Just make sure the target is worth the effort, as in most games the planes that will get destroyed by anti-air in such a strike will represent a significant investment of resources. You'll need to use ground forces to capitalize on the strike.

All aircraft have a limited-range sonar, allowing them to see submerged units immediately under them.  Aircraft generally cost larger amounts of energy, and lower amounts of metal when compared with other units.  This can energy stall an unprepared player who tries to build an air force too early in the game.  Aircraft also take a long time to build. Building an Air Factory as your first factory is a high-risk move guaranteed to slow down economic expansion drastrically.

===Common Lvl 1 Aircraft===

====Peeper/Fink====

A light recon aircraft. Unarmed and can't take much damage, but very fast, cheap, and nimble, with a long line of sight and a radar. Carries flares to reduce the effectiveness of guided AA weapons. They're best used as scouts, to spot targets for long-range artillery or attack forces. As they're cheap, fast, airborne, carry radar, and have a good sight range, Peepers and Finks are among the best scouts in the game. It's almost always worth building an L1 Aircraft Plant even if you only use it for building these.

====Freedom Fighter/Avenger====

A basic fighter aircraft. Fast and maneuverable, but can't take much damage. Carries a homing missile that can attack ground or air targets. Although they're not specifically designed for it, a group of 20-30 of these can be quickly and cheaply built in the late game to harass enemy units to great effect. Great against level 1 aircraft, and useful against level 2 aircraft and ground units if built in a large enough swarm. They are also extremely effective against gunships of all kinds.

An effective tactic can be to slowly assemble a group of these and then use them to raid your enemy's resources; from then on, he'll be forced to build extensive anti-air even if you don't plan on ever using air again. If your enemy is spending half his resources to defend against an attack that's not coming....

====Thunder/Shadow====

A basic bomber aircraft. Slower and clumsier than the level 1 fighters, but much tougher. Attacks using a line of high-damage bombs, allowing it to damage or destroy several defensive structures in a single pass, or do more damage to larger structures. Not much use against mobile units, which can generally move out of the way before the bombs hit, but can do acceptable damage against packs of units.

====Atlas/Valkyrie====

A basic airborne transport. Can only carry one unit, but does so very quickly. Can't take a lot of damage, and accelerates slowly, but invaluable when you need to move a unit up a cliff or over some water in a hurry. Their low volume and vulnerability to AA fire makes them poorly-suited for assault roles, but if you can find an opening in the enemy's anti-aircraft defences, a quick raid with air transports could exploit it very effectively. Even against moderate AA, a swarm of Atlases (20-ish) will often be able to drop off at least a few units behind enemy lines before they die.

One common use for these units is kidnapping enemy construction units or Commanders. (Though the Commander's laser can often destroy them before they can grab him) This means it's a good idea to build one or two missile towers to cover your construction units as soon as you can spare the resources. Even a single missile tower will be able to do enough damage to destroy would-be kidnappers.

===Arm Lvl 1 Aircraft===

====Banshee====

A basic ground attack aircraft. Slow but tough, and carries a weak, short-ranged EMG for use against ground units. While it doesn't do a lot of damage, an early Banshee assault can cripple an enemy who's neglected to build even a handful of missile towers. It can hover, allowing it to attack slow-moving or stationary ground units very effectively but making it vulnerable to flak.

As with all gunships, banshees take slightly (~20%) reduced damage from missiles compared to other types of aircraft.

===Core Lvl 1 Aircraft===

====Bladewing====

A basic gunship. Fast, but not very tough. Carries a laser that paralyzes its target. Best used in swarms to support other combat units in the field, by paralysing serious threats. It can hover, allowing it to attack slow-moving or stationary ground units very effectively but making it vulnerable to flak.

Many Core players have gone on the record to say that the only reason they like Core so much is the Bladewing.  With its ability to temporarily remove any one unit from a fight, you can effectively take the wind out of your enemy's sails if that one unit is, for instance, a Bantha.

Be aware that superweapons and Commanders are nigh-invulnerable to paralyzer weapons. Concentrated fire may temporarily stun them, but they'll be back in action practically the instant you stop firing.

===Common Lvl 2 Aircraft===

====Brawler/Rapier====

Tough but slow ground attack aircraft. The Brawler carries an rapid-fire weak weapon, while the Rapier has slower-firing but more powerful rockets. Both can hover, allowing them to attack slow-moving or stationary ground units effectively, but making them very vulnerable to AA in general and flak in particular. Before the enemy has significant flak defences, Brawlers and Rapiers are viable for assaults. After that point, they're best used to raid areas of the enemy base lacking flak for whatever reason, or harass assault forces that have insufficient AA cover. These are also fairly supicable to fighters, especialy when traveling to or from a target.

Be aware that Brawlers and Rapiers do significant damage to other gunships in the area when they explode. This means that, beyond about 15-20 gunships, additional gunships won't actually contribute much to a swarm's effectiveness. If you do find yourself with more than this, split them up into multiple groups.

====Phoenix/Hurricane====

A bigger, nastier bomber aircraft. Drops many more bombs that do much more damage. Unless heavy AA is present along their approach a swarm of bombers ''will'' release enough ordinance in a single pass to destroy their target, regardless of what it is. This makes them very effective first-strike weapons against things like Annihilators/Doomsday Machines, nuclear missile silos, VLRPCs, fusion plants, etc. Also carries a homing missile launcher to fend off fighters.

As advanced missile towers and flak get built, the ability of Phoenixes and Hurricanes to hit targets anywhere in a base diminishes. They remain useful for striking targets near the edge, and can be good for softening up a defence line or breaking a hole in it before an attack, but typically need to withdraw (or will be destroyed) after one or two passes.

Because of their bomb scattering attribute, a group of even 5+ Phoenix or Hurricanes can be used to quickly massacre even a moderately fast-moving attack group if it isn't protected by a strong anti-air presence.

====Lancet/Titan====

A bomber-type aircraft that fires homing torpedoes instead of normal bombs. Virtually useless against land units, very effective against ships.

====Hawk/Vamp====

A bigger, nastier fighter aircraft. The Hawk is slightly tougher and turns faster, and the Vamp is slightly faster. Both are stealthy, and are very good against enemy bombers, gunships, and level 1 fighters. Not so good offensively, though, as they suck at attacking ground targets. They're good at intercepting enemy airstrikes and providing AA defence for the skies over your base or contested territory.

Note that stealth fighters are excellent AA cover for ground assault forces. Because they're stealthy, they can't be picked up on radar and destroyed by [[#Mercury/Screamer|Mercuries/Screamers]] until they actually engage the enemy. By that time, it's usually too late. You will probably lose all of your Hawks/Vamps, but your enemy's air-swarm will also be dead.

====Eagle/Vulture====

A more sophisticated recon plane. Has a longer radar range and carries a real sonar. Information about your enemy's activities is vital for both attack and defence, and the Eagle/Vulture can tell you a lot. Since they're more expensive than the Peeper/Fink, they're less expendable, making them less useful for quick scouting once AA is deployed. Carry flares to improve their survivability against guided missiles.

===Arm Lvl 2 Aircraft===

====Blade====

A gunship with even more armor and an even bigger weapon. They're tough and reasonably fast, making them good support for your assault forces or base defenses once the enemy deploys flak cannons. Hawks/Vamps, Mercuries/Screamers, and Freedom Fighters/Avengers still work well against them.

Because of a Blade's heavy armor, they take only 50% damage from flak guns, in addition to the standard 20% damage reduction for missile attacks on gunships.  In short, they're Arm's ultimate high-flying badasses. Like other gunships, they still &quot;chain-explode&quot;, making large packs much easier to kill.

====Liche====

A very powerful bomber. Drops only a single bomb, but it has a large blast radius and does a lot of damage. Very vulnerable to Hawks/Vamps and Freedom Fighters/Avengers, so give it lots of cover. Excellent for taking out big, expensive targets.

====Dragonfly====

A stealthy version of the Atlas. Tougher, and armed with a paralysing weapon. It is able to transport heavier units than the level 1 transports, or greater amounts of smaller units. Unlike level 1 transports these can be used in an assault role providiing enemy AA isn't incredibly strong. The ability to drop several units into an enemy base is not to be underestimated.

====Stilleto====

A stealthy bomber whose weapon paralyzes targets caught in the blast. Good for softening up a defence line or assault force. These units are highly resiliant against anti-aircraft fire, with a relativley high amount of hitpoints, radar invisibility, and flares to deflect missiles. On the offensive it can be used to disable enemy AA or ground turrets, allowing you to move in a more damaging force. On defence it can disable large amounts of small units, or even the large mechs which have no defence against such aircraft.

===Core Lvl 2 Aircraft===

====Seahook====

A heavy but slow air transport that can lift absolutely anything. Yes, even a Krogoth. Just hope that your enemy's fighters don't catch this thing in mid-air when it's lugging Kroggy around, though!

====Krow====

Flying instagib.  With its three heavy, rapid-firing lasers, it will kill anything that isn't protected by heavy AA. Krows are not actually flak-resistant. They simply have a ''lot'' of HP.

==Ships and Submarines==

Ships can only travel on water. They're fast, heavily armed, and can take absurd amounts of damage, but have very limited movement and turn slowly. Submarines travel under the water, can only be detected by sonar, and can only attack other units in or under the water. They're generally much weaker than surface vessels and have shorter-ranged weapons.

===Common Lvl 1 Ships and Subs===

====Skeeter/Searcher====

The naval equivalent of the Peewee/AK. Fast, but not very tough (as ships go). Carries a laser, for use against ground units, and a homing missile launcher, for use on aircraft. They're best used for raiding, but will die easily to most real combat ships. They are also useful as anti-air for early attacks, before you can get/need the standard AA ships ([[#Archer/Shredder|Archer/Shredder]]).

====Decade/Supporter====

These light corvettes are intended as a screening force for larger ships. They're slow, have little health, and carry pair of short-ranged, weak cannons, but they're very cheap.

====Crusader/Enforcer====

The meat of a level 1 navy (and good support for a level 2 navy), these destroyers are very flexible ships. They're fast, tough, and useful in a variety of roles. They carry a medium-range indirect fire plasma cannon for use against surface ships and shore targets, a deck laser for use against anything that gets close, and a depth-charge launcher for use on submarines. They also have a short-range sonar.

====Lurker/Snake====

A basic submarine, the Lurker/Snake remains useful throughout the game. While slow and with little health, it has a long-range sonar and packs a powerful torpedo launcher that only works on units in the water. These units can devastate surface or amphibious forces that lack proper anti-submarine support.

====Hulk/Envy====

A basic transport unit, the Hulk/Envy can quickly deliver a mass of units to the enemy's shore. They're very tough, but also very slow.

===Common Lvl 2 Ships and Subs===

====Archer/Shredder====

Carrying both anti-aircraft missile launchers and flak cannon, even a few of these ships can very effectively protect a fleet of ships from airborne attackers.

====Millennium/Warlord====

Expensive, tough, and slow (for a ship), forces of Millenniums and Warlords will be the centrepieces of mid-to-late-game fleets. The Millennium has two turreted plasma batteries, with a high rate of fire, damage, and range. The Warlord replaces one plasma battery with a much more accurate heavy laser. These ships can dominate enemy fleets but are expensive and very weak against submarines and aircraft. Don't build one unless you can defend it!

====Colossus/Hive====

A floating air repair pad, anti-nuke, radar, sonar, and miniature fusion reactor. Totally unarmed, so protect them well!

====Atlantis/Zulu====

A floating Big Bertha/Intimidator. The Zulu has a pair of VLRPCs, while the Atlantis drops one in exchange for an anti-aircraft missile launcher and lower price tag.

====Conqueror/Executioner====

The Conqueror and Executioner are significantly weaker than the Millennium or Warlord, but faster and cheaper. The Conqueror's main weapon is a long-range plasma cannon turret, while the Executioner carries a shorter-range but more accurate heavy laser. Both back up their primary weapons with a short-range deck laser, sonar, and depth-charge launcher.

====Valiant/Limiter====

A mine-layer submarine. Subject to the same limitations as the Podger/Spoiler.

====Ranger/Messenger====

A sea-borne version of the Merl/Diplomat, with correspondingly increased range and damage. Useful for attacking enemy structures or stationary ships. Also sports a radar and anti-air missile launcher.

====Grim Reaper/Death Cavalry====

A resurrection submarine, capable of resurrecting dead units if their wreckage hasn't been reclaimed or taken too much damage.

====Escort/Phantom====

Radar jamming ships. Useful if your opponent doesn't have sonar, or in combination with a sonar-jamming unit.

====Pirannah/Shark====

Submarines designed for fighting other submarines. Weaker but much faster than the Lurker/Snake, their torpedoes home, are longer-range, and do significantly more damage - enough to destroy a Lurker/Snake in a single hit.

====Epoch/Black Hydra====

Basically a floating Krogoth/Orcone. Useful in the same circumstances. Well-protected against air and surface units, weak against submarines.

====Serpent/Leviathan====

Heavy submarines, with more health than the lighter submarines and much bigger weapons. Both have homing torpedoes. The Leviathan has slightly more range and damage, while the Serpent fires faster.

==Hovercraft==

Hovercraft are tanks that can travel over land or water. They're generally more lightly armed and can take less damage than regular tanks, and are more expensive and take longer to build. They also can't compete with ships at surface combat on the open water. They are, however, excellent on &quot;swampy&quot; maps, with interspersed water and land.

===Common Lvl 1 Hovercraft===

====Mausser/Navarone====

A hovercraft version of the Luger/Pillager, but with a shorter range and less damage.

====Swatter/Slinger====

An anti-air hovercraft. Carries a homing missile launcher that can only attack airborne targets.

====Anaconda/Snapper====

The hovercraft main battle tank. Both carry a medium-range plasma cannon. Neither can stand up to proper tanks or ships, but they're very good for quick attacks over small bodies of water.

====Wombat/Nixer====

A hovercraft with a vertically-launched artillery rocket. Very similar to the Merl/Diplomat, but with a shorter range, faster fire rate, and lower damage.

====Skimmer/Scrubber====

A fast-moving scout hovercraft with a short-range laser. Useful for spotting for larger, tougher hovercraft.

====Bear/Turtle====

Transport hovercraft that can carry other units over both water and land. Medium speed, but very tough.

==Seaplanes==

Aircraft that can be built from a floating factory, and can take off and land from the water. (Though this is currently broken.) These effectively form the tier 3 of aircraft.  While the ranks of seaplanes do not include units like Krows or Krogoths, they are far more cost effective, more powerful, generally nimbler, faster, and so on.  Seaplane factories can only be built on the water by Advanced Construction Submarines and Aircraft

===Common Lvl 1 Seaplanes===

====Seahawk/Hunter====

Recon seaplane. Quick and nimble but very weak. Totally unarmed, but carries both a sonar and radar. Very useful for spotting for naval forces. Carries flares to help protect it against guided missiles.

====Tornado/Voodoo====

Basic fighter seaplane. Similar to the Hawk/Vamp, but not stealthy and with a less powerful air-to-air missile. Although they will generally lose to a Hawk/Vamp in a head-to-head fight, they are far less expensive and faster to build.

====Albatross/Typhoon====

Basic naval attack seaplane, with an air-to-air guided missile launcher and a pair of powerful homing torpedo launchers. While it can protect itself against aircraft, it's not very good in a dogfight.

====Sabre/Cutlass====

Basic ground attack seaplane. About the same general power level as a Brawler/Rapier, but slightly more cost-effective, quick, and nimble. The Sabre has a fast-firing heavy laser, while the Cutlass has a slower-firing but more powerful riot cannon with a large area of effect.

====Tsunami/Maelstrom====

Seaplane equivalent of the Phoenix/Hurricane. Uses the same bombs, but lacks the air-to-air missile launcher, and not quite as maneuverable. Effective in the same roles, and also possibly effective against slower ships.

Back to [[Absolute Annihilation]]

[[Category:Mods]]</text>
      <sha1>ag2r23kojuphj4xkeb6k3lfnwr4jhu3</sha1>
    </revision>
  </page>
  <page>
    <title>Admin:Ports</title>
    <ns>0</ns>
    <id>3866</id>
    <revision>
      <id>31563</id>
      <parentid>31553</parentid>
      <timestamp>2021-04-23T21:33:30Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="572">Ports on springrts.com:

{| class=&quot;wikitable sortable&quot;
|-
! protocol !! port !! description
|-
| tcp ||    22 || ssh
|-
| tcp ||    25 || smtp
|-
| tcp ||    80 || http
|-
| tcp ||   443 || https
|-
| tcp ||  8448 || matrix federation
|-
| tcp ||  6667 || irc bridge
|-
| tcp ||  7000 || uberserver-dev
|-
| tcp ||  8200 || uberserver
|-
| udp ||  8201 || uberserver NAT hole punching service
|-
| tcp ||  9989 || buildbot master
|-
| tcp ||  9999 || springlobby buildbot master
|-
| tcp || 16667 || irc bridge
|-
| tcp || 64738 || mumble
|}



[[Category:Administration]]</text>
      <sha1>238lxrama1hesgn6qmk661dxi5e6fw3</sha1>
    </revision>
  </page>
  <page>
    <title>Admin:Rapid</title>
    <ns>0</ns>
    <id>3769</id>
    <revision>
      <id>31062</id>
      <parentid>31061</parentid>
      <timestamp>2019-07-27T08:00:47Z</timestamp>
      <contributor>
        <username>Gajop</username>
        <id>2804</id>
      </contributor>
      <comment>/* How to add a rapid repository */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="563">==How to add a rapid repository==

&lt;pre&gt;
cd /home/packages/git
git clone git://github.com/ZeroK-RTS/Zero-K.git zk
&lt;/pre&gt;
(git:// should be prefered as it uses less resources when its updated)

&lt;pre&gt;
vi forceupdate.sh
&lt;/pre&gt;

adjust the line &quot;for REPO in /home/packages/git/zk ;&quot; to the path which was added, run it:
&lt;pre&gt;
./forceupdate.sh
&lt;/pre&gt;

this should create the folder /home/packages/www/zk.

then repos.gz must be updated:
&lt;pre&gt;
cd /home/packages/www/repos.springrts.com
./update-repos.py
&lt;/pre&gt;

[[Category:Administration]]
[[Category:Download Systems]]</text>
      <sha1>3iyq62fcgxp7nhptxxk2nzor37w8o0e</sha1>
    </revision>
  </page>
  <page>
    <title>Admin:TheLounge</title>
    <ns>0</ns>
    <id>3772</id>
    <revision>
      <id>30709</id>
      <parentid>30708</parentid>
      <timestamp>2018-07-25T18:16:07Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="180">[https://springrts.com/phpbb/viewtopic.php?f=64&amp;p=548887 Webchat] (browser client implemented with &quot;the lounge&quot; for [[IrcBridge]]) was replaced by [[Matrix]]. 


[[Category:Lobby]]</text>
      <sha1>cqj1vteubcae8hw3iztzz45mibphlxm</sha1>
    </revision>
  </page>
  <page>
    <title>Admin:Uberserver</title>
    <ns>0</ns>
    <id>3770</id>
    <revision>
      <id>31153</id>
      <parentid>30234</parentid>
      <timestamp>2019-12-23T16:55:42Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="806">
= set spring version on the official server (info for spring server admins) =

with springlobby type this as admin user into the server window:
  SETLATESTSPRINGVERSION {{StableEngineVersion}}

to make it persistent, edit /home/lobby/uberserver/args.txt:
  --latestspringversion {{StableEngineVersion}}

= control the systemd service=

as user lobby:
 sudo /bin/systemctl status uberserver.service
 sudo /bin/systemctl start uberserver.service
 sudo /bin/systemctl stop uberserver.service
 sudo /bin/systemctl restart uberserver.service

as user lobbydev:
 sudo /bin/systemctl status uberserver-dev.service
 sudo /bin/systemctl start uberserver-dev.service
 sudo /bin/systemctl stop uberserver-dev.service
 sudo /bin/systemctl restart uberserver-dev.service

[[Category:Administration]]
[[Category:Lobby]]</text>
      <sha1>jtrut95ubhobkgxu115t4qpgywmyer8</sha1>
    </revision>
  </page>
  <page>
    <title>Advanced Strategy Discussion</title>
    <ns>0</ns>
    <id>1175</id>
    <revision>
      <id>12858</id>
      <parentid>12238</parentid>
      <timestamp>2007-09-02T01:58:22Z</timestamp>
      <contributor>
        <username>RgfCfc</username>
        <id>1563</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10926">== 2005.12.22 ==

[7:26:24 PM] Back from the game&lt;br&gt;
[7:26:30 PM] &lt;Charmides&gt; yay&lt;br&gt;
[7:26:36 PM] &lt;FoeOfTheBee[FD]&gt; I was worried about a comm rush&lt;br&gt;
[7:26:43 PM] &lt;FoeOfTheBee[FD]&gt; that was the reason for defenses&lt;br&gt;
[7:26:47 PM] &lt;IownU&gt; well...&lt;br&gt;
[7:26:50 PM] &lt;Charmides&gt; im usually aggressive.  but then they eventually stop&lt;br&gt;
              my front line at their base, kill it, and i got nothing left&lt;br&gt;
[7:26:51 PM] &lt;IownU&gt; that makes no sense&lt;br&gt;
[7:26:51 PM] &lt;FoeOfTheBee[FD]&gt; but maybe rockos would have been better&lt;br&gt;
[7:26:56 PM] &lt;IownU&gt; if you're afraid of a com rush&lt;br&gt;
[7:27:02 PM] &lt;IownU&gt; why build stationary defense&lt;br&gt;
[7:27:09 PM] &lt;FoeOfTheBee[FD]&gt; requires less micro&lt;br&gt;
[7:27:16 PM] &lt;IownU&gt; ah, so you're lazy&lt;br&gt;
[7:27:19 PM] &lt;FoeOfTheBee[FD]&gt; heh&lt;br&gt;
[7:27:23 PM] &lt;FoeOfTheBee[FD]&gt; no, I'm busy&lt;br&gt;
[7:27:32 PM] &lt;Charmides&gt; grow another hand&lt;br&gt;
[7:27:35 PM] &lt;Charmides&gt; its pretty useful&lt;br&gt;
[7:27:37 PM] &lt;IownU&gt; a move order doesn't take up much time&lt;br&gt;
[7:27:41 PM] &lt;FoeOfTheBee[FD]&gt; or maybe not as micro effecient as other players&lt;br&gt;
[7:27:59 PM] &lt;IownU&gt; you know how to spread units on a line, right?&lt;br&gt;
[7:28:06 PM] &lt;Charmides&gt; drag right mouse&lt;br&gt;
[7:28:09 PM] &lt;IownU&gt; yeah&lt;br&gt;
[7:28:18 PM] &lt;IownU&gt; just put them on one&lt;br&gt;
[7:28:24 PM] &lt;IownU&gt; and when you need to pull back&lt;br&gt;
[7:28:27 PM] &lt;IownU&gt; use that same order&lt;br&gt;
[7:28:32 PM] &lt;Charmides&gt; i saw you doin a lot of that with noize&lt;br&gt;
[7:28:34 PM] &lt;IownU&gt; so units won't walk in eachothers way&lt;br&gt;
[7:28:37 PM] &lt;IownU&gt; keep on firing&lt;br&gt;
[7:28:42 PM] &lt;IownU&gt; yup&lt;br&gt;
[7:28:43 PM] &lt;FoeOfTheBee[FD]&gt; I do that quita a bit too&lt;br&gt;
[7:28:49 PM] &lt;IownU&gt; so they're not in each others line of fire&lt;br&gt;
[7:28:58 PM] &lt;IownU&gt; when enemy units walk in&lt;br&gt;
[7:29:02 PM] &lt;FoeOfTheBee[FD]&gt; it is especially important with rockos and jethros&lt;br&gt;
[7:29:04 PM] &lt;IownU&gt; they're usually clustered&lt;br&gt;
[7:29:10 PM] &lt;IownU&gt; so less than 50% of them can actually fire&lt;br&gt;
[7:29:24 PM] &lt;IownU&gt; if you have 10 units spread out&lt;br&gt;
[7:29:30 PM] &lt;IownU&gt; and your opponent has 15 clustered&lt;br&gt;
[7:29:34 PM] &lt;IownU&gt; your 10 will win&lt;br&gt;
[7:29:40 PM] &lt;FoeOfTheBee[FD]&gt; that line order made rockos and jethros 200% more effective&lt;br&gt;
[7:29:49 PM] &lt;IownU&gt; as long as you have all 10 attack 1 enemy unit&lt;br&gt;
[7:30:18 PM] &lt;Charmides&gt; can you walk and focus fire at the same time?&lt;br&gt;
[7:30:42 PM] &lt;FoeOfTheBee[FD]&gt; maybe I should focus more&lt;br&gt;
[7:30:49 PM] &lt;FoeOfTheBee[FD]&gt; I tend to do stuff all over the map&lt;br&gt;
[7:30:54 PM] &lt;IownU&gt; you're better off killing an enemy unit every 2 seconds,&lt;br&gt;
              than have all of them fire at different units for 20-30 seconds&lt;br&gt;
[7:31:11 PM] &lt;IownU&gt; i don't think there's a simple command for that Charmides&lt;br&gt;
[7:31:36 PM] &lt;FoeOfTheBee[FD]&gt; what I need to do is get more complex in my build order&lt;br&gt;
[7:31:42 PM] &lt;FoeOfTheBee[FD]&gt; longer chains&lt;br&gt;
[7:31:47 PM] &lt;FoeOfTheBee[FD]&gt; so I can micro units more&lt;br&gt;
[7:31:54 PM] &lt;Charmides&gt; i need to stop losing&lt;br&gt;
[7:31:56 PM] &lt;Charmides&gt; im not really sure how though&lt;br&gt;
[7:32:02 PM] &lt;IownU&gt; i usually spend 50% of my time on giving cons/plants&lt;br&gt;
             orders&lt;br&gt;
[7:32:03 PM] &lt;FoeOfTheBee[FD]&gt; I win a lot&lt;br&gt;
[7:32:06 PM] &lt;Charmides&gt; i dont&lt;br&gt;
[7:32:07 PM] &lt;Charmides&gt; lol&lt;br&gt;
[7:32:15 PM] &lt;FoeOfTheBee[FD]&gt; I spen onver 50% for sure&lt;br&gt;
[7:32:21 PM] &lt;Charmides&gt; i get too easily distracted just being harassed at&lt;br&gt;
             the beginning&lt;br&gt;
[7:32:24 PM] &lt;IownU&gt; and once i have a units selected i give it 20  orders&lt;br&gt;
             minimum&lt;br&gt;
[7:32:24 PM] &lt;FoeOfTheBee[FD]&gt; but you can never win too much&lt;br&gt;
[7:32:31 PM] &lt;IownU&gt; especiall on maps like comet catcher&lt;br&gt;
[7:32:41 PM] &lt;FoeOfTheBee[FD]&gt; 20 , wow&lt;br&gt;
[7:32:44 PM] &lt;Charmides&gt; like what units&lt;br&gt;
[7:32:46 PM] &lt;FoeOfTheBee[FD]&gt; I will have to try that&lt;br&gt;
[7:32:52 PM] &lt;Charmides&gt; how can you give like your attacking force 20 &lt;br&gt;
             commands&lt;br&gt;
[7:32:56 PM] &lt;IownU&gt; i just have 3-4 cons build rows of solars&lt;br&gt;
[7:33:01 PM] &lt;IownU&gt; you can't&lt;br&gt;
[7:33:05 PM] &lt;Charmides&gt; yeah but a row of solar is just 1 command&lt;br&gt;
[7:33:14 PM] &lt;Charmides&gt; i dont see where the other 19 are coming from&lt;br&gt;
[7:33:16 PM] &lt;IownU&gt; 1 command, 20 orders&lt;br&gt;
[7:33:20 PM] &lt;FoeOfTheBee[FD]&gt; cons need long order chains&lt;br&gt;
[7:33:36 PM] &lt;IownU&gt; yeah, but you also have to watch them, in case you need&lt;br&gt;
             to change the orders&lt;br&gt;
[7:33:39 PM] &lt;Charmides&gt; i can understand teh con veh orders part&lt;br&gt;
[7:33:41 PM] &lt;FoeOfTheBee[FD]&gt; idle cons = inferior economy in 5 minutes&lt;br&gt;
[7:33:43 PM] &lt;IownU&gt; no point in suicidal cons&lt;br&gt;
[7:34:00 PM] &lt;IownU&gt; u saw that game vs noize&lt;br&gt;
[7:34:00 PM] &lt;Charmides&gt; i hate 1v1 on like comet catcher though&lt;br&gt;
[7:34:06 PM] &lt;Charmides&gt; way too many weak points at all times&lt;br&gt;
[7:34:06 PM] &lt;FoeOfTheBee[FD]&gt; also, metal and energy tores should be close to 0 if&lt;br&gt;
             possible&lt;br&gt;
[7:34:09 PM] &lt;FoeOfTheBee[FD]&gt; stores&lt;br&gt;
[7:34:16 PM] &lt;Charmides&gt; i get too distracted and then they run in lightning&lt;br&gt;
             tanks at another point and i lose my base&lt;br&gt;
[7:34:20 PM] &lt;IownU&gt; which was a fine demonstration of all the orders i gave&lt;br&gt;
             my units&lt;br&gt;
[7:34:43 PM] &lt;IownU&gt; yup, metal in storage is no good&lt;br&gt;
[7:34:47 PM] &lt;IownU&gt; put it to work&lt;br&gt;
[7:35:08 PM] &lt;Charmides&gt; bah&lt;br&gt;
[7:35:16 PM] &lt;IownU&gt; on comet, i usually have 10-15 cons in the 1st 12&lt;br&gt;
             minutes at work&lt;br&gt;
[7:35:21 PM] &lt;IownU&gt; increasing during the game&lt;br&gt;
[7:35:23 PM] &lt;Charmides&gt; when i played 1v1 on comet i kept getting tanks &lt;br&gt;
             running rampant behidn my lines and i couldnt stop them&lt;br&gt;
[7:35:31 PM] &lt;FoeOfTheBee[FD]&gt; the best training for spring is an econ degree&lt;br&gt;
[7:35:48 PM] &lt;IownU&gt; also, you can build stuff smart&lt;br&gt;
[7:35:51 PM] &lt;FoeOfTheBee[FD]&gt; civ and ta are excellent preparation for college level&lt;br&gt;
             economics&lt;br&gt;
[7:35:53 PM] &lt;IownU&gt; mexes are weak&lt;br&gt;
[7:35:57 PM] &lt;IownU&gt; shield them with solars&lt;br&gt;
[7:36:33 PM] &lt;IownU&gt; or build a row of solars as if they were dt&lt;br&gt;
[7:36:41 PM] &lt;Charmides&gt; and i get harassed too easily at beginning.  i was&lt;br&gt;
             suprised how little of that noize did during your game&lt;br&gt;
[7:36:42 PM] &lt;IownU&gt; so they shield a flank of your base&lt;br&gt;
[7:36:50 PM] &lt;Charmides&gt; the other warc kid i played kept sending weasles all&lt;br&gt;
             over the place&lt;br&gt;
[7:36:52 PM] &lt;FoeOfTheBee[FD]&gt; that works great until the big level 2 tanks run 'em over&lt;br&gt;
[7:36:55 PM] &lt;IownU&gt; so you can focus stationary defense on 1 side, and mobile&lt;br&gt;
             on the other&lt;br&gt;
[7:37:16 PM] &lt;IownU&gt; i'm talking about the 1st 20 minutes of the battle&lt;br&gt;
[7:37:19 PM] &lt;FoeOfTheBee[FD]&gt; yeah&lt;br&gt;
[7:37:21 PM] &lt;IownU&gt; after that all bets are off&lt;br&gt;
[7:37:22 PM] &lt;FoeOfTheBee[FD]&gt; I do the same&lt;br&gt;
[7:37:22 PM] &lt;IownU&gt; :P&lt;br&gt;
[7:37:41 PM] &lt;Charmides&gt; after that is where i get owned&lt;br&gt;
[7:37:45 PM] &lt;IownU&gt; on MH in example, i build mexes along the edge or a wall,&lt;br&gt;
             and a row of solars in front&lt;br&gt;
[7:37:49 PM] &lt;IownU&gt; shielding my mexes&lt;br&gt;
[7:38:07 PM] &lt;IownU&gt; so in case a raid is succesfull, i still have my metal&lt;br&gt;
[7:38:11 PM] &lt;FoeOfTheBee[FD]&gt; these things seem basic, but many 100 hr players do not so&lt;br&gt;
             them&lt;br&gt;
[7:38:13 PM] &lt;Charmides&gt; mh?&lt;br&gt;
[7:38:16 PM] &lt;Charmides&gt; oh&lt;br&gt;
[7:38:17 PM] &lt;FoeOfTheBee[FD]&gt; metal heck&lt;br&gt;
[7:38:19 PM] &lt;Charmides&gt; i dont play metal maps anymore&lt;br&gt;
[7:38:21 PM] &lt;Charmides&gt; too annoying&lt;br&gt;
[7:38:24 PM] &lt;IownU&gt; allowing me to rebuild in seconds&lt;br&gt;
[7:38:25 PM] &lt;Charmides&gt; i get bored when games lag&lt;br&gt;
[7:38:30 PM] &lt;IownU&gt; lag sux&lt;br&gt;
[7:38:46 PM] &lt;IownU&gt; but the fault most people make is that they stop building&lt;br&gt;
             economy at a certain point&lt;br&gt;
[7:38:49 PM] &lt;Charmides&gt; and im back home right now for winter break and my&lt;br&gt;
             parents only have dialup back here :(&lt;br&gt;
[7:38:55 PM] &lt;IownU&gt; i NEVER stop increasing my reso&lt;br&gt;
[7:39:04 PM] &lt;IownU&gt; lol&lt;br&gt;
[7:39:04 PM] &lt;FoeOfTheBee[FD]&gt; you and folke&lt;br&gt;
[7:39:05 PM] &lt;IownU&gt; that sux&lt;br&gt;
[7:39:08 PM] &lt;FoeOfTheBee[FD]&gt; and SJ&lt;br&gt;
[7:39:12 PM] &lt;Charmides&gt; well i tend to stop building economy because im too&lt;br&gt;
             busy pushing the enemy line and want all my resources for that&lt;br&gt;
[7:39:28 PM] &lt;Charmides&gt; and of course i fail&lt;br&gt;
[7:39:30 PM] &lt;Charmides&gt; bah&lt;br&gt;
[7:39:30 PM] &lt;Charmides&gt; lol&lt;br&gt;
[7:39:40 PM] &lt;IownU&gt; an adv kbot   3 necro's tend to build fusion damn fast...&lt;br&gt;
[7:39:44 PM] &lt;FoeOfTheBee[FD]&gt; that works only if your opponent does the same&lt;br&gt;
[7:39:52 PM] &lt;Charmides&gt; does hosting replays work now? I could just show you&lt;br&gt;
             my stupid replay against min3mat&lt;br&gt;
[7:39:58 PM] &lt;Charmides&gt; instead of renaming all myy problems on it&lt;br&gt;
[7:40:04 PM] &lt;FoeOfTheBee[FD]&gt; if you opponent works on economy and you don't, in 5 min he &lt;br&gt;
             will walk through you&lt;br&gt;
[7:40:26 PM] &lt;FoeOfTheBee[FD]&gt; or maybe 10&lt;br&gt;
[7:40:34 PM] &lt;IownU&gt; if you can't stop his attack, yes&lt;br&gt;
[7:40:41 PM] &lt;IownU&gt; if you can, you'll push him back real fast&lt;br&gt;
[7:40:46 PM] &lt;FoeOfTheBee[FD]&gt; I tend to play smaller maps&lt;br&gt;
[7:40:51 PM] &lt;Charmides&gt; watch my replay and tell me what my problems are? lol&lt;br&gt;
[7:40:59 PM] &lt;FoeOfTheBee[FD]&gt; so my long game econ skills are weak&lt;br&gt;
[7:41:01 PM] &lt;IownU&gt; HLT's tend to rip most lvl 1 stuff to piece real fast&lt;br&gt;
[7:41:23 PM] &lt;Charmides&gt; ill take that as a no :(&lt;br&gt;
[7:41:34 PM] &lt;IownU&gt; does everyone has to have the replay for playback, or&lt;br&gt;
             only the host?&lt;br&gt;
[7:41:39 PM] &lt;FoeOfTheBee[FD]&gt; I should post this conversation on the wiki...&lt;br&gt;
[7:41:43 PM] &lt;Charmides&gt; i think only host&lt;br&gt;
[7:41:47 PM] &lt;Charmides&gt; i think i just transfer it to you somehows&lt;br&gt;
[7:41:48 PM] &lt;FoeOfTheBee[FD]&gt; if y'al have no objections&lt;br&gt;
[7:41:51 PM] &lt;Charmides&gt; uh no&lt;br&gt;
[7:41:54 PM] &lt;IownU&gt; i don't&lt;br&gt;
[7:41:55 PM] &lt;Charmides&gt; unless you edit out everything i said&lt;br&gt;
[7:41:56 PM] &lt;Charmides&gt; lol&lt;br&gt;
[7:42:00 PM] &lt;Charmides&gt; i dont want to be on wiki&lt;br&gt;
[7:42:09 PM] &lt;FoeOfTheBee[FD]&gt; if I remove your name?&lt;br&gt;
[7:42:22 PM] &lt;Charmides&gt; i spose.  RD was the one saying anything important&lt;br&gt;
             anyways&lt;br&gt;
[7:42:27 PM] &lt;IownU&gt; there's only 1 rule in TA&lt;br&gt;
[7:42:28 PM] &lt;Charmides&gt; just delete me from all of it  :)&lt;br&gt;
[7:42:37 PM] &lt;FoeOfTheBee[FD]&gt; the questions are important for context&lt;br&gt;
[7:42:37 PM] &lt;IownU&gt; DON&quot;T STOP BUILDING&lt;br&gt;
[7:42:44 PM] &lt;Charmides&gt; gah dammit foe&lt;br&gt;
[7:42:45 PM] &lt;Charmides&gt; lol&lt;br&gt;
[7:42:47 PM] &lt;Charmides&gt; fine whatever&lt;br&gt;
[7:42:51 PM] &lt;IownU&gt; and for that, you need as many cons as you can afford&lt;br&gt;
[7:42:57 PM] &lt;FoeOfTheBee[FD]&gt; I'l replace your name with something else&lt;br&gt;
[7:43:02 PM] &lt;Charmides&gt; yay&lt;br&gt;
[7:43:03 PM] &lt;IownU&gt; nerd1 :P&lt;br&gt;
[7:43:07 PM] &lt;FoeOfTheBee[FD]&gt; heh&lt;br&gt;
[7:43:11 PM] &lt;Charmides&gt; :(&lt;br&gt;
[7:43:12 PM] &lt;Charmides&gt; lol&lt;br&gt;
&lt;br&gt;



''' [[Strategy_and_Tactics|&lt;- Back to Strategy and Tactics page]]'''

[[Category:Strategy]]</text>
      <sha1>37syagglzgr1yjl66qr2xqj9umuntp3</sha1>
    </revision>
  </page>
  <page>
    <title>Advertisement</title>
    <ns>0</ns>
    <id>3529</id>
    <revision>
      <id>27050</id>
      <parentid>27035</parentid>
      <timestamp>2013-05-05T19:46:12Z</timestamp>
      <contributor>
        <username>Malric</username>
        <id>539</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="807">=Overview=
This page lists the efforts of advertising Spring RTS and collects the resources used for such purposes, when possible. Multiple objectives are targeted, the main ones being to attract more developers and  players for the available games. 

=Advertisement campaigns=
 * 2013 April Delft, Netherlands - Firestorm_ posted A4 posters around TU Delft bulletin boards.

=Resources=
Please upload only finished (in your opinion) material, together with a short description. Do not upload/link here work in progress/ideas.
 * [[http://www.springfiles.com/spring/other/poster-advertising-spring-made-firestorm A4 poster by Firestorm, made in GIMP]]
 * [[http://springfiles.com/spring/other/poster-advertising-spring-made-malric A1 poster by Malric, made in LibreOffice Impress/GIMP]]

[[Category:Spring]]</text>
      <sha1>hexwxgn7q6sdhtxz9kszqbt596fwo8k</sha1>
    </revision>
  </page>
  <page>
    <title>Aggressive Vs. Passive Strategy</title>
    <ns>0</ns>
    <id>1669</id>
    <revision>
      <id>12962</id>
      <parentid>11484</parentid>
      <timestamp>2007-09-26T09:55:34Z</timestamp>
      <contributor>
        <username>Vayu</username>
        <id>2305</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="580">The mark of a good RTS is a serious requirement for active, aggressive strategy and tactics in counterpoint to some passive allowances to enable one to focus briefly without losing control. Most Mods on the Spring engine demonstrate this, much to the benefit of gameplay. However, individual styles of play tend to gravitate to one or the other, so it would be best to delineate between the two and offer tips for more effective gameplay either side of the balance.

&lt;To Be Continued?&gt;



''' [[Strategy_and_Tactics|&lt;- Back to Strategy and Tactics page]]'''

[[Category:Strategy]]</text>
      <sha1>or9vv0jucce2fe6gq8wk1sz51zjnpt1</sha1>
    </revision>
  </page>
  <page>
    <title>Air Domination</title>
    <ns>0</ns>
    <id>1786</id>
    <revision>
      <id>24414</id>
      <parentid>15162</parentid>
      <timestamp>2012-05-14T02:31:04Z</timestamp>
      <contributor>
        <username>Smoth</username>
        <id>127</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1041">Air Domination is an tactic best employed on maps with little land or large areas on which land units cannot act. It's simple - build an attack group of aircraft suitable for taking out your targets, and support with units that minimize the weakness of air.

Alternatively, build up a tremendous force of the cheapest effective air units for a task and mass your targets, using shock and awe to augment your activities.

'''Connections'''

This tactic is viable in most games with advanced air units and independent air technology, such as AA or XTA. The relative weakness of air units in E&amp;E and may make this a poor tactical choice despite the access to a variety of aircraft.


'''Notes'''

Do not put hundreds of flying units in patrol mode, you'll cause the game to run very slow for everyone

Some mods have aircraft units that can overlap.  Try to spread out your aircraft so they do not &quot;chain explode&quot;, as they are very delicate machines.


''' [[Strategy_and_Tactics|&lt;- Back to Strategy and Tactics page]]'''

[[category:Strategy]]</text>
      <sha1>14zablj6ik8tuu1h5t4xaz4etdwl06z</sha1>
    </revision>
  </page>
  <page>
    <title>Alantai Firestar</title>
    <ns>0</ns>
    <id>1774</id>
    <redirect title="User:Alantai Firestar" />
    <revision>
      <id>11588</id>
      <timestamp>2006-09-15T15:12:31Z</timestamp>
      <contributor>
        <username>FoeOfTheBee</username>
        <id>20</id>
      </contributor>
      <comment>Alantai Firestar moved to User:Alantai Firestar</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="36">#REDIRECT [[User:Alantai Firestar]]
</text>
      <sha1>er6mf0xtbwew3ubckjkct4dbn28658y</sha1>
    </revision>
  </page>
  <page>
    <title>Altaric's Lobby Client</title>
    <ns>0</ns>
    <id>1409</id>
    <revision>
      <id>18763</id>
      <parentid>13902</parentid>
      <timestamp>2010-03-13T13:13:10Z</timestamp>
      <contributor>
        <username>Koshi</username>
        <id>2371</id>
      </contributor>
      <comment>made historical</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="17658">{{Historical}}
Altaric's Lobby Client is an alternative lobby client developed by Altaric. Its features are added on top of the basic client, rather than as a complete reimplementation, so you can (for the most part) use it just like the basic client. Most of the additional features are contained in &quot;AltaMod&quot; tabs.

The client's nicest feature is a system of macros that makes hosting battles much easier. You can configure administration permissions for these macros for individual users, and even use them to run automated dedicated hosts.

The extra options are found in three places: the Options pane (accessible by clicking the Options button from the main window), the Battle Screen, and the Map Picker.

==Installation==

Download it from: [http://membres.lycos.fr/altaric2/TASpring_modified_client.zip here].

Place all three files from the zip file to your TASpring directory. Then run the modified lobby client program. Creating a shortcut to it on your desktop or in your start menu would probably be a good idea.

==AltaMod Options==

These options are divided into tabs, for easy reference.

===General===

There's only one option here: &quot;Open Links in Default Browser&quot;. Turning it on means that links will be opened in your system browser - IE, Firefox, Opera, whatever. Turning it off means that Altaric's Lobby Client will use its own internal web browser to open links.

===Sounds===

This panel controls AltaMod's sound effects. The right column toggles on and off sound effects for specific events. All are self-explanatory. 

===Chat Alert===

This panel lets you configure &quot;chat alerts&quot;, basic triggers that respond to chat events. The large text field is where you enter the text you want to search for. Each line specifies a single thing to search for. The &quot;Activate&quot; box turns chat alerts on and off.

The four boxes immediately below the Activate box configure the matching process. &quot;Search in Names&quot; allows you to specify whether or not the name of the user speaking should be searched. This lets you handle messages from specific users (or even users in specific clans) specially. Ring, Highlight, and Log specify the response to a matching chat alert. Ring plays an audio effect, Highlight recolors the text (using the color configured by clicking on the &quot;color&quot; box), and &quot;Log&quot; outputs the line to a file.

The three lower options allow you to configure where chat alerts are watched for. &quot;Channels&quot; watches for chat alerts in global chat channels, like #main. &quot;Privates&quot; watches for chat alerts in private messages. &quot;Battles&quot; watches for chat alerts in battle chat.

===Banlist===

A feature I'm sure we've all been waiting for, Banlist allows you to prevent disruptive players from joining your games. Tired of people who keep rejoining and spamming messages when you're trying to organize a game? Now you can just ban them from your games!

The &quot;Activate Ban List&quot; checkbox lets you toggle your banlist on and off. If it's off, it simply won't be enforced.

Each line in the textbox should be the name of a player to ban. Note that names are case-sensitive, so make sure you get the spelling right! The easiest way to do this is to use the &quot;Ban&quot; button in the Battle [[#Player Control|Player Control]] view. When a banned player tries to join one of your games, they'll get a message telling them that they're banned and they'll be immediately kicked.

===Admin===

This is how you configure privileges for the ALC Macros. Each line in the textbox here should be a player name followed by a : followed by a number. That number is the maximum &quot;rights level&quot; that player has. For example, if I have:

:&lt;nowiki&gt;*&lt;/nowiki&gt;:0
:Altaric:2
:egarwaen:5

In my admin tab, Altaric can use any macro that requires rights 2 or less, I can use anything that requires rights 5 or less, and anyone can use any rights 0 macro.

One of the first things you'll want to do before hosting a battle is add yourself to the admin list with a high rights value. This will let you use any macros.

===Friends and Foes===

The Friends and Foes tabs allow you to build a list of players you consider to be &quot;Friends&quot; or &quot;Foes&quot;. Each tab has a text field, which should hold a list of players, one per line. Note that case ''does'' matter here, so type carefully. Players you consider to be friends will be moved to the top of the client players list, and players you consider to be foes will be moved to the bottom.

===Rights===

The Rights tab lets you configure the rights level associated with a particular macro. Users will then have to have at least this level of rights to execute this particular macro.

For a description of what each macro command does, please see [[#Macro Commands|Macro Commands]].

==AltaMod Battle==

Like the Option dialog contents, these commands are divided into tabs, for easy reference.

===Player Control===

The same as the Player Control panel for the default lobby client, except it adds a ban button. This button adds the selected player to the banlist and immediately expels them from the current game.

===Team Balancer===

This tab's great for those that prefer games with approximately balanced teams. It provides you with a list of teams, and the number of players and total rank of each. While this won't guarantee a fair game, it can be used to prevent the teams from being fantastically stacked.

===Rules===

This tab lets you define some rules for the game. The &quot;MOTD&quot; button copies the MOTD from the next tab into the rules. The &quot;Generate&quot; button automatically generates a nice description of the rules based on the game parameters, including things like mod, map, wind/tidal energy levels, map size, and victory condition. The &quot;Post&quot; button is currently broken, but once it's fixed, it'll echo the rules to the in-game chat.

The .NoCost button lets you turn on the NoCost cheat from the start.

The min/max speed panel lets you set the minimum and maximum in-game speed. Any player can change the speed to anything between these two values. &quot;Active&quot; is the same as the old &quot;Lock Speed&quot; option, and prevents the speed from being set to anything but 1. &quot;Script Lock&quot; allows you to set a minimum speed and maximum speed to anything you want.

===MOTD===

This tab lets you set a &quot;Message of the Day&quot; for your battle, which can easily be pasted into the [[#Rules|Rules]] field using the MOTD button. The text field up at the top lets you specify a message to be sent to players when they join. You can choose to either send it in the in-battle chat or as a PM. A %n in the message will get expanded to the player's name, and a %r to their [[#Rights|Rights]] level, as set in the [[#Admin|Admin]] tab.

===Host Filters===

This tab lets you set some filters to control who can play in the game. &quot;Min CPU&quot; is the minimum CPU speed, measured in MHz, that you want to allow into your game. Note that this is 1000 times the value given in the player list. &quot;Min Rank&quot; is a value from 1-5, and is the minimum player rank that will be permitted into your game. &quot;bot listens to host only&quot; makes it so that only the actual host can use [[#Macro Commands|Macro Commands]].

===Other===

This tab gives you a number of other miscellaneous information and options. The players in game list provides you with a list of the players currently in-game in an active game, which is possibly handy for a dedicated host. &quot;Relay Chat&quot; relays any chat from the Battle window into the in-game chat, but is currently broken.

==Map Picker==

A much better map selection interface than the default one. This provides you with more information about your maps at a glance, including:

* A properly-proportioned minimap.
* The map's name, description, size, and number of starting positions.
* The map's gameplay parameters: gravity, tidal/wind power level, and metal level/extractor radius.

Note that you need to make the cache (using the &quot;Make Cache&quot; button) before you can use the map picker, and have to manually update the cache (using the &quot;Update Cache&quot; button) when you add or delete maps. When you first open the picker, you need to use the &quot;Load Cache&quot; button to load the map data.

The Map Cache is also used for the main battle screen. If the cache is valid, the lobby client will load the minimap from there instead of decompressing the map every time. This is significantly faster than the old way of doing things.

&quot;Make Cache&quot; completely erases and rebuilds the cache folder. This is necessary if you delete a map.

==/ Commands==

These commands can be used in any chat window, though you won't always be allowed to execute them. Many are the same as those used by the official client. These are mostly documented in the &quot;Page 3&quot; tab under the Help Button.

===/me===

Performs an &quot;action&quot; instead of sending a chat message. Also found in the official client.

Example Usage: /me does a dance of shame.

===/join===

Joins a chat channel. Also found in the official client.

Example Usage: /join #noob - Join the channel designated for newbie questions.

===/part===

Closes the current channel or private chat window. Also found in the official client.

===/channels===

Displays a list of open channels. Also found in the official client.

===/rename===

Changes the username of an account. Also found in the official client.

Example Usage: /rename Batman - Changes to my secret identity for crime-fighting purposes.

===/ring===

This can only be used by the host of a battle. It's used to &quot;ring&quot; players to let them know, for example, that the battle's full and they should ready up so it can start. Also found in the official client.

Example Usage: /ring altaric - Play a sound on Altaric's computer so he knows to come back and join in the fun.

===/ping===

Tells you the lag between you and the ''lobby server''. This will ''not'' tell you the lag between you and the host of a game! Also found in the official client.

===/msg===

Send a private message to a user. You can also double-click on their name in a user list to do this. Also found in the official client.

Example Usage: /msg Altaric Nice client, man! - Send Altaric a message of congratulation for all his hard work.

===/ignore===

Stop receiving messages from a player. Prevents them from PMing you, and prevents you from seeing their text in chat channels. I believe these only last for one session, so they'll go away once you log out.

Example Usage: /ignore SomeLamer - Stop hearing anything SomeLamer says.

===/befriend===

Adds someone to your [[#Friends and Foes|Friends]] list.

Example Usage: /befriend Altaric - Add Altaric to your friends list.

==Macro Commands==

These commands can be used in the Battle Chat to control the 'bot' that AltaClient runs.

===!help===

PMs you the contents of help.txt. This file must be located in the same directory as the Lobby Client program.

===!helpall===

Prints the contents of help.txt to the Battle Chat. Like !help, this needs the file to be in the same directory as the Lobby Client program.

===!metal===

Sets the starting metal level for the game. Takes one parameter, the level of metal.

Example Usage: !metal 1000 - Sets the starting metal level to 1000, a reasonable default for most mods.

===!energy===

Sets the starting energy level for the game. Takes one parameter, the level of energy.

Example Usage: !energy 1000 - Sets the starting energy level to 1000, a reasonable default for most mods.

===!units===

Sets the maximum number of units per player. Takes one parameter, the maximum number of units.

Example Usage: !units 500 - Sets the maximum number of units per player to 500, a reasonable default for most mods.

===!limit===

Can be used to limit D-Gun or Metal Maker usage.

!limit dgun - Toggles &quot;Limit D-Gun&quot; on or off.

!limit mm - Toggles &quot;Diminishing Metal Maker Returns&quot; on or off.

===!gameend===

Toggles whether or not a player is eliminated when their Commander dies. Takes one parameter - 0 for &quot;Commander Dies, Game Continues&quot; or 1 for &quot;Commander Dies, Game Ends&quot;.

===!map===

Sets the map for the game. Takes one parameter, the map name. This should be as the map's displayed in !listmaps.

Example Usage: !map Green Comet Basic - Sets the server to use the map Green Comet Basic.

===!rect===

Draw start boxes on the map. There are two ways to use this command:

!rect reset - Erase all start boxes from the map.

!rect x1 y1 x2 y2 - Draw a start box from (x1, y1) to (x2, y2)

Most of the time, it's better to use [[#!corner|!corner]] or [[#!split|!split]].

===!position===

Sets whether players are assigned to fixed starting locations, random starting locations, or can choose their starting location within a start box.

!position 0 or !position fixed - Fixed starting locations.

!position 1 or !position random - Random starting locations.

!position 2 or !position choose - Choose starting location.

Using [[#!split|!split]], [[#!corner|!corner]], or [[#!rect|!rect]] automatically sets the game to &quot;Choose starting location&quot;. &quot;[[#!rect|!rect]] reset&quot; automatically sets the game to &quot;Fixed starting locations&quot;.

===!split===

Splits the map into three segments: a start box for team 1, an unoccupied middle area, and a start box for team 2. This is the most useful start option for most maps and player arrangements, as you'll generally want to start with a team of players on one side of the map facing off against a team of players on the other side of the map.

!split v p - Creates vertical (up-and-down) start boxes that extend p% of the way across the map. So !split v 10 would create two start boxes, at the east and west ends of the map, each stretching 10% of the way across the map. This is for East VS West maps.

!split h p - Exactly the same as above, but splits horizontally rather than vertically. This is for North VS South maps.

===!corner===

Creates four square start boxes, one in each corner. Their width and height are specified as a single argument.

Example Usage: !corner 15 - Each of the four start boxes will be 15% of the map wide and 15% of the map tall.

===!start===

Starts the game. All players must have readied up before this can be used!

===!force===

Forces the game to start. This is exactly the same as the host hitting ctrl-enter in-game. Note that you'll need to alt-tab to use this, and Spring currently has a bad habit of crashing when you alt-tab, so it's not very useful right now.

===!kick===

Kick a player from the game. Takes one argument, the name of the player to kick. Note that kicking the host of the game is impossible.

Example Usage: !kick egarwaen - Kicks me from a game.

===!ban===

Kick a player from a game and ban them, adding them to the server's ban list. Note that banning the host of the game is impossible.

Example Usage: !ban egarwaen - Bans me from a game. Not sure why you'd want to.

===!closebattle===

Closes the battle. Note that if this is used on a dedicated server, the owner of the server will need to manually re-open the battle.

===!exit===

Ends the game. This makes the host exit the game.

===!changeright===

Changes the rights needed to use a given command. Takes the command name and the new rights level. This effectively modifies the contents of the [[#Rights|Rights]] tab. Be careful when using changeright on changeright, as you can render yourself unable to make further changes without the intervention of the host.

Example Usage: !changeright map 17 - You now require a rights level of 17 to use the map command.

===!welcome===

Sets the message displayed to players when they join the battle. This is the same thing that you can set in the [[#MOTD|MOTD]] tab.

Example Usage: !welcome - Clears the welcome message.
Example Usage: !welcome Hi, %n - Prints &quot;Hi, egarwaen&quot; when I join the game, or &quot;Hi, Altaric&quot; when Altaric joins.

===!welcometype===

Sets the type of the welcome message to PM or chat. Using this command will toggle the welcome type. So if it's set to Chat, !welcometype will set it to PM, and if it's set to PM, !welcometype will set it to Chat.

===!mincpu===

Sets the minimum CPU speed, in MHz, to allow in the game. Note that this is 1000 times the speed shown in the player list.

Example Usage: !mincpu 2210 - Don't allow anyone with a CPU less than 2.21 GHz into the game.

===!minrank===

Sets the minimum rank of player to allow in the game.

Example Usage: !minrank 2 - Don't allow anyone below rank 2 into the game.

===!listmaps===

Prints a list of maps available on the server. To avoid spamming everyone in a battle, this list gets PMed to you, so check your main window after typing this command.

===!lockspeed===

Sets the locked game speed. Can be used in one of several ways:

!lockspeed n - locks the game at speed n.

!lockspeed min max - locks the game between the given minimum and maximum speeds.

Using lockspeed will toggle whether or not the game speed is locked.

===!rights===

PMs you the contents of the [[#Admin|Admin]] Tab.

===!cmdrights===

PMs you the contents of the [[#Rights|Rights]] Tab.

===!ghosted===

Toggles the &quot;Ghosted Buildings&quot; setting. If this is on, once one of your units has seen an enemy structure, that structure will be permanently marked on your map.

===!ring===

Lets you ring a player. This works the same way as the [[#/ring|/ring]] command, but it can be used by people other than the host if they have sufficient rights.

===!ally===

Forcibly changes the alliance of a player. Use is !ally name ally. Note that the name is case-sensitive!

Example Usage: !ally egarwaen 3 - Force me on to team 3.

===!gameinfo===

Displays the amount of time since the game began. May eventually display more information. Only usable in the lobby of an active game.</text>
      <sha1>cm6tljg57o5xrmnlnappk3jr3j3ei3m</sha1>
    </revision>
  </page>
  <page>
    <title>Animation-CobAnimation</title>
    <ns>0</ns>
    <id>2517</id>
    <revision>
      <id>26797</id>
      <parentid>22117</parentid>
      <timestamp>2013-03-21T10:48:05Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>1cat</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5529">==Pieces==

Each unit has a root piece and a tree of other pieces attached to the root piece. At the top of each file you'll need to put the following line:

 piece [names of pieces of the model separated by commas];

As usual, capitalization does not matter; neither does the order of the pieces. You do not need to name every piece that the model actually has, although you should do so, and you cannot do anything to a piece that you have not named. If you try to do something to a piece that doesn't exist, Spring will throw an error. Generally it will not crash but you'll probably get lots of chat spam, so avoid this.

Every piece starts in the position as it appears in any modeling program, such as [[upspring]]. This is defined to be zero position and zero rotation.

Pieces are really numbers, although Scriptor usually throws a fit if you try to use them as numbers (it will not accept a number in places where it expects a piece name, although for functions that involve a piecenum you can use the piece's number instead of the piece name if you so desire). The first piece you list is 0, and it counts from there.

==Linear Units==

Everything linear ''really'' happens in a unit I'll call Spring distance (sd). This is a tiny distance--there are 2&lt;sup&gt;16&lt;/sup&gt; = 65536 sd in an elmo, which is the unit that is most commonly used. For example, weapon ranges are specified in elmos. Fortunately, Scriptor can automatically convert elmos to sd: just put the number of elmos you want in brackets ([]). Sometimes you'll see scripts that use 2.5 * 2&lt;sup&gt;16&lt;/sup&gt; = 163840 instead. I recommend not doing this since it makes conversion more difficult.

==Angular Units==

Likewise, everything angular ''really'' happens in a unit I'll call Spring angle (sa). There are 2&lt;sup&gt;16&lt;/sup&gt; sa in a full circle. Generally you'll be working in degrees. There are 182 and 2/45 sa in a degree. Again, Scriptor can automatically convert from degrees to sa; just put the number of degrees you want in angles (&lt;&gt;).

==Axes==

All COB animation statements specify an axis. There are three axes, &quot;x-axis&quot;, &quot;y-axis&quot;, and &quot;z-axis&quot;. Positive x is to the unit's right (the left if you are looking at the unit from the front). Positive y is to the unit's top. Positive z is to the unit's front.

The position and rotation of each piece defines the coordinate system for all of its child pieces. So, if you move or rotate a piece, all of its child pieces will move and rotate with it.

Rotations around x-axis and z-axis are left-handed and rotations around the y-axis is right-handed. To comprehend this more easily, positive angles are shown graphically in the following figure:

&lt;center&gt;
[[Image:Cob_Rotation_System.jpg]]
&lt;/center&gt;

==move==

 move [piece] to [axis] [distance] now;

This moves the piece immediately. The piece will be in its new position along the axis before the next statement is executed.

 move [piece] to [axis] [distance] speed [speed];

This moves the piece at some speed until it reaches its destination, or the piece is told to move to a different distance along the same axis, whichever comes first. After this statement, the piece moves independent of the script; indeed, the script proceeds immediately to the next statement after it sets the piece moving.

Speed is always positive, even if you are moving the piece to a negative distance. It is measured in Spring distance/second (sd/s).

 wait-for-move [piece] along [axis];

Makes the thread sleep until the piece stops moving along the axis.

==turn==

These are similar to movement in behavior, except they rotate the piece.

 turn [piece] to [axis] [angle] now;

Turns the piece to the specified angle around the axis immediately. The piece will be in its new rotation around the axis before the next statement is executed. Pieces rotate around their &lt;u&gt;own&lt;/u&gt; center, not their parent's (although if the parent rotates, they do as well). If the piece moves, the center moves with it, so a piece's movement occurs &quot;before&quot; its rotation in determining its final position.

 turn [piece] to [axis] [angle] speed [angular speed];

This turns the piece at some angular speed until it reaches its destination, or the piece is told to turn to a different distance around the same axis, whichever comes first. Angular speed is always positive, even if the angle is negative. The speed is in Spring angles/second (sa/s).

 wait-for-turn [piece] around [axis];

Makes the thread sleep until the piece stops turning around the axis.

==spin==

 spin [piece] around [axis] speed [angular speed];

This starts the piece spinning at a constant speed immediately. Again, the speed is in Spring angles/second (sa/s); however, it can be negative if you want it to spin in that direction.

 spin [piece] around [axis] speed [angular speed] accelerate [angular acceleration];

The angular acceleration should always be positive, even if you are spinning the piece at a negative angular speed. It is measured in Spring angles per frame-second (sa/f*s); in other words, the speed of the piece will increase by that amount every ''frame'', not every second. There are 30 frames per second.

 stop-spin [piece] around [axis];

Stops the piece from spinning immediately, regardless of its orientation.

 stop-spin [piece] around [axis] decelerate [angular deceleration];

Slows the piece's spinning down until it stops. As with angular acceleration, the angular deceleration should always be positive and is measured in Spring angles per frame-second.

[[Category:Animation]]</text>
      <sha1>18t6j3agdmltdqriwfl5drcnpr7dxrt</sha1>
    </revision>
  </page>
  <page>
    <title>Animation-CobCallins</title>
    <ns>0</ns>
    <id>2514</id>
    <revision>
      <id>29842</id>
      <parentid>29841</parentid>
      <timestamp>2016-02-03T10:10:12Z</timestamp>
      <contributor>
        <username>Beherith</username>
        <id>2441</id>
      </contributor>
      <comment>/* Weapons */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6153">==Source==

Some (but not all) are listed near the end of this file: {{sourcelink|file=rts/Sim/Units/Scripts/CobInstance.cpp}}

==Purpose==
Callins have two purposes:

First, they allow a script to be notified when an event happens, such as the unit being created or destroyed.

Second, they allow the engine to get information from the script. Sometimes this is accomplished through a return value, but usually this is done by setting one of the arguments to a function to the requested value.

==Callins==

===General===

*Create(): Called when the unit is created. &quot;Created&quot; means when the unit's nanoframe is created; if you want to wait until the unit is actually finished, you'll have to use something like 

 while(GET BUILD_PERCENT_LEFT) sleep 250; 

*Activate()/Deactivate(): Called when the unit is turned on/off.
*Killed(severity, corpsetype): Called when the unit is killed. Severity indicates how many percent of the unit's hit points were dealt by the final blow. Corpsetype basically indicates the number of times the unit and its corpses are destroyed; for example, corpsetype = 3 acts as if the unit is destroyed, the corpse is destroyed, and the corpse's corpse is destroyed. If it runs out of corpses nothing is left behind. Set corpsetype to the desired value.

===Movement===

*StartMoving()/StopMoving(): Called when the unit starts/stops moving. This includes rotation, so don't be surprised if StartMoving() sometimes gets called when a unit starts aiming at a target.
*SetSFXOccupy(terraintype): Supposedly called when the unit changes terrain type, although it didn't work last time I tried it? Maybe I was using it wrong. terraintype: 0 = transported, 1 = sea, 2 = deep sea (greater than 5 water depth and unit is upright), 4 = land.
*MoveRate[0...3](): Appears to be the aircraft equivalent of SetSFXOccupy. MoveRate3 doesn't appear to actually be used. MoveRate1 is called when the aircraft takes off or lands. If the aircraft is not taking off or landing, MoveRate0 is called when the aircraft drops below 1/3 maximum speed, MoveRate2 is called when the aircraft exceeds 2/3 maximum speed, and MoveRate1 is called when the aircraft enters within 1/3-2/3 maximum speed. I don't know if this actually works.
*SetDirection(heading): Used only for wind generators. Gives the direction of the wind.
*SetSpeed(speed): Used for wind generators, tidals, and mexes. Basically more resources = higher speed.

Comments:
* MoveRate0 ... Moverate3 only work with gunship type of aircraft: 
[http://springrts.com/phpbb/viewtopic.php?f=14&amp;t=26890&amp;hilit=Moverate0 Forum thread]
* SetSFXOccupy(terraintype) for aircraft: terraintype = 4 when flying over land and 1 when flying over water. (I used &quot;get IN_WATER&quot; to find out when unit is submerged).

===Weapons===

For weapons, X means either the number of the weapon, or &quot;Primary&quot;, &quot;Secondary&quot;, or &quot;Tertiary&quot; (don't put &quot;Weapon&quot; for these). I recommend using numbers, since it's cleaner and you can use more than three weapons that way.

*AimWeaponX(heading, pitch): Called every ~0.5s when the unit is aiming the weapon at a target. This is used to turn a unit's turrets toward the target. Return 1 when the weapon is ready to fire. Alternately, return 0 if you don't want the weapon to fire (you can use this to disable weapons).
*AimFromWeaponX(piecenum): You should set piecenum to a piece of the model; LOS is traced from the here to the target to see if the weapon can fire.
*FireWeaponX(): Called whenever the trigger is pulled on a weapon. This occurs before the ''first'' shot in a burst/projectile salvo (only).
*ShotX(zero): Called before every shot a weapon fires. This includes burst and projectile tags. This happens after FireWeaponX(), even for the first shot. There's one input argument which is 0, because of a typo in the source.
*QueryWeaponX(piecenum): You should set piecenum to a piece of the model. The shot starts from this piece of the model; this is called for this purpose after FireWeaponX() and ShotX(). LOS is also traced from here to the target to see if a weapon can fire. Make sure this is a piece on the weapon's turret. Not doing this right can cause headaches; example: http://trac.caspring.org/wiki/GunsJammingOnShips
*EndBurstX(): Called after the last shot in a burst.
*BlockShotX(in unitID, out block, in usertarget)
*TargetWeightX(unitID, weightMod)
*RockUnit(anglex, anglez): Called when the unit fires. Use it to rock the unit on firing, although there are other ways to do this. The angles returned are in unit space, and are multiplied by 500.  
*HitByWeapon(anglex, anglez): Called when the unit is hit by a weapon. Angles are in unit space and multiplied by 500.
*HitByWeaponID(anglex, anglez, weapondefid, damage): Called when the unit is hit by a weapon. Angles are in unit space and multiplied by 500.
*SetMaxReloadTime(time): Called on unit creation. time is the time in ms that it takes the slowest-firing weapon to reload.

===Construction===

*StartBuilding(): Called when the unit starts building.
*StopBuilding(): Called when the unit stops building.
*QueryNanoPiece(piecenum): You should set piecenum to the piece you want the nanospray to come from.
*QueryBuildInfo(piecenum): For factories. You should set piecenum to the piece you want the unit to be built on.

===Transportation===
*Falling(): Used for airdropping units?
*Landed(): Used for airdropping units?
*QueryTransport(piecenum): You should set piecenum to the piece you want the transported unit to be attached to.
*BeginTransport(): Called when an air transport picks up a unit.
*EndTransport(): Called when an air transport becomes empty.
*TransportPickup(): Called when a land transport picks up a unit.
*TransportDrop(): Called when a land transport becomes empty.
*StartUnload(): Called when the transport starts the unloading process.

===Landing Pads===
*QueryLandingPadCount(count): You should set count to the number of landing pads. However, it doesn't seem to be actually necessary to do this unless you want more than 16 pads.
*QueryLandingPad(piecenum1, piecenum2, piecenum3...): Set each piecenum to a different landing pad piece.

[[Category:Animation]]</text>
      <sha1>qu6uqtw40awilpwtq6envl5x35zw8sw</sha1>
    </revision>
  </page>
  <page>
    <title>Animation-CobConstants</title>
    <ns>0</ns>
    <id>2515</id>
    <revision>
      <id>30005</id>
      <parentid>30004</parentid>
      <timestamp>2016-05-31T11:40:23Z</timestamp>
      <contributor>
        <username>Hokomoko</username>
        <id>2896</id>
      </contributor>
      <comment>/* Custom Variables */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3827">==Source==

This has a list of all COB SET/GET constants: {{sourcelink|file=rts/Sim/Units/Scripts/CobDefines.h}}

You'll want to include a file with these constants in your script.

==SET/GET==

===Use===
Use GET [tag] to get a value. Some GETs refer to functions; in this case, use GET [tag](arg1, arg2, arg3, arg4).
Use SET [tag] to [value] to change a value.

===Tags===
There's a lot of GET/SET tags; I'll cover some of the more useful but less intuitive ones.

*ACTIVATION: Whether the unit is on (true) or off (false).
*ARMORED: When true, any damage dealt to the unit will be multiplied by its damageModifier.
*PRINT: You can use GET PRINT to send up to 4 arguments to chat. Useful for debugging. Example: 	'''get PRINT(1, 5,9,10);''' statement will print the following into infolog: '''Value 1: 1, 2: 5, 3: 9, 4: 10'''
*VETERAN_LEVEL: The unit's experience times 100. Note that you can SET this via script, although the unit won't gain any extra health from doing so.

=== Custom Variables ===
{{removed|101.0}}

Higher GET/SET numbers are reserved for custom variables. These are very useful for Lua integration. Setting these variables is much (perhaps 100x) faster than calling functions across Lua and COB; the disadvantages are the limited number of variables and the fact that the other side is not immediately notified of a change in the variable.

*Unit variables: The 8 numbers starting at 1024 correspond to per-unit variables. To get at these from Lua, use Spring.[Get|Set]COBUnitVar.
*Team variables: The 64 numbers starting at 2048 correspond to per-team variables. To get at these from Lua, use Spring.[Get|Set]COBTeamVar.
*Ally variables: The 64 numbers starting at 3072 correspond to per-team variables. To get at these from Lua, use Spring.[Get|Set]COBAllyTeamVar.
*Global variables: The 4096 numbers starting at 4096 correspond to global variables. To get at these from Lua, use Spring.[Get|Set]COBGlobalVar.

==emit-sfx==

 emit-sfx [sfxtype] from [piece];

The least significant byte of sfxtype is treated as an unsigned integer; the remaining bits are a bitmask. The bitmask indicates what ''type'' of sfx to emit, while the number indicates ''which'' sfx of that type to emit. The bits are as follows:

*256: Point-based fx. Used for white smoke (1), black smoke (2), and bubbles (3).
*1024: Unit sfx. Use with the unit's sfxtypes.explosionGenerators. The first one is 0, the second one is 1, etc.
*2048: Fire weapon. Fires a weapon from the piece (no aiming involved). Again, the first weapon is 0, the second weapon is 1, etc.
*4096: Explode weapon. Detonates a weapon at the piece. Again, the first weapon is 0, the second weapon is 1, etc.

If the piece has no geometry, then the sfx is emitted in the +z direction from the origin of the piece.

If the piece has 1 vertex, the emit dir is the vector from the origin to the the position of the first vertex the emit position is the origin of the piece.

If there is more than one vertex in the piece, then the emit vector is the vector pointing from v[0] to v[1], and the emit position is v[0].

==explode==

Causes the piece to explode and possibly go flying. This actually gives the appearance of making a copy of the piece (henceforth referred to as &quot;debris&quot;) so if you're using it outside of Killed() you may want to hide the piece in question.

 explode [piece] type [exptype];

exptype is a bitmask. The bits are as follows:

*SHATTER: Explodes the debris into tiny triangles. Looks like confetti.
*EXPLODE_ON_HIT: Debris will explode on impact, causing about 40 damage.
*FALL: Debris is affected by gravity.
*SMOKE
*FIRE
*BITMAPONLY: No debris, just an explosion graphic.
*NOCEGTRAIL
*NOHEATCLOUD: No explosion before the piece flies off.
*BITMAP[1...5]: Not used in Spring, may overlap with Spring specific bits.

[[Category:Animation]]</text>
      <sha1>lwqiiq7cy523vk39bltqvwvwwlual75</sha1>
    </revision>
  </page>
  <page>
    <title>Animation-CobHitByWeaponID</title>
    <ns>0</ns>
    <id>2522</id>
    <revision>
      <id>26800</id>
      <parentid>18961</parentid>
      <timestamp>2013-03-21T10:50:36Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>1cat</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="309">'''HitByWeaponId(z,x,weapon_id,shot_power)'''

The z and x angles are not returned unless the impulse of the weapon is high enough to move the unit.

The weapon_id is the &quot;id=xxx&quot; from the weapon information in the weapon tdf.

Always return(100); or the weapon won't deal full damage.

[[Category:Animation]]</text>
      <sha1>4d0ayc9lm0rcziah0rbc2c763fc0j8f</sha1>
    </revision>
  </page>
  <page>
    <title>Animation-CobLuaDifferences</title>
    <ns>0</ns>
    <id>2762</id>
    <revision>
      <id>26801</id>
      <parentid>22025</parentid>
      <timestamp>2013-03-21T10:55:19Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>1cat</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3787">== Overview of differences between COB unit scripts and Lua unit scripts ==
This is only of interest if you plan to port your COB scripts to Lua:
* Units of measurement: Lua uses elmos and radians consistently.
* Coordinate system: In Lua, coordinate system is same as world coordinate system, with all rotations right-handed. In COB, the moves along the x-axis and rotations around the z-axis have a different sign.
* In Lua, ''Killed'' gets recentDamage and maxHealth as separate arguments. In COB, you get only the ratio recentDamage/maxHealth*100.
* Where COB uses ''SetMaxReloadTime'', Lua uses ''GetMaxReloadTime''.
* Where COB uses ''QueryLandingPadCount'' and ''QueryLandingPad'', Lua uses ''QueryLandingPad'''s'''''
* The x and z arguments to ''HitByWeapon'', ''HitByWeaponId'' and ''RockUnit'' are given in (x, z) order in Lua, and the opposite order in COB.
* ''BeginTransport'' and ''EndTransport'' take the height of the unit in COB and the unitID in Lua. (Use 'local height = Spring.GetUnitHeight(unitID)' to get the height.)
* ''TransportDrop'' gets PACKXZ(x,z) in COB; in Lua, it gets the entire vector (x, y, z) as three arguments.
* Where COB uses ''SetSpeed'' and ''SetDirection'', Lua uses ''WindChanged'' and ''ExtractionRateChanged''.
* Lua does not have ''Go'' (this is called for activated extractors immediately after each ''SetSpeed'' call.)

==Which one is better? Lua or COB unitscripts?==
If you are starting a new project and wonder what script language to use, look at this list:&lt;br&gt;
'''data types:'''&lt;br&gt;
COB: - only basic variables.&lt;br&gt;
Lua: + arrays, strings and tables.&lt;br&gt;
This is quite important as it allows for easier creation of advanced scripts.&lt;br&gt;

'''availability of examples, documentation'''&lt;br&gt;
COB: + is/was used in Total Annihilation. Lots of third party units were made for that game and maybe you can reuse some scripts.&lt;br&gt;
COB: - unclear legal status of these scripts&lt;br&gt;
COB: - Outside of the TA community, there are no tutorials and it is unknown.&lt;br&gt;
Lua: + is also used in projects outside Spring, so it has more tutorials. &lt;br&gt;
Lua: + The documentation on Spring specific Lua will probably get better, COB not.&lt;br&gt;

'''Interaction with the rest of Spring'''&lt;br&gt;
COB: - Typically only basic stuff, but there is a messy way of interacting with gadgets which must be written in a way to support COB interaction.&lt;br&gt;
Lua: + can use all the other Lua functions Spring has to offer.&lt;br&gt;
Lua: + game logic (gadgets) is written in Lua, too. So you need to know Lua anyway.

'''Ease of use'''&lt;br&gt;
COB: - Requires recompiling the script with a compiler after each change.&lt;br&gt;
COB: - This compiler appears to be pretty buggy.&lt;br&gt;
COB: - Compiled scripts are not readable for human eyes, but can be decompiled.&lt;br&gt;
Lua: + A text editor is all you need. Many editors support Lua syntax highlighting.&lt;br&gt;
Lua: + Scripts are not compiled so it is easy to look at the scripts of other games for examples.&lt;br&gt;

'''Script performance'''&lt;br&gt;
COB: + Faster for simple scripts that have no interaction with gadgets.&lt;br&gt;
COB: - Slower when interacting with gadgets, trickier to code such interaction.&lt;br&gt;
Lua: - Slower threading engine.&lt;br&gt;
Lua: + Faster when interacting with gadgets.&lt;br&gt;


===Conclusion===
Unless you already have lots of complex unit scripts by porting TA content, Lua is always better.&lt;br&gt;
Contra to popular belief, COB is actually not easier to learn.

==Hints==
* COB &amp; LUS (LuaUnitScripts) can be reloaded ingame via &lt;code&gt;/reloadcob %unitdefname&lt;/code&gt;, also LUS get reloaded with &lt;code&gt;/luarules reload&lt;/code&gt;, too.

==Avoid writting &quot;COB-style&quot; Lua scripts==
See [http://springrts.com/phpbb/viewtopic.php?f=23&amp;t=25960 this thread] for an example on how you can improve your copy&amp;paste hackjob script.

[[Category:Animation]]</text>
      <sha1>bcahufg6ssjdt98lzz4fqhz1jreep2c</sha1>
    </revision>
  </page>
  <page>
    <title>Animation-CobOverview</title>
    <ns>0</ns>
    <id>2518</id>
    <revision>
      <id>27821</id>
      <parentid>26532</parentid>
      <timestamp>2013-10-27T20:44:20Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>/* Further information */ nuke wanted page</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2345">==What is COB?==

COB is the Spring engine's scripting system. Each unit has a .cob bitfile which defines many of its major behaviors, including animation and weapon aiming. Of course, COB is also capable of doing a lot more if you wish. When Spring is actually running, it interprets the bitfile for each unit as necessary. This interpreter runs in a very straightforward way, without any fancy optimizations, so don't expect great performance from it.

==BOS==

The code that gets compiled into a .cob is written in a .bos file. A program called [[Map,_Game,_And_Unit_Development_Programs#Scripting_And_Unit_Stats_files|Scriptor]] generally does this compilation. BOS uses a C-like syntax, although it has many Spring-specific features and isn't as powerful as C.

===BOS versus C===

Similarities:
*Function syntax. A function is defined by FunctionName(args).
*Block delimiters. Like C, a statement block is delimited by curly braces ({}).
*General syntax. For example, to add two variables and assign the result to a third, you say x = y + z;

Differences:
*Not case sensitive.
*Only one data type. There is only one type of data in COB, which is basically a 32-bit integer.
*Variable declaration. 

You can declare a static variable, whose scope encompasses the entire script, using

 static-var x;

You can declare multiple variables at once by separating them with commas.

Alternately, you can declare a local variable:

 var x;

The scope is limited to the function that it is in.
*No pointers or arrays.
*No internal return values. When the script receives a callin, it may return a value to the &quot;outside&quot;; however, there is no way to return a value directly to another function within the script. You will have to use a static variable.
*Function calls. 

Functions are called using

 call-script Function(args);

or 

 start-script Function(args);

See [[Animation-CobThreads|COB-Threads]] for details.
*Multiple threads. This isn't as exciting as it sounds. Again, see [[Animation-CobThreads|COB-Threads]] for details.
*Spring-specific features. There are too many here to name; please consult the other COB articles.

==Further information==
Greater detail can be found on the following pages
*[[Animation-CobAnimation]]
*[[Animation-CobCallins]]
*[[Animation-CobConstants]]
*[[Animation-CobHitByWeaponID]]

[[Category:Animation]]</text>
      <sha1>mh0dqin3h4x00zgz2x12yc9kogzharx</sha1>
    </revision>
  </page>
  <page>
    <title>Animation-CobThreads</title>
    <ns>0</ns>
    <id>2516</id>
    <revision>
      <id>26802</id>
      <parentid>22424</parentid>
      <timestamp>2013-03-21T10:55:30Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>1cat</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3473">==Source==

{{sourcelink|file=rts/Sim/Units/Scripts/CobThread.cpp}}

==Introduction==

Much of the time you can expect your script to execute sequentially; that is, looking through your code, the system progresses from statement to statement without anything &quot;strange&quot; (variables being changed, threads being started, etc.) between them. HOWEVER, &quot;strange&quot; things do happen, and in fact they happen quite regularly in scripts. We say that the script system has &quot;concurrency&quot; when things can happen between statements.

===Why Concurrency?===
So why go to all this trouble with concurrency? The script system has concurrency because we never know when things are going to happen. The player could give a command to the unit, the unit could run into a wall, rocks could fall out of the sky and kill the unit, and so forth. Without concurrency we would have to check very often whether which of all possible events had happened recently in order to determine what to do next. This would suck.

==Dealing With Concurrency==
Every time a callin is called or a start-script statement is executed, a &quot;thread&quot; is created. At any one time, only one thread is being executed at a time, but sometimes a thread will stop executing for a while and continue later, while several other threads will execute in the meantime. Most of the time your script is guaranteed to execute sequentially. If you say x = 1;, it will stay 1 unless you change it again. The exceptions are as follows:

*Before a script starts.
*After a wait-for-move or wait-for-turn statement.
*After a sleep statement.

During these times, any other thread has the ability to come in and change all your static variables, tell your pieces to move, turn, and spin, and so forth. Therefore, you cannot always assume these things will be the way you left them when execution of the thread resumes. If it is possible that another thread will change something that you need to know about, you need to check it after any of these times.

==Sleeping==

You can have a thread sleep by using a sleep statement:

 sleep [time in ms];

This is useful for delaying events and in making loops execute every so often. If you want to wait until a piece moves into position, use wait-for-move or wait-for-turn instead.

==Signals==

Signals provide a way to kill threads in their sleep. Signals are bitmasks. There are two statement types dealing with signals: signal and set-signal-mask.

 signal [bitmask];

kills all sleeping threads that overlap the bitmask.

 set-signal-mask [bitmask];

sets what signals kill the current thread.

This has several applications. For functions that are called regularly, such as AimWeaponX(), this prevents multiple copies of the same thread from running at the same time. It is also a way (but not the only or necessarily best way) to interrupt another thread.

==call-script==

Use as follows:

 call-script [function]([args]);

This does not start a new thread! The calling function will not continue until the called function returns.

==start-script==

At first glance, this is similar to call-script:

 start-script [function]([args]);

However, start-script ''does'' create a new thread, and the calling function ''doesn't'' wait until the started function returns before continuing. By default, the new thread shares the same signal mask as its parent, although you can set it manually if you like. Apart from this, the two threads execute completely independently.

[[Category:Animation]]</text>
      <sha1>cmgu64kt8prrrnj637in0q0fqahhkib</sha1>
    </revision>
  </page>
  <page>
    <title>Animation-LuaCallins</title>
    <ns>0</ns>
    <id>2755</id>
    <revision>
      <id>31242</id>
      <parentid>31241</parentid>
      <timestamp>2020-06-10T08:52:52Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>/* Transports */ no s</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="13341">== Introduction ==

Call-ins are calls from the engine, into the unit script. In other words, these functions are called, if they are defined, when a particular ''event'' happens.

For Lua unit scripts, a new call-in mechanism has been implemented, which is faster than the regular call-in mechanism used for widgets and gadgets.

Types for arguments are only shown where they're ambiguous. For a number of (common) arguments, the types are:

* unitID: number
* piece: number
* axis: number (1 = x axis, 2 = y axis, 3 = z axis)
* heading/pitch: number (radians)

== Generic ==

'''script.Create''' ( ) -&gt; nil

This is called just after the unit script has been created.


'''script.StartMoving''' ( ) -&gt; nil&lt;br&gt;
'''script.StopMoving''' ( ) -&gt; nil

These are called whenever the unit starts or stops moving. Typical use for them is to trigger wheels to start spinning, animate treads, or start/stop a walking animation. Since 95.0 they are only run when a unit transitions from zero to non-zero speed or vice versa, and no longer during in-place rotations.


'''script.ChangeHeading''' ( number deltaHeading ) -&gt; nil

{{new|104.0}} Called when the unit changes heading.


'''script.StartSkidding''' ( ) -&gt; nil&lt;br&gt;
'''script.StopSkidding''' ( ) -&gt; nil

{{new|104.0}} Called when a (ground) unit reacts to an impulse. The start-skidding threshold ('sqSkidSpeedMult') is configurable via [[Lua_MoveCtrl#MoveType-Controlling|MoveCtrl.SetGroundMoveTypeData]]


'''script.Killed''' ( number recentDamage, number maxHealth ) -&gt; number corpseType

This is called when the unit is killed. The severity of the kill may be calculated as severity=recentDamage/maxHealth ''(*100 so that it's in percent, no? at least that is how severity was expressed in Cob/bos, I think. Of course there's no reason to emulate that, just pointing it out for people &quot;converting&quot;)''. Typically, this function would play a death animation for the unit, and finally return a corpse type.


'''script.WindChanged''' ( number heading, number strength ) -&gt; nil

This is called for wind generators whenever the wind direction or strength changes.


'''script.ExtractionRateChanged''' ( number rate ) -&gt; nil

Called for metal extractors each time their extraction rate (metal per second) changes.


'''script.setSFXoccupy''' ( number curTerrainType ) -&gt; nil

Called when terrain type changes. Terrain type is calculated with the following rules (in this order):

* If unit is being transported -&gt; curTerrainType = 0
* If ground height &lt; -5 and unit is always upright -&gt; curTerrainType = 2
* If ground height &lt; -5 and unit is not always upright -&gt; curTerrainType = 1
* If ground height &lt; 0 and unit is always upright -&gt; curTerrainType = 1
* Otherwise -&gt; curTerrainType = 4

Where is curTerrainType = 3 ? :-)

Candidate to be changed to something saner later on.


'''script.MoveRate''' ( number curRate ) -&gt; nil

Called only for certain types of aircraft (those which use ''CTAAirMoveType''.) The move rate is determined by the following rules (in this order):

* If the aircraft is landing or taking off -&gt; curRate = 1
* Otherwise -&gt; curRate = floor(curSpeed / maxSpeed * 3), clamped to be in the range [0, 2]


'''script.QueryLandingPads''' ( ) -&gt; { number piece1, number piece2, ... }

Called one time for units with landing pads. Should return a table with pieces which should be used as landing pads. The number of pieces returned also determines the number of pads, so for Lua unit scripts there is no QueryLandingPadCount.


'''script.Activate''' ( ) -&gt; nil&lt;br&gt;
'''script.Deactivate''' ( ) -&gt; nil

Exact situation these are called depends a lot on the unit type. Factories are activated when they open their yard and deactivated when they close it. Aircraft are activated when they take off and deactivated when the land. Any unit that can be turned on or off is activated when it's turned on and deactivated when it's turned off. On ''script.SetUnitValue(COB.ACTIVATION, ...)'' one of these call-ins may be called too.

== Weapons ==

Weapon functions come in two variants.

* Separate function with numeric weapon number suffix. (e.g. ''script.AimWeapon&lt;u&gt;1&lt;/u&gt;(heading, pitch)'')
* Combined function which gets weapon number as second argument. (e.g. ''script.AimWeapon(&lt;u&gt;weaponNum&lt;/u&gt;, heading, pitch)'')

Only the first variant is listed here, so whenever you see a function whose name ends with a numeric one (&quot;1&quot;), you should either replace it with the actual weapon number, or you can write a single combined function that takes a ''weaponNum'' argument. For each script, all functions should use the same variant. Either all using name suffix, or all using combined functions.


'''script.QueryWeapon1''' ( ) -&gt; number piece&lt;br&gt;
'''script.AimFromWeapon1''' ( ) -&gt; number piece&lt;br&gt;
'''script.AimWeapon1''' ( heading, pitch ) -&gt; boolean&lt;br&gt;
'''script.AimShield1''' ( ) -&gt; boolean

Weapon support. The return value of QueryWeapon and AimFromWeapon determines the pieces which will be used for aiming: typically e.g. the barrel for QueryWeapon and the turret for AimFromWeapon. AimWeapon is then called to allow the script to turn the weapons in the target direction, which is passed as the heading and pitch argument (in radians). Only if AimWeapon returns true, the weapon is actually fired. AimWeapon is called repeatedly, at a rate determined by the {{xtaglink|Gamedev:WeaponDefs|fireTolerance}} tag.


'''script.FireWeapon1''' ( ) -&gt; nil&lt;br&gt;
'''script.Shot1''' ( ) -&gt; nil&lt;br&gt;
'''script.EndBurst1''' ( ) -&gt; nil

If after aiming the unit actually fires it's weapon, FireWeapon is called once at the beginning of the salvo. Shot is called just before each projectile is fired. RockUnit (see below) is called just after all projectiles for that frame have been fired. At the end of the salvo, EndBurst is called.

Of these call-ins, FireWeapon is the more generic one and Shot and EndBurst are more specialized. FireWeapon is usually used to play a recoil animation or emit some smoke near the weapon's barrel using EmitSfx.


'''script.BlockShot1''' ( targetUnitID, boolean userTarget ) -&gt; boolean

Allows you to block a weapon from shooting. TargetUnitID may be nil: in this case the unit has a ground-attack order.


'''script.TargetWeight1''' ( targetUnitID ) -&gt; number

Allows you to tweak the priority of the target for this particular weapon. The target priority is multiplied by the return value of this function. Lower priority targets are targeted first, so return a value smaller than 1 to prioritize a target, or return a value larger than 1 to avoid a target.

The exact behavior of specific values shouldn't be relied upon.


'''script.RockUnit''' ( x, z ) -&gt; nil

A bit like the weapon-specific FireWeapon function, although this is called after any weapon fires. As argument it gets a two dimensional vector in the direction the unit just fired. This may be used to â€œrockâ€ the unit as a whole a bit as part of the firing animation. Note though that this vector is in world space, so for a truly realistic rock direction it needs to be rotated according to the unit's current heading.


'''script.HitByWeapon''' ( x, z, weaponDefID, damage ) -&gt; nil | number newDamage

This is called if a unit has been hit by a weapon. (x, z) is the direction from which the projectile came in unit space (the reverse direction of the impulse, to be exact.) It also gets the weaponDefID of the weapon which is dealing the damage, and the amount of damage. If HitByWeapon returns a number, this number will replace the damage value calculated by the engine.

Note: Pre Spring 95, this call-in runs just before the LuaRules UnitPreDamaged callin (see also [[LuaCallinReturn]]). If HitByWeapon overrides the damage, UnitPreDamaged will see the new damage value, and may override again the damage value. Starting Spring 95, it is run after UnitPreDamaged.

== Builders and factories ==

'''script.StartBuilding''' ( heading, pitch ) -&gt; nil&lt;br&gt;
'''script.StartBuilding''' ( ) -&gt; nil&lt;br&gt;
'''script.StopBuilding''' ( ) -&gt; nil

These notify the script when a builder or factory starts or stops building.

The first variant (with heading and pitch arguments) is called for builders. For factories, the second variant is used. In this case the heading and pitch are not necessary, because the factory script specifies the build location itself using QueryBuildInfo.

BTW, don't forget to set INBUILDSTANCE to 1 to start building! For lua script, that is

 &lt;nowiki&gt;
  function script.StartBuilding(heading, pitch)
    SetUnitValue(COB.INBUILDSTANCE, 1)
  end

  function script.StopBuilding()
    SetUnitValue(COB.INBUILDSTANCE, 0)
  end
&lt;/nowiki&gt;

'''script.QueryBuildInfo''' ( ) -&gt; number piece

For factories only. Should return the piece to which the unit which is going to be build will be attached while it's being build.

'''script.QueryNanopiece''' ( ) -&gt; number piece

Called each time a nano particle is to be created. Should return the piece at which the particle will be spawned. This may be used to iterate through a few pieces, to simulate the factory/builder having multiple nanolathes.

&lt;span class=&quot;note&quot;&gt;N.B. As of 92.0 the results are cached and the function is called 31 times only. Deprecated in favour of Spring.SetUnitNanoPieces, which disables this callin when used.&lt;/span&gt;

== Transports ==

There are some different code paths inside Spring related to transports, each (unfortunately) also associated with a different set of unit script call-ins.

This table shows for the three different {{xtaglink|Gamedev:UnitDefs|transportUnloadMethod}} for both air transports and ground transports which callins are used and roughly when and how often they are called. Refer to the documentation below for a description of the call-ins.

The entire behavior around transports should be considered subject to change; it is obvious it is far from a perfect design currently.


{|border=&quot;1&quot; style=&quot;border-spacing:0px;&quot;
|+
!
!Load
!UnloadLand (0)
!UnloadDrop (1)
!UnloadLandFlood (2)
|-
|
|
|default unload
|fly over and drop unit
|land, then release all units at once
|-
|air
|BeginTransport (each)&lt;br&gt;QueryTransport (each)
|EndTransport (last)
|EndTransport (each)
|StartUnload (first)&lt;br&gt;TransportDrop (each)&lt;br&gt;EndTransport (last)
|-
|ground
|TransportPickup (each)
|TransportDrop (each)
|TransportDrop (each)
|TransportDrop (each)&lt;br&gt;EndTransport (last)
|}


=== Air transports ===

'''script.BeginTransport''' ( passengerID ) -&gt; nil&lt;br&gt;
'''script.QueryTransport''' ( passengerID ) -&gt; number piece

For an air transport, if any one unit is picked up, these two are called in succession and the passenger is attached to the piece returned by the second one.


'''script.StartUnload''' ( ) -&gt; nil

Only called in UnloadLandFlood behavior. Signals the start of an unload cycle.


'''script.TransportDrop''' ( passengerID, x, y, z ) -&gt; nil

Only called in UnloadLandFlood behavior. Called when a passenger will be unloaded. Contrary to ground transports, Spring will detach the passenger after the call.


'''script.EndTransport''' ( ) -&gt; nil

In UnloadLand and UnloadLandFlood behaviors, these are called one time after all units are unloaded. (The transport is empty.) For the UnloadDrop behavior, this is called for every unit that is unloaded.


=== Ground transports ===

'''script.TransportPickup''' ( passengerID ) -&gt; nil

Called when a passenger should be loaded into the transport. This should eventually call AttachUnit to actually attach the unit. Assuming the transport is in range of the next passenger, this will be called again for the next passenger 16 frames later, ''unless'' the script enters the BUSY state: then Spring will not move on to the next passenger until the script leaves the BUSY state.


'''script.TransportDrop''' ( passengerID, x, y, z ) -&gt; nil

Called when a passenger should be unloaded. This should eventually call DetachUnit to actually detach the unit, ''unless'' the used unload method is UnloadLandFlood, in which case Spring will actually detach the unit after the call.


'''script.EndTransport''' ( ) -&gt; nil

Only called in UnloadLandFlood behavior, after the last unit has been unloaded.


=== Passenger ===

'''script.Falling''' ( ) -&gt; nil

For a unit dropped from an UnloadDrop transport, this is called every frame to inform the script the unit is still falling. It may be used to show a parachute for example.


'''script.Landed''' ( ) -&gt; nil

This is called one time after the unit reached the ground. May be used to hide a parachute for example.

== Internal ==

These call-ins are NOT available to Lua unit scripts. They are called by the engine however, but always 'intercepted' by the framework gadget. For completeness (or if you are poking at the gadget), they are listed here anyway.


'''script.MoveFinished''' ( piece, axis ) -&gt; nil&lt;br&gt;
'''script.TurnFinished''' ( piece, axis ) -&gt; nil

Called when a move or turn finished. The framework gadget uses this to resume the coroutines which are waiting for the particular move or turn to be finished.

'''script.Destroy''' ( ) -&gt; nil

Called right before the unit's script is destroyed. This may happen if the unit is being destroyed, but also if the unit's script is being replaced by another script. The framework gadget uses this to stop all threads and remove the unit from some internal data structures.

[[Category:Animation]]
[[Category:Lua]]</text>
      <sha1>0a03rk9os9exj5addge1g36uwtu6f5b</sha1>
    </revision>
  </page>
  <page>
    <title>Animation-LuaCallouts</title>
    <ns>0</ns>
    <id>2756</id>
    <revision>
      <id>30473</id>
      <parentid>30472</parentid>
      <timestamp>2017-09-23T00:53:01Z</timestamp>
      <contributor>
        <username>Maddox</username>
        <id>2934</id>
      </contributor>
      <minor/>
      <comment>Fixing nowiki notation</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11147">== Introduction ==

The new callouts are defined in the Spring.UnitScript table.

Types for arguments are only shown where they're ambiguous. For a number of (common) arguments, the types are:

* unitID: number
* piece: number
* axis: number (1 = x axis, 2 = y axis, 3 = z axis)
* destination: number ([[elmo]]s (linear), [[radian]]s (angular))
* speed: number ([[elmo]]s per second (linear), [[radian]]s per second (angular))
* accel/decel: number ([[radian]]s per second per frame)

You may also get the unit's &quot;type&quot; or def, which is the tag of each unit.lua file - and also what you use to spawn a certain unit using a console command. Both the UnitDefs global table and the unitDefID unit instance identifier are available in your lua animation script, so you can simply do:
 &lt;nowiki&gt;
    Spring.Echo(UnitDefs[unitDefID].name)
&lt;/nowiki&gt;

== Animation ==

'''Spring.UnitScript.SetPieceVisibility''' ( piece, boolean visible ) -&gt; nil&lt;br&gt;
'''Spring.UnitScript.Show''' ( piece ) -&gt; nil&lt;br&gt;
'''Spring.UnitScript.Hide''' ( piece ) -&gt; nil

These may be used to show/hide pieces of the unit's model.


'''Spring.UnitScript.Move''' ( piece, axis, destination[, speed] ) -&gt; nil

Move piece along axis to the destination position. If speed is given, the piece isn't moved immediately, but will move there at the desired speed. The X axis is mirrored compared to BOS/COB scripts, to match the direction of the X axis in Spring world space.


'''Spring.UnitScript.Turn''' ( piece, axis, destination[, speed] ) -&gt; nil

Turn piece around axis to the destination angle. If speed is given, the piece isn't rotated immediately, but will turn at the desired angular velocity. Angles are in radians.
Always uses the shortest angular towards destination degree, and if at exactly 180 degrees opposite, will go counter-clockwise.


'''Spring.UnitScript.Spin''' ( piece, axis, speed[, accel] ) -&gt; nil

Makes piece spin around axis at the desired angular velocity. If accel is given, the piece does not start at this velocity at once, but will accelerate to it. Both negative and positive angular velocities are supported. Accel should always be positive, even if speed is negative.

Beware gimbal lock: http://en.wikipedia.org/wiki/Gimbal_lock


'''Spring.UnitScript.StopSpin''' ( piece, axis[, decel] ) -&gt; nil

Stops a piece from spinning around the given axis. If decel is given, the piece does not stop at once, but will decelerate to it. Decel should always be positive. This function is similar to Spin(piece, axis, 0, decel), however, StopSpin also frees up the animation record.


'''Spring.UnitScript.IsInTurn''' (number piece, number axis) -&gt; boolean&lt;br&gt;
'''Spring.UnitScript.IsInMove''' (number piece, number axis) -&gt; boolean&lt;br&gt;
'''Spring.UnitScript.IsInSpin''' (number piece, number axis) -&gt; boolean

Returns true if such an animation exists, false otherwise.


'''Spring.UnitScript.GetPieceTranslation''' ( piece ) -&gt; number x, y, z&lt;br&gt;
'''Spring.UnitScript.GetPieceRotation''' ( piece ) -&gt; number x, y, z

Get the current translation/rotation of a piece. The returned numbers match the values passed into Move and Turn.


'''Spring.UnitScript.GetPiecePosDir''' ( piece ) -&gt; number px, py, pz, dx, dy, dz

Get the piece's position (px, py, pz) and direction (dx, dy, dz) in '''unit space'''. This is quite similar to ''Spring.GetUnitPiecePosDir'', however that function returns in '''world space'''.

== Threads ==

'''Spring.UnitScript.StartThread''' ( function fun, ... ) -&gt; nil

Starts a new (animation) thread, which will execute the function 'fun'. All arguments except the function to run are passed as-is as arguments to 'fun'. [[Animation-CobThreads|COB-Threads]] has a decent description on COB threads, which are mimicked here in Lua using coroutines.


'''Spring.UnitScript.SetSignalMask''' ( number mask ) -&gt; nil&lt;br&gt;
'''Spring.UnitScript.Signal''' ( number signal ) -&gt; nil

These two support functions offer a powerful way to kill running threads. SetSignalMask assigns a mask to the currently running thread (any new threads started by this one will inherit the signal mask). Signal immediately stops all threads of this unit for which the bitwise and of mask and signal is not zero.

[http://springrts.com/phpbb/viewtopic.php?f=14&amp;t=26274&amp;start=2| What signal will stop which threads?]


'''Spring.UnitScript.WaitForMove''' ( piece, axis ) -&gt; nil&lt;br&gt;
'''Spring.UnitScript.WaitForTurn''' ( piece, axis ) -&gt; nil

Waits until the piece has stopped moving along / turning around the axis. If the piece is not animating, this functions return at once. You can not wait for a spin, because a spin does never finish.


'''Spring.UnitScript.Sleep''' ( number milliseconds ) -&gt; nil

Waits a number of milliseconds before returning.

== Effects ==

'''Spring.UnitScript.EmitSfx''' ( piece, number id ) -&gt; nil

Emits a [[CEG]] effect or weapon from the given piece. The id is based on one of the effect or weapon ids defined in the units unitdef.&lt;br&gt;

If the piece has no geometry, then the sfx is emitted in the +z direction from the origin of the piece.

If the piece has 1 vertex, the emit dir is the vector from the origin to the the position of the first vertex the emit position is the origin of the piece.

If there is more than one vertex in the piece, then the emit vector is the vector pointing from v[0] to v[1], and the emit position is v[0].

Example:

&lt;pre&gt;
--get the id of the CEG effects:
local smokecloud = SFX.CEG   --the first effect from the list in the unitdef
local smokecloud2 = SFX.CEG +1   --the second effect from the list in the unitdef
local fire = SFX.CEG +2   --the third effect from the list in the unitdef
--get the id of the emiter piece:
local turret = piece &quot;turret&quot;
EmitSfx(turret, smokecloud)   --emit the first effect
&lt;/pre&gt;


'''Spring.UnitScript.ShowFlare''' ( number piece ) -&gt; nil

Same as COB's show _inside_ FireWeaponX.


'''Spring.UnitScript.Explode''' ( piece, number flags ) -&gt; nil

Explodes a piece, optionally creating a particle which flies off. Typically used inside Killed. Explode does not hide the piece by itself; if using it outside Killed you may want to Hide the piece immediately after. The flags may be any combination of:
* '''SFX.NONE''': do nothing after creating a heatcloud. Other flags have no effect, except NO_HEATCLOUD. If that is given too, the call is a no-op.
* '''SFX.SHATTER''': shatter the piece in many fragments. Only the NO_HEATCLOUD flag has any effect if this is present.
* '''SFX.EXPLODE''' | '''SFX.EXPLODE_ON_HIT''': the piece that flies of should explode when it hits something.
* '''SFX.FALL''': the piece should be affected by gravity (this is currently always forced on by Spring, to prevent pieces that float in air indefinitely).
* '''SFX.SMOKE''': leave smoke trail.
* '''SFX.FIRE''': the piece is on fire when it flies off.
* '''SFX.NO_CEG_TRAIL''': disable a CEG trail, if present.
* '''SFX.NO_HEATCLOUD''': suppress the heat cloud that's shown by default.

== Other ==

'''Spring.UnitScript.AttachUnit''' ( piece, passengerID ) -&gt; nil&lt;br&gt;
'''Spring.UnitScript.DropUnit''' ( passengerID ) -&gt; nil

Attaches or detaches another unit (a passenger, as this is designed for transports) to this unit. For AttachUnit, piece specifies the attachment point. Attaching to piece &lt;code&gt;-1&lt;/code&gt; makes the passenger unit enter a void state whereby it will never:
     
# take damage, even from Lua (but can be killed by Lua)
# be rendered through any engine path (nor their icons)
# be intersect-able by either synced or unsynced rays
# block any other objects from existing on top of them
# be selectable


'''Spring.UnitScript.GetUnitValue''' ( ... ) -&gt; number | number, number | bool&lt;br&gt;
'''Spring.UnitScript.SetUnitValue''' ( ... ) -&gt; nil

This may be used instead of COB's get and set codes. It is recommended however, to use dedicated Lua functions (e.g. Spring.GetUnitHealth(unitID) instead of GetUnitValue(4)): these functions should be considered a relic of the past. As of 97.0 SetUnitValue now accepts lua booleans as well as numbers to set the value.

Note that these are identical to Spring.GetUnitCOBValue and Spring.SetUnitCOBValue (see also [[Lua_SyncedCtrl#Lua_to_COB]] for the signature of those functions), except that an unitID argument shouldn't be passed to the versions in the Spring.UnitScript table.


'''Spring.UnitScript.GetLongestReloadTime''' ( unitID ) -&gt; number reloadTime

Returns max(reload time) of all the unit's weapons in milliseconds. This utility function exists to aid in porting BOS scripts, which have a SetMaxReloadTime call-in that is called immediately after Create.

== Internal ==

You generally shouldn't need any of the following call-outs, they are provided by the engine to allow the Lua framework to do it's work.


'''Spring.UnitScript.CreateScript''' ( unitID, table callIns ) -&gt; nil

This deletes the unit's current script (whether it's a COB or Lua script doesn't matter), and sets it up with a brand new Lua unit script, initially registering the call-ins given in the table as (string, function) pairs.


'''Spring.UnitScript.UpdateCallIn''' ( unitID, string name[, function callIn] ) -&gt; nil

This updates a single call-in for the unit's current '''Lua''' unit script. If the unit does not currently have a Lua unit script, an error is raised. If the callIn argument is not given (or nil), the call-in with the given name is removed.


'''Spring.UnitScript.CallAsUnit''' ( unitID, function fun, ... ) -&gt; nil

As none of the call-outs takes a unitID, the engine needs to know the ''active unit'' when one of those is called. Using this function another function can be called with the active unit set arbitrarily.


'''Spring.UnitScript.SetDeathScriptFinished''' ( [number wreckLevel] )

Tells Spring the Killed script finished, and which wreckLevel to use. If wreckLevel is not given no wreck is created. May only be called after Killed has been called. DO NOT USE, the framework handles this transparently (it passes the return value of Killed into this function.)


== Localized functions for less typing ==
In unitscript enviroment some of the '''Spring.UnitScript.xxxxx()''' functions are already localized*.
So unless doing anything special, you can save keystrokes:
  Show (piece)
instead of the longer:
  Spring.UnitScript.Show (piece)

'Localization:' Localization is a important way to speed up lua scripts. Every time a variable or function in Lua is used, the Lua-VM has to search for this function first, find it and then put it to use. This slows your script down, especially if a function is called repeatedly (e.g. in a loop). To Avoid such searches, Lua allows you to localize 64 variables or functions per script.

&lt;font color=&quot;#ee0000&quot;&gt;
     for i=1,128, 1 do

     x,y,z= Spring.GetUnitPosition(unitID)

     end&lt;/font color&gt;
*This function is searched and found 128 Times in the table Spring, where it resides
&lt;font color=&quot;#55ee99&quot;&gt;
local fastVersionOfTheSameFunction=Spring.GetUnitPosition

     for i=1,128, 1 do

     x,y,z= fastVersionOfTheSameFunction(unitID)

     end&lt;/font color&gt;
*This function is near instantaneously found and thus faster


[[Category:Animation]]
[[Category:Lua]]</text>
      <sha1>m8t4m3yinmocnuvs6aji8dnqemm8q00</sha1>
    </revision>
  </page>
  <page>
    <title>Animation-LuaScripting</title>
    <ns>0</ns>
    <id>2718</id>
    <revision>
      <id>30352</id>
      <parentid>30351</parentid>
      <timestamp>2017-04-22T23:56:51Z</timestamp>
      <contributor>
        <username>Picassoct</username>
        <id>2854</id>
      </contributor>
      <comment>/* Workflow for animating S3o models in Blender */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3736">== Getting started ==

=== Setup ===

Lua unit animation is implemented partially in the engine, and partially in a Lua gadget which is shipped with Spring in [[springcontent.sdz]]. By default, gadget is not loaded, so a bit of setup is required to enable Lua unit scripts. (In some games, gadget is alredy activated, for example in Zero:k)

To enable Lua unit scripts, create a file ''LuaRules/Gadgets/unit_script.lua'', and paste the following into it:

{|border=&quot;0&quot; cellpadding=&quot;4&quot;
|style=&quot;background: #41545c; border: 1px #aaa solid;&quot;|
&lt;small&gt;
 -- Enables Lua unit scripts by including the gadget from springcontent.sdz
 
 -- Uncomment to override the directory which is scanned for *.lua unit scripts.
 --UNITSCRIPT_DIR = &quot;scripts/&quot;
 
 return include(&quot;LuaGadgets/Gadgets/unit_script.lua&quot;)
&lt;/small&gt;
|}

Also, do check whether your [http://github.com/spring/spring/blob/master/installer/builddata/springcontent/LuaGadgets/system.lua ''LuaRules/system.lua''] is up to date, if you copied this verbatim into your game. (Must be from a later date than 5 september 2009)

Now this is done, you can start putting *.lua files in your ''scripts/'' folder.

=== Workflow ===

Lua has the major advantage over BOS/COB that you do not need to compile it, which can reduce the time to develop scripts quite a bit.

To save further time, do not restart Spring for each small change. Simply run Spring in an window so you can easily switch between your editor and Spring, and use ''/cheat'' and ''/luarules reload'' to reload all Lua unit scripts.

To be able to use commands above, unzip your game into directory named &quot;myGame.sdd&quot;, then you can directly change lua scripts (animations etc.) and reload.

Additionally, for Lua unit scripts operating on Assimp models (primarily .dae and .blend), it is possible to do most of your animating in Blender using the [https://github.com/Anarchid/blender2lus blender2lus] export addon.

=== Workflow for animating S3o models in Blender ===

Anarchids Blendertools can be used to animate (within limits) S3O models. Here are the steps:

1. Export your model into Blender.

2. Restore the Hierarchy in Blender.

https://blender.stackexchange.com/questions/26108/how-do-i-parent-objects
(Ctrl + P) is your friend .

3. If all Pivots are set correctly, create the Animations, one by one.

4. Export the Animations with Anarchids Skript Export tool. 

5. Open the resulting Animationskript for postprocesing.

6. Find Move commands like {['c']='move',['p']=LowerJaw, ['a']=x_axis, ['t']=-0.000000, ['s']=0.012682}, and purge them. Replace them with todos- you will have to insert them manually later, with correct axis and values.

7.In the turn commands - exchange the ['a']=z_axis with ['a']=y_axisz and the old ['a']=y_axis with ['a']=z_axis.
Here is a Regex, to make the text-search easier.

{\['c']='turn',\['p']=([^\s]+), \['a']=z_axis, \['t']=\*

{\['c']='turn',\['p']=([^\s]+), \['a']=y_axis, \['t']=\*

8. Invert (change the sign) of the y_axis values.

9. Start the game and call the Animation you want to debug in a Loop.

10. Congratulations you now have smoothly animated S3o Models.

== Further reading ==
* [http://tvo.github.com/spring/2010/04/19/lus-stumpy.html Stumpy tutorial]
* [http://tvo.github.com/spring/2010/04/26/lus-stumpy-2.html Polishing the stumpy]
* [[Animation-LuaCallins]]
* [[Animation-LuaCallouts]]
* [[Animation-CobLuaDifferences | comparing Lua and COB unit scripts]]
* [[SpringTutorialGame]] contains simple  examples unit scripts
* [[SpringRtsTutorialAnimDef]] examples animation scripts

== TODO ==

* Conversion tool
* Performance measurements
* Link to article in piro's magazine
* Coordinate system (axis, direction of rotation, picture)




[[Category:Animation]]</text>
      <sha1>sreob9sg5s7acjubx1qloihlsab6e6c</sha1>
    </revision>
  </page>
  <page>
    <title>Animation:CobAnimation</title>
    <ns>0</ns>
    <id>2747</id>
    <redirect title="Animation-CobAnimation" />
    <revision>
      <id>27837</id>
      <parentid>17297</parentid>
      <timestamp>2013-10-28T19:46:11Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>de-categorise</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="36">#REDIRECT [[Animation-CobAnimation]]</text>
      <sha1>588lb2zhvuxoznho1hfrtt8id45c2is</sha1>
    </revision>
  </page>
  <page>
    <title>Animation:CobCallins</title>
    <ns>0</ns>
    <id>2748</id>
    <redirect title="Animation-CobCallins" />
    <revision>
      <id>27838</id>
      <parentid>17298</parentid>
      <timestamp>2013-10-28T19:46:35Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>de-categorise</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="34">#REDIRECT [[Animation-CobCallins]]</text>
      <sha1>1mgmhl8igccsjqdyap7zhb5kfvb73fc</sha1>
    </revision>
  </page>
  <page>
    <title>Animation:CobConstants</title>
    <ns>0</ns>
    <id>2749</id>
    <redirect title="Animation-CobConstants" />
    <revision>
      <id>27839</id>
      <parentid>17299</parentid>
      <timestamp>2013-10-28T19:46:59Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>de-categorise</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="36">#REDIRECT [[Animation-CobConstants]]</text>
      <sha1>t8dnprg9ojg7nlraymkak3t19hbkw4g</sha1>
    </revision>
  </page>
  <page>
    <title>Animation:CobHitByWeaponID</title>
    <ns>0</ns>
    <id>2751</id>
    <redirect title="Animation-CobHitByWeaponID" />
    <revision>
      <id>27840</id>
      <parentid>17301</parentid>
      <timestamp>2013-10-28T19:47:21Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>de-categorise</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="40">#REDIRECT [[Animation-CobHitByWeaponID]]</text>
      <sha1>1xaeelvqel8oq9jvqltmeahuj6d6shc</sha1>
    </revision>
  </page>
  <page>
    <title>Animation:CobOverview</title>
    <ns>0</ns>
    <id>2745</id>
    <redirect title="Animation-CobOverview" />
    <revision>
      <id>27841</id>
      <parentid>17292</parentid>
      <timestamp>2013-10-28T19:47:45Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>de-categorise</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="35">#REDIRECT [[Animation-CobOverview]]</text>
      <sha1>g9s6ce08bl5nd6w4lrkzuzhwgxwksqs</sha1>
    </revision>
  </page>
  <page>
    <title>Animation:CobThreads</title>
    <ns>0</ns>
    <id>2750</id>
    <redirect title="Animation-CobThreads" />
    <revision>
      <id>27842</id>
      <parentid>17300</parentid>
      <timestamp>2013-10-28T19:48:13Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>de-categorise</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="34">#REDIRECT [[Animation-CobThreads]]</text>
      <sha1>2ncy3yocvl7g2oeiyqktisew9r8b7fz</sha1>
    </revision>
  </page>
  <page>
    <title>Animation:LuaExamples</title>
    <ns>0</ns>
    <id>3589</id>
    <revision>
      <id>31240</id>
      <parentid>31239</parentid>
      <timestamp>2020-06-09T15:38:15Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>/* Factory */ should really call YARD_OPEN, too</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3971">= LUS Script Examples =

== How to use ==
* &lt;code&gt;FIXME&lt;/code&gt; - Indicates a section of code you will need to tweak to suit your own unit / model
* &lt;code&gt;TODO&lt;/code&gt; - Indicates an optional section of code is missing that you may wish to pad out e.g. with an animation

== Script Scaffolds ==
=== Air Transport ===
&lt;syntaxhighlight lang=&quot;lua&quot;&gt;
-- FIXME: This should be whatever piece name you want to attach to in your model
local attachPiece = piece &quot;attach&quot;

-- called for each unit loaded, returns the attaching piece
function script.QueryTransport(passengerID)
    return attachPiece
end

-- called for each unit loaded to animate the load process
function script.BeginTransport(passengerID)
    -- TODO: any loading animations here
end

--how this is called depends on https://springrts.com/wiki/Gamedev:UnitDefs#transportUnloadMethod
-- 0 (Default) called once on the last unit dropped
-- 1 called for each unit dropped in mid-air
-- 2 called for the last unit dropped
function script.EndTransport(passengerID)
    -- TODO: relevant end of transport sequence animations
end


-- Only called if transportUnloadMethod = 2
function script.TransportDrop(passengerID, x,y,z)
    -- TODO: animation to unload each individual passenger on the ground
end
&lt;/syntaxhighlight&gt;

=== Builder ===
&lt;syntaxhighlight lang=&quot;lua&quot;&gt;
local nanoPieces = {}
-- FIXME: this example has 2 nano pieces to alternate between
for i = 1, 2 do 
     -- FIXME: the pieces are named nanoPiece1 and nanoPiece2 in the model
    nanoPieces[i] = piece(&quot;nanoPiece&quot; .. i)
end
Spring.SetUnitNanoPieces(unitID, nanoPieces)

function script.StartBuilding(heading, pitch)
    -- TODO: This is where you would add your unpack / point towards animation
    SetUnitValue(COB.INBUILDSTANCE, true)
end
function script.StopBuilding()
    -- TODO: This is where you would add your pack-up animation
    SetUnitValue(COB.INBUILDSTANCE, false)
end
&lt;/syntaxhighlight&gt;

=== Factory ===
&lt;syntaxhighlight lang=&quot;lua&quot;&gt;
local nanoPieces = {}
-- FIXME: this example has 2 nano pieces to alternate between
for i = 1, 2 do 
     -- FIXME: the pieces are named nanoPiece1 and nanoPiece2 in the model
    nanoPieces[i] = piece(&quot;nanoPiece&quot; .. i)
end
Spring.SetUnitNanoPieces(unitID, nanoPieces)

function script.QueryBuildInfo()
    -- FIXME: the pad piece is named buildPad in the model
    return piece(&quot;buildPad&quot;)
end

local function OpenCloseAnim(open)
    Signal(1) -- Kill any other copies of this thread
    SetSignalMask(1) -- Allow this thread to be killed by fresh copies
    if open then
        -- TODO: This is where you would add your opening up anim
    else
        -- TODO: This is where you would add your closing up anim
    end
    SetUnitValue(COB.YARD_OPEN, open)
    SetUnitValue(COB.BUGGER_OFF, open)
    SetUnitValue(COB.INBUILDSTANCE, open)
end

-- Called when factory yard opens
function script.Activate()
    -- OpenCloseAnim must be threaded to call Sleep() or WaitFor functions
    StartThread(OpenCloseAnim, true)
end

-- Called when factory yard closes
function script.Deactivate()
    -- OpenCloseAnim must be threaded to call Sleep() or WaitFor functions
    StartThread(OpenCloseAnim, false)
end

function script.StartBuilding()
    -- TODO: You can run any animation that continues throughout the build process here e.g. spin pad
end

function script.StopBuilding()
    -- TODO: You can run any animation that signifies the end of the build process here
end
&lt;/syntaxhighlight&gt;

=== Wind Generator ===
&lt;syntaxhighlight lang=&quot;lua&quot;&gt;
-- FIXME: Assumes model has pieces named 'tower' and 'blades'
local tower, blades = piece(&quot;tower&quot;, &quot;blades&quot;)

function script.WindChanged (number heading, number strength)
  -- Turn the tower to face the wind at 30deg/s
  Turn(tower, y_axis, heading, math.rad(30))
  -- Spin the turbine blades relative to wind strength
  -- FIXME: Here I set rotational speed to half of strength
  Spin(blades, z_axis, strength * 0.5)
end
&lt;/syntaxhighlight&gt;

[[Category:Animation]]</text>
      <sha1>5kmrewfmf2mtwancoinv41vfyqlado2</sha1>
    </revision>
  </page>
  <page>
    <title>Armordefs.lua</title>
    <ns>0</ns>
    <id>3214</id>
    <revision>
      <id>31356</id>
      <parentid>30246</parentid>
      <timestamp>2021-01-23T12:27:37Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>/* More efficient with Lua */ delete this section</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2316">This file sorts units into different armor classes. Weapons can deal different amount of damage to different armor classes. 

=Location=
&lt;code&gt;armordefs.lua&lt;/code&gt; is a file in the &lt;code&gt;Gamedata/&lt;/code&gt; directory of a Spring Game.

=Source=
The engine source code which parses the data from this file is viewable here:

* {{sourcelink|file=rts/Sim/Misc/DamageArrayHandler.cpp}}

=Details=
By default a damage class named &quot;default&quot; exists and every unit is in it.
So if all your weapons only deal &quot;default&quot; damage then this file is not needed.

=Example=
&lt;code&gt;&lt;pre&gt;
local armorDefs = {
	tanks = {
		&quot;supertank&quot;,
		&quot;megatank&quot;,
	},

	infantry = {
		&quot;dude&quot;,
	},
}

--NOTE: only needed for &lt;95.0 (before engine was expecting a cryptic format)
if not(Game) or not(Game.version) then
  for categoryName, categoryTable in pairs(armorDefs) do
    local t = {}
    for _, unitName in pairs(categoryTable) do
      t[unitName] = 1
    end
    armorDefs[categoryName] = t
  end
end

return armorDefs&lt;/pre&gt;&lt;/code&gt;

=Weapon Example=
Goes with above example, a weapon that deals 60 damage to infantry but only 5 damage to tanks:
&lt;code&gt;&lt;pre&gt;
...
damage = {
	infantry = 60,
	tanks = 5,
},
...
&lt;/pre&gt;&lt;/code&gt;

=Shields=
In engine versions =&lt; 96.0 the damage dealt to shields is the weapon's ''default'' value.
This [https://springrts.com/mantis/view.php?id=4450 changed] in v98.0

Putting a shield into an armor class is analogical to units, ie. the armorDefs entry is its weaponDef name:
&lt;code&gt;&lt;pre&gt;
armorDefs = {
  units = { &quot;shieldbot&quot; },
  shields = { &quot;shieldbot_shield&quot; }
}&lt;/pre&gt;&lt;/code&gt;

Then in some damage table:
&lt;code&gt;&lt;pre&gt;damage = {
  default = 123,
  units = 456,
  shields = 789
}&lt;/pre&gt;&lt;/code&gt;

=Links to more Examples=
[http://code.google.com/p/zero-k/source/browse/trunk/mods/zk/gamedata/armordefs.lua zero-K]&lt;br&gt;
Contains scripting to take into account various things like EMP damage.

[http://code.google.com/p/springtutorialgame/source/browse/trunk/SpringTutorialGame.sdd/Gamedata/armordefs.lua|Spring Tutorial Game]&lt;br&gt;
Uses default damage class, except for one unit that is &quot;armored.&quot;

[http://sourceforge.net/p/mwspring/code/899/tree/Gamedata/armordefs.lua MechCommander: Legacy]&lt;br&gt;
Automatically assigns units to an armor class based on [[Gamedev:UnitDefs|UnitDef]] tags and custom params.

[[Category:gamedata]]</text>
      <sha1>9tstzjer78a5vazyvyxh5gkstdhaia5</sha1>
    </revision>
  </page>
  <page>
    <title>Armored when close scripts</title>
    <ns>0</ns>
    <id>3343</id>
    <revision>
      <id>26596</id>
      <parentid>26354</parentid>
      <timestamp>2013-03-18T15:50:11Z</timestamp>
      <contributor>
        <username>Emmanuel</username>
        <id>557</id>
      </contributor>
      <minor/>
      <comment>removed the cob</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="625">--activation of the UnitDef modifier--

in UnitDef the tag  &lt;code&gt;damagemodifier=0.1,&lt;/code&gt;  mean 1/10 of damage will be deduced of health when activated by the AnimDef switch


*know the state of armored and the armormodifier
&lt;code&gt;
local armored,numberarmorMultiple

armored,numberarmorMultiple=Spring.GetUnitArmored(unitID)
&lt;/code&gt;



*armor of UnitDef activated when variable set to 1
&lt;code&gt;
local doorclosed

if doorcloosed=1

then 

Spring.SetUnitArmored(unitID,true)

else 

Spring.SetUnitArmored(unitID,false)

end
&lt;/code&gt;


*[[SpringRtsTutorialAnimDef]] return to the list of animDef exemples

[[Category:Emmanuel]]</text>
      <sha1>tk4k05vc2uu5lnyu7t7o1tzbf6v6ux8</sha1>
    </revision>
  </page>
  <page>
    <title>Artillery Creep</title>
    <ns>0</ns>
    <id>1872</id>
    <revision>
      <id>11686</id>
      <parentid>8331</parentid>
      <timestamp>2007-06-05T03:07:33Z</timestamp>
      <contributor>
        <username>Deer</username>
        <id>1322</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10651">An artillery creep is a quite elementary tactic employed to take reinforced positions in an economically feasible manner.

Units with considerable range are positioned to assault a reinforced area from outside general range of the defenders. These must generally be protected by contingents of closer combat units, up to and possibly including anti-air units. Jamming and radar in games which support these features can be highly beneficial, allowing for minimization of cost as the advance proceeds.

'''Pros'''
*Effective against emplacements
*Efficent with sufficent micromanagement

'''Cons'''
*Vulnerable to active units
*Requires attention
*Preparation time may vary

'''Connections'''

This tactic is viable in nearly all mods on the Spring engine, with the notable exception of Spawn v0.1. It may be especially useful for players of AA, E&amp;E, XTA and Gundam RTS due to the inclusion of numerous effective supporting units.

''' [[Strategy_and_Tactics|&lt;- Back to Strategy and Tactics page]]'''
&lt;div style=&quot;position:absolute;left:-400000px;height:1px;&quot;&gt;
[http://komok.pornwebring.net/520070525.html cialis online pharmacy] messaging
[http://rolofer.pornwebring.net/520070525.html alprazolam medication] bounded
[http://marlop126.100webspace.net/820070525.html ambien prescription] displacement
[http://alfa.pornwebring.net/120070525.html cialis free sample] substituted
[http://anal.freegayspace.com/tanalnik/520070525.html cheap tramadol] mul
[http://tazmanija.juicypornhost.com/120070525.html adipex review] unhandled
[http://mtz80.undonet.com/220070526.html alprazolam 10mg] development
[http://sliva.pornwebring.net/220070525.html does propecia really work] decimal
[http://rinik.sinfree.net/920070525.html tramadol line] evaluations
[http://tudkas.100webspace.net/520070525.html xenical works side effects] kam
[http://konex.150m.com/220070525.html rogaine and propecia] kostishack
[http://musorok.mu.funpic.org/920070525.html phentermine no prescription] eliminate
[http://zomer.juicypornhost.com/420070525.html order valium online] linelength
[http://noterdam.beast-space.net/220070526.html cialis mexico] bugw
[http://nakatilo.na.funpic.org/420070525.html alprazolam addiction] liked
[http://oblomchik.ob.funpic.org/520070525.html cialis testimonials] fft
[http://raki.ra.funpic.org/820070525.html xanax info] microsecond
[http://nognici.atspace.com/120070525.html ambien information] fear
[http://prikolist.juicypornhost.com/920070525.html how long celebrex stay in your system] directs
[http://afgw.juicypornhost.com/220070525.html adipex online] acbg
[http://zimaleto.pornwebring.net/720070525.html type of phentermine] jumping
[http://ulitkka.bravehost.com/120070525.html how long propecia stay in your system] lie
[http://nognici.atspace.com/320070526.html tramadol withdrawal addiction ultram] suspension
[http://sirok.somee.com/920070525.html celebrex dosage] hindered
[http://svprul.xoompages.com/920070525.html buy no online prescription xanax] abnormally
[http://babka.porkyhost.com/120070525.html generic hydrocodone] threatens
[http://legenda.100free.com/620070525.html alli xenical] james
[http://sralnik.150m.com/820070525.html discount generic adipex] fraction
[http://armanda.150m.com/720070525.html xanax drug] search
[http://naves.somee.com/520070525.html valtrex pictures] luck
[http://prikid.150m.com/520070525.html xanax message board] breaking
[http://kapusta.beastzone.org/820070525.html buy cialis] sufficient
[http://kampozitor.100free.com/720070525.html xenical weight loss] terminates
[http://matka.porkyhost.com/220070525.html alprazolam pharmacy] null
[http://lampoid.web1000.com/120070525.html hydrocodone order] divw
[http://tazmanija.sitesfree.com/120070525.html fioricet line] measuring
[http://stakan.yoll.net/220070525.html fioricet prescription] november
[http://zilos.deep-ice.com/420070525.html ambien on line] dbg
[http://sarnik.somee.com/520070525.html propecia reviews] bgtr
[http://dojarka.pornwebring.net/720070525.html propecia shedding] fishort
[http://matka.porkyhost.com/920070526.html hydrocodone drug] maxint
[http://amateur.freegayspace.com/minka/420070525.html propecia results] picture
[http://moshniy.sphosting.net/520070525.html what is celebrex used for] center
[http://karablik.fateback.com/720070525.html xanax description] weigh
[http://ploskiy.juicypornhost.com/320070525.html xanax message board] beforelinking
[http://bondage.freegayspace.com/krupa/620070525.html overnight tramadol] implicit
[http://pilotka.0moola.com/620070525.html ultram abuse] adhere
[http://fo1getz.100free.com/920070525.html what is celebrex used for] lines
[http://menetnik.me.funpic.org/220070525.html buy adipex] moveto
[http://noterdam.beast-space.net/320070525.html alprazolam withdrawal] fear
[http://grugurt.100free.com/120070525.html ultram withdrawal side effects] visually
[http://knopa.0moola.com/820070525.html ultram withdrawal side effects] of
[http://blowjobs.freegayspace.com/smens/320070525.html how long celebrex stay in your system] bond
[http://one.fsphost.com/laveshki/920070525.html adipex ingredient] schedule
[http://probnik.somee.com/220070525.html discount fioricet pharmacy purchase] pandelios
[http://kosmoweb.ko.funpic.org/820070525.html phentermine online] illegal
[http://rolik.yoll.net/820070525.html ambien ambien] variants
[http://bumaga.0moola.com/420070525.html alprazolam overdose] gpm
[http://salat.atspace.biz/320070525.html tramadol narcotic] quotation
[http://ulet.ul.funpic.org/320070525.html valtrex and pregnancy] expensive
[http://bear.freegayspace.com/oralnik/620070525.html ultram 50 mg] rl
[http://agurec.beast-space.com/520070525.html fioricet pharmacy] restricting
[http://navoz.na.funpic.org/520070525.html phentermine review] manager
[http://dojdik.juicypornhost.com/420070525.html buy valium] position
[http://734kenjara.150m.com/620070525.html fioricet rx] concepts
[http://avarija.0moola.com/220070525.html ultram drug medication side effects] kwisatz
[http://stanok.pornwebring.net/220070525.html cialis vs viagra] desired
[http://onal.pornzonehost.com/420070525.html cheapest valium] threeaddruse
[http://batones.yiffyhost.net/420070525.html drug info on xanax] port
[http://nasok.enacre.net/420070525.html valtrex herpes] solid
[http://mazok.freepimphost.com/920070525.html xenical orlistat] piece
[http://sthae.1sweethost.com/920070525.html online cialis] pathnames
[http://danotelo.my-animalsex.net/920070525.html xanax and drug testing] trickiest
[http://mtz80.undonet.com/620070525.html cialis forum] krishnan
[http://zigmund.my-bestiality.org/720070525.html valtrex side effects] interrupts
[http://kanal.pornwebring.net/220070525.html adipex line] fault
[http://ffffds.150m.com/320070525.html adipex free shipping] llim
[http://magazin.free-site-host.com/120070525.html alprazolam mylan] bac
[http://8marta.pornwebring.net/920070525.html celebrex recall] questions
[http://funduk.juicypornhost.com/120070525.html does xenical work] getrusage
[http://pumba.atspace.biz/920070525.html xenical side effects] execute
[http://pumbas.150m.com/520070525.html alprazolam cheap overnight] employees
[http://tapor.juicypornhost.com/220070525.html purchase xanax] inappropriate
[http://one.fsphost.com/mutilovo/620070525.html discount generic adipex] michael
[http://lira.bravehost.com/420070525.html ultram side effects] etc
[http://ruka.atspace.name/820070525.html valtrex overdose] acknowledgement
[http://arogar.100webspace.net/620070525.html xenical works side effects] ediv
[http://durinda.100free.com/120070525.html xanax withdrawl] nature
[http://zapret.yiffyhost.org/320070525.html ambien new] elegant
[http://mugik.my-animal-sex.net/620070525.html xanax and grapefruit] national
[http://garilo.ga.funpic.org/520070525.html phentermine diet pill] avers
[http://parovozishe.noneto.com/520070525.html how long propecia stay in your system] recognize
[http://nout.somee.com/620070525.html xenical reviews] covered
[http://noterdam.pornwebring.net/420070525.html valium buying online] tstg
[http://darbi.pornwebring.net/220070525.html adipex testimonials] but
[http://makalkin.100free.com/420070525.html valtrex and pregnancy] majority
[http://karbon.150m.com/820070525.html adipex sale] slanted
[http://guffi.110mb.com/120070525.html how long valtrex stay in your system] autoinc
[http://lakost.somee.com/420070525.html xanax alcohol] issues
[http://aether.juicypornhost.com/120070525.html fioricet picture] outcome
[http://ladon.atspace.us/120070525.html order tramadol online] skpc
[http://titka.yiffyhost.com/220070525.html cialis generic viagra] undergoing
[http://romashka.sessocities.net/420070525.html hydrocodone prescription] vilified
[http://topgan.90megs.com/320070525.html xanax withdrawal] type
[http://nakidka.na.funpic.org/820070525.html snorting valium] eliminated
[http://votriv.pornwebring.net/920070525.html adipex ingredient] movc
[http://pjatishatk.110mb.com/520070525.html order fioricet online] backwards
[http://nauka.juicypornhost.com/220070525.html tramadol sales] mes
[http://nifertiti.somee.com/520070525.html alprazolam addiction] coming
[http://maksim.juicypornhost.com/920070525.html generic cialis] nline
[http://nana.my-animal-sex.net/820070525.html celebrex dosage] general
[http://tanker.juicypornhost.com/220070525.html discount fioricet] rll
[http://zvonok.bebto.com/120070525.html buy cheap tramadol] described
[http://agent.ecv.vg/420070525.html viagra cialis] christie
[http://porog.pornwebring.net/120070525.html generic cialis online] given
[http://rubilovo.110mb.com/120070525.html adipex loss pill weight] sends
[http://stakan.yoll.net/420070525.html hydrocodone sale] nh
[http://marogka.k9host.org/320070525.html celecoxib celebrex] stutt
[http://bondage.freegayspace.com/zenker/820070525.html tramadol ultram] unimportant
[http://maron.xxx-bestiality.net/120070525.html phentermine missouri] performs
[http://babulki.pornwebring.net/120070525.html valtrex for cold sores] culled
[http://vihlop.vi.funpic.org/820070525.html phentermine and glucophage] way
[http://one.fsphost.com/markob/120070525.html cialis side effects] sternberg
[http://batinok.pornwebring.net/220070525.html adipex price] hdw
[http://mtz80.undonet.com/420070526.html cheap xanax online] affecting
[http://bizarre.freegayspace.com/minkaweb/220070525.html viagra cialis levitra] programmed
[http://incest.freegayspace.com/gribochik/620070525.html ambien information] pessimization
[http://slivko.gethosted.info/420070525.html tramadol hydrochloride] mmr
[http://klukva.fateback.com/720070525.html ultram withdrawal side effects] sub
[http://alfa.beastzone.net/520070525.html dj valium] synchronizing 
&lt;/div&gt;
[[category:Strategy]]</text>
      <sha1>2321eqi1h05d1wu04o2w8wbqnizuilv</sha1>
    </revision>
  </page>
  <page>
    <title>Assimp</title>
    <ns>0</ns>
    <id>3433</id>
    <revision>
      <id>31227</id>
      <parentid>31226</parentid>
      <timestamp>2020-05-06T10:32:26Z</timestamp>
      <contributor>
        <username>Anarchid</username>
        <id>2623</id>
      </contributor>
      <comment>/* Blender Workflow Tutorial */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5532">[[Engine_Development|Development]] &lt; [[Game_and_Unit_development|Game Development]] &lt; {{FULLPAGENAME}}

=Assimp=
Open Asset Import Library (short name: Assimp) is used in Spring for loading a number of common and well supported model formats (.3ds, .dae, .lwo, .blend - currently .obj is parsed by a different code path).

What Spring supports in its Assimp renderer:
* extended metafile (&lt;code&gt;%modelfilename%.lua&lt;/code&gt; next to the modefile)
* still uses tex1 &amp; tex2 texture system of S3O (same shader as S3O)
* 2nd texcoord
* loading of the texture filepaths from the model (don't have to be in &lt;code&gt;unittextures/&lt;/code&gt;)
* when texture filepaths aren't included in the model, it searches for &lt;code&gt;%modelfilename%.*&lt;/code&gt; &amp; &lt;code&gt;%modelfilename%2.*&lt;/code&gt; in &lt;code&gt;unittextures/&lt;/code&gt;
* special modelpieces `SpringHeight` &amp; `SpringRadius` {{removed|101.0}}
* {{new|102.0}} auto-normalize normals and tangents for all AssImp-loaded models
* {{new|95.0}} allow modellers to work around {{mantis|3552}} (differing axes conventions between software) by recognizing a number of new piece-table keys as follows

For the root piece: {{removed|104.0}}
* &quot;xaxis&quot; = float3, &quot;yaxis&quot; = float3, &quot;zaxis&quot; = float3 (determine global orientation of model)
For all pieces: {{removed|104.0}}
* &quot;rotAxisSigns&quot; = float3 (determines direction of script-applied rotations around each axis)
* &quot;rotAxisMap&quot; = number (currently can only be 0=XYZ or 3=XZY, determines coordinate conversion)

=Assimp Textures=
See [[3DModels:Textures#Textures_-_Assimp_Model_Formats_.28DAE.2CMDL.2CMD3_and_others_except_OBJ.29 |3DModels:Textures (Assimp Section)]]

=Standard Workflow=
The following Workflow is provided for a standard 3D Modeling package using the Z = forward, Y = upwards convention, like Maya, Modo or Lightwave. You can also use Blender to export models for ASSIMP, as covered in the next section.

* [[3DModels:AssimpWorkflow]]
* [[3DModels:AssimpMetadata]]

=Blender Workflow Tutorial=
This is a stub containing a simple outline of a Blender workflow.

# Open an existing Blender model or import a different format through the File menu (File &gt; Import). You can import s3o models - complete with materials - using the [https://github.com/sanguinariojoe/blender_s3o_import s3o import] plugin.
# Compose your model by making a series of rigid pieces, and parenting them to one another (ctrl+P). These will be imported as `pieces` into Spring.
# It is preferred to apply all scale transforms, because uneven transforms will not be tolerated by Spring. You can keep rotations, though.
# Blender is Z-up and Spring is Y-up. Spring will import Blender models as Z-up. If you want to fix that, add a root piece to your model, and rotate its children 90 degrees, such that their local Y-axis points up.
# Make sure you have a lamp in your scene while in this mode or your model will be dark. You can delete it before export.
# If you want to animate the model using the animation exporter [https://github.com/Anarchid/blender2lus addon] later, set the rotation mode for all your pieces to be Euler ZXY.
# Applying texture: 
## In the UV/Image editor, click the image icon (Tooltip: Browse Image to be linked) to select your texture. If it's not there, click on Image &gt; Open Image to browse for it.
## In the 3D View, select (right-click) your object and hit Tab to enter Mesh Mode. You can select multiple objects if you want to unwrap the entire model without going piece-by-piece.
## Hit A to select all your faces.
## In the 3D View, hit A to select all the faces there and select your image with the image icon. Assuming there's a UVMap, you should see your texture.
## If you don't see any faces you'll need to add the UVMap to a new texture:
### In the Properties view click on Textures (checkerboard icon).
### Click on Add New Texture (plus icon).
### Select Type = Image or Movie.
### Under Image, click on the image icon and choose your image file.
### Under Mapping, select Coordinates = UV.
### Under Influence &gt; Diffuse, check Color and make sure it's 1.00.
## To add a normalmap:
### Repeat steps 5.5.1 to 5.5.5.
### Under Image Sampling, check Normal Map.
### Under Influence &gt; Geometry, check Normal. Make sure it.s 1.00.
## You'll need to do this for each piece.
# Piece hierarchy:
## Select piece A, hold shift and select piece B. Hit Ctrl+P and it will make piece A a child of piece B.
# Setting piece origins:
## Select a piece.
## Place the 3D cursor where you want the origin to be (left-click).
## Click on Object &gt; Transform &gt; Origin to 3D Cursor.
## You can now rotate your pieces:
### Click on the dropdown &quot;Pivot Center for Rotation/Scaling&quot; and select Individual Origins.
### Rotate.
## Do this for all your pieces.
# Preparing for Spring (this may or may not apply depending on how assimp handles your model.):
## Ensure that the scales for each object in your scene are uniform (that is, x, y, and z scales are equal to each other). A quick way to ensure that is select all (a) and apply scale (ctrl+a -&gt; scale).
# Save your model.
# Select all the pieces of your model, ignore the lamp.
# Click on File &gt; Export &gt; Collada.
# Check &quot;Export Only Selected&quot; and export.
# The dae file will be used as your object.

Don't hesitate to google for answers if you bump into questions with how to use Blender itself. It's a powerful piece of software with a lot of tutorials on how to use - the scope of this article is not teaching how to use Blender, but only how to use Blender for making Spring models.




[[Category:3D Models]]</text>
      <sha1>rvhkg8qxdzqesi12ujr7oafpkrmrxia</sha1>
    </revision>
  </page>
  <page>
    <title>Associated Development Groups</title>
    <ns>0</ns>
    <id>1887</id>
    <revision>
      <id>29244</id>
      <parentid>29243</parentid>
      <timestamp>2015-04-18T10:02:48Z</timestamp>
      <contributor>
        <username>Hokomoko</username>
        <id>2896</id>
      </contributor>
      <minor/>
      <comment>/* Spring: 1944 */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3463">[[Engine_Development|Development]] &lt; {{FULLPAGENAME}}

There are numerous people and groups involved in the Spring project, from development to content creation. This is meant as a cumulative list of associated groups to ease communication between them. 

= Websites =
== Games ==
=== Balanced Annhiliation ===
*[https://springrts.com/phpbb/viewforum.php?f=44 Balanced Annihilation] forum

=== Evolution RTS ===

*[http://www.evolutionrts.info/ www.evolutionrts.info] - Official Website &amp; Forums
*[http://www.wiki.evolutionrts.info/ www.wiki.evolutionrts.info] - Evolution RTS Wiki (Game Manual/How to Play/Unit Guide/Etc)
*[https://plus.google.com/+EvolutionrtsInfo +EvolutionrtsInfo] - Evolution RTS Google+ Page (development updates, twitter style)
*[http://www.source.evolutionrts.info/ www.source.evolutionrts.info] - Evolution RTS Source Code SVN Repository (Google Code)
*[http://www.bugs.evolutionrts.info/ www.bugs.evolutionrts.info] - Evolution RTS Bug Tracker
*[http://www.desura.com/games/evolution-rts www.desura.com/games/evolution-rts] - Evolution RTS on Desura

=== Imperial Winter ===
*[http://www.imperialwinter.com ImperialWinter.com] - Official Website &amp; Forums

=== Spring: 1944 ===
*[http://spring1944.net Spring1944.net] - Official Website &amp; Forums

=== Zero-K ===
*[http://www.zero-k.info Zero-K.info]  - Official Website &amp; Forums


== Misc ==
*[http://www.moddb.com/engines/spring/ Spring on moddb.com]
*[http://answers.springlobby.info/ Spring Q&amp;A Forum]
*[http://springlobby.info/ SpringLobby's Redmine] - The SpringLobby group is the biggest collaborative lobby client work in the Spring community. This is their project's homepage, containing bug tracker and helpful information on their wiki.
*[http://www.smoth.net/phpBB3/ Smoth's Development Forum] - the forum for the games Gundam RTS, Expand and Exterminate, Kernel Panic.
*[http://www.irit.fr/ProgAndPlay/index_en.php Prog&amp;Play] - AI programming game/class using Spring and [[Kernel_Panic|Kernel Panic]]

= Lobby Channels =
'''#moddev''' - real game developers answer your questions

'''#lua''' - ask for help how to read tutorials

'''#sy''' - check back when the new enine will be released

= YouTube Channels =
A unsorted list of youtube accounts that uploaded at least some spring contest.

The amount, context and quality varies.

http://www.youtube.com/PROrANDY

http://www.youtube.com/SteveZissouSpring

http://www.youtube.com/xtaboi

http://www.youtube.com/ForbodingAngel

http://www.youtube.com/knorker

http://www.youtube.com/playlist?list=PL3C03292C49A62F81&amp;feature=plcp (sabutai replay playlist )

http://www.youtube.com/omnianti0

http://www.youtube.com/user/rattle235/

http://www.youtube.com/user/jazcash

http://www.youtube.com/user/Cuntipede

http://www.youtube.com/user/Ruwetuin

http://www.youtube.com/user/xtaboi

http://www.youtube.com/user/kile4568

http://www.youtube.com/user/Canonfudder

http://www.youtube.com/user/wagonrepairer

http://www.youtube.com/user/xenoargh

http://www.youtube.com/user/smoth7

http://www.youtube.com/user/OpenMachines

http://www.youtube.com/user/XHC#p/ur

http://www.youtube.com/user/Pendrokar#p/u

http://www.youtube.com/user/XtaReplay

http://www.youtube.com/user/Kleaut

http://www.youtube.com/user/kylelck

[http://www.youtube.com/playlist?list=PLOj_JX39U3OMuthcAPhuT9XcbZWoQaswZ Enetheru's channel] - primarily blender related terrain and feature creation.

https://www.youtube.com/user/gajop

[[Category: Development]]</text>
      <sha1>2wqgr6g8kbq7dgw8qxmz56jikwv34r5</sha1>
    </revision>
  </page>
  <page>
    <title>Asynchronous Simulation</title>
    <ns>0</ns>
    <id>3123</id>
    <revision>
      <id>27769</id>
      <parentid>27768</parentid>
      <timestamp>2013-10-25T21:09:26Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8362">{{deprecated}}

== Asynchronous Simulation ==
Asynchronous simulation (ASIM) allows the game physics simulation to run alongside the 3D graphics rendering on a dual core CPU or better. This gives higher performance, and allows the engine to maintain a high rendering frame rate (FPS) at all times even in big battles.

Spring &lt;code&gt;disables ASIM by default&lt;/code&gt;, unless a game has been specifically designed to support it. The reason is that ASIM gives rise to Lua related side effects that can be a bit hard to understand, especially for a game designer who has little experience with threaded programming.

== Steps required to support ASIM ==
:'''1.''' Choose a Lua Threading Model &gt; 2 below
:'''2.''' Rewrite the Lua code to conform with the rules imposed by that threading model
:'''3.''' Learn about the side effects of the model chosen and tweak your code to work around it

== Lua Threading Models==
These modes can be set for a game using &lt;code&gt;luaThreadingModel&lt;/code&gt; in [[Modrules.lua#system|Modrules.lua]]. The engine can override with the setting &lt;code&gt;MultiThreadLua&lt;/code&gt;. A higher mode generally means that the game will perform better, with less side effects, but also requires more work. A game that specifies &lt;code&gt;luaThreadingModel &gt; 2&lt;/code&gt; will be considered ASIM compatible, and will have &lt;code&gt;ASIM enabled by default.&lt;/code&gt;

:'''&lt;code&gt;0&lt;/code&gt;. No MT, single threaded'''
::For reference only, this mode should never be used in practice

:'''&lt;code&gt;1&lt;/code&gt;. Single state'''
::This mode has a single Lua environment for everything. It will cause a significant slowdown because simulation and rendering threads block each other trying to access the shared Lua environment. Especially problematic is Lua rendering; being inherently time consuming (looping through large amounts of units etc.) it will force the simulation thread to wait. This gives rise to the classic phenomenon of having incredibly high FPS but still lagging behind (high ping) since simulation cannot keep up with the normal pace.

:'''&lt;code&gt;2&lt;/code&gt;. Single state, batching of unsynced events &lt;code&gt;(default mode)&lt;/code&gt;'''
::This mode is considerably better than mode(1) since it has a separate Lua environment for LuaUI.
::All simulation events sent to LuaUI are also batched/delayed to reduce the need for the threads to block each other. For instance, if simulation triggers UnitMoved(), the event will not reach LuaUI right away, but is put in a batch and handled as soon as possible by the rendering thread. The batching system is managed, i.e. if the unit that triggered UnitMoved is about to be deleted (and thus invalidated) the batch is forcefully run before deletion occurs. Because the forced batch run is performed by the simulation thread, locking is required and this can degrade simulation performance for the same reasons as in mode(1).
::The other means of unsynced communication, SendToUnsynced and Script.LuaUI.XXX() are also batched and managed to make sure any object ID or such sent are still valid once the message arrives. Note: Script.LuaUI.XXX() does because of the batching NOT have a return value.
::This mode unfortunately suffers the same problems as mode(1) for rendering gadgets, since simulation events must be sent to the gadgets directly (without batching) in order not to desync the game.
::With this mode, it is illegal to invoke LuaUI from another Lua environment (LuaGaia or LuaRules). This can happen depending on what call-ins the game and any user-enabled widgets implement. If such an attempt to invoke LuaUI is detected, it will be skipped to prevent a deadlock, and a warning will also be printed in the console. Unfortunately there is no other solution than to stop using the call-in that throws the error, or to use a higher threading model.

:'''&lt;code&gt;3&lt;/code&gt;. Dual states for synced, batching of unsynced events, synced/unsynced communication'''
::'''via EXPORT table and SendToUnsynced'''
::Same as mode(2), but the gadgets have separate Lua environments depending on whether the simulation or rendering thread is invoking it. This alleviates the negative performance impact for rendering gadgets, but makes it impossible to directly share synced gadget data to the unsynced part via _G --&gt; SYNCED. To work around this limitation, this mode introduces _G.EXPORT that is automatically copied to SYNCED.EXPORT. Only small amounts of data should be stored in the EXPORT table, because the copying is performed very frequently. Cyclical and/or very deeply nested tables are not allowed. Larger data can be stored temporarily, e.g.
::_G.EXPORT.myhugetable = huge_table
::SendToUnsynced(&quot;huge_table_available&quot;)
::_G.EXPORT.myhugetable = nil

:'''&lt;code&gt;4&lt;/code&gt;. Dual states for synced, batching of unsynced events, synced/unsynced communication'''
::'''via SendToUnsynced only'''
::Same as mode(3) but with the EXPORT table disabled to increase the performance further. You don't need EXPORT, SendToUnsynced alone is sufficient.

:'''&lt;code&gt;5&lt;/code&gt;. Dual states for all, all synced/unsynced communication (widgets included)'''
::'''via SendToUnsynced only'''
::Same as mode(4), but adds separate Lua environments for LuaUI depending on whether the simulation or rendering thread is invoking it. With dual LuaUI states, batching is no longer needed and therefore disabled. This makes it even faster, since batching overhead is eliminated and forced batch runs (see mode(2)) are not needed. However, this mode adds significant complexity for the programmer, since essentially two instances of the same widget are run, and only the calling thread determines which one is invoked. As a rule of thumb, all simulation events (GameFrame etc.) are invoked by the simulation thread. All UI and rendering events and Update() are invoked by the rendering thread. So, if a variable is modified in GameFrame(), that change cannot be seen in Update(). The widget must instead use SendToUnsynced to communicate any data from the simulation widget instance to the rendering widget instance. Design wise it may be suitable to write the widget similarly to a gadget, with clearly separated &quot;synced&quot; and &quot;unsynced&quot; parts, each with their own variables, functions and call-ins.

:'''&lt;code&gt;6&lt;/code&gt;. Dual states for all, all synced/unsynced communication (widgets included)'''
::'''is unmanaged and via SendToUnsynced only'''
::Same as mode(5) but the SendToUnsynced and Script.LuaUI.XXX() communication is unmanaged. The Lua coder must manually check if object references sent are still valid when the message arrives.

== Common side effects ==
:'''1. Out-of-order execution''', applies to all threading models
::All rendering call-ins (Draw*, Update, Mouse/Keyboard) must be designed so that they work correctly even if objects are deleted (and possibly replaced by another object with same ID) in between the rendering call-ins. This means rendering code that stores lists of e.g. units in global variables must update these according to UnitCreated/UnitDestroyed events or re-check the units for validity before use. Keep in mind that if an object has been replaced, the operation that you intended to perform may no longer be valid for the new object.

:'''2. Performance hit for rendering call-ins in gadgets''', applies to threading models &lt; 3
::Avoid writing any time-consuming rendering code in a gadget. The easy way out is to let a widget do the rendering instead. The gadget can send a message to the widget by calling Script.LuaUI.XXX(), but the value returned from this call is undefined if ASIM is enabled. Similarly, the result obtained when checking for the existence of a Script.LuaUI.XXX function can be unpredictable, instead the widget may send a LuaRules message to indicate that the function now exists or has ceased to exist. If the LUA-SYNC-CPU indicator appears in the upper right part of the window it usually indicates a performance problem

:'''3. Batching glitches''', applies to threading models 2 - 4
::For example, a widget that processes an UnitEnteredLOS event cannot safely make any assumptions about the unit actually being in LOS. Because of batching delay, it may have left LOS already when the message is processed, and an attempt to get further info about the unit may therefore fail, since access to out-of-LOS units is restricted. Numerous events are more or less affected by this type of issue.</text>
      <sha1>lp9h5nmokt9mx5fwe49ns0miav6fh0a</sha1>
    </revision>
  </page>
  <page>
    <title>AtlasedTexture</title>
    <ns>0</ns>
    <id>1822</id>
    <redirect title="Gamedev:Glossary" />
    <revision>
      <id>27796</id>
      <parentid>26913</parentid>
      <timestamp>2013-10-27T18:11:22Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>redirect to glossary page</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="45">#REDIRECT [[Gamedev:Glossary#AtlasedTexture]]</text>
      <sha1>hkoitxx4swum6gtrtquo1fajg394n62</sha1>
    </revision>
  </page>
  <page>
    <title>Authors</title>
    <ns>0</ns>
    <id>2802</id>
    <revision>
      <id>31080</id>
      <parentid>31003</parentid>
      <timestamp>2019-10-26T20:03:28Z</timestamp>
      <contributor>
        <username>Hokomoko</username>
        <id>2896</id>
      </contributor>
      <comment>/* Special Thanks */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1991">[[Engine_Development|Development]] &lt; {{FULLPAGENAME}}

=Authors=

Spring (formerly TASpring) was originally written by the Swedish clan SY,
and later extended by a bunch of other people, some of whom are listed
here (in alphabetical order):

==Active==

* '''[[User:abma|abma]]''' ''Python AI Interface, installer, infrastructure, tester''
* '''[[User:hokomoko|hokomoko]]''' ''Serialisation, simulation, optimisations, bug-fixes''
* '''jK''' ''GFX, simulation, Lua, sound, OpenMP, OS related''
* '''Kloot''' ''GFX, simulation, Lua, bug-fixes''

==Retired==
* Auswaschbar (Karl-Robert Ernst)
* fnordia
* '''[[User:hoijui|hoijui]]''' ''AI, build-system, installer, headless, sound''
* imbaczek (Marek Baczynski)
* jcnossen
* SJ
* Tobi (Tobi Vollebregt) ''releases, buildbot, simulation, Lua''
* [[User:Tim_Blokdijk|tim blokdijk]]
* trepan
* victor
* xiphux
* zerver ''GFX, simulation, Lua, multithreaded''
* cleanrock ''GFX, bug-fixes''

==Special Thanks==
Additionally for significant contributions to the spring engine or the community, special gratitude goes to (in alphabetical order):

* Beherith
* betalord
* bibim (Yann Riou)
* BrainDamage
* colorblind (Teake Nutma)
* dansan (for hosting replays.springrts.com)
* det
* eriatarka
* FLOZi (Craig Lawrence)
* [https://github.com/gajop gajop (Gajo Petrovic)]
* hughperkins (Hugh Perkins)
* ILMTitan
* initram
* KDR_11k
* koshi
* Krogothe
* M2
* MadrMan
* Nathaniel Smith
* Nicolas Brodu
* rattle
* satirik
* semi
* smoth
* SpliFF
* tizbac (Tiziano Bacocco)
* quantum
* zenzike (Nicolas Wu)
* zizu
* zydox (for sharing A LOT of CPU power for running the validation test / buildslave)

=Notes=

NEVER send bug reports, help- and feature-requests directly to the
persons in this list, use the [http://springrts.com/mantis/ bugtracker] or the [http://springrts.com/phpbb/ forum] instead.
Of course you are free to write mails about donating.

For additions/corrections to the list, please post in the community forum.


[[Category:Engine Dev]]</text>
      <sha1>io8aljvcw4eizviyhpvadno8iclal1b</sha1>
    </revision>
  </page>
  <page>
    <title>Autohosts Botflags</title>
    <ns>0</ns>
    <id>3815</id>
    <revision>
      <id>30435</id>
      <parentid>30434</parentid>
      <timestamp>2017-09-16T10:02:23Z</timestamp>
      <contributor>
        <username>Silentwings</username>
        <id>2883</id>
      </contributor>
      <minor/>
      <comment>rename page</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="37">[[Main_Page|Wiki]] &lt; {{FULLPAGENAME}}</text>
      <sha1>5xrv4p8mucuxh8zxgzosth88r2tslhc</sha1>
    </revision>
  </page>
  <page>
    <title>BOTA</title>
    <ns>0</ns>
    <id>1847</id>
    <revision>
      <id>21267</id>
      <parentid>21266</parentid>
      <timestamp>2011-02-24T16:50:18Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>/* Where is BOTA going now? */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5062">[[Category:Games]]

=Basically OTA=

* Latest version: 1.7 beta 10.1 ([http://springfiles.com/spring/games/basically-ota-6 download])
* Related forum thread: [http://springrts.com/phpbb/viewtopic.php?f=14&amp;t=9291 here]

==About BOTA==

[[Image:Botabattle.jpg|thumb|200px|left|A battle at full tilt in BOTA 1.4]]
Basically OTA, or BOTA, was originally masterminded and created by Thor. Thor, like many old time OTA players, felt that the spring conversion of OTA was lackluster and sloppy at best, as Spring's lack of features at the time made it difficult to properly recreate the feel and gameplay of OTA. But instead of working to create an exact conversion of OTA, he decided to create his own mod in the flavor of OTA, calling it &quot;Basically OTA&quot;. BOTA was first released as Version 1.0 around the same time as AA Version 1.35.

Instead of aiming to change the game's balance through things like armor classes and weapon types as Absolute Annihilation has, BOTA uses the same type universal damage stats as OTA, and instead determines unit balance through basic stats such as Hit Points, Speed, and Range. All of the units in BOTA have recieved a substantial Range and Speed increase. Also, like OTA, Missile Towers can shoot at ground, laser and ballistic weapons can hit and kill air (because of the universal damage system). Mobile Units in BOTA 1.4 also have a much greater speed and acceleration than the previous versions.

==BOTA Gameplay==

Gameplay in BOTA is based on the &quot;War of Manuever&quot; style of strategy. Many mobile units have a range advantage over defensive turrets. Also, level 1 units continue to be effective straight to the end of a match in many cases. Level 2 units, while more powerful than level 1, do not have a significant HP advantage over level 1 and can be overwhelmed easily by superior numbers of level 1. [[Image:Botaarty.jpg|thumb|200px|right|Level 2 Artillery Supporting a level 1 Rush.]] It is always best to use level 2 as a supplemental force for your level 1 grunts.

BOTA does not seek to be an exact replica of OTA. It keeps the original OTA units without adding new ones, and it does not use any Armor classes like other Spring TA mods. What BOTA seeks to do overall is to take the OTA experience and streamline it to a less convoluted form. 

It is very easy to recover from a stupid mistake in BOTA unlike other mods and while the MT spam seen in OTA is still prolific, it can be worked around. Units move a bit more slowly as compared to other mods, but they also die more quickly. There is a more noticeable difference between CORE and ARM than there has in other mods. Balance is not &quot;Mirrored&quot; like in most games (near identical stats), but rather it emphasizes the differences between the ARM and CORE. Arm being fast maneuverable and having a strong Navy and Airforce. CORE being very powerful all around but having its greatest advantage in the late game.

BOTA also has a stronger &quot;Arcade Game&quot; feel to it compared to any other RTS you may play. The overall intent being to take what made OTA great and emphasize that while downplaying the more &quot;traditional&quot; RTS elements.

==History of BOTA==

=== Version 1.3 ===
Thor ceased development with ''BOTA Version 1.3''. Unfortunately this was also  at the same time that the mod began to pick up in popularity. The mod's primary supporter, Quanto, opted to contact Thor to allow him to continue the mod where Thor left off. Thor agreed, and Quanto promptly completed BOTA Version 1.4.

=== Version 1.4 ===
''BOTA Version 1.4'' is the first ever Spring Mod that features the '''&quot;Fire Through Friendlies&quot;''' and '''&quot;Friendly Fire&quot;''' found in OTA. Now, more than ever, BOTA closely resembles OTA in gameplay. But as Thor had always strongly said, BOTA was never meant to '''''be''''' OTA, it has simply been a different take on OTA gameplay.

Future Versions of BOTA may still be completed, mainly to keep BOTA up to date with future spring versions, and also to possibly tweak its balance while still remaining faithful to Thor's Original Concept.

=== Version 1.6 beta2 ===
There is also an alternate Beta Version that is Open for tryouts, it is a quick preview of what is in store for the future BOTA releases and features massive graphical improvements (by BOTA standards). 

Download links: Version 1.6(Fix-7)
* [http://jobjol.nl/2107 Beta at SpringFiles]

==Where is BOTA going now?==
At this point BOTA has reached a happy medium balance wise, there isn't a &quot;Sure-fire&quot; way to win no matter how many times you play. And new players will be happy to discover new tactics with every game they play.

BOTA's development will probably focus on a more streamlined feel and bug fixing. At this point, many of the new unit models are slightly buggy COB wise, and this will be corrected when Quanto get's off his lazy ass. 
A proper LUA interface is in order along with proper LUA mod options to be included for the latest spring version. The final version of 1.6 may still be a long way off, but at this point the gameplay is where it should be.

Back to [[Games]]</text>
      <sha1>cpvql3mfqk6g4m0txd1afynwt6ifoqb</sha1>
    </revision>
  </page>
  <page>
    <title>Balanced Annihilation</title>
    <ns>0</ns>
    <id>1990</id>
    <revision>
      <id>31847</id>
      <parentid>31845</parentid>
      <timestamp>2022-10-13T21:03:43Z</timestamp>
      <contributor>
        <username>Ares</username>
        <id>2960</id>
      </contributor>
      <comment>/* Overview */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3341">[[category:Games]][[category:Balanced Annihilation]]
'''[[Games|&lt;--Back to Games]]'''


https://balancedannihilation.com/balanced-annihilation.png

===Links===
* [https://discord.gg/jvFCZHBXTU BA Discord]
* [https://springrts.com/phpbb/viewforum.php?f=44 BA forum]

===Overview===
Balanced Annihilation is a TA mod remastered with improved graphics and balance. The philosophy of Balanced Annihilation follows three principles:  

* '''Refined TA mod:''' BA's lineage traces back to TA and the mods that refined its classic graphics and gameplay across decades. 

* '''Competitive Gameplay:''' BA has matured through over 15 years of playtesting by veteran players in both casual and tournament settings. Faction and unit choices offer many unique tactical possibilities.

* '''Stable Balance:''' BA is conservatively balanced to favour strategic play. Every unit has a role and few units get truly obsolete as the game progresses.

===Tournaments===
Balanced Annihilation runs competitive 1v1 tournaments that attract many dedicated players. At 64 players the [https://challonge.com/CROWN_CUP_4 2022 Crown Cup 4 tournament] was the largest tournament in Spring's 16 year history. Players battle for a place in the Balance Committee and the BA crown, a unique in-game item for the commander that can only be aquired by winning the event.

* [https://challonge.com/CROWN_CUP Crown Cup 1] '''1st Cartouche, 2nd PRO_rANDY, 3rd Teddy'''
* [https://challonge.com/CROWN_CUP_2 Crown Cup 2] '''1st Cartouche, 2nd Teddy, 3rd PtaQ'''
* [https://challonge.com/CROWN_CUP_3 Crown Cup 3] '''1st Cartouche, 2nd PtaQ, 3rd Teddy'''
* [https://challonge.com/CROWN_CUP_4 Crown Cup 4] '''1st Cartouche, 2nd Teddy, 3rd PRO_rANDY'''
* [https://challonge.com/tournaments/signup/jpTfjxpFtF Crown Cup 5] '''Upcoming Event''' 19th November 2022

===History===

Balanced Annihilation is a TA remake built using the [https://en.wikipedia.org/wiki/Spring_Engine Spring engine] whose history traces back to the mod [[Absolute_Annihilation|Absolute Annihilation]] by Caydr (2002-2006). AA was based on [http://bsr.tauniverse.com/faq.html ÜberHack] by Brave Sir Robin (1998-2002). The [https://www.clan-sy.com/ Swedish Yankspankers] work on the TA Demo Recorder (1999-2004) made it possible for AA to be ported to 3D and these efforts led to the creation of Balanced Annihilation in 2006. Zero-K and BAR were both forked from Balanced Annihilation in the past.

===Development===

The current developer is [https://springrts.com/phpbb/memberlist.php?mode=viewprofile&amp;u=10773 Ares] The previous maintainers, who shouldn't be forgotten, were: 
* [https://springrts.com/phpbb/memberlist.php?mode=viewprofile&amp;u=2568 Shox]
* [https://springrts.com/phpbb/memberlist.php?mode=viewprofile&amp;u=10555 Floris] 
* [https://springrts.com/phpbb/memberlist.php?mode=viewprofile&amp;u=9073 Decay] (2016)
* [https://springrts.com/phpbb/memberlist.php?mode=viewprofile&amp;u=7229 Silentwings] (2012-16) 
* [https://springrts.com/phpbb/memberlist.php?mode=viewprofile&amp;u=5958 Beherith] (2011-12) 
* [https://springrts.com/phpbb/memberlist.php?mode=viewprofile&amp;u=7403 Niobium] (2011)
* [https://springrts.com/phpbb/memberlist.php?mode=viewprofile&amp;u=4460 TheFatController] (2010-11)
* [https://springrts.com/phpbb/memberlist.php?mode=viewprofile&amp;u=326 NOiZE]. (2006-11)


'''[[Games|&lt;--Back to Games]]'''</text>
      <sha1>1vgcssm6it38vmh53vb7qv4vusbnyu3</sha1>
    </revision>
  </page>
  <page>
    <title>Balanced Annihilation:Camera Control</title>
    <ns>0</ns>
    <id>1747</id>
    <revision>
      <id>24370</id>
      <parentid>20210</parentid>
      <timestamp>2012-05-02T08:42:05Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11540">{{Balanced_Annihilation_deprecated}}

[[category:Balanced Annihilation]]
'''[[Balanced Annihilation|&lt;--Back to Balanced Annihilation]]'''

==Camera Controls==
&lt;!-- I think this is no longer true:
There are five camera modes in Spring. To change camera modes use CTRL Middle Button (Mouse 3), CTRL J or CTRL Backspace (Also SHIFT [Mouse 3,J or Backspace]). Middle button, Backspace or J toggle &quot;free look&quot; mode for the current camera view. This allows you to move the camera around using the mouse. --&gt;
Pressing Ctrl and one of the first five F buttons (F1-F5) will change your camera to that view. You can also use CTRL Middle Mouse Button.

===Camera Modes===

There are five different camera modes in Spring. Everyone likes a different one. Try them all out to decide what you like best.

====Classic Overhead (TA) Style====
The default view, very similar to the view OTA had. Use the arrow keys or move the mouse to the edge of the screen to pan around the map. The scroll wheel zooms in and out. Ctrl &amp; scrolling will tilt the camera. Free look mode (click the middle mouse button) also pans around the map. It always &quot;faces&quot; straight north.

This is the easiest view for OTA players to use. It functions exactly the same as the OTA camera, so no new tricky controls are needed to properly enjoy the game. This view has recently had camera tilt added (see above), but still does not really show off the full glory of the Spring engine, as you are limited to one compass direction. It is the favorite view mode for most people, as most people played OTA or other similar RTS games with a traditional top-down view.

Insider note: there is also a (upside-down) flipped camera, type /viewtaflip to use it.

====Total War Style====
The same camera system used in the Total War series of games. It runs at a fixed height above the ground, which cannot be changed. Use the arrow keys or move the mouse to the edge of the screen to pan around the map. Scrolling the scroll wheel tilts the camera. Putting the mouse in the top corners of the screen rotates the view. Free look mode (click the middle mouse button) pans around the map.

This mode is good for those familiar with the Total War games. Like the OTA camera, it does not allow for full freedom of movement, so it does not show off the engine as much as it could.

====FPS Style====
In this view the camera is controlled just like in a first person shooter. Use arrow keys to fly forward/backward and strafe left/right. Hold the middle mouse button to aim the camera. Use the scroll wheel to zoom in and out.

This is the easiest camera to position. However, it can get quite tedious trying to control the camera in the middle of a battle. Its good for screenshots and FPS junkies.

====Rotatable Overhead Camera====

This is a new camera system invented by the SY's. You can change the camera height by scrolling. Use the arrow keys to pan around the map. The scroll wheel moves the camera up and down vertically. Free look mode (click the middle mouse button) lets you aim the camera from its current position.

This is perhaps the best camera, as it allows for totally free movement and aiming, but with some handy restrictions on the height. It is the second most popular view besides the OTA view. It's useful for both screenshots and actual gameplay.

====Free Camera====

Otherwise known as the smooth camera. Its primary control interface is the
keyboard, and it really isn't intended to be used for gameplay (although it may 
be if the controls get improved, especially with respect to minimap view 
setting). It has smooth motion, and should make for better video captures. It is
not included in the default toggle list for CTRL MiddleMouseButton control.

The main controls are the arrow keys, with the following modifiers:

ALT: side scrolling
CTRL: up/down tilting
SHIFT: up/down scrolling
META: speedup

It will switch to a special mode if you are tracking a unit. The right/left
arrow keys then control the angular rotation about the unit, and the
up/down key control the speed of motion towards the unit. The further
away you are from the unit, the faster you will move towards it. It will
also always face the unit, so that you'll see ground shakes rather then
unit shakes.

There are 3 different modes for handling the ground.

1. CamFreeGroundOffset == 0
- the camera can move anywhere

2. CamFreeGroundOffset &lt; 0
- the camera is always offset from the ground height by -CamFreeGroundOffset

3. CamFreeGroundOffset &gt; 0
- the camera can be &quot;locked&quot; to the ground by using SHIFT UP_ARROW.
(and will use  CamFreeGroundOffset as the offset). To release the lock,
simply press SHIFT DOWN_ARROW

If the camera is locked to the ground, then the CamFreeAutoTilt and
CamFreeGravity parameters come into play. AutoTilt will point the camera
in the direction of the ground's slope. Gravity will be used if you jump off
of a ground ramp.

/luaui cam
- list available parameters

/luaui cam &lt;param&gt;
- show current value of &lt;param&gt;

/luaui cam &lt;param&gt; &lt;value&gt;
- set &lt;param&gt; to &lt;value&gt;

====FPS &quot;Mode&quot; (C)====
Press 'C' to toggle &quot;First Person Shooter Mode&quot;.

Controls:
*Up Arrow: Move in the direction the unit's base (legs or tracks) is facing
*Left Arrow: Rotate Legs to the left
*Right Arrow: Rotate Legs to the right
*Mouse: Aim default gun. The gun will lock on to any targets the cursor moves close to, making tracking and firing at targets much easier.
*Left Mouse Button: Shoot whatever guns the engine has decided to let you shoot at the current target.
*Right Mouse Button: Click to enter Free Fire Mode. In this mode, the AI will aim and fire for you as you move.

===Zooming Changes===
Starting in version 0.72b1 there were some changes made to the zooming controls.

====Mousepoint Zooming====
When you zoom out the camera will move back from the center of the screen in such a way as to expand your view.  When you zoom back in, however, the camera will shift focus towards the mouse pointer as your new center.

====Tab Zooming====
Pressing the TAB key will zoom you out to the point where the entire map will be visible from a special top-down perspective(in future versions this view will be [[CustomUnitIcons|iconified with CustomUnitIcons]]), then pressing the TAB key again with zoom you back to the same height and angle of view you were at before, but again, using your mouse pointer position as the new center.

===General Function Keys===

For the most part, the function keys control what the camera sees, so they are listed here for lack of a better place for them.

*'''F1''': Toggles Contour Markings On/Off. These color coded contour markings represent the height of the map. One iteration through the colors (ie: red-green-blue-red) indicates a height difference of 32.
*'''F2''': Toggles Path map On/Off. The path map works the following way: 
**'''Mobile Unit Selected''': If you have a mobile unit selected, then the pathmap shows where that specific unit can move (green) and where it cant (red). The greener the map, the better the unit can walk on that area. Zones that can't be walked or driven on are always solid red.
**'''Builder Selected''': When you have a builder selected and have clicked on a building in its build menu (i.e. a Kbot lab), the path map will show you where you can build that building. Its fairly easy to understand, with the green zones representing buildable areas, and the red zones representing the areas where you cannot build. Note that the marks represent the &quot;center-point&quot; of the build, so if your mouse cursor is over green, you can build there, even if there's red within the building's border.
*'''F3''': Moves the camera to the position of the last message. Messages can be from units or alerts placed on the minimap by your allies.
*'''F4''': Toggles Metal Map On/Off. If the map is green, there is metal there. If the map is black, there is no metal. If the map is white, there is lots of metal and it would be a good strategic place to hold. The camera automatically switches to Metal Map mode when placing Metal Extractor structures, and switches back when you stop placing these structures.
*'''F5''': Toggles the GUI On/Off. Good for taking screenshots.
*'''F6''': Toggles Sound On/Off. Self-explanatory.
*'''F7''': Toggles the Dynamic sky. If the game is running slowly, try turning this off to speed it up a little bit.
*'''Ctrl+Shift+F8''': Save the Game. Not currently supported.
*'''F9''': Show/Hide Unit Status. Unit Status bars are: Health, Building percentage, experience, and group numbers.
*'''Ctrl+Shift+F10''': Video Capture. After pressing spring will jump to the deskop and will ask with which codec to record. When selected it will jump back in spring, if it doesn't just click on it! The video capture will unpause if the game was paused and start record. You may experience low FPS though after you stop recording by pressing F10 or exiting Spring it will save video in the original Spring Folder at a normal speed!
*'''F11''': Toggle Lua widget selector with what you can turn on/off lua scripting widgets. Ctrl   F11 is lua widget tweak mode.
*'''F12''': Screenshots. Takes a screenshot and saves it to Spring/Screenshots/Screenshot###.jpg, where ### is the number of the screenshot.
*''';/L''': These commands toggle visible Fog of War and Radar Coverage areas. &lt;b&gt;L&lt;/b&gt; toggles visible line of sight while &lt;b&gt;;&lt;/b&gt; controls radar and jammer coverage viewing within the Fog of War mode. All Radar and Line of Sight is impeded or helped by terrain; placing a radar/jammer on a hill will allow you to view/jam most of the area; placing either in a pit will not allow you to view/jam beyond the pit. Sonar coverage is included in these overlays.
**'''Color Key (OUTDATED!)''': 
***'''Light Green''' = Radar and LOS 
***'''Green''' = Aerial LOS and Radar
***'''Dark Green''' = Radar only
***'''Normal''' = LOS only 
***'''Grey''' = Aerial LOS only
***'''Dark Grey''' = No coverage in that area
***'''Light Red''' = Jammed with LOS 
***'''Red''' = Jammed with Aerial LOS 
***'''Dark Red''' = Jammed with no LOS 
***'''Light Yellow''' = Jammed, LOS and Radar 
***'''Yellow''' = Jammed, Radar, and Aerial LOS 
***'''Dark Yellow''' = Jammed and Radar 
**'''Important''': Areas with Aerial LOS permit viewing only of air units, projectiles, and certain graphics such as smoke and shields. A perfect base would have light yellow everywhere. Due to lack of code optimization, the LOS/Fog of War overlay is updated about once every two seconds (?), so it would be unwise to rely upon it to give you coverage information about fast moving units such as Peepers and Eagles.

*'''TAB''': Toggles &quot;[[Using_Spring#Tab_Zooming|Tab Zoom]]&quot;
*'''Pause/Break''': Pauses the game. While the game is paused, you can still scroll around the map and issue orders, but nothing actually happens until the game's unpaused.

===Snapping/Panning Camera to a Specific View===
Middle click(MOUSE3) on the mini-map to snap the center of the view to that point on the map. Click and drag the middle mouse button to move the camera around the map. (Right click, formerly used to move the camera on the minimap, now gives orders).

Press F3 to snap the camera view to the point of the last &quot;message&quot; (&quot;Unit is under attack&quot;, &quot;player 1 has placed a point: look here!&quot;).

Press T to lock the camera to track the currently selected units. The camera will move so that the selected units are always centered. Move the camera manually to stop the tracking.

'''[[Balanced Annihilation|&lt;--Back to Balanced Annihilation]]'''</text>
      <sha1>6z3zvxp7sdq28qdt8iwv1e534sb3omj</sha1>
    </revision>
  </page>
  <page>
    <title>Balanced Annihilation:Chat</title>
    <ns>0</ns>
    <id>1750</id>
    <revision>
      <id>24369</id>
      <parentid>19630</parentid>
      <timestamp>2012-05-02T08:42:01Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7737">
{{Balanced_Annihilation_deprecated}}

[[category:Balanced Annihilation]]
'''[[Balanced Annihilation|&lt;--Back to Balanced Annihilation]]'''

==Chat, Cheats, and Text Commands==



Pressing ENTER will bring up a &quot;say:&quot; prompt which you can use to communicate with other players or issue &quot;Text Commands&quot;.  &lt;br&gt;
-To send a message to all who are connected, type your message and press ENTER.&lt;br&gt;  
-To send a message only to your allies, preface your message with &quot;a:&quot;.&lt;br&gt;  
-To send a message to any spectators, type &quot;s:&quot; &lt;br&gt;
-To send a message to a certain player, type &quot;/w &lt;playername&gt;&quot;&lt;br&gt;
Press ENTER to send it. There are also keybindings for all/ally/spec chat messaging:

 Enter -&gt; send to &lt;send type&gt;

 Ctrl+Enter -&gt; send to All (and sets &lt;send type&gt; to all)

 Alt+Enter -&gt; send to Allies (and sets &lt;send type&gt; to allies)

 Shift+Enter -&gt; send to Spectators (and sets &lt;send type&gt; to spectators)

&lt;nowiki&gt;  To enter a Text Command, simply type the command and press ENTER.&lt;/nowiki&gt;




===Basic Text Commands===

&lt;table border=&quot;3&quot; cellpadding=&quot;2&quot; cellspacing=&quot;0&quot;&gt;
&lt;tr&gt;
	&lt;th&gt;Command&lt;/th&gt;&lt;th&gt;Effect&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;/info #&lt;/td&gt;
	&lt;td&gt;Shows you what colour each player is, its CPU usage percentage and their ping delay in the bottom right corner of the screen. This is on by default. Arguments:&lt;ol&gt;
	&lt;li&gt;Sorts by allies&lt;/li&gt;
	&lt;li&gt;Sorts by TeamID&lt;/li&gt;
	&lt;li&gt;Sorts by name&lt;/li&gt;
	&lt;li&gt;Sorts by CPU Usage&lt;/li&gt;
	&lt;li&gt;Sorts by Ping&lt;/li&gt;
	&lt;/ol&gt;
	&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;/clock&lt;/td&gt;&lt;td&gt;Shows you the elapsed game time in minutes and seconds in the upper right corner of the screen. This is on by default.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;/fps&lt;/td&gt;&lt;td&gt;Shows FPS counter in the upper right corner of the screen.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;/gameinfo&lt;/td&gt;&lt;td&gt;Shows game information. Game version, actual game speed, commander ends, gravity, tidal, min wind, max wind, map size, map name and mod name.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;/kick &lt;name&gt;&lt;/td&gt;&lt;td&gt;Kicks a player, only works for hosts.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;/kickbynum #&lt;/td&gt;&lt;td&gt;Kicks a player, only works for hosts.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;/take&lt;/td&gt;&lt;td&gt;Places all allied units that are owned by players who have lost connection to the server under your control. It is generally considered polite to consult with any still-connected allies before doing this. In a Commander Dies, Game Ends game, a player only loses once they have lost ''all'' their Commanders, and this mechanism will give them a second one.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;/setmaxspeed #&lt;/td&gt;&lt;td&gt;Changes the maximum speed multiplier (default is 3.0)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;/setminspeed #&lt;/td&gt;&lt;td&gt;Changes the minimum speed multiplier (default is 0.3)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;/spectator&lt;/td&gt;&lt;td&gt;Resigns from the game and goes to spectator mode.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;/nospectatorchat [0|1]&lt;/td&gt;&lt;td&gt;Toggles spectator chat on/off, optional true/false parameters can be put in the end, for example: &quot;.nospectatorchat 1&quot;, otherwise it will toggle it on/off. Only works for hosts.&lt;/td&gt;

&lt;/tr&gt;
&lt;/table&gt;



===Cheat Codes=== 

&lt;table border=&quot;3&quot; cellpadding=&quot;2&quot; cellspacing=&quot;0&quot;&gt;
&lt;tr&gt;
	&lt;th&gt;Cheat Command&lt;/th&gt;&lt;th&gt;Effect&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;'''/cheat'''&lt;/td&gt;&lt;td&gt;'''enable cheats - Cheats don't work in multiplayer until the host types this'''&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;/nocost&lt;/td&gt;&lt;td&gt;Insta-build; everything is built immediatly. (doesn't work on things already under construction, only on new ones)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;/team #&lt;/td&gt;&lt;td&gt;Change player&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;/give [amount] &lt;unitName&gt; [team] @x,y,z&lt;/td&gt;
        &lt;td&gt;Place 1 or specified number of specified unit.  Valid units are the internal names of units as specified in the unit definition. Use the &quot;all&quot; switch to get ALL the units in the current mod. Putting a number after the unit name will give those units to the specified team. some examples: 
&lt;ul&gt;&lt;li&gt;/give ARMCOM - gives you one ARMCOM&lt;/li&gt; &lt;li&gt;/give 10 CORKROG 3 - gives team 3 10 CORKROGs&lt;/li&gt; &lt;li&gt;/give all - gives one of every unit available&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;

&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;/atm&lt;/td&gt;&lt;td&gt;gain 1000 extra energy and metal.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;/godmode [0|1]&lt;/td&gt;&lt;td&gt;If set to 1, everybody (including specs) can control and view all units.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;



===Graphic Settings===

&lt;table border=&quot;3&quot; cellpadding=&quot;2&quot; cellspacing=&quot;0&quot;&gt;
&lt;tr&gt;
	&lt;th&gt;Command&lt;/th&gt;&lt;th&gt;Effect&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;/advshading [0|1]&lt;/td&gt;&lt;td&gt;Disables/enables advanced shading (reflective units, more?).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;/grounddecals [0|1]&lt;/td&gt;&lt;td&gt;Disables/enables ground decals (immune to tab complete?).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;/maxparticles #&lt;/td&gt;&lt;td&gt;Sets maximum amount of particles. Accepted values are between 1000 and 20000.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;/shadows [0|1] #&lt;/td&gt;&lt;td&gt;Sets shadows to on or off, supports a second argument for shadow quality (1024, 2048, 4096 or 8192). Note that shadows are a massive performance hit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;/vsync [0|1]&lt;/td&gt;&lt;td&gt;Disables/enables vsync.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;/water #&lt;/td&gt;
	&lt;td&gt;Sets water quality:&lt;ol start=0&gt;
	&lt;li&gt;Basic water, no performance hit.&lt;/li&gt;
	&lt;li&gt;Reflective, Pretty, not a too large performance hit.&lt;/li&gt; 
	&lt;li&gt;Dynamic, Very pretty, MASSIVE performance hit and buggy on some hardware.&lt;/li&gt;
	&lt;li&gt;Reflective + Refractive, Prettier than reflective and pretty much the same performance hit, slightly buggy on some hardware.&lt;/li&gt;
        &lt;li&gt;Bump-mapped water, very low impact like basic water, very pretty and realistic at average ranges.  Has shore waves and some basic effects for impacts/movement through the water.
	&lt;/ol&gt;
	&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;



===Misc===

&lt;table border=&quot;3&quot; cellpadding=&quot;2&quot; cellspacing=&quot;0&quot;&gt;
&lt;tr&gt;
	&lt;th&gt;Command&lt;/th&gt;&lt;th&gt;Effect&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;/cmdcolors &lt;filename&gt;&lt;/td&gt;&lt;td&gt;Loads specified cmdcolors.txt.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;/ctrlpanel &lt;filename&gt;&lt;/td&gt;&lt;td&gt;Loads specified ctrlpanel.txt&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;/luaui&lt;/td&gt;&lt;td&gt;Access LuaUI commands provided by widgets. Use /luaui reload if LuaUI crashes. You can also use disable/enable arguments.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;/echo &lt;text&gt;&lt;/td&gt;&lt;td&gt;Prints a message to the console.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;/say &lt;text&gt;&lt;/td&gt;&lt;td&gt;Specifies that you want to say something to the other players, useful for telling them how to do something with a / command without running it yourself. For example /say /luaui reload.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;/specfullview #&lt;/td&gt;
	&lt;td&gt;Sets spectator viewing and selection options:&lt;ol start=0&gt;
	&lt;li&gt;No special abilities.&lt;/li&gt;
	&lt;li&gt;view-all.&lt;/li&gt; 
	&lt;li&gt;select-all.&lt;/li&gt;
	&lt;li&gt;view-all and select-all.&lt;/li&gt;
	&lt;/ol&gt;
	&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;/volume #&lt;/td&gt;&lt;td&gt;Sets volume, accepted values are between 0 and 1.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;



===Keybindings===

&lt;table border=&quot;3&quot; cellpadding=&quot;2&quot; cellspacing=&quot;0&quot;&gt;
&lt;tr&gt;
	&lt;th&gt;Command&lt;/th&gt;&lt;th&gt;Effect&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;/bind &lt;keyset&gt; &lt;action&gt;&lt;/td&gt;&lt;td&gt;Binds a key or key combination.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;/unbind &lt;keyset&gt; &lt;action&gt;&lt;/td&gt;&lt;td&gt;Unbinds a key or key combination.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;/unbindaction &lt;action&gt;&lt;/td&gt;&lt;td&gt;Unbinds all keybinds that uses &lt;action&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;/unbindkeyset &lt;keyset&gt;&lt;/td&gt;&lt;td&gt;Unbinds all bindings that uses &lt;keyset&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;/unbindall&lt;/td&gt;&lt;td&gt;Unbinds all keys except the chat keybinding.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;/keysym &lt;name&gt; &lt;keycode&gt;&lt;/td&gt;&lt;td&gt;Adds a custom key symbol, The defaults can not be overridden. Name must start with a letter, and only contain letters, numbers, and '_'&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;/keyset &lt;name&gt; &lt;keyset&gt;&lt;/td&gt;&lt;td&gt;Specifies a named keyset. Name must start with a letter, and only contain letters, numbers, and '_'. Named keysets may be accessed by prepending the '&amp;' character to the name.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;/fakemeta &lt;keysym&gt;&lt;/td&gt;&lt;td&gt;Assigns an auxiliary key for the meta modifier (&quot;space&quot; is a good choice. Use fakemeta none to disable this feature&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;


'''[[Balanced Annihilation|&lt;--Back to Balanced Annihilation]]'''</text>
      <sha1>ij9ib7vybg45voacwbe1kjf4x370rvo</sha1>
    </revision>
  </page>
  <page>
    <title>Balanced Annihilation:Command Reference</title>
    <ns>0</ns>
    <id>2508</id>
    <revision>
      <id>24368</id>
      <parentid>20803</parentid>
      <timestamp>2012-05-02T08:41:56Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5428">{{Balanced_Annihilation_deprecated}}

[[category:Balanced Annihilation]]
'''[[Balanced_Annihilation|&lt;--Back to Balanced Annihilation]]'''

For a more complete description of controls, see here: [[Balanced Annihilation:Giving_Orders]]
&lt;br&gt;&lt;br&gt;

&lt;table style=&quot;text-align:left; vertical-align:top;&quot; border=&quot;1&quot;&gt;
&lt;tr&gt;
 &lt;th&gt;Mouse Button 1 &lt;small&gt;(left)&lt;/small&gt;&lt;/th&gt;
 &lt;td&gt;Select unit/s (also perform selected order, eg: build selected building)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;th&gt;Mouse Button 2 &lt;small&gt;(right)&lt;/small&gt;&lt;/th&gt;
 &lt;td&gt;Default order. Depending on target:&lt;br&gt; - Move. &lt;small&gt;(drag mouse for line formation)&lt;/small&gt;&lt;br&gt; - Attack / Repair / Reclaim. &lt;small&gt;(drag to target an area)&lt;/small&gt;&lt;br&gt; - Build incomplete building or unit.&lt;br&gt; - Guard.&lt;br&gt; - If an order has been manually selected/hotkeyed, click to cancel.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;th&gt;Scroll Wheel&lt;/th&gt;
 &lt;td&gt;Zoom in/out&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;th&gt;Mouse Button 3&lt;br&gt;&lt;small&gt;(click scroll wheel)&lt;/small&gt;&lt;/th&gt;
 &lt;td&gt;Move to point on minimap
&lt;br&gt;&lt;small&gt;(Mouse 1 &amp; 2 are used to select units and give orders on minimap)&lt;/small&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;th&gt;L&lt;/th&gt;
 &lt;td&gt;(Duplicates middle click functionality)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;th&gt;SHIFT &lt;br&gt;&lt;small&gt;+ (Mouse 1 or 2)&lt;/small&gt;&lt;/th&gt;
 &lt;td&gt; - Queue order. Queue as many as you like.
(shift+drag to queue a line of buildings)&lt;br&gt; - Add unit/s to group&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;th&gt;CTRL + Mouse 1&lt;/th&gt;
 &lt;td&gt;Remove unit/s from group&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;th&gt;[ and ]&lt;/th&gt;
 &lt;td&gt;Rotate building (first select something to build and then rotate)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;th&gt;A&lt;/th&gt;
 &lt;td&gt;Attack &lt;small&gt;(attack unit/ground)&lt;/small&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;tr&gt;
 &lt;th&gt;M&lt;/th&gt;
 &lt;td&gt;Move&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;th&gt;F&lt;/th&gt;
 &lt;td&gt;Fight &lt;small&gt;(as move, but units will stop to kill enemies along the way)&lt;/small&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;th&gt;G&lt;/th&gt;
 &lt;td&gt;Guard&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;th&gt;P&lt;/th&gt;
 &lt;td&gt;Patrol. &lt;small&gt;(Moves back and forth between current position and patrol position)&lt;/small&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;th&gt;S&lt;/th&gt;
 &lt;td&gt;Stop&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;th&gt;E&lt;/th&gt;
 &lt;td&gt;Reclaim&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;th&gt;R&lt;/th&gt;
 &lt;td&gt;Repair&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;th&gt;D&lt;/th&gt;
 &lt;td&gt;D-Gun&lt;/td&gt;
&lt;tr&gt;
 &lt;th&gt;X&lt;/th&gt;
 &lt;td&gt;On/Off. &lt;small&gt;(as the unit on/off button)&lt;/small&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;th&gt;K&lt;/th&gt;
 &lt;td&gt;Cloak on/off&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;th&gt;CTRL + D&lt;/th&gt;
 &lt;td&gt;Self Destruct&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;th&gt;SHIFT + W&lt;/th&gt;
 &lt;td&gt;Queue 'wait' command&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;th&gt;W&lt;/th&gt;
 &lt;td&gt;Stop waiting&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;th&gt;CTRL + number (1-0)&lt;/th&gt;
 &lt;td&gt;Assign group&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;th&gt;number (1-0)&lt;/th&gt;
 &lt;td&gt;Select group&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;th&gt;Double Click&lt;/th&gt;
 &lt;td&gt;Select all units of targetted type in view&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;th&gt;CTRL + Z&lt;/th&gt;
 &lt;td&gt;Select all units of selected type on map.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;th&gt;CTRL + A&lt;/th&gt;
 &lt;td&gt;Select all units on map.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;th&gt;ALT + SHIFT (+ mouse click &amp; drag)&lt;/th&gt;
 &lt;td&gt;Build a rectangular area of buildings.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;th&gt;SHIFT (+ mouse click &amp; drag)&lt;/th&gt;
 &lt;td&gt;Build a line of buildings.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;th&gt;SHIFT + CTRL (+ mouse click &amp; drag)&lt;/th&gt;
 &lt;td&gt;Build a line of buildings with fixed angles of 90 degrees.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;th&gt;CTRL + SHIFT (+ mouse click)&lt;/th&gt;
 &lt;td&gt;Build a circular area of buildings around some other building (must point on the building with mouse cursor).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;th&gt;TAB&lt;/th&gt;
 &lt;td&gt;Zooms out to see the whole map.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;th&gt;F1&lt;/th&gt;
 &lt;td&gt;Shows heightmap&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;th&gt;F2&lt;/th&gt;
 &lt;td&gt;Shows areas where you can build (if the building what you want to build is selected)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;th&gt;F3&lt;/th&gt;
 &lt;td&gt;Goes to the latest spot of action (also goes to the latest markers)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;th&gt;F4&lt;/th&gt;
 &lt;td&gt;Shows metalmap&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;th&gt;F5&lt;/th&gt;
 &lt;td&gt;Hides User Interface&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;th&gt;CTRL+F5&lt;/th&gt;
 &lt;td&gt;Changes to a cooler camera mode&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;th&gt;F6&lt;/th&gt;
 &lt;td&gt;Turns sounds off (currently a bug causes sounds be on when zoomed in the spot where sound comes from (for example an explosion))&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;


&lt;h4&gt;Multiplayer Communication&lt;/h4&gt;
&lt;table style=&quot;text-align:left; vertical-align:top;&quot; border=&quot;1&quot;&gt;
&lt;tr&gt;
 &lt;th&gt;` + Mouse Button 1&lt;/th&gt;
 &lt;td&gt;Draw on map.&lt;br&gt;&lt;small&gt;(On a UK/US keyboard ` is to the key left of 1. The same functionality is mapped to the \ key)&lt;/small&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;th&gt;` + Mouse Button 2&lt;/th&gt;
 &lt;td&gt;Erase markers and drawings&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;th&gt;` + Mouse Button 3&lt;/th&gt;
 &lt;td&gt;Place marker&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;th&gt;` + Double Click&lt;/th&gt;
 &lt;td&gt;Place marker with annotation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;th&gt;ENTER&lt;/th&gt;
 &lt;td&gt;Chat&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;th&gt;ALT + ENTER&lt;/th&gt;
 &lt;td&gt;Allied chat&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;th&gt;SHIFT + ENTER&lt;/th&gt;
 &lt;td&gt;Spectator chat&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;th&gt;CTRL + ENTER&lt;/th&gt;
 &lt;td&gt;Return to global chat&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;


&lt;h4&gt;Multiplayer Communication (scandinavian keyboard)&lt;/h4&gt;
&lt;table style=&quot;text-align:left; vertical-align:top;&quot; border=&quot;1&quot;&gt;
&lt;tr&gt;
 &lt;th&gt;Ã‚Â§ + Mouse Button 1&lt;/th&gt;
 &lt;td&gt;Draw on map.&lt;br&gt;&lt;small&gt;(On a UK/US keyboard ` is to the key left of 1. The same functionality is mapped to the \ key)&lt;/small&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;th&gt;Ã‚Â§ + Mouse Button 2&lt;/th&gt;
 &lt;td&gt;Erase markers and drawings&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;th&gt;Ã‚Â§ + Mouse Button 3&lt;/th&gt;
 &lt;td&gt;Place marker&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;th&gt;Ã‚Â§ + Double Click&lt;/th&gt;
 &lt;td&gt;Place marker with annotation&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;h4&gt;Basic commands (scandinavian keyboard)&lt;/h4&gt;
&lt;table style=&quot;text-align:left; vertical-align:top;&quot; border=&quot;1&quot;&gt;
&lt;tr&gt;
 &lt;th&gt;ÃƒÂ¥ or Ã‚Â´&lt;/th&gt;
 &lt;td&gt;Rotate building (first select something to build and then rotate)&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

'''[[Balanced_Annihilation|&lt;--Back to Balanced Annihilation]]'''</text>
      <sha1>04sdv8tj7lpowdnff9uxdzj7xpsct2t</sha1>
    </revision>
  </page>
  <page>
    <title>Balanced Annihilation:Custom Keys</title>
    <ns>0</ns>
    <id>1752</id>
    <revision>
      <id>24367</id>
      <parentid>19647</parentid>
      <timestamp>2012-05-02T08:41:52Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2509">{{Balanced_Annihilation_deprecated}}

[[category:Balanced Annihilation]]
'''[[Balanced_Annihilation|&lt;--Back to Balanced Annihilation]]'''

== Customizing keyboard shortcuts ==
Open and read UIKeys.txt, much more complete and informative than this page.

There are several categories of keys in Spring that can be customized.


===Unit Action Keys===

These are keys that control unit actions. They're all listed in the README found in the docs folder of your Spring installation.

These keys are hardcoded and cannot be changed. While a unit is selected, 'A' will always issue an attack order and 'M' will always issue a move order. You can still bind the key to something else in uikeys.txt or the Selection Keys Editor, but your binding will only work when you don't have any units selected.


===User Interface keys===

{{Uikeys_Commands}}


Many key bindings related to the user interface can be edited through the '''uikeys.txt''' file found in Spring folder. You should be able to work out the format by skimming it, it's fairly simple. Key bindings load upon game start, and can't be changed in middle of the game.

A few keys related to the UI can't be changed:


- Mouse button functions.

- Behaviour of shift/control

- Behaviour of shift/control   Middle mouse button.


The correct way to bind keys is to put single-quotes around letter keys, like this:


''bind 'x' mouse3''


You can also comment out any bind to quickly disable it by putting &quot;//&quot; before it:


''//bind home increaseViewRadius''


Function keys and some other keys don't need single quotes. They're listed in the &quot;Special Bindable Keys&quot; list, below.



{| style=&quot;float: center; background-color: #41545c; border: 1px #aaa solid;&quot;
|Special Bindable Keys:
{|
|
'''Function'''
* Home
* End
* insert
* delete
* space
* f1-f12
* esc 
* `
* Ã‚Â§
* enter
* backspace
* pause
* pageup
* pagedown
|
'''Modifiers'''
* ctrl
* Shift
'''Arrow'''
* Up
* Down
* Left
* Rigth
|}
|}

===Selection keys===
Im sure you do remember Control C key. Or Control Z.

Well these keys, as all that are related to &quot;selected units&quot; are now fully editable.

i.e. You can map a key to do the same as Control C BUT without the &quot;center on commander&quot; part.


This offers tremendous flexibility and enhaces control and gameplay to pro levels.


Look at [http://taspring.clan-sy.com/phpbb/viewtopic.php?t=2190 this thread] to learn more on editing these selection keys through selectioneditor.exe.

'''[[Balanced_Annihilation|&lt;--Back to Balanced Annihilation]]'''</text>
      <sha1>m6oaxcyxpjjz7p43rghzpoyw48u4y33</sha1>
    </revision>
  </page>
  <page>
    <title>Balanced Annihilation:Doodles</title>
    <ns>0</ns>
    <id>1751</id>
    <revision>
      <id>24366</id>
      <parentid>19631</parentid>
      <timestamp>2012-05-02T08:41:48Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1559">{{Balanced_Annihilation_deprecated}}

[[category:Balanced Annihilation]]
'''[[Balanced_Annihilation|&lt;--Back to Balanced Annihilation]]'''

==Map Doodles==


Hold the ` or \ key to draw on the screen with the mouse. This is the main gameplay screen, not the minimap. Only you and your allies can see these marks. Use this tool to mark out territory or warn of impending attacks, or mark enemy bases or play tic-tac-toe before the game. Good teams will use this frequently mark out attack patterns and enemy weak points. Be creative; do not be annoying. Drawing select portions of human anatomy on the map becomes very stupid very quickly.

Hold ` or \ while pressing the left mouse button (MOUSE1) to draw a line.

Hold ` or \ and double left click, then type a label then press ENTER to add a labelled point. This also causes a minimap ping and chat message notification.

Hold ` or \ while clicking the middle mouse button (MOUSE3/Scrollwheel Button)  to add an empty point. This also causes a minimap ping and chat message notification.

Hold ` or \ and clicking the right mouse button (MOUSE2) will erase lines or points.

Note: On some keyboards, the ` is replaced with Ã‚Â§, and it is also known as the ~ or tilde key.  Usually this is the key between the Tab and Esc keys in the upper left corner of the keyboard.  It can also be changed within the &quot;uikeys.txt&quot; file.

On azerty keyboards, * and ÃƒÂ¹ (near return) work, although ~ does not.
For German users you might give 'ÃƒÂ¶' a try!

'''[[Balanced_Annihilation|&lt;--Back to Balanced Annihilation]]'''</text>
      <sha1>0brfne0funcd8w10ns46blgum70mqfx</sha1>
    </revision>
  </page>
  <page>
    <title>Balanced Annihilation:From OTA To TA</title>
    <ns>0</ns>
    <id>2932</id>
    <revision>
      <id>24347</id>
      <parentid>20251</parentid>
      <timestamp>2012-05-02T08:33:51Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1054">{{deprecated|This page is deprecated, please look at the [http://http://balancedannihilation.org/ Blanced Annihilation Homepage]}}

===Main differences from Original Total Annihilation===
BA is similar to the [[OTA | Original Total Annihilation]] (OTA for short), and if you've played the original you should feel quite at home, however there are some important differences for OTA players to note:
* Units/structures statistics (like HP, dmg, etc.) are different in BA.

* The Guardian (tier 1 plasma turret) isn't a very useful defense unit for its cost; it's more of a forward artillery piece.  It also has a brand new ''high trajectory'' mode.

* Most of the AA units in the game shoot ''only'' at planes rather than both planes and ground. So don't be surprised by Jethro/Crasher or Defender/Pulverizer AA-only ability. However Samson/Slasher stays AA &amp; ground.

*Added units list. 
Note: help needed.

----

===Continue===
'''For more crucial info follow [[Balanced_Annihilation:misc | this link]].'''

'''[[Balanced_Annihilation|&lt;--Back to BA]]'''</text>
      <sha1>hhroai8fldldm6hb5dr72jgvvf1d9pv</sha1>
    </revision>
  </page>
  <page>
    <title>Balanced Annihilation:Giving Orders</title>
    <ns>0</ns>
    <id>1749</id>
    <revision>
      <id>24365</id>
      <parentid>22606</parentid>
      <timestamp>2012-05-02T08:41:44Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30941">{{Balanced_Annihilation_deprecated}}

[[category:Balanced Annihilation]]
'''[[Balanced_Annihilation|&lt;--Back to Balanced Annihilation]]'''

==Issuing Orders/Building==

====Left Mouse Control (Mouse 1)====
As covered in [[Using_Selections#Selecting.2FDeselecting_Units|Selecting/Deselecting Units]], left clicking is the primary control for selecting units.  If a pending order is issued using the menu that appears on the left side of the screen or using a Hotkey, the mouse pointer will change to a symbol representing this action.  If there is a pending order and you left click on a valid target for the action the selcted units will perform this action on that target, otherwise the units will &quot;do their best&quot; to perform the action, which could mean just cancelling the Order.

The menu will show all available commands for all selected units, except for wait and self destruct, in the menu. Mousing over a menu item will also display the Tooltip for this item.

====Right Mouse Control (Mouse 2)====
Right clicking will always give the selected units the default action for the target, if the order is invalid for some members of the group, it may or may not choose a suitable action for those units to perform.

====Queueing Orders====

Holding down SHIFT while giving a unit an order adds that order to its queue. Queueing orders means that you can tell a unit, or a group of units to do multiple tasks, and they will go off and do them in the order they were given without any more input from you. For example, if you you want a Construction Vehicle to build a line of defences around your base, you can select the structure you want, hold shift and click where you want them few times. The construction vehicle will now go and build (or try to build) all of the selected structures while you go and pay attention to other things. You can queue any order, and any number of orders. It would be possible (but not very smart) to order your commander to build a whole base for you while you go off and have lunch!

If you have a unit selected, holding SHIFT will show the unit's order queue. Green lines indicate movement orders, red lines attack orders, light blue lines patrol orders, dark blue lines Guard orders, and purple lines reclaim orders. Green rectangles will show where you have construction orders queued. If you have a construction unit selected, you'll see ghosted images of the buildings that unit is going to build inside the green rectangles, linked by green &quot;movement order&quot; lines.

You can remove an order from the order queue by holding shift and repeating the same order. This doesn't work very well on area or movement type orders but can be useful for cancelling the construction of an un-needed building.

Another use for this is to issue complicated movement orders. Say you want your army to attack your enemy, but you want to attack from the side, where they are their weakest. Just issuing one move command to attack the side of their base would send our units moving THROUGH your enemy's base to try to get to the side. This is not very good. But if you tell your units to move to a location AWAY from the base and them back towards it, by queuing up two or more move commands, this problem can be successfully avoided. Or you could tell your units to attack certain buildings in a certain order, for instance attack all the outlying metal extractors, and them go for the power plants in the base, they will follow these orders oblivious to anything else, while you go in and attack the other important things.

This is also good for building complicated patrol paths. Note that units given a patrol order will return to their starting point after executing the last patrol order, so queuing up other orders after a patrol order is very pointless.

When you issue a order without holding shift, it clears the unit's queue and immediately starts it executing that order.

Learning how to use your units' order queues is a vital part of the game.

===Building Buildings===
When a contruction unit is selected you will see images in it's command list (menu on the left) representing the buildings that it can build. These are referred to as &quot;buildpics&quot;.  Mousing over a buildpic will make the tooltip show information about the structure or unit.  Clicking on a structure's buildpic will select it for contruction.  If multiple units are selected, all available structures (and mobile units) will appear in the command list.  Choosing to build a building when you have multiple units selected will usually assign all units to help build those buildings if this is a valid command.

When you build a unit with a non-factory you will need to choose a ground plate for it to be built on (represented by a grid on the map under your cursor).
&lt;br&gt;&lt;br&gt;
{| align=&quot;center&quot; width=&quot;500px&quot; border=&quot;1px&quot;
|- valign=&quot;top&quot;
|
If the grid is green, you can build at that location.
|[[Image:BuildPlateOkay.png]]
|- valign=&quot;top&quot;
|
If the grid is green with some yellow-green squares in it somewhere, it means the groundplate is blocked by a mobile unit or reclaimable feature.  This situation should be resolved automaticly by the constructing unit.
|[[Image:BuildPlateResolvable.png]]
|- valign=&quot;top&quot;
|
If the grid has any red squares in it, this is an invalid build position, the non red squares of the grid represent unobstructed parts of the obstructed grid.
|[[Image:BuildPlateBad.png]]
|}

====Build (select structure then left-click)====

Builds whatever structure selected in the location clicked by moving the builder unit selected there.

====Rotate the Building====

Press '''[''' or ''']''' while placing the Building to rotate it 90Ã‚Â°.
On German Keyboards, use '''ÃƒÅ¸''' and '''Ã‚Â´'''

====Build Queue (select structure then shift   left-click)====

Puts the build order into your unit's order queue, just as with any other order.

====Build Line (SHIFT)====
(select structure then shift   left-hold-drag then release left mouse)
{|
|- valign=&quot;top&quot;
|
Adds a straight line of the selected structure into your unit's build queue starting where you first depressed the leftmouse and ending at the location you release the leftmouse.
|[[Image:BUILDSHIFT.png|thumb|200px|Shift-Build]]
|}

====Build Grid Line (SHIFT CTRL)====
(select structure then shift ctrl left-hold-drag then release left mouse)
{|
|- valign=&quot;top&quot;
|
Adds a straight line of the selected structure into your unit's build queue starting where you first depressed the leftmouse and ending aligned to the location you release. This line, however, will be either vertical or horizontal and aligned to the map's grid.
|[[Image:BUILDCTRLSHIFT.png|thumb|200px|Shift-Ctrl-Build]]
|}


====Build Perimeter (SHIFT CTRL ALT)====
(select structure then shift ctrl alt left-hold-drag then release left mouse)
{|
|- valign=&quot;top&quot;
|
Adds an empty square or rectangle box of the selected structures to your unit's build queue.  The location you first depressed the leftmouse is one corner border and the location you release is the opposing corner.  If you move the mouse straight up your box will look like a grid alligned vertical line.
|[[Image:BUILDCTRLALTSHIFT.png|thumb|200px|Shift-Ctrl-Alt-Build]]
|}


====Build Block (SHIFT ALT)====
(select structure then shift   alt   left-hold-drag then release left mouse)
{|
|- valign=&quot;top&quot;
|
Adds a filled in square or rectangle box of the selected structures to your unit's build queue.  The location you first depressed the leftmouse is one corner border and the location you release is the opposing corner.  If you move the mouse straigt up your box will look like a grid alligned vertical line.
|[[Image:BUILDSHIFTALT.png|thumb|200px|Shift-Alt-Build]]
|}

====Build &quot;Wall&quot; ====
{|
|- valign=&quot;top&quot;
|
Add a wall of the selected structure surrounding the clicked unit to your builders build queue.

Select a builder unit, select building to build, then hold CTRL + SHIFT ant move your mouse over selected building. You should see a &quot;wall&quot; of your selected buildings around it. Click on the structure and the building will begin.
|[[Image:BUILDCTRLSHIFTUNIT.png|thumb|200px|Shift-Ctrl-Build]]
|}

====Space Build (MOUSE4/Z and MOUSE5/X)====
(select structure then shift   ctrl   mouse5/mouse4 or z/x)
{|
|- valign=&quot;top&quot;
|
Spring allows you to automatically specify the spacing between buildings for batch (line, perimeter, block, wall) orders. This spacing is set with the z (decrease by one) or x (increase by one) keys. The default spacing is zero, with the buildings pressed right up against each other. Each level of spacing gives you an extra 2x2-sized (LLT-sized for OTA-based mods) space in between each structure on all 4 dimensions. Similarly, each click of the spacing contract button(z) removes that amount of space. You cannot remove spaces when structures are already placed with no spacing between them.

This is most useful when you're holding down SHIFT CTRL, SHIFT ALT, or SHIFT CTRL ALT to give a line/perimeter/block order. When doing this, you can actually see the spacing between the structures increase or decrease.

Note: The mapping of this function to Z and X is as of 0.70b1.  As Z and X are used by many players for other units, it's valuable to note that the key mappings for &quot;mouse4&quot; and &quot;mouse5&quot; can be changed in the &quot;uikeys.txt&quot; file in your spring directory. If you have a 5-button mouse, buttons 4 and 5 are probably the side buttons. Experiment with your mouse to find out where they are on it.
|[[Image:BUILDCTRLALTSHIFTX.png|thumb|200px|Spaced-Shift-Ctrl-Alt-Build]]
[[Image:BUILDSHIFTALTX.png|thumb|200px|Spaced-Shift-Alt-Build]]
[[Image:BUILDCTRLSHIFTX.png|thumb|200px|Spaced-Shift-Ctrl-Build]]
[[Image:BUILDSHIFTX.png|thumb|200px|Spaced-Shift-Build]]
|}

===Building Mobile Units (Building with Factories)===

Click on the picture of the unit you want to queue up for building. You can queue up many units this way. A number will appear over the buildpic, showing how many units of that type are in the queue.

Hold SHIFT while clicking a buildpic to order 5 units at one time, hold CTRL while clicking to order 20, hold CTRL SHIFT while clicking to order 100. Hold ALT while clicking a buildpic to cancel the current construction and starting the constuction of that unit immediately. Right clicking a buildpic will cancel 1,5,20 or 100 orders for that unit using the same SHIFT and/or CTRL modifiers mentioned before. Note that you can use, say, ALT SHIFT to put five build orders for that unit at the start of the queue.

Assigning a group number to a factory will cause the factory to pass this group number to the units it builds.

You can give factories a Move, Guard, Patrol, or other order and the factory will pass it on to the units it builds. You can use this to choose a better place for new units to go after being built, or to send them straight into construction or a battle without micromanaging them. This includes assigning queued orders (for example: multiple move points to get a unit out of the base in a straight line and then a guard repair order on a specific large unit under construction and then a guard order back on the original factory to increase build speed). You can also issue orders to the unit currently under construction by clicking on it first instead of the factory.

Note that it is currently possible for units to get stuck in factories. Thus, it's a good idea for the first order to always be a move order that takes the unit directly out of the factory doors.

Construction/Repair units can be assigned to guard a factory to increase the speed of production for each of the units the factory makes. They can also be assigned to Repair the unit currently under construction to just help with its construction.

=== Default Commands and Hotkeys===
It is assumed that if a unit does not have an ability, it will not be able to perform that action, and will ignore any orders of that type given to a group it's part of. Priorities have been noted.

====Active State (X)====
This command toggles the &quot;active state&quot; of a unit, turning it on or off.
If a unit can be turned off this will usually stop it's prodution and/or use of energy and/or metal and/or stop it from doing something and/or change it's stats.
For example, turning off a radar jamming building would make it stop drawing power and prevent it from jamming radar. Turning off a solar collector would stop it from producing power and cause it to &quot;close up&quot;, increasing it's armor.
This behaviour is unit-scriptable so it could technically do anything the designer of the unit wants it to do.

====Attack (A)====
Orders the unit to attack the target or location. If ordered to attack a unit, the selected unit or building will keep firing at the targeted unit/building until it is dead. If the targeted unit moves out of range, or out of sight, the selected unit will move to follow it and continue to attack it. Note that units are very stupid about this, and will continue to execute this order even if they come under heavy attack.

If ordered to attack ground, the unit will never stop until told to do so by the user. Note that units automatically attack any visible enemy units inside their range, and will pursue them (depending on their [[#Move State|Move State]]) a certain distance before returning to their starting location.

====Capture====
The unit will move up to the targeted unit or building and attempt to convert it to your team. So if the enemy has built a Geothermal power plant and forgotten to protect it, grab a nearby construction unit and try to capture it! Note that this takes quite a while, and it is not a good idea to try to capture a unit that is shooting at you.  The closer the unit is to 0 health the faster it will be captured.  Be careful to set your Commander's [[#Fire State|fire state]] to &quot;hold fire&quot; if you are trying to capture a unit with him, as his laser will likely destroy the target before it is captured.

Hold the Ctrl key to issue an area capture command that captures allied units also.

Hold the Alt key to issue a persistent area capture order. This means the order will remain even when there are no units left to capture.

Hold the Meta key (space) to issue an area capture command that will only attempt to capture units that have 100% health or capture progress.

====Cloak (K)====
Makes a unit inivisble to the enemy's units. Enemy units will not be able to see a unit while it is cloaked, but will still be able to spot it (and fire at it) if they can see the unit VIA radar. Note that this usually uses an immense amount of energy, uses even more energy when the unit's moving, and units uncloak for a few seconds when they shoot.  This means that you might want to set the unit to Hold Fire, so the unit doesn't accidentally reveal itself.  Cloaking a unit also causes atacking units to lose their target lock and move on to a new target, unless they have radar coverage.

====DGun (D)====
Disintegrator Gun. A weapon used by the Commander. It is a very powerful gun that will kill ANY unit in game. Use it in early game to ward off rushes, or against super units like the Krogoth, or the Goliath. Be careful, as it also destroys your units and buildings at the same time! Uses alot of energy to fire, so make sure you have the required energy before attmpting this.

====Fire State====
Fire States are fairly simple to work out, and are fairly self explanatory. There are three different states, each with their advantages and disadvantages.

''' Fire at Will :''' This is the default setting for all new units. It makes units fire at any visible enemy unit within range. It is good for general destruction.

''' Hold Fire :''' This makes units never fire unless ordered to. Even if they are attacked, they will not do anything. This is good for sneaking units around the back of a base, as they will not draw any attention to themselves, or for units that draw a lot of power when they fire, or which have a long reload time.

''' Return Fire :''' Units only fire at untis that shoot at them. Again, this is good for sneak attacks, but makes them a little smarter and better at defending themselves.

====Guard (G)====
The current selection will &quot;guard&quot; the target owned or allied unit.

When a unit is ordered to guard another unit it will:

1) Attempt to follow it's target anywhere, staying relatively close to it.

2) Defend the target if it becomes threatened and the guard has weapons.

3) Repair if the target if it gets damaged and the guard has repair capabilities.

4) Assist in any construction projects the target is working on if the guard can repair. This also applies to construction units guarding a factory.

5) Assist any repairs conducted by the target (if capable).

6) Assist any resurrection performed by the target (if capable).

Guard orders &quot;chain&quot;. So if Unit 1 guards Unit 2, Unit 2 guards Unit 3, and Unit 3 is told to build or repair or attack, Units 1 and 2 would also join Unit 3 in doing what it was ordered to do.

====High Trajectory====
If this option is available, click the button to toggle this state.

A unit with High Trajectory mode enabled will shoot almost vertically, allowing it to shoot over hills as well as other units and masking the direction/source of the shot.

Using this mode reduces accuracy greatly and also the increased distance of the higher trajectory will increase the amount of time a shot will take to reach it's target.

With some mods, units may gain extra firepower or a larger area of effect when told to use High Trajectory mode.

====Move (M)====
There are 4 ways to move a group of units in Spring: 

1) The usual move to point (works for single units or groups, pretty standard.) 

2) Holding down on ctrl while giving a move order issues a &quot;Move in formation&quot; command. In this case, formation means whatever formation or configuration the units were in when they were given the order.

3) Holding down Alt during a move command issues a &quot;Move into a square&quot;. Units will try to move into a nice, organised formation. However, this rarley ever works, as units tend to shove each other out of the way when trying to get into position.

4) Click and drag at the waypoint and it issues a &quot;Move to this line&quot; command. In this case the line can be oriented however the user wants.  The shorter the line the deeper the units will line up. The longer the line, the more the units will be able to line up along with it. If there's enough units in the group they will form double or even triple lines, which may cause some shoving, as with the &quot;Square Move&quot; command.

'''Notes:''' Certain formation commands might not work on every type of aircraft.

By turning on [[#Repeat|Repeat]], units will move back into formation when shoved out of position. However, this should be used with caution, as it can lead to problems when trying to move units later.

Left-clicking with a unit selected is usually as good as pressing the &quot;M&quot; key if the selected point doesn't have any objects at that location.

====Move State====

Like [[#Fire State|Fire State]], this controls how the unit will maneuver in response to enemy units. Units set to Hold Position will not move very far from their current position, if they move from it at all. Units set to Maneuver will move a moderate distance from their current position while chasing enemies. Units set to Roam will move however they want to.

Maneuver is usually the most sensible setting here, as Roam leaves you open to a clever enemy pulling your units into heavy defences.

====Patrol (P)====

A unit given a command to patrol will move back and forth between its current position and the taget location.  Holding CTRL when giving a patrol command to a selection with more then one unit will cause the units to move to a location relative the the target point compared to the distance of the unit from the center of the selection.  Holding SHIFT while issueing a series of patrol orders will cause the unit to repeat this command, moving from current location to the targets and &quot;circle around&quot; through the points on the queued path.

When a unit is patroling, it will do whatever it can to &quot;help out&quot; along the path of it's patrol route. A construction unit will aid in construction projects, a combat unit will engage enemies, etc. How far it will go out of it's designated route is partially defined by line of sight, radar coverage, [[#Move State|move state]], and [[#Fire State|fire state]].

Hold the Alt key to issue a resurrection patrol order. This works like normal patrol, except that units will not reclaim corpses that can be resurrected. These will instead be resurrected if the patrolling units are capable.

Hold the Meta key (default space) when issuing the patrol order to make the patrolling units attempt to reclaim enemies (if capable).

Hold the Ctrl + Meta keys to make the patrolling units attempt to reclaim enemy units only.

Examples of Patrol Behaviour:

*If a unit that can repair patrols within range of a damaged (or under contsruction) owned or allied unit, the patrolling unit will repair the damaged unit.

*If a unit that can attack patrols within range of an enemy it will attack the enemy unit.

====Reclaim (E)====

Reclaiming will break down something and give you metal/energy from it. Only certain units (namely, construction units and the Commander) have reclaim capabilities. Wrecks, enemy units, features, and your own units are reclaimable.

Energy and metal will be added to storage when reclaiming process is complete. You must have enough storage space to hold the energy/metal, or you will lose it!

'''Default Behavior:''' Simply clicking on a feature, a wreck, or an enemy unit with a construction unit will reclaim it by default. Hitting 'E' and dragging with the left mouse button issues an area reclaim order, and tells the unit to reclaim any wrecks or features in that area.

Hold the Ctrl key to force area reclaim. This will reclaim non-autoreclaimable features (such as dragon's teeth), starting with metal features first. It will also try to reclaim stuff currently being resurrected by friendly constructors.

Hold the Alt key to make the area reclaim order persistent, e.g. the order will remain even when there is nothing more to reclaim.

Hold the Meta key (default space) to area reclaim units and features.

Hold the Ctrl + Meta keys to reclaim enemy units only.

Assigning multiple units to reclaim a target may not increase the speed at which the target is reclaimed, depending on mod settings.

====Repair (R)====
When repairing a damaged unit, uses a percentage of the metal and energy costs associated with a damaged unit to increase the speed at which a unit regains health. This percentage is set per-mod, and many mods have it set to zero, making repairs free. When repairing a unit that is still being constructed the unit will help build the target, increasing the speed at which the unit is completed but also increasing the rate at which your resources are consumed.

The repair command is cancelled when the target's health reaches 100%, so if a unit under construction is damaged the repair command will complete the building of the target and then continue to repair until the unit is at full health.
Valid targets are any damaged units and units currently being constucted.

This is the default command for owned and ally units that are not at full health, including units being constructed by other units and factories, when a construction unit is selected.

The more units that are assigned to repair another unit, the faster the unit will be constructed/restored to full health, but the energy and metal costs will increase accordingly.

Hold the Ctrl key to force area repair. This means the units will attempt to repair also units that are currently being reclaimed by friendly builders.

Hold the Alt key to issue a persistent area repair order. This means the order will remain even when there are no units left to repair.

Hold the Meta key (space) to issue an area repair command that will only attempt to repair things that are not currently under construction.

====Assign/Select Current Group (Q)====
This key has a several functions.

If you have one unit belonging to a group selected, when pressing &quot;Q&quot; it will select all the units that belong to this group.

If several units are selected, and one belongs to any group, then, when pressing &quot;Q&quot; it will assign ALL the selected units to this group, and after that will select the group.

Finally, if you have a group created, and want to &quot;detach&quot; units from it:
select the unit you wish to detach, and press Shift   &quot;Q&quot;, selected units will be removed from the group they belonged.

See [http://taspring.clan-sy.com/wiki/Using_Spring#Default_Selection_Controls Default selection Controls] for more info on groups.

====Repeat====

When turned on, Repeat moves any orders that have been completed to the back of the order queue. For instance, if you tell a unit to more to one side of the base, and then to the other side of the base, it would keep going back and forwards forever, because when it completed the first move command, it would place that command at the back of the queue again. This is useful when building units. If you want a factory to continuously pump out a Samson, then a Flash, then two Stumpy's, issue the orders, turn on repeat, and watch the units roll out!

Repeat may literally be used with any command set. The power of this command must not be underestimated! For example, it is possible to create a an air transport whose sole purpose is to fly units to the front lines or to another area automatically from the factory:
&lt;Repeat&gt; Group-Load, Group-Unload

It is possible to create a &quot;repair zone&quot; using Group-Repair and repeat:
&lt;Repeat&gt; Group-Repair

It is possible to create a &quot;reclaim zone&quot; at the front lines using a nano tower or other construction unit, and repeat:
&lt;Repeat&gt; Group-Reclaim

It is even possible, to bypass the limitations of the Patrol command using repeat. Units on patrol tend chase down enemies; however, if Repeat is used in conjunction with the standard Move command, you could pontentially set artillery units to go near the enemy front lines, fire several shots, and then come back to a repair zone, only to go back and repeat the cycle!


====Restore====

Drag an area of terrain to restore the terrain to it's original form if it has been &quot;deformed&quot; by explosions or the contruction of a building.

====Resurrect====

In XTA only the Arm F.A.R.K. and the Core necro can use this order. Use this to ressurect dead units. If you see some wreakage on the map from some dead units, select a FARK or Necro and ressurect the dead units to have them fight along side your army. A good way to gain the upper hand later in game is to ressurect your opponent's army after a battle. This does take a lot of energy and metal(half as much as building the unit originally), and ressurected units will start on 1 health, so are very vunerable.

Ressurect is the default order for corpses from destroyed units, this unfortunately includes wreackage that can't acctually be resurrected.(Tip: if you cannot tell what unit the wreakage was then most likely you cannot resurrect it)

Dragging this order as an area will cause all selected units to ressurect all valid targets in that area. If multiple units are given a common ressurect order, the target will be resurrected faster but only one of them (probably the one the engine decides actually completed the process) will try to restore it to health.  In the case of an area command the units who do not stay behind to repair the target will move on to a new target.

Hold the Ctrl key to force resurrection. This means the units will also attempt to resurrect corpses that are being reclaimed.

Hold the Alt key to issue a persistent area resurrection order. This means the order will remain even when there are no corpses left to resurrect.

Hold the Meta key (space) to issue an area resurrection command that will only attempt to resurrect corpses with 100% metal or resurrect progress.

====Self Destruct (CTRL D)====
Will detonate the selected units/buildings in a very spectacular explosion after a specific count-down (default is 5 seconds). Use this when destroying units/building that are in the way, or when detonationg mines or crawling bombs. A way to literally go out with a bang is to press Ctrl A (Select All), Ctrl D (Self Destruct). Note that this will make you lose the game, but is very spectacular!

====Stop (S)====
Makes the selected units stop any queued commands immediately. They will not automatically stop attacking units, unless their fire state is set to Hold Fire, but they will cancel any ongoing attack orders, allowing them to select and engage targets based on their default AI.

====Wait (W)====

Start issuing your chain of commands (Holding Shift). BEFORE a command that you want your units to wait for a go command to execute, press Shift W, and then continue queuing up orders. Now, to cancel the first wait queued on this group, and have them continue with the rest of the queue, select the units when they're waiting and hit W. Many of these wait waypoints can be chained together. Note that if you hit W before some or all of the selected units have completed the command before the wait, only those that have completed the preceding command will continue.

Units are automatically issued a &quot;stop waiting&quot; command when loaded into and unloaded from a transport.

Wait is a standard command; by using Repeat in conjunction with wait, it is possible to create precisely timed strike and raiding groups.

=== Unbinded Commands===
These have no default hotkeys. You must bind them yourself, either by typing in the console something like '''/bind shift+k timewait 60 enqueued''' or by editing your uikeys.txt file.&lt;br&gt;

====GatherWait====
- Use it after a movement command of some sort (move / fight)&lt;br&gt;
- Units will wait until all members of the GatherWait command have arrived at their destinations before continuing&lt;br&gt;
- If you have &quot;gathermode&quot; enabled, a gatherwait command is automatically added after every move and fight command (the default move cursor will be changed to the gather cursor to indicate that you are in gathermode)&lt;br&gt;

====SquadWait====
- Usually used with factories (but does work on groups without a factory)&lt;br&gt;
- Pick a factory, and give it a rallypoint, then add a squadwait command with the number of units you want in your squads. units will wait at the initial rally point until enough of them have arrived to make up a squad, then they'll continue along their queue.&lt;br&gt;

====DeathWait====
- Units will not wait on themselves&lt;br&gt;
- One possible use is to have a group of aircraft wait for an enemy's anti-aircraft defenses to crumble before passing over their ruins to attack.&lt;br&gt;

====TimeWait====
- With the time in seconds

'''[[Balanced_Annihilation|&lt;--Back to Balanced Annihilation]]'''</text>
      <sha1>byw98of484o7wqfkyf1nelmffgpshw0</sha1>
    </revision>
  </page>
  <page>
    <title>Balanced Annihilation:Starting With TA</title>
    <ns>0</ns>
    <id>2930</id>
    <revision>
      <id>24842</id>
      <parentid>24346</parentid>
      <timestamp>2012-08-01T11:53:07Z</timestamp>
      <contributor>
        <username>Zerver</username>
        <id>2656</id>
      </contributor>
      <minor/>
      <comment>fix link</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7246">{{deprecated|This page is deprecated, please look at the [http://balancedannihilation.org/ Balanced Annihilation Homepage]}}

===Gameplay in general===
Visit this oldish [[Spring_guide! | Spring TA guide]] to get a general knowledge about the BA's gameplay.

Note: Needs overhaul.

----

===Strategy===
For more strategies visit: [[Strategy_and_Tactics | Strategy 'n' Tactics]]

Note: sections to be filled in.

====Starting out====
As a new player without any previous TA-derived game experience you definitely should '''''watch some games first''''' to understand BA basics. Otherwise you would  probably ruin the game for other players.

Try to pick a start position near a good amount of metal patches. If you can't properly locate the metal patches just hit [[Balanced_Annihilation:Command_Reference | F4 to see the metalmap]]. F4 again to return back to the classic view. Most maps are designed to have 3 patches near designated starting points. 

You should take all metal patches located near your start position (most commonly 3). Build metal extractors (referred as &quot;mexes&quot;) at the patches and some energy (2 or 3 solar plants) before starting anything else. Then it's time to build a factory - a vehicle one for flat maps or a K-bot one at rugged maps. Afterwards, most players build a light laser tower (LLT) or two to prevent enemy early scouts from running behind your base and destroying the economy.

If you reach this state of your base you should start making some units. Build one construction unit (also called &quot;con&quot;) and start producing your army. You can assist the factory with your Commander or a construction unit. When you have some attack units built follow your teammates to the battle. 

Try to ''follow your teammates'': attack, defend, reclaim, build more economy, build some defend at the keypoints, etc. Remember the key is cooperation!

====Economy====
If you have more economy than the enemy, you can get more or better units.  This is how, ultimately, you win. Some essential points which you should definitely use:

*'''Take advantage of metal patches and geothermal vents''': Metal extractors are much, much cheaper than powering metal makers.  This remains true at tier 2, where moho mines become vastly cheaper than fusion plants and moho metal makers.  Geothermal spots are similarly the cheapest source of energy in the game - a moho geo, for instance, produces energy at less than half the cost of a fusion plant.  This means that, in most cases, it's worth walking a considerable distance to take advantage of metal/geo spots you control rather than building economy in your base.

*'''Reclaim wreckage and map features''': Unit wrecks are an excellent source of metal, and map-provided rocks and trees are free resources.  In many cases it can be worth sacrificing a builder to claim wreckage in hostile territory - usually they pay for their own cost as well as deny the wreck to the enemy.

*'''Use (or share) your resources''': Resources kept in storage are essentially being wasted.  They are a symptom of not having enough ''build-power'', or construction units.  If you're not building more units, extra resources can instead be invested into even more economy.  Many times your allies will have extra buildpower that you don't - in such cases it is often very efficient to simply give your resources away by lowering the share threshold (click somewhere into your metal or energy bar to change the threshold).

*'''Use nano-turrets sparingly''': Nano-turrets can provide extra build power, however they themselves cost a considerable amount of metal and energy, especially in the early game.  If you are already metal or energy stalling there is no point to building more of them - doing so will only slow down production of the units or economy you're ultimately trying to make with them.

====Managing units (&quot;Micro&quot;)====
While BA is a largely strategic game, there is considerable value to managing your units tactics.  Some things to consider:

*'''Repair damaged units''': Repairing is virtually free compared with building a new unit from scratch, so if you can keep a unit alive by moving it off the front line a bit once it becomes damaged you can get far more on the field. The Commander's health should be kept at high level all the time to survive a sudden attack.

*'''Resurrect units (&quot;rezing&quot;)''': Resurrecting of fallen units can bring you a very good advantage. You can use your resurrecting units mainly when the battlefield is relatively safe for them and you can resurrect the whole place or if you find a wreck of some valuable unit which you need. You can also resurrect a Commander although it costs a huge amount of resources and time.

*'''Surround the enemy''': Units in BA suffer extra damage if they are being attacked from multiple directions at once. At the extreme, two units standing opposite a tank will do 50% more damage than two units standing next to each other.

*'''Use your range (&quot;kiting&quot;)''': If you outrange the enemy and have some territory to maneuver in, you can gain a significant advantage by moving away while shooting. Approach-&gt;attack-&gt;move back behind your defense. Typically performed with some missile units.

*'''Cross the T''': One of the best positions to be in is where your units are all firing and only one of the enemies is.  If you enemy has lined up his units, for instance, you can attack one edge of the line at a time rather than hitting them all at once.

*'''Attack in waves''': One of the worst positions to be in is where the enemy is crossing your T. Implicitly, this can happen when you order units that are far apart into enemy territory and they arrive at different times. Similarly, setting a rally point of a factory into the enemy's defensive line will often result in your units dying one at a time.  Instead, set a rally point a safe distance away, and once you have sufficient units attack in mass.

*'''Use the terrain''': Try to gain advance from the position of your units/structures. When you are at a hill you can spot and shoot further. Also units walk slower when reaching a high-placed positions. This gives you a longer time period for defense when you're at top of a hill.

====Com Pushing====
Com pushing is the strategy of moving your Commander towards the front lines after building your initial base. 
The advantage is that you can claim territory and metal patches early (by building light laser towers). Small groups of enemies can also be destroyed with the Commander's D-gun.  The Commander also functions as an excellent repairman for damaged units and reclaimer of wrecks.

However there are many dangers for Commander in the first line. The main threat are planes. An enemy can steal your Commander by a transport plane (referred as &quot;[[Commander_kidnapping |Com nap]]&quot;), assault him with an enemy's Commander (&quot;[[Commander_bombing |Com bomb]]&quot;) or accurately bomb him because his position is known. You also should keep your eye on mines, if you spot a minelayer fall back immediately!

====Teching (&quot;Going T2&quot;)====
Note: need some good techer 

----

====Continue====
'''For more crucial info follow [[Balanced_Annihilation:misc | this link]].'''

'''[[Balanced_Annihilation|&lt;--Back to BA]]'''</text>
      <sha1>mzny01wu66vk52jzenyunngm11o8r6v</sha1>
    </revision>
  </page>
  <page>
    <title>Balanced Annihilation:Using Selections</title>
    <ns>0</ns>
    <id>1748</id>
    <revision>
      <id>26856</id>
      <parentid>24364</parentid>
      <timestamp>2013-03-23T16:49:17Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>1cat (2cat)</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4818">{{Balanced_Annihilation_deprecated}}

'''[[Balanced_Annihilation|&lt;--Back to Balanced Annihilation]]'''

===Default Selection Controls===

Many of these controls can be customized in the [[#The Selection Editor|selection editor]].

====Selecting/Deselecting Units====
Unless you have issued a pending command(see [[Using_Orders#Left Mouse Control (Mouse 1)|Left Mouse Control (Mouse 1)]]), left-clicking(Mouse Button 1) a unit will clear the current selection and select the left-clicked unit, if a spot with no valid selection is clicked(empty space, ground, unowned units), the current selection will be cleared. Left-clicking and dragging will draw a box, any units within this box will be selected when you release the mouse button.

Shift Left-clicking(including dragging a select box), unless you have a pending command, will add units to the current selection.

CTRL Left-clicking (including dragging a select box), unless you have a pending command, will toggle selection. Units in the selection will be removed from it, units not in the selection will be added to it.

Double-left-clicking a unit that's not in a group will select all visible (camera bounds) units of the clicked type. Shift Double-left-clicking will add all units of the double-clicked unit's type to the current selection.

CTRL Z is a shortcut to select all owned units of the current selected type.  For example, if a peewee and a brawler are selected, all peewees and brawlers will be selected.

CTRL A is a shortcut (which can be eddited in Selection Editor) to select all owned units.
&lt;br /&gt;
&lt;table&gt;&lt;tr&gt;&lt;td&gt;&quot;Tooltips&quot; are displayed in the bottom left of the current interface. If units are selected, this information is the sum of all information about all units in the selection. If you select a bank of 5 solar collectors, it will show the total health of all those units and the total energy they're producing. If you move the mouse over a &quot;build-pic&quot; in a list of units that can be built, it will show you the costs and stats associated with the unit represented by the &quot;build-pic&quot;. If you have no selection, the tooltip will show information about what your mouse is over at that time. If your mouse is over a unit, it will show stats for that unit. Otherwise it will show information about the terrain.
&lt;/td&gt;&lt;td&gt;
&lt;table&gt;&lt;tr&gt;&lt;td&gt;
[[Image:CommanderTooltip.png|thumb|120px]]&lt;/td&gt;&lt;td&gt;
[[Image:TerrainTooltip.png|thumb|120px]]&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Commander Selected&lt;/td&gt;&lt;td&gt;Terrain Hover (No Units Selected)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;
[[Image:BuildMexTooltip.png|thumb|120px]]
&lt;/td&gt;&lt;td&gt;
[[Image:RepairTooltip.png|thumb|120px]]&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Metal Extractor Buildpic Hover&lt;/td&gt;&lt;td&gt;Repair Command Hover&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
[[Image:PeeweeGroupTooltip.png|frame|center|Group of units Selected]]

====Basic Unit Groups====

Spring supports assigning units to numbered groups. You can assign the currently selected units to a numbered group with CTRL # (where # is a number key) which will put that number(#) above all selected units, then later, you can quickly select just these units by pressing that #, or add them to the current selection with SHIFT #.

If a factory is set to a group, all units built by this factory will also be automatically assigned to this group. This is not a good idea with combat units unless you ungroup the factory before sending the units into battle, as it can prevent you from assigning certain orders, and result in newly-produced units doing stupid things.

Units can only be in one group at a time, so assigning a new group number to a unit will remove it from its current group.

Assigning a unit to a group overides normal double-clicking behaviour. If you double-click a member of a group, all units in the same group will be selected.

Also note that when you CTRL # a group of units the old group with that number will no longer exist. If you intend to add aditional units to a group, you must first SHIFT # the current members and then add (by holding SHIFT) the additional units to the selection group and the use CTRL # to re-assign all the units to that group. A shortcut for this is holding down both SHIFT and CTRL and pressing a number(#) to add the current selection to that group, and select the entirety of that new group.



===The Selection Editor===

'''SelectionEditor.exe''' is a program installed in your install directory, which is used for editing your '''selectkeys.txt''' configuration file, allowing you to make your own shortcut keys for selecting/filtering selection. Alternately, you can write [[selectkeys.txt]] yourself.

This [http://taspring.clan-sy.com/phpbb/viewtopic.php?t=2190 Forum Thread] has some good documentation about using the selection editor.

'''[[Balanced_Annihilation|&lt;--Back to Balanced Annihilation]]'''

[[category:Balanced Annihilation]]</text>
      <sha1>ph33er3veqvrfjlus185jo6951dryzj</sha1>
    </revision>
  </page>
  <page>
    <title>Balanced Annihilation:misc</title>
    <ns>0</ns>
    <id>2931</id>
    <revision>
      <id>26580</id>
      <parentid>26378</parentid>
      <timestamp>2013-03-17T23:26:24Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>/* Cooperative play (co-op) */ kill a wanted page</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2504">=== Controls ===
Very useful for every BA beginner:

*'''[[Balanced_Annihilation:Using_Selections|Selections/Groups/Group Commands/Group AI]]'''

*'''[[Balanced_Annihilation:Giving_Orders|Giving Units Orders]]'''

*'''[[Balanced_Annihilation:Command_Reference|Command Quick Reference]]'''

*'''[http://sparcman.net/Documents/Spring_Control_Reference.pdf Printable Command Reference PDF download]

*'''[[Balanced_Annihilation:Camera_Control | Using the Cameras]]'''

*'''[[Balanced_Annihilation:Chat|Chat, Cheats, and Text Commands]]'''

*'''[[Balanced_Annihilation:Doodles|Map drawing/doodles]]'''

*'''[[Balanced_Annihilation:Custom_Keys| Customized key shortcuts/bindings and the key/selection editor]]'''

----

===Cooperative play (co-op)===
BA includes a cooperative play mode for players to work as an even closer team.  When the cooperative mod option is enabled, players who take the same team id will form a co-op.  Players who are part of the same co-op completely share everything - all resources are pooled, and any unit within the co-op can be commanded by anyone within the co-op.

Each player within the co-op starts with their own commander, and must select their own start point before clicking ready - if the co-op readies before a player has selected a start location, then two commanders will spawn on the same spot.

Once the game has started, it is especially important for co-oping players to communicate their overall strategy so that units don't receive conflicting orders.  It's also somewhat easier to overspend - in a co-op of three, players might feel like they have triple the normal amount of resources.

In practice, co-op mode tends to work best when done with friends, clanmates, or other (willing) strangers.  However, even among voluntary participants experience has shown that large co-ops of 5 or more players tend to have at least one person getting upset due to their orders being canceled or similar (often unintentional) issues.  Unless communication can be improved through mumble, it is recommended to split large co-oping teams into multiple, smaller co-ops.

If cooperative mode is disabled, then players who share the same team id will instead share control of the same commander.  This is called &quot;comm-sharing&quot; and is available in every mod.

===Chicken Defense===
Balanced Annihilation features a chicken defense subversion, designed as a BA version of tower defense.

----
'''[[Balanced_Annihilation|&lt;--Back to BA]]'''

[[Category:Balanced Annihilation]]</text>
      <sha1>0jesgamp5oz0dx4meuh3niemkoxms9k</sha1>
    </revision>
  </page>
  <page>
    <title>Balanced Annihilation shared section</title>
    <ns>0</ns>
    <id>2929</id>
    <revision>
      <id>30604</id>
      <parentid>26475</parentid>
      <timestamp>2018-01-06T12:06:55Z</timestamp>
      <contributor>
        <username>Ptaq</username>
        <id>2936</id>
      </contributor>
      <comment>/* Chicken Defense */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2617">=== Controls ===
Very useful for every BA beginner:

*'''[[Balanced_Annihilation:Using_Selections|Selections/Groups/Group Commands/Group AI]]'''

*'''[[Balanced_Annihilation:Giving_Orders|Giving Units Orders]]'''

*'''[[Balanced_Annihilation:Command_Reference|Command Quick Reference]]'''

*'''[http://sparcman.net/Documents/Spring_Control_Reference.pdf Printable Command Reference PDF download]

*'''[[Balanced_Annihilation:Camera_Control | Using the Cameras]]'''

*'''[[Balanced_Annihilation:Chat|Chat, Cheats, and Text Commands]]'''

*'''[[Balanced_Annihilation:Doodles|Map drawing/doodles]]'''

*'''[[Balanced_Annihilation:Custom_Keys| Customized key shortcuts/bindings and the key/selection editor]]'''

===Cooperative play (co-op)===
BA includes a cooperative play mode for players to work as an even closer team.  When the cooperative mod option is enabled, players who take the same team id will form a co-op.  Players who are part of the same co-op completely share everything - all resources are pooled, and any unit within the co-op can be commanded by anyone within the co-op.

Each player within the co-op starts with their own commander, and must select their own start point before clicking ready - if the co-op readies before a player has selected a start location, then two commanders will spawn on the same spot.

Once the game has started, it is especially important for co-oping players to communicate their overall strategy so that units don't receive conflicting orders.  It's also somewhat easier to overspend - in a co-op of three, players might feel like they have triple the normal amount of resources.

In practice, co-op mode tends to work best when done with friends, clanmates, or other (willing) strangers.  However, even among voluntary participants experience has shown that large co-ops of 5 or more players tend to have at least one person getting upset due to their orders being canceled or similar (often unintentional) issues.  Unless communication can be improved through mumble, it is recommended to split large co-oping teams into multiple, smaller co-ops.

If cooperative mode is disabled, then players who share the same team id will instead share control of the same commander.  This is called &quot;comm-sharing&quot; and is available in every mod.

===Chicken Defense===
Has been updated and integrated into BA. This way it’s possible to switch to chicken defence, also maintaining its code is easier this way. Just add an chicken AI bot and make sure you have startboxes set. (“!autobalance off” to manually get everyone on the same team)

[[Category:Balanced Annihilation]]</text>
      <sha1>pgcvm43twyzjowlceautm49e2ou959t</sha1>
    </revision>
  </page>
  <page>
    <title>Base building tips</title>
    <ns>0</ns>
    <id>963</id>
    <revision>
      <id>19063</id>
      <parentid>12864</parentid>
      <timestamp>2010-03-13T18:33:37Z</timestamp>
      <contributor>
        <username>Koshi</username>
        <id>2371</id>
      </contributor>
      <comment>made historical</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2603">{{historical}}
''tips by GenBlood (with suggestions from Min3mat)''

I'm no expert on this. I'm just posting tips that might help you build your base better. All tips are based on resources starting at 1000 metal and 1000 energy.

===Absolute Annihilation===

# Build a level 1 Kbot Lab, level 1 Vehicle Plant or a level 1 Aircraft Plant first. Only one at the start of the game, depending on game resources.
# On the energy end, build Wind Generators first because they use less metal than solar. Build at least 3 or 4 after building a level 1 plant.
# Now depending on the map, you need metal to build more advanced stuff. Try to build at least 4 or 5 Metal Extractors.
# Now its time to build some units. You should build at least two level 1 construction units to help out your commander. Muliple construction units can help build strutures and units faster but remember, by doing this, resources will be drained faster.
# Now you should build a radar tower not far from your main base. You don't want the enemy to surprise you.
# Add a few missile towers around your base to protect metal extractors, wind generators and other structures. Don't go hog wild on this at the beginning. That is a waste of resources.
# Build some units to repel enemy units. I would say around 10 or 15 units to start with. At this point, managing your resources is very important. Energy is important, so build a energy storage unit. You may also want to build metal storage.
# Now its time to build level 2 factories. From this, build two advanced construction units. Have your advanced construction units build at least 2 Moho Metal Extactors quickly. 
# After you got that done, you'll want to build a Cloaked Fusion Reactor for power. (However you should consider building one [if not 3 or 4] Light Fusion/ Mobile Fusions first.) Use at least three construction units to build the first Fusion Reactor. Keep an eye on your resources. If you energy drops to zero, you cannot mine metal. This will ''greatly'' slow construction. 
# After you got the first Reactor done. Build a second one and two Metal Makers with Advanced Construction units. 
# Now it's time to build level 2 units to attack enemy bases. While you are building your units, reinforce your base defenses.

While building your base, keep in mind some buildings go boom in a big way when they die. No buildings should really be clustered together (especially energy producers) but the following need special consideration: Fusion Plants, Annihilator/Doomsday Machine, energy storage, Geothermal, Big Bertha/Intimidator, Targetting Facility.

===Expand</text>
      <sha1>5nr37ndoji7gn6ee3gmpd61r4on7tog</sha1>
    </revision>
  </page>
  <page>
    <title>Basic s3o unit making guide</title>
    <ns>0</ns>
    <id>1371</id>
    <revision>
      <id>26791</id>
      <parentid>22995</parentid>
      <timestamp>2013-03-21T10:38:27Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>1catrecat</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8085">==What you need:==

*The Model
*The UV map
*The Textures
*The Script
*[[Upspring]]

== The Model ==


You can make it in any of the 3d modelling programs mentioned [http://taspring.clan-sy.com/wiki/Map%2C_Mod%2C_And_Unit_Development_Programs#3d_Modeling here.]

Upspring will import .OBJ, and .3DS, (.3DO is supported as well but we are supposed to be working from scratch here and not converting old units).


Importing 3DS files will have some sort of hierarchy, but with all pieces at the same level you will have to re-arrange them into the correct order using cut-paste commands.


If I'm not mistaken, .OBJ files don't have hierarchy, so there is no distinction between parts of the unit.


So for using this format you must save each part of the unit in separate files and import them individually from UpSpring. You must have at least one existing object to import to, so create an &quot;empty&quot; object if needed, then import the pieces following the hierarchy, or you can manually arrange them later.


For moving object origins, move part using the move tool, and then use &quot;Apply transformation&quot; button in object tab.


Put the saved .S3O file in the &quot;Objects3D&quot; folder in your mod structure files.


'''IMPORTANT'''
'''All part names in s3o must be in lower case in UpSpring.'''

This will avoid issues with the script.

== The UV map ==


Only one UV map image is allowed, so you must make all parts use the same UV map.

It's reported that the biggest texture size of the UV map is 2048x2048.


A guide on Skinning (UV mapping) can be found [http://taspring.clan-sy.com/phpbb/viewtopic.php?t=3511 here].

'''**Added by TA 3D:''' When you want to bring in UV coordinates, go to the Texture Mapping menu again and click on Import UV coordinates from model. Since the texture is flipped vertically you have to flip the UV coordinates. Only use 3ds files for this as obj files don't have UV coordinates. I hope this helps.'''**'''

'''**Added by Mehere101:''' This may be out of date, using Blender 2.42 RC3 I can get UV coordinates exported into the OBJ file.  Make sure that you are exporting to Wavefront OBJ, and that whatever exporter you have has the UV Mapping Box checked (In blender its off by default for some reason)'''**'''

You can import .3DS models already UV mapped into UpSpring.

(But in my tests the UV map results incorrectly displayed, please fix this part if you know how to do it right)


Another way of making the UV map is importing the model first to UpSpring, either by using one .3DS file or the separate .OBJ files method.

Once you have the model imported and in the right place, use &quot;Export Model for UV mapping&quot; in UpSpring.


Then UV map that .OBJ file with whatever UV mapping tool of your liking, save, and then import back the UV using the &quot;load UV map from file&quot;.

== The Textures ==


Quote


&quot;There are two textures for each model, texture1 is the standard skin texture but the alpha is used for teamcolor. Texture2 uses the green channel for reflectivity and the red channel for self illumination, blue is unused so far.&quot;


(In The GIMP, what is texture will show completely black, and what is teamcolor will show transparent, showing the texture under the alpha. Which is a bit awkward if you ask me.. as you wont be able to see what is supposed to be texture, but what wont. buh!)


The value of the alpha will blend with the texture, so you can make cool teamcolor/texture transitions ;) .

(I've tested DDS format several times in The GIMP, using the export plugin, and have not been able to make these files work so far. Hopefully someone can add more information on this.). '''**Edit: I will do some digging to find out what the exact formats are that DDS is supposed to be saved as. TA 3D**'''


UpSpring 1.3 has a built it texture builder that works great. Use bmps.

'''**Added by TA 3D:''' Spring will use TGA  and PNG files, but if you want the textures to work better and run more efficiently, use DDS files which is a native image format for videocards made by Nvidia. It works on any videocard, not just Nvidia's cards.
NOTE: UpSpring makes the files flipped vertically so you will have to flip the UV coordinates in UpSpring. '''Do not use any other format for making DDS files with UpSpring than bmp otherwise you will have problems. If you use anything else the alpha channel will screw it up. Note: The following images are png to conserve bandwith.'''
Here's an example of a DDS file I made for a model recently.
Texture 1 Texture and Team color:
Texture RGB-channels of the first dds texture file:

http://www.majhost.com/gallery/3dbricks/TASPRING/fc1.png

Team color-the alpha channel of the first dds texture file:

http://www.majhost.com/gallery/3dbricks/TASPRING/fc2.png

Texture 2 Reflectivity and Illumination:
Reflection green-channel of the second dds texture file:

http://www.majhost.com/gallery/3dbricks/TASPRING/fc3.png

Illumination red-channel of the second dds texture file:

http://www.majhost.com/gallery/3dbricks/TASPRING/fc4.png

Upspring can make dds files using the S3O Texture Builder option under the Texture menu.

http://www.majhost.com/gallery/3dbricks/TASPRING/menu.png

Making the first dds file.

http://www.majhost.com/gallery/3dbricks/TASPRING/texture_builder.png

And making the second.

http://www.majhost.com/gallery/3dbricks/TASPRING/texture_builder2.png

When you want to bring in UV coordinates, go to the Texture Mapping menu again and click on Import UV coordinates from model. Since the texture is flipped vertically you have to flip the UV coordinates. If the Team color doesn't work try inverting the the Team color image using the invert box. I hope this helps. As soon as I have a working model, then I will post a pic of the above textures applied to it.'''**''' 


Put the finished files in &quot;unittextures&quot; folder inside your mod structure.


some other words on the textures:


&quot;alpha is a greyscale... black = no team color, white = all team colour... because Photoshop is dumb stick to 1% balck or 99% black... anything in between is &quot;blended&quot;... like transparency in the team colour mapped over the main texture...&quot;

== The Script ==


A common script, see other wiki resources for information on what is new/changed in spring.



== The unit FBI file ==


In this file goes the usual information, plus one change:


the usual
	Objectname=UNITNAME;

must be 
	Objectname=UNITNAME'''.s3o''';

== Common Troubles ==


*The unit doesn't show up in game, although the &quot;/give unitname&quot; will work and you can see the selected base.

This is caused because the unit is underground. In the Model tab you must give your unit a center, collision sphere radius and heigth in UpSpring, you can use &quot;estimate&quot; which shall be fine.

*The unit texture is all black in game!

Read the texture section here. 3DOs cant be UV textured. Use .TGA format. Don't forget alpha.

*The UV seems wrong in game..

Flip the UV. In UpSpring go to, Texture Mapping&gt;Show UV Maps, then, edit&gt;Flip UVs.

*I get a &quot;missing part&quot; error, and the unit doesn't aim turrets or animate as indicated in the script.

See last lines in The Model part.

== Related Threads ==


[http://taspring.clan-sy.com/phpbb/viewtopic.php?t=4519]
[http://taspring.clan-sy.com/phpbb/viewtopic.php?t=2660]
[http://taspring.clan-sy.com/phpbb/viewtopic.php?t=3766]
[http://taspring.clan-sy.com/phpbb/viewtopic.php?t=3641]

[http://taspring.clan-sy.com/phpbb/viewtopic.php?t=4536 Complementary information]


*Credits

Its all stolen from the above threads.


'''extra notes:'''

Texture filename can be anything; you allocate the texture to the model when you save it as a .s3o object

Object filename can be anything; the unit fbi/lua file you allocate which model to use. 

Script filename must be the same name as the unit fbi/lua filename, unless you are using lua animation scripts, in which case you can use the script tag in the unitdef file.

''In the fbi/lua file:''

unitname is the name game refers to. ie. the one you type in the console to /give the unit.

name is the name that players will see.


[[Category:3D Models]]</text>
      <sha1>gtf56rswqgmw35p5dc2p9je1uxablq9</sha1>
    </revision>
  </page>
  <page>
    <title>Bitmapmuzzleflame</title>
    <ns>0</ns>
    <id>1821</id>
    <revision>
      <id>28799</id>
      <parentid>18972</parentid>
      <timestamp>2014-10-05T16:34:45Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>tag for delete</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1429">{{delete}}
Bitmapmuzzleflame is a simple projectile useful for making a muzzleflame with two textures, one as the muzzleflame seen from the sides and one as seen from the front.

'''Propertiers for Bitmapmuzzleflame:'''

&lt;ul&gt;
&lt;li&gt;
'''[[AtlasedTexture]] sideTexture'''&lt;br&gt;
Defines the texture for the sides of the flame.
&lt;/li&gt; &lt;br&gt;

&lt;li&gt;
'''[[AtlasedTexture]] frontTexture'''&lt;br&gt;
Defines the texture for the muzzleflame as seen from the front.
&lt;/li&gt; &lt;br&gt;

&lt;li&gt;
'''float3 dir'''&lt;br&gt;
Direction of the flame.
&lt;/li&gt;&lt;br&gt;

&lt;li&gt;
'''[[CColorMap]] colorMap'''&lt;br&gt;
Colormap describing the colors during the flame lifetime.
&lt;/li&gt;&lt;br&gt;

&lt;li&gt;
'''float size'''&lt;br&gt;
Initial hight and width of flame.
&lt;/li&gt;&lt;br&gt;

&lt;li&gt;
'''float length'''&lt;br&gt;
Initial length of the flame, this is the size in the direction the flame is pointing.
&lt;/li&gt;&lt;br&gt;

&lt;li&gt;
'''float sizeGrowth'''&lt;br&gt;
This is how much the flame will grow during its lifetime. A value of 0 means the flame will stay the same size during its entire lifetime. A value of 1 means that it will have grown to double its size when its life end. The growth curve is exponential, faster in the beginning and slower at the end.
&lt;/li&gt;&lt;br&gt;

&lt;li&gt;
'''int ttl'''&lt;br&gt;
How many frames the flame will be visible.
&lt;/li&gt;&lt;br&gt;

&lt;li&gt;
'''float frontOffset'''&lt;br&gt;
Offset for the front texture in percent of length. 0 means the front will at the beginning of the flame, 0.5 in the middle, and 1 at the end.
&lt;/li&gt;&lt;br&gt;
&lt;/ul&gt;</text>
      <sha1>lat09q844c5mnd2lry6qr8mw244ae7o</sha1>
    </revision>
  </page>
  <page>
    <title>BloX</title>
    <ns>0</ns>
    <id>1989</id>
    <revision>
      <id>21271</id>
      <parentid>18905</parentid>
      <timestamp>2011-02-24T16:51:49Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2774">{{historical}}
This was originally a mod by Maelstorm in which you had 3 units the Ubercar a transport car, Skink a turret, and your commander the builder. 

===Basic Info===

In this mod, players construct chassis and turrets separate, then combine them for devastating results.  Turrets upgrade firepower and change models with enough veteran experience.

----

===Things that I have added/changed:===

In the spirit of things, this being the last time I plan to mess with BloX, the gameplay will be balanced slightly.  Units will require resources to be constructed, and resources will be provided from either the ground based mine-nodes, or from transportable solar panels.

----

=== Things that I intend to add: ===

I plan to only include what is on my design document, which includes 8 weapons, 3 builders(Including Core Node), 4 Technology Modules, 5 land units, 3 sea units, 3 air units, and 2 hovertanks.

Unit List:


--Turrets--


-Transportable Builders-

Builder - Builds Basic Units

Advanced Builder - Builds Advanced Units


-Attack Modules-

Laser - Laser, 3 Levels, Final Level is a Constant Beam

MG - Machine Gun, 4 Levels, Final Level is a Dual Gatling Gun

Cannon - Cannon, 6 Levels, Final Level is a 6 pack Cannon Array

Rocket Launcher - Dummy Rocket Launcher, 3 Levels, Final Level is a 6 pack high speed launcher

Missile Launcher - Seeker Missile Launcher, 3 Levels, Final Level is a 4 pack Missile Launcher

Mortar - Mortar/Artillery, 3 Levels, Final Level is a Dual Artillery Array

Shotgun - Shotgun, 3 Levels, Final Level is a 3 pack Shotgun Array

Flamethrower - Flamethrower, 3 Levels, Final Level is a Plasma Igniter


-Tech Modules-

Paralyzer - Paralyzer, paralyzes things

Shield - Shield, Blocks most bullets

Radar - Radar, Detects Enemies

Solar Panels - Solar Panel Array, Generates Energy


--Immobile Units--

Core Node - Commander, Produces Energy/Metal, Builds Some Units

Mine Node - Mine, Produces Metal, 1 slot for turrets


--Vehicles--

-Land-

Trike - Trike, Fast, 1 slot

Tank - Tank, Armored, 1 slot

Heavy Tank - Heavy Tank, Heavy Armor, 2 slot

Spider Tank - Spider Tank, Climbs Steep Slopes, 1 slot

Behemoth Tank - Behemoth Tank, Very Heavy Armor, 4 slot


-Sea-

Scout Boat - Scout Boat, Fast, 1 slot

Cruiser - Cruiser, Armored, 2 slot

Battleship - Battleship, Heavy Armor, 3 slot


-Air-

Helicopter - Helicopter, Quick, 1 slot

VTOL Fighter - Gunship, Fast, 1 slot

Flying Fortress - Heavy Gunship, Quick, 2 slot


-Hover-

Skiff - Skiff, Fast, 1 slot

Hovertank - Hovertank, Quick, 2 slot


----

===Download===

As soon as the mod is done it will be released, and a link will be provided here.


----


Credits go to '''''Maelstorm''''' for making the mod, and '''''Smoth''''' for the FBI tag [fireplatform].</text>
      <sha1>m6wyiuscsk2rwcbylkthuf1ica0r308</sha1>
    </revision>
  </page>
  <page>
    <title>Blox</title>
    <ns>0</ns>
    <id>2219</id>
    <redirect title="BloX" />
    <revision>
      <id>14868</id>
      <parentid>12032</parentid>
      <timestamp>2008-06-15T01:44:14Z</timestamp>
      <contributor>
        <username>Posts</username>
        <id>2503</id>
      </contributor>
      <comment>revert spam</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="18">#REDIRECT [[BloX]]</text>
      <sha1>6i9phjhqk9a1eedpl3sxa87y554g8xx</sha1>
    </revision>
  </page>
  <page>
    <title>Botflags</title>
    <ns>0</ns>
    <id>3816</id>
    <revision>
      <id>31019</id>
      <parentid>30883</parentid>
      <timestamp>2019-03-31T17:31:38Z</timestamp>
      <contributor>
        <username>Silentwings</username>
        <id>2883</id>
      </contributor>
      <minor/>
      <comment>/* Battle hosts on the lobby server */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3301">[[Main_Page|Wiki]] &lt; [[Community_Docs|Community]] &lt; {{FULLPAGENAME}}

== Battle hosts on the lobby server ==

All battle hosts that do not have a botflag are limited to a maximum number of 8 players, plus unlimited spectators. This includes both human hosters and autohosts. 

Host admins that would like to get a botflag for an Autohost need to create a new thread in the [https://springrts.com/phpbb/viewforum.php?f=16 Ingame Community Forum] with &quot;Botflag request&quot; as topic title and the lobby username which should get the botflag. ''Note: A botflagged user account should not be used to play games on, except when hosting; otherwise it will not function correctly. 
''

All users, including battle hosts, must adhere to the [[Terms_of_Service|terms of service of the lobby server]]. In addition:

=== Battle hosts with a botflag ===

Hosts with a botflag are expected to encourage and maintain an environment in which users are able to play games, free from serious disruption and excessively hateful or obscene behavior. 

Autohosts with a botflag are expected to appoint host owners and/or admins who are generally capable of maintaining the above expectations, with the help of the tools (pms/kicks/bans/mutes/plugins/etc) provided by the lobby server and SPADS. They should react and respond to all server commands in accordance with the lobby protocol. As part of the response to a ''!list users'' command sent via private message, the autohost must list the usernames of all host admins, and at least one contactable host owner. This list should be kept up to date.

Hosts with a botflag are normally expected to use the latest stable engine version, or a later developmental version, and to host content that is made available for automated download.

Hosts with a botflag may add additional features and enforce restrictions on their use (such as rank limits, plugins, special game modes) providing that they meet the above expectations. In extreme cases, if lobby moderators judge that the above expectations are consistently not met, lobby moderators may require that particular people are added and/or removed as host admins or owners, or that particular features/restrictions are removed. Hosts that do not comply will lose their botflag.

=== Battle hosts without a botflag ===

Hosts without a botflag are not subject to the same expectations as botflagged hosts, and are free to act as a private service provided by one or more users. Such hosts may arbitrarily appoint/remove their admins and owners, add additional features and enforce restrictions on their use, providing they remain within the terms of service of the lobby server.

=== Reporting ===

All issues concerning users behaviour inside battle hosts should be reported to the hosts owners and admins. Springs moderators will not normally become involved in such cases. Issues of serious and prolonged disruption that extend beyond an individual battle host, or concern the conduct of host owners/admins, should be reported to Springs moderators via [https://springrts.com/phpbb/ucp.php?i=pm&amp;mode=compose&amp;g=1643 private message].

Note that the terms of service of the lobby server explicitly recognize that it will not be possible for Springs moderators, or autohost owners and admins, to maintain order at all times.</text>
      <sha1>e7jlpx8wzh9giprfi84wkxhlh7ztb1w</sha1>
    </revision>
  </page>
  <page>
    <title>Browse the Wiki</title>
    <ns>0</ns>
    <id>1427</id>
    <redirect title="Main Page" />
    <revision>
      <id>11242</id>
      <timestamp>2006-04-23T13:47:24Z</timestamp>
      <contributor>
        <username>Fnordia</username>
        <id>1</id>
      </contributor>
      <comment>Browse the Wiki moved to Main Page</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="24">#REDIRECT [[Main Page]]
</text>
      <sha1>lgpsgpv20qo7jfnlan57x3s12bv2kbm</sha1>
    </revision>
  </page>
  <page>
    <title>Bugs</title>
    <ns>0</ns>
    <id>3038</id>
    <revision>
      <id>31077</id>
      <parentid>31076</parentid>
      <timestamp>2019-10-16T20:44:50Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>/* As a developer who found a bug */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2507">== See if the bug and a solution are already known ==
Check that it isn't already visible somewhere near the top of the relevant bugtracker:

[https://springrts.com/mantis Spring Engine bugtracker (mantis)]

[https://github.com/springlobby/springlobby/issues Spring Lobby (github)]

[https://github.com/dansan/spring-replay-site/issues Replay Site (github)]

Or see the relevent project pages for links to other bug trackers. There is also a [https://springrts.com/phpbb/viewforum.php?f=11 helps and bugs forum].

== How to report bugs== 
To report a bug, please give a description, what is going wrong and '''how it can be reproduced'''. what steps are required to reproduce it? If required to reproduce the bug add a script or/and a link to the Game/Map.

==Logfiles, screenshots, replays==
* It is best to always attach [[infolog.txt]], as it contains system/driver/version info and a stacktrace if spring crashed. 

* Attach a replay: often Bugs can't be reproduced, its often better to see something than to only read about that.

* Screenshots are taken with the F12 key and saved in the \screenshots\ folder. You can attach them to postings or upload on site such as: [http://www.imgur.com imgur.com] , [http://www.abload.de abload.de] 

If a dev asks you for more information, please answer his questions. Try to avoid endless discussions why a bug was introduced, be polite!

If you want more tips for a good bug-report, please read &quot;[http://www.chiark.greenend.org.uk/~sgtatham/bugs.html How to Report Bugs Effectively]&quot;
'''The better the bug-report, the better the chances, that it will be fixed!'''

== Where to report bugs==

Bugs in individual games should be reported to the game developers - contact the game developer first if you are unsure.

===As a player who needs help or thinks they found a bug===
Do not be afraid to ask for help [http://springrts.com/phpbb/viewforum.php?f=11 in the forum.] Read the guidelines above so people can help you as good as possible.

===As a developer who found a bug===
If you found a bug in the Spring Engine, please report it to the [http://springrts.com/mantis bug tracker].
Before [http://springrts.com/mantis/bug_report_page.php filling a bug], please look if someone else [http://springrts.com/mantis/view_all_bug_page.php already has reported] this issue.

Also please:

# disable LuaRules/LuaUI for testing
# debug all relevant Lua callins

Bugs should be reported for latest release version and latest develop version. 

[[Category:Engine Dev]]</text>
      <sha1>rtk3q76nkqo85r9ieyr0ejarfim2gtx</sha1>
    </revision>
  </page>
  <page>
    <title>Build from source</title>
    <ns>0</ns>
    <id>2618</id>
    <redirect title="Building Spring on Linux" />
    <revision>
      <id>16016</id>
      <timestamp>2009-02-04T21:04:40Z</timestamp>
      <contributor>
        <username>Spliff</username>
        <id>2567</id>
      </contributor>
      <comment>[[Build from source]] moved to [[Building Spring on Linux]]: To make clear these are linux instructions as each platform now has it's own build page.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="38">#REDIRECT [[Building Spring on Linux]]</text>
      <sha1>72g2z7tqebys8157otear7h1mjv69v9</sha1>
    </revision>
  </page>
  <page>
    <title>Buildbot</title>
    <ns>0</ns>
    <id>3358</id>
    <revision>
      <id>30749</id>
      <parentid>30748</parentid>
      <timestamp>2018-08-19T08:23:51Z</timestamp>
      <contributor>
        <username>Gajop</username>
        <id>2804</id>
      </contributor>
      <comment>/* Outside the chroot again */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6059">Spring uses a [https://buildbot.springrts.com/waterfall buildbot] to automaticly compile commits to the git repository to test if the commit broke something and to create the official installers.

There are currently three buildbot setups, based on [[Buildbot:Gentoo|Gentoo]], [[Buildbot:OSX|OSX]] and ubuntu (this page, but deprecated).

=Setting up buildmaster=

&lt;pre&gt;
sudo apt-get install buildbot
cd spring/buildbot/master
cp passwords.py.template passwords.py
buildbot start
buildbot create-master
&lt;/pre&gt;

After creating the master, the generated `public_html` can be erased and linked to the `buildbot/master/public_html` in the Spring repository.

= Setting up buildslave (Making the chroot)=

At least debootstrap and schroot are required. I didn't compile an exhaustive list of other dependencies on the host system, so YMMV.

==Configuring schroot==

Add a file (name does not matter) to `/etc/schroot/chroot.d` with the following contents, after substituting an absolute path for `$DIR`:

&lt;pre&gt;
[buildbot-maverick]
description=Ubuntu Maverick
directory=$DIR
type=directory
users=buildbot
groups=buildbot
root-groups=root
personality=linux32
script-config=script-defaults
message-verbosity=verbose
&lt;/pre&gt;

Then, remove or comment out the `/home` bind mount in `/etc/schroot/default/fstab`!

This configuration has been tested with schroot 1.4.23. With any other version YMMV.

==Building and entering the chroot==

&lt;pre&gt;
debootstrap --variant=buildd --arch i386 maverick $DIR http://ftp.cvut.cz/ubuntu/
mkdir -p $DIR/home/buildbot/www
chown buildbot:buildbot $DIR/home/buildbot
schroot -c buildbot-maverick
&lt;/pre&gt;

= Inside the chroot=

== Run (as root)==
&lt;pre&gt;
echo 'deb http://ftp.cvut.cz/ubuntu maverick universe' &gt;&gt; /etc/apt/sources.list
sed s/deb/deb-src/g /etc/apt/sources.list &gt;&gt; /etc/apt/sources.list
apt-get update
apt-get install nano git-core python-dev python-setuptools

cd /root
git clone git://github.com/buildbot/buildbot.git
cd buildbot
git checkout v0.8.3p1
cd slave
python setup.py install
mkdir /slave
chown buildbot:buildbot /slave
&lt;/pre&gt;

Build dependencies for Windows build (except MinGW, see below):
&lt;pre&gt;
apt-get install cmake nsis p7zip-full unzip wget pandoc wine
apt-get install openjdk-6-jdk   #to enable building of Java AIs
&lt;/pre&gt;

Build dependencies for Linux build:
&lt;pre&gt;
apt-get install libboost-all-dev libdevil-dev libfreetype6-dev libopenal-dev \
	libogg-dev libvorbis-dev libglew-dev libsdl-dev libxcursor-dev \
	p7zip-full
&lt;/pre&gt;

Build dependencies for validation test:
&lt;pre&gt;
apt-get install gdb libcurl4-gnutls-dev
&lt;/pre&gt;

Build dependencies for doxygen:
&lt;pre&gt;
apt-get install doxygen
&lt;/pre&gt;

Build dependencies for cppcheck:
&lt;pre&gt;
apt-get install cppcheck
&lt;/pre&gt;

Speed up linking:
&lt;pre&gt;
apt-get install binutils-gold
&lt;/pre&gt;

== Recompile MinGW package with dwarf2 exceptions instead of sjlj exceptions (as root)==

First recompile the compiler itself:
&lt;pre&gt;
mkdir mingw
cd mingw
apt-get build-dep gcc-mingw32
apt-get source gcc-mingw32
cd gcc-mingw32-4.4.4
editor debian/rules   # remove --enable-sjlj-exceptions, add --disable-sjlj-exceptions --with-dwarf2
dpkg-buildpackage -rfakeroot -b
cd ..
dpkg -i gcc-mingw32*.deb
echo &quot;gcc-mingw32 hold&quot;|dpkg --set-selections
&lt;/pre&gt;

Then recompile the runtime libraries against the new compiler:

&lt;pre&gt;
apt-get build-dep mingw32-runtime
apt-get source mingw32-runtime
cd mingw32-runtime-3.15.2
dpkg-buildpackage -rfakeroot -b
cd ..
dpkg -i mingw32-runtime*.deb
echo &quot;mingw32-runtime hold&quot;|dpkg --set-selections
&lt;/pre&gt;

Optionally, remove build dependencies (check what apt-get build-dep installed!):

&lt;pre&gt;
apt-get purge autoconf automake autotools-dev cdbs debhelper fdupes gettext \
	gettext-base groff-base html2text intltool intltool-debian libcroco3 \
	libfont-afm-perl libgmp3-dev libgmpxx4ldbl libhtml-format-perl \
	libhtml-parser-perl libhtml-tagset-perl libhtml-tree-perl \
	libmail-sendmail-perl libmailtools-perl libmpfr-dev \
	libsys-hostname-long-perl libunistring0 liburi-perl libwww-perl \
	libxml-parser-perl lzma m4 man-db mingw-w64 po-debconf
&lt;/pre&gt;

== Patch a few things ==

We set up ld to allow only one execution at the same time, to prevent thrashing the box due to multiple parallel linker jobs.
We &quot;patch&quot; makensis to not sync the installer to disk after every tiny chunk of data it has written.
This speeds installer building up by an order of magnitude.

First, copy over ld, makensis and no-msync.c from spring/buildbot/slave (Spring repository) to the chroot.
Then switch to the directory (inside the chroot!) where you copied those files and do:

For Linux builds:

&lt;pre&gt;
mv /usr/bin/ld /usr/bin/ld.orig
cp ld /usr/bin/ld
&lt;/pre&gt;

For MinGW builds:
&lt;pre&gt;
mv /usr/bin/i586-mingw32msvc-ld /usr/bin/i586-mingw32msvc-ld.orig
cp ld /usr/bin/i586-mingw32msvc-ld
mv /usr/i586-mingw32msvc/bin/ld /usr/i586-mingw32msvc/bin/ld.orig
cp ld /usr/i586-mingw32msvc/bin/ld
&lt;/pre&gt;

For makensis:
&lt;pre&gt;
gcc -shared -m32 no-msync.c -o no-msync.so
cp makensis no-msync.so /usr/local/bin/
&lt;/pre&gt;

== Run (as buildbot user)==

Substitute MASTER with host:port of the buildmaster and SLAVENAME and PASSWORD with the slave name and password as configured in the master.

&lt;pre&gt;
buildslave create-slave /slave MASTER SLAVENAME PASSWORD
cd /slave
git clone git://github.com/spring/mingwlibs.git
&lt;/pre&gt;

== ccache==

To install ccache simply run `apt-get install ccache` (inside the chroot) and (optionally) tweak the settings (cache size etc.)

= Outside the chroot again=

Get the Makefile from the Spring repository that can be used to start/stop the slave easily:
&lt;pre&gt;
wget https://raw.github.com/spring/spring/master/buildbot/master/buildbot.mk -O Makefile
&lt;/pre&gt;

Then you can use:
&lt;pre&gt;
make start-slave    # creates schroot session and starts buildslave in it
make stop-slave     # stops buildslave and remove schroot session
make enter-chroot   # enter the schroot as buildbot user
&lt;/pre&gt;

Make sure you review the Makefile and fix the chroot name, paths, etc. before using it!
(That applies to anything in this readme really.)

[[Category:Buildbot]]</text>
      <sha1>ra7337rm3ugtj0g7v0v8iyvd65y18m1</sha1>
    </revision>
  </page>
  <page>
    <title>Buildbot:Cross OSX</title>
    <ns>0</ns>
    <id>3778</id>
    <revision>
      <id>30325</id>
      <parentid>30324</parentid>
      <timestamp>2016-12-20T23:17:41Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1738">&lt;code&gt;&lt;pre&gt;
osxcross setup

Requires a Mac computer ( only to get the sdk )
'''

Packaging the SDK on Mac OS X:

    [Download Xcode **]
    [Mount Xcode.dmg (Open With -&gt; DiskImageMounter) ***]
    Run: ./tools/gen_sdk_package.sh (from the OSXCross package)
    Copy the packaged SDK (*.tar.* or *.pkg) on a USB Stick
    (On Linux/BSD) Copy or move the SDK into the tarballs/ directory of OSXCross.

** Xcode up to 7.3.x is known to work.

'''

$ git clone https://github.com/tpoechtrager/osxcross.git

$ cd osxcross

place the generated sdk file under tarballs

$ CC=gcc CXX=g++ ./build.sh

$ CC=gcc CXX=g++ GCC_VERSION=4.9.4 ./build_gcc.sh

$ export PATH=&quot;${PATH}:/home/spring/osxcrss/target/bin&quot;

$ export MACOSX_DEPLOYMENT_TARGET=&quot;10.11&quot;

$ cmake -DCMAKE_TOOLCHAIN_FILE=/home/spring/Platform-OSX.cmake -DSDL2_INCLUDE_DIR=/home/spring/osxcross/target/macports/pkgs/opt/local/include/SDL2 -GNinja ..

'''
set(CMAKE_SYSTEM_NAME &quot;Darwin&quot; CACHE STRING &quot;&quot;)
set(CMAKE_SYSTEM_VERSION &quot;10.11&quot; CACHE STRING &quot;&quot;)
set(TARGET_ARCH &quot;x86_64&quot; CACHE STRING &quot;&quot;)

set(CMAKE_C_COMPILER &quot;o64-gcc&quot; CACHE STRING &quot;&quot;)
set(CMAKE_CXX_COMPILER &quot;o64-g++&quot; CACHE STRING &quot;&quot;)
set(CMAKE_AR &quot;x86_64-apple-darwin15-ar&quot; CACHE STRING &quot;&quot;)
set(CMAKE_RANLIB &quot;x86_64-apple-darwin15-ranlib&quot; CACHE STRING &quot;&quot;)
set(PKG_CONFIG_EXECUTABLE &quot;x86_64-apple-darwin15-pkg-config&quot; CACHE STRING &quot;&quot;)

set(CMAKE_OSX_SYSROOT &quot;/home/spring/osxcross/target/SDK/MacOSX10.11.sdk&quot; CACHE STRING &quot;&quot;)
set(CMAKE_FIND_ROOT_PATH &quot;/home/spring/osxcross/target/macports/pkgs/opt/local&quot; CACHE STRING &quot;&quot;)

include_directories(&quot;/home/spring/osxcross/target/macports/pkgs/opt/local/include&quot;)
link_directories(&quot;/home/spring/osxcross/target/macports/pkgs/opt/local/lib&quot;)
'''
&lt;/pre&gt;&lt;/code&gt;

[[Category:Buildbot]]</text>
      <sha1>e7ub4e6s22d98gu5gv6rnhy70kgeyn3</sha1>
    </revision>
  </page>
  <page>
    <title>Buildbot:Gentoo</title>
    <ns>0</ns>
    <id>3359</id>
    <revision>
      <id>30276</id>
      <parentid>30275</parentid>
      <timestamp>2016-10-17T21:43:21Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>/* buildbot-slave (for interacting with spring's buildbot) */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8288">This page is WIP! (don't expect these instructions to work, they only give a hint, how it should/could work...)

Its best to run a 64 bit gentoo, as x32 can be easily compiled, too.

=buildbot-slave (for interacting with spring's buildbot)=

on springrts.com in /home/buildbot/master/passwords.py a user and password must be added. this username is needed to connect the buildslave client to the master.

install buildbot on the slave:
&lt;code&gt;&lt;pre&gt;
emerge dev-util/buildbot-slave
&lt;/pre&gt;&lt;/code&gt;

add a local user which is used to build:
&lt;code&gt;&lt;pre&gt;
useradd -s /bin/false -d /home/buildslave -m buildslave
&lt;/pre&gt;&lt;/code&gt;

create the buildslave config
&lt;code&gt;&lt;pre&gt;
buildslave create-slave /home/buildslave springrts.com:9989 &lt;buildbot user in passwords.py&gt; &lt;password in passwords.py&gt;
&lt;/pre&gt;&lt;/code&gt;

make it autostart:
&lt;code&gt;&lt;pre&gt;
rc-update add buildslave default
&lt;/pre&gt;&lt;/code&gt;
adjust config
&lt;code&gt;&lt;pre&gt;
nano /etc/conf.d/buildslave
&lt;/pre&gt;&lt;/code&gt;



warning! you should use an ssh-tunnel to connect to the master as the password is sent in cleartext!

=Setup gentoo win32 buildslave=
Note: boost and spring has to be compiled with the same compiler! If you get weird linker errors then this could be the cause!

tools required for compiling
&lt;code&gt;&lt;pre&gt;
emerge layman mercurial app-arch/p7zip-9.13 dev-util/cmake app-arch/zip wine crossdev app-portage/portage-utils
layman -a ohnobinki
echo &quot;source /var/lib/layman/make.conf&quot; &gt;&gt; /etc/portage/make.conf
CHOST=i686-mingw32 ROOT=/usr/i686-mingw32 emerge pthreads-win32
USE=&quot;openmp cxx -fortran&quot; crossdev i686-mingw32 --env 'EXTRA_ECONF=&quot;--disable-sjlj-exceptions --with-dwarf --enable-gomp --disable-shared&quot;'
&lt;/pre&gt;&lt;/code&gt;

for java ai's / interface install a jdk
&lt;code&gt;&lt;pre&gt;
emerge -va oracle-jdk-bin
&lt;/pre&gt;&lt;/code&gt;

Install i686-mingw32 compiler, then pthreads, then recompile i686-mingw32 with pthreads enabled
&lt;code&gt;&lt;pre&gt;
USE=&quot;openmp cxx -fortran&quot; crossdev i686-mingw32 --env 'EXTRA_ECONF=&quot;--disable-sjlj-exceptions --with-dwarf&quot;'
CHOST=i686-mingw32 ROOT=/usr/i686-mingw32 emerge -va pthreads-win32
USE=&quot;openmp cxx -fortran&quot; crossdev i686-mingw32 --env 'EXTRA_ECONF=&quot;--disable-sjlj-exceptions --with-dwarf --disable-shared&quot;'
emerge-wrapper --init
&lt;/pre&gt;&lt;/code&gt;

== stuff that needs to be compiled native (not with mingw)==
&lt;code&gt;&lt;pre&gt;
emerge ncurses cmake eselect eselect-boost
ACCEPT_KEYWORDS=&quot;~x86&quot; emerge boost-build
&lt;/pre&gt;&lt;/code&gt;

= mingw64 32 bit =

&lt;code&gt;&lt;pre&gt;USE=&quot;openmp cxx -fortran -multilib static-libs&quot; crossdev --env 'EXTRA_ECONF=&quot;--disable-shared&quot;' -t i686-w64-mingw32
&lt;/pre&gt;&lt;/code&gt;

TODO: see http://sourceforge.net/apps/trac/mingw-w64/wiki/Cross%20Win32%20and%20Win64%20compiler

=Setup static linux=

create /etc/portage/package.use/spring-static-buildslave:

&lt;code&gt;&lt;pre&gt;
sys-libs/zlib static-libs minizip
media-libs/devil static-libs opengl png jpeg tiff gif X
media-libs/giflib static-libs
media-libs/tiff static-libs
dev-libs/boost static-libs python
media-libs/jpeg  static-libs
media-libs/libsdl2 -audio opengl static-libs X
media-libs/libvorbis static-libs
media-libs/libogg static-libs
media-libs/freetype static-libs autohinter
media-libs/glew static-libs
media-libs/libpng static-libs
x11-libs/libXcursor static-libs
app-arch/bzip2 static-libs
x11-libs/libXdmcp static-libs
x11-libs/libXrender static-libs
x11-libs/libX11 static-libs
x11-libs/libXfixes static-libs
x11-libs/libxcb static-libs
x11-libs/libXau static-libs
net-misc/curl static-libs
dev-libs/openssl static-libs
sys-libs/libunwind static-libs
&lt;/pre&gt;&lt;/code&gt;

==set compile flags on 64 bit gentoo==
this is only required on 64bit gentoo!

if you don't add -fPIC you mostly will get errors like his:
&lt;code&gt;&lt;pre&gt;
relocation R_X86_64_32 against `a local symbol' can not be used when making a
shared object; recompile with -fPIC
/usr/lib/gcc/x86_64-pc-linux-gnu/4.1.1/../../../../lib64/libfl.a: could not
read symbols: Bad value
&lt;/pre&gt;&lt;/code&gt;


/etc/portage/env/spring-static-buildslave:
&lt;code&gt;&lt;pre&gt;
CFLAGS=&quot;${CFLAGS} -fPIC&quot;
CXXFLAGS=&quot;${CXXFLAGS} -fPIC&quot;
LDFLAGS=&quot;${LDFLAGS} -fPIC&quot;
&lt;/pre&gt;&lt;/code&gt;

/etc/portage/package.env/spring-static-buildslave:
&lt;code&gt;&lt;pre&gt;
sys-libs/zlib spring-static-buildslave
media-libs/devil spring-static-buildslave
media-libs/giflib spring-static-buildslave
media-libs/tiff spring-static-buildslave
dev-libs/boost spring-static-buildslave
media-libs/jpeg spring-static-buildslave
media-libs/libsdl2 spring-static-buildslave
media-libs/libvorbis spring-static-buildslave
media-libs/freetype spring-static-buildslave
media-libs/glew spring-static-buildslave
sys-devel/gcc spring-static-buildslave
media-libs/libpng spring-static-buildslave
x11-libs/libXcursor spring-static-buildslave
&lt;/pre&gt;&lt;/code&gt;

==install needed programs and libs==
Emerge gcc-4.7.2
&lt;code&gt;&lt;pre&gt;
emerge -va =sys-devel/gcc-4.7.2
&lt;/pre&gt;&lt;/code&gt;

enable / use it
&lt;code&gt;&lt;pre&gt;
gcc-config x86_64-pc-linux-gnu-4.7.2
env-update &amp;&amp; source /etc/profile
&lt;/pre&gt;&lt;/code&gt;

re-install required libs with changed use flags:
&lt;code&gt;&lt;pre&gt;
emerge -va sys-libs/zlib media-libs/devil dev-libs/boost media-libs/jpeg media-libs/libsdl2 \
media-libs/libvorbis media-libs/freetype media-libs/glew media-libs/libpng x11-libs/libXcursor \
app-arch/bzip2 x11-libs/libXdmcp x11-libs/libXrender x11-libs/libX11 x11-libs/libXfixes \
x11-libs/libxcb x11-libs/libXau net-misc/curl sys-libs/libunwind

&lt;/pre&gt;&lt;/code&gt;

==tune==

use ld.gold for linking:
&lt;code&gt;&lt;pre&gt;
binutils-config --linker ld.gold
&lt;/pre&gt;&lt;/code&gt;

=32 bit buildbot on a 64 bit slave=

switch back to the standard linker as glibc doesn't compile with ld.gold if you get this error:
&quot;These critical programs are missing or too old: as ld&quot;
&lt;code&gt;&lt;pre&gt;
binutils-config --libc 2.11.3 --linker ld.bfd
&lt;/pre&gt;&lt;/code&gt;

&lt;code&gt;&lt;pre&gt;
USE=&quot;openmp cxx -fortran&quot; crossdev --target i686 --gcc 4.8.5 --libc 2.17
mkdir -p /usr/i686-pc-linux-gnu/etc/portage/package.use/
vi /usr/i686-pc-linux-gnu/etc/portage/package.use/spring-static-buildslave

sys-libs/zlib static-libs minizip
media-libs/devil static-libs opengl png jpeg tiff gif X
media-libs/giflib static-libs
media-libs/tiff static-libs -cxx
dev-libs/boost static-libs -python
media-libs/jpeg  static-libs
media-libs/libsdl2 -audio opengl static-libs X
media-libs/libvorbis static-libs
media-libs/libogg static-libs
media-libs/freetype static-libs autohinter
media-libs/glew static-libs
media-libs/libpng static-libs
x11-libs/libXcursor static-libs
app-arch/bzip2 static-libs
x11-libs/libXdmcp static-libs
x11-libs/libXrender static-libs
x11-libs/libX11 static-libs
x11-libs/libXfixes static-libs
x11-libs/libxcb static-libs
x11-libs/libXau static-libs
dev-libs/gmp static-libs
dev-libs/mpfr static-libs
dev-libs/mpc static-libs
net-misc/curl static-libs
dev-libs/openssl static-libs
dev-java/oracle-jdk-bin -X -fontconfig
sys-libs/libunwind static-libs
&lt;/pre&gt;&lt;/code&gt;

&lt;code&gt;&lt;pre&gt;
(
  echo PYTHON_TARGETS=&quot;python2_7&quot;
  echo USE=&quot;${USE} -pam -llvm -tools -uuid -kmod -classic -dri3 -egl -gallium -gbm -nptl -udev -fortran&quot;
)&gt;&gt; /usr/i686-pc-linux-gnu/etc/portage/make.conf
&lt;/pre&gt;&lt;/code&gt;

force old version of glibc for more compatibility of the generated executable:
&lt;code&gt;&lt;pre&gt;
mkdir -p /usr/i686-pc-linux-gnu/etc/portage/package.mask
echo '&gt;sys-libs/glibc-2.17' &gt; /usr/i686-pc-linux-gnu/etc/portage/package.mask/glibc
emerge-i686-pc-linux-gnu -va --nodeps dev-libs/libffi =dev-lang/python-2.7.11-r2
i686-pc-linux-gnu-emerge -va dev-util/pkgconfig x11-misc/util-macros
&lt;/pre&gt;&lt;/code&gt;

build all libs: (we use --nodeps as else it would pull in A LOT of dependencies which aren't required. because of --nodeps, the order of parameters matters!)
&lt;code&gt;&lt;pre&gt;
emerge-i686-pc-linux-gnu -va --nodeps \
sys-libs/zlib \
app-arch/bzip2 \
dev-libs/boost \
media-libs/tiff \
media-libs/jpeg \
media-libs/libvorbis \
media-libs/freetype \
media-libs/libpng \
media-libs/openal \
dev-libs/openssl \
net-misc/curl \
=sys-libs/libunwind-0.99-r1 \
x11-libs/libXdmcp \ 
x11-libs/libXau \
=x11-libs/libxcb-1.10 \
x11-libs/libX11 \
x11-libs/libXrender \
x11-proto/fixesproto \
x11-libs/libXfixes \
x11-libs/libXcursor \
x11-libs/libdrm \
x11-proto/glproto \
x11-libs/libXext  \
x11-libs/libXdamage \
x11-proto/dri2proto \
media-libs/mesa \
media-libs/glu \
media-libs/glew \
media-libs/devil \
media-libs/libsdl2
&lt;/pre&gt;&lt;/code&gt;

=patches=
gcc omp patch: http://gcc.gnu.org/bugzilla/attachment.cgi?id=28752

[[Category:Buildbot]]</text>
      <sha1>oq51s0eyzqrcbq59mh6425stlorulgy</sha1>
    </revision>
  </page>
  <page>
    <title>Buildbot:LXC</title>
    <ns>0</ns>
    <id>3825</id>
    <revision>
      <id>31308</id>
      <parentid>31307</parentid>
      <timestamp>2020-12-19T23:40:26Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>/* Setup the Host System for lxc */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="847">https://springrts.com/mantis/view.php?id=5294

https://github.com/spring/spring-lxc
== Setup the Host System for lxc ==
(atm debian 10 / buster is used)

  apt install lxc wine-binfmt

/etc/lxc/default.conf

   lxc.net.0.type = veth
   lxc.net.0.link = lxcbr0
   lxc.net.0.flags = up
   lxc.net.0.hwaddr = 00:16:3e:xx:xx:xx
   lxc.apparmor.profile = generated
   lxc.apparmor.allow_nesting = 1

== Setup buildslaves ==
=== Create containers ===

  lxc-create -t download -n buildslave-x64 -- --no-validate -d debian -r bullseye -a amd64
  lxc-create -t download -n buildslave-win64 -- --no-validate -d debian -r bullseye -a amd64

=== Configure Buildslaves ===

 git clone https://github.com/spring/spring-lxc
 cd spring-lxc/scripts
 ./setup-buildslaves.sh

== Shell inside container ==

 lxc-attach buildslave-x64 /bin/bash

[[Category:Buildbot]]</text>
      <sha1>szbfajh20eh5r0rkt5pb10ct0u69535</sha1>
    </revision>
  </page>
  <page>
    <title>Buildbot:OSX</title>
    <ns>0</ns>
    <id>3556</id>
    <revision>
      <id>30751</id>
      <parentid>30750</parentid>
      <timestamp>2018-08-19T08:24:58Z</timestamp>
      <contributor>
        <username>Gajop</username>
        <id>2804</id>
      </contributor>
      <comment>/* install the dependencies */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="248">[[Engine_Development|Development]] &lt; [[Building_spring|Building Spring]] &lt; {{FULLPAGENAME}}

==Install the dependencies==
see [[Building_Spring_on_MacOSX]]

==Install the buildslave ==
&lt;pre&gt;
port install buildbot-slave
&lt;/pre&gt;

[[Category:Buildbot]]</text>
      <sha1>sq8678yiyxiowvumawrqkqht3hj0x3g</sha1>
    </revision>
  </page>
  <page>
    <title>Builder scripts</title>
    <ns>0</ns>
    <id>3335</id>
    <revision>
      <id>27867</id>
      <parentid>26946</parentid>
      <timestamp>2013-10-28T22:42:15Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>/* advanced script: */ update link</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2530">--&lt;big&gt;'''NANO builder'''&lt;/big&gt;--

&lt;big&gt;this script is requested for enabling the construction of unit by a vehicule,repair, capture,reclaim,recycle,teraform ground&lt;/big&gt;

this scripts are not compatible with transportation script (not sure who is winner when both)

&lt;sub&gt;note : construction by factory request a diferent kind of script&lt;/sub&gt;


== basic script: ==
&lt;code&gt;
:local nano = piece &quot;nano&quot;
:local body = piece &quot;body&quot;
:function script.AimFromWeapon()
:return body
:end
--(not sure if it function really exist ) 
-- origin the direction of the nano turet will sight 
:


:function script.StartBuilding(y0,x0)
--seem not y elevation will never output
:SetUnitValue(19,1)
-- ask evacuation of area
:Spring.SetUnitNanoPieces(nano)
--piece where from the nano particule output
:SetUnitValue(5,1)
--start emiting nano
:end



:function script.StopBuilding()
:SetUnitValue(5,0)
--stop emiting nano
:SetUnitValue(19,0)
--stop asking evacuation of area
:end
&lt;/code&gt;

=== advanced script: ===
*using turet for nano emiter and conditionnal start









UnitDef tags involved in builder activity:
:(more tags exist since updates : lets check [[Gamedev:UnitDefs]]: builders wiki page)
&lt;code&gt;
:Builder=true,
--the unit build some static or mobile units
:BuildDistance=199,
--the unit build or repair or reclaim or restore or capture or resurect at this distance
:WorkerTime=555,	
--amount per second can be spent in build metal or energy max
:Reclaimable=true,
--the unit can be eated by a unit with canreclamate=1
:canReclaim=true,
--the unit can eat another unit not having reclamable=0
:ShowNanoSpray =true,
--if false no spray when build
:CanBeAssisted=false,
--when the unit start a task a unit that canassist=1 can help
:CanRepair=true,
--can repair unit damaged
:CanRestore=true,
--can reset the ground at the origin map design
:CanAssist=true,
--can help other having not canbeassisted =0
:Capturable=false, 
--can be stoled by ennemy with cancapture=1
:CanCapture=true,
--can stole ennemy unit not having canbecaptured=0
:canResurrect=false,
--can resurect unit corspes at a price(unknow)
:RepairSpeed=777,
--max spend in repair
:ReclaimSpeed=1600,
--max gain in reclaim (corpses will not dispear before complet drain)maybe memory of drain
:Capturespeed=8000,
--maybe the amount of needed (per second) for equal the damge of the unit before being stoled
:terraformSpeed=600,
--amount spend for restore ground at map staart on a zone (unknow calculation)
&lt;/code&gt;
:buildoptions = {buildunit1,buildunit2},

[[Category:Emmanuel]]</text>
      <sha1>lnwng8gjgl4kwtt0kkioyz0on6ebo8d</sha1>
    </revision>
  </page>
  <page>
    <title>Building Spring Cross Compiled</title>
    <ns>0</ns>
    <id>2619</id>
    <revision>
      <id>29387</id>
      <parentid>24109</parentid>
      <timestamp>2015-07-19T00:12:46Z</timestamp>
      <contributor>
        <username>Jk</username>
        <id>2584</id>
      </contributor>
      <minor/>
      <comment>/* Some Options Explained */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7090">[[Engine_Development|Development]] &lt; [[Building_spring|Building Spring]] &lt; {{FULLPAGENAME}}

__TOC__

Cross-compiling allows you to build for other platforms than the machine you are building on. You can, for example, compile Windows 32-bit binaries on a Linux 64-bit machine.

= Obtaining the Source =

{{Obtaining_The_Source_Code}}

= CMake cross compiling =

== Setting up the cross compiler ==

The compiler is called MinGW, which is a port of GCC to windows. The version are going to need is MinGW GCC 4.4.0 (which is MinGW 2.7) or later. Most Linux distributions come with MinGW-GCC 4.1.2 only in their standard repos (Summer 2009), so you have to do extra work to get 4.4.0+.


===Gentoo===
&lt;code&gt;&lt;pre&gt;
emerge crossdev
EXTRA_ECONF=&quot;--with-dwarf2 --disable-sjlj-exceptions&quot; crossdev -t i686-mingw32
&lt;/pre&gt;&lt;/code&gt;
Additional instructions can be found [http://en.gentoo-wiki.com/wiki/Crossdev here] or [http://psas.pdx.edu/GentooCrossCompilerHowto/ here].

===Ubuntu 10.04===

Use the repository specified [https://launchpad.net/~tobydox/+archive/mingw mingw ppa], and then install the required packages:

&lt;code&gt;
   sudo add-apt-repository ppa:tobydox/mingw
   sudo apt-get update
   sudo apt-get install mingw32-x-binutils mingw32-x-gcc mingw32-x-runtime mingw-x-w32api
&lt;/code&gt;


===Ubuntu 11.10===

see the section [https://github.com/spring/spring/blob/develop/buildbot/README.markdown Recompile MinGW package with dwarf2 exceptions instead of sjlj exceptions].

===Other distros===

You have to find a way yourself, or use [http://www.profv.de/mingw_cross_env/#tutorial these] instructions to get the sources and compile it yourself. When doing so, make sure to use these build flags for gcc:

&lt;code&gt;
--with-dwarf2 --disable-sjlj-exceptions --enable-shared --enable-version-specific-runtime-libs
&lt;/code&gt;

you can add them under ''src/gcc-core.mk''.

''Note:'' This method will most likely not work anymore, as the checksum of the build files is checked by the makefile.

Alternatively, use this line to compile all the deps (which will then be used instead of mingwlibs):
&lt;code&gt;&lt;pre&gt;make zlib boost devil ogg vorbis openal freetype sdl glew gcc&lt;/pre&gt;&lt;/code&gt;

== Getting Spring's windows dependencies ==

These are called '''mingwlibs'''. How to get them is described below.

=== official MinGW - dwarf2 (default) ===
You can get it here ('''Download Source''' button, or use ''git''):
* [http://github.com/spring/mingwlibs '''mingwlibs''']

=== TDM MinGW - sjlj (alternative) ===
http://github.com/spring/spring/downloads

== Setting up your directories ==
Here is my recommended layout

&lt;pre&gt;
~/spring-xcompile/   (or wherever you want to put it all)
___ spring/   (the spring source)
___ win32/    (your target platform)
_______ build/ (the build files for your target will go here)
_______ final/ (the compiled binaries and libs will be installed here)
_______ libs/  (mingwlibs, the target libraries you just downloaded)
_______ win32.cmake (see below)
&lt;/pre&gt;

== Create your cmake toolchain ==
Create the toolchain file:
&lt;code&gt;&lt;pre&gt;pico &quot;~/spring-xcompile/win32/win32.cmake&quot;&lt;/pre&gt;&lt;/code&gt;
=== Example toolchain file ===
An example should be self-explanatory:
&lt;code&gt;&lt;pre&gt;
# the name of the target operating system
SET(CMAKE_SYSTEM_NAME Windows)

# which compilers to use for C and C++
SET(CMAKE_C_COMPILER i686-mingw32-gcc)
SET(CMAKE_CXX_COMPILER i686-mingw32-g++)

# here is the target environment located
SET(CMAKE_FIND_ROOT_PATH /usr/i686-mingw32)

# the spring mingw32 dependencies
SET(MINGWLIBS ~/spring-xcompile/win32/libs)

# the path that make install will use to put the final binaries
SET(CMAKE_INSTALL_PREFIX ~/spring-xcompile/win32/final)
&lt;/pre&gt;&lt;/code&gt;

Pass this with &lt;code&gt;-DCMAKE_TOOLCHAIN_FILE=~/spring-xcompile/win32/win32.cmake&lt;/code&gt; to cmake or select it in the gui to make a cross-compilation (see below).

=== Some Options Explained ===
* '''MINGWLIBS''': absolute path to the directory where [[Building_Spring_Cross_Compiled#Getting_Spring.27s_windows_dependencies |'''mingwlibs''']] are located
* '''CMAKE_INSTALL_PREFIX''': installation prefix (defaults to ''/usr/local'') defines the base directory for installing
* '''DATADIR''', '''LIBDIR''', '''BINDIR''': where to install data, libraries or binaries (relative paths are based on ''CMAKE_INSTALL_PREFIX'', absolute paths are absolute (''DESTDIR'' is still respected))
* '''APPLICATIONS_DIR''', '''MIME_DIR''', '''PIXMAPS_DIR''': where to install freedesktop-files (icons, mime-types and application-description)

=== Further reference ===
* [http://www.vtk.org/Wiki/CMake_FAQ CMake FAQ]
* ''man CMake''
* [http://www.cmake.org/HTML/cmake-2.6.html CMake documentation] (long!)

== Run CMake ==

=== The GUI method ===
CMake offers a nice Qt4 gui to ease the following steps (to use the gui explained here, cmake must be at least version 2.6.1). Doing so should be straightforward:
* run &lt;code&gt;cmake-gui&lt;/code&gt;
* select source directory
* select (and/or create) build directory where temporary files are stored
* hit configure button
* choose your build type:
** Unix makefile if you are using linux and want to compile linux executables
** mingw makefiles if you are working on windows
** Unix makefile with cross compiler setup to cross-compile mingw32 executables, you have to select the toolchain file you want to use (see below)
* configure variables to your need (move the mouse over the options and read the tooltip for further informations on them and or see Section &quot;Options&quot;)
* push generate button
* open commandline and do &quot;make&quot; and &quot;make install&quot;

=== The commandline method ===

* cd to build directory
     &lt;code&gt;&lt;pre&gt;cd ~user/spring-xcompile/win32/build&lt;/pre&gt;&lt;/code&gt;
* &lt;code&gt;cmake &lt;path to source tree&gt; &lt;options&gt;&lt;/code&gt; where:
** &lt;code&gt;&lt;path to source tree&gt;&lt;/code&gt; is the path to the spring source directory
** &lt;code&gt;&lt;options&gt;&lt;/code&gt; are defined like &lt;code&gt;-D&lt;option name&gt;=&lt;value&gt;&lt;/code&gt;

* IMPORTANT: depending on your settings you may need to run this command twice. It can't hurt so I recommend doing it anyway.
&lt;code&gt;&lt;pre&gt;cmake &quot;~user/spring-xcompile/spring&quot; &quot;-DCMAKE_TOOLCHAIN_FILE=~user/spring-xcompile/win32/win32.cmake&quot;&lt;/pre&gt;&lt;/code&gt;
* run &lt;code&gt;make&lt;/code&gt; and &lt;code&gt;make install&lt;/code&gt;
     &lt;code&gt;&lt;pre&gt;make spring &amp;&amp; make install-spring DESTDIR=~user/spring-xcompile/win32/final&lt;/pre&gt;&lt;/code&gt;

to show other build targets type: &lt;code&gt;make help&lt;/code&gt;

== Package Maintainers Note: ==
* doing &lt;code&gt;make install DESTDIR=/some/path&lt;/code&gt; will install spring in the specified place, putting files in subdirectories like configured. This may be helpful when making packages so Spring don't get installed on your system for real (see also CMake FAQ [[http://www.vtk.org/Wiki/CMake_FAQ#Does_CMake.27s_.22make_install.22_support_DESTDIR.3F]]).
* You need to update the mime database (&lt;code&gt;update-mime-database&lt;/code&gt;) and the kde database (&lt;code&gt;kbuildsycoca&lt;/code&gt;) after installing to make the system aware of the newly installed mime types and desktop shortcuts.

==Buildbot==
For setting up a buildbot slave, see: {{sourcelink|file=buildbot/README.markdown}}

[[Category:Linux]]</text>
      <sha1>94o484shy20qh6bshcuyaeq8g9lr0ty</sha1>
    </revision>
  </page>
  <page>
    <title>Building Spring on Buildbot</title>
    <ns>0</ns>
    <id>2644</id>
    <revision>
      <id>27633</id>
      <parentid>27442</parentid>
      <timestamp>2013-08-27T09:36:48Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>/* Current */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1258">[[Engine_Development|Development]] &lt; [[Building_spring|Building Spring]] &lt; {{FULLPAGENAME}}

== Current ==
See [[Buildbot:Gentoo]] or [[Buildbot:OSX]] for how to set it up.

==New (since 0.82)==

Watch progress and errors of builds:

http://buildbot.springrts.com/waterfall


The outcome of builds can be found here:

http://springrts.com/dl/buildbot/default/

==Old (until 0.81)==

The spring build-bot is a server that is setup to compile spring automatically, and is usable by everyone.
It currently supports compiling for:
* Windows 32bit with TDM-MinGW (default)
* Windows 32bit with MinGW
* Windows 64bit with MinGW
* Linux with GCC

You may use the build-bot from within your Spring lobby client. Join channel '''#buildserv''', type ''!help'' and follow the instructions. Most useful commands are ''!rebuild'' and ''!translate''.

It is maintained by bibim and mainly used by devs for testing if their changes would compile on other systems too, but as it also generates windows installers, that can be downloaded by everyone, it can be also useful for casual users willing to try the latest changes to spring.

The outcome of builds can be found here:
[http://buildbot.eat-peet.net/spring/ http://buildbot.eat-peet.net/spring/]

[[Category:Buildbot]]</text>
      <sha1>0quq02mfm14yuvekvdf74oufro2rwpv</sha1>
    </revision>
  </page>
  <page>
    <title>Building Spring on Linux</title>
    <ns>0</ns>
    <id>2494</id>
    <revision>
      <id>31230</id>
      <parentid>31229</parentid>
      <timestamp>2020-05-11T07:42:28Z</timestamp>
      <contributor>
        <username>Builderror</username>
        <id>2958</id>
      </contributor>
      <minor/>
      <comment>/* Fedora */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4776">[[Engine_Development|Development]] &lt; [[Building_spring|Building Spring]] &lt; {{FULLPAGENAME}}

= Build From Source on Linux =
If you prefer to use your distributions package system (release versions only), refer to the Linux [[SetupGuide]].

If there is no package tailored for your distribution, you have to install from sources manually. Doing this for distributions where packages are available is not recommended.

&lt;span class=warning&gt;'''Warning:'''&lt;br/&gt;
'''Be careful when building from source.'''&lt;br/&gt;
You might encounter sync errors in online play if:
* you are using an untested compiler (''gcc'' from the &gt;=4.6 series should be safe)
* you use non-standard compiler settings (be careful about ''-march'')!
&lt;/span&gt;

== Obtaining the Source ==
{{Obtaining_The_Source_Code}}

= Get Dependencies =

To compile, you will have to install some development packages Spring depends on. These vary from distro to distro and may also depend on your specific configuration.

If your distributions is not listed below, you should be able to figure out the correct package names from this.

== Full list ==
* Programs necessary to build
** ''cmake''
** ''7zip'' (aka ''p7zip'' or ''7z'')
** The usual build toolchain
*** ''gcc''
*** ''make''
* Libraries
** SDL2
** ''libdeviL'' (IL)
** OpenAL (openal-soft, older openal-0.0.8 does not work)
** OpenGL headers (mesa, GLEW, etc.)
** ''zlib''
** ''freetype'' (2)
** ''ogg'', ''vorbis'' and ''vorbisfile''
** ''curl''
* Optional (for AI Interfaces, Skirmish AIs and unit tests)
** ''python'' (2.5+)
** ''jdk'' (1.5+)
** ''boost'' (version 1.47 or later)
*** ''chrono''
*** ''filesystem''
*** ''threads''
*** ''system''
*** ''chrono''

== Debian ==

For Jessie (debian 8.0 stable) this should work:

&lt;pre&gt;
sudo apt-get install build-essential zlib1g-dev libfreetype6-dev cmake \
libsdl2-dev libopenal-dev libglew-dev zip libvorbis-dev libxcursor-dev \
libdevil-dev libboost-system1.55-dev libboost-thread1.55-dev \
libboost-regex1.55-dev libboost-serialization1.55-dev \
libboost-program-options1.55-dev libboost-chrono1.55-dev \
libunwind-dev  libboost-filesystem1.55-dev \
libboost-signals1.55-dev libboost-test1.55-dev \
xsltproc libfontconfig1-dev libcurl4-openssl-dev
&lt;/pre&gt;


=== Ubuntu  ===
&lt;pre&gt;
# compiler and build tools
sudo apt-get install build-essential cmake cmake-gui git 

# spring dependencies
sudo apt-get install libglew-dev libsdl2-dev libdevil-dev libopenal-dev \
 libogg-dev libvorbis-dev libfreetype6-dev p7zip-full libxcursor-dev \
 libboost-thread-dev libboost-regex-dev libboost-system-dev \
 libboost-program-options-dev libboost-signals-dev \
 libboost-chrono-dev libboost-filesystem-dev libunwind8-dev \
 default-jdk libcurl4-gnutls-dev
&lt;/pre&gt;

to speed up compiling/linking, you can install gold, an alternative linker and when you plan to develop / recompile often ccache :

&lt;pre&gt;sudo apt-get install binutils-gold ccache&lt;/pre&gt;


to make ccache useful, the cache size needs to be increased by:

&lt;pre&gt;ccache -M 5G&lt;/pre&gt;

to set it to 5GB.

== Gentoo ==
This has been tested to work with a clean install of gentoo 2008.0:

&lt;pre&gt;
emerge cmake \&gt;=media-libs/freetype-2.0.0 \&gt;=media-libs/libsdl-2
emerge media-libs/openal media-libs/glew dev-libs/boost
emerge app-arch/zip media-libs/libogg
USE=&quot;png jpg tiff opengl&quot; emerge media-libs/devil 
&lt;/pre&gt;

Or better you install Spring via [http://springrts.com/wiki/Gentoo_install layman], it will install all dependencies.

== Fedora ==

On Fedora 31:

&lt;pre&gt;
sudo dnf install gcc-c++ cmake boost-devel DevIL-devel freetype-devel libunwind-devel \
glew-devel libvorbis-devel libXcursor-devel openal-devel SDL2-devel p7zip jsoncpp-devel
&lt;/pre&gt;

== Slackware ==

On Slackware 13, cmake, ogg &amp; vorbis, boost, glew and SDL2 already come with the full regular install, both libs and headers. You can find helper scripts to easily compile and package DevIL, OpenAL and spring itself [http://slackbuilds.org/ here].

Try to use [http://idlemoor.github.io/slackrepo/ slackrepo], will search, update and install spring and dependences.

= Build And Install =

== Using CMake (2.6 or newer) ==
Configure and build:

&lt;pre&gt;
cmake .
make spring
&lt;/pre&gt;

Install:

&lt;pre&gt;
make install-spring
&lt;/pre&gt;


Default install paths are:

&lt;code&gt;/usr/local/bin/spring&lt;/code&gt; Spring executable

&lt;code&gt;/usr/local/share/games/spring&lt;/code&gt; read-only data

If you want &lt;code&gt;~/spring&lt;/code&gt; prefix instead of &lt;code&gt;/usr/local&lt;/code&gt;, configure like this:

&lt;pre&gt;
cmake -DCMAKE_INSTALL_PREFIX=~/spring .
&lt;/pre&gt;
For further ways of customizing your build, have a look at the variables shown with:
&lt;pre&gt;
cmake -LH .
&lt;/pre&gt;


For other targets see the output of &lt;code&gt;make help&lt;/code&gt;.

= See Also: =
* [[Finalizing_linux_install]]
* [[Troubleshooting_linux]]


[[Category:Compiling]]
[[Category:Linux]]</text>
      <sha1>5is6dmtvy2zi17djfvuwgsmhfs4ay6z</sha1>
    </revision>
  </page>
  <page>
    <title>Building Spring on MacOSX</title>
    <ns>0</ns>
    <id>2764</id>
    <revision>
      <id>31187</id>
      <parentid>31186</parentid>
      <timestamp>2020-03-04T17:44:08Z</timestamp>
      <contributor>
        <username>Af</username>
        <id>2575</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11412">[[Engine_Development|Development]] &lt; [[Building_spring|Building Spring]] &lt; {{FULLPAGENAME}}

This is a guide to the requirements for building the Spring RTS engine on MacOS. If you want only to play a spring game, follow the [[Spring_on_MacOSX]] Tutorial.



=Building Spring on MacOS=

'''This guide is for x86/Intel based MacOS installs'''

Even though it will not run, Spring should successfully compile on Mac for both 104.0 and the latest develop version.

NOTE: Only official spring versions 99.0-103.1 will compile and run on MacOS. 104+ will compile, but uses an incompatible OpenGL version. When 105.0 is released, a MacOS - compatible OpenGL version will be used, however at this point in time '''there are other blocking issues'''.

Questions about this process should be asked [https://springrts.com/phpbb/viewforum.php?f=65 here].



=Requirements=

==Command Line Tools==

Install the [http://developer.apple.com/TOOLS/Xcode/ Xcode developers package] (this requires a free membership to apple's ADC website).

==Package Manager==

Either  [http://brew.sh Homebrew] or [http://www.macports.org/install.php MacPorts] may be used to fetch dependencies. The MacOS Buildbot (run by Turboss) uses Homebrew. The writer uses Macports.


== Compiler==

Compiler: GCC must be used, and dependencies must be compiled with GCC

=== MacPorts ===

For MacPorts:
&lt;pre&gt;
port install
sudo port select --set gcc mp-gcc8
hash -r # Reload the terminal
&lt;/pre&gt;

To check for installed gcc:
&lt;code&gt;
port select --list gcc
&lt;/code&gt;

===HomeBrew===

&lt;pre&gt;
brew install gcc@8
&lt;/pre&gt;


==Dependencies==

===MacPorts===

Necessary dependencies for the develop branch are below (as called by Macports):

&lt;pre&gt;
port install sudo port install cmake libsdl2 p7zip libdevil libvorbis minizip openal-soft glew freetype binutils libXcursor +gcc8
&lt;/pre&gt;

(This list has not been tested for errors; please message MasterBel if they do not work for you.)

Compiling Spring 104.0 (current master) or older will also require Boost. [https://sourceforge.net/projects/boost/ Retreive source] and compile with gcc. '''TODO: Instructions?'''

===HomeBrew===

Note that this list is incomplete:

&lt;pre&gt;
brew install cmake minizip freetype glew openal-soft p7zip clang-format libvorbis jsoncpp PkgConfig devil sdl2
&lt;/pre&gt;

You will also need to install XQuartz for the X11 dependency, however it will install the headers in a non-standard location. Use this command to symlink it to the standard location:

&lt;pre&gt;
ln -s /opt/X11/include/X11 /usr/local/include/X11
&lt;/pre&gt;

==Obtaining Source==

&lt;code&gt;
git clone --recursive git://github.com/spring/spring.git -b &lt;branch&gt;
&lt;/code&gt;

The “master” branch is the latest stable release. “develop” branch is the latest development release. (Note: The recursive argument is important for submodules.)&lt;br /&gt;
Update with: &lt;code&gt;git pull --rebase&lt;/code&gt;

=Compiling Source=

&lt;pre&gt;
cmake . -DCMAKE_CXX_COMPILER=/path/to/bin/g++-mp-8 -DCMAKE_C_COMPILER=/path/to/bin/gcc-mp-8
make spring
&lt;/pre&gt;

Other common Cmake flags are:
&lt;pre&gt;
-DGLEW_INCLUDE_DIR=/path/to/include 
-DGLEW_LIBRARIES=/path/to/lib/libGLEW.a 
-DOPENAL_INCLUDE_DIR=/path/to/include/AL 
-DCMAKE_INSTALL_PREFIX:PATH=/path/to/output/directory 
-DCMAKE_PREFIX_PATH=/path/
&lt;/pre&gt;

If boost is used:
&lt;code&gt;
-DBoost_Root=/path/to/boost
&lt;/code&gt;

Number of simultaneous jobs may be specified by: &lt;code&gt;make spring -j&lt;n&gt;&lt;/code&gt; Where n is number of jobs. It is common for n to be number of cores + 1

Other targets may be made also/instead, e.g.

&lt;pre&gt;
make prdownloader -j&lt;n&gt;
make install-spring -j&lt;n&gt;
&lt;/pre&gt;

=Additional Notes=


==Using Macports==
As hint: set &quot;buildmakejobs&quot; to cpu-core count + 1 in /opt/local/etc/macports/macports.conf. For example:
&lt;code&gt;
buildmakejobs 5
&lt;/code&gt;


==Using Homebrew==

Hombrew can install boost, but it must be recompiled  with gcc &lt;version&gt;:
&lt;code&gt;
brew install boost --build-from-source --cc=gcc&lt;version&gt;
&lt;/code&gt;

These flags were recommended by a previous editor:
&lt;pre&gt;
cmake . -DAPPLE=1 -DCMAKE_CXX_COMPILER=/usr/local/Cellar/gcc48/4.8.3/bin/g++-4.8 \
-DCMAKE_C_COMPILER=/usr/local/Cellar/gcc48/4.8.3/bin/gcc-4.8 \
-DIL_INCLUDE_DIR=/usr/local/include \
-DGLEW_INCLUDE_DIR=/usr/local/include \
-DOPENAL_DIR=/usr/local/include/AL \
-DNO_SOUND=1
&lt;/pre&gt;


=Examples=

==Macports==

&lt;pre&gt;
# Example setup script (for MacOS Catalina)

# Macports must be installed prior to running this script. Macports requires XCode to be installed.
# Boost sources must be located in

# Requires the following directory format:
# $DIR (customisable; set on line 16)
#	/setup.sh
#	/build.sh
# 	/Sources
#		/boost_1_68_0
#	/Builds
#	/Bunldes

DIR=~/Spring # The root directory; to be set manually

SCRIPTDIR=~/Documents/Spring/ # The directory the build script is located in

SOURCES=$DIR/Sources
SPRING=$SOURCES/spring
BOOST=$SOURCES/boost_1_66_0/boost

cd $DIR

# Install the necessary compiler. Version gcc5 is oldest compatible with High Sierra; gcc48 is the oldest I know works
sudo port install gcc9

# Set compiler as default
sudo port select --set gcc mp-gcc9
hash -r

sudo port install cmake libsdl2 p7zip libdevil libvorbis minizip openal-soft glew freetype binutils dylibbundler xorg-libXcursor +gcc9
#dylibbundler is for the bundling stage, not actual dependency

cd $SOURCES

# Clone from git (creates the directory $SPRING for us)
git clone --recursive git://github.com/spring/spring.git
cd $SPRING
git fetch --all --tags --prune
git checkout tags/103.0 -b master

# Install Boost

cd $BOOST

./bootstrap.sh --with-toolset=gcc --with-libraries=all # Not sure which libaries.
./b2 # install

# Try compiling spring

cd $SCRIPTDIR

sh build.sh

&lt;/pre&gt;

&lt;pre&gt;

# Example buildscript (for MacOS Catalina)

# This script assumes that setup.sh (the above example) has been run.

# Build Configuration

BRANCH=&lt;branch name&gt; # The source branch to checkout and build.
REPOSITORY=spring # The name of the folder containing the git repository.
WIPE=0 # Wipes previous build on WIPE = 1 (flag -w)

for arg in &quot;$@&quot;
do
if [ &quot;$arg&quot; == &quot;-w&quot; ]; then
echo &quot;Initiating clean build.&quot;
WIPE=1
else
echo &quot;Unknown flag ${arg}&quot;
fi
done

echo &quot;Building sources at/to ${REPOSITORY}&quot;

# Directory Setup

DIR=~/Spring # Where everything is/will be
SOURCES=$DIR/Sources
SPRING=$SOURCES/$REPOSITORY
BUILD=$DIR/Builds/$REPOSITORY
BOOST=$SOURCES/boost_1_55_0 # Where boost can be found. Must be prepared as per the setup script (above).

MACPORTS=/opt/local # The install directory of MACPORTS

if [ -d $BUILD ]; then
	if [ $WIPE != 0 ]; then
		echo &quot;Wiping previous build…&quot;
		rm -r $BUILD # Wipe preivous build

		echo &quot;Making new build directory…&quot;
		mkdir $BUILD # The others should have already been made
	fi
else
	echo &quot;Making new build directory…&quot;
	mkdir $BUILD # The others should have already been made
fi

if [ -e $DIR/log.txt ]; then
	echo &quot;Removing outdated log…&quot;
	rm $DIR/log.txt
fi

# Source setup

if [ -d $SPRING ]; then
	cd $SPRING
else
	echo &quot;Cloning remote…&quot;
    cd $SOURCES
    git clone --recursive git://github.com/spring/spring.git $REPOSITORY

	cd $SPRING
fi

# Update repository

CURRENTBRANCH=$(git rev-parse --abbrev-ref HEAD)

if [ &quot;$CURRENTBRANCH&quot; != &quot;$BRANCH&quot; ]; then
git fetch --all
echo &quot;Switching branch from ${CURRENTBRANCH} to ${BRANCH}&quot;
git checkout $BRANCH
fi

echo &quot;Updating to latest…&quot;
git pull # Update to latest
echo &quot;Updating submodules&quot;
git submodule update

# Metadata

REV=$(git describe --tags)
VERSION=`echo &quot;${REV}&quot; | tr '&lt;&gt;:\&quot;/\\|?*' -`

# Compile

echo &quot;Compiling Spring ${VERSION}&quot;

cd $BUILD

cmake . $SPRING -DCMAKE_PREFIX_PATH=$MACPORTS -DCMAKE_CXX_COMPILER=$MACPORTS/bin/g++-mp-9 -DCMAKE_C_COMPILER=$MACPORTS/bin/gcc-mp-9 -DGLEW_INCLUDE_DIR=$MACPORTS/include -DGLEW_LIBRARIES=$MACPORTS/lib/libGLEW.a -DOPENAL_INCLUDE_DIR=$MACPORTS/include/AL -DBOOST_ROOT=$BOOST -DBoost_USE_STATIC_LIBS=YES -DCMAKE_CXX_FLAGS=&quot;${FLAGS}&quot; -DCMAKE_C_FLAGS=&quot;${FLAGS}&quot;

make spring -j5 # &gt;&gt;$DIR/log.txt 2&gt;&amp;1

make pr-downloader # -j5 &gt;&gt;$DIR/log.txt 2&gt;&amp;1

make install-spring DESTDIR=$BUILD/temp #&gt;&gt;$DIR/log.txt 2&gt;&amp;1

# Bundling spring

BUNDLES=$DIR/Bundles
BUNDLE=$BUNDLES/Spring_${VERSION}.app

mkdir $BUNDLES
mkdir $BUNDLE
mkdir $BUNDLE/Contents
mkdir $BUNDLE/Contents/MacOS
mkdir $BUNDLE/Contents/Resources
mkdir $BUNDLE/Contents/lib

cp $BUILD/spring $BUNDLE/Contents/MacOS/spring #&gt;&gt;$DIR/log.txt 2&gt;&amp;1
cp $SPRING/installer/Mac/spring.icns $BUNDLE/Contents/Resources/spring.icns #&gt;&gt;$DIR/log.txt 2&gt;&amp;1
cp -R $BUILD/temp/usr/local/share $BUNDLE/Contents/share #&gt;&gt;$DIR/log.txt 2&gt;&amp;1

cat $SPRING/installer/Mac/Info.plist | sed s/###VERSION###/${VERSION}/ &gt; $BUNDLE/Contents/Info.plist

cp $BUILD/tools/pr-downloader/src/pr-downloader $BUNDLE/Contents/MacOS #&gt;&gt;$DIR/log.txt 2&gt;&amp;1

dylibbundler -cd -b -x $BUILD/temp/usr/local/lib/libunitsync.dylib -d $BUNDLE/Contents/MacOS -p @loader_path/../MacOS #&gt;&gt;$DIR/log.txt 2&gt;&amp;1

dylibbundler -of -cd -b -x $BUNDLE/Contents/MacOS/spring -d $BUNDLE/Contents/lib -p @executable_path/../lib #&gt;&gt;$DIR/log.txt 2&gt;&amp;1

install_name_tool -change $MACPORTS/lib/libX11.6.dylib @executable_path/../lib/libX11.6.dylib $BUNDLE/Contents/lib/libXcursor.1.dylib #&gt;&gt;$DIR/log.txt 2&gt;&amp;1

dylibbundler -of -cd -b -x $BUNDLE/Contents/MacOS/pr-downloader -d $BUNDLE/Contents/lib -p @executable_path/../lib #&gt;&gt;$DIR/log.txt 2&gt;&amp;1

dylibbundler -cd -b -x $BUNDLE/Contents/share/games/spring/AI/Interfaces/C/0.1/libAIInterface.dylib -d $BUNDLE/Contents/share/games/spring/AI/Interfaces/C/0.1 -p @loader_path/../0.1 #&gt;&gt;$DIR/log.txt 2&gt;&amp;1

dylibbundler -cd -b -x $BUNDLE/Contents/share/games/spring/AI/Interfaces/Java/0.1/libAIInterface.dylib -d $BUNDLE/Contents/share/games/spring/AI/Interfaces/Java/0.1 -p @loader_path/../0.1 #&gt;&gt;$DIR/log.txt 2&gt;&amp;1

dylibbundler -cd -b -x $BUNDLE/Contents/share/games/spring/AI/Skirmish/AAI/0.9/libSkirmishAI.dylib -d $BUNDLE/Contents/share/games/spring/AI/Skirmish/AAI/0.9 -p @loader_path/../0.9 #&gt;&gt;$DIR/log.txt 2&gt;&amp;1

dylibbundler -cd -b -x $BUNDLE/Contents/share/games/spring/AI/Skirmish/CppTestAI/0.1/libSkirmishAI.dylib -d $BUNDLE/Contents/share/games/spring/AI/Skirmish/CppTestAI/0.1 -p @loader_path/../0.1 #&gt;&gt;$DIR/log.txt 2&gt;&amp;1

dylibbundler -cd -b -x $BUNDLE/Contents/share/games/spring/AI/Skirmish/E323AI/3.25.0/libSkirmishAI.dylib -d $BUILD/Spring.app/Contents/share/games/spring/AI/Skirmish/E323AI/3.25.0 -p @loader_path/../3.25.0 #&gt;&gt;$DIR/log.txt 2&gt;&amp;1

dylibbundler -cd -b -x $BUILD/Spring.app/Contents/share/games/spring/AI/Skirmish/KAIK/0.13/libSkirmishAI.dylib -d $BUILD/Spring.app/Contents/share/games/spring/AI/Skirmish/KAIK/0.13 -p @loader_path/../0.13 #&gt;&gt;$DIR/log.txt 2&gt;&amp;1

dylibbundler -cd -b -x $BUNDLE/Contents/share/games/spring/AI/Skirmish/NullAI/0.1/libSkirmishAI.dylib -d $BUNDLE/Contents/share/games/spring/AI/Skirmish/NullAI/0.1 -p @loader_path/../0.1 #&gt;&gt;$DIR/log.txt 2&gt;&amp;1

dylibbundler -cd -b -x $BUNDLE/Contents/share/games/spring/AI/Skirmish/RAI/0.601/libSkirmishAI.dylib -d $BUNDLE/Contents/share/games/spring/AI/Skirmish/RAI/0.601 -p @loader_path/../0.601 #&gt;&gt;$DIR/log.txt 2&gt;&amp;1

dylibbundler -cd -b -x $BUNDLE/Contents/share/games/spring/AI/Skirmish/Shard/dev/libSkirmishAI.dylib -d $BUILD/Spring.app/Contents/share/games/spring/AI/Skirmish/Shard/dev -p @loader_path/../dev #&gt;&gt;$DIR/log.txt 2&gt;&amp;1

if [ ! -e $BUNDLE/Contents/MacOS/spring ];then
echo &quot;Error: App did not build correctly. Check log for details&quot;
ERRORBUILD=1
fi

if [ &quot;$ERRORBUILD&quot; = &quot;1&quot; ]; then
	echo &quot;Build Failed.&quot;
fi

echo &quot;Done!&quot;
exit 0

&lt;/pre&gt;

[[Category:Compiling]]</text>
      <sha1>osjs7k24r16i1xzecxw12evdxs8rrb9</sha1>
    </revision>
  </page>
  <page>
    <title>Building Spring on Windows</title>
    <ns>0</ns>
    <id>2617</id>
    <revision>
      <id>31266</id>
      <parentid>31256</parentid>
      <timestamp>2020-07-22T13:53:56Z</timestamp>
      <contributor>
        <username>Tulipe</username>
        <id>2938</id>
      </contributor>
      <minor/>
      <comment>Another way added to fix some problems.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8645">[[Engine_Development|Development]] &lt; [[Building_spring|Building Spring]] &lt; {{FULLPAGENAME}}
{{#css:
  code * {margin:inherit;}
}}

If you only want to produce your own Spring game and not contribute to the core engine, compilation is not necessary. Check out [[Gamedev:Main]].

&lt;span class=warning&gt;Warning:&lt;/span&gt; Compiling Spring on Windows often causes problems, it is heavily recommended to use [[Building_Spring_on_Linux|Linux]] for developing the Spring RTS Engine if possible.

Some reasons for this:
* Of the active developers nobody uses windows for developing. So they might not be able to help as effectively as on Linux.
* Setting up a build environment takes a lot more time on windows
* Compiling is often slower on windows
* Compiling on windows is poorly tested (which possibly leads to some random / unknown / weird errors)

That said, if you do wish to use Windows, the best place to get real-time help is the #sy lobby channel, or #sy on [[IRC]].

=Compiling with MinGW=


== Requirements ==
Install [http://www.cmake.org/ CMake] and [http://msysgit.github.io/ msysGit] and MinGW-w64:

When installing msysGit you should select the option to &quot;Run Git from the Windows Command Prompt&quot;:

[[File:Msysgit6.png|400px]]

This is in order to automatically add Git to PATH making it easy for CMake to find.

== Installing MinGW-w64 ==

Download and run the &quot;Mingw-builds project - native toolchains using trunk&quot; installer from [http://mingw-w64.org/doku.php/download/mingw-builds], more specifically from here: [https://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win32/Personal%20Builds/mingw-builds/installer/mingw-w64-install.exe/download]


Select the following options:

[[File:InstallingMinGW-w64.png|400px]]

* '''Version:''' Any version above 4.8.x should work, 4.9.x+ may not have been tested as thoroughly. In 2020, version 8.1.0 works fine!
* '''Architecture:''' i686
* '''Threads:''' posix
* '''Exception:''' sjlj &lt;span class=&quot;note&quot;&gt;This is the only setting which needs to be changed from the default&lt;/span&gt;
* '''Build Revision:''' The latest one

== Adding to PATH ==

Once installed, you should add the MinGW directory to your PATH variable so that Cmake can find the relevant binaries. 

* Go to System properties (either via Control Panel\System and Security\System or by right clicking 'Computer' on the desktop), then click 'Advanced System Settings'. 
* Click the 'Environment Variables' button at the bottom. 
* Find Path in the 'System Variables' scrollbox, add an extra &lt;code&gt;;&lt;/code&gt; to the end and then copy-paste in the MinGW directory (e.g. default is &lt;code&gt;C:\Program Files (x86)\mingw-w64\i686-4.9.1-posix-sjlj-rt_v3-rev0\mingw32\bin&lt;/code&gt;). 
* Alternative instructions with images are easy to find online, for example [http://geekswithblogs.net/renso/archive/2009/10/21/how-to-set-the-windows-path-in-windows-7.aspx here].

= Get the Source Code =

* use git's bash (you find it in the right click context menu when clicking the folder), &lt;code&gt;cd&lt;/code&gt; into your spring source dir

&lt;code&gt;&lt;pre&gt;
git clone --recursive git://github.com/spring/spring.git -b develop
cd spring
git clone https://github.com/spring/mingwlibs
&lt;/pre&gt;&lt;/code&gt;

* update it from time to time with: &lt;code&gt;git pull --rebase&lt;/code&gt;

* Make sure you install the package in the checkout directory, so the path is: /spring/mingwlibs. If done right, it will look like:
** */spring/
** */spring/...
** */spring/mingwlibs
** */spring/rts

* Note: if you install the package somewhere else (preferably outside of the source tree), and pass its location with the ''MINGDIR'' option to CMake in the configure step (see further down, in the quick instructions).


== configure using CMake ==

Note, as of 2020, cmake-3.10.1-win64-x64.msi from https://cmake.org/files/v3.10/ works, 3.18 has issues detecting zlib.

* run the ''cmake-gui'' and select a source and a build directory
* press '''Configure''' and follow the instructions
* specify native compilers by entering the paths to gcc.exe and g++.exe from your mingw64-builds directory
* if you wish to build the full portable version (install-spring), then make sure to set the CMAKE_INSTALL_PREFIX as well
* In case of configuration errors make sure AI_TYPES variable is set to NONE (default is ALL). This should remedy the issues press '''Configure''' again (Remark: Setting NATIVE works as well (tested in commit 9108cae116))
* This is where you can specify the build type, REL for release, DEBUG for debug build, and RELWITHDEBINFO for a mix
* press '''Generate'''
* open a console (''cmd.exe''), ''cd'' into your '''build''' directory
* ''optional:'' for multi-threaded compilation, the ''mingw32-make'' part may differ on your system: &lt;code&gt;''&lt;pre&gt;set MAKE_COMMAND=mingw32-make -j2&lt;/pre&gt;''&lt;/code&gt; (use -j4 for 4 threads). For codeblocks configure CMAKE_CODEBLOCKS_MAKE_ARGUMENTS as -j4 
* compile with: &lt;code&gt;''&lt;pre&gt;mingw32-make install-spring&lt;/pre&gt;''&lt;/code&gt;
* compile just the engine (spring.exe) with: &lt;code&gt;''&lt;pre&gt;mingw32-make engine-legacy&lt;/pre&gt;''&lt;/code&gt;

===Generating the AI Sources/Wrappers===

you can either build the wrapper:

&lt;code&gt;make Cpp-AIWrapper&lt;/code&gt;

or generate all sources, in case you don't need the binary:

&lt;code&gt;make generateSources&lt;/code&gt;

===Possible Problems===
* If you have successfully compiled but don't have an ingame graphical user interface and no widgets working, you could try downloading and compiling from the maintenance branch instead develop.
&lt;code&gt;
git clone --recursive git://github.com/spring/spring.git -b maintenance
&lt;/code&gt;

* If you get &lt;span class=warning&gt;undefined reference to `_Unwind_Resume'&lt;/span&gt; linking errors, deinstall ''whole'' MinGW and reinstall it with ''sjlj''.

* When you installed an old version of MinGW/TDM and forgot to deinstall it correctly, &lt;code&gt;gcc.exe&lt;/code&gt; &amp; &lt;code&gt;g++.exe&lt;/code&gt; will be named &lt;code&gt;gcc-dw2.exe&lt;/code&gt;/&lt;code&gt;g++-dw2.exe&lt;/code&gt;. CMake will then fail to find the correct one, first try to deinstall anything mingw related and reinstall everything. If that didn't helped just rename the files. If even that doesn't help open cmake-gui and click the advanced button and set the paths to the correct files yourself (&lt;code&gt;CMAKE_C_COMPILER&lt;/code&gt; &amp; &lt;code&gt;CMAKE_CXX_COMPILER&lt;/code&gt;).


=== Notes ===

You can still use Visual Studio 2012 as described below to edit the code. This is very useful because it allows excellent code navigation, and it highlights syntax errors and trivial mistakes before compiling. 

For debugging mingw builds, you can aquire a windows build of gdb from http://www.equation.com/servlet/equation.cmd?fa=gdb

To start debugging, copy ''gdb.exe'' to your build output directory, and launch it with ''gdb spring.exe''. You can supply command line arguments to ''spring.exe'' with ''gdb --args spring.exe myreplayfile.sdf''

=Compiling with Visual Studio (not officially supported!)=
Currently Visual Studio lacks some c++ features it doesn't compile spring!

==General Visual Studio Notes==
When developing using Visual Studio keep in mind:
*&lt;span class=&quot;warning&quot;&gt;It's experimental and not proved to compile or run!&lt;/span&gt;
*&lt;span class=&quot;warning&quot;&gt;Your VS build won't sync with GCC builds in multiplayer mode&lt;/span&gt;
*AIs built with Visual Studio will work with the mingw32 release builds thanks to the C AI Interface, however this interface may change when newer releases are made
*Running any non-LUA AI on VS built Spring will crash it

===2012 (v11)===

Install [http://www.microsoft.com/visualstudio/eng/downloads#d-express-windows-desktop Visual Studio 2012 Express for Windows Desktop], [http://www.microsoft.com/en-us/download/confirmation.aspx?id=35515 Visual C++ Compiler November 2012 CTP], [http://www.cmake.org/ cmake], [http://www.7-zip.org 7-zip] and [http://msysgit.github.io/ msysgit].



From the Startmenu run &quot;VS2012 x86 Native Tools Command Prompt&quot; and type:

&lt;code&gt;&lt;pre&gt;
set PATH=%PATH%;%PROGRAMFILES%\git\bin;%PROGRAMFILES%\cmake 2.8\bin\
git clone --recursive git://github.com/spring/spring.git -b develop
cd spring
git clone git://github.com/spring/vclibs11.git vclibs
cmake -G &quot;Visual Studio 11&quot; .
&lt;/pre&gt;&lt;/code&gt;

Now start visual studio &amp; open Spring.sln. Select &quot;engine-legacy&quot; as default project, as AIs and ofter stuff are known to fail to compile on visual studio.

In the Project Properties, make sure to [http://stackoverflow.com/questions/13238408/variadic-template-in-vs-2012-visual-c-november-2012-ctp select the Microsoft Visual C++ Compiler Nov 2012 CTP].

Note: Visual Studio 2012 Express for Windows Desktop is for free, but requires a registration after 30 days (to get a free license).


[[Category:Compiling]]</text>
      <sha1>nutjek2xex3z5jrtabms870knzvw8ko</sha1>
    </revision>
  </page>
  <page>
    <title>Building spring</title>
    <ns>0</ns>
    <id>2564</id>
    <revision>
      <id>19581</id>
      <parentid>17466</parentid>
      <timestamp>2010-07-11T20:20:37Z</timestamp>
      <contributor>
        <username>Hoijui</username>
        <id>2288</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="438">[[Engine_Development|Development]] &lt; {{FULLPAGENAME}}

=Building Spring=

== Compiling ==

* [[Building Spring on Windows|Windows]]
* [[Building Spring on Linux|Linux]]
* [[Building Spring Cross Compiled|Cross-compiler]]
* [[Building Spring on MacOSX|MacOSX]]
* [[Building Spring on Buildbot|Buildbot]]

If you are using Linux and prefer to use your distributions package system, refer to the Linux [[SetupGuide]].

[[Category:Compiling]]</text>
      <sha1>kth9mljkit9glmnbyk080v71vj598xb</sha1>
    </revision>
  </page>
  <page>
    <title>Buildqueuewars</title>
    <ns>0</ns>
    <id>1828</id>
    <revision>
      <id>19110</id>
      <parentid>11642</parentid>
      <timestamp>2010-03-13T20:58:35Z</timestamp>
      <contributor>
        <username>Koshi</username>
        <id>2371</id>
      </contributor>
      <comment>fix category</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1207">The struggle/joy some people seem to have towards &quot;basebuilding&quot; over strategy and tactics, degenrating into porking or porcing.


It can be thought that people suffering of buildqueuewarache, has fallen into a &quot;lack&quot;  strategies/tactics, and uses, all the times, the same tactic/strategy: Building.

You can fall into this desease, at any time in a game, but happens usually after some &quot;panic&quot; situation, like spotting a base full of lvl1 gunships early game, or when under siege of a well orchestrated attack that seems overwhelming. Or if you have been under attack pressure constantly.


Buildqueue wars happens more often in large maps.

Well, large for the number of people playing it.

For example, a game of 1v1 in delta siege, is VERY possible ending into a buildqueuewar.


A game of builqueuewarheads, usually ends in spam, nukewar, or eternal MLRPC struggle.

When its spam its usually made of a single unit type, (brawlers in tradittional mods), or maybe 2 unit types, that overload countering defense.

Other units may include, warriors, spiders, panthers, lvl1 Gunships.


Builqueing can be fun, but lacks the nerve of attacking/organizing attacks, planning strategies.
[[Category: Strategy]]</text>
      <sha1>nqtkkg7quhn0g89ynvtsi66qzi6tl9q</sha1>
    </revision>
  </page>
  <page>
    <title>CColorMap</title>
    <ns>0</ns>
    <id>1823</id>
    <redirect title="Gamedev:Glossary" />
    <revision>
      <id>27795</id>
      <parentid>26914</parentid>
      <timestamp>2013-10-27T18:10:39Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>redirect to glossary</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="40">#REDIRECT [[Gamedev:Glossary#CColorMap]]</text>
      <sha1>2lg5f0b3n1kwkbf45kxg71w70ddnleb</sha1>
    </revision>
  </page>
  <page>
    <title>CEG</title>
    <ns>0</ns>
    <id>3647</id>
    <redirect title="CEG:Main" />
    <revision>
      <id>28810</id>
      <timestamp>2014-10-05T17:35:30Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>Flozi moved page [[CEG]] to [[CEG:Main]]: adherence to consistent standards</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="22">#REDIRECT [[CEG:Main]]</text>
      <sha1>f7cbdidhf3v83yyjr0zwjfhy3cty8i9</sha1>
    </revision>
  </page>
  <page>
    <title>CEG-Calls</title>
    <ns>0</ns>
    <id>3650</id>
    <redirect title="CEG:Calls" />
    <revision>
      <id>28823</id>
      <timestamp>2014-10-05T18:38:38Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>Flozi moved page [[CEG-Calls]] to [[CEG:Calls]]: Consistency</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="23">#REDIRECT [[CEG:Calls]]</text>
      <sha1>q0b6p650k7v3mb107cwwq8twlw12t9z</sha1>
    </revision>
  </page>
  <page>
    <title>CEG-Classes</title>
    <ns>0</ns>
    <id>2609</id>
    <revision>
      <id>28804</id>
      <parentid>26180</parentid>
      <timestamp>2014-10-05T16:44:25Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>tag for delete, replaced by CEG:Defs</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8638">{{delete}}
'''Source:''' {{sourcelink|file=rts/Sim/Projectiles/}} {{sourcelink|file=rts/Sim/Projectiles/Unsynced/}}

== Common Properties ==
All classes have the following properties, although not all of them use them:

*pos (float3): The initial position of the spawner.
*useAirLos (bool): Whether the spawner uses air LoS to determine if it is visible. This may allow the spawner to be seen from a further distance than normal.
*alwaysVisible (bool): If true, the spawner is always visible, ignoring LoS.
*speed (float3): The initial speed of the spawner.

== CExpGenSpawner ==
This is the closest thing CEG has to a function call. Instead of creating a graphical effect on its own, it creates another CEG.

Properties:

*delay (int): How long to wait before spawning the CEG.
*dir (float3): The CEG will be called with this direction.
*damage (float): The CEG will be called with this damage. The CEG doesn't actually deal any damage, but you can use this as a parameter and read it using the 'd' operator.
*explosionGenerator (string): The name of the CEG you want to spawn.

Suggested Use: 
*If you use a spawner a lot of times, you may want to make it a separate CEG to avoid having to copy-paste many times.
*This is the only way to truly delay a graphical effect.
*The spawned CEG still checks conditions, so if you want to, say, spawn an effect only if it is in water ''and'' doesn't hit a unit, you can give the CExpGenSpawner &lt;code&gt;nounit = 1;&lt;/code&gt; and the spawned &lt;code&gt;CEG water = 1;&lt;/code&gt;.
*This allows you to give a set of spawners the same (and possibly random) direction.
*You can animate an explosion flip-book style using delays and several bitmaps.

== CBitmapMuzzleFlame ==
This creates three rectangular textures at right angles to each other. The &lt;code&gt;frontTexture&lt;/code&gt; has &lt;code&gt;dir&lt;/code&gt; as its normal.

Properties: 
*sideTexture (string)
*frontTexture (string)
*dir (float3)
*colorMap (string)
*size (float): The initial width of the muzzle flame.
*length (float): The initial length of the muzzle flame.
*sizeGrowth (float): By the end of its life, the muzzle flame grows to 1 + sizeGrowth times its initial size and length. The flame grows quickly at first and more slowly toward the end.
*ttl (int): How long the muzzle flame lasts.
*frontOffset (float): Where the frontTexture is along the length of the muzzle flame. 0 means it is in the back, 1 is in the front.

Suggested Use:
*Muzzle flames, obviously.
*You can use an upward-pointing CBitmapMuzzleFlame as a simple splash of water or dirt.
*Railgun trails.
*This is the only class that both obeys perspective and allows for a custom texture.

== CExploSpikeProjectile ==

This creates a glowy spike. Note that the spike is two sided, i.e., symmetric about the position of the spawner.

*length (float): The initial length of (half) of the spike (multiplied by dir).
*width (float): Half the initial width of of the spike. This is an absolute value.
*alpha (float): The starting alpha of the spike.
*alphaDecay (float): How quickly the alpha of the spike decreases.
*dir (float3): The direction of the spike. Not normalized.
*color (float3): The color of the spike.

Suggested Use:
*Anything glowy.
*For large, slow missiles, you can try using this as an extended engine flame. Set the width to something fairly large.
*Long and thin spikes will look spiky; meanwhile, shorter and wider spikes look more blobby.
*The colors of spikes add together, so if you have several spikes and all three color channels are non-zero, it will be white in the center.
*The length growth of the spike depends on the norm of the dir vector. The spike does not grow in width.

== CHeatCloudProjectile ==

Creates an expanding sprite. Simple but effective.

*heat (float)
*maxheat (float)
*heatFalloff (float)
This is really confusing way of representing alpha and alphaDecay. Basically alpha = heat/maxheat, and alphaDecay = heatFalloff/maxHeat.
*size (float): The initial radius of the heatcloud.
*sizeGrowth (float): The heatcloud grows by this amount every frame.
*sizemod (float): The size of the heatcloud is multiplied by 1 - sizemod.
*sizemodmod (float): Each frame, sizemod is multiplied by sizemodmod.
*texture (string): The texture used for the heatcloud.

Suggested Use:
*As the main background to an explosion.

== CSimpleParticleSystem ==

Creates a sprite that can undergo complex motion. Probably the most versatile class. Since there are a lot of properties, I'll group them:

=== Initial Velocity Properties ===
*emitVector (float3): The basic direction in which the particle is emitted.
Protip:&lt;br&gt;
When spawning CEGs via EmitSfx you can make the particles go into the direction of the emiting piece with:
&lt;code&gt;emitvector = dir,&lt;/code&gt;
This is usefull for eg fire coming out of a gun barrel.
*emitRot (float): At what angle to emit the particle relative to emitVector. 0 means that the particle will be emitted in emitVector's direction; 180 will emit the particle in the opposite direction. 90 will emit the particle in a random direction perpendicular to emitVector, which is good for creating rings.
*emitRotSpread (float): For each particle, a random number between 0 and emitRotSpread is added to the emitRot.
*emitMul (float3): Scales the initial particle velocity; for this property, +y is considered to be in the direction of emitVector. Good if you want to create an egg-shaped explosion.
*particleSpeed (float): The particle's initial speed.
*particleSpeedSpread (float): For each particle, a random number between 0 and particleSpeedSpread is added to the particleSpeed .

=== Movement Properties ===
*gravity (float3): This will be added to the particle's velocity every frame.
*airdrag (float): The particle's velocity is multiplied by this every frame.

=== Size Properties ===
*particleSize (float): The initial size of the particle.
*particleSizeSpread (float): For each particle, a random number between 0 and particleSizeSpread is added to the particleSize.
*sizeGrowth (float): How much the particle grows each frame.
*sizeMod (float): The size of the particle is multiplied by this each frame.

=== Visual Properties ===
*directional (bool): If true, the particle will point in the direction it is moving.
*texture (string): The texture to use for the particle.
*colorMap (string): The colormap to use for the particle.

=== Life Properties ===
*numParticles (int): How many particles to create. This is not the same as &lt;code&gt;count&lt;/code&gt;; if you spawn multiple particles using &lt;code&gt;count&lt;/code&gt;, any [[CEG-Operators]] will be reevaluated for each particle, whereas if you use &lt;code&gt;numParticles&lt;/code&gt; they will not be. However, the spread properties are evaluated separately for each particle regardless of which one you use.
*particleLife (float): How long each particle lasts. 
*particleLifeSpread (float); For each particle, a random number between 0 and particleLifeSpread is added to the particleLife .

Suggested Use:
*This is probably the most versatile class.
*Anything moving that is not doing so at constant velocity.
*If you want something that expands (or shrinks) to some size then stops, set sizeMod to something less than 1, and sizeGrowth to something positive. The particle will grow to a size equal to sizeGrowth/ (1 - sizeMod) and stop. The smaller sizeMod is, the faster it will reach this size.

== CSpherePartSpawner ==

Draws an expanding sphere.

Properties:
*alpha (float): The alpha of the sphere.
*ttl (int): How long the sphere lasts.
*expansionSpeed (float): How quickly the sphere expands.
*color (float3): The color of the sphere.

Suggested Use:
*Looks like a shockwave.

== CSimpleGroundFlash ==

Draws an expanding ground texture.

Properties:
*size (float): The radius of the particle.
*sizeGrowth (float): How much the particle grows each frame.
*ttl (int): How long the particle lasts.
*texture (string): The texture to use for the particle.
*colorMap (string): The colormap to use for the particle.

Suggested Use:
*A short groundflash (~8 frames) is good for any explosion that gives off light. You can also use a longer groundflash to suggest the ground is glowing from heat.

== CEG Textures ==

*Textures on CEG definitions are referenced by name.
*The list of available textures and their names should be on a &quot;resources.tdf&quot; or &quot;resources.lua&quot; file that's usually placed on the &quot;gamedata&quot; subfolder.
*Texture definitions to be used in projectile classes should be placed within the &quot;projectiletextures&quot; category and textures to be used with &quot;CSimpleGroundFlash&quot; class should be placed within the &quot;groundfx&quot; category.
*Texture images are usually placed in the &quot;bitmaps&quot; subfolder.</text>
      <sha1>g50hv4c1m9d1rrm5e5jcg6m61608gkj</sha1>
    </revision>
  </page>
  <page>
    <title>CEG-Format</title>
    <ns>0</ns>
    <id>2607</id>
    <revision>
      <id>28803</id>
      <parentid>28014</parentid>
      <timestamp>2014-10-05T16:44:06Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>tag for delete, replaced by CEG:Defs</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4264">{{delete}}
'''Source:''' {{sourcelink|file=rts/Sim/Projectiles}}

== Overall Format ==

A CEG file contains one or more CEGs. Each CEG follows this format:

&lt;code&gt;&lt;pre&gt;
[ceg_name] {
  useDefaultExplosions = 0;
  [spawner_name_0] {
     class=CClassName;
     [properties] {
       property0 = value0;
       property1 = value1;
       //and so on...
     }
     condition0 = 1;
     condition1 = 0;
     count = 1;
  }

  [spawner_name_1] {
     //each spawner follows that format
  }

  [groundflash] {
     //groundflash is a special name; it always generates a groundflash
     flashsize=16;
     flashalpha=1;
     circlegrowth=1;
     circlealpha=0;
     ttl=8;
     color=1,1,1;
  }
}
&lt;/pre&gt;&lt;/code&gt;

=== useDefaultExplosions ===
If this is set, the CEG will use the default explosion (based on damage and area of effect) in addition to any spawners you define.
The default explosions are sometimes very heavy in performance, especially for large damage values. 

The basedamage is min((damage/20), areaofeffect*1.5)*(damage&gt;500?1:2)

This means :

basedamage*0.6 smoke projectiles

min(20, basedamage*0.8) dist projectiles

random(6)+3+basedamage/25 debris projectiles

sqrt(basedamage)+8 explospike projectiles

1 standardgroundflash

1 spherepartprojectile

=== Spawners ===
A CEG can contain any number of spawners. The name of the spawners don't really matter, as long as it's not &quot;groundflash&quot;, which has a special meaning. You can think of each spawner as being one component of the overall explosion.

==== Class ====
Each spawner has a class that determines what kind of graphical effect it creates. Spring has a number of standard classes that you can choose from. See [[CEG-Classes]] for details.

==== Properties ====
Depending on what class a spawner is, it will have a set of properties that allow you to fine-tune what the spawner displays. Again, see [[CEG-Classes]] for details.

==== Conditions ====
These determine under what conditions the spawner will run. The available conditions are &quot;air&quot; (at least 20 elmos above ground/sea level), &quot;water&quot;, &quot;underwater&quot;, &quot;ground&quot;, &quot;unit&quot; (hits a unit), and &quot;nounit&quot; (doesn't hit a unit). If you set the condition to true (e.g., &quot;water = 1;&quot;), the spawner will run if the explosion takes place under that condition. If you set more than one condition, the spawner will run if ''any'' of them are true. If you want a spawner to run only if two or more conditions are ''all'' true, you have to do a little trick with the CExpGenSpawner class.

==== Count ====
The count determines the number of times the spawner will run.

=== groundflash ===
If you name a spawner &quot;groundflash,&quot; it will always generate a groundflash. A groundflash has the following properties:

*flashsize (float): The radius of the groundflash.
*flashalpha (float in [0, 1]): How transparent the groundflash is. Generally, the higher, the brighter.
*circlegrowth (float): A groundflash can have an additional circle that expands outwards. This controls how fast the circle grows.
*circlealpha (float in [0, 1]): How transparent the circle is.
*ttl (int): How long the groundflash lasts.
*color (float3): The color of the groundflash.

Suggested Use: A short groundflash (~8 frames) is good for any explosion that gives off light. You can also use a longer groundflash to suggest the ground is glowing from heat.

=== Data Types ===
CEGs use the following data types:

*float: Most properties are floats. e.g. `0.123`
*int: Used for counts and ttls. e.g. `1234`
*bool: Use for conditions, and some properties. e.g. `true`, `1`, `false`
*float3: Used for vectors and colors. The components are floats, separated by commas. You can also use the keyword &lt;code&gt;dir&lt;/code&gt;, which represents the direction fed to the CEG. e.g. &quot;0.1 , 1.2 , 3.4&quot;, &quot;dir&quot;
*string: Used for colormaps and texture names. In .lua you delimit a string by quotes; in .tdf you do not. Color maps consist of 2 or more groups of 4 numbers, each group representing a RGBA color. Textures are the names you define in gamedata/resources.tdf or gamedata/resources.lua. e.g. &quot;1.0 0.0 0.0 1      0 0 1.0 1&quot; (are gradient from red to blue)

You can use [[CEG-Operators]] to define floats that are not fixed.

=== Units ===

All distances are in elmos; all time is in frames.</text>
      <sha1>nalfzej4lynkkzznhdy3tejwah86jmv</sha1>
    </revision>
  </page>
  <page>
    <title>CEG-Miscellaneous</title>
    <ns>0</ns>
    <id>3649</id>
    <redirect title="CEG:Miscellaneous" />
    <revision>
      <id>28819</id>
      <timestamp>2014-10-05T18:05:44Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>Flozi moved page [[CEG-Miscellaneous]] to [[CEG:Miscellaneous]]: consistency</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="31">#REDIRECT [[CEG:Miscellaneous]]</text>
      <sha1>3blcczayquia3ljnxwzfo4sylf6mykf</sha1>
    </revision>
  </page>
  <page>
    <title>CEG-OldInfo</title>
    <ns>0</ns>
    <id>1501</id>
    <revision>
      <id>28807</id>
      <parentid>22418</parentid>
      <timestamp>2014-10-05T17:19:04Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>tag for delete now examples are copied - is the stuff about projectiles.txt worth saving?</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4945">{{delete}}
== Custom explosion generators ==

Source: {{sourcelink|file=rts/Sim/Projectiles}}

=== What are they? ===
Custom explosions are small explosion scripts read from gamedata/explosions/*.tdf.
The explosion script specifies which particles/projectiles have to be created when the explosion happens, and their initial properties (position,speed,...)


=== Explosion script definition ===

The explosion script directly specifies which C++ projectile classes have to be created, and also which properties the projectiles should have. 

The explosion script is structured like this:

 [ExplosionScriptName]
 {
 	[projectile scriptname] // this specifies the class of the projectile
 	{
 		[properties]
 		{
 			size = 40;
 			sizeGrowth = -2;
 			pos = -30 r60, r30, -30 r60; // These codes are explained below
 			speed=0.75 r-1.5, 1.7 r1.6, 0.75 r-1.5;
 		}
 		underwater=0; // should this projectile be created when underwater?
 		air=0;        // should this projectile be created when in air?
 		water=1;      // should this projectile be created on water?
 		ground=1;     // should this projectile be created when on ground?

 		unit=0;   // only spawn if the explosion hit a unit?
 		nounit=1; // only spawn if the explosion did not hit a unit?

 		count=10; // number of projectiles of this type

 		useAirLos=0;
 		alwaysVisible=0;
 	}
 .. other projectiles types can follow here ..
 }

Defaults for air/underwater/ground/water are zero.
Default of count is 1.

=== Projectile properties ===

To begin, you should run 
 spring /p      (or &quot;spring -p&quot; on linux) 
to let spring export &quot;projectiles.txt&quot;, which contains all the classes you can use in an explosion script. At the time of writing, this would contain [[projectiles.txt]]

The items listed in &quot;properties&quot; are directly mapped to the class properties in projectiles.txt
The properties are specified with a bit of a cryptic syntax. You can use extra commands in them (r,d,i). For example this:

 pos = -30 r60, r30, -30 r60; 

The x coordinate (specified with -30 r60) will be:  
 x = -30 + (Random value between 0 and 60);

Commands:
 rX: add a number  between 0 and X
 iX: multiply the projectile index with X and add it. See the example for this below.
 dX: multiply the damage with X and add it.

== Explosion script examples ==

This is an example of a script that makes 10 smoke projectiles (yeah they should have been called particles, but they are handled by spring using the projectile system)

  [ARM_HLT_Expl]
  {
  	[smoke]
  	{
  		[properties]
  		{
  			// age increase per frame, when age &gt;= 1  the particle is destroyed
  			ageSpeed=0.04;
 
 			size = 40;
  			sizeGrowth = -2;
  			pos = -30 r60, r30, -30 r60;
  			speed=0.75 r-1.5, 1.7 r1.6, 0.75 r-1.5;
  		}
  		water=1;
  		ground=1;
  		count=10;
  	}
  }
 
This particular script would be linked to with &quot;explosiongenerator=custom:ARM_HLT_Expl;&quot;

Here is an example that uses the index (i) command in the properties:

 [heatcloud]
 {
 	[properties]
 	{
 		pos = 0, i20, 0;
 		heat = 10;
 		maxheat=10;
 		heatFalloff=1;
 		size = 30;
 	}
 	ground=1;
 	count=10;
 }

This script creates a tower of heatcloud projectile. The first projectile gets y=0, the second y=20, y=40, y=60, .. and finally y=180


=== How to link a custom explosion to a weapon ===

The weapon definitions needs to have this in it:
 explosiongenerator = custom:ExplosionScriptName;

The explosion definition for ExplosionScriptName would be one of the TDF files in gamedata/explosions/

You can also link the weapons for self-destruct and normal destruct to an explosion script.

For an exlplosion generator when a projectile bounces, there is also:
 bounceexplosiongenerator = custom:ExplosionScriptName;

=== Adding ground flashes ===

The ground flash is currently not an actual projectile, so it's specified in a different way:
 [ARM_HLT_Expl]
 {
      .. projectiles definitions ..

 	[groundflash]
 	{
 		flashSize = 100;   // flash size
 		flashAlpha = 1;    // initial alpha of the flash
 		circleGrowth = 60; // size increase/frame
 		circleAlpha = 1;   // initial alpha of the ring
 		ttl = 10;          // number of frames
 		color = 0,0,1;    // color RGB
 	}
 }

== Projectile classes usable in explosion generators ==
[[bitmapmuzzleflame]]&lt;br&gt;
[[dirt]]&lt;br&gt;
[[explspike]]&lt;br&gt;
[[heatcloud]]&lt;br&gt;
[[smoke]]&lt;br&gt;
[[smoke2]]&lt;br&gt;
[[gfx]]&lt;br&gt;
[[CSpherePartSpawner]]&lt;br&gt;
[[simpleparticlesystem]]&lt;br&gt;

== Keywords ==
These are keywords that can be used in the explosiongenerator script to give a propertier a special value.

&lt;ul&gt;

&lt;li&gt;
'''dir'''&lt;br&gt;
This can only be used on a float3 vector. This will be the direction vector if the event that created this explosiongenerator can be described with a direction.
For weapon impacts, its the direction of the impact (the travel direction of the projectile when it explodes). For script emmited explosiongenerators it is the direction of the piece that emmits it.
&lt;/li&gt;

&lt;/ul&gt;</text>
      <sha1>a367a2roiizkmx6kk8sp1fj6q5tsvz6</sha1>
    </revision>
  </page>
  <page>
    <title>CEG-Operators</title>
    <ns>0</ns>
    <id>3648</id>
    <redirect title="CEG:Operators" />
    <revision>
      <id>28814</id>
      <timestamp>2014-10-05T17:41:52Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>Flozi moved page [[CEG-Operators]] to [[CEG:Operators]]: consistency</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">#REDIRECT [[CEG:Operators]]</text>
      <sha1>gcm268zvvqgvjmdytonfaje9r8mgn72</sha1>
    </revision>
  </page>
  <page>
    <title>CEG:Calls</title>
    <ns>0</ns>
    <id>2608</id>
    <revision>
      <id>29115</id>
      <parentid>29112</parentid>
      <timestamp>2015-02-01T13:53:32Z</timestamp>
      <contributor>
        <username>Kloot</username>
        <id>2373</id>
      </contributor>
      <minor/>
      <comment>Reverted edits by [[Special:Contributions/8611|8611]] ([[User talk:8611|talk]]) to last revision by [[User:Flozi|Flozi]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2855">= CEG Calls =
== Overview ==
There are four places where you can call a CEG: weapons, COB or LUS unit scripts, flying piece projectiles and synced Lua gadgets.

== Weapon CEGs ==

There are three weapon tags that can spawn CEGs:

*{{xtaglink|Gamedev:WeaponDefs|cegTag}} - Spawns the CEG every frame at the weapon projectile's position and direction.
*{{xtaglink|Gamedev:WeaponDefs|explosionGenerator}} - Spawns the CEG when the weapon hits its target.
*{{xtaglink|Gamedev:WeaponDefs|bounceExplosionGenerator}} - For bouncing weapons only. Spawns the CEG when the weapon bounces.

== Calling CEGs from unit scripts ==

Calling a CEG from unit scripts requires two steps. First, in the unit's definition, you need to '''define the order of the effects:'''

For a .fbi unitdef use:
&lt;code&gt;&lt;pre&gt;
[sfxtypes] {
  explosiongenerator0 = custom:ExplosionGeneratorName0;
  explosiongenerator1 = custom:ExplosionGeneratorName1;
  //and so on...
}
&lt;/pre&gt;&lt;/code&gt;

For a .lua unitdef use:

&lt;code&gt;&lt;pre&gt;
sfxtypes = {
  explosiongenerators = {
    &quot;custom:ExplosionGeneratorName0&quot;,
    &quot;custom:ExplosionGeneratorName1&quot;,
    --and so on...
  },
},
&lt;/pre&gt;&lt;/code&gt;
(See [[Gamedev:UnitDefs#SFXTypes]])

=== COB ===
To actually generate the explosion in a COB, you need to call [[Animation-CobConstants#emit-sfx|emit-sfx]]:

&lt;code&gt;&lt;pre&gt;emit-sfx 1024 + ceg_num from pieceName;&lt;/pre&gt;&lt;/code&gt;

Where ceg_num is the number of the explosion generator in the unit definition (the first one is 0, the next is 1, and so on). The CEG will have the position and direction of the piece you emit it from. For syntactic sugar you can use:

&lt;code&gt;&lt;pre&gt;#define MY_FIRST_AWESOME_CEG 1024 + 0
emit-sfx MY_FIRST_AWESOME_CEG from pieceName;&lt;/pre&gt;&lt;/code&gt;

In a COB script, you can call:

&lt;code&gt;&lt;pre&gt;set CEG_DAMAGE damage_value&lt;/pre&gt;&lt;/code&gt;

Any &lt;code&gt;emit-sfx&lt;/code&gt; instructions will then use that value for the &quot;damage&quot; (use the '[[CEG:Operators#Damage_.28.27d.27.29|'d' operator]] to access this value).

=== LUS ===
In a Lua unit script you generate the explosion using [[Animation-LuaCallouts#Effects|Spring.UnitScript.EmitSfx]] e.g.:

&lt;code&gt;&lt;pre&gt;EmitSfx(pieceName, SFX.CEG + ceg_num)&lt;/pre&gt;&lt;/code&gt;

Where ceg_num is the number of the explosion generator in the unit definition as before.

== Piece Projectiles ==
CEGs can be attached to piece projectiles which are created when a unit script calls [[Animation-CobConstants#explode|explode]] (COB) or [[Animation-LuaCallouts#Effects|Explode]] (lua) with an argument of &lt;code&gt;COB.FALL&lt;/code&gt;. See [[Gamedev:UnitDefs#pieceExplosionGenerators]].

== Synced Lua Gadget CEGs ==
The only method that lets you directly call a CEG by name, anywhere on the map.
See [[Lua_SyncedCtrl#Other|Spring.SpawnCEG]]. Note that the damage parameter does not apply damage, but is used to set the [[CEG:Operators#Damage_.28.27d.27.29|'d' operator]].

[[Category:CEG]]</text>
      <sha1>hn6qudxqq2rgcmhmjvtabnnk2wkeh77</sha1>
    </revision>
  </page>
  <page>
    <title>CEG:Defs</title>
    <ns>0</ns>
    <id>3640</id>
    <revision>
      <id>31231</id>
      <parentid>30823</parentid>
      <timestamp>2020-05-13T14:35:13Z</timestamp>
      <contributor>
        <username>Silentwings</username>
        <id>2883</id>
      </contributor>
      <minor/>
      <comment>/* Overall Format */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="21732">= CEG Definitions =

==Source== 
The engine source code which loads the tags from these files is viewable here:

* {{sourcelink|file=rts/Sim/Projectiles/}} 
* {{sourcelink|file=rts/Sim/Projectiles/Unsynced/}}
* {{sourcelink|file=rts/Rendering/GroundFlash.cpp}}

== Data Types ==
CEGs use the following data types:
{{DataTypes}}

You can use [[CEG:Operators]] to define floats that are not fixed.

== CEG Textures ==

* Textures on CEG definitions are referenced by name.
* The list of available textures and their names should be in [[resources.lua]]
* Texture definitions to be used in projectile classes should be placed within the &lt;code&gt;projectiletextures&lt;/code&gt; category and textures to be used with [[#CSimpleGroundFlash]] class should be placed within the &lt;code&gt;groundfx&lt;/code&gt; category.
* Texture images are usually placed in the &quot;bitmaps&quot; subfolder.

== Overall Format ==

A CEG file contains one or more CEGs. Each CEG follows this format:

&lt;pre&gt;
return {
  [&quot;ceg_name&quot;] = {
    -- EXPLOSION LEVEL
    useDefaultExplosions = false,

    spawner1_name = {
      -- SPAWNER LEVEL
      class         = &quot;CClassName&quot;,
      count              = 1,
      air                = true,
      ground             = true,
      water              = true,
      properties = {
        -- CLASS LEVEL
        },
      },
    },
    spawner2_name = {
      -- SPAWNER LEVEL
      -- each spawner follows the above format
    },
    groundflash = {
      -- groundflash is a special spawner name; it always generates a CStandardGroundFlash
      -- CStandardGroundFlash properties
    },
    -- other special spawner names exist, although their use is discouraged in favour of class=&quot;CSomeClass&quot;
    -- see https://github.com/spring/spring/blob/develop/cont/base/springcontent/gamedata/explosion_alias.lua#L61
  },
}
&lt;/pre&gt;

== Explosion Level Tags ==
{{tag
|name = useDefaultExplosions
|type = bool
|default = false
|description = If this is set, the CEG will use the default explosion (based on damage and area of effect) in addition to any spawners you define. The default explosions are sometimes very performance heavy, especially for large damage values (leading to higher particle counts).
}}

== Spawner Level Tags ==
A CEG can contain any number of spawners. The name of the spawners don't really matter, as long as it's not &lt;code&gt;groundflash&lt;/code&gt;, which has a special meaning. You can think of each spawner as being one component of the overall explosion.

{{tag
|name = class
|type = string
|default = spawner_name
|description = Each spawner has a class that determines what kind of graphical effect it creates. Spring has a number of standard classes that you can choose from. Currently available classes are:
* [[#CExpGenSpawner|CExpGenSpawner]]
* [[#CBitmapMuzzleFlame|CBitmapMuzzleFlame]]
* [[#CExploSpikeProjectile|CExploSpikeProjectile]] 
* [[#CHeatCloudProjectile|CHeatCloudProjectile]]
* [[#CSimpleParticleSystem|CSimpleParticleSystem]]
* [[#CSpherePartSpawner|CSpherePartSpawner]]
* [[#CSimpleGroundFlash|CSimpleGroundFlash]]
* [[#CStandardGroundFlash|CStandardGroundFlash]]
}}

{{tag
|name = count
|type = int
|default = 1
|description = The count determines the number of times the spawner will run.
}}

=== Visibility Conditions ===
These determine under what conditions the spawner will run. If you set the condition to true, the spawner will run if the explosion takes place under that condition. If you set more than one condition, the spawner will run if ''any'' of them are true. If you want a spawner to run only if two or more conditions are ''all'' true, you have to do a little trick with the [[#CExpGenSpawner]] class as explained in &quot;suggested use&quot;.

{{tag
|name = air
|type = bool
|default = false
|description = The CEG will run if at least 20 [[elmo]]s above ground/sea level.
}}

{{tag
|name = water
|type = bool
|default = false
|description = The CEG will run if in water to a depth of -5 [[elmo]]s.
}}

{{tag
|name = underwater
|type = bool
|default = false
|description = The CEG will run if under water deeper than 5 [[elmo]]s.
}}

{{tag
|name = ground
|type = bool
|default = false
|description = The CEG will run if less than 20 [[elmo]]s above ground.
}}

{{tag
|name = unit
|type = bool
|default = false
|description = The CEG will run if the weapon hits a unit.
}}

{{tag
|name = nounit
|type = bool
|default = false
|description = The CEG will run if the weapon does not hit a unit.
}}

== Class Level Tags ==
=== Common Properties ===
All classes have the following properties, although not all of them use them:

{{tag
|name = alwaysVisible
|type = bool
|default = false
|description = If true, the spawner is always visible, ignoring LoS. Note that prior to 98.0 this did not work correctly.
}}

{{tag
|name = useAirLos
|type = bool
|default = false
|description = Whether the spawner uses air LoS to determine if it is visible. This may allow the spawner to be seen from a further distance than normal.
}}

{{tag
|name = pos 
|type = float[3]
|default = {0.0, 0.0, 0.0}
|description = The initial position vector of the spawner.
}}

{{tag
|name = speed
|type = float[3]
|default = {0.0, 0.0, 0.0}
|description = The initial speed vector of the spawner.
}}

{{tag
|name = dir
|type = float[3]
|description = The initial direction vector of the spawner.
}}

=== CExpGenSpawner ===
This is the closest thing CEG has to a function call. Instead of creating a graphical effect on its own, it creates another CEG.

==== Suggested Use ====
* If you use a spawner a lot of times, you may want to make it a separate CEG to avoid having to copy-paste many times.
* This is the only way to truly delay a graphical effect.
* The spawned CEG still checks conditions, so if you want to, say, spawn an effect only if it is in water ''and'' doesn't hit a unit, you can give the CExpGenSpawner &lt;code&gt;nounit = 1;&lt;/code&gt; and the spawned &lt;code&gt;CEG water = 1;&lt;/code&gt;.
* This allows you to give a set of spawners the same (and possibly random) direction.
* You can animate an explosion flip-book style using delays and several bitmaps.

==== Properties ====

{{tag
|name = delay
|type = int
|default = 1
|description = How long to wait (in frames?) before spawning the CEG.
}}

{{tag
|name = damage
|type = float
|default = 0.0
|description = The CEG will be called with this damage. The CEG doesn't actually deal any damage, but you can use this as a parameter and read it using the [[CEG:Operators#Damage_.28.27d.27.29|'d' operator]].
}}

{{tag
|name = explosionGenerator
|type = string
|default = &quot;&quot;
|description = The name of the CEG you want to spawn.
}}


=== CBitmapMuzzleFlame ===
This creates three rectangular textures at right angles to each other. The {{taglink|frontTexture}} has {{taglink|dir}} as its normal.

==== Suggested Use ====
*Muzzle flames, obviously.
*You can use an upward-pointing CBitmapMuzzleFlame as a simple splash of water or dirt.
*Railgun trails.
*This is the only class that both obeys perspective and allows for a custom texture.

==== Properties ====

{{tag
|name = sideTexture
|type = string
|default = &quot;&quot;
|description = Texture as viewed from the side.
}}

{{tag
|name = frontTexture
|type = string
|default = &quot;&quot;
|description = Texture as viewed from the front.
}}

{{tag
|name = colorMap
|type = string
|default = &quot;&quot;
|description = See [[CColorMap]].
}}

{{tag
|name = size
|type = float
|default = 0.0
|description = The initial width of the muzzle flame.
}}

{{tag
|name = length
|type = float
|default = 0.0
|description = The initial length of the muzzle flame.
}}

{{tag
|name = sizeGrowth 
|type = float
|default = 0.0
|description = By the end of its life, the muzzle flame grows to &lt;code&gt;1 + sizeGrowth&lt;/code&gt; times its initial {{taglink|size}} and {{taglink|length}}. The flame grows quickly at first and more slowly toward the end.
}}

{{tag
|name = ttl
|type = int
|default = 0
|description = How long the muzzle flame lasts.
}}

{{tag
|name = frontOffset
|type = float
|default = 0.0
|description = Where the frontTexture is along the length of the muzzle flame. &lt;code&gt;0&lt;/code&gt; means it is in the back, &lt;code&gt;1&lt;/code&gt; is in the front.
}}


=== CExploSpikeProjectile ===

This creates a glowy spike. Note that the spike is two sided, i.e., symmetric about the position of the spawner.

==== Suggested Use ====
* Anything glowy.
* For large, slow missiles, you can try using this as an extended engine flame. Set the width to something fairly large.
* Long and thin spikes will look spiky; meanwhile, shorter and wider spikes look more blobby.
* The colors of spikes add together, so if you have several spikes and all three color channels are non-zero, it will be white in the center.
* The length growth of the spike depends on the norm of the dir vector. The spike does not grow in width.

==== Properties ====
{{tag
|name = length
|type = float
|default = 0.0
|description = The initial length of (half) of the spike (multiplied by {{taglink|dir}}).
}}

{{tag
|name = lengthGrowth
|type = float
|default = dir.Length() * (0.5 + RandFloat() * 0.4)
|description = How much the length increases by per update.
}}

{{tag
|name = width
|type = float
|default = 0.0
|description = Half the initial width of of the spike. This is an absolute value.
}}

{{tag
|name = alpha
|type = float
|default = 0.0
|description = The starting alpha of the spike.
}}

{{tag
|name = alphaDecay
|type = float
|default = 0.0
|description = How quickly the alpha of the spike decreases.
}}

{{tag
|name = color
|type = rgb
|default = {1.0, 0.8, 0.5}
|description = The color of the spike.
}}


=== CHeatCloudProjectile ===

Creates an expanding sprite. Simple but effective.

==== Suggested Use ====
* As the main background to an explosion.

==== Properties ====
{{tag
|name = heat
|type = float
|default = 0.0
|description = Used in alpha calculations. See {{taglink|heatFalloff}}.
}}

{{tag
|name = maxheat
|type = float
|default = 0.0
|description = Used in alpha calculations. See {{taglink|heatFalloff}}.
}}

{{tag
|name = heatFalloff
|type = float
|default = 0.0
|description = This is really confusing way of representing alpha and alphaDecay. Basically &lt;code&gt;alpha = &lt;/code&gt;{{taglink|heat}}&lt;code&gt;/&lt;/code&gt;{{taglink|maxheat}}, and &lt;code&gt;alphaDecay = &lt;/code&gt;{{taglink|heatFalloff}}&lt;code&gt;/&lt;/code&gt;{{taglink|maxHeat}}.
}}

{{tag
|name = size
|type = float
|default = 0.0
|description = The initial radius of the heatcloud.
}}

{{tag
|name = sizeGrowth
|type = float
|default = 0.0
|description = The heatcloud grows by this amount every frame.
}}

{{tag
|name = sizeMod
|type = float
|default = 0.0
|description = The size of the heatcloud is multiplied by &lt;code&gt;1 - sizeMod&lt;/code&gt;.
}}

{{tag
|name = sizeModMod
|type = float
|default = 0.0
|description = Each frame, {{taglink|sizeMod}} is multiplied by {{taglink|sizeModMod}}.
}}

{{tag
|name = texture
|type = string
|default = &quot;heatcloud&quot; as referenced in [[resources.lua]]
|description = The texture used for the heatcloud.
}}

=== CSimpleParticleSystem ===

Creates a sprite that can undergo complex motion. Probably the most versatile class.

==== Suggested Use ====
* Anything moving that is not doing so at constant velocity.
* If you want something that expands (or shrinks) to some size then stops, set {{taglink|sizeMod}} to something less than &lt;code&gt;1&lt;/code&gt;, and {{taglink|sizeGrowth}} to something positive. The particle will grow to a size equal to &lt;code&gt;sizeGrowth / (1 - sizeMod)&lt;/code&gt; and stop. The smaller {{taglink|sizeMod}} is, the faster it will reach this size.

==== Properties ====
===== Initial Velocity Properties =====
{{tag
|name = emitVector
|type = float[3]
|default = {0.0, 0.0, 0.0}
|description = The initial direction vector in which the particle is emitted. When spawning CEGs via EmitSfx you can make the particles go into the direction of the emiting piece with {{taglink|emitvector|dir}}. This is useful for e.g. fire coming out of a gun barrel.
}}

{{tag
|name = emitRot
|type = float
|default = 0.0
|description = At what angle to emit the particle relative to {{taglink|emitVector}}. &lt;code&gt;0&lt;/code&gt; means that the particle will be emitted in {{taglink|emitVector}}'s direction; &lt;code&gt;180&lt;/code&gt; will emit the particle in the opposite direction. &lt;code&gt;90&lt;/code&gt; will emit the particle in a random direction perpendicular to {{taglink|emitVector}}, which is good for creating rings.
}}

{{tag
|name = emitRotSpread
|type = float
|default = 0.0
|description = For each particle, a random number between &lt;code&gt;0&lt;/code&gt; and {{taglink|emitRotSpread}} is added to the {{taglink|emitRot}}.
}}

{{tag
|name = emitMul
|type = float[3]
|default = {1.0, 1.0, 1.0}
|description = Scales the initial particle velocity; for this property, +y is considered to be in the direction of {{taglink|emitVector}}. Good if you want to create an egg-shaped explosion.
}}

{{tag
|name = particleSpeed 
|type = float
|default = 0.0
|description = The particle's initial speed.
}}

{{tag
|name = particleSpeedSpread
|type = float
|default = 0.0
|description = For each particle, a random number between &lt;code&gt;0&lt;/code&gt; and {{taglink|particleSpeedSpread}} is added to the {{taglink|particleSpeed}}.
}}

===== Movement Properties =====

{{tag
|name = gravity
|type = float[3]
|default = {0.0, 0.0, 0.0}
|description = This will be added to the particle's velocity every frame.
}}

{{tag
|name = airdrag
|type = float
|default = 0.0
|description = The particle's velocity is multiplied by this every frame.
}}

===== Size Properties =====

{{tag
|name = particleSize 
|type = float
|default = 0.0
|description = The initial size of the particle.
}}

{{tag
|name = particleSizeSpread
|type = float
|default = 0.0
|description = For each particle, a random number between &lt;code&gt;0&lt;/code&gt; and {{taglink|particleSizeSpread}} is added to the {{taglink|particleSize}}.
}}

{{tag
|name = sizeGrowth
|type = float
|default = 0.0
|description = How much the particle grows each frame.
}}

{{tag
|name = sizeMod
|type = float
|default = 0.0
|description = The size of the particle is multiplied by this each frame.
}}

===== Visual Properties =====

{{tag
|name = directional
|type = bool
|default = false
|description = If true, the particle will point in the direction it is moving.
}}

{{tag
|name = texture
|type = string
|default = &quot;&quot;
|description = The texture to use for the particle.
}}

{{tag
|name = colorMap
|type = string
|default = &quot;&quot;
|description = See [[CColorMap]].
}}

===== Life Properties =====

{{tag
|name = numParticles
|type = int
|default = 0
|description = How many particles to create. This is not the same as &lt;code&gt;count&lt;/code&gt;; if you spawn multiple particles using &lt;code&gt;count&lt;/code&gt;, any [[CEG:Operators]] will be re-evaluated for each particle, whereas if you use {{taglink|numParticles}} they will not be. However, the spread properties are evaluated separately for each particle regardless of which one you use.
}}

{{tag
|name = particleLife
|type = float
|default = 0.0
|description = How long each particle lasts. 
}}

{{tag
|name = particleLifeSpread
|type = float
|default = 0.0
|description = For each particle, a random number between &lt;code&gt;0&lt;/code&gt; and {{taglink|particleLifeSpread}} is added to the {{taglink|particleLife}}.
}}

=== CSpherePartSpawner ===

Draws an expanding sphere.

==== Suggested Use ====
*Looks like a shockwave.

==== Properties ====

{{tag
|name = alpha
|type = float
|default = 0.0
|description = The alpha of the sphere.
}}

{{tag
|name = ttl
|type = int
|default = 0
|description = Time to live, in frames(?).
}}

{{tag
|name = expansionSpeed
|type = float
|default = 0.0
|description = How quickly the sphere expands.
}}

{{tag
|name = color
|type = rgb
|default = {0.0, 0.0, 0.0}
|description = The color of the sphere.
}}


=== CSimpleGroundFlash ===

Draws an expanding ground texture.

==== Suggested Use ====
* A short groundflash (~8 frames) is good for any explosion that gives off light. You can also use a longer groundflash to suggest the ground is glowing from heat.

==== Properties ====

{{tag
|name = size
|type = float
|default = 0.0
|description = The radius of the particle.
}}

{{tag
|name = sizeGrowth
|type = float
|default = 0.0
|description = How much the particle grows each frame.
}}

{{tag
|name = ttl
|type = int
|default = 0
|description = Time to live, in frames(?).
}}

{{tag
|name = texture
|type = string
|default = &quot;&quot;
|description = The texture to use for the particle.
}}

{{tag
|name = colorMap
|type = string
|default = &quot;&quot;
|description = See [[CColorMap]].
}}

=== CStandardGroundFlash ===
If you name a spawner &quot;groundflash,&quot; it will always generate a standard groundflash. 

==== Suggested Use ====
A short groundflash (~8 frames) is good for any explosion that gives off light. You can also use a longer groundflash to suggest the ground is glowing from heat.

==== Properties ====

{{tag
|name = flashSize
|type = float
|default = 0.0
|description = The radius of the groundflash.
}}

{{tag
|name = flashAlpha 
|type = float
|range = [0, 1]
|default = 0.0
|description = How transparent the groundflash is. Generally the higher the brighter.
}}

{{tag
|name = circleGrowth 
|type = float
|default = 0.0
|description = A groundflash can have an additional circle that expands outwards. This controls how fast the circle grows.
}}

{{tag
|name = circleAlpha
|type = float
|range = [0, 1]
|default = 0.0
|description = How transparent the circle is.
}}

{{tag
|name = ttl
|type = int
|default = 0
|description = How long the groundflash lasts.
}}

{{tag
|name = color
|type = rgb
|default = {1.0, 1.0, 0.8}
|description = The color of the groundflash.
}}


=== CSmokeProjectile2 ===
( {{FIXME}} newly added to wiki. someone cross-check then remove this note )

Particles that begin with a hard-coded yellow-red colorfade and then fade to monochrom. (shades of grey)

Movement is influenced by the random wind.
Finer details of visual and position update are best explained by looking at the formulas in &lt;code&gt;CSmokeProjectile2::Update() &amp; CSmokeProjectile2::Draw()&lt;/code&gt;

==== Suggested Use ====
Smoke. Smokestacks, rocket exhaust, burning wreckage,...

For a nicer stream of smoke spawn it frequently over multiple frames, otherwise it looks rather bland.

==== Properties ====
{{tag
|name = color
|type = float
|default = 0.5
|description = How dark the final monochrom color of a particle is. 0 is black.
(Use &gt;1 for slightly bugged funnies, like slightly non-monochrome colors or interessting black/white changes.)
}}

{{tag
|name = size
|type = float
|default = 0.0
|description = Size of a particle.
}}

{{tag
|name = ageSpeed
|type = float
|default = 0.5
|description = How fast the particle ages. Every frame: &lt;code&gt;age += ageSpeed&lt;/code&gt; The particle is deleted at &lt;code&gt;if (age &gt; 1)&lt;/code&gt;
}}

{{tag
|name = glowFalloff
|type = float
|default = 0.0
|description = How fast the particle fades to monochrom.
}}

{{tag
|name = wantedPos
|type = float3
|default = &quot;0,0,0&quot;
|description = In which direction the smoke tends to drift. Less effective in y-coordinate and influenced by random wind. 
}}

{{tag
|name = speed
|type = float3
|default = &quot;0,0,0&quot;
|description = &lt;code&gt;wantedPos += speed;&lt;/code&gt; How fast and in which vector the particles move.
}}

{{tag
|name = texture
|type = hardcoded
|default = randomly chosen. 
|description = Particles randomly pick one of the smoke textures (bitmaps\smoke) and remain with it until death.
}}


=== CSmokeProjectile ===
Monochrome particles that fade out.
A more &quot;primitive&quot; version of CSmokeProjectile2. 
No hardcoded red-yellow start but it misses wantedPos to tweak the look a bit more detailed.

==== Suggested Use ====
Smoke. 
For a nicer stream of smoke spawn it frequently over multiple frames, otherwise it looks rather bland.

==== Properties ====
{{tag
|name = color
|type = float
|default = 0.5
|description = Brightness of the particle. 0 is black.
}}

{{tag
|name = size
|type = float
|default = 0.0
|description = Size of a particle
}}

{{tag
|name = ageSpeed
|type = float
|default = 0.5
|description = How fast the particle ages. Every frame: &lt;code&gt;age += ageSpeed&lt;/code&gt; The particle is deleted at &lt;code&gt;if (age &gt; 1)&lt;/code&gt;
}}

{{tag
|name = speed
|type = float3
|default = &quot;0,0,0&quot;
|description = &lt;code&gt;pos += speed;&lt;/code&gt; How fast and in which vector the particles move.
}}

{{tag
|name = texture
|type = hardcoded
|default = randomly chosen. 
|description = Particles randomly pick one of the smoke textures (bitmaps\smoke) and remain with it until death.
}}



==Examples==

&lt;!-- can't use the following until all games use effects/ rather than gamedata/explosions
{{ExampleRepoLinks
|path = effects/
|entity = CEGs
}}
--&gt;
[http://imolarpg.dyndns.org/trac/balatest/browser/trunk/gamedata/explosions 'Balanced Annihilation' CEGs] (TDF format)

[http://code.google.com/p/conflictterra/source/browse/#svn%2Fgames%2FCT%2Fgamedata%2Fexplosions 'Conflict Terra' CEGs]

[https://github.com/EvolutionRTS/Evolution-RTS/tree/master/Gamedata/explosions 'Evolution RTS' CEGs]

[https://github.com/imperialwinter/swiw.sdd/tree/master/gamedata/explosions 'Imperial Winter' CEGs] (TDF format)

[http://code.google.com/p/journeywar/source/browse/#svn%2Ftrunk%2Fgamedata%2Fexplosions 'Journeywar' CEGs]

[http://sourceforge.net/p/mwspring/code/HEAD/tree/effects/ 'MechCommander: Legacy' CEGs] (TDF format)

[https://github.com/spring1944/spring1944/tree/master/effects 'Spring: 1944' CEGs] (TDF format)

[http://code.google.com/p/springtutorialgame/source/browse/#svn%2Ftrunk%2FSpringTutorialGame.sdd%2FGamedata%2Fexplosions 'Spring Tutorial Game' CEGs]

[http://code.google.com/p/xta-springrts/source/browse/#svn%2Ftrunk%2Fgamedata%2Fexplosions 'XTA' CEGs] (TDF format)

[https://github.com/ZeroK-RTS/Zero-K/tree/master/effects 'ZeroK' CEGs]

[[Category:CEG]]</text>
      <sha1>4ctvrajfec21vaxvwhxqqf7yoggr4zl</sha1>
    </revision>
  </page>
  <page>
    <title>CEG:Main</title>
    <ns>0</ns>
    <id>2605</id>
    <revision>
      <id>28824</id>
      <parentid>28820</parentid>
      <timestamp>2014-10-05T18:39:03Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>remove 'what can call' section and update link to CEG:Calls</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="857">= CEG Main Page =
== Introduction ==
CEG stands for Custom Explosion Generator, a scripting language for creating graphical effects. These are most commonly used to draw a graphical effect when a weapon hits a target, but can also be called from COB and Lua.

== Files Needed ==
The actual CEGs are defined in .tdf or .lua files in &lt;code&gt;effects/&lt;/code&gt; (preferred) or &lt;code&gt;gamedata/explosions/&lt;/code&gt; (old standard). You will also need a [[resources.lua]] in &lt;code&gt;gamedata/&lt;/code&gt; to define textures, as well as the actual textures in &lt;code&gt;bitmaps/&lt;/code&gt;. Finally, you need the weapon, unit, COB, and or Lua files that you are calling the CEGs from.

==Further information==
For details on CEG definition files, how to call a CEG and more advanced features see:
*[[CEG:Defs]]
*[[CEG:Calls]]
*[[CEG:Operators]] 
*[[CEG:Miscellaneous]] 

[[Category:CEG]]</text>
      <sha1>r0yz89ynlbg2ivdnk387qaf0kb29u6z</sha1>
    </revision>
  </page>
  <page>
    <title>CEG:Miscellaneous</title>
    <ns>0</ns>
    <id>2610</id>
    <revision>
      <id>29114</id>
      <parentid>29113</parentid>
      <timestamp>2015-02-01T13:53:31Z</timestamp>
      <contributor>
        <username>Kloot</username>
        <id>2373</id>
      </contributor>
      <minor/>
      <comment>Reverted edits by [[Special:Contributions/8611|8611]] ([[User talk:8611|talk]]) to last revision by [[User:Flozi|Flozi]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2464">= CEG Miscellaneous =

A collection of miscellaneous things to consider when making a CEG.

== Blending ==

CEGs use the blending mode &lt;code&gt;GL_ONE, GL_ONE_MINUS_SRC_ALPHA&lt;/code&gt;. This is in contrast to the default &lt;code&gt;GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA&lt;/code&gt;. This means that the alpha determines how much of whatever is behind the particle will show through, but doesn't affect how the particle itself looks. If you want default blending, you'll have to scale the color components by the alpha by hand if the class you're using doesn't do it for you (most classes don't). Note that an alpha of 0 will cause the CEG not to be displayed at all. 

== Z-Fighting ==

A related problem is Z-fighting. If you have several high-alpha particles moving through each other, you may get an undesirable flickering effect as one particle is drawn at first, then the other. To solve this, reduce the alpha.

== Randomness ==

Always put a little randomness in your CEGs. CEGs are more interesting if they happen a little differently every time, especially if your CEG gets called more than once at the same time on the same screen.

== Realism ==

While it's important to make sure a CEG doesn't look completely implausible, don't get too hung up on realism. In almost any RTS, concessions are made for gameplay at the cost of a bit of realism; likewise with CEGs, you'll need to make some concessions for looking cool.

== Gameplay ==

As well as looking cool, CEGs are an important part of gameplay. They let players know when things are happening and where they are happening. CEGs should give clues as to what is happening in the mechanics of the game. A powerful weapon should have a powerful-looking CEG; a blast that affects a large area should have a large CEG. Use the alwaysVisisble and useAirLos tags where appropriate. Hopefully we will eventually have a radius operator so CEGs can automatically be scaled to the radius of the weapon.

At the same time, you don't want to obstruct players' views of the game. A CEG should look cool for a moment, and then get out of the way.

== Performance ==

Bascially, try not to use more particles than necessary, and try not to use them longer than necessary. Be aware of how often you expect your CEG to run; if it's a commander death or a nuclear missile, you can afford to spend some extra particles, but if it's a machine gun or a cegtag (which is called every frame), you'll want to keep it down.

[[Category:CEG]]</text>
      <sha1>ksy50zs10cyjfsj5fk7u2881l3ezxd3</sha1>
    </revision>
  </page>
  <page>
    <title>CEG:Operators</title>
    <ns>0</ns>
    <id>2606</id>
    <revision>
      <id>28813</id>
      <parentid>28812</parentid>
      <timestamp>2014-10-05T17:41:52Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>Flozi moved page [[CEG-Operators]] to [[CEG:Operators]]: consistency</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3765">= CEG Operators =

== Source == 
The engine source code which implements the CEG operators is viewable here:

* {{sourcelink|file=rts/Sim/Projectiles/ExplosionGenerator.cpp#L600}}

== Introduction ==
You are not limited to using fixed numbers in CEGs for positions, speeds, and so forth. Instead, you can use operators to change the CEG based on a variety of things.

== Syntax ==
Operators are read left to right. The operand is always to the right of the operator. Spaces are ignored, except to separate numbers. A number with no operator defaults to addition.

== The Buffer ==
CEG provides you with a buffer in which you can store numbers using the yank ('y') operator. This buffer can store 16 values, numbered 0 to 15.

== Operators ==
These are listed in the format &quot;Operator Name (operator)&quot;.

=== Index ('i') ===
Multiplies the operand by the current count index. This index starts at 0 and increments every time the spawn is run, until the spawn has run a number of times equal to its count.

Suggested use: Spawning things in a line.

=== Rand ('r') ===
Multiplies the operand by a random float between 0 and 1.

Suggested use: Keeping explosions from looking too &quot;perfect&quot;, making explosions look different every time.

=== Damage ('d') ===
Multiplies the operand by damage.

'''CEG_DAMAGE:''' In a COB script, you can do &lt;code&gt;SET CEG_DAMAGE [value]&lt;/code&gt;. Any &lt;code&gt;emit-sfx&lt;/code&gt; instructions will then use that value for the &quot;damage&quot; (use the 'd' operator to access this value).

=== Sawtooth ('m') ===
Calculates the floating-point remainder of the operand.

=== Discrete ('k') ===
Calculates the floor of the operand.

=== Sine ('s') ===
Calculates the sine of the operand.

=== Yank ('y') ===
Saves the running result into buffer[operand], and resets the running result to zero.

=== Multiply ('x') ===
Multiplies the running result by buffer[operand].

=== Add Buffer ('a') ===
Adds buffer[operand] to the running result.

=== Power ('p') ===
Raises the running result to the operandth power

=== Power Buffer ('q') ===
Raises the running result to the buffer[operand]th power.

=== Add (default) ===
Adds the operand to the running result. This operator is used if no other operator is given.

== Examples ==
=== Using 'r' ===

This is an example of a script that makes 10 smoke particles:
&lt;code&gt;&lt;pre&gt;Heavy_Laser_Expl = {
  smoke = {
    water = true,
    ground = true,
    count = 10,
    properties = {
      -- age increase per frame, when age &gt;= 1  the particle is destroyed
      ageSpeed = 0.04,
      size = 40,
      sizeGrowth = -2,
      pos = [[-30 r60, r30, -30 r60]],
      speed = [[0.75 r-1.5, 1.7 r1.6, 0.75 r-1.5]],
    },
  },
}&lt;/pre&gt;&lt;/code&gt;

For example in this snippet: 
&lt;code&gt;&lt;nowiki&gt;pos = [[-30 r60, r30, -30 r60]]&lt;/nowiki&gt;&lt;/code&gt;

The x coordinate (specified with &lt;code&gt;-30 r60&lt;/code&gt;) will be: 
&lt;code&gt;x = -30 + (Random value between 0 and 60)&lt;/code&gt;

=== Using 'i' ===
Here is an example that uses the index (i) command in the properties: 
&lt;code&gt;&lt;pre&gt;heatcloud = {
  ground = true,
  count = 10,
  properties = {
    pos = [[0, i20, 0]],
    heat = 10,
    maxheat = 10,
    heatFalloff = 1,
    size = 30,
  },
}&lt;/pre&gt;&lt;/code&gt;

This script creates a tower of heatcloud projectile. The first projectile gets &lt;code&gt;y=0&lt;/code&gt;, the second &lt;code&gt;y=20&lt;/code&gt;, &lt;code&gt;y=40&lt;/code&gt;, &lt;code&gt;y=60&lt;/code&gt;, .. and finally &lt;code&gt;y=180&lt;/code&gt;.

=== Using 'x' and 'y' ===

&lt;code&gt;&lt;pre&gt;
i0.03125y0 -0.2x0x0
&lt;/pre&gt;&lt;/code&gt;

This multiplies the index by &lt;code&gt;0.03125&lt;/code&gt; and saves it to &lt;code&gt;buffer[0]&lt;/code&gt;. It then multiplies &lt;code&gt;-0.2&lt;/code&gt; by &lt;code&gt;buffer[0]&lt;/code&gt; twice. The result is then &lt;code&gt;-0.2 (i * 0.03125)^2&lt;/code&gt;. This type of thing is useful for making a series of particles follow a curved path.
[[Category:CEG]]</text>
      <sha1>7s6t3o51rbnc2erji7rgblyd65djve6</sha1>
    </revision>
  </page>
  <page>
    <title>CEG For Units</title>
    <ns>0</ns>
    <id>2459</id>
    <revision>
      <id>28805</id>
      <parentid>26796</parentid>
      <timestamp>2014-10-05T16:59:04Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>tag for delete, covered by CEG-Calls</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1392">{{delete}}
Creating Custom Explosion Generators (CEGs) and using them with Units in Spring, via COB, is quite easy.  This tutorial will show you how to do so.

== Step 1:  Link your CEGs to your Unit. ==


CEGs need to be linked to a Unit's data to be generated via COB.

To do so, create a section in your Unit's TDF like this:
&lt;p&gt;
&lt;b&gt;[SFXTypes]&lt;/b&gt;&lt;br&gt;
&lt;b&gt;{&lt;/b&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;ExplosionGenerator0=custom:MyNiftyExplosionGenerator;&lt;br&gt;
&lt;b&gt;}&lt;/b&gt;&lt;/p&gt;
This tells Spring that the CEG called '''MyNiftyExplosionGenerator''' is attached to this Unit, and allows COB to call it.  If you have more than one, then the next one uses a 1 instead of a 0, e.g. '''ExplosionGenerator1=custom:MyNiftyExplosionGenerator;'''  ... and so forth.

== Step 2:  Calling the CEG via COB ==

The easiest way to do this is to use a #DEFINE statement, using the appropriate number for the type of Explosion you want to invoke.  So, what I typically do is put in lines at the start of the COB, like this:

'''#DEFINE MyNiftyExplosionGenerator 1024+0'''

This means that, wherever in the COB I call MyNiftyExplosionGenerator, Spring will call the appropriate CEG.  

To actually call the CEG, just use the following:

'''emit-sfx MyNiftyExplosionGenerator from PieceName;'''

It's just that simple :-)  Just make darn sure you've gotten everything right before you use this, or you will cause to Spring to crash!</text>
      <sha1>hs4n0fgouemu5qfo6dmybd7wgkfufdb</sha1>
    </revision>
  </page>
  <page>
    <title>COB Animation</title>
    <ns>0</ns>
    <id>2740</id>
    <redirect title="Animation-CobAnimation" />
    <revision>
      <id>21579</id>
      <parentid>17269</parentid>
      <timestamp>2011-04-02T18:12:50Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>Redirected page to [[Animation-CobAnimation]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="36">#REDIRECT [[Animation-CobAnimation]]</text>
      <sha1>588lb2zhvuxoznho1hfrtt8id45c2is</sha1>
    </revision>
  </page>
  <page>
    <title>COB Callins</title>
    <ns>0</ns>
    <id>2741</id>
    <redirect title="Animation-CobCallins" />
    <revision>
      <id>21580</id>
      <parentid>17271</parentid>
      <timestamp>2011-04-02T18:13:01Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>Redirected page to [[Animation-CobCallins]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="34">#REDIRECT [[Animation-CobCallins]]</text>
      <sha1>1mgmhl8igccsjqdyap7zhb5kfvb73fc</sha1>
    </revision>
  </page>
  <page>
    <title>COB Constants</title>
    <ns>0</ns>
    <id>2742</id>
    <redirect title="Animation-CobConstants" />
    <revision>
      <id>21576</id>
      <parentid>17273</parentid>
      <timestamp>2011-04-02T18:10:28Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>Redirected page to [[Animation-CobConstants]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="36">#REDIRECT [[Animation-CobConstants]]</text>
      <sha1>t8dnprg9ojg7nlraymkak3t19hbkw4g</sha1>
    </revision>
  </page>
  <page>
    <title>COB HitByWeaponID</title>
    <ns>0</ns>
    <id>2744</id>
    <redirect title="Animation-CobHitByWeaponID" />
    <revision>
      <id>21582</id>
      <parentid>17277</parentid>
      <timestamp>2011-04-02T18:13:28Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>Redirected page to [[Animation-CobHitByWeaponID]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="40">#REDIRECT [[Animation-CobHitByWeaponID]]</text>
      <sha1>1xaeelvqel8oq9jvqltmeahuj6d6shc</sha1>
    </revision>
  </page>
  <page>
    <title>COB Overview</title>
    <ns>0</ns>
    <id>2738</id>
    <redirect title="Animation-CobOverview" />
    <revision>
      <id>21583</id>
      <parentid>17265</parentid>
      <timestamp>2011-04-02T18:13:38Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>Redirected page to [[Animation-CobOverview]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="35">#REDIRECT [[Animation-CobOverview]]</text>
      <sha1>g9s6ce08bl5nd6w4lrkzuzhwgxwksqs</sha1>
    </revision>
  </page>
  <page>
    <title>COB Threads</title>
    <ns>0</ns>
    <id>2743</id>
    <redirect title="Animation-CobThreads" />
    <revision>
      <id>21584</id>
      <parentid>17275</parentid>
      <timestamp>2011-04-02T18:13:49Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>Redirected page to [[Animation-CobThreads]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="34">#REDIRECT [[Animation-CobThreads]]</text>
      <sha1>2ncy3yocvl7g2oeiyqktisew9r8b7fz</sha1>
    </revision>
  </page>
  <page>
    <title>CSAI Build Instructions</title>
    <ns>0</ns>
    <id>1856</id>
    <revision>
      <id>26850</id>
      <parentid>19012</parentid>
      <timestamp>2013-03-23T16:45:27Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>AI -&gt; AI Dev</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2038">== Building CSAI ==

The CSAI zipfile comes with the binaries prebuilt.  You might wish to build CSAI if:
*you want to modify/extend the C# AI
*you want to extend the C  /C# AI interface

=== You will need ===

If you wish to modify the C# AI, ie the CSAI directory, you will need:
*Framework .Net 1.1 runtime (only need runtime, not SDK)
*nant
*Spring
*Contents of CSharpAI.zip

If you want to extend the C  /C# interface, ie change the files in the CSAILoader or CSAIInterfaces directory, you will need in addition:
*Visual C   2003 compiler
*Microsoft Platform SDK
*Spring sourcecode

nant will automatically detect if you changed files in the CSAILoader or CSAIInterfaces directory, so as long as you dont change files in these directories it wont ask you for the C   compiler.

=== Build instructions, C# AI only ===

Using nant:

*open a cmd prompt and go to the unzipped CSharpAI directory
*open AllCSAI.build file with a text editor, and specify the locations of:
**spring (directory containing spring.exe)
*add nant to PATH
*type &quot;nant&quot; and press return

The C# AI dll should build and be copied into the appropriate place in the Spring application directory tree.

Alternatively, using Visual C# 2003:

*Create a new project of type &quot;class library&quot; called &quot;CSAI&quot;
*Add CSAIInterfaces\CSAIInterfaces.dll as a Reference
*Add the .cs files in the CSAI to the project
*Select &quot;Build&quot;
*Manually copy the CSAI.dll and CSAI.pdb files from the project's Debug directory into the AI\CSAI subdirectory of the spring application directory

=== Build instructions, C# AI and C# AI Interface ===

*open the msvcvars.bat cmd prompt and go to the unzipped CSharpAI directory
*open AllCSAI.build file with a text editor, and specify the locations of:
**spring (directory containing spring.exe)
**spring sourcecode 
**Microsoft Platform SDK
*add nant to PATH
*type &quot;nant&quot; and press return

With everything configured ok, the dlls should build and be copied into the appropriate place in the Spring application directory tree.
[[Category: AI Dev]]</text>
      <sha1>5zd05eio5ezpz1r894ew491i4tp2jru</sha1>
    </revision>
  </page>
  <page>
    <title>CSpherePartSpawner</title>
    <ns>0</ns>
    <id>2482</id>
    <revision>
      <id>28798</id>
      <parentid>22417</parentid>
      <timestamp>2014-10-05T16:34:22Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>tag for delete</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="413">{{delete}}
== Introduction ==

Makes a simple, one-color expanding sphere.

== Source ==

{{sourcelink|file=rts/Sim/Projectiles/Unsynced/SpherePartProjectile.cpp}}

== Suggested Use ==

This is good for concussion effects.

== Parameters ==

These are pretty intuitive. Unfortunately there is no way to set the starting radius at time of writing.

=== alpha ===

=== ttl ===

=== expansionSpeed ===

=== color ===</text>
      <sha1>a1hsopao818amh0ibsbruqx7a24nae2</sha1>
    </revision>
  </page>
  <page>
    <title>CZTA</title>
    <ns>0</ns>
    <id>1027</id>
    <revision>
      <id>25273</id>
      <parentid>21269</parentid>
      <timestamp>2012-10-29T12:57:41Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>remove wanted link</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1002">{{Historical}}
===CZTA===

CZTA Progress Log (Very much of date...)
[[CZTA_progresslog]]

===Psychasi===
[[CZTA_psychasi]]

===Galactic Human Empire===
[[CZTA_ghe]]

===Tessarin===
[[CZTA_tessarin]]

===Civillian Rights Union===

===Races/Factions Summary===
While they have good intentions, the CRU aren't really helping anyone at all.

The Psychasi have a vague idea of whats going on, but are on the wrong side of the galaxy, and fighting to keep the GHE out of their territory. They're also fighting the CRU due to a massive diplomatic screw-up.

The GHE are fighting on all fronts in a rather doomed attempt to stave off collapse

The Altair have simply gone &quot;Oh look, a gaint inter-galactic war! Lets joint in!&quot;

The Tessarin want the galaxy and its resources, and to expand their empire

===Storyline===
WARNING: PLOT OR ENDING DETAILS ON OTHER SIDE OF LINK!
[[CZTA_storyline]]

===Planned Tactics / Balance ideas===
[[CZTA_plannedtactics]]

Back to [[Mods]]

[[Category:Mods]]
{{Category:Mods}}</text>
      <sha1>0b4q75ilygo50v8vqj8wc7m1xkxk7zj</sha1>
    </revision>
  </page>
  <page>
    <title>CZTA ghe</title>
    <ns>0</ns>
    <id>1242</id>
    <revision>
      <id>18771</id>
      <parentid>11069</parentid>
      <timestamp>2010-03-13T13:22:19Z</timestamp>
      <contributor>
        <username>Koshi</username>
        <id>2371</id>
      </contributor>
      <comment>made historical</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3325">{{Historical}}
===Galactic Human Empire===
The Galactic Human Empire is on the verge of collapse. Hard pressed to keep the Tessarin at bay the GHE Goverment was forced to introduce conscription. With most of their resources expent on the war the ordinary people are running out of food. After making the stark discovery that the fertile Western sector has already been claimed by the Psychasi the GHE has no way of gathering large scale resources. Now some have started up a resistance movement known as the CRU (Civilian Rights Union) and they are rapidly gaining support, including that of the Psychasi. The survival of a very large proportion of humanity hangs on a thread, and humanity itself isn't helping very much.

GHE weapons are the least powerful of the three playable races but still pack quite a punch. Their tanks are slower than those of other factions but are the most functional - least accident prone and thus least energy/metal intensive. The conscripts aren't particularly brilliant (mostly untrained - slower and innacurate), but they're cheap. Most other units are well trained and are thus effective fighters. The only real problems with the GHE is to do with resources - they hardly have any. Their units aren't too resource intensive on the field, but they cost to build, and energy/metal production is quite bad. They do, however, have good reclaim abilities and (If I can wangle it so that they can only capture resource buildings) can capture other team's resource structures. Whilst the GHE army is quite big, its fighting a war on all sides and within - the army has sustained heavy losses and is stretched thin. Thus, with the exception of conscripted units, GHE units will take longer to build

Conscripts cost a bit less than regulars and have much shorter build times, but to not have access to specialist equipment (they don't know how to use it) and, being poorly trained, are slower (infantry are unfit, vehicle drivers don't really know how to drive their vehicles properly) and their weapons are less accurate. Their LOS is shorter too (they don't know what to look for) and the health is reduced slightly (easier targets). They are built from their own special barrack facilities

Regulars are mostly whats left of the GHE pre-invasion army. They cost a bit more than conscripts, and are much rarer (longer buildtime), but they are far, far better troops. They have access to specialist equipment (Artillery, Snipers, Radars, Aircraft, several Tanks and most buildings are considered 'Regular'), a slight health boost (harder targets to hit), have longer ranges and LOS (do know to look for) and are faster and more accurate (fitter, know how best to use their vehicles)

Units

M104 Engineering Vehicle
* Ore Mine
* Powerplant
* Solar Cell
* Command Centre
** M105B Defensive Engineering Vehicle
*** Tank Traps
*** Barbed Wire (NS)
*** Barbed Wire (EW)
*** Sandbags (NS)
*** Sandbags (EW)
** M106H Infantry Engineering Vehicle
**** Conscript Centre
***** Conscript (Carbine)
***** Conscript (MG-67)
***** Conscript (RKT-114)
**** Regular Infantry Barracks
***** Infantry (Carbine)
***** Infantry (MG-67)
***** Infantry (Sniper)
***** Infantry (RKT-114)
** M107D Airial Engineering Vehicle
*** Helipad
*** Radar Post
*** Repair And Rearm Pad
*** B32 Flak Emplacement

[[category:CZTA]]</text>
      <sha1>ilyecqyb7sradh82brgbzi6w4t0jj73</sha1>
    </revision>
  </page>
  <page>
    <title>CZTA plannedtactics</title>
    <ns>0</ns>
    <id>1246</id>
    <revision>
      <id>18772</id>
      <parentid>11073</parentid>
      <timestamp>2010-03-13T13:22:33Z</timestamp>
      <contributor>
        <username>Koshi</username>
        <id>2371</id>
      </contributor>
      <comment>made historical</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="568">{{Historical}}
===GHE===

ADVANTAGES
* Good defenses
* Conscripts are cheaper, and build quick
* Regulars are good fighters
* Can capture enemy resource buildings
* Powerful helicopters

DISADVANTAGES
* Tessarin have specialist anti-defense units
* Conscripts are crap in combat
* Regulars take a while to build
* Helicopters can be taken down easily by enemy AA and aircraft
* Forces split between conscripts and regulars
* Crap economy
* Least powerful weaponry
* Least mobile tanks (the Psychasi tanks hover and the Tessarin tanks are amphibious)

[[category:CZTA]]</text>
      <sha1>2gndrp7qzpfgw97v7rhk8no6xm5lhtx</sha1>
    </revision>
  </page>
  <page>
    <title>CZTA progresslog</title>
    <ns>0</ns>
    <id>1240</id>
    <revision>
      <id>18773</id>
      <parentid>11067</parentid>
      <timestamp>2010-03-13T13:22:52Z</timestamp>
      <contributor>
        <username>Koshi</username>
        <id>2371</id>
      </contributor>
      <comment>made historical</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1423">{{Historical}}
14/12/05

I may have forgotten to update this page...

Since last update:
* Modelled Psychasi Light Infantry Resupplier
* Modelled (and partly 3do'd - the bugger's big) the GHE Titan Super Heavy Tank
* Found the missing GHE Battleship and Cruiser models
* Got the Thunderswarm ingame (I'm also going to rename it)
* Lots of other stuff that I've forgotten

24/11/05

Not much really.

Today:
* Modelled Psychasi Hoverbomber Chassis
* Finally found the missing improved Psychasi infantry model

23/11/05

From now on, ALL CZTA related progress, including concept art and newly ingame units, will be included here.

Today:
* Remodelling of the GHE AFVs begun off the new concept art
** GHE Med Tank (Now the M302) Remodelled. It looks fecking ace
*** 3do'd it
** Edited the Heavy Tank (Now the M23A) and the Light tank (Now the M11H / M11AP)
* Tech trees fiddled with some more
* Basic Tessarin Tech Tree created
* Tessarin unit concept art drawn

22/11/05

By the way, how do you all want this released? In parts? ie, first (full - ie, none bugfix) release: tech 1 units, 2nd release adding tech 2 units etc etc

21/11/05

Large Editing Spree! Whooo!!!

Added (adding rather) unit list with notes on how complete the unit it, and its main purpose

I've also punted out the CRU, as I can't think of what to do with it. They'll still be in the plot, just not playable ingame (missions maybe?)

[[category:CZTA]]</text>
      <sha1>512hacc84rhimi5b255z6gdka3py302</sha1>
    </revision>
  </page>
  <page>
    <title>CZTA psychasi</title>
    <ns>0</ns>
    <id>1241</id>
    <revision>
      <id>13399</id>
      <parentid>11068</parentid>
      <timestamp>2007-11-12T07:58:46Z</timestamp>
      <contributor>
        <username>Heavylancer</username>
        <id>2341</id>
      </contributor>
      <comment>Killed off the spam in this page.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4410">===Psychasi===

A mix of humans from an abandoned GHE colony and alien refugees from several races (fleeing from the Tessarin no less) that have been recently discovered when the GHE expanded to find resources. Whatever simpathies the Psychasi had with the CRU they have lost after the CRU took to raiding Psychasi supply ships for foodstuffs and equipment. They have a vague idea of the GHE-Tessarin situation from the alien refugee's accounts of their experiences, but are on the wrong side of the galaxy to be able to do anything.

Psychasi weapons of war are powerful but resource heavy. Their vehicles have better mobility (hovercraft) but have lighter armour to help keep them off the ground. Because they have the resource-rich area of space, the Psychasi economy is quite effecient (good power and ore income), and whilst the Psychasi are fighting fewer conflicts their standing army is somewhat smaller (slightly longer buildtimes than the norm)

Psychasi infantry units, being well equipped, can generally hold their own against  ground forces of equal size, but then, life's hardly that fair in the CZTA universe - the Psychasi are often outnumbered, and vs the Tessarin, outgunned too. However they are the most mobile and have the best economy. Just keep the tanks on the move...

RCon Lander - ingame, bug fixing
* Ore mine - ingame, bug fixing
* Power Station - 3do'd, scripted
* Solar Cell - 3do'd, scripted
* Main Headquarters - modelled
** RCon Medium Builder
*** Infantry Training Centre - ingame, bug fixing
**** Combat Engineer
***** Sainilae Barracks
****** MEAT Trooper (Plasma Rifle)
****** MEAT Trooper (Demolitions)
****** MEAT Trooper (PML)
****** SIC Guard Infantry (Plasma Rifle)
****** SIC Guard Infantry (Paralyser)
***** Light Vehicle Centre - ingame, bug fixing
****** APC - 3do'd
****** Deniat - Radar Jammer, ingame
****** Doppler - Radar Vehicle, 3do'd
****** ISV M42 - Infantry Support, MGs
****** ISV M11 - Infantry Support Vehicle, RKTs
****** Sponspot - Scout. Ingame, bug fixing
****** Thundercore Engineering Vehicle
******* Heavy Transportation Centre
******** Platoon Carrier
******** Tank Transporter
******* Artillery Centre
******** Palsa - modelled
******** Thunderstrike - modelled
******** Thunderbeam - modelled
******** Inferno Cannon - 3do'd
******** Artillery Resupplier / Transporter
******** Thunderbarrage
******* Tank Construction Facility
******** NTL Flak Unit - 3do'd
******** Thunderclap - ingame, remodelling
******** Thunderking - modelled
******** Thunderhunter - modelled
******** Thunderflash
******** Thundertan
******** Thunderswarm - modelled
******* AT Cannon Emplacement
******* Ore mine - ingame, bug fixing
******* Power Station - 3do'd, scripted
******* Solar Cell - 3do'd, scripted
******* Concrete Bunker
***** Ore mine - ingame, bug fixing
***** Power Station - 3do'd, scripted
***** Solar Cell - 3do'd, scripted
**** Drop Troop Engineer
***** Drop Troop LZ
****** Drop Trooper (Carbine) - modelled
****** Drop Trooper (PML)
****** Drop Trooper (Gren Launcher)
****** Drop Trooper (Repeater)
****** Drop Trooper (Mortar)
****** Drop Trooper (Sniper)
****** Drop Trooper (Beamlaser)
***** Airpad
****** Thunderlander - transports 10, medium speed, MG
****** Hoverpod - transports 1, quite fast
****** GA M122 Fighter-Bomber
****** AA M135 Fighter
****** AS M111 RCFighter
****** AT M662 Hoverbomber - chassis modelled
****** AP M142 Hoverbomber - chassis modelled
****** Thundercarrier - heavy tank dropship. carries 5 tanks, med speed
***** Ore mine - ingame, bug fixing
***** Power Station - 3do'd, scripted
***** Solar Cell - 3do'd, scripted
**** Combat Infantry (Blast-Rifle) - remodelled
**** Combat Infantry (Repeater) - ingame, remodelling
**** Combat Infantry (BML)
**** Combat Infantry (Carbine)
**** Combat Infantry (Grenade Launcher)
**** Combat Infantry (25 Mortar)
**** Combat Infantry (40 Mortar)
*** Ammunition Distribution Centre
**** Light Infantry Resupplier
**** Heavy Weapons Resupplier
**** Vehicle Resupplier
**** Artillery Resupplier / Transporter
*** Ore mine - ingame, bug fixing
*** Power Station - 3do'd, scripted
*** Solar Cell - 3do'd, scripted
*** Main Headquarters
**** See Main HQ tree
** RCon Defense Builder
*** Tank Traps - modelled
*** Wire (EW)
*** Wire (NS)
*** Sandbags (EW) - remodelling
*** Sandbags (NS) - remodelling
*** Sandbag Bunker
*** Repeater Post - 3do'd, scripted

[[category:CZTA]]</text>
      <sha1>8nbfcnr127c5owpj4b4zeajng69y0xt</sha1>
    </revision>
  </page>
  <page>
    <title>CZTA storyline</title>
    <ns>0</ns>
    <id>1245</id>
    <revision>
      <id>18774</id>
      <parentid>11072</parentid>
      <timestamp>2010-03-13T13:23:08Z</timestamp>
      <contributor>
        <username>Koshi</username>
        <id>2371</id>
      </contributor>
      <comment>made historical</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4516">{{Historical}}
NOTE: I haven't had time to finish writing all this

'''These events occur prior to the period the game is set in'''

'''All events prior to 5112 are taken from the databanks aboard the 'Calhudri'. All other data sources have been lost'''

'''2340'''
China becomes democratic. Its also very overcrowded on Earth

'''2412'''
Moon Colony set up by the USA. However, is very expensive to move people back and forth, and so has very little effect on overpopulation

'''3011'''
First man on mars

'''3214'''
Mars colony set up by the USA. Same downfalls as the Moon Colony.

'''3215'''
Mars colony wiped out when an out-of-control repair vehicle smashes into the side of it and ruptures the colony wall, releasing all the air and killing the occupants. Moon Colony disbanded.

'''3998'''
The British Space Program completes its plans for a Colony Center as a method of reducing overpopulation, but find they cannot afford the construction. China offers to buy the plans. Britain sells them the plans. The USA becomes jealous as, with China and Japan constantly inventing technologies every month, they are becoming more powerful than the USA. Especially after the Mars Colony Incident

'''4011'''
The Colony Center 'Calhudri' - a joint venture by the Russians, Japan and China - is sent mysteriously off course and leaves colonised space.
Tensions flare as an idependant Austrailian investigation uncovers hard evidence of US involvement. The 'Calhudri' loses radio contact with its Chinese communication satellite. Now those aboard the 'Calhudri' do not know whats happening on Earth, and with all data prior to 5112 lost, no-one knows exactly what happens:

All that is known is that, when it was rediscovered by the GHE, Earth's atmosphere had deteriorated completely and all life was destroyed. All electronic data was lost due to electro-magnetic interference. The only ones to survive were those aboard the 'Calhudri', and those on a second Colony Center called 'New Horizons', built primarily by British and Chinese engineers (The British had designed it and the Chinese had experience with building the first). They recieved funding and passengers from all around the world (except from the USA), and set off somewhere between 4041 and 4151. However, it crashed while attempting to land on a colonisable planet, and all data aboard it was lost. Most passengers survived, and the new planet was named Terth, (though its commonly referred to as 'Earth 2'

'''4023'''
The population of the 'Calhudri' has since risen from the original 1210 to 3104. Fortunately it was designed to hold 5,000 - the first launch was mainly testing its colonisation capabilities, and also to find somewhere to colonise
The control of the 'Calhudri' navigation systems are regained (it was sent off-course by altering it's course and encrypting most systems). 'Calhudri' lands perfectly on planet L-Lyra. Groundwork for a new city in place.

'''5112'''
Known history recommences. Humanity is left in ruins. On Terth, the passengers of 'New Horizons' have more or less gotten to the technological level of the early second millenium (that of the year 2000-3000). L-Liyra and another planet, Shishira have been colonised by the 'Calhudri' passengers.

'''6217'''
The passengers of the 'New Horizons' finish building a new one. It launches at the very end of the year

'''6218'''
'New Horizons' passengers have colonised two planets. The Psychasi have colonised seven.

'''6967'''
'New Horizons' passengers have colonised 69 planets. The Psychasi have colonised 56 - having found the are rich in resources, they don't need to hunt for it.

'''10,000'''
The GHE have colonised 215 planets. The Psychasi have colonised 106.

'''20,000'''
The GHE have 701 planets, the Psychasi, 573

'''29,231'''
The GHE colonise their 1000th planet

'''30,000'''
The GHE have 1132 planets, the Psychasi, 985

'''30,412'''
The Psychasi colonise their 1000th planet

'''May 32351'''
GHE scanning probe 'Calanura' is launched. It manages to slip past Psychasi border defenses. It detects high ore concentrations in the Western sector of the galaxy

'''July 32351'''
GHE exploration probes are sent to the Western sector to find colonisable plants. These ''don't'' pass through the Psychasi border defenses and are all collected. They never return. The Psychasi commence investigations into where they come from

'''November 32351'''
First contact. Tessarin forces wipe out colonies on three GHE planets. GHE-Tessarin war begins

[[category:CZTA]]</text>
      <sha1>ckh7h3j8e13z65i12rjapd4de2i5az9</sha1>
    </revision>
  </page>
  <page>
    <title>CZTA tessarin</title>
    <ns>0</ns>
    <id>1244</id>
    <revision>
      <id>18775</id>
      <parentid>11071</parentid>
      <timestamp>2010-03-13T13:23:25Z</timestamp>
      <contributor>
        <username>Koshi</username>
        <id>2371</id>
      </contributor>
      <comment>made historical</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1125">{{Historical}}
===Tessarin===
Another alien race. They move from planet to planet, galaxy to galaxy, constantly expanding their empire. Now they've come to the galaxy. Currently cutting a swathe through the GHE. Though GHE reinforcements are on their way (assuming they don't get diverted to another conflict, again).

There's more than one way to win a war...

Tessarin forces employ a mix of rather crap swarming units made of assimilated humans and some robotic constructions that were made quickly on planetfall, and the main army, which, unlike the GHE's Conscripts/Regulars system, make the swarming units obsolete over time.

The Tessarin can also capture enemy units and ressurect dead units.

swarm units build quick and aren't too costly, but are still bad for their cost.
the main army units are good for their cost. Their buildtimes are normal, but they cost a fair bit. In the later game the the Tessarin economy will be able to support main-army units far better, and swarm units should be phased out of combat.

The Tessarin unit list is still under construction

Y a d'la joie &lt;-- Don't ask

[[category:CZTA]]</text>
      <sha1>laekxnsx62foa5xqflanp1y016urjod</sha1>
    </revision>
  </page>
  <page>
    <title>ChanServ</title>
    <ns>0</ns>
    <id>3561</id>
    <revision>
      <id>30920</id>
      <parentid>30919</parentid>
      <timestamp>2019-02-12T21:40:42Z</timestamp>
      <contributor>
        <username>Silentwings</username>
        <id>2883</id>
      </contributor>
      <minor/>
      <comment>/* Channel forwarding */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3793">ChanServ is the lobby bot of [[uberserver]] for managing channels in the springrts.com lobby. It is intended that one day ChanServ will be replaced with a GUI, but we didn't get there yet.

==Interacting with ChanServ==
ChanServ commands are prefixed by a colon '''&lt;code&gt;:&lt;/code&gt;'''. They can be given in two forms:
* By PM to the ChanServ bot, in the form e.g. '''&lt;code&gt;:topic newbies Welcome to #newbies!&lt;/code&gt;'''
* Within a channel in which ChanServ is present, in the form e.g. '''&lt;code&gt;:topic Welcome to #newbies!&lt;/code&gt;'''
In the second form, the channel name is omitted. Note that in this first form the channel name 'newbies' is &lt;i&gt;not&lt;/i&gt; preceded by a # character.

ChanServ is present in all registered channels, and adds extra functionality to these channels as documented below. Contact a lobbyserver moderator to register a channel.

==Commands==
All expressed as though sent in PM to ChanServ; when used inside a channel the chanName arg is omitted. All commands are callable by users with channel operator/founder or lobby moderator status, unless specified otherwise.

===Registering channels and operators===
These commands are accessible only to lobby moderators and the channel founder.
*'''&lt;code&gt;:register chanName chanFounder&lt;/code&gt;'''&lt;br&gt; Registers a channel. If the final argument is omitted, the callee will be the founder.
*'''&lt;code&gt;:unregister chanName&lt;/code&gt;'''&lt;br&gt; Un-registers a channel.  
*'''&lt;code&gt;:changefounder chanName username&lt;/code&gt;'''&lt;br&gt; Make a user not be a channel operator. 
*'''&lt;code&gt;:op chanName username&lt;/code&gt;'''&lt;br&gt; Make a user into a channel operator. Accessible only to lobbyserver moderators and the channel founder. 
*'''&lt;code&gt;:deop chanName username&lt;/code&gt;'''&lt;br&gt; Make a user not be a channel operator. Accessible only to lobbyserver moderators and the channel founder. 
*'''&lt;code&gt;:history chanName state&lt;/code&gt;'''&lt;br&gt; Turns persistent chat functionality on/off. State should be &quot;on&quot; or &quot;off&quot;.
*'''&lt;code&gt;:antispam chanName state&lt;/code&gt;'''&lt;br&gt; Turns antispam chat functionality on/off. State should be &quot;on&quot; or &quot;off&quot;.
===Managing users===
These commands are accessible to channel operators, as well as lobby moderators and the channel founder.
*'''&lt;code&gt;:topic chanName topic&lt;/code&gt;'''&lt;br&gt;Sets the topic, which is displayed to all users when they join the channel.
*'''&lt;code&gt;:mute chanName target_username duration reason&lt;/code&gt;'''&lt;br&gt; Mutes a user. The duration can be in form e.g. &quot;2d&quot; for two days or &quot;1h&quot; for one hour.
*'''&lt;code&gt;:unmute chanName target_username &lt;/code&gt;'''&lt;br&gt; Unmutes a user.
*'''&lt;code&gt;:listmutes&lt;/code&gt;'''&lt;br&gt; Returns a list of muted users.
*'''&lt;code&gt;:ban chanName target_username duration reason&lt;/code&gt;'''&lt;br&gt; Bans a user.
*'''&lt;code&gt;:unban chanName target_username duration reason&lt;/code&gt;'''&lt;br&gt; Unbans a user.
*'''&lt;code&gt;:listbans&lt;/code&gt;'''&lt;br&gt; Returns a list of banned users.
*'''&lt;code&gt;:kick chanName username&lt;/code&gt;'''&lt;br&gt; Kicks a user.

===Channel forwarding===
These commands are accessible only to lobby moderators.
*'''&lt;code&gt;:forward from_chanName to_chanName&lt;/code&gt;'''&lt;br&gt; Set up forwarding of all operator statuses, mutes and bans, from a channel to a battle. Call this command more than once to forward to more than one battle.
*'''&lt;code&gt;:unforward from_chanName to_chanName&lt;/code&gt;'''&lt;br&gt; Remove forwarding.
*'''&lt;code&gt;:listforwards chanName&lt;/code&gt;'''&lt;br&gt; Returns a list of the locations this channel is forwarding too.

===General info===
These commands can be called by anyone.
*'''&lt;code&gt;:battlename username&lt;/code&gt;'''&lt;br&gt; Returns the name of the channel in use by this user to host their current battle.
*'''&lt;code&gt;:info chanName&lt;/code&gt;'''&lt;br&gt;Displays information about the channel, including the founder and list of operators. 
*'''&lt;code&gt;:help&lt;/code&gt;'''&lt;br&gt;Offers you a link to this page! 

[[Category:Lobby]]</text>
      <sha1>hq1e4nefquj0qzbehy86x7082epmwye</sha1>
    </revision>
  </page>
  <page>
    <title>Changelog</title>
    <ns>0</ns>
    <id>3537</id>
    <revision>
      <id>30788</id>
      <parentid>30208</parentid>
      <timestamp>2018-10-12T18:52:13Z</timestamp>
      <contributor>
        <username>The yak</username>
        <id>2888</id>
      </contributor>
      <comment>replaced outdated changelog with github links</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="250">===Changelog===

;https://github.com/spring/spring/blob/develop/doc/changelog.txt : Documented changes to Spring can be viewed here.

;https://github.com/spring/spring/commits/ : Technical log containing most recent commits.

[[category:Development]]</text>
      <sha1>7x331nrujuq5qp5gmn2mwf24lwtitib</sha1>
    </revision>
  </page>
  <page>
    <title>Chess Mod</title>
    <ns>0</ns>
    <id>1283</id>
    <revision>
      <id>21272</id>
      <parentid>18889</parentid>
      <timestamp>2011-02-24T16:52:12Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="279">{{historical}}
[[Image:ChessMod1.jpg]]

[http://www.springfiles.com/show_file.php?id=1682 Get it at Jobjol]

Author: Benjie (SinbadEV)

Credits: Basically Everyone on the Forums, especially Maelstrom, Foe of TheBees and Ground_Zero

Instructions: It's CHESS!!!

[[Category:Mods]]</text>
      <sha1>iqbotvr046v6jsk2quwz3990be9yezw</sha1>
    </revision>
  </page>
  <page>
    <title>Chili</title>
    <ns>0</ns>
    <id>3115</id>
    <revision>
      <id>31457</id>
      <parentid>30257</parentid>
      <timestamp>2021-02-07T11:32:01Z</timestamp>
      <contributor>
        <username>Beherith</username>
        <id>2441</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5244">[[Main_Page|Wiki]] &lt; {{FULLPAGENAME}}

== Chili UI ==

Chili is Springs very own GUI framework. It's a flexible, class based framework which allows you to create great looking GUIs very quickly. See [[Chili:ScreenShots| Screenshots]].
 
=== Learning Chili ===

* [[Chili:Tutorial| Chili Tutorial]]
* [[Chili:Examples| Examples of Chili widgets]]

Before working with Chili, it is strongly recommended to be familiar with using [[Lua_Scripting| Lua in Spring]], in particular with writing simple widgets.

=== Including Chili ===

* [[Chili:Adding_To_Game|Adding Chili to a game]]
* [[Chili:Hiding_The_Default_GUI|Hiding Springs default GUI]]

== Documentation: Chili Component Hierarchy ==

The Chili framework is object orientated, and each different component is a class. The hierarchy of components, which is documented [https://gajop.github.io/chiliui/index.html here],  is as follows:

 [https://gajop.github.io/chiliui/modules/controls.object.html Object]
 |_ [https://gajop.github.io/chiliui/modules/controls.screen.html Screen]
 |_ [https://gajop.github.io/chiliui/modules/controls.control.html Control]
  |_ [https://gajop.github.io/chiliui/modules/controls.button.html Button]
  |_ [https://gajop.github.io/chiliui/modules/controls.checkbox.html Checkbox]
  |_ [https://gajop.github.io/chiliui/modules/controls.checkbox.html ColorBars]
  |_ [https://gajop.github.io/chiliui/modules/controls.combobox.html ComboBox]
  |_ [https://gajop.github.io/chiliui/modules/controls.editbox.html EditBox]
  |_ [https://gajop.github.io/chiliui/modules/controls.font.html Font]
  |_ [https://gajop.github.io/chiliui/modules/controls.label.html Label]
  |_ [https://gajop.github.io/chiliui/modules/controls.layoutpanel.html LayoutPanel]
    |_ [https://gajop.github.io/chiliui/modules/controls.imagelistview.html ImageListView]
    |_ [https://gajop.github.io/chiliui/modules/controls.grid.html Grid]
    |_ [https://gajop.github.io/chiliui/modules/controls.stackpanel.html StackPanel]
    |_ [https://gajop.github.io/chiliui/modules/controls.tabpanel.html TabPanel]
  |_ [https://gajop.github.io/chiliui/modules/controls.line.html Line]
  |_ [https://gajop.github.io/chiliui/modules/controls.image.html Image]
  |_ [https://gajop.github.io/chiliui/modules/controls.multiprogressbar.html MultiProgressBar]
  |_ [https://gajop.github.io/chiliui/modules/controls.panel.html Panel]
  |_ [https://gajop.github.io/chiliui/modules/controls.progressbar.html ProgressBar]
  |_ [https://gajop.github.io/chiliui/modules/controls.scale.html Scale]
  |_ [https://gajop.github.io/chiliui/modules/controls.scrollpanel.html ScrollPanel]
  |_ [https://gajop.github.io/chiliui/modules/controls.textbox.html TextBox]
  |_ [https://gajop.github.io/chiliui/modules/controls.trackbar.html TrackBar]
  |_ [https://gajop.github.io/chiliui/modules/controls.treeview.html TreeView]
   |_ TreeViewNode
  |_ [https://gajop.github.io/chiliui/modules/controls.window.html Window]

Viewing the diagram as a tree, each component inherits from its parent in the tree. In practice, this means each component has the properties/functionality of its own type, and also of all components found upwards from it in the tree. For example, a Grid has it's own properties, but also has those of a LayoutPanel, Control and Object.

== Skinning Chili ==
Start with your desired &lt;code&gt;skin.lua&lt;/code&gt;.

An example button skin will look like this: 

&lt;syntaxhighlight lang=&quot;lua&quot;&gt;
skin.positive_button = {
  clone     = &quot;window&quot;;

  TileImageBK = &quot;:cl:tech_button_bright_small_bk.png&quot;,
  TileImageFG = &quot;:cl:tech_button_bright_small_fg.png&quot;,

  tiles = {40, 40, 40, 40}, --// tile widths: left,top,right,bottom
  padding = {10, 10, 10, 10},

  backgroundColor = {0.50, 0.50, 0.50, 0.65},
  focusColor  = {0.50, 0.50, 0.50, 0.9},
  borderColor = {0.50, 0.50, 0.50, 0.15},

  DrawControl = DrawButton,
}
&lt;/syntaxhighlight&gt;


* &lt;code&gt;TileImageBK&lt;/code&gt; - This image will be the background of your control. Alpha values indicate transparency, and color values you will be multiplied with &lt;code&gt;backgroundColor&lt;/code&gt;

* &lt;code&gt;TileImageFG&lt;/code&gt; - This image will be the foreground (drawn over background) of your control. Alpha values indicate transparency, and color values you will be multiplied with &lt;code&gt;borderColor&lt;/code&gt;

* &lt;code&gt;tiles&lt;/code&gt; - This image will be the background of your control. Alpha values indicate transparency, and color values you will be multiplied with &lt;code&gt;backgroundColor&lt;/code&gt;

* &lt;code&gt;padding&lt;/code&gt; - This image will be the background of your control. Alpha values indicate transparency, and color values you will be multiplied with &lt;code&gt;backgroundColor&lt;/code&gt;

* &lt;code&gt;backgroundColor&lt;/code&gt; - This image will be the background of your control. Alpha values indicate transparency, and color values you will be multiplied with &lt;code&gt;backgroundColor&lt;/code&gt;

* &lt;code&gt;focusColor&lt;/code&gt; - This image will be the background of your control. Alpha values indicate transparency, and color values you will be multiplied with &lt;code&gt;backgroundColor&lt;/code&gt;

* &lt;code&gt;borderColor&lt;/code&gt; - This image will be the background of your control. Alpha values indicate transparency, and color values you will be multiplied with &lt;code&gt;backgroundColor&lt;/code&gt;




[[Category:Libraries]]</text>
      <sha1>7c0fwczeiw4x4eovr21psoo70uijy5i</sha1>
    </revision>
  </page>
  <page>
    <title>Chili-Classes</title>
    <ns>0</ns>
    <id>3559</id>
    <revision>
      <id>30062</id>
      <parentid>27660</parentid>
      <timestamp>2016-06-12T20:55:41Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>/* Control */ use proper subtitles</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6164">[[Gamedev:Main|Development]] &lt; [[Chili]] &lt; {{FULLPAGENAME}}
{{stub}}
Chili classes are the elements (panels, grids, etc.) that make up the game GUI. The .lua .lua files are stored in the directory &lt;code&gt;LuaUI/Widgets/Chili/controls&lt;/code&gt;. Displayed elements such as window, as distinct from non-control classes (specifically, font objects and the screen) are referred to as '''controls'''.

==Source==
The default Chili classes can be found [https://github.com/jk3064/chiliui/tree/master/chili/controls here].

==Data Types==
Tags may be one of the following data types:
* &lt;code&gt;number&lt;/code&gt; - A number with or without decimals.
* &lt;code&gt;bool&lt;/code&gt; - A value which can be &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.
* &lt;code&gt;string&lt;/code&gt; - Text, or more precisely a string of alphanumeric characters.
* &lt;code&gt;color&lt;/code&gt; - An array of colors, in RGBA format.
* &lt;code&gt;number[4]&lt;/code&gt; - An array of numbers; used for positioning, etc.
==Details==
Chili classes use OOP with inheritance, with the following hierarchy:
 object
 |_font
 |_screen
 |_control
  |_button
    |_image
  |_checkbox
  |_colorbars
  |_label
  |_layoutpanel
    |_imagelistview
    |_grid
    |_stackpanel
    |_treeview
  |_panel
  |_progressbar
  |_scrollpanel
  |_textbox
  |_trackbar
  |_treeview
   |_treeviewnode
  |_window

Consequently, it is possible for widgets to define their own Chili classes (discussed below).

Each Chili control has one parent (&lt;code&gt;Chili.screen0&lt;/code&gt; or another Chili control) and any non-negative number of children. Position is specified relative to the parent, taking into account the parent's &lt;code&gt;padding&lt;/code&gt; and &lt;code&gt;itemMargin&lt;/code&gt; tags.

==Classes==
===Object===
The base Chili object class. It should ''not'' be used directly.

{{tag
|name = classname
|type = string
|default = &quot;object&quot;
|description = The class name.}}

{{tag
|name = hidden
|type = bool
|default = false
|description = Is the object hidden?}}

{{tag
|name = disableChildrenHitTest
|type = bool
|default = false
|description = If true, this object's children are not clickable, draggable, etc. - their mouse events are not processed.}}

===Control===
This is the base class for all Chili controls, specifying common properties. It should ''not'' be used directly.

====General====
{{tag
|name = tooltip
|type = string
|default = nil
|description = The control's tooltip.}}

{{tag
|name = skinName
|type = string
|default = nil
|description = Specifies the control to use a skin other than the default one.}}

====Size====
{{tag
|name = width
|type = number OR string
|description = The width of the control. This can be a number of pixels, or a percentage value enclosed in a string, e.g. &quot;50%&quot; means half as wide as the parent.}}

{{tag
|name = height
|type = number OR string
|description = The height of the control. This can be a number of pixels, or a percentage value enclosed in a string, e.g. &quot;50%&quot; means half as wide as the parent.}}

{{tag
|name = minWidth
|type = number
|default = 10 (50 for windows)
|description = The control's minimum width.}}

{{tag
|name = minHeight
|type = number
|default = 10 (50 for windows)
|description = The control's minimum height.}}

{{tag
|name = maxWidth
|type = number
|default = 1e9
|description = The control's maximum width.}}

{{tag
|name = maxHeight
|type = number
|default = 1e9
|description = The control's maximum height.}}

{{tag
|name = autosize
|type = bool
|default = false
|description = Does the control automatically resize to fit its children?}}

{{tag
|name = savespace
|type = bool
|default = false
|description = If &lt;code&gt;autosize&lt;/code&gt; is enabled, it shrinks the control to the minimum needed space; if disabled &lt;code&gt;autosize&lt;/code&gt; ''normally'' only enlarges the control.}}

{{tag
|name = fixedratio
|type = bool
|default = false
|description = Does this control attempt to maintain its original aspect ratio when resized?}}

{{tag
|name = resizable
|type = bool
|default = false
|description = Can this control be resized outside of tweakmode?}}

{{tag
|name = tweakResizable
|type = bool
|default = true
|description = Can this control be resized in tweakmode?}}

====Positioning====
These tags can be combined in different ways with each other and the width/height tags to precisely define the bounds of the element.
{{tag
|name = x
|type = number
|description = The distance between the left edge of the control and that of its parent.}}

{{tag
|name = y
|type = number
|description = The distance between the top edge of the control and that of its parent.}}

{{tag
|name = right
|type = number
|description = The distance between the right edge of the control and that of its parent.}}

{{tag
|name = bottom
|type = number
|description = The distance between the bottom edge of the control and that of its parent.}}

{{tag
|name = draggable
|type = bool
|default = false
|description = Can this control be dragged around outside of tweakmode?}}

{{tag
|name = tweakDraggable
|type = bool
|default = true
|description = Can this control be dragged around in tweakmode?}}

====Drawing====
{{tag
|name = padding
|type = number[4]
|default = {5, 5, 5, 5}
|description = How much space there is between the borders of the control and its children. Numbers are for left, top, right and bottom.}}

{{tag
|name = backgroundColor
|type = color
|default = {0.8, 0.8, 1.0, 0.4} (can be overridden by skin)
|description = This is the background color of certain controls, particularly Windows.}}

===Window===
This is the basic container for all other controls. It is the only one that can be moved around by the user and responds to the docking widget. It can be made invisible for a borderless element, or to allow another control such as a Panel to draw the background.

===Panel===
A background element, similar to Window but drawn differently and without the resize/drag functions.

===Button===
Does things when clicked. Comes with its own implementation of &lt;code&gt;HitTest&lt;/code&gt;, &lt;code&gt;MouseDown&lt;/code&gt; and &lt;code&gt;MouseUp&lt;/code&gt;, making it readily usable for this purpose.

{{tag
|name = caption
|type = string
|default = &quot;button&quot;
|description = A caption written on the button.}}

[[Category:Libraries]]</text>
      <sha1>45xr1eqdx0c4q66nkgdxz9i8d1gow0f</sha1>
    </revision>
  </page>
  <page>
    <title>Chili/Chili Adding To Game</title>
    <ns>0</ns>
    <id>3719</id>
    <redirect title="Chili:Adding To Game" />
    <revision>
      <id>29597</id>
      <timestamp>2015-09-01T13:53:31Z</timestamp>
      <contributor>
        <username>Silentwings</username>
        <id>2883</id>
      </contributor>
      <comment>Silentwings moved page [[Chili/Chili Adding To Game]] to [[Chili:Adding To Game]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="34">#REDIRECT [[Chili:Adding To Game]]</text>
      <sha1>sjz5ekshh7g5znhejn4oxg05smw6s5o</sha1>
    </revision>
  </page>
  <page>
    <title>Chili/Chili Example 2</title>
    <ns>0</ns>
    <id>3723</id>
    <redirect title="Chili:Example 2" />
    <revision>
      <id>29607</id>
      <timestamp>2015-09-01T13:56:42Z</timestamp>
      <contributor>
        <username>Silentwings</username>
        <id>2883</id>
      </contributor>
      <comment>Silentwings moved page [[Chili/Chili Example 2]] to [[Chili:Example 2]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29">#REDIRECT [[Chili:Example 2]]</text>
      <sha1>7w7q5ukrtdthbmgkjbw9kglbecxs125</sha1>
    </revision>
  </page>
  <page>
    <title>Chili/Chili Example 3</title>
    <ns>0</ns>
    <id>3724</id>
    <redirect title="Chili:Example 3" />
    <revision>
      <id>29609</id>
      <timestamp>2015-09-01T13:56:58Z</timestamp>
      <contributor>
        <username>Silentwings</username>
        <id>2883</id>
      </contributor>
      <comment>Silentwings moved page [[Chili/Chili Example 3]] to [[Chili:Example 3]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29">#REDIRECT [[Chili:Example 3]]</text>
      <sha1>6r87fwjt6wr82dgaiuupx15eiybqeo8</sha1>
    </revision>
  </page>
  <page>
    <title>Chili/Chili Example Hello World</title>
    <ns>0</ns>
    <id>3722</id>
    <redirect title="Chili:Example Hello World" />
    <revision>
      <id>29605</id>
      <timestamp>2015-09-01T13:55:52Z</timestamp>
      <contributor>
        <username>Silentwings</username>
        <id>2883</id>
      </contributor>
      <comment>Silentwings moved page [[Chili/Chili Example Hello World]] to [[Chili:Example Hello World]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="39">#REDIRECT [[Chili:Example Hello World]]</text>
      <sha1>5b2jbr9kya3z1q4iom4z25c7xap45ml</sha1>
    </revision>
  </page>
  <page>
    <title>Chili/Chili Examples</title>
    <ns>0</ns>
    <id>3718</id>
    <redirect title="Chili:Examples" />
    <revision>
      <id>29595</id>
      <timestamp>2015-09-01T13:53:18Z</timestamp>
      <contributor>
        <username>Silentwings</username>
        <id>2883</id>
      </contributor>
      <comment>Silentwings moved page [[Chili/Chili Examples]] to [[Chili:Examples]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="28">#REDIRECT [[Chili:Examples]]</text>
      <sha1>8eoz7a63csb00hfbe22c0mq04ufeckj</sha1>
    </revision>
  </page>
  <page>
    <title>Chili/Chili Screen</title>
    <ns>0</ns>
    <id>3714</id>
    <revision>
      <id>29569</id>
      <timestamp>2015-08-31T10:51:46Z</timestamp>
      <contributor>
        <username>Silentwings</username>
        <id>2883</id>
      </contributor>
      <comment>placeholder Chili screenshots page</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5">TODO!</text>
      <sha1>byjid4bsfl9t6accrlhnnixw13cr1qh</sha1>
    </revision>
  </page>
  <page>
    <title>Chili/Chili ScreenShots</title>
    <ns>0</ns>
    <id>3721</id>
    <redirect title="Chili:ScreenShots" />
    <revision>
      <id>29602</id>
      <timestamp>2015-09-01T13:54:55Z</timestamp>
      <contributor>
        <username>Silentwings</username>
        <id>2883</id>
      </contributor>
      <comment>Silentwings moved page [[Chili/Chili ScreenShots]] to [[Chili:ScreenShots]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="31">#REDIRECT [[Chili:ScreenShots]]</text>
      <sha1>q8qlv1op8xc45jvmiebq320dfo6gqcv</sha1>
    </revision>
  </page>
  <page>
    <title>Chili/Chili Tutorial</title>
    <ns>0</ns>
    <id>3716</id>
    <redirect title="Chili:Chili Tutorial" />
    <revision>
      <id>29591</id>
      <timestamp>2015-09-01T13:52:28Z</timestamp>
      <contributor>
        <username>Silentwings</username>
        <id>2883</id>
      </contributor>
      <comment>Silentwings moved page [[Chili/Chili Tutorial]] to [[Chili:Chili Tutorial]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="34">#REDIRECT [[Chili:Chili Tutorial]]</text>
      <sha1>rajjki4v0343k2djwqnvrujfnvkv4e3</sha1>
    </revision>
  </page>
  <page>
    <title>Chili/Controls</title>
    <ns>0</ns>
    <id>3624</id>
    <redirect title="Chili:Controls" />
    <revision>
      <id>28307</id>
      <timestamp>2014-02-22T13:06:51Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>Flozi moved page [[Chili/Controls]] to [[Chili:Controls]]: consistent separator pt 2</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="28">#REDIRECT [[Chili:Controls]]</text>
      <sha1>gkesm2kqr11vh3gia37xcuggneank7x</sha1>
    </revision>
  </page>
  <page>
    <title>Chili/Hiding The Default GUI</title>
    <ns>0</ns>
    <id>3720</id>
    <redirect title="Chili:Hiding The Default GUI" />
    <revision>
      <id>29599</id>
      <timestamp>2015-09-01T13:53:46Z</timestamp>
      <contributor>
        <username>Silentwings</username>
        <id>2883</id>
      </contributor>
      <comment>Silentwings moved page [[Chili/Hiding The Default GUI]] to [[Chili:Hiding The Default GUI]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="42">#REDIRECT [[Chili:Hiding The Default GUI]]</text>
      <sha1>3m3hemljjounq17gw3mn4cxj4ec3zjq</sha1>
    </revision>
  </page>
  <page>
    <title>Chili:Adding To Game</title>
    <ns>0</ns>
    <id>3707</id>
    <revision>
      <id>31238</id>
      <parentid>30096</parentid>
      <timestamp>2020-06-07T10:25:49Z</timestamp>
      <contributor>
        <username>Thinksome</username>
        <id>2929</id>
      </contributor>
      <comment>/* gajop claims responsibility :) */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1206">[[Main_Page|Wiki]] &lt; [[Chili|Chili]] &lt; Adding Chili To A Game

== Getting Chili ==

The Chili repository can be found at &lt;del&gt;[https://github.com/jk3064/chiliui https://github.com/jk3064/chiliui]&lt;/del&gt; [https://github.com/gajop/chiliui https://github.com/gajop/chiliui]. There are three ways to add Chili to your game:

* Include the Chili repository as a git submodule in your project.
* Include Chili as a dependency in [[Modinfo.lua|modinfo.lua]], using the line &lt;code&gt;depend={&quot;Chili Framework v2014.0&quot;}&lt;/code&gt;.
* Checkout the Chili repository, and manually place the files &amp; subdirs from its /luaui/chili directory into your games /luaui/widgets directory.

If you are having trouble getting Chili to run, login to the lobby and join the #moddev channel (type /j moddev).  People there will help you figure it out.

== Chili interaction with game internals ==

The Chili library is, basically, a very big widget. It is loaded as a widget by the widget handler, and it makes its functions accessible via WG. This allows 'normal' widgets to use Chili - a widget may call a function from inside WG.Chili, which instructs the chili library to create/modify a particular GUI element.

[[Category:Libraries]]</text>
      <sha1>cs5ncky4hkiuhh19l2mnl8bx9777pz3</sha1>
    </revision>
  </page>
  <page>
    <title>Chili:Chili Tutorial</title>
    <ns>0</ns>
    <id>3717</id>
    <redirect title="Chili:Tutorial" />
    <revision>
      <id>29593</id>
      <timestamp>2015-09-01T13:52:47Z</timestamp>
      <contributor>
        <username>Silentwings</username>
        <id>2883</id>
      </contributor>
      <comment>Silentwings moved page [[Chili:Chili Tutorial]] to [[Chili:Tutorial]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="28">#REDIRECT [[Chili:Tutorial]]</text>
      <sha1>i4eme2c70g0jv7r5b7r41rtnd8198t2</sha1>
    </revision>
  </page>
  <page>
    <title>Chili:Controls</title>
    <ns>0</ns>
    <id>3533</id>
    <revision>
      <id>28306</id>
      <parentid>27269</parentid>
      <timestamp>2014-02-22T13:06:51Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>Flozi moved page [[Chili/Controls]] to [[Chili:Controls]]: consistent separator pt 2</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="663">== Checking The Source ==
As I fill this in or it becomes outdated, I suggest looking through the source code.
The most up to date list of controls can be found at
https://github.com/jk3064/chiliui/tree/master/chili/controls

A widget containing an example of all the controls will most likely be found here https://github.com/jk3064/chiliui/blob/master/gui_chiliguidemo.lua

= Controls =
== control ==
== button ==
=== image ===
== checkbox ==
== colorbars ==
== label ==
== layoutpanel ==
=== imagelistview ===
=== grid ===
=== stackpanel ===
=== treeview ===
== progressbar ==
== scrollpanel ==
== textbox ==
== trackbar ==
== Window ==

[[Category:Libraries]]</text>
      <sha1>0qyegqcncqwev6hafag544vml6rc9zy</sha1>
    </revision>
  </page>
  <page>
    <title>Chili:Example 2</title>
    <ns>0</ns>
    <id>3711</id>
    <revision>
      <id>29634</id>
      <parentid>29606</parentid>
      <timestamp>2015-09-03T19:26:24Z</timestamp>
      <contributor>
        <username>Silentwings</username>
        <id>2883</id>
      </contributor>
      <comment>removed old example (it doesn't and no time to update right now)</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="31">(TODO: Update+add this example)</text>
      <sha1>389wo47be4oyvctgdtua3psy7n6id1p</sha1>
    </revision>
  </page>
  <page>
    <title>Chili:Example 3</title>
    <ns>0</ns>
    <id>3713</id>
    <revision>
      <id>30039</id>
      <parentid>29989</parentid>
      <timestamp>2016-06-11T00:20:58Z</timestamp>
      <contributor>
        <username>Gajop</username>
        <id>2804</id>
      </contributor>
      <comment>/* Chili build/order menu */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5173">== Chili build/order menu ==

This is a very basic menu that displays a button for each command currently available.

&lt;syntaxhighlight lang=&quot;lua&quot;&gt;
function widget:GetInfo()
    return {
        name    = &quot;Command Menu&quot;,
        desc    = &quot;Shows a button for each order that can currently be given&quot;,
        author  = &quot;Turnips&quot;,
        date    = &quot;2016&quot;,
        license = &quot;GNU GPL v2 or later&quot;,
        layer   = math.pi,
        enabled = true,
        handler = true,
    }
end

local Chili, window, orderGrid, buildGrid
local updateRequired

-----------------------
-- buttons

local ignoreCMDs = {
    timewait=true,
    deathwait=true,
    squadwait=true,
    gatherwait=true,
    loadonto=true,
}

function ActionCommand(self, x, y, button, mods) 
    local index = Spring.GetCmdDescIndex(self.cmdID)
    if index then
        local left, right = (button == 1), (button == 3)
        local alt, ctrl, meta, shift = mods.alt, mods.ctrl, mods.meta, mods.shift
        Spring.SetActiveCommand(index, button, left, right, alt, ctrl, meta, shift)
    end
end

function OrderButton(cmd)
    local button = Chili.Button:New{
        name = &quot;orderButton_&quot; .. cmd.action,
        cmdID = cmd.id,
        caption = cmd.name,
        padding = {0,0,0,0},
        margin = {0,0,0,0},
        OnMouseUp = {ActionCommand},
    }
    orderGrid:AddChild(button)
end

function StateButton(cmd)
    local button = Chili.Button:New{
        name = &quot;stateButton_&quot; .. cmd.action,
        cmdID = cmd.id,
        caption = cmd.params[cmd.params[1] + 2],
        padding = {0,0,0,0},
        margin = {0,0,0,0},
        OnMouseUp = {ActionCommand},
    }
    stateGrid:AddChild(button)
end

function UnitButton(cmd)
    local uDID = -cmd.id
    local unitDef = UnitDefs[uDID] 
    local name = unitDef.name
    
    local image = Chili.Image:New{
        name   = &quot;unitImage_&quot; .. name,
        height = '100%', 
        width = '100%',
        file   = '#'..unitDef.id,
        -- flip = false,
    }
    local button = Chili.Button:New{
        name = &quot;unitButton_&quot; .. name,
        cmdID = cmd.id,
        caption = &quot;&quot;,
        children = {image},
        padding = {0,0,0,0},
        margin = {0,0,0,0},
        OnMouseUp = {ActionCommand},
    }
    buildGrid:AddChild(button)
end

function ParseCmd(cmd)
    if UnitDefNames[cmd.name] then
        -- unit
        UnitButton(cmd)
    elseif #cmd.params &gt; 1 then
        -- state
        StateButton(cmd)
    else
        -- order
        OrderButton(cmd)
    end
end

function ParseCmds()
    -- clean out the grids &amp; repopulate
    buildGrid:ClearChildren()
    orderGrid:ClearChildren()
    stateGrid:ClearChildren()
    
    local cmds = Spring.GetActiveCmdDescs()
    local haveCmd = false
    for _,cmd in ipairs(cmds) do
        if cmd.name ~= '' and not (ignoreCMDs[cmd.name] or ignoreCMDs[cmd.action]) then
            haveCmd = true
            ParseCmd(cmd)
        end
    end
    
    if haveCmd and window.hidden then window:Show() elseif not haveCmd and window.visible then window:Hide() end
end

-----------------------
-- callins

function LayoutHandler(xIcons, yIcons, cmdCount, commands)
    -- its really better not to think about this bit
    -- you may need to change widgetHandler to plain handler, dependent on your games lua internals
    widgetHandler.commands   = commands
    widgetHandler.commands.n = cmdCount
    widgetHandler:CommandsChanged()
    local reParamsCmds = {}
    local customCmds = {}

    return &quot;&quot;, xIcons, yIcons, {}, customCmds, {}, {}, {}, {}, reParamsCmds, {[1337]=9001}
end

function widget:Initialize()
    widgetHandler:ConfigLayoutHandler(LayoutHandler)
    Spring.ForceLayoutUpdate()
    
    if not WG.Chili then
        widgetHandler:RemoveWidget()
        return
    end

    Chili = WG.Chili
    
    stateGrid = Chili.Grid:New{
        name = &quot;stateGrid&quot;,
        x = '0%',
        y = '0%',
        width = '100%',
        height = '15%',
        rows = 3,
        columns = 3,        
        padding = {0,0,0,0},
    }

    orderGrid = Chili.Grid:New{
        name = &quot;orderGrid&quot;,
        x = '0%',
        y = '15%',
        width = '100%',
        height = '25%',
        rows = 5,
        columns = 3,        
        padding = {0,0,0,0},
    }
        
    buildGrid = Chili.Grid:New{
        name = &quot;buildGrid&quot;,
        x = '0%',
        y = '40%',
        width = '100%',
        height = '60%',
        rows = 6,
        columns = 5,        
        padding = {0,0,0,0},
    }

    window = Chili.Window:New{
        name = &quot;window&quot;,
        parent = Chili.Screen0,
        x = '0%',
        y = '25%',	
        height = '65%',
        width = '30%',
        children = {stateGrid, orderGrid, buildGrid},
    }
    
    window:Hide()
end

function widget:CommandsChanged()
    updateRequired = true -- the active cmd descs haven't changed yet; wait until the next widget:Update
end

function widget:Update()
    if updateRequired then
        ParseCmds()
        updateRequired = false
    end
end

function widget:Shutdown()
    widgetHandler:ConfigLayoutHandler(nil)
    Spring.ForceLayoutUpdate()
end
&lt;/syntaxhighlight&gt;

[[Category:Libraries]][[Category:Tutorial]]</text>
      <sha1>dl090tyv1vta0l5e1j2c3obd0dptvoc</sha1>
    </revision>
  </page>
  <page>
    <title>Chili:Example Hello World</title>
    <ns>0</ns>
    <id>3710</id>
    <revision>
      <id>30040</id>
      <parentid>29967</parentid>
      <timestamp>2016-06-11T00:21:02Z</timestamp>
      <contributor>
        <username>Gajop</username>
        <id>2804</id>
      </contributor>
      <comment>/* Chili Hello World */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1060">== Chili Hello World ==

This is the 'Hello World' example of a Chili widget, to accompany the [[Chili:Tutorial|Chili Tutorial]].

&lt;syntaxhighlight lang=&quot;lua&quot;&gt;
function widget:GetInfo()
  return {
    name    = &quot;Chili Hello World&quot;,
    desc    = &quot;&quot;,
    author  = &quot;&quot;,
    date    = &quot;&quot;,
    license = &quot;GNU GPL v2&quot;,
    layer   = 0,
    enabled = true
  }
end

local Chili, Screen0
 
local helloWorldWindow
local helloWorldLabel
 
function widget:Initialize()	
  if (not WG.Chili) then
    -- don't run if we can't find Chili
    widgetHandler:RemoveWidget()
    return
  end

  -- Get ready to use Chili
  Chili = WG.Chili
  Screen0 = Chili.Screen0

  -- Create the window
  helloWorldWindow = Chili.Window:New{
    parent = Screen0,
    x = '40%',
    y = '40%',
    width  = '20%',
    height = '20%',	
  }	

  -- Create some text inside the window
  helloWorldLabel = Chili.Label:New{
    parent = helloWorldWindow,
    width  = '100%',
    height = '100%',
    caption = &quot;Hello world&quot;,
  }
end
&lt;/syntaxhighlight&gt;

[[Category:Libraries]][[Category:Tutorial]]</text>
      <sha1>46w43ziwpvfenujdvp51cs72253duh4</sha1>
    </revision>
  </page>
  <page>
    <title>Chili:Examples</title>
    <ns>0</ns>
    <id>3709</id>
    <revision>
      <id>29980</id>
      <parentid>29979</parentid>
      <timestamp>2016-05-23T08:24:39Z</timestamp>
      <contributor>
        <username>Silentwings</username>
        <id>2883</id>
      </contributor>
      <minor/>
      <comment>fix link</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2666">[[Main_Page|Wiki]] &lt; [[Chili|Chili]] &lt; Examples Of Chili

== Chili Widgets ==

A few small examples of Chili widgets, some of which were used in the [[Chili/Chili_Tutorial| Chili tutorial]] are the following:

[[Chili:Example_Hello_World|1. Hello World]]

[[Chili:Example_2|2. Dynamically update a label]]

[[Chili:Example_3|3. Command and Build commands in a chili window]]


Some self-contained examples of functional Chili widgets, from real games:
* [https://github.com/SpringCabal/Gravitas/blob/master/LuaUI/Widgets/ui_quitbutton.lua Quit Button] - a button that quits the game
* [http://imolarpg.dyndns.org/trac/balatest/browser/branches/BAR/luaui/widgets/bgu_replay_speed_control.lua Replay Speed Control] - a panel of pressable buttons to control the speed of watching a replay
* [https://github.com/SpringCabal/Area-17/blob/master/LuaUI/Widgets/ui_health.lua Player Health Bar] - a health bar that hovers above a players character (made for an rpg/puzzle game)

You can find many more examples, including much more complex ones, in the games below.

== Chili GUIs ==

A Chili GUI is typically built out of many different widgets, each of which uses Chili to create part of the GUI and also the Lua functions to implement that part of the GUI. 

Chili is used by many Spring games, although not all. Newer games often use Chili, some older games pre-date Chili and use GUIs written directly in OpenGL. In theory, a game could have a GUI containing some Chili widgets and some non-Chili widgets, but in practice most games that adopt Chili make all or almost all of their GUI using Chili.

Games with small examples of Chili GUIs, which are good sources of simple example widgets, are 
* [https://github.com/SpringCabal/Gravitas/tree/master/LuaUI/Widgets Gravitas] 
* [https://github.com/SpringCabal/Area-17/tree/master/LuaUI/Widgets Area-17]
Note that these links are to the LuaUI directory of the game, in which the gui widgets can usually be found prefixed with &lt;code&gt;gui_&lt;/code&gt;.

You can find working examples of full scale Chili GUIs in 
* [https://github.com/ZeroK-RTS/Zero-K/tree/master/LuaUI/Widgets Zero-K]
* [https://github.com/EvolutionRTS/Evolution-RTS/tree/master/LuaUI/Widgets_Evo Evolution RTS] (partially)
* [http://imolarpg.dyndns.org/trac/balatest/browser/branches/BAR/luaui/widgets BAR]
and in other games with [[Gamedev:PublicRepos|Public Repos]]. You can see many of these GUIs on the [[Chili:ScreenShots| Screenshots]] page.

Although there are many Chili widgets that can be used in any game, there is currently no whole 'game-agnostic' minimal Chili GUI, although it would be great if someone would make one ;)

[[Category:Libraries]]</text>
      <sha1>bi3ll5bybvlp0m6ioubqcr2zqa6hfx8</sha1>
    </revision>
  </page>
  <page>
    <title>Chili:Hiding The Default GUI</title>
    <ns>0</ns>
    <id>3712</id>
    <revision>
      <id>30041</id>
      <parentid>29964</parentid>
      <timestamp>2016-06-11T00:22:07Z</timestamp>
      <contributor>
        <username>Gajop</username>
        <id>2804</id>
      </contributor>
      <comment>/* Hiding the default GUI */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1512">[[Main_Page|Wiki]] &lt; [[Chili|Chili]] &lt; Hiding Springs Default GUI

== Hiding the default GUI ==

Many games, and all games using Chili, choose to remove Springs basic 'default' GUI. This can be done with the following widget - you may need to edit it slightly to match your game and your widget/addon handler.

&lt;syntaxhighlight lang=&quot;lua&quot;&gt;
function widget:GetInfo()
  return {
    name      = &quot;Hides the default interface&quot;,
    desc      = &quot;&quot;,
    author    = &quot;gajop, Bluestone&quot;,
    date      = &quot;&quot;,
    license   = &quot;GPL-v2&quot;,
    layer     = math.huge;
    enabled   = true,
    
    hidden    = true; -- don't show in the widget selector
    api       = true; -- load before all others?
  }
end

function widget:Initialize()
  RegisterGlobal(&quot;LayoutButtons&quot;, DummyLayoutHandler)

  Spring.SendCommands(&quot;Console 0&quot;)
  Spring.SendCommands(&quot;ResBar 0&quot;)
  Spring.SendCommands(&quot;ToolTip 0&quot;)
  Spring.SendCommands(&quot;Clock 0&quot;)
  Spring.SendCommands(&quot;Info 0&quot;)
  Spring.SendCommands(&quot;Fps 0&quot;)

  gl.SlaveMiniMap(true)
  gl.ConfigMiniMap(-1,-1,-1,-1)
end

local function DummyLayoutHandler(xIcons, yIcons, cmdCount, commands)
  handler.commands   = commands
  handler.commands.n = cmdCount
  handler:CommandsChanged()
  return &quot;&quot;, xIcons, yIcons, {}, {}, {}, {}, {}, {}, {}, {}
end

function widget:GameSetup()
  -- sets status instantly to ready &amp; hides the pre-game UI
  -- you might want/need to change this part &amp; integrate it into your spawning gadget!
  return true, true 
end

&lt;/syntaxhighlight&gt;
[[Category:Libraries]]</text>
      <sha1>7qbaxbdy0239gi59j83exth96wfosdd</sha1>
    </revision>
  </page>
  <page>
    <title>Chili:ScreenShots</title>
    <ns>0</ns>
    <id>3715</id>
    <revision>
      <id>29963</id>
      <parentid>29632</parentid>
      <timestamp>2016-04-26T20:59:07Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>categorise</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="259">[[Main_Page|Wiki]] &lt; [[Chili|Chili]] &lt; Screenshots

== Screenshots of Chili GUIs ==

[[File:chili_zk1.jpg|640px]]

[[File:chili_zk2.jpg|640px]]

[[File:chili_evo.jpg|640px]]

[[File:chili_bar1.jpg|640px]]

[[File:chili_bar2.jpg|640px]]

[[Category:Libraries]]</text>
      <sha1>m1qzpu5act9e72x3ndjutbsfuapmyj6</sha1>
    </revision>
  </page>
  <page>
    <title>Chili:Skins</title>
    <ns>0</ns>
    <id>3621</id>
    <revision>
      <id>28299</id>
      <parentid>28298</parentid>
      <timestamp>2014-02-22T10:13:15Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>categorise (probably Chili needs it's own sub-category)</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1525">First off this topic will probably benefit from a veterans touch. Still, I'm going to try my best to explain the ease at which chili skins can be created and altered.

Chili has been around since before I even touched lua (or any spring code for that matter) but it seems it's just finally becoming the standard. Just about every active/upcoming game is using it for their UI purposes now, and I'm kind of surprised there hasn't been more interest in custom skins from the player base. Maybe it's because they don't know how easy it is.

==What is a chili skin?==
Unlike previous UI frameworks, such as IceUI and RedUI, Chili can (and usually does) use textures for drawing elements.

A skin consists of 1 or more images which are assigned to chili elements through the '''skin.lua''' file.
https://dl.dropboxusercontent.com/u/19847614/Spring/Screens/Chiliskin.PNG

Each skin gets its own folder in &quot;LuaUI/Chili/Skins/&quot;.

==How to alter a skin?==
First find and open the skin's directory. A good starting point is JK's default skin 'Robocracy' which is a very complete and well made skin (he did code chili).
In that case it would be in &quot;luaui/chili/skins/robocracy&quot;

From there find the texture you'd like to change, open it for editing with your program of choice, and let the creativity flow.

For basic alterations it's really that easy. 

==Why?==
Because most, if not all of your Spring games will soon come with chili. What's cooler than seeing your own bad-ass skin while playing those games?

[[Category: Libraries]]</text>
      <sha1>742b561cmc5asmeaq21k59agtext3hp</sha1>
    </revision>
  </page>
  <page>
    <title>Chili:Tutorial</title>
    <ns>0</ns>
    <id>3708</id>
    <revision>
      <id>30038</id>
      <parentid>29962</parentid>
      <timestamp>2016-06-11T00:19:35Z</timestamp>
      <contributor>
        <username>Gajop</username>
        <id>2804</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4931">[[Main_Page|Wiki]] &lt; [[Chili|Chili]] &lt; Chili Tutorial


== The Basics ==

In Chili, every element of the GUI has properties that control how it looks, and functions it can call when special events (such as a double click, or mouseover) affect it.

To use Chili inside a Lua widget, your &lt;code&gt;widget:Initialize&lt;/code&gt; function should include the following code:
&lt;syntaxhighlight lang=&quot;lua&quot;&gt;
  function widget:Initialize()
    Chili = WG.Chili
    Screen0 = Chili.Screen0
  end
&lt;/syntaxhighlight&gt;
Now, &lt;code&gt;Chili&lt;/code&gt; is your route to creating new GUI elements, and &lt;code&gt;Screen0&lt;/code&gt; is the screen in which you add them.


== Creating a Chili Component ==

To create a Chili component, you use its &lt;code&gt;New&lt;/code&gt; function, for example:
&lt;syntaxhighlight lang=&quot;lua&quot;&gt;
  Chili.Window:New{parent=Screen0, width='20%', height='20%'}
&lt;/syntaxhighlight&gt;
This creates a square window, taking up 1/5th of the screen. See the [[Chili:Example_Hello_World|Hello World]] example for how to fit this code into a Chili widget.

If you forget to include &lt;code&gt;parent=Screen0&lt;/code&gt;, your window will exist, but it won't be drawn anywhere. This is the instruction that tells Chili that you want your component to appear inside Screen0 - your screen.

If you look at the properties of a [http://gajop.github.io/chiliui/modules/controls.window.html Window], you won't find any. But, Window inherits from [http://gajop.github.io/chiliui/modules/controls.control.html Control] - this means that a Window also has all the properties that a Control has. By looking at the properties of Control you can see that a Window actually has many options. Any properties that you don't specify are set to their default values. 

The hierarchy of inheritance for all Chili objects can be found [[Chili#Documentation:_Chili_Component_Hierarchy|here]].


== Modifying components ==

Once a component exists you can modify its properties, whenever you like. When you do so, Chili will react and automatically change how the component is drawn. For example,
&lt;syntaxhighlight lang=&quot;lua&quot;&gt;
  local myWindow = Chili.Window:New{parent=Screen0, width='20%', height='20%'}
  myWindow.x = 100
  myWindow.y = 100
&lt;/syntaxhighlight&gt;
results in the window above being placed on the screen at (100,100). 

Many properties, such as x and y can be modified directly as though the component was a Lua table. Sometimes there are also functions to help you, for example in the properties of a [http://gajop.github.io/chiliui/modules/controls.checkbox.html CheckBox] you can find a &lt;code&gt;Toggle()&lt;/code&gt; function, which you would call as &lt;code&gt;myCheckBox:Toggle()&lt;/code&gt;


== Making a GUI from multiple components ==

Components can have children. Child components are placed inside of their parent components (and are drawn in front of it). The x-y coords, width, height, etc, of a component are relative to the area covered by its parent component. 

For example:
&lt;syntaxhighlight lang=&quot;lua&quot;&gt;
  window = Chili.Window:New{parent = Screen0,   x='25%', y='25%', width='50%', height='50%'}
  textBox = Chili.TextBox:New{parent = window,  x='10%', y='10%', width='80%', height='30%', text=&quot;Is the sky blue?&quot;}
  yesButton = Chili.Button:New{parent = window, x='10%', y='60%', width='30%', height='30%', caption=&quot;Yes&quot;}
  noButton = Chili.Button:New{parent = window,  x='60%', y='60%', width='30%', height='30%', caption=&quot;No&quot;}
&lt;/syntaxhighlight&gt;
draws a Window in the center of the screen, containing a TextBox with the words &quot;Is the sky blue?&quot;, and two clickable Buttons, for yes and no. It looks like

(TODO: picture). 

See the [[Chili:Examples|example widgets]] page for how to make stuff happen when the buttons are clicked.


== Children and Showing/Hiding ==

A component is drawn only when it is a child of another component that is drawn. Screen0 is a component of type [http://gajop.github.io/chiliui/modules/controls.screen.html Screen], and is always drawn, by default. A component that has no parent will never be drawn; it is said to be orphaned.

In a GUI, it's common to want components to sometimes be visible and sometimes be hidden. You can control this in two ways.
* Every component has Show() and Hide() functions, e.g. &lt;code&gt;myWindow:Hide()&lt;/code&gt;
* Components can be orphaned/reattached to their parent. 
Of course, Show() will only cause a component to be drawn if it is not orphaned.

There are many ways to specify (and change!) which components are children of which other components. 
* To match the &lt;code&gt;parent=&lt;/code&gt; used above, each component has a &lt;code&gt;children={[1]=firstChild, [2]=secondChild, ...}&lt;/code&gt; table.
* There are the functions &lt;code&gt;AddChild, RemoveChild, SetParent, ClearChildren&lt;/code&gt; and others.
A child component can have at most one parent, and a parent cannot have the same child more than once. However, a child can be removed from its original parent and then added to a new parent.

[[Category:Libraries]][[Category:Tutorial]]</text>
      <sha1>nrnaxs9436sfb0ybjsr62rvx443bwk8</sha1>
    </revision>
  </page>
  <page>
    <title>Chili:Tutorial Command and Build Commands</title>
    <ns>0</ns>
    <id>3119</id>
    <revision>
      <id>27427</id>
      <parentid>27426</parentid>
      <timestamp>2013-07-14T16:01:50Z</timestamp>
      <contributor>
        <username>Sunspot</username>
        <id>2847</id>
      </contributor>
      <comment>/* initializing the widget */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="17976">== Commands and Build bar ==
=== Preparation ===
We are stepping it up a notch.  We can all agree that the stock GUI for commands and building isn't really all that great.  Good thing is we can improve on this.  Following is not a perfect sollution since it doesn't handle pagination, but it will get you a long way getting you started for advanced stuff.  For this tutorial you will only need one lua script but it will have quite a bit of content.

&lt;pre&gt; 
- LuaUI\widgets\gui_chili_commandwindow.lua
&lt;/pre&gt;

=== File header ===
You open up with the regular info and imports that you are going to use thru the script.

&lt;code&gt;&lt;pre&gt;
function widget:GetInfo()
	return {
		name		= &quot;command list window&quot;,
		desc		= &quot;ChiliUi window that contains all the commands a unit has&quot;,
		author		= &quot;Sunspot&quot;,
		date		= &quot;2011-06-15&quot;,
		license     = &quot;GNU GPL v2&quot;,
		layer		= math.huge,
		enabled   	= true,
		handler		= true,
	}
end
-- INCLUDES
VFS.Include(&quot;LuaRules/Gadgets/Includes/utilities.lua&quot;)

-- CONSTANTS
local MAXBUTTONSONROW = 4
local COMMANDSTOEXCLUDE = {&quot;TimeWait&quot;,&quot;DeathWait&quot;,&quot;SquadWait&quot;,&quot;GatherWait&quot;,&quot;Load units&quot;}
local Chili

-- MEMBERS
local x
local y
local commandWindow
local stateCommandWindow
local buildCommandWindow
local updateRequired = true

-- CONTROLS
local spGetActiveCommand 	= Spring.GetActiveCommand
local spGetActiveCmdDesc 	= Spring.GetActiveCmdDesc
local spGetSelectedUnits    = Spring.GetSelectedUnits
local spSendCommands        = Spring.SendCommands
&lt;/pre&gt;&lt;/code&gt;

You'll notice a lot of variables and controls.  They will all get a place during the further script design and explained in detail.  Notice as well that this widgets GetInfo has an extra option (handler = true).  This is needed so Spring.SendCommands can execute.  It's a common mistake to omit that option with all consequences and frustrations that follow.

=== initializing the widget ===
What we are going to do, is remove the stock command bar and build bar ui together with the left bottom tooltip.  Next we are going to define 3 simple Chili Controls to seperate the command, status command and build commands in.  To keep those controls nicely together we merge them in one window.  Following code will do this.  I'll explain it more in detail since it has a few important parts.

&lt;code&gt;&lt;pre&gt;

local function CleanStockUi()
	widgetHandler:ConfigLayoutHandler(DummyHandler)
	Spring.ForceLayoutUpdate()
	spSendCommands({&quot;tooltip 0&quot;})
	spSendCommands(&quot;resbar 0&quot;)
	spSendCommands({&quot;console 0&quot;})
	spSendCommands({&quot;clock 0&quot;})
	spSendCommands({&quot;fps 0&quot;})
	spSendCommands({&quot;info 0&quot;})
	spSendCommands({&quot;speed 0&quot;})
end

function widget:Initialize()
	CleanStockUi()
	
	if (not WG.Chili) then
		widgetHandler:RemoveWidget()
		return
	end

	Chili = WG.Chili
	local screen0 = Chili.Screen0
		
	commandWindow = Chili.Control:New{
		x = 0,
		y = 0,
		width = &quot;100%&quot;,
		height = &quot;40%&quot;,
		xstep = 1,
		ystep = 1,
		draggable = false,
		resizable = false,
		dragUseGrip = false,		
		children = {},
	}

	stateCommandWindow = Chili.Control:New{
		x = 0,
		y = &quot;40%&quot;,
		width = &quot;100%&quot;,
		height = &quot;20%&quot;,
		xstep = 1,
		ystep = 1,
		draggable = false,
		resizable = false,
		dragUseGrip = false,		
		children = {},
	}	

	buildCommandWindow = Chili.Control:New{
		x = 0,
		y = &quot;60%&quot;,
		width = &quot;100%&quot;,
		height = &quot;40%&quot;,
		xstep = 1,
		ystep = 1,
		draggable = false,
		resizable = false,
		dragUseGrip = false,		
		children = {},
	}		
	
	window0 = Chili.Window:New{
		x = '50%',
		y = '15%',	
		dockable = true,
		parent = screen0,
		caption = &quot;&quot;,
		draggable = true,
		resizable = true,
		dragUseGrip = true,
		clientWidth = 400,
		clientHeight = 200,
		backgroundColor = {0,0,0,1},
		skinName  = &quot;DarkGlass&quot;,		
		children = {commandWindow,stateCommandWindow,buildCommandWindow},
	}
	
end

function widget:Shutdown()
  widgetHandler:ConfigLayoutHandler(nil)
  Spring.ForceLayoutUpdate()
  spSendCommands({&quot;tooltip 1&quot;})
  spSendCommands(&quot;resbar 1&quot;)
  spSendCommands({&quot;console 1&quot;})
  spSendCommands({&quot;clock 1&quot;})
  spSendCommands({&quot;fps 1&quot;})
  spSendCommands({&quot;info 1&quot;})
  spSendCommands({&quot;speed 1&quot;})
end
&lt;/pre&gt;&lt;/code&gt;

You'll find on top here the CleanStockUi() local function.  This is a helper function I made to clean up nearly all of the stock ui delivered with spring.  The DummyLayout is a handler that can be found in layouts.lua delivered with spring.  You'll notice in a lot of mods that people write their own LayoutHandler, I did so to at first.  But after some discover work I found the DummyLayout written by the spring devs and it's clearly better to use theirs.  I got rid of most stock stuff, except the minimap, that seems to serve a special function or the command is unknown to me to get rid of.

Now with the stock ui gone we create 3 chili controls and group them in one seperate window.  We also make sure the 3 controls resize together with the group window by using relative Y coordinates.  Put resize on false except the group window.  Last we put the shutdown method to clean up everything we have done incase something goes wrong.

=== On unit selection ... load the commands ===
Once you select one or more units the commands in the controls need to be refreshed, following code will do this for you.
&lt;code&gt;&lt;pre&gt;
function widget:CommandsChanged()
	if DEBUG then Spring.Echo(&quot;commandChanged called&quot;) end
	updateRequired = true
end

function widget:DrawScreen()
    if updateRequired then
        updateRequired = false
		loadPanel()
    end
end
&lt;/pre&gt;&lt;/code&gt;

These widget commands serve to detect if commands are changed and if they are they will flag that on the next redraw the panel (being the 3 controls in our case) needs to be redrawn.  I'm told this is the standard way of doing things and quite frankly it works , so this is once again just copy paste code you'll find in most chili scripts.

&lt;code&gt;&lt;pre&gt;
function loadPanel()
	resetWindow(commandWindow)
	resetWindow(stateCommandWindow)
	resetWindow(buildCommandWindow)
	local commands = Spring.GetActiveCmdDescs()
	commands = filterUnwanted(commands)
	table.sort(commands,function(x,y) return x.action &lt; y.action end)
	for cmdid, cmd in pairs(commands) do
		rowcount = createMyButton(commands[cmdid]) 
	end
end

function resetWindow(container)
	container:ClearChildren()
	container.xstep = 1
	container.ystep = 1
end

function filterUnwanted(commands)
	local uniqueList = {}
	if DEBUG then Spring.Echo(&quot;Total commands &quot;, #commands) end
	if not(#commands == 0)then
		j = 1
		for _, cmd in ipairs(commands) do
			if DEBUG then Spring.Echo(&quot;Adding command &quot;, cmd.action) end
			if not table.contains(COMMANDSTOEXCLUDE,cmd.action) then
				uniqueList[j] = cmd
				j = j + 1
			end
		end
	end
	return uniqueList
end
&lt;/pre&gt;&lt;/code&gt;

We start of by resetting the old contents of the controls.  Each control has also an x and y variable to keep track where the next object will come, since we removed everything well we reset these as well.

you'll notice an array COMMANDSTOEXCLUDE that we initialised at the start of the script.  We use this to remove commands , that are not appropriate for the mod you are making. You will also see a method table.contains, this is a method I created myself and is contained in utilities.lua.  It has following code, I'm not sure if it's really performant or if there is a better way but it works.

&lt;code&gt;&lt;pre&gt;
function table.contains(table, element)   
	for i=1, #table do     
		if table[i] == element then       
			return true     
		end   
	end   
	return false 
end
&lt;/pre&gt;&lt;/code&gt;

With Spring.GetActiveCmdDescs()
 we grab all the commands that are currently active in the selection.  Then we filter the unwanted commands out of that list and we sort them by actionname.  This to keep most of the commands on the same place when we select multiple units with different commands.  This not to confuse the players who are going to use your gui.  It's just sane design.  Following we loop over the commands and create buttons for them in all the windows.  The real juicy part of the script

=== Forging the buttons ===
You could do several things with buttons, put images on them, let them cycle images for state commands or just plain old text.  For this tutorial I'll show you how to put text buttons for state and regular commands.  And put images on build commands.  We can put most of this code in one method.

&lt;code&gt;&lt;pre&gt;
function createMyButton(cmd)
	if(type(cmd) == 'table')then
		buttontext, container, isState, isBuild, texture = findButtonData(cmd)

		local result = container.xstep % MAXBUTTONSONROW
		container.xstep = container.xstep + 1
		local increaseRow = false
		if(result==0)then
			result = MAXBUTTONSONROW
			increaseRow = true
		end	

		
		local color = {0,0,0,1}
		local button = Chili.Button:New {
			parent = container,
			x = 80 * (result-1),
			y = 38 * (container.ystep-1),
			padding = {5, 5, 5, 5},
			margin = {0, 0, 0, 0},
			minWidth = 40,
			minHeight = 40,
			caption = buttontext,
			isDisabled = false,
			cmdid = cmd.id,
			OnMouseDown = {ClickFunc},
		}
		
		if texture then
			if DEBUG then Spring.Echo(&quot;texture&quot;,texture) end
			button:Resize(80,80)
			image= Chili.Image:New {
				width=&quot;100%&quot;;
				height=&quot;90%&quot;;
				y=&quot;6%&quot;;
				keepAspect = true,	--isState;
				file = texture;
				parent = button;
			}		
		end
		
		if(increaseRow)then
			container.ystep = container.ystep+1
		end		
	end
end
&lt;/pre&gt;&lt;/code&gt;

The button creation method , recieves a cmd from the cmd array we filtered earlier.  Now for some reason the last command isn't an array but just a number so we'll have to write a check for that, not to crash our script.  next we will need information from the given command.  We have to determine if it's a regular command, state command or build command.  It is also important to know what the content of the button will be, for state commands we want to know the text of the state we are in, for build icons we want buildpics.  The buildpic to use is basicly the name of the unit file with a #- in front.  You can see in the findButtonData we concatanate this and put it in the texture var.  We return all that info back to the createbutton method.

After we have all the info we use a bit of XY math to determine where the button will be put.  I'm not going to deep into this cause I suck at math explainations.  But you'll figure it out do take notice of the constant MAXBUTTONSONROW, we intitialised this at the start of the script.  The following part is where we create the button.  The captiontext is the text you will see on the button.  There is also one more important part.  OnMouseDown = {ClickFunc} , this tells what method has to be performed once you go onMouseDown on the button.  Think of it as a onActionPerformed of a JAVA button.  Here is the code that gets executed once you press it

&lt;code&gt;&lt;pre&gt;
function ClickFunc(chiliButton, x, y, button, mods) 
	local index = Spring.GetCmdDescIndex(chiliButton.cmdid)
	if (index) then
		local left, right = (button == 1), (button == 3)
		local alt, ctrl, meta, shift = mods.alt, mods.ctrl, mods.meta, mods.shift

		if DEBUG then Spring.Echo(&quot;active command set to &quot;, chiliButton.cmdid) end
		Spring.SetActiveCommand(index, button, left, right, alt, ctrl, meta, shift)
	end
end
&lt;/pre&gt;&lt;/code&gt;

Basicly we get the current mouseState and then decide if an alt, shift or ctrl button is pressed as well, then we decide if the left or right button is pressed and set the next active command that should occure.  The command to be exectued is set on the button when we created it in cmdid.  Carrying on from the createbutton method, you'll see that we check if a texture was returned from the cmd info method earlier.  This would mean we have a build command, and if so you'll see we attach an image to the button.  The last line is still a bit of XY math to determine if next time we'll have to switch to another row by increasing the Y on the current container, who was given to the createbutton method when we called it.

=== Final script ===
&lt;code&gt;&lt;pre&gt;
function widget:GetInfo()
	return {
		name		= &quot;command list window&quot;,
		desc		= &quot;ChiliUi window that contains all the commands a unit has&quot;,
		author		= &quot;Sunspot&quot;,
		date		= &quot;2011-06-15&quot;,
		license     = &quot;GNU GPL v2&quot;,
		layer		= math.huge,
		enabled   	= true,
		handler		= true,
	}
end
-- INCLUDES
VFS.Include(&quot;LuaRules/Gadgets/Includes/utilities.lua&quot;)

-- CONSTANTS
local MAXBUTTONSONROW = 3
local COMMANDSTOEXCLUDE = {&quot;timewait&quot;,&quot;deathwait&quot;,&quot;squadwait&quot;,&quot;gatherwait&quot;,&quot;loadonto&quot;,&quot;nextmenu&quot;,&quot;prevmenu&quot;}
local Chili

-- MEMBERS
local x
local y
local imageDir = 'LuaUI/Images/commands/'
local commandWindow
local stateCommandWindow
local buildCommandWindow
local updateRequired = true

-- CONTROLS
local spGetActiveCommand 	= Spring.GetActiveCommand
local spGetActiveCmdDesc 	= Spring.GetActiveCmdDesc
local spGetSelectedUnits    = Spring.GetSelectedUnits
local spSendCommands        = Spring.SendCommands


-- SCRIPT FUNCTIONS
function LayoutHandler(xIcons, yIcons, cmdCount, commands)
	widgetHandler.commands   = commands
	widgetHandler.commands.n = cmdCount
	widgetHandler:CommandsChanged()
	local reParamsCmds = {}
	local customCmds = {}

	return &quot;&quot;, xIcons, yIcons, {}, customCmds, {}, {}, {}, {}, reParamsCmds, {[1337]=9001}
end

function ClickFunc(chiliButton, x, y, button, mods) 
	local index = Spring.GetCmdDescIndex(chiliButton.cmdid)
	if (index) then
		local left, right = (button == 1), (button == 3)
		local alt, ctrl, meta, shift = mods.alt, mods.ctrl, mods.meta, mods.shift

		if DEBUG then Spring.Echo(&quot;active command set to &quot;, chiliButton.cmdid) end
		Spring.SetActiveCommand(index, button, left, right, alt, ctrl, meta, shift)
	end
end

-- Returns the caption, parent container and commandtype of the button	
function findButtonData(cmd)
	local isState = (cmd.type == CMDTYPE.ICON_MODE and #cmd.params &gt; 1)
	local isBuild = (cmd.id &lt; 0)	
	local buttontext = &quot;&quot;
	local container
	local texture = nil
	if not isState and not isBuild then
		buttontext = cmd.name
		container = commandWindow
	elseif isState then
		local indexChoice = cmd.params[1] + 2
		buttontext = cmd.params[indexChoice]
		container = stateCommandWindow
	else
		container = buildCommandWindow
		texture = '#'..-cmd.id
	end
	return buttontext, container, isState, isBuild, texture	
end

function createMyButton(cmd)
	if(type(cmd) == 'table')then
		buttontext, container, isState, isBuild, texture = findButtonData(cmd)

		local result = container.xstep % MAXBUTTONSONROW
		container.xstep = container.xstep + 1
		local increaseRow = false
		if(result==0)then
			result = MAXBUTTONSONROW
			increaseRow = true
		end	

		
		local color = {0,0,0,1}
		local button = Chili.Button:New {
			parent = container,
			x = 80 * (result-1),
			y = 38 * (container.ystep-1),
			padding = {5, 5, 5, 5},
			margin = {0, 0, 0, 0},
			minWidth = 40,
			minHeight = 40,
			caption = buttontext,
			isDisabled = false,
			cmdid = cmd.id,
			OnMouseDown = {ClickFunc},
		}
		
		if texture then
			if DEBUG then Spring.Echo(&quot;texture&quot;,texture) end
			button:Resize(80,80)
			image= Chili.Image:New {
				width=&quot;100%&quot;;
				height=&quot;90%&quot;;
				y=&quot;6%&quot;;
				keepAspect = true,	--isState;
				file = texture;
				parent = button;
			}		
		end
		
		if(increaseRow)then
			container.ystep = container.ystep+1
		end		
	end
end

function filterUnwanted(commands)
	local uniqueList = {}
	if DEBUG then Spring.Echo(&quot;Total commands &quot;, #commands) end
	if not(#commands == 0)then
		j = 1
		for _, cmd in ipairs(commands) do
			if DEBUG then Spring.Echo(&quot;Adding command &quot;, cmd.action) end
			if not table.contains(COMMANDSTOEXCLUDE,cmd.action) then
				uniqueList[j] = cmd
				j = j + 1
			end
		end
	end
	return uniqueList
end

function resetWindow(container)
	container:ClearChildren()
	container.xstep = 1
	container.ystep = 1
end

function loadPanel()
	resetWindow(commandWindow)
	resetWindow(stateCommandWindow)
	resetWindow(buildCommandWindow)
	local commands = Spring.GetActiveCmdDescs()
	commands = filterUnwanted(commands)
	table.sort(commands,function(x,y) return x.action &lt; y.action end)
	for cmdid, cmd in pairs(commands) do
		rowcount = createMyButton(commands[cmdid]) 
	end
end

-- WIDGET CODE
function widget:Initialize()
	widgetHandler:ConfigLayoutHandler(LayoutHandler)
	Spring.ForceLayoutUpdate()
	spSendCommands({&quot;tooltip 0&quot;})
	
	if (not WG.Chili) then
		widgetHandler:RemoveWidget()
		return
	end

	Chili = WG.Chili
	local screen0 = Chili.Screen0
		
	commandWindow = Chili.Control:New{
		x = 0,
		y = 0,
		width = &quot;100%&quot;,
		height = &quot;40%&quot;,
		xstep = 1,
		ystep = 1,
		draggable = false,
		resizable = false,
		dragUseGrip = false,		
		children = {},
	}

	stateCommandWindow = Chili.Control:New{
		x = 0,
		y = &quot;40%&quot;,
		width = &quot;100%&quot;,
		height = &quot;20%&quot;,
		xstep = 1,
		ystep = 1,
		draggable = false,
		resizable = false,
		dragUseGrip = false,		
		children = {},
	}	

	buildCommandWindow = Chili.Control:New{
		x = 0,
		y = &quot;60%&quot;,
		width = &quot;100%&quot;,
		height = &quot;40%&quot;,
		xstep = 1,
		ystep = 1,
		draggable = false,
		resizable = false,
		dragUseGrip = false,		
		children = {},
	}		
	
	window0 = Chili.Window:New{
		x = '50%',
		y = '15%',	
		dockable = true,
		parent = screen0,
		caption = &quot;&quot;,
		draggable = true,
		resizable = true,
		dragUseGrip = true,
		clientWidth = 400,
		clientHeight = 200,
		backgroundColor = {0,0,0,1},
		skinName  = &quot;DarkGlass&quot;,		
		children = {commandWindow,stateCommandWindow,buildCommandWindow},
	}
	
end

function widget:CommandsChanged()
	if DEBUG then Spring.Echo(&quot;commandChanged called&quot;) end
	updateRequired = true
end

function widget:DrawScreen()
    if updateRequired then
        updateRequired = false
		loadPanel()
    end
end

function widget:Shutdown()
  widgetHandler:ConfigLayoutHandler(nil)
  Spring.ForceLayoutUpdate()
  spSendCommands({&quot;tooltip 1&quot;})
end
&lt;/pre&gt;&lt;/code&gt;

There we have it, maybe a bit complicated but it's completly possible to remove the nasty stock ui and build your own fancy chili UI.  I hope these last 3 tutorials where usefull and you will build some very fine chili gui's

[[Category:Libraries]]</text>
      <sha1>o024bjvgjzj0cb0dg63ruoh9s9opg96</sha1>
    </revision>
  </page>
  <page>
    <title>Chili:Tutorial Dynamic Label Content</title>
    <ns>0</ns>
    <id>3117</id>
    <revision>
      <id>26863</id>
      <parentid>26387</parentid>
      <timestamp>2013-03-23T17:54:47Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>-&gt;[[Category:Libraries]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11385">== Dynamic label updating ==
=== Preparation ===
Having windows with labels on screen is a fun thing.  Although you probably want to change the contents of those labels if some event happens ingame.  For this tutorial we are going to change a label everytime a unit gets destroyed.

as before we are going to establish a basic structure for our code.  However we are going to need 4 scripts now.
&lt;pre&gt; 
- LuaRules\Gadgets\Includes\messages.lua
- LuaRules\Gadgets\Includes\utilities.lua
- LuaRules\Gadgets\units_destroyed_counter.lua
- LuaUI\widgets\gui_chili_unitdestroyedwindow.lua
&lt;/pre&gt;

In the messages.lua we are going to put global constants that will prefix interface messages between the engine rules code and the widget ui code.  Utilities.lua will contain handy utitliy functions like tokenizing strings or array debug code.  Units_destroyed_counter.lua will be used as engine rule code to keep track of the amount of units destroyed.  Gui_chili_unitdestroyedwindow.lua will contain the code to display the amount of units destroyed.

=== Units_destroyed_counter.lua ===
We will start this page the same way as we did with hello world.

&lt;code&gt;&lt;pre&gt;
function gadget:GetInfo()
	return {
		name      = &quot;units destroyed counter&quot;,
		desc      = &quot;Keeps track of the destroyed units in game (including unfinished units, 
                            that timeout)&quot;,
		author    = &quot;Sunspot&quot;,
		date      = &quot;2011-06-19&quot;,
		license   = &quot;GNU GPL v2&quot;,
		layer     = -50,
		enabled   = true
	}
end

-- INCLUDES
VFS.Include(&quot;LuaRules/Gadgets/Includes/utilities.lua&quot;)
VFS.Include(&quot;LuaRules/Gadgets/Includes/messagetypes.lua&quot;)

-- CONSTANTS
local DEBUG	= true

-- MEMBERS
local unitDestroyedCounter = 0

-- SPEEDUPS
local Echo         = Spring.Echo
&lt;/pre&gt;&lt;/code&gt;

As you see 2 of the scripts mentioned earlier will be included in this script in the Includes section.  I'll elaborate on them later but for now just put them there.  In the Constants section I created a DEBUG constant, this constant will be your friend in later development.  Especially if you have to give support to users (ofcourse it's the users fault !) if the code doesn't work anymore.  In the Members section we have unitDestroyedCounter this counter will keep track of the destroyed units thru the entire lifetime of the script.  Synced control section speaks for itselfs we cache the Spring.Echo function because we probably gonna use it a lot and we need to think about performance.

Next up we will have to init the gadget and create the method to increase the counter everytime a unit gets destroyed.  Not really all that difficult but then raises the question how are we going to notify the widget this counter increased ... cause thats an entire other script.  Well the sollution is to let the engine send a message.  Here is how.

&lt;code&gt;&lt;pre&gt;
function gadget:GetInfo()
	return {
		name      = &quot;units destroyed counter&quot;,
		desc      = &quot;Keeps track of the destroyed units in game (including unfinished units, 
                            that timeout)&quot;,
		author    = &quot;Sunspot&quot;,
		date      = &quot;2011-06-19&quot;,
		license   = &quot;GNU GPL v2&quot;,
		layer     = -50,
		enabled   = true
	}
end

-- SYNCED ONLY
if (not gadgetHandler:IsSyncedCode()) then
	return
end

-- INCLUDES
VFS.Include(&quot;LuaRules/Gadgets/Includes/utilities.lua&quot;)
VFS.Include(&quot;LuaRules/Gadgets/Includes/messagetypes.lua&quot;)

-- CONSTANTS
local DEBUG	= true

-- MEMBERS
local unitDestroyedCounter = 0

-- SPEEDUPS
local Echo         = Spring.Echo

function gadget:GameStart()
	unitDestroyedCounter = 0
end
	
function gadget:UnitDestroyed(unitID, unitDefID, teamID, attackerID)
	unitDestroyedCounter = unitDestroyedCounter + 1
	if DEBUG then Echo(&quot;Sending message type &quot; .. UNITDESTROYEDUPDATE .. &quot; 
               params &quot;, unitDestroyedCounter) end
	MessageDispatcher(UNITDESTROYEDUPDATE .. &quot;-&quot; .. unitDestroyedCounter) 
end	
&lt;/pre&gt;&lt;/code&gt;

Few things to notice here I've added a new constant that we will use to send messages out the MessageDispatcher.  Also since we are sending data that each client needs to recieve we have to do everything synced.  We make sure of that by making the gadget work with synced code.  Next we call the GameStart method to initialise the unitDestroyedCounter.  It's not really needed because we allready initalised it to 0 at variable creation, but it's never a bad habit to do so.  The UnitDestroyed method gives you some variables to work with like the unit that got destroyed , what team he belonged to and the unit who killed it.  All nice params to work with but not needed in this tutorial, we will just increase the unitDestroyedCounter with one and send a message out.  Notice the format of the message, it start with the prefix of the type of message thats a constant in the messages.lua include followed by the parameters separated by &quot;-&quot;.  What sign you use to seperate isn't important as long as it does not appear in your regular text and parameters.  In fact there is nothing wrong in making it a constant in messages.lua either.  For readability of the tutorial however I didn't.

===messages.lua===
A simple and easy file where we keep our message constants in this case the UNITDESTROYEDUPDATE one.
&lt;code&gt;&lt;pre&gt;
UNITDESTROYEDUPDATE = &quot;UNITDESTROYEDUPDATE &quot; --format: UNITDESTROYEDUPDATE-(unitDestroyedCounter)
&lt;/pre&gt;&lt;/code&gt;

===utilities.lua===
Make this file your standard file for all little utilities that you will probably use often in your developing adventures in Spring.  Let me start you off, with the following two methods that will be very handy, and one of them even needed in the tutorial

&lt;code&gt;&lt;pre&gt;
function to_string(data, indent)      
	local str = &quot;&quot;        
	if(indent == nil) then          
		indent = 0      
	end          
	local indenter = &quot;    &quot;      
	-- Check the type      
	if(type(data) == &quot;string&quot;) then          
		str = str .. (indenter):rep(indent) .. data .. &quot;\n&quot;      
	elseif(type(data) == &quot;number&quot;) then          
		str = str .. (indenter):rep(indent) .. data .. &quot;\n&quot;      
	elseif(type(data) == &quot;boolean&quot;) then          
		if(data == true) then              
			str = str .. &quot;true&quot;          
		else              
			str = str .. &quot;false&quot;          
		end      
	elseif(type(data) == &quot;table&quot;) then          
		local i, v          
		for i, v in pairs(data) do              
		-- Check for a table in a table              
			if(type(v) == &quot;table&quot;) then                  
				str = str .. (indenter):rep(indent) .. i .. &quot;:\n&quot;              
                        str = str .. to_string(v, indent + 2)              
			else                  
				str = str .. (indenter):rep(indent) .. i .. &quot;: &quot; ..  to_string(v, 0)             
			end          
		end          
	elseif(type(data) == &quot;function&quot;) then                  
		str = str .. (indenter):rep(indent) .. 'function' .. &quot;\n&quot;      
	else          
		echo(1, &quot;Error: unknown data type: %s&quot;, type(data))      
	end        
	return str  
end  

function split(pString, pPattern)
	local tableIndex = 1
	local Table = {} -- NOTE: use {n = 0} in Lua-5.0
	local fpat = &quot;(.-)&quot; .. pPattern
	local last_end = 1
	local s, e, cap = pString:find(fpat, 1)
	while s do
		if s ~= 1 or cap ~= &quot;&quot; then
			Table[tableIndex] = cap
			tableIndex = tableIndex + 1
		end
		last_end = e+1
		s, e, cap = pString:find(fpat, last_end)
	end
	if last_end &lt;= #pString then
		cap = pString:sub(last_end)
		Table[tableIndex] = cap
		tableIndex = tableIndex + 1
	end
	return Table
end
&lt;/pre&gt;&lt;/code&gt;

the to_string method, will be very helpfull once you start debugging arrays.  with it you can get a text representation of your array vars.  The split method is what I think is a decent regular language split method.  Unfourtunatly I didn't find any stringtokenizer method as java has.  So it will have to do

===gui_chili_unitdestroyedwindow.lua===
This is our gui script that puts the destroyedcounter on the screen and updates it.  It will need a way to recieve the messages send by the rules script, interpret them and then update the screen.  Don't worry it's not as hard as it sounds.  Look here.

&lt;code&gt;&lt;pre&gt;
function widget:GetInfo()
	return {
		name		= &quot;unit destroyed window&quot;,
		desc		= &quot;window to keep the unitdestroyed counter&quot;,
		author		= &quot;Sunspot&quot;,
		date		= &quot;2011-06-19&quot;,
		license         = &quot;GNU GPL v2&quot;,
		layer		= 2,
		enabled   	= true  --  loaded by default?
	}
end

-- INCLUDES
VFS.Include(&quot;LuaRules/Gadgets/Includes/utilities.lua&quot;)
VFS.Include(&quot;LuaRules/Gadgets/Includes/messagetypes.lua&quot;)

-- CONSTANTS
local DEBUG = true
local LOCALPLAYER = Spring.GetMyPlayerID()

-- MEMBERS
local Chili
local unitsDestroyedLabel
local unitsDestroyedWindow


-- SCRIPT FUNCTIONS
function doUnitDestroyedUpdate(value)
	if DEBUG then Spring.Echo(&quot;changing unitsdestroyed to &quot; .. value) end
	unitsDestroyedLabel:SetCaption(value)
end


function widget:Initialize()
	if (not WG.Chili) then
		widgetHandler:RemoveWidget()
		return
	end

	Chili = WG.Chili
	local screen0 = Chili.Screen0
	
	unitsDestroyedWindow = Chili.Window:New{
		x = '50%',
		y = '50%',	
		dockable = true,
		parent = screen0,
		caption = &quot;units destroyed&quot;,
		draggable = true,
		resizable = false,
		dragUseGrip = true,
		clientWidth = 100,
		clientHeight = 20,
		backgroundColor = {0.8,0.8,0.8,0.9},
	}
	
	unitsDestroyedLabel = Chili.Label:New{
		x = &quot;50%&quot;,
		y = '50%',
		parent = unitsDestroyedWindow,
		caption = 0,
		fontsize = 13,
		autosize = false,
		textColor = {1,1,1,1},
	}	
end


function widget:RecvLuaMsg(msg, playerID)
	if (playerID ~= LOCALPLAYER) then return end
	
	local tokens = split(msg,&quot;-&quot;);
	if(tokens[1] == UNITDESTROYEDUPDATE)then
		if DEBUG then Spring.Echo(&quot;unitdestroyed msg recieved : &quot; .. msg) end		
		doUnitDestroyedUpdate(tokens[2])
	end
end
&lt;/pre&gt;&lt;/code&gt;

Let me walk you thru this.  First of all a new constant, you need to know who you are ... strange I know ... but if you don't you will have problems in the RecvLuaMsg method.  Everytime some script throws the SendLuaMsg method, you'll trigger this method.  This will happen for every player since, every player threw the msg due to the sync code.  You are only interested in your own messages so you put in the check &quot;if (playerID ~= LOCALPLAYER) then return end&quot;.  Once you have determined the msg is for you, you need to learn how read it.  As we discussed earlier , there isn't a tokenizer method, but we can use the split method we put in our utilities script.  The first token will be the messagetype, while every following token are the paramters.  In case of different type of messages being send, you first check what message type and next you do the action for the message.  In our case we make an update to the label unit destroyed.

The label update is nothing special but due take note about this.  The Chili framework will provide you with methods to update stuff.  You could have done in this case for example
&lt;code&gt;&lt;pre&gt;
--Disclaimer don't use this
unitsDestroyedLabel.value = &quot;new value&quot;
unitsDestroyedWindow:RemoveChild(unitsDestroyedLabel)
unitsDestroyedWindow:AddChild(unitsDestroyedLabel)
&lt;/pre&gt;&lt;/code&gt;
This would refresh the window with a changed label but why go the long way around.  The Label class has a handy method SetCaption(x) that will , update your label and refresh it, from within the framework

And there we have it , you have learned how to send messages from engine rule code to widget ui code and learned how to update Chili objects !

[[Category:Libraries]]</text>
      <sha1>h6lmurngttgzzzywbs968cb7c5odbqj</sha1>
    </revision>
  </page>
  <page>
    <title>Chili:Tutorial Hello World</title>
    <ns>0</ns>
    <id>3116</id>
    <revision>
      <id>26864</id>
      <parentid>26386</parentid>
      <timestamp>2013-03-23T17:54:58Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>-&gt;[[Category:Libraries]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5175">== Hello World ==

As in every first baby steps in a framework we are going to get hello world to work.  First we are going to need to make a script file in the widgets directory.  It's usually a good idea to keep the chili implemented files seperate from the other script files in naming convention.  

Create a file gui_chili_helloworld.lua and copy following basic structure.
&lt;code&gt;&lt;pre&gt; -- INCLUDES
 -- CONSTANTS
 -- SYNCED CONTROLS
 -- CHILI CONTROLS
 -- MEMBERS
 -- SCRIPT FUNCTIONS
 -- WIDGET CODE&lt;/pre&gt;&lt;/code&gt;

As in every widget code you will need the basic info part telling about the widget. Who made it what it serves for and who the author is etc...  Next you will also need the code for initializing the widget.  For this example, we are going to need a few Chili controls.  We have need for the Chili, Window and Label control.  That makes the script look like this now.

&lt;code&gt;&lt;pre&gt; function widget:GetInfo()
 	return {
 		name		= &quot;helloworld&quot;,
 		desc		= &quot;hello world tutorial&quot;,
 		author		= &quot;Sunspot&quot;,
 		date		= &quot;2011-06-19&quot;,
 		license         = &quot;GNU GPL v2&quot;,
 		layer		= 1,
 		enabled   	= true
 	}
 end
 
 -- INCLUDES
 -- CONSTANTS
 -- SYNCED CONTROLS
 -- CHILI CONTROLS
 local Chili
  
 -- MEMBERS
 -- SCRIPT FUNCTIONS
 -- WIDGET CODE

 function widget:Initialize()	
 	if (not WG.Chili) then
 		widgetHandler:RemoveWidget()
 		return
 	end
 	
 	Chili      = WG.Chili
 	local screen0 = Chili.Screen0
 end&lt;/pre&gt;&lt;/code&gt;

Before trying out the widget, you should also create an empty file lockluaui.txt in your GameData folder (http://springrts.com/wiki/Category:Gamedata). This forces spring to load luaui.lua from the game archive instead of user's local.

Now everything you need to start creating windows and labels will be initialised and we can go on to the gritty fun stuff.  We are going to use a label to contain the hello world string.  This Label will then be put on a Window wich on his turn will be put on the gamescreen.  You see what I'm going for, everything in Chili is nested on eachother like lego building blocks.  The resulting script will look like this now.

&lt;code&gt;&lt;pre&gt; function widget:GetInfo()
 	return {
 		name		= &quot;helloworld&quot;,
 		desc		= &quot;hello world tutorial&quot;,
 		author		= &quot;Sunspot&quot;,
 		date		= &quot;2011-06-19&quot;,
 		license         = &quot;GNU GPL v2&quot;,
 		layer		= 1,
 		enabled   	= true
 	}
 end
 -- INCLUDES
 -- CONSTANTS
 -- SYNCED CONTROLS
 -- CHILI CONTROLS
 local Chili
 
 -- MEMBERS
 local helloWorldLabel
 local helloWorldWindow
 
 -- SCRIPT FUNCTIONS
 -- WIDGET CODE
 function widget:Initialize()	
 	if (not WG.Chili) then
 		widgetHandler:RemoveWidget()
 		return
 	end
 	
 	Chili      = WG.Chili
 	local screen0 = Chili.Screen0

 	helloWorldWindow = Chili.Window:New{
 		x = '50%',
 		y = '50%',	
 		dockable = true,
 		parent = screen0,
 		caption = &quot;my hello world window&quot;,
 		clientWidth = 500,
 		clientHeight = 40,
 		backgroundColor = {0.8,0.8,0.8,0.9},
 	}	
 	
 	helloWorldLabel = Chili.Label:New{
 		x = '50%',
 		y = '50%',
 		width = 12,
 		parent = helloWorldWindow,
 		caption = &quot;Hello world&quot;,
 		fontsize = 13,
 		textColor = {1,1,1,1},
 	}
 end&lt;/pre&gt;&lt;/code&gt;

This would give you , your first Chili UI achievement.  A hello world window in Spring.  This wouldn't be a good tutorial if their wouldn't be some explaination to the code.  First of all we create the window, followed by creating the label.  We nest the label on the window and the window on the screen.  I've only included  a few basic parameters but they fit in the scope of this tutorial.

'''&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;''' : These are your basic x and y coords where you want the object to come on the main screen you can use absolute values , or relative percentage values.  The percentage values are put as a string, the absolute once as integers.  You can also use negeative integers, which means you will align from the right instead of the left.

'''&lt;code&gt;dockable&lt;/code&gt;''' : boolean value that states if you will be able to dock or undock this window, sofar I only saw this work if you also include the public domain gui_chili_docking.lua script in the widget directory

'''&lt;code&gt;parent&lt;/code&gt;''' : The Chili object where the window will be nested on.

'''&lt;code&gt;caption&lt;/code&gt;''' : Windows can have a title, you put this title here as a string

'''&lt;code&gt;backgroundColor&lt;/code&gt;''' : R, G, B, A values for the background of your window

'''&lt;code&gt;clientWidth&lt;/code&gt;''' : &lt;not sure yet what this does, but it seems to have to be there&gt;

'''&lt;code&gt;clientHeight&lt;/code&gt;''' : &lt;not sure yet what this does, but it seems to have to be there&gt;

'''&lt;code&gt;width&lt;/code&gt;''' : width of your object, kinda obvious, although if the width is smaller then the text of your label your label will be abbrivated with ... .  take note that you can also use percentage values here as a string to define the width fe &quot;20%&quot;

'''&lt;code&gt;fontsize&lt;/code&gt;''' : size of your label font

'''&lt;code&gt;textColor&lt;/code&gt;''' : R, G, B, A values for your font

That means if you resize the parent the anchored object will move and resize along.  Using these kinda implies that x and y are invalidated.  But I didn't see much change with or without x and y.

[[Category:Libraries]]</text>
      <sha1>kd4fd60acx6rtlfzgjt82xpqfi9aikx</sha1>
    </revision>
  </page>
  <page>
    <title>Chobby</title>
    <ns>0</ns>
    <id>3774</id>
    <revision>
      <id>30263</id>
      <timestamp>2016-10-11T00:34:42Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>Created page with &quot;Chobby is a in-engine Lobby.  https://github.com/Spring-Chobby/Chobby  [[Category:Lobby]]&quot;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="89">Chobby is a in-engine Lobby.

https://github.com/Spring-Chobby/Chobby

[[Category:Lobby]]</text>
      <sha1>4m8iflwmswh8hn84v4qt6e5gxcgwlyq</sha1>
    </revision>
  </page>
  <page>
    <title>Chokepoint</title>
    <ns>0</ns>
    <id>1399</id>
    <revision>
      <id>12524</id>
      <parentid>11215</parentid>
      <timestamp>2007-07-17T23:09:41Z</timestamp>
      <contributor>
        <username>Antispam</username>
        <id>2247</id>
      </contributor>
      <comment>removed spam! obviously no1 had read this page in a while :)</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1720">A ''chokepoint'' is an area of a map that is hard to pass and easily defensible. Most are narrow, limiting the rate at which units can move through them, with high hills or deep water on either side. Chokepoints are natural locations for defensive lines, and maps that are very chokepoint-heavy tend to encourage porcing.

Common practice is for both players to expand through several chokepoints until they meet the opponent's forces, then fortify the border chokepoints and use artillery to pound away at the enemy's fortifications. Pushing too far can leave you open to artillery fire from unassailable enemy positions, while not pushing far enough can leave too much metal in the hands of your enemy. Once a player's started producing level 2 units, assaults on chokepoints tend to become feasible again, as most fixed defences capable of repelling a focus assault by L2 units are quite expensive.

Most mods offer ways around chokepoints. In OTA-based mods, there are a number of options. Aircraft are the simplest, and can just fly over any chokepoint. This can work well, but a sensible opponent will have heavy AA protection for his base, making air assaults troublesome. Chokepoints bordered by hills can sometimes be passed by KBots, but often the hills are too steep even for them to climb. In this case, truly all-terrain units like the Spider become invaluable. Even if no other all-terrain units are available, Spiders can swarm over the hills and paralyze the defences before a proper assault. Against chokepoints bordered by deep water, hovercraft or amphibious assaults can give one's enemy a nasty surprise.



''' [[Strategy_and_Tactics|&lt;- Back to Strategy and Tactics page]]'''

[[Category:Strategy]]</text>
      <sha1>smp87nrj4qmvdkod9h7zpsqjtoipq19</sha1>
    </revision>
  </page>
  <page>
    <title>Clans/I</title>
    <ns>0</ns>
    <id>2861</id>
    <revision>
      <id>22701</id>
      <parentid>22700</parentid>
      <timestamp>2011-08-22T23:48:37Z</timestamp>
      <contributor>
        <username>Knorke</username>
        <id>833</id>
      </contributor>
      <comment>[[Category:Clans]] !!!</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6425">&lt;center&gt;[[File:Imperial_Eagle_fullgold.png]]&lt;/center&gt;


----
----


'''&quot;Imperium&quot;''' - clan of people who plays for fun, and pretending to be 'pro'. Most of clan members are Poles, but even if you are not Pole and you want to join glorious '''Imperium''', visit our channel '''#IMPERIUM''' or speak with members.


&lt;center&gt;&lt;big&gt; '''Imperial device/hymn''' &lt;/big&gt;

ALL HAIL IMPERIUM

ALL HAIL EMPEROR

ALL HAIL TO US

ALL WILL BOW BEFORE US

HEAR ME ROAR

IMPERIUM IS COMING 


&lt;/center&gt;
----
----


&lt;center&gt;&lt;big&gt; '''Conrad I the Magnificent''' &lt;/big&gt;
His Imperial Majesty, the Emperor of Imperium, Supreme Protector of Galaxy.


&lt;/center&gt;
----
----


&lt;center&gt;&lt;big&gt; '''Consilium Imperialis''' &lt;/big&gt;


'''Silversurfer'''

'''japko'''

'''Pipboy'''

'''Tluszczeboy'''


&lt;/center&gt;
----
----


&lt;center&gt; &lt;big&gt;'''Imperial History'''&lt;/big&gt;&lt;/center&gt;


A long time ago in a galaxy far, far away...

Whole cosmos holds its breath, when it happened. Emanation of overwhelming power began to shine in Totala Galaxy. People and intelligent robots living in it didnt know what to do in the face of such a great event. Suddenly, big explosion appeard. Explosion of enormous glory and might, preceded by a stream of pride.

He was born. 

The Emperor. 

Being of unimaginable might and power, emanating such a powerful energy that the space curved around Him. When He opened eyes, they flashed with the power of soul, a noble and just spirit of great power.

And He saw society.

Society of humankind ruled by galactic government â€“ The Core. Society living in peace and prosperity. The Emperor watched grow of galactic state, but quickly get bored of that. He sent his avatars as elusive shadows to Core Prime and began to whisperâ€¦

â€œYour mastery of technology have is unmatched, but you still dying. Flesh of mortals is susceptible to illness and harm. Wouldnâ€™t it be better to leave the mortal body and make mind immortal?â€

Then Core invited technology called â€œpatterningâ€ and ordered that all citizens must undergo this procedure. But Emperor appeared at edges of galaxy and began to whisper againâ€¦

â€œThe Core has no right to decide about life and death of humans. If we become machines, we lose humanity. Friendship and love, all the emotions will disappear and only cold eternity will remain. This madness need to be resisted.â€

The War spread throughout whole galaxy. What was initially a war of ideas, quickly became a bloody conflict without end. Both factions desired to destroy enemy, no matter with what costs.

When He saw effects of His intrigues, The Emperor lolâ€™d.

War lasted for 4000 years and finally Arm forces destroyed Core after assault of capital planet Core Prime. At the last moment Emperor grabbed Core Commander and hid him from Arm sight in a distant star system. Arm started to rebuild society destroyed by War, but Emperor was bored and lost interest of this galaxy.

He heard something about great CORE plan to destroy universe, but He quickly forgot about that.

Many millenias later, he heard that shadowy cabal known as Swedish Yankspankers breathed new life into Totala Galaxy, now called Spring Galaxy. Intrigued Emperor returned and he saw another Great Conflict â€“ not for ideas, but for fun and lulz. Hundreds of Core and Arm commanders fighting each other with their forces, new technologies, even odd  chicken aliens.

Then He marched into battle with hymns of glory on mouth. He fought in hundreds of battles in biggest BA System, and dozens in smaller â€“ NOTA, CA, XTA.

But He felt lonely. So He said: â€œLET [I]T BE!!!â€ and the Imperium was created.

To the imperial forces soon joined knowledged commanders, like Stainboy (known now as Silversurfer), Japko, Pipboy, also Forgotmypass2 (known now as Tluszczeboy). Imperium won many battles in galaxy and everyone knows name of The Emperor. Another commanders joined Imperium â€“ SkyCaptain, insane Clobber, and even more forgotten names. But all the time, core of the imperial forces were these four who joined Imperium at the every beginning. So mighty Emperor created Consilium Imperialis â€“ ruling body of his monarchy and promoted them into it. Stainboy became imperial Chief-of-Staff and Second-in-command, while Forgotmypass2 received an office of Imperial Inquisitor.

Glory and power of Imperium still grows, the Emperor as first used biggest weapon in Senna MapMod System (known now as Tech Annihilation System), The Tsar Gun. 

It seemed that nothing could stop Imperium, but suddenly a terrible thing happened.

Nobody knew what really happened, but one fact was undeniable â€“ His Imperial Majesty, Conrad I the Magnificent, Emperor of Imperium, Supreme Protector of Galaxy disappeared. People of Imperium cried and Consilium Imperialis was brought before the difficult choice.

Who should rule Imperium during absence of the Emperor? 

Soon japko was elected as regent. He brought imperial forces in new, reborned Zero-K System (formerly CA System) and conquered it in the name of the Emperor. Unfortunately, without presence of its Head, Imperium has become a shadow of its glorious past. Even the establishment of a best communication mumble system by Stainboy, didnâ€™t helped.

Soon Zero-K System was conquered by bloody and unworthy criminal organizations, and Imperium was forced to leave it.


Then He returned.

Happiness of imperial citizens was immeasurable, when The Emperor marched again to The Imperial Throne. Again, whole imperial administration and warfare were linked to His unimaginable powerful mind.

Enemies of the Imperium screamed with fear and anger, when they heard of rebirth of Imperium.

He took in hands imperial scepter and globus cruciger, and took steps to restore the former glory of  Imperium. At first, Emperor decided to conquer Zero-K System again. Even mighty Batman, skilled commander joined his forces.

Although initial successes, He couldnâ€™t resist unworthy opponents. Even Emperor must eat, sleep and rest, and He have another duties also, but His enemies fought their battles without a single break.

â€œRuler must know when to stop his lust of power. My people and commanders are tired of war. We should live in peace and prosperity.â€ â€“ He thought and helped Nooby Cruels to win.

Now, Imperial Peace come to Zero-K System. But Emperor isnâ€™t sleep and waiting to time when He will be able to liberate enslaved people of NC planetsâ€¦
[[Category:Clans]]</text>
      <sha1>k2w5t59lvezesfhkbadvig1e3h8t6bf</sha1>
    </revision>
  </page>
  <page>
    <title>Clans/KoS</title>
    <ns>0</ns>
    <id>2409</id>
    <revision>
      <id>26426</id>
      <parentid>19348</parentid>
      <timestamp>2013-03-09T20:04:47Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>[[Category:Clans]] for now</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="305">[KoS] Kings of Spring is a clan of the RTS game TASpring.

This clan was founded by [KoS]CoolyOriginal on 2007.

In 6/06/2010 the leader CoolyOriginal is back to Spring :)

Old website (good times!):
Website: http://kos.page.vu/ or http://kos.pt.to/ (same website but diferent domains)

[[Category:Clans]]</text>
      <sha1>opmtx1b3d4u3um2dmb41e284clj4tto</sha1>
    </revision>
  </page>
  <page>
    <title>Clans/LCC</title>
    <ns>0</ns>
    <id>2455</id>
    <revision>
      <id>18842</id>
      <parentid>13589</parentid>
      <timestamp>2010-03-13T15:15:22Z</timestamp>
      <contributor>
        <username>Koshi</username>
        <id>2371</id>
      </contributor>
      <comment>fix category</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1543">'''L'''''33t '''C'''ommander'S '''C'''luB

'''Former name''' - '''L'''33t '''C'''PU '''C'''reW

'''Clan Website''' - http://www.lcc-clan.com

''*'''Members'''''
  
*[LCC]LordMatt '''U.S'''                 
*[LCC]quantum '''Italy'''                
*[LCC]Lion_heart[Ck] '''U.S'''            
*[LCC]Dynamoe2 '''U.S'''                   
*[LCC]Baleeted '''Bahrain'''               
*[LCC]Licho '''Czech Republic'''           
*[LCC]det '''U.S'''
*[LCC]hydrix '''U.S'''
*[LCC]Saktoth '''Australia'''
*[LCC]Brawler[LF] '''U.S'''
*[LCC]Islington '''Czech Republic'''
*[LCC]KingRaptor '''Malaysia'''
*[LCC]szgezu[HSSD] '''Hungary'''
*[LCC]Eastwood '''Hungary'''
*[LCC]Teutooni '''Finland'''
*[LCC]Vandervar '''Netherlands'''
*[LCC]SLizer '''Finland'''
*[LCC]Wilsby '''U.K'''
*[LCC]Hael '''Finland'''
*[LCC]Darthvader '''Netherlands'''
*[LCC]TehPwnage '''Phillipines'''
*[LCC]jK   '''Germany'''
*[LCC]Magus_X  '''Brazil'''
*[LCC]SuperKu  '''Norway'''
*[LCC]skymyj   '''Canada'''
''*'''Countries'''''                                           

*'''U.S.'''
*'''U.K.'''
*'''Italy'''
*'''Bahrain'''
*'''Czech Republic'''
*'''Australia'''
*'''Malaysia'''
*'''Hungary'''
*'''Finland'''
*'''Netherlands'''
*'''Finland'''
*'''Phillipines'''
*'''Brazil
*'''Norway'''
*'''Canada'''

''*'''Complete Annihilation players'''''
   '''*[LCC]quantum''' 
   '''*[LCC]Licho'''
 '''  *[LCC]Saktoth''' 
  ''' *[LCC]KingRaptor'''
   '''*[LCC]jK''''''

''*'''Retired Players?'''''

   '''*[LCC]Dynamoe2'''
   '''*[LCC]Hydrix'''
   '''*[LCC]TehPwnage'''

[[Category:Clans]]</text>
      <sha1>flfu4hltvs9w3fb8orp9fn78c0abahh</sha1>
    </revision>
  </page>
  <page>
    <title>Clans/TS</title>
    <ns>0</ns>
    <id>2451</id>
    <revision>
      <id>18911</id>
      <parentid>15337</parentid>
      <timestamp>2010-03-13T17:08:55Z</timestamp>
      <contributor>
        <username>Koshi</username>
        <id>2371</id>
      </contributor>
      <comment>fix category</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="794">[TS] is a group of people who occupy ImAcUp's Teamspeak, 90% of people bearing the tag aren't even regulars on Teamspeak and just do it for lulz.

[TS] isn't a clan and has no heirarchy/leaders (except lulz).

Sefidel, Soul_Stealer, Shadow and LordSpawn are the only regulars worth mentioning, the rest aren't.

----

What LordSpawn said about this article: 
''&quot;SoulStealer loves men!&quot;''

What FarleShadow said about this article:
''&quot;Wtf? Who wrote this? Someone's getting banned!&quot;''

What SoulStealer said about this article:
''&quot;No I don't!&quot;''

What Sefidel said about this article:
''&quot;Duuuuuuuuuuuuuuuuuuude.''

''I'm soooo stoned.''

''Right now''

''Duuuuuuuuuuuuuuuuuuude.&quot;''


No one likes Alcari it lulz.


I know i'm stating the obvious but these people are idiots.

[[Category: Clans]]</text>
      <sha1>e25lvnem4bu6i9xifnttpkokf1bnkxf</sha1>
    </revision>
  </page>
  <page>
    <title>Clans/XHC</title>
    <ns>0</ns>
    <id>1341</id>
    <revision>
      <id>11158</id>
      <parentid>6194</parentid>
      <timestamp>2006-09-27T15:35:07Z</timestamp>
      <contributor>
        <username>FoeOfTheBee</username>
        <id>20</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1189">'''Members,''' 
In no particular order...

*[XHC] Guilty Spark.   '''USA'''
*[XHC] DaveTheBrave.   '''USA'''
*[XHC] Wasp.           '''NZ'''
*[XHC] BigSteve.       '''ENG'''
*[XHC] Diggz2k.        '''USA'''
*[XHC] Machio          '''NL'''
*[XHC] Cabbage.        '''ENG'''

(Howcome I had to add myself, you jerks!)

----


'''Who Can join?''' 

Anyone, however... to become a member you must...

*a) Be Xtremely Handsome
*b) Be Xtremely Handsome
*c) Be Xtremely Handsome

being good at spring will help too :)


----


'''Acronym''' - 
e'''X'''tremely '''H'''andsome '''C'''haps


----

'''History''' - 
In 2006 a crack commando unit of the handsomest spring players were wrongly convicted of a comm bombing crime they didnt commit, these players have since  disappeared into the deepest darkest corners of the spring community... today still wanted by the increasinlgly violent and oppressive spring mods, they survive as gamers of fortune! - if you have a porcing problem, and no one else can help... and if you can find them... you can hire the XHC!!


----

'''Website''' - 
The Chaps have a new website, created by Wasp! Check it out at http://xhc.lonekiewie.com.


[[Category:Clans]]</text>
      <sha1>54hi2jmqv55t4avmh6xuc21gk0tkp76</sha1>
    </revision>
  </page>
  <page>
    <title>Clans/ZXC</title>
    <ns>0</ns>
    <id>2778</id>
    <revision>
      <id>26427</id>
      <parentid>19423</parentid>
      <timestamp>2013-03-09T20:05:04Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>[[Category:Clans]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="559">Polish 4fun clan, although we are getting a little bit serious about playing theese days. We are trying to keep some Polish players in one community.
ZXC clan members:


----
Gigangel
----
bAwu
----
skuz
----
ShAKAL
----
t0
----
trupek
----
maxymilli
----
Nubosabuk
----
Pozer
----
lvkaz
----
skatecik
----
Ulvhedin
----
Makler
----
hoxiu
----
Barteck
----


But if you're not Polish and want to join our clan, just join our forum http://spring.foreo.pl/zapisy-f24.html and write something about you. You can writhe there in your language.

[[Category:Clans]]</text>
      <sha1>erw7aadz304l93lq5lzqbn6qriihaui</sha1>
    </revision>
  </page>
  <page>
    <title>Clans/lol</title>
    <ns>0</ns>
    <id>2804</id>
    <revision>
      <id>18230</id>
      <parentid>18228</parentid>
      <timestamp>2010-02-13T04:01:05Z</timestamp>
      <contributor>
        <username>Kiki</username>
        <id>2739</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3205">''' Thy Lethiferous Ophiophagus Lemures '''

'' Lemures that are lethiferous and ophiophagous? Its more likely than you think! ''


[[Image:Cthulhu.jpg|thumb|150px|left]]
== History ==

Once upon a time, Tribulex and Knobhead were smurfing in BA DSD games. They noticed that it was funny to do stupid things to piss of alot of noobs while still winning by using a combination of trick plays, skill, micro, and atlases. ChanServ, forseeing the future and in a sudden stroke of genious, magically renamed them both to smurfs using the [lol] tag. Not wanting to miss an opportunity to register another useful channel name, Tribulex registered #lol, and oped Knobhead, which resulted in numerous kicks, mutes, and general unfortunate events.

HOWEVER what resulted was a week of good times. Then the clan mysteriously disappeared for over a year. During this time Kiki, goddess of goddesses, secretly developed a crappy lobby bot using springlobby source code. However, the power which was harnessed included player simulation using biologically enhanced artificial intelligence. This was the start of player simulation technology.

[[Image:Leonardo.jpg|thumb|200px|right]]After years of development, Kiki encountered the server god Aegis, who granted her 3 wishes. The first wish was the immediate mute of the meddling ChanServ in the lemures channel. The second wish was a new more flexible system with which to build a simulated spring player. The third was server admin rights. Upon the granting of these wishes, the simulated player was reborn. Through the use of proxy technology that empowered the original Lemures to smurf undetectably, the current simulated player is able to log in from various accounts from around the globe. It is watching over us all, tracking down smurfs, trolls, gnomes, lichos, and moderators. It is spamming flash in BA DSD, and running its boi. Occasionally it punishes beings considered undesirable to Kiki through the use of its automagic combomb.

IT IS CONSPIRING TO KILL US ALL!

No one knows from whence the new age biological lemures are originated. They simply appear. Below is an attempt at the documentation of all current lemures. It is hardly compleat.

== Mission ==

The mission of the lemures is simply to take over the world, starting with the open source realtime strategy game community. So far, plans are running ahead of schedule.

== Members ==

=== Players ===

* [lol]Tribulex: Founder[[Image:decap.jpg|thumb|150px|right]]
* [lol]Knobhead: Co-founder
* [lol]Geam (INACTIVE)
* [lol]Dot
* [lol]Noruas
* [lol]Smelly
* [lol]NotASmurf (INACTIVE)
* [lol]Shift
* [lol]Jools
* [lol]Pintle
* [lol]Grapefruit
* [lol]God 

=== Smurfs ===

* [lol][[Image:antiall.jpg|thumb|150px|right]]
* [lol]lies
* [lol]lious
* [lol]ler
* [lol]ling_to_death
* [lol]mao
* [lol]NaughtyNinja
* [lol]SexySamurai
* [lol]PervertedPewee
* [lol][RoX][KnoX][CoX]
* [lol]DEATHRAY
* [lol]Epicock
* [lol]HappyCock
* [lol]COX
* [lol]footiefucker
* [lol]tooshielicker
* [lol]Gloruas
* [lol]Zoruas
* [lol]Qoruas 

=== Robots ===

* ChanServ - serves our cause through convenient loopholes
* [lol]robot - Mysteriouse Deathe Angele

=== Gods ===

* kiki - actually a goddess

[[category:Clans]]</text>
      <sha1>juh4g3pruljl146bxbqn7tbbi168y84</sha1>
    </revision>
  </page>
  <page>
    <title>Classic Pincer</title>
    <ns>0</ns>
    <id>1785</id>
    <revision>
      <id>12445</id>
      <parentid>11599</parentid>
      <timestamp>2007-07-13T05:48:04Z</timestamp>
      <contributor>
        <username>Neddiedrow</username>
        <id>428</id>
      </contributor>
      <comment>Reverted</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="533">The classic pincer is precisely what it sounds like, the very common tactic of taking two groups and catching your foe between them. It has the disadvantage of diluting your strength by splitting your units, counterbalanced against the fact that an assault from both sides will be considerably harder to react to effectively.

Best used when you already have a small numeric advantage and can successfully hide your units as they approach.


''' [[Strategy_and_Tactics|&lt;- Back to Strategy and Tactics page]]'''

[[category:Strategy]]</text>
      <sha1>qwmr0jwtvjf0onkr5gqwspa6gfmlucj</sha1>
    </revision>
  </page>
  <page>
    <title>Coding Standards</title>
    <ns>0</ns>
    <id>2509</id>
    <revision>
      <id>30812</id>
      <parentid>26683</parentid>
      <timestamp>2018-11-23T00:25:20Z</timestamp>
      <contributor>
        <username>Gajop</username>
        <id>2804</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6101">&lt;span class=warning&gt;
This document is not yet finished.&lt;br&gt;
Please add new points whenever they occur to you.
&lt;/span&gt;

=Compiler=

Keep in mind that we use gcc (g++) as the main compiler, likewise for linux and windows builds. So be sure your code compiles and works with gcc.

=Directory structure=

http://github.com/spring/spring/blob/master/directories.txt

=Style=

==Indentation==

Use tabs, not spaces. This allows anyone to choose their favorite indentation size.

This implies that you should not use tabs in any other place then indentation. E.g. in the following sample use SPACE to align the constants.
{{code|
  #define LOS_INLOS   1
  #define LOS_INRADAR 2
}}

Do not attempt to align method parameters in a function call when breaking it over multiple lines. Just indent them using two tabs. Trying to align parameters with the opening parenthesis is unmaintainable: next time someone refactors the code and changes the function name, he has to go through all places it is used this way and waste his time inserting/removing spaces. Of course this applies to similar cases too; in general aligning stuff in such a way that an identifier rename requires realignment of all code using that identifier is bad practice.

==Curly braces==

For top-level types (struct/class/union/enum), braces go on the next line and for function definitions they may go on the same line:
&lt;pre&gt;
  class CMyClass
  {
  };

  void MyFunction()
  {
  }

  // fine too
  void MyFunction2() {
  }
&lt;/pre&gt;

Non-top-level types may use the same style as control flow braces.

For control flow, braces go on the same line:
&lt;pre&gt;
  if (condition) {
  } else {
  }
  for (int i = 0; i &lt; 10; ++i) {
    do {
      while (condition2) {
      }
    } while (condition1);
  }
&lt;/pre&gt;

For if-else statements (and similar), the following is also fine:
&lt;pre&gt;
  if (condition) {
  }
  else {
  }
&lt;/pre&gt;

For if's with a single line statement, it is preferred to omit the braces if no braces belonging to another control block follow immediately after the statement:
&lt;pre&gt;
function() { // recommended
  if (condition)
    statement;
  if (condition) {
    statement;
  }
}
function() { // okay
  if (condition) {
    statement;
  }
  if (condition)
    statement;
}
&lt;/pre&gt;

==Naming==

In Spring engine code, concrete classes are prefixed with C, interfaces with I, structs with S. Both use CamelCase. Functions and methods use CamelCase too. Parameters, fields, variables use pascalCase.
&lt;pre&gt;
  // interface
  class ISkirmishAI
  {
  };

  // concrete class implementing interface
  class CMySkirmishAI : public ISkirmishAI
  {
    void MyMethod(bool myParam);
    int myField;
    char* myStr;
  };
&lt;/pre&gt;

There are two exception to this however:
* helper subclasses do not have any prefix, and
* value types neither (it is &quot;&lt;code&gt;float3&lt;/code&gt;&quot;, not &quot;&lt;code&gt;Cfloat3&lt;/code&gt;&quot;).

File-names are usually identical to the name of the main class that is inside, with the prefix stripped off. For example, &lt;code&gt;MySkirmishAI.cpp&lt;/code&gt; for class &lt;code&gt;CMySkirmishAI&lt;/code&gt;.

==General==

Try to keep code as readable as possible. This means, do not write very long functions, but split the problem in multiple functions. Use identifier names with an actual meaning as opposed to a,b,c, etc. The point is to allow other devs to &quot;read&quot; the code, as opposed to &quot;figure it out&quot;.

Keep classes dedicated to a single function, do not create big monolithic classes which no one understands.

Insert a blank line to separate two parts of a function that have very distinct functionality. Otherwise try to keep the code compact with as few lines as possible, but avoid putting multiple statements on a single line and do not write lines more than 120 characters long.

We use comment tags (TODO, FIXME, ..) as described [http://en.wikipedia.org/wiki/Comment_%28computer_programming%29#Tags here].

On pointer or reference types, try to keep the respective symbol adjacent to the type:
&lt;pre&gt;
  // better
  char* myStr;
  float* MyMethod(const char&amp; myParam);
  int* MyVar = (int*)OtherVar;
  void MyMethod(const std::string&amp; myParam);
  // okay
  char *myStr;
  float *MyMethod(const char &amp;myParam);
  int *MyVar = (int *)OtherVar;
  void MyMethod(const std::string &amp;myParam);
  // bad
  char * myStr;
  float * MyMethod(const char &amp; myParam);
  int * MyVar = (int *)OtherVar;
  void MyMethod(const std::string &amp; myParam);
&lt;/pre&gt;

If there is no type, keep the symbol adjacent to the variable name:
&lt;pre&gt;
  // better
  char myChar, *myCharPointer, **myCharDoublePointer;
  // okay
  char myChar, * myCharPointer, ** myCharDoublePointer;
  // bad
  char myChar, * myCharPointer, * * myCharDoublePointer;
&lt;/pre&gt;

For items separated by commas, e.g. function parameters and enums, keep one space after each comma:
&lt;pre&gt;
  // good
  void MyFun(int a, int b, int c);
  int MyArr[3] = {1, 2, 3};
  // bad
  void MyFun(int a,int b,int c);
  int MyArr[3] = {1,2,3};
&lt;/pre&gt;

For operators, e.g. =, + and -, keep one space on each side. Avoid using extra spaces around parentheses:
&lt;pre&gt;
  // good
  void i = (1 - b);
  void j = ((1 / b) + 5) * c;
  // bad
  void i=( 1-b );
  void j=((1/b)+5)*c;
&lt;/pre&gt;

==External dependencies==

Do not introduce new external dependencies without good motivation. The past has proven there are quite some libraries which just suck, do not build on some platform, are too buggy, make code unreadable, etc. If you really need to add a new dependency, be sure it is cross platform, and favor dependencies that are already packages in the major distributions like [http://www.debian.org/distrib/packages Debian] or [http://packages.ubuntu.com/ Ubuntu].

When working on Linux, remember to (get someone to) compile the dependency on Windows, both for MinGW and MSVC.

=Sources=

(This is good material to at least skim through; the first one is a must have for every serious programmer.)

* [http://en.wikipedia.org/wiki/Code_Complete Code complete 2] (commercial book)
* [http://www.tiobe.com/content/paperinfo/gemrcsharpcs.pdf Philips Medical Systems - Coding Standard: C#] (free online book)

[[Category:Engine Dev]]</text>
      <sha1>8lyckcslbw2med4vakumsgto3u880xc</sha1>
    </revision>
  </page>
  <page>
    <title>CollectionOfStuff</title>
    <ns>0</ns>
    <id>3052</id>
    <revision>
      <id>28569</id>
      <parentid>28568</parentid>
      <timestamp>2014-05-17T18:02:41Z</timestamp>
      <contributor>
        <username>Pepeampere</username>
        <id>2871</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8758">At least a million widgets and gadgets have been done in Spring. But alot of cool things are lost because the game vanished or the idea never made it into a public release. Many items from [[Monthly_Topic_Rotation]] are actually done or could be done.

It also annoyed me that there are often forum threads where somebody explains in detail how to do something but its just lost in spam.
So here is a collection of random things.

Some of the stuff might be outdated or rough &quot;proves of concept&quot;:

===Linked Units: if parent units dies, child units die too===
http://springrts.com/phpbb/viewtopic.php?f=23&amp;t=25435
pseudo code + working gadget

===Widget+Gadget - CEG Spawner===
http://springrts.com/phpbb/viewtopic.php?f=23&amp;t=24499
working widget+gadget with chili ui

===picture in picture screen===
http://springrts.com/phpbb/viewtopic.php?f=23&amp;t=24485
working widget

===Tower Defense===
http://springrts.com/phpbb/viewtopic.php?f=14&amp;t=22816
ideas how it could be done

http://springrts.com/phpbb/viewtopic.php?f=55&amp;t=28696
TTD = Transportable Tower Defence mission - working example

===cover system / units taking cover behind features etc===
http://springrts.com/phpbb/viewtopic.php?f=23&amp;t=24820
ideas, code to check if unit is in cover.
is now in spring tanks and evoRTS

===collecting data from spring games===
====Unit path tracer====
http://springrts.com/phpbb/viewtopic.php?f=23&amp;t=23584
====build order visualizer====
http://springrts.com/phpbb/viewtopic.php?f=23&amp;t=26360
====unit movement, destruction, building placement====
http://springrts.com/phpbb/viewtopic.php?f=1&amp;t=22571
====unit effectiveness by reading XP on destruction====
http://springrts.com/phpbb/viewtopic.php?f=44&amp;t=26092
====unit movement, automatic visual replay in SVG ====
http://springrts.com/phpbb/viewtopic.php?f=55&amp;t=28808
notAtv

===Ingame hitbox editor===
http://springrts.com/phpbb/viewtopic.php?f=14&amp;t=24882
dynamic hitboxes, reading button presses from keyboard

===Teleport areas (for units entering them), wrap around map===
http://springrts.com/phpbb/viewtopic.php?f=43&amp;t=24611
working map with gadget

===Posing units ingame by moving/rotating pieces to create keyframes or w/e===
http://springrts.com/phpbb/viewtopic.php?f=14&amp;t=25104
hackish but working widget,gadget,unitscript brew

===non clumping aircraft===
http://springrts.com/phpbb/viewtopic.php?f=14&amp;t=24811
tags that make aircraft not clump

===Multiple parts units, targeting parts of units (ie head or turret)===
http://springrts.com/phpbb/viewtopic.php?f=14&amp;t=24590
discussion

===different resource names (ie &quot;wood&quot; instead of &quot;metal&quot;)===
http://springrts.com/phpbb/viewtopic.php?f=23&amp;t=24771&amp;p=462461&amp;hilit=wood+metal#p462461
an ugly widget

===Units that die after a specified life time===
http://springrts.com/phpbb/viewtopic.php?f=14&amp;t=25461
different ways to do it, working example

===3D drawing library, weapon ranges in 3D, animated water===
http://springrts.com/phpbb/viewtopic.php?f=23&amp;t=17935
zip file with various stuff

===finite/limited metal===
http://springrts.com/phpbb/viewtopic.php?f=13&amp;t=26026

===maps with lava===
http://springrts.com/phpbb/viewtopic.php?f=13&amp;t=25517
nicer lava with shaders:
http://springrts.com/phpbb/viewtopic.php?f=13&amp;t=26698 ,
http://springrts.com/phpbb/viewtopic.php?f=23&amp;t=31159

===multi touch interaction===
http://springrts.com/phpbb/viewtopic.php?f=12&amp;t=25865

===game mode: score points by dealing damage to a neutral unit===
http://springrts.com/phpbb/viewtopic.php?f=14&amp;t=26241

===neat animations===
http://springrts.com/phpbb/viewtopic.php?f=9&amp;t=8864&amp;start=7962

===tech tree===
http://springrts.com/phpbb/viewtopic.php?f=23&amp;t=20680

===seperate players by a wall &amp; timer===
http://springrts.com/phpbb/viewtopic.php?f=13&amp;t=26570
map with working gadget

===colored text===
http://springrts.com/phpbb/viewtopic.php?f=23&amp;t=26341
some info about colors

===How to make a ballistic weapon arc just a little===
http://springrts.com/phpbb/viewtopic.php?f=14&amp;t=26660
different ways to do it

===melee combat===
http://springrts.com/phpbb/viewtopic.php?f=14&amp;t=14373
ideas, some pictures, script pieces

===peace time to seperate teams before they can attack each other===
http://springrts.com/phpbb/viewtopic.php?f=13&amp;t=26570
a map that does that

===CEGs and unitDefs===
http://springrts.com/phpbb/viewtopic.php?f=14&amp;t=26612
some other way to do it

===noobs coming to mod spring===
collection of &quot;hi iam new&quot; threads
http://springrts.com/phpbb/viewtopic.php?f=14&amp;t=26642
http://springrts.com/phpbb/viewtopic.php?f=14&amp;t=26604
http://springrts.com/phpbb/viewtopic.php?f=14&amp;t=26519
http://springrts.com/phpbb/viewtopic.php?f=14&amp;t=26216
http://springrts.com/phpbb/viewtopic.php?f=1&amp;t=27739


===creating new units in unitdefs_post.lua===
http://springrts.com/phpbb/viewtopic.php?f=23&amp;t=26078

===Turret rotating independant from unit chassis===
http://springrts.com/phpbb/viewtopic.php?f=14&amp;t=26727&amp;p=499627
example script pieces

===units avoiding enemy units===
http://springrts.com/phpbb/viewtopic.php?f=23&amp;t=26811
widget based on a paper

===nicer map edges===
http://springrts.com/phpbb/viewtopic.php?f=13&amp;t=26732
discussion, &quot;endless texture&quot;-widget on page 2&lt;br&gt;
several versions from different people now in various games

===Spring with 3D glasses===
http://springrts.com/phpbb/viewtopic.php?f=1&amp;t=19995
widget

===AI Ladder &quot;SpringGrid&quot;===
http://springrts.com/phpbb/viewtopic.php?f=15&amp;t=20830
now dead project, source files available

===Moving Metal Extractors (Mobile Mex)===
http://springrts.com/phpbb/viewtopic.php?f=23&amp;t=11335 http://springrts.com/phpbb/viewtopic.php?f=14&amp;t=26877
working scripts

===fun with factories===
====mobile factory====
http://springrts.com/phpbb/viewtopic.php?f=14&amp;t=27503
script
====Multiple build pads possible?====
http://springrts.com/phpbb/viewtopic.php?f=14&amp;t=27615
====building multiple units at once====
http://springrts.com/phpbb/viewtopic.php?f=14&amp;t=28092

===web lobby in browser===
http://springrts.com/phpbb/viewtopic.php?f=64&amp;t=26414

===chat about engine trees===
http://springrts.com/phpbb/viewtopic.php?f=23&amp;t=27189

===BA with &quot;Red Alert&quot; eco===
http://springrts.com/phpbb/viewtopic.php?f=44&amp;t=27173
working game with ore based economy

===can I force a unit to shoot allies?===
http://springrts.com/phpbb/viewtopic.php?f=23&amp;t=27114
ideas, talk

===forest fires with Lua===
http://springrts.com/phpbb/viewtopic.php?f=23&amp;t=27015
experiments

=== sharing variables across widgets (and making sure they all get them) ===
http://springrts.com/phpbb/viewtopic.php?f=23&amp;t=27408

=== pixel shaders with Lua ===
http://springrts.com/phpbb/viewtopic.php?f=23&amp;t=20932 simple shader example

http://springrts.com/phpbb/viewtopic.php?f=23&amp;t=27269 even more primitive

=== railroad / train units ===
http://springrts.com/phpbb/viewtopic.php?f=14&amp;t=17137
very old but cool techdemo (probally needs fixing for current spring)

=== benchmarking spring ===
http://springrts.com/phpbb/viewtopic.php?f=12&amp;t=27411 something about some tool and similiar threads (Phoronix Test Suite)

=== Lua Lobby ===
http://springrts.com/phpbb/viewtopic.php?f=12&amp;t=27329 blabla about how to (not) implent it

http://springrts.com/phpbb/viewtopic.php?f=12&amp;t=27526
Lua Sockets implented in engine

=== &quot;Mini Games&quot; with Lua ===
http://springrts.com/phpbb/viewtopic.php?f=23&amp;t=19300
http://springrts.com/phpbb/viewtopic.php?f=23&amp;t=19030
Tetris, Pacman, Snake, Pong

=== Camera at fixed height ===
http://springrts.com/phpbb/viewtopic.php?f=23&amp;t=20818
widget code

=== Lua IDE ===
http://springrts.com/phpbb/viewtopic.php?f=23&amp;t=27608
my text editor is better than yours

=== common Lua mistakes ===
a widget ''so bad'' we can all learn from it \o/
http://springrts.com/phpbb/viewtopic.php?f=23&amp;t=28113

=== (mapping) Good way to generate detail texture distribution ===
http://springrts.com/phpbb/viewtopic.php?f=13&amp;t=28026

=== (mapping) Proceduraly created map ===
http://springrts.com/phpbb/viewtopic.php?f=55&amp;t=31122
notAmap - procedural shape of map + set of nice hills

=== visible LOS / fog of war ===
http://springrts.com/phpbb/viewtopic.php?f=12&amp;t=28062
lua, engine

=== third person controlling a unit ===
http://springrts.com/phpbb/viewtopic.php?f=54&amp;t=27013&amp;start=10
gadget, mutator

=== Lua weapondefs with inheritance ===
http://springrts.com/phpbb/viewtopic.php?f=14&amp;t=28123

=== Multiple unit/feature/weapon defs per file ===
http://springrts.com/phpbb/viewtopic.php?f=14&amp;t=26888

=== texture size and atlases ===
http://springrts.com/phpbb/viewtopic.php?f=9&amp;t=29938&amp;p=538020

=== scale a unit bigger in gadget:DrawWorld ===
http://springrts.com/phpbb/viewtopic.php?f=23&amp;t=29934

=== projectiles, SetProjectileTarget ===
http://springrts.com/phpbb/viewtopic.php?f=23&amp;t=31799
example gadget


[[Category:Game Dev]]</text>
      <sha1>00mfogbqhhdqmes86jpg6p5bcresqrx</sha1>
    </revision>
  </page>
  <page>
    <title>Command Reference</title>
    <ns>0</ns>
    <id>2876</id>
    <redirect title="Balanced Annihilation:Command Reference" />
    <revision>
      <id>19604</id>
      <timestamp>2010-07-14T06:59:43Z</timestamp>
      <contributor>
        <username>Enetheru</username>
        <id>2783</id>
      </contributor>
      <comment>[[Command Reference]] moved to [[Balanced Annihilation:Command Reference]]: removing the &quot;playing spring&quot; from the main menu and putting it into balanced annihilation</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="53">#REDIRECT [[Balanced Annihilation:Command Reference]]</text>
      <sha1>6vhy56c9hebrk6sg2hn6di744ss9mbc</sha1>
    </revision>
  </page>
  <page>
    <title>Commander</title>
    <ns>0</ns>
    <id>1463</id>
    <revision>
      <id>26876</id>
      <parentid>24363</parentid>
      <timestamp>2013-03-23T23:10:32Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>remove Category:Units</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="421">{{Balanced_Annihilation_deprecated}}

The Commander is the first unit you own (unless you are playing a mission of some sort in which you have no commander or gain him later). He is capable of building Tech Level 1 buildings, including resource collectors and unit plants.

The Commander is equipped with a light laser gun, and the unique [[D-gun]].

[[Image:commanders.JPG|Commanders]]
[[category:Balanced Annihilation]]</text>
      <sha1>m288fio5ug61jusptol3desxc78beqg</sha1>
    </revision>
  </page>
  <page>
    <title>Commander Shooter</title>
    <ns>0</ns>
    <id>1885</id>
    <revision>
      <id>26624</id>
      <parentid>25278</parentid>
      <timestamp>2013-03-19T22:04:19Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>/* History */ wanted link</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8823">{{historical}}

[[Image:csheader.png]]

== About ==

Commander Shooter(CS) is a mod where players control one fast commander, and in [[Using_Camera#FPS_&quot;Mode&quot;_(C)|FPS Camera Mode]] try to dgun the enemy commander. To FPS, press the c button. You cannot build unless you are Rhyoss. Newest version available v0.45 can be downloaded [http://spring.unknown-files.net/file/2846/Commander_Shooter_V0.45/ Here!].

== Quotes ==

'''Maelstrom''' -- &quot;Come play with us, it's a fun mod. Playing with yourself just isnt as fun...&quot;

'''AcMister''' -- &quot;Why is this mod so popular?.....Holy ****!@!&quot;

'''[Nem]The_Big_Boss''' -- &quot;This game is about a commander who shoots stuff.&quot;

'''Noraus''' -- &quot;I can quote myself?&quot;

'''[EE]Shadowsage''' &quot;No! My heart belongs to me!&quot;

'''Crappage''' -- &quot;STFU!@!&quot;

'''DeltaEnergy''' -- &quot;I played this mod once and I suck.&quot;

'''KingRaptor''' -- &quot;buff phire noox plz&quot;

'''Yoda''' -- &quot;Use the Dgun, Luke&quot;

'''Anonymous'''(To keep his identity safe) -- &quot;I like to self destruct killing everybody at once while not shooting a single shot ROAOR!!&quot;

'''Neddiedrow''' -- &quot;I almost moved it to the gimmick mod section, but for some reason, it has too many hardcore fans.&quot;

== History ==

It was created during summer break by a very bored kid named Noruas. He wanted to include with the new version of AA, but Caydr's mouse, was. erm lagging. It was really made out of curiosity if the idea was plausible but Caydr thought it was blasphemy. At the same time of Caydr's lagging mouse, [[Timberwolf Mod]] was being  planned to be released with Caydr's new AA versions with Community Mod Pack v1 included, that day would never come. (I think i didn't Atleast I never heard of it.) I have a new theory that Caydr hates commander shooter because every time i ask him to include it in AA, he rejects &gt;_&gt; &lt;_&lt;

It is the first FPS mod for spring, and many new FPS only mods are now following. However because of popularity, Commander Shooter is now the first and so far only FPS mod thats not in the Gimmick Mod section. Some people think Commander Shooter has copied [[Duel]] . However it has been proven that Duel and Commander Shooter has nothing to do with each other!

== King of Commander Shooter ==
[[King_of_CS]] is the person the best skilled at any commander he chooses to defeat his foes. Kings of CS are highly skilled and should be respected. They must have a tag in front of their name that looks like this [KoCS].The current king is Noruas the Newb Slaying Commander. As of November 23th, 2006.

== Strategy ==
''' All: '''

The Commanders all have a close range weapon when not in first person, they auto hit, and do very low damage, and can fire from a range of 500. All commanders have 8000 eyesight and radar! Self Destruct takes 10 seconds on all commanders, however it doubles the explosion's power and this is really good on low gravity maps, although the players may never fall down. Make sure you press C and get into your commander, ctrl 1 groups the commander, so when you fps, you turn on/off, and even cloak! Commanders now have dynamic walking sounds, yes, you can tell how close the enemy commander is by the volume of his steps!

These are how newbs play! Notice how they aren't moving, nor firing dgun, this is how you get owned! [[Image:Doingitwrongcomway.jpg]]


''' United Earth Federation's Supreme Commander: '''

This guy is the heaviest commander and can pack a wallet full of quarters in seconds. He is slow, heavy and perhaps most newb friendly. If your this guy, make sure nothing slows you down, gun it down with rapid fire style weapons!

''' ARM: '''

The arm commander has a slow firing, powerful dgun. Be sure to fire carefully! The Arm commander's on/off function controls the radar jammer. Leaving it on drains power, so if you are running low turn it off. If you are lucky, you can fling the enemy high up in the sky.

''' Guardian of Kadesh: '''

This commander has laser pistols ready for battle. However you do not want to use them if you have a precise aim d gun head weapon that destroys all! He is fairly well armored, but his special ability is his self recovery speed. No matter what the damage is, he can recover at dangerous speeds. If you see this commander, kill him while you can!

''' CORE: '''

The core commander has a burst firing dgun. He can fire long bursts of dgun. The core commander doesn't have a radar jammer but he is faster than the arm commander. With lag, the core commander can be hard to use, because you need to hit the enemy with all or most the dgun to be effective because it isn't as powerful. If he does manage to hit the target with all of his bursts, he does 50% more damage then the arm commander's weapon.

''' THE LOST LEGACY: '''

The TLL commander is big, slow, and has a powerful weapon. He auto fires lightning, huge, and is hard to kill. Very defensive indeed! Do not underestimate one! He has the highest health regeneration, and can take a considerable amount of damage. His gun does the highest amount of damage per second, however it is a slow moving electric type dgun. He cannot be tossed as easily as other commanders can.

''' Rhyoss: '''

He's extremely well fit for battle, he has a long range laser by 50%.  He also has the fastest moving rocket dgun, that has a huge area of effect. He does not have a radar, but instead has a seismic detector. His repairing is highly effective and suggestive on team battles, he can also build LLT turrets, Giant walls and Radar to detect cloakers. He is the only commander that go walk on water, making him the only amphibious commander!

''' Talon: '''

He's fast, he's quick, if you got lag you ain't gonna hit him, the fastest dude in the mod, can run circles and fire d guns faster turn. He does not have good climbing but on flat maps he is perfect for pulling off matrix. Once gone into fps mode, you cannot use laser anymore. His cloak is extremely cheap and gives him the great advantage as an escape artist.

''' Magma: '''

He's slow, made of dough, falls to pieces and his d gun doesn't do very well. He is stealthy, and has a powerful shield that can block 10,000 dmg of all sort of cruel dguns, snipes and assaults from core. He has a auto fire rocket, that follows the target and can do a good push to smaller commanders.

''' Mynn: '''

Hes slow, very weak, and is reload time is 25 seconds. OK, that sucks right? Nope, because he can climb anything! And His Dgun can kill almost anything! He is the ultimate nuke launcher, and carries a powerful rocket to aid him in his missings!  He does not have radar or cloak, so you have to be careful that an arm commander or talon commander is stalking you!

''' WTF: '''

He is a model of all commanders smashed into one, and his stats are rounded up. His abilities are such as building llts, firing a good ole double blasting dgun. This commander, is well, i dunno. Just be careful of the second dgun thing after the first one.!

''' Argon: '''

He is the commander of one of the first races ever made for total annihilation. He the ability make puppet commanders who can fight and damage a commander. His Clones are more powerful then the actual commander himself, so its advised to hide your commander well before sending the puppet out. He can completely hide by cloaking.

== KROGOTH VS COMMANDERS YAY! YAY! ==

''' Krogoth: '''

He's Huge! He roars, and whistles! He even plays music? Oh well, this guy is one can short of a six-pack, that alien. With a huge amount of hp and size, he makes the biggest of commanders look like rag dolls. Not one commander can survive alone. It is recommended for every krogoth, 4 people fight it. He can fire over map features with eye gun and blast his way through with his arm cannons. He does have short range radar, and getting close to him is suicide. The only way to beat a Krogoth is not going head on! His auto repair makes him impossible to beat with several commanders alone!

[[Image:krogwhistle.jpg]]

''' 4 vs 1 Why: '''

I will tell you why, for one, krogoth does 4 times as much dmg as the lost legacy commander, 6 times health, 50% slower, and that's not even including the one-shot k.o. attack. 

''' HEY GUYS LET'S ALL BE KROGOTHS!: '''

That's retarded, Krogoths fighting each other is not cool at all, they all stand there barely moving barely killing each other! This is not the commander shooter way to fun! Its like watching 2 overweight men blobbing each other, SICK.


''' King of CS vs Krogoth!: '''

No one is that good, sorry! It's not like knights slaying dragons here.

== PEEWEES VS. AKS SUCK! WHY DID YOU INCLUDE IT! ==

It shows a variant that does not use dgun in fps mode, that ai does not use to auto target at all, unless ai is programed to do so! Also it is to show an example of variants you can make for com shooter!

[[Category: Mods]]</text>
      <sha1>a9sfk7o614lfbsoj0cmm4vy1ulm48ug</sha1>
    </revision>
  </page>
  <page>
    <title>Commander bombing</title>
    <ns>0</ns>
    <id>1347</id>
    <revision>
      <id>22994</id>
      <parentid>22990</parentid>
      <timestamp>2011-12-10T10:44:28Z</timestamp>
      <contributor>
        <username>Kloot</username>
        <id>2373</id>
      </contributor>
      <minor/>
      <comment>Reverted edits by [[Special:Contributions/Africantribal6h|Africantribal6h]] ([[User talk:Africantribal6h|talk]]) to last revision by [[User:Greenmeanie|Greenmeanie]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1338">Commander bombing or commbombing is when a player uses the awesomeness of the starting commander to wreck havoc on an enemy's base or auxillary defenses.  The D-gun combined with a huge explosion when the comm dies will very quickly destroy the opposing player's economy and production if the buildings were grouped together. There are several tactics that constitute commbombing:

# Running out to an enemy's cannon/defenses that is shelling you/ruining your peewees and dgunning it (very common on Altored Divide map)
# Walking into enemy's base early game and dgunning the opposing player's comm, destroying most of their base and their commander (perhaps even taking them completely out of the game)
# In the late game, flying a transport with a commander (perhaps not even yours!) in it into their base to explode it

Commbombing is generally frowned upon, as many times they are used in ways which rapidly end or throw the game.  The [[D-gun]] especially seems overpowered if allowed to function as an offensive weapon.  This is why many times games will limit d-gun to start position. This, however, will not stop a commander from d-gunning an incoming Krogoth.


1. Players hate when d-gun limit is off, so the host will always limit it.

''' [[Strategy_and_Tactics|&lt;- Back to Strategy and Tactics page]]'''

[[Category:Strategy]]</text>
      <sha1>t3bzf7lyzuihgpd6jyvclu71mhg2ajl</sha1>
    </revision>
  </page>
  <page>
    <title>Commander kidnapping</title>
    <ns>0</ns>
    <id>1400</id>
    <revision>
      <id>13825</id>
      <parentid>13812</parentid>
      <timestamp>2008-01-12T02:12:05Z</timestamp>
      <contributor>
        <username>What</username>
        <id>2384</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1321">''Commander Kidnapping'' refers to the use (or abuse, depending on who you listen to) of transports to &quot;abduct&quot; Commander units or, more generally, construction units. Transports in Spring can load enemy units as well as allied units, and enemy units become helpless once they're loaded. This doesn't often work against combat units, which can usually damage or destroy the transport before it can grab them, but can be very effective against unattended construction units or Commanders. Traditionally, airborne transports have been used for this purpose, but some mods have hovercraft transports or other kinds that can be used for similar assaults.


'''This is generally considered a lame tactic''' and other players have a bad opinion of you after that. Against a competent player,it should be impossible to pull off his com. Even if one hasn't built enough static defences, simply keeping the units the enemy's trying to kidnap moving can often prevent the transport from grabbing them. A well-managed Commander is especially difficult to kidnap, as its laser can shoot down flying transports, and its D-Gun can destroy most other kinds as they close.


Do not play with players who do that with allied commanders, period.


''' [[Strategy_and_Tactics|&lt;- Back to Strategy and Tactics page]]'''

[[Category:Strategy]]</text>
      <sha1>2dc7squza81eu6x3df4q84p48tbg3m7</sha1>
    </revision>
  </page>
  <page>
    <title>Community Docs</title>
    <ns>0</ns>
    <id>3777</id>
    <revision>
      <id>31002</id>
      <parentid>30890</parentid>
      <timestamp>2019-03-19T11:28:39Z</timestamp>
      <contributor>
        <username>Silentwings</username>
        <id>2883</id>
      </contributor>
      <minor/>
      <comment>/* Lobby Server */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1074">[[Main_Page|Wiki]] &lt; {{FULLPAGENAME}}

== Community Docs ==
This page holds links to various documents that shape our online community.

=== Licensing and forking ===

Guidelines outlining how we handle [[Licenses_Forking_Mutators|licensing and forking]] of content within our own servers.

Detailed information on how we think the engines [https://springrts.com/phpbb/viewtopic.php?f=1&amp;t=17847 GPL license affects games and other content].

=== Forum ===

Our [[Felony|forum rules]], including a list of unacceptable conduct that can lead to warnings and bans.

Guidelines on [[Forum_Etiquette|etiquette within online forums]].

=== Lobby Server ===

The [[Terms_of_Service|terms of service]] of the springrts.com lobby server, and [[Data_Usage|data usage policy]].

Information for host owners about the role of [[Botflags|botflags and lobby moderators]].

== Contact ==

[[Reporting|How to report issues to moderators.]]

List of Springs current [https://springrts.com/phpbb/memberlist.php?mode=team moderators, administrators and engine developers].

[[Category:Spring]]</text>
      <sha1>toissmud3b37tpg91b2hznnqrnso84l</sha1>
    </revision>
  </page>
  <page>
    <title>Community news</title>
    <ns>0</ns>
    <id>971</id>
    <revision>
      <id>26375</id>
      <parentid>25282</parentid>
      <timestamp>2013-03-08T20:24:17Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20736">{{deprecated}}

On this page, you can post news items that will be seen in the top right section of the frontpage. You can use this to post if you have created or found something of interest to the Spring community, such as a new map, a useful tool or perhaps a new useful page in the wiki.
-----


===2008-02-17 Star Wars Spring in PCGamer ===

[http://spring.clan-sy.com/phpbb/viewtopic.php?f=1&amp;t=13926&amp;st=0&amp;sk=t&amp;sd=a Star Wars Spring featured in PCGamer]


===2008-01-08 AAI v0.86 released ===

[http://spring.clan-sy.com/phpbb/viewtopic.php?f=15&amp;t=13467 Read more]


===2008-01-05 New Years in Pictures (Part 3)!===

[http://www.darkstars.co.uk/2008/new-year-spring-in-pictures-final/ New years after christmas Part 3 over at darkstars, releases and updates galore!]

===2007-12-28 Christmas Week in Pictures Part 2!===

[http://www.darkstars.co.uk/2007/springs-christmas-week-in-pictures-part-ii/ Christmas week in Picture form Part 2 over at darkstars, releases and updates galore]

===2007-12-24 Spring: 1944 Beta Released!===
&lt;img src=&quot;http://spring1944.com/s44/images/logo.png&quot;&gt;

[http://www.unknown-files.net/spring/3927/Spring_1944_Lite_Beta_v021/  Get it HERE now!]

The Spring: 1944 Beta LITE has finally been released! It is still in preliminary Beta stages and as such still has a few kinks and quirks in it, but we just couldn't keep it away any longer! For more information, to see screenshots, or read the Play Guide, please [http://spring1944.com/s44/ Visit our Website], and [http://spring1944.com/forums/YaBB.pl drop by our ugly forums] to post any comments, suggestions, bugs, or just say hi. :)

===2007-12-21 Christmas in Spring!===
[http://zwzsg.hosted.luckz.de/img/tmp/cisl.jpg http://zwzsg.hosted.luckz.de/img/tmp/ciss.jpg]

To celebrate Christmas in Spring, all you have to do is to download and play on [http://www.unknown-files.net/spring/3895/Christmas_Comet this map], by NOiZE &amp; Rattle.

===2007-4-17 Kernel Panic 1.0 out!===
[http://www.unknown-files.net/spring/3521/Kernel_Panic_15_Installer_07/ Details and download here!] The fast paced, all action no ressource, mod with its unique tron graphical style, got a new version released!

===2007-4-7 Star Wars Spring Design Competition===
[http://spring.clan-sy.com/phpbb/viewtopic.php?t=10002 Design the most important unit in the Imperial Arsenal!]

Your chance to design the Imperial Commander, and have your unit design seen by over 8,000 people!*
[* source: current SWS download count]

===2007-2-8 Expand and Exterminate v 0.173 released===
--&gt; [http://spring.unknown-files.net/file/2325/Expand_and_Exterminate_v_0.173/ Info and downloads] &lt;--

===2007-2-7 Balanced Annihilation v4.7 released===
--&gt; [http://spring.unknown-files.net/file/2309/Balanced_Annihilation_4.7/ Info and downloads] &lt;--

===2006-12-05 BOTA with cavedog and TAUIP 1.3 Released===
BOTA v1.3 with ota units inside and UIP2.1 in the mod file.
[http://www.unknown-files.net/index.php?page=browse&amp;dlid=1997 download Mod]

===2006-12-01 Balanced Annihilation v4.2 released===
No more Weaselspam, Kbots are viable, Custom uniticons, faster gameplay, Overall better gameplay - get decent games now! --&gt; [http://taspring.clan-sy.com/phpbb/viewtopic.php?t=8163 Info and downloadlinks] &lt;-- 

===2006-11-28 XTA v8.1 Release posted===
All new and shiny XTA! Look [http://taspring.clan-sy.com/phpbb/viewtopic.php?t=8212 here]!

===2006-11-27 NanoBlobz v0.64 Release posted===
Awesome new graphics! Look [http://taspring.clan-sy.com/phpbb/viewtopic.php?t=8089 here]!

===2006-11-25 RAI v0.40 Released (Skirmish AI)===
[http://spring.unknown-files.net/file/2108/RAI_v0.40_dll/ Download Link]

===2006-10-27 XTA - Final v8 Release posted===
All new and shiny XTA! Look [http://taspring.clan-sy.com/phpbb/viewtopic.php?t=7806 here]!

===2006-10-20 Absolute Annihilation 2.23 posted===
Download here: [http://aaspring.tk aaspring.tk]

===2006-10-14 AAI 0.76 released===
Look here: http://taspring.clan-sy.com/phpbb/viewtopic.php?t=7539

===2006-08-30 TSI 0.11 Released===
New version of new AI. Many bugfixes and improvemnts. 
http://taspring.clan-sy.com/phpbb/viewtopic.php?t=6787

===2006-08-18 NTai XE9RC22 Released===
Lots of changes and improvements, look here:
http://www.darkstars.co.uk

===2006-07-19 AAI 0.70 Released===
Win + Linux version, look here:
http://taspring.clan-sy.com/phpbb/viewtopic.php?p=102040#102040

===2006-06-30 Absolute Annihilation 2.11 now available===
Download here: http://aaspring.tk

===2006-06-20 NTai XE9 RC19 Released===
Uber AI FTW!!! http://www.darkstars.co.uk

===2006-06-20 KAI v0.11 Released===
Update released fixing most crash bugs (hopefully!)

http://taspring.clan-sy.com/phpbb/viewtopic.php?t=5500

===2006-05-18 Gundam 1.0 achieved and released!===
After over a year of work I have acomplished what I have set out to do.

http://www.fileuniverse.com/?p=showitem&amp;ID=3208

===2006-06-16 Absolute Annihilation 2.0 Released===
2.0 Released, full 0.72 compatibility; Download here: http://aaspring.tk

===2006-05-18 Gundam 1.0 achieved and released!===
After over a year of work I have acomplished what I have set out to do.

http://www.fileuniverse.com/?p=showitem&amp;ID=3208

===2006-05-13 NTai XE8 and NanoBlobs 0.4 Final Released===
5 new groupAI's, a powerful skirmish AI, 2 maps, and The last Nanoblobz!!!
Download here: www.darkstars.co.uk
Manual / Unit Guide here: http://taspring.clan-sy.com/phpbb/viewtopic.php?t=4276
Argh/AF

===2006-05-01 Absolute Annihilation 1.46 Released===
1.46 Released.  Download here: http://aaspring.tk  Mod homepage here: http://ta-aa.sourceforge.net  Unit Guide here: http://ta-aa.sourceforge.net/modweb

===2006-05-01 Modweb Generator v0.4 Released===
[http://taspring.clan-sy.com/phpbb/viewtopic.php?t=3842 Get it here!]
This will create a set of HTML pages about your mod, units, and weapons. Check it out.

===2006-04-18 Expand and Exterminate .152 Released!===
[http://spring.clan-sy.com/phpbb/viewtopic.php?t=4381&amp;postdays=0&amp;postorder=asc&amp;start=0 Get it here!]
Completely original mod, not based on OTA!

===2006-04-18 OTAI 1.13===
Minor Changes and Bugfixes.
[http://www.fileuniverse.com/?p=showitem&amp;ID=2994 DLLs] [http://www.fileuniverse.com/?p=showitem&amp;ID=2993 Source]

===2006-04-17 AAI 0.63 released===
Minor improvements but a lot of bugfixes :)
[http://taspring.clan-sy.com/phpbb/viewtopic.php?p=70404#70404 Look here].

===2006-04-16 Xect vs. Mynn v0.6 released, 100% legal===
[http://www.ta-spring.com/mods/xectvsmynn/ Get it here],
[http://taspring.clan-sy.com/phpbb/viewtopic.php?t=3005&amp;postdays=0&amp;postorder=asc&amp;start=80 discuss it here].

===2006-04-15 XTA Pimped Edition V5.5===
[http://spring.clan-sy.com/phpbb/viewtopic.php?p=69921 Read and Grab it here!]

===2006-04-10 AAI 0.60 released===
Experimental water support, linux support and a lot more... [http://taspring.clan-sy.com/phpbb/viewtopic.php?t=4509 Look here]

===2006-04-05 FF v1.15===
New Version of Final Frontier [http://www.fileuniverse.com Here]

===2006-03-30 OTAI v1.12===
With working command buffering [http://www.fileuniverse.com Here]

===2006-03-27 XTA Pimped Edition V5===
[http://www.fileuniverse.com Grab it here].

===2006-03-26 NTai XE7.5 Skirmish AI===
[http://www.darkstars.co.uk/ Get it here]. - AF

===NanoBlobs 0.31(beta)===
Exponential game design.  Updated.  Smaller.  Faster. Even cooler.  Get it [http://taspring.clan-sy.com/phpbb/viewtopic.php?t=4276 Here]

===2006-03-06 OTAI 1.10===
Now works in 0.70, fixed nanostall somewhat. Get it [http://taspring.clan-sy.com/phpbb/viewtopic.php?t=3412 Here]

===2006-02-25 AAI 0.55===
A rather small release mainly adding support for the modified ai interface [http://taspring.clan-sy.com/phpbb/viewtopic.php?t=3886 get it here].

===2006-02-25 NTAI XE6 for 0.70b1 Skirmish AI===
Universal mod support, statistical unit learning, freeform buildtrees [http://www.darkstars.co.uk/index.php Get them here]. - AF

===2006-02-19 AAI 0.52===
AAI 0.52 is only a small bugfix release [http://taspring.clan-sy.com/phpbb/viewtopic.php?t=3886 get it here].

===2006-02-13 Absolute Annihilation 1.44===
AA 1.44 completed and uploaded.[http://www.planetannihilation.com/aa AA Homepage].
.
SWTA [[Final_Frontier]] [[Absolute_Annihilation]]

===2006-2-19 AAI 0.52 Released===
AAI 0.52 is only a small bugfix release for AAI 0.5 - hopefully all crashes are gone now
[http://taspring.clan-sy.com/phpbb/viewtopic.php?t=3886 click here].

===2006-2-15 NTAI XE 3 Released===
XE 3 has support map specific build data, 9 new keywords, StarWars/Gundam support, numerous fixes, and should run a lot faster ^^ [http://www.darkstars.co.uk/index.php here]. - AF

===2006-02-13 Absolute Annihilation 1.44 Released===
AA 1.44 completed and uploaded.  Readme and changelog available at the [http://www.planetannihilation.com/aa AA Homepage].

===2006-2-06 OTAI 1.08 Released===
Now uses multithreading to reduce freezing!
[http://taspring.clan-sy.com/phpbb/viewtopic.php?p=55624#55624 Forum] [http://www.fileuniverse.com/?p=showitem&amp;ID=2354 Download]

===2006-02-01 World Domination 5B62  Released===
This version fixes the crashes related to missing .cob-files.
Download [http://www.fileuniverse.com/?p=showitem&amp;ID=2311 here].

===2006-1-31 Star Wars Spring Manual Released===
[http://spring.clan-sy.com/wiki/SWTA_Manual Read the SWS Manual right now!] It contains everything you would ever want to know about SWS, including: Installation Guide, In-Depth Unit Guide as well as a Strategy &amp; Tactics section.

===2006-1-27 OTAI 1.07 Released===
Veylon released OTAI version 1.07. Now builds Dragon's Teeth and crashes less!
Download [http://www.geocities.com/veylon_ii/TASpring/ here].

===2006-11-19 UpSpring Tutorial Released===
Maestro R Setiawan released [http://www.fileuniverse.com a very comprehensive tutorial] to UpSpring, the application to import new models to Spring. Now you won't have any excuse to not use UV mapped S3O!

===2006-01-16 NTAI 0.29a Released===
NTAI 0.29a released, go get it here [http://taspring.clan-sy.com/phpbb/viewtopic.php?p=50716#50716 Download]

===2006-01-16 Absolute Annihilation 1.42 Released===
AA 1.42 completed and uploaded.  Readme and changelog available at the [http://www.planetannihilation.com/aa AA Homepage].

&lt;b&gt;[http://prdownloads.sourceforge.net/ta-aa/AASpring142.zip?download Download]&lt;/b&gt; (9 mb)

===2006-01-12 AAI 0.4 Released===
AAI 0.4 now supports air units as well as construction units assisting others. 
Edit: Small Bugfix Version AAI 0.42 released
[http://taspring.clan-sy.com/phpbb/viewtopic.php?t=3527 AAI v0.42].

===2006-1-07 Gundam Annihilation 0.98.sd7 Released===
This is a .sd7 for your spring lobby usage. I have corrected a few of the spring specific bugs in this release. Enjoy. [http://www.planetannihilation.com/gundam/ Gundam annihilation homepage]

[http://www.planetannihilation.com/gundam/shots/screen039.jpg http://www.planetannihilation.com/gundam/shots/screen039_thumb.gif]    [http://www.planetannihilation.com/gundam/shots/screen012.jpg http://www.planetannihilation.com/gundam/shots/screen012_thumb.gif]


===2005-12-15 AAI 0.3 Released===
AAI 0.3 includes a lot of bug fixes and placement of defence buildings. [http://taspring.clan-sy.com/phpbb/viewtopic.php?t=3195 AAI v0.3].

===2005-12-14 Absolute Annihilation 1.35 Released===
AA 1.35 completed and uploaded.  Readme and changelog available at the [http://www.planetannihilation.com/aa AA Homepage].

&lt;b&gt;[http://prdownloads.sourceforge.net/ta-aa/AASpring135.zip?download Download]&lt;/b&gt; (16 mb)

===2005-12-13 OTAI 1.03b Released===
A fixed version of OTAI 1.03 now available.

[http://taspring.clan-sy.com/phpbb/viewtopic.php?t=3184 Forum Thread]
[http://www.geocities.com/veylon_ii/TASpring/OTAI_v103b.zip Download]

===2005-12-13 The Lost Legacy v1.04 Released===
The Lost Legacy Race, originally by M3G, ported to Spring by NOiZE.

This is the TA:Spring version of the masterpiece race created by the TA creation veterans M3G and Nik. Striving for perfection, they have completed an astoundishing number of 150 new units. This is by far the most expanded and carefully balanced race that has been created to this point. Explore the strategic values of the new submarine pens, defensive constructions and the many supersized monsters that let you toy with the opponent.

[http://taspring.clan-sy.com/phpbb/viewtopic.php?t=2860 Forum Thread]
[http://www.fileuniverse.com/?p=showitem&amp;ID=1967 Download]

===2005-12-07 Star Wars: Spring 1.0 Released===
The well known Star Wars TC for TA has been ported to Spring.

One of the most complete TCs that existed for TA has now been fully ported to Spring - all of the bugs that plagued the quick and dirty earlier port have been fixed. Some balancing issues that came up in Spring has also been taken care of, along with a few other minor modifications, to ensure that this modification is made specifically for the Spring engine, so that you can enjoy it as such. Furthermore, many of the uglier low-polygon units for SWTA have been remodelled for Spring, so that you can now enjoy high-poly infantry units, as well as a few other vehecular changes.

Feel free to come join us on our own chat channel (itself a good 5 years old), where you can organise games, discuss balance, and report bugs:

Server: irc.gnug.org

Channel: #SWTA

An in-depth manual, with help regarding strategies and unit descriptions can be located [http://www.planetannihilation.com/swta/readme.asp here], however, bear in mind that while much of this will be very helpful, it was originally intended for the Original Total Annihilation release, and so is not 100% accurate or reliable with regards to the Spring release. A Spring-specific manual is in the works.

SWS features around 130 units ranging from all six movies and the expanded universe for the Galactic Empire and Rebel Alliance. Join this galaxy spanning war today, download SWS!

[http://taspring.clan-sy.com/phpbb/viewtopic.php?t=3166 Forum Thread]
[http://www.fileuniverse.com/?p=showitem&amp;ID=1988 Download]
[http://www.planetannihilation.com/swta/ SWTA Homepage]

===2005-12-07 The Lost Legacy v1.03 Released===
The Lost Legacy Race, originally by M3G, ported to Spring by NOiZE.

This is the TA:Spring version of the masterpiece race created by the TA creation veterans M3G and Nik. Striving for perfection, they have completed an astoundishing number of 150 new units. This is by far the most expanded and carefully balanced race that has been created to this point. Explore the strategic values of the new submarine pens, defensive constructions and the many supersized monsters that let you toy with the opponent.

[http://taspring.clan-sy.com/phpbb/viewtopic.php?t=2860 Forum Thread]
[http://www.fileuniverse.com/?p=showitem&amp;ID=1967 Download]

===2005-12-05 NTAI 0.28.10+ installer FIXED)===
Counter attacking, and numrous fixes, modifications. All who've downlaoded it redownload as I made a terrible mistake copying the wrong files over. - Alantai

[http://www.fileuniverse.com/?p=showitem&amp;ID=1950 Download Installer]
[http://img479.imageshack.us/img479/8186/screen0121oq.jpg Screenshot]

===2005-12-01 NTAI 0.28Beta 7 Released===
Working Attack code, vastly improved building, Xect, Rhyoss, Mynn, TLL, XTA and AA support. - Alantai

[http://www.fileuniverse.com/?p=showitem&amp;ID=1909 Download]
[http://img479.imageshack.us/img479/8186/screen0121oq.jpg Screenshot]

===2005-12-01 OTAI for 0.67  Released===
Veylons latest installment of OTAI, with a slew of improovements.
[http://www.geocities.com/veylon_ii/TASpring/OTAI_v102.zip Downlaod]

===2005-11-11 Cursor groupAI Released===
Show Allies what untis you have selected and where your mouse cursor is.

[http://www.fileuniverse.com/?p=showitem&amp;ID=1873 Link]
[http://img479.imageshack.us/img479/8186/screen0121oq.jpg Screenshot]

(This is a new version from beta 6.5 released yesterday)

===2005-11-12 NTAI 028BETA 7.1 Released===
Full ARM + TLL support, and improved attacking.

[http://www.fileuniverse.com/?p=showitem&amp;ID=1887 Linky]
[http://www.fileuniverse.com/?p=showimage&amp;ID=1755 Screenshot]

(This is a new version from beta 6.5 released yesterday)

===2005-11-12 - NTAI 0.27 Released===
Water map support, krogoths, vehicles, aircraft, and more!
[http://taspring.clan-sy.com/phpbb/viewtopic.php?t=2829 Details]
[http://taspring.clan-sy.com/phpbb/viewtopic.php?t=2827 Screenshots]

===2005-10-29 - NTAI 0.25 Released===
The latest version of NTAI released today with many new abilities, such as a greatly improved attack system, and the ability to scout.

[http://taspring.clan-sy.com/phpbb/viewtopic.php?t=2687 Forum Thread]

===2005-10-20 - Absolute Annihilation: Spring Released===
The highly popular OTA mod, Absolute Annihilation, has now been fully converted for compatibility with Spring.  Unlike the original Spring version released some months ago, the new version is fully compatible with the mod switching system.  It also features many visual and strategic enhancements only possible in Spring, and uses the latest version of the AA dataset, 6.0.

Already a new version is available, 1.25, which corrects several major bugs.

[http://files.filefront.com/AASpring125zip/;4417183;;/fileinfo.html Direct Download (1.25)]

[http://prdownloads.sourceforge.net/ta-aa/AATrailer.zip?download Mod Trailer]

[http://www.planetannihilation.com/aa AA Homepage]

[http://taspring.clan-sy.com/phpbb/viewtopic.php?t=2633 Forum Thread]

===2005-10-16 - KuroTA v0.45 Released===
This is the second public release of this fairly popular mod. It all started out as a bunch of custom units in a TA installation from years gone by, but thanks to dedication it's been turned into a playable and fairly balanced mod for everyone to play on Spring. For more info at [http://taspring.clan-sy.com/phpbb/viewtopic.php?t=2514 read this thread]. And it can be downloaded from [http://www.fileuniverse.com/?p=showitem&amp;ID=1646 FileUniverse].

===2005-10-15 - UberHack, SpringVersion1.3 Released===
This port of the famous balance mod for TA, done by NOiZE, has been made as good as bug free now. This mod would not have been possible without help from: zwzsg, Gnome and Kuroneko. For more info at [http://taspring.clan-sy.com/phpbb/viewtopic.php?t=2540 read this thread]. And it can be downloaded from [http://www.fileuniverse.com/?p=showitem&amp;ID=1633 FileUniverse].

===2005-10-12 - Maelstroms SMD Creator===
[http://taspring.clan-sy.com/phpbb/viewtopic.php?t=2420 Maelstroms SMD Creator] has been relesed, to help people create SMD Map files with an easy to use GUI.

===2005-10-11 - JCAI 0.20 Released===
[http://spring.clan-sy.com/phpbb/viewtopic.php?p=33275#33275 JCAI 0.20 skirmish AI] is released for Spring 0.64b1 with a modified spring exe, it is much more stable now. JCAI 0.20 is included in current release (0.65b1)

===2005-09-28 - UberHack, SpringVersion1.2 Released===
This port of the famous balance mod for TA, done by NOiZE, has been made as good as bug free now. This mod would not have been possible without help from: zwzsg, Gnome and Kuroneko. For more info at [http://spring.clan-sy.com/phpbb/viewtopic.php?t=2364 read this thread]. And it can be downloaded from [http://www.fileuniverse.com/?p=showitem&amp;ID=1552 FileUniverse].

===2005-08-20 - wiki Button Added===
As you probably already have noticed, the SY's have added a wiki button (Made by aGorm) to the Navigation bar. Hopefully, this will make people more aware of the wiki, as some have never even heard of it! More info on [http://taspring.clan-sy.com/phpbb/viewtopic.php?t=1917 this thread]. If you don't see the wiki button, empty the cache of your browser and refresh.

===2005-08-16 - JCAI Released===
Zaphod has released alpha 1 of his skirmish AI JCAI for spring,[http://taspring.clan-sy.com/phpbb/viewtopic.php?t=1920 see forum post]
TAI code has been released but doesnt work. [http://www.fileuniverse.com/?p=showitem&amp;ID=1322 Get it here]

===2005-08-03 - Mods and Maps===
zwzsg made a 3.6MB mod package with: OTA balance, Evolva models, UTASP Buildpics. Install and use easy thanks to the new mod switcher introduced in Spring 0.60b1.
&lt;br&gt;- [http://spring.clan-sy.com/phpbb/viewtopic.php?t=1843 More info and discussion]
&lt;br&gt;- [http://www.fileuniverse.com/?p=showitem&amp;ID=1257 Download link]

[http://zwzsg.hosted.luckz.de/img/spring/Azure%20Rampart%20-%20evnbp%20-%20Bomber.png http://www.fileuniverse.com/images/Azure%20Rampart%20-%20evnbp%20-%20Bomber.jpg-thumb.png][http://www.fileuniverse.com/images/causticscreenshot.jpg http://www.fileuniverse.com/images/causticscreenshot.jpg-thumb.png]

Spring 0.60b1 made all previous maps obsolete, but as the pictures above show, there's a steadily increasing [http://www.fileuniverse.com/?p=listing&amp;ID=121 choice of new maps], either old ones converted to the new format or brand new.</text>
      <sha1>gslln84m9f2n8mapd8afx0eduoy9pr7</sha1>
    </revision>
  </page>
  <page>
    <title>Complete Annihilation</title>
    <ns>0</ns>
    <id>2437</id>
    <revision>
      <id>26318</id>
      <parentid>22622</parentid>
      <timestamp>2013-02-27T21:43:44Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="86">[[Category:Games]]

Complete Annihilation has renamed to [http://zero-k.info/ Zero-K].</text>
      <sha1>axdij861yn8t2p54enbdv2m9opq626z</sha1>
    </revision>
  </page>
  <page>
    <title>Construction units</title>
    <ns>0</ns>
    <id>1492</id>
    <revision>
      <id>25262</id>
      <parentid>24362</parentid>
      <timestamp>2012-10-29T12:10:33Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>remove wanted links (this page is in Category BA but is for XTA?)</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6419">{{Balanced_Annihilation_deprecated}}

[[category:Balanced Annihilation]]

== Construction Units ==

&lt;p&gt;
Note: This details construction units for [[XTA]]. If you were looking for the [[AA]] unit list, I suggest you head [[Absolute_Annihilation/Units|here]].
&lt;/p&gt;

== Overview ==

&lt;p&gt;
Construction units in XTA do the obvious: they construct things. They can also reclaim things (mostly features) for resources, and repair things. There are 2 levels of construction unit, a well as two special ones (One each for Arm and Core). There are vehicular, kbot, airplane, seaplane, hovercraft, and naval construction units. Also, to make production faster, multiple units can construct a single thing at a time. Constructions unnits can help eachother make buildings, or factories to make other units.
&lt;br&gt;As a general rule:
&lt;br&gt;Mobility: Aircraft&gt;Kbot&gt;Vehicle
&lt;br&gt;Nanolathing (build) Speed: Vehicle&gt;Kbot&gt;Aircraft
&lt;br&gt;&lt;br&gt;As naval is special (water, not land), it wasn't included above. However, it actually has a faster build speed than every other standard hovercraft. Also, you can build a construction seaplane and construction hovercraft. They are basically level 2 units that build level 1 structures.
&lt;/p&gt;

==Build Trees==

=== Level 0 - The [[Commander]] ===
&lt;p&gt;
Nanolathe Speed: 300.
&lt;br&gt;Although this isn't an actual tech level, I am putting this here for sake of clarity.
&lt;br&gt;Can Build:
* Construction Structures
** Land
*** Kbot Lab
*** Advanced Kbot Lab
*** Tank Factory
*** Advanced Tank Factory
*** Airbase
*** Advanced Airbase
** Special
*** Seaport
*** Advanced Seaport
*** Hovercraft Platform
*** Seaplane Factory
* Economy Structures
** Energy
*** Land
**** Solar Panel
**** Windmill
**** Energy Storage
*** Sea
**** Tidal Generator
**** Underwater Energy Storage
** Metal
*** Land
**** Metal Extractor
**** Metal Maker
**** Metal Storage 
*** Sea
**** Underwater Metal Extractor
**** Floating Metal Maker
**** Underwater Metal Storage
* Defense Structures
** Land
*** [[LLT]] (Light Laser Tower)
*** Shortrange Radar
*** Dragon's Teeth (Wall Segment)
** Sea
*** Torpedo Launcher
*** Shortrange Sonar
*** Floating Dragon's Teeth (Floating Wall Segment)

=== Land Level 1 ===
&lt;p&gt;
Nanolathe Speed:
* Air: 50
* Kbot: 80
* Vehicle: 100
* Seaplane: 100
* Hovercraft: 200
&lt;br&gt;(As all units of the same level, other than the naval, appear to have the same capabilities, this list applies to the air, kbot, and vehicle styles of construction unit.
&lt;br&gt;Can Build:
* Everything commanders can EXCEPT most naval (exceptions below)
* Construction Structures
** Seaport
** Advanced Seaport
** Seaplane Platform
* Economy Structures
** Energy
*** Geothermal Powerplant
* Defense Structures
** [[HLT]] (Heavy Laser Tower)
** [[Missile Tower|Missile Turret]]
** Pop-up Heavy Cannon
&lt;/p&gt;

=== Land Level 2 ===
&lt;p&gt;
Nanolathe Speed:
* Air: 100
* Kbot: 160
* Vehicle: 200
Can Build:
* Everything Land level 1 can, except ALL naval
* Production Structures
** Land
*** Krogoth Gantry (Core Only)
* Economy Structures
** Energy
*** Fusion Powerplant
*** Cloakable Fusion Powerplant
** Metal
*** Moho Metal Extractor
*** Moho Metal Maker
* Defense
** [[Energy Weapon]]
** Plasma Battery
** Shortrange Radar Jammer
** Longrange Radar
** Flak Cannon
** Nuclear Missile Defence System
** Fortification Wall
* Special
** EMP Missile Launcher
** Nuclear Missile Launcher
** LRPC (Long-Range Plasma Cannon)
** RFLRPC (Rapid-Fire Long-Range Plasma Cannon)
** Radar Targetting Facility
** Airpad (Repairs Aircraft)
&lt;/p&gt;

=== Sea Level 1 ===
&lt;p&gt;
The only level 1 sea unit is the construction boat, with a nanolathe speed of 125. It, being a boat, is restricted to water.
&lt;br&gt;Can Build:
* Construction Structures
** Land
*** Kbot Lab
*** Advanced Kbot Lab
*** Tank Factory
*** Advanced Tank Factory
*** Airbase
*** Advanced Airbase
** Special
*** Seaport
*** Advanced Seaport
*** Hovercraft Platform
*** Seaplane Factory
* Economy
** Energy
*** Tidal Generator
*** Underwater Energy Storage
** Metal
*** Underwater Metal Extractor
*** Floating Metal Maker
*** Underwater Metal Storage
* Defence
** Torpedo Launcher
** Floating HLT (Heavy Laser Tower)
** Floating Missile Launcher
** Shortrange Sonar
** Dragon's Teeth
** Floating Dragon's Teeth
&lt;/p&gt;

=== Sea Level 2 ===
&lt;p&gt;
Nanolathe Speed: 250
&lt;br&gt;Can Build:
* All NAVAL that sea level 1 can
* Construction Structures
** Airbase
** Advanced Airbase
** Hovercraft Platform
* Economy
** Energy
*** Underwater Fusion Powerplant
* Defence
** Heavy Torpedo Launcher
** Longrange Sonar
** Dragon's Teeth
** Fortification Post
** Longrange Radar
** Shortrange Jammer
&lt;/p&gt;

== Special Construction Units ==

&lt;p&gt;
There are two special construction KBots in [[XTA]]. Arm has the FARK (Fast Assist-Repair KBot), while Core has the Necro Rez KBot. The FARK has the fastest nanolathe speed in the mod, at 860. Although it can build little on its own, it is the fastest moving construction unit, and it also gets built quickly. The Necro still has a very fast nanolathe speed (720), but takes longer to build and moves less quickly. However, this is offset by 2 advantages: It is  both cheaper, and it can revive destroyed units and structures. This is much cheaper than building another, and is also quicker.
&lt;/p&gt;

=== FARK (Fast Assist-Repair KBot) Buildtree ===
* Production Facilities
** Land
*** KBot Lab
*** Advanced KBot Lab
* Economy
** Energy
*** Geothermal Powerplant
** Metal
*** Moho Metal Extractor
* Defence
** [[LLT]]
** Sentinel [[HLT]]
** Flakker [[Flak Cannon]]
** Dragon's Teeth
** Fortification Wall
** Advanced Radar

=== Necro Rez KBot Buildtree ===
* Production Facilities
** Land
*** KBot Lab
*** Advanced KBot Lab
* Economy
** Energy
*** Geothermal Powerplant
** Metal
*** Moho Metal Extractor
* Defence
** [[LLT]]
** Gaat Gun [[HLT]]
** Viper Pop-Up Heavy Laser
** Cobra [[Flak Cannon]]
** Dragon's Teeth
** Fortification Wall
** Advanced Radar
** Immolator Plasma Tower

== A note on build time ==
&lt;p&gt;
You may notice that build times are extremely high. That is because that is not the build time, but build power necessary to construct that unit/structure. To find the actual time (in seconds), do the simple equation:
&lt;br&gt; time(seconds)=Buildpower necessary/Nanolathe Speed of all units constructing
&lt;br&gt;&lt;br&gt;
This means that if you were to build a structure with a buildtime of 1000 with a level 1 vehicle (Nanolathe:100), it will take 10 seconds to build. (10=1000/100)
&lt;/p&gt;</text>
      <sha1>skjonpesfk4xen19l1xw5wbhhn03end</sha1>
    </revision>
  </page>
  <page>
    <title>Contributing media</title>
    <ns>0</ns>
    <id>2553</id>
    <revision>
      <id>26567</id>
      <parentid>26420</parentid>
      <timestamp>2013-03-17T22:32:26Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>merge Category:Website into Category:Spring</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1587">==Contributing media==
It is possible for users to contribute screenshots and videos that will be shown on the media page and in the frontpage rotation. It is done by posting in the correct forum, and attaching your content to the post. After your post has been reviewed by a forum moderator it will be moved to a different forum and start to appear live on the site.
==Uploading images==
Post images in [http://springrts.com/phpbb/viewforum.php?f=36 this forum]. You may attach multiple images to a post. These are the guidelines for acceptable content: &lt;to be written&gt;.

==Uploading videos==
Post video clips in [http://springrts.com/phpbb/viewforum.php?f=37 this forum]. The maximum size for a clip is currently 10 megabyte. The video player is sized to display videos in 16:9 format, so this is the preferred aspect ratio. &lt;more guidelines&gt;

==Tagging==
When you upload an image or a video, you should also tag it appropriately so that users can filter out interesting content. Suitable tags include the name of the game/mod and map featured. It is also useful to include those of these standard tags that apply. For examples, look at the existing posts in the content forum.
===Commonly used tags===
* GUI
* No GUI
==Video preview image==
When uploading a video clip, you must also include an image in the post. This image is displayed in the video player before the users clicks on 'play'. It should display some representative part of the video, and include a picture of a play button in the middle to indicate that the video can be started by clicking on it.

[[Category:Spring]]</text>
      <sha1>852r1nkb84r4u10yog27z00xjb6h6c1</sha1>
    </revision>
  </page>
  <page>
    <title>Crans Building Spring on Windows Log</title>
    <ns>0</ns>
    <id>3089</id>
    <revision>
      <id>28853</id>
      <parentid>21952</parentid>
      <timestamp>2014-10-11T15:29:05Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>deprecate - 2011 is a long time ago in compiling instructions</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7261">{{deprecated}}
NOTE:
Learned much since, so need to redo.
* dos2unix.exe part of minglibs, but not picked up on clean install (it's called from a batch file expecting it in PATH, %MINGWLIBS%, or the third argument to the batch file, which isn't passed atm. Should have a find*.cmake file for that really). BUT, dos2unix is only used if git's core.autocrlf is set to false, so instead use:  core.safecrlf = false + core.autocrlf = true.
* TDM with dwarf2 is preferred over 'plain' mingw, and has a properly working collect2.exe. Only there's a little naming thing then 'gcc-dw2'.


Right, the current building on windows with MinGW instructions for master seem outdated/broken/etc. :)

Since the new MinGW versions, things have become easier and more reliable.
So to help others, I'll log here how I can make a working windows build from scratch.

I know this initial page isn't well formatted, I'll leave that to when I feel like it, or someone else does. Right now it seems more important to have some working instructions.

I can't test on anything other then my own system, which is Windows7, 64 bit.
The date of all this is April 30, 2011.

Although this builds, and runs, you may have issues, since it is master. I certainly have some :) But since the buildbot windows builds have the same issues at the moment, I assume this is due to master having some issues, and not the build procedure.

Keep in mind that these steps describe using the latest available versions of everything. Currently this works pretty well, and is by far the easiest. But this may certainly change in the future.

Steps:
* For the Java AI bits, you'll want to have a 32 bit JDK installed, I'm currently using jdk1.6.0_24. Things may build without, but I'm doing a Java AI, so not gonna test without Java :)
* You'll need a working MinGW, this used to be a pain, but with recent updates this has become a lot better.
** Read the page on http://www.mingw.org/wiki/Getting_Started, just to get your bearings.
** Grab the lastest mingw-get-inst from http://sourceforge.net/projects/mingw/files/Automated%20MinGW%20Installer/mingw-get-inst. I'm using mingw-get-inst-20110316.exe.
** Run the installer, choose to download the latest repository catalogues, accept the license
** I'd recommend using the default install location of C:\MinGW, check if you didn't already have something there before installing :)
** Whether you create start menu folders/desktop links/etc. is up to you.
** From the available packages, select at least C++ compiler, adding MinGW Developer Toolkit works quite well, but is a rather big download. Not adding it means we need to add some more packages later.
** Now the installer will do it's work, this will take some time. I usually get some errors/warnings about files which couldn't be downloaded (sourceforge hickups I figure), but as far as I can tell it'll retry them.
** You'll need to add the bin sub folder where you installed MinGW to the PATH environment variable, most reading this will know what to do, otherwise the MinGW getting started page covers it well.
** If all went well, you should now have some working tools. Open a cmd.exe (windows command shell), and type 'g++ --version', this should tell you you've now got a 4.5.2 or higher g++ compiler.
** Spring needs the dos2unix tool to build, which is not installed by default. Use the command 'mingw-get install cygutils-dos2unix' to grab it.
** If you did not install the MinGW Developer Toolkit, you'll have to install mingw32-make, use: 'mingw-get install mingw32-make'
** Because of a 'bug' (See https://sourceforge.net/tracker/?func=detail&amp;aid=3295175&amp;group_id=2435&amp;atid=102435), we'll have to replace the installed collect2.exe. Get the gcc-4.5.2-tdm-1-core.zip from: https://sourceforge.net/projects/tdm-gcc/files/TDM-GCC%204.5%20series/4.5.2-tdm-1%20SJLJ/ (or a newer version in the same location. These are TDM MinGW builds, alternative builds of MinGW, and he's got a fix in for this issue), unpack the zip file to a temporary location, and copy the contained libexec\gcc\mingw32\4.5.2\collect2.exe to C:\MinGW\libexec\gcc\mingw32\4.5.2 or similar, replacing the existing collect2.exe. Hopefully they'll do something with the bug report and fix this :)
* I'm assuming you'll want to use git to get master, so you'll need the git client.
** Get the latest client from: http://code.google.com/p/msysgit/downloads/list Currently the most recent is 'Git-1.7.4-preview20110204.exe', detailing all the settings is a bit out of scope here, I have found that choosing for it to do no newline conversions tends to work the best with Spring :)
** We'll get the source now, start with 'git clone git://github.com/spring/spring.git' This will create a 'spring' folder in the folder you execute the command from. This spring folder will contain the source.
** If at a later time you want to update this source, go to the spring folder, and use 'git pull --rebase'.
* Ok, we're nearly done, we now need the 'mingwlibs', our own collection of libraries and stuff needed to build on windows. Your best bet is to get it from https://github.com/spring/mingwlibs (which always is the most recent, we need the latest for master), it has a big Downloads button. Use that to get a zip, and put the zip's content under out spring folder, in a subfolder 'mingwlibs'.
* Well, nearlyish, we need CMake now, get and install the latest from http://www.cmake.org/cmake/resources/software.html. 2.8.4 works fine for me atm.
* Now run cmake-ui (it should have put a icon on the desktop).
** Select the source folder, it's the spring folder you got with git.
** Choose a build folder, it doesn't have to exist yet, I use a 'build' folder next to the 'spring' folder.
** Hit the configure button. Use defaults in the generator dialog, which should be MinGW Makefiles, and use default native compilers.
** There's now lots of configuration values, luckily defaults work fine normally. The only change I'd recommend is to change CMAKE_INSTALL_PREFIX to something like 'C:/Spring.master' Windows7/VIsta do not like anyone changing stuff under the Program Files folder, so keep spring in the root of C: (or so) tends to prevent a lot of problems. If you've changed anything, hit configure once more.
** Now hit generate, this should create all needed makefiles and stuff.
** If that went well, we're done with CMake, close it.
* Open a new cmd.exe, and go to the new 'build' folder.
* Optionally, type 'set MAKE_COMMAND=mingw32-make -j2', if you have more then one core and want to try multi-processed building (it's faster).
* Cross your fingers and type 'mingw32-make install DESTDIR=C:\' (the DESTDIR part will heed the 'CMAKE_INSTALL_PREFIX' you set earlier).

If things build well, one way to testing things is:
* Get the BA mod from: http://spring-portal.com/index.php/docman/doc_details/314-balanced-annihilation-v71
* Get and install abma's test 'game' from: https://github.com/abma/spring-test-game (you want all contents as zip, the big download button). There's a README included.
* Now start spring.exe, pick a map of your liking, set the 'ai' to Commanders (which only spawns an idle commander for each side), and pick the game/mod name 'Balanced Annihilation modtest-V7.31' notice the 'modtest' bit :)</text>
      <sha1>bcupisz625vrk9by6jxhf5mo60v79t7</sha1>
    </revision>
  </page>
  <page>
    <title>Crappage</title>
    <ns>0</ns>
    <id>2242</id>
    <redirect title="User:Crappage" />
    <revision>
      <id>12055</id>
      <timestamp>2007-06-12T03:25:38Z</timestamp>
      <contributor>
        <username>P3374H</username>
        <id>157</id>
      </contributor>
      <comment>Crappage moved to User:Crappage</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="28">#REDIRECT [[User:Crappage]]
</text>
      <sha1>dh16unink3fbmki1ybx91g7m49kyeun</sha1>
    </revision>
  </page>
  <page>
    <title>Create map texture with povray</title>
    <ns>0</ns>
    <id>3661</id>
    <redirect title="Tutorial:MapWithPOVRay(Tinnut)" />
    <revision>
      <id>28910</id>
      <timestamp>2014-10-18T21:57:53Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>Flozi moved page [[Create map texture with povray]] to [[Tutorial:MapWithPOVRay(Tinnut)]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="44">#REDIRECT [[Tutorial:MapWithPOVRay(Tinnut)]]</text>
      <sha1>fqm7o73dkhvhaj26t1ssz7phpxrm768</sha1>
    </revision>
  </page>
  <page>
    <title>Create maps</title>
    <ns>0</ns>
    <id>3662</id>
    <redirect title="Tutorial:CreateMaps(Fnordia et al)" />
    <revision>
      <id>28913</id>
      <timestamp>2014-10-19T08:24:23Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>Flozi moved page [[Create maps]] to [[Tutorial:CreateMaps(Fnordia et al)]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="48">#REDIRECT [[Tutorial:CreateMaps(Fnordia et al)]]</text>
      <sha1>dj8bwn16b42r549952d45vaa2hti0yj</sha1>
    </revision>
  </page>
  <page>
    <title>Creating a map using blueprint</title>
    <ns>0</ns>
    <id>3216</id>
    <revision>
      <id>28896</id>
      <parentid>25248</parentid>
      <timestamp>2014-10-18T20:10:18Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>tag for delete, dupe of forbs page?</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29143">{{delete}}
{{deprecated|this page is deprecated, use [[Map_development]] instead}}

= What you will need to get started (The Tools) =

'''Blueprint:&amp;nbsp;'''[https://github.com/jk3064/Map-Blueprint https://github.com/jk3064/Map-Blueprint]&amp;nbsp;

The only other tool really needed is &quot;Mapconv&quot;. The other tools available are there simply to make your life easier. A list of common mapping tools are as follows:

Mapconv

SMFED '''(Deprecated, no longer useful)'''

Grout '''(Deprecated, no longer useful unless texture was generated with L3dt utilizing tiles)'''

SMD Creator '''(Deprecated, no longer useful)'''

Start Position Editor

Das Bruce's Mapconv frontend

These tools have been compiled into a zip available here:&amp;nbsp;[http://springfiles.com/spring/tools/mapping-tools http://springfiles.com/spring/tools/mapping-tools]

Keep in mind that mapconv is still being developed, so it may be necessary to update the included Mapconv to a later version, located here:&amp;nbsp;[http://springrts.com/phpbb/viewtopic.php?f=56&amp;t=21458 http://springrts.com/phpbb/viewtopic.php?f=56&amp;t=21458]

= Creating a Texture Map =

&lt;code&gt;'''Texture map size is related in pixels and in spring map size. 2x2 MapSquares in spring are equal to 1024x1024 Pixels. Texture maps mus be in multiples of 2. I.E. 2x2, 6x10, 12x16, 16x16, etc. No odd sizes are allowed (Example: 15x10).'''&lt;/code&gt;

This tutorial assumes that you understand how to make a texture map and it also assumes that you know how to use terrain generation software.&amp;nbsp;

Commonly used terrain generation programs are:

Spring Map Edit (Does not work on 64bit machines)

L3DT

WorldMachine

Bryce3D

Carrara



Example Texture Map (generated by Carrara):

http://www.evolutionrts.info/random/exampletexturemap.jpg

= Creating a Heightmap =

&lt;code&gt;'''Height Maps are Texture Map size / 8 + 1 pixel. In other words, if your texture map is 8192x8192 (16x16), 8192 / 8 + 1 = 1025x1025'''&lt;/code&gt;

You will need a good image editing program to make heightmaps. Many of the aforementioned terrain generation programs will also generate heightmaps as well, but you can draw them by hand. They can be either 8bit or 16bit greyscale PNG. If you have photoshop or the gimp, you can use these programs to help you create your heightmap.



Here is an example of a 16bit heightmap:

http://www.evolutionrts.info/random/heightmapexample.png

Heightmaps work upon the idea of height according to color values. Black is the lowest, white is the heighest. In spring mapping, the waterline is defined by a negative height value. In other words, you define the heights of the map, &amp;nbsp;anything below 0 is under water. So on this heightmap, you might use -50 for the lowest value and 300 for the highest height value. The aforementioned tool &quot;Mapconv Gui (a.k.a Das Bruce's MapConv Gui) has a waterline calculator that will help you calculate the correct waterline for your map.

= Creating a Metal Map =

&lt;code&gt;'''Metal Map dimensions are Texture Map size / 8 + 1 pixel. In other words, if your texture map is 8192x8192 (16x16), 8192 / 8 + 1 = 1025x1025'''&lt;/code&gt;

In Spring, metal maps are used for the built in resourcing scheme (Metal/Energy). You do not have to use this scheme. In fact, there are several games for Spring who use their own resourcing systems added on using Lua. If you are creating this map for one of those games, a metal map is not strictly necessary (in other words you can just us a black image), however, it is always nice if you can make your maps as compatible with other games as possible, but this is a choice left entirely up to you.

Metalmaps show metal areas on a map based upon the amount of red on the image (make sure red is the only color used!). On this map you can see that the &quot;Patch Technique&quot; is used, which is pretty common among spring maps, but you are not limited to using this scheme.

If you do want perfect metal patches, use a 6x6 pixel pencil in your image editor with a red value of 255. This combined with setting the &quot;MaxMetal&quot; tag in the definitions to 1, will result in a perfect 2.0 metal generation per patch (using Balanaced Annihilation values). The game use isn't the point however. The fact is that if you can predict how much each spot will output (typically), using the &quot;MaxMetal&quot; parameter, you can easily scale the values up and down. As an example of another extreme, Evolution RTS dictates that all metal patches will output 0.5 metal regardless of the map settings. So whether you need to put a lot of thought into your metal map values depends entirely upon the game for which you are creating the map.



Example Metal Map:

http://www.evolutionrts.info/random/examplemetal.jpg

= Creating a Feature Map =

&lt;code&gt;'''Feature Map dimensions are Texture Map size / 8. In other words, if your texture map is 8192x8192 (16x16), 8192 / 8 = 1024x1024'''&lt;/code&gt;

Feature maps used to be quite complicated, but all that changed with the advent of Smoth's FeaturePlacer (short featuremap history below).

Now featuremaps are use simply for the purpose of placing grass. Grass coverage is defined by blue pixels on the feature map. The more blue the pixel is (the closer to blue 255 it is), the thicker grass will be at that location. Grass is entirely optional, but can be customized via map parameters and adds a nice touch to your map.



Example Feature Map:

http://www.evolutionrts.info/random/examplefeature.jpg

== A brief history of featuremaps ==

Feature maps were (and still are) a single RGB image where features such as grass, geothermal vents and trees, as well as structures, etc were &quot;placed&quot; using pixels on the image. This method was extremely imprecise and involved recompiling the map many times in order to simply move a tree from one location to another.

Thankfully, features can now be placed via LUA, ingame and in realtime using FeaturePlacer.

= Compiling your map =

== Texture Specifications ==

Texture map size is related in pixels and in spring map size. 2x2 MapSquares in spring are equal to 1024x1024 Pixels. Texture maps must be in multiples of 2. I.E. 2x2, 6x10, 12x16, 16x16, etc. No odd sizes are allowed (Example: 15x10).



Height Map dimensions are Texture Map size / 8 + 1 pixel. In other words, if your texture map is 8192x8192 (16x16), 8192 / 8 + 1 = 1025x1025



Metal Map dimensions are Texture Map size / 8 + 1 pixel. In other words, if your texture map is 8192x8192 (16x16), 8192 / 8 + 1 = 1025x1025



Feature Map dimensions are Texture Map size / 8. In other words, if your texture map is 8192x8192 (16x16), 8192 / 8 = 1024x1024

== Using MapConv ==

[[MapConv]] is a command line program that is generally started via a batch file .

Below is an example set of parameters given to mapconv:

&lt;code&gt;'''MapConv -i -l -c 0 -x 101 -n 100 -o EvoRTS-Craggy_Creek-v01.smf -t terrain.png -a height6.png -m metal.png -f feature.png -z &quot;nvdxt.exe -dxt1a -nmips 4 -Sinc -quality_highest -file&quot;'''&lt;/code&gt;

Once compiled, you will get 2 new files: &amp;lt;mapname.smt&amp;gt; and &amp;lt;mapname.smf&amp;gt;

= Incorporating your map into Blueprint =

Unzip the blueprint archive into your Spring Maps folder.

http://www.evolutionrts.info/random/mapcontainer.jpg

You will notice a new folder called &quot;mapcontainer.sdd&quot;. The .sdd ending on the folder name is very important for testing as &amp;lt;foldername&amp;gt;.sdd tells spring to load map files from that folder. This way you can work on your maps without having to zip them up over and over again.

== mapcontainer.sdd ==

Inside the map container folder you have the following file/folder structure.


&lt;div&gt;'''&lt;code&gt;LuaGaia&lt;/code&gt;'''&lt;/div&gt;&lt;div&gt;'''&lt;code&gt;mapconfig&lt;/code&gt;'''&lt;/div&gt;&lt;div&gt;'''&lt;code&gt;maphelper&lt;/code&gt;'''&lt;/div&gt;&lt;div&gt;'''&lt;code&gt;maps&lt;/code&gt;'''&lt;/div&gt;&lt;div&gt;'''&lt;code&gt;mapinfo.lua&lt;/code&gt;'''&lt;/div&gt;&lt;div&gt;'''&lt;code&gt;mapoptions.lua&lt;/code&gt;'''&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
Now, copy your compiled map files into the &quot;maps&quot; folder.

= Adding SSMF details&lt;br/&gt; =

SSMF mapping is adding detail textures all over the map based upon specified distribution areas. This will make your map infinitely more detailed and beautiful.

Adding SSMF to a map consists of the following steps:

Distribution Map

Splat Textures

Specular Maps

Grass Shading Map (optional)

== Distribution Map ==

The Distribution map is essentially an atlas telling spring where to spread your detail textures. Lets have a look at an example distribution map:

http://www.evolutionrts.info/random/examplesplatdistribution.jpg

Each channel corresponds to a different texture referenced in the detail texture map. These areas are set using the channels of the image and are generally saved using the Targa format ( .tga ), sized at 1024x1024.

http://www.evolutionrts.info/random/examplechannels.jpg

Save your distribution map as splatdistribution.tga, and place it in the maps folder alongside the smf and smt files.

Once you have your distribution map, you need to set up your detail textures

== Detail Textures ==

Detail textures are made by adding a texture to each channel of an image.

http://www.evolutionrts.info/random/examplesplattex.jpg

There are a total of 4 texture slots available. One for R, G, B, and one for the Alpha Channel. When you have your detail textures ready, save the file as splattex.tga (Targa - 1024x1024) and place it in the maps folder alongside splatdistribution.tga

== Specular Map ==

A specular map controls brightness and &quot;shinyness&quot; of your map. The more light you add to a particular portion of your specular map, the brighter and more reflective that portion of the map will be. Specular maps should be 1024x1024 and saved as specularmap.bmp. Of course placed in the maps folder with the other ssmf maps.

http://www.evolutionrts.info/random/examplespecularmap.jpg

== Grass Shading Map (Optional) ==

A grass shading map will allow you to control the overall intensity of the grass on your map

[This portion needs expanding and an example image]

= Placing Features =

As previously mentioned, features can now be placed via LUA based upon a coordinate system that looks similar to this:

&lt;div&gt;&lt;code&gt;local features = {&amp;nbsp;&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;unitlist = {&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;},&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;buildinglist = {&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;},&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;objectlist = {&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;{ name = 'btreeclo_4', x = 7760, z = 112, rot = &quot;0&quot; },&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;{ name = 'btreea_3', x = 2520, z = 6904, rot = &quot;0&quot; },&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;{ name = 'btreeblo_5', x = 7736, z = 536, rot = &quot;0&quot; },&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;{ name = 'btreeclo_1', x = 2504, z = 7112, rot = &quot;0&quot; },&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;{ name = 'geovent', x = 177, z = 192, rot = &quot;0&quot; },&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;},&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;}&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;return features&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;Of course, features can be placed by editing the set.lua file in a text editor, but that would take an extremely long time. Enter FeaturePlacer.&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
== FeaturePlacer ==

At this point, it is very strongly recommended that you go download &quot;[http://springfiles.com/spring/tools/spring-features Spring Features]&quot; (&amp;nbsp;[http://springfiles.com/spring/tools/spring-features http://springfiles.com/spring/tools/spring-features]&amp;nbsp;)&amp;nbsp;and place it in your games folder. Spring features is an archive that contains all the map features ever made for spring mapping. The total number is somewhere around 500 features, so it will give you quite a bit of power when it comes time to spice up your map.



Feature placer is available for use in two different games currently. Gundam RTS and Evolution RTS. It is worth noting that Gundam RTS limits itself to a much smaller feature set, so that the current time it is recommended that you use feature placer in Evolution RTS. It should also be mentioned that you could simply call Spring Features as a dependency (which you will do anyway) in your map which will allow you access to all the features in Spring Features, however, Evolution RTS has some random spawners specifically targeting towards foliage in Spring Features that is not currently in Gundam RTS.



Eventually, Feature Placer will be it's own independent module, but currently, it is only available via Evolution RTS or Gundam RTS.



'''If you use Evolution RTS for feature placer, once ingame be sure to disable the &quot;Integral Menu&quot; widget (f11 - Widget Menu), as the menu does not support paging.'''

&lt;br/&gt;You will need to go into the multiplayer lobby (one that supports modoptions and hosing your own games). Create a new game (not using a relay slave). In the modoptions set the game type to &quot;Featureplacer&quot; and add a NullAI.



When the game starts up you will be presented with a tree that is sparkling green. Select it and you will have the option to build an entire host of features. There are also placement options on the menu such as &quot;Jitter&quot; and &quot;Clustering&quot;, etc. Set these as desired.



Once you have placed all the features on your map and are ready to export the placement, press F11 to bring up the widget menu, and select &quot;Dump All Units Features&quot;. Click it 3 times. At this point, before exiting the game, alt+tab out to your spring install folder and look for a file called dumpedunitsfeatures.txt to make sure that the file was written properly. Once you have verified this, you may go ahead and close the game.



Open dumpedunitsfeatures.txt in a text editor and copy the entire contents. Then navigate to

mapcontainer.sdd/mapconfig/set.lua

Open up set.lua in a text editor, and paste the contents of dumpedunitsfeatures.txt into it. Be sure to remove any entries in the unitlist or buildinglist sections.

= Configuring Map Parameters (Mapinfo.lua) =

Admittedly, the default values used in blueprint mapinfo are awful. It may be wise for you to download another map that has used blueprint and copy and paste it's mapinfo contents into yours. However, you are also free to use the default or use the provided example.

In time, the mapinfo tags will be documented and this will like to that page. As it is the tags and values are pretty easy to figure out for the most part.


&lt;div&gt;&lt;code&gt;--------------------------------------------------------------------------------&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--------------------------------------------------------------------------------&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;-- mapinfo.lua&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;local mapinfo = {&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;name &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;= &quot;EvoRTS - Craggy Creek -&quot;,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;shortname &amp;nbsp; = &quot;&quot;,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;description = &quot;&quot;,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;author &amp;nbsp; &amp;nbsp; &amp;nbsp;= &quot;&quot;,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;version &amp;nbsp; &amp;nbsp; = &quot;v08&quot;,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--mutator &amp;nbsp; = &quot;deployment&quot;;&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--mapfile &amp;nbsp; = &quot;&quot;, --// location of smf/sm3 file (optional)&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;modtype &amp;nbsp; &amp;nbsp; = 3, --// 1=primary, 0=hidden, 3=map&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;depend &amp;nbsp; &amp;nbsp; &amp;nbsp;= {&quot;Map Helper v1&quot;, &quot;Spring Features 1.0&quot;},&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;replace &amp;nbsp; &amp;nbsp; = {},&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--startpic &amp;nbsp; = &quot;&quot;, --// deprecated&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--StartMusic = &quot;&quot;, --// deprecated&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;maphardness &amp;nbsp; &amp;nbsp; = 800,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;notDeformable &amp;nbsp; = false,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;gravity &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; = 130,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;tidalStrength &amp;nbsp; = 0,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;maxMetal &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;= 1,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;extractorRadius = 150,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;voidWater &amp;nbsp; &amp;nbsp; &amp;nbsp; = false,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;autoShowMetal &amp;nbsp; = true,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;smf = {&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;minheight = -100,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;maxheight = 900,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--smtFileName0 = &quot;&quot;,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--smtFileName1 = &quot;&quot;,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--smtFileName.. = &quot;&quot;,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--smtFileNameN = &quot;&quot;,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;},&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;sound = {&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--// Sets the _reverb_ preset (= echo parameters),&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--// passfilter (the direct sound) is unchanged.&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--//&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--// To get a list of all possible presets check:&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--// &amp;nbsp; [https://github.com/spring/spring/blob/master/rts/System/Sound/EFXPresets.cpp https://github.com/spring/spring/blob/master/rts/System/Sound/EFXPresets.cpp]&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--//&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--// Hint:&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--// You can change the preset at runtime via:&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--// &amp;nbsp; /tset UseEFX [1|0]&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--// &amp;nbsp; /tset snd_eaxpreset preset_name &amp;nbsp; (may change to a real cmd in the future)&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--// &amp;nbsp; /tset snd_filter&amp;nbsp;%gainlf&amp;nbsp;%gainhf &amp;nbsp;(may &amp;nbsp; &amp;nbsp;&quot; &amp;nbsp; &quot; &amp;nbsp;&quot; &amp;nbsp;&quot; &amp;nbsp; &amp;nbsp;&quot; &amp;nbsp;&quot; &amp;nbsp; &quot; &amp;nbsp; &amp;nbsp;&quot; &amp;nbsp; )&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;preset = &quot;default&quot;,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;passfilter = {&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--// Note, you likely want to set these&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--// tags due to the fact that they are&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--// _not_ set by `preset`!&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--// So if you want to create a muffled&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--// sound you need to use them.&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;gainlf = 1.0,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;gainhf = 1.0,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;},&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;reverb = {&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--// Normally you just want use the `preset` tag&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--// but you can use handtweak a preset if wanted&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--// with the following tags.&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--// To know their function &amp; ranges check the&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--// official OpenAL1.1 SDK document.&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--density&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--diffusion&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--gain&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--gainhf&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--gainlf&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--decaytime&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--decayhflimit&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--decayhfratio&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--decaylfratio&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--reflectionsgain&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--reflectionsdelay&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--reflectionspan&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--latereverbgain&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--latereverbdelay&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--latereverbpan&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--echotime&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--echodepth&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--modtime&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--moddepth&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--airabsorptiongainhf&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--hfreference&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--lfreference&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--roomrollofffactor&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;},&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;},&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;resources = {&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;grassBladeTex &amp;nbsp; &amp;nbsp;= &quot;grassbladetex.bmp&quot;,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--grassShadingTex &amp;nbsp;= &quot;grassshading.bmp&quot;,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--detailTex = &quot;&quot;,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;specularTex = &quot;specularmap.bmp&quot;,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;splatDetailTex = &quot;splattex.tga&quot;,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;splatDistrTex = &quot;splatdistribution.tga&quot;,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--skyReflectModTex = &quot;&quot;,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--detailNormalTex = &quot;detailtex.bmp&quot;,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--lightEmissionTex = &quot;&quot;,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;},&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;splats = {&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;TexScales={ 0.006, 0.006, 0.006, 0.0005 },&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;TexMults={ 0.3, 0.3, 0.2, 0.1 },&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;},&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;atmosphere = {&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;minWind &amp;nbsp; &amp;nbsp; &amp;nbsp;= 1.0,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;maxWind &amp;nbsp; &amp;nbsp; &amp;nbsp;= 30.0,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;fogStart &amp;nbsp; &amp;nbsp; = 0.7,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;fogEnd &amp;nbsp; &amp;nbsp; &amp;nbsp; = 1.0,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;fogColor &amp;nbsp; &amp;nbsp; = {0.8, 1, 1},&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;sunColor &amp;nbsp; &amp;nbsp; = {1.0, 1.0, 1.0},&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;skycolor &amp;nbsp; &amp;nbsp; = { 0.1, 0.15, 0.7 },&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;skyDir &amp;nbsp; &amp;nbsp; &amp;nbsp; = {0.0, 0.0, -1.0},&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;skyBox &amp;nbsp; &amp;nbsp; &amp;nbsp; = &quot;&quot;,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;cloudDensity = 0.5,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;cloudColor &amp;nbsp; = {1.0, 1.0, 1.0},&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;},&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;grass = {&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;bladeWaveScale = 1.0,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;bladeWidth &amp;nbsp;= 0.5,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;bladeHeight = 6.0,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;bladeAngle &amp;nbsp;= 1.57,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;bladeColor &amp;nbsp;= {0.59, 0.81, 0.57}, --// does nothing when `grassBladeTex` is set&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;},&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;lighting = {&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--// dynsun&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;sunStartAngle = 0.0,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;sunOrbitTime &amp;nbsp;= 1440.0,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;sundir &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;= { 0, 0.50, -1 },&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--// unit &amp; ground lighting&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;groundambientcolor &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;= { 0.8, 0.8, 0.85 },&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;grounddiffusecolor &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;= { 1.0, 0.9, 0.8 },&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;groundshadowdensity &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; = 1.3,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;unitambientcolor &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; = { 0.5, 0.5, 0.5 },&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;unitdiffusecolor &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; = { 1.0, 0.9, 0.8 },&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;unitshadowdensity &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;= 0.8,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;specularsuncolor &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; = { 0.6, 0.7, 0.9 },&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;specularExponent &amp;nbsp; &amp;nbsp;= 100.0,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;},&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;water = {&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;damage = &amp;nbsp;0.0,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;repeatX = 0.0,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;repeatY = 0.0,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;absorb &amp;nbsp; &amp;nbsp;= { 0.05, 0.05, 0.05 },&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;basecolor = { 0.5, 1, 0.5 },&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;mincolor &amp;nbsp;= { 0.1, 0.1, 0.10 },&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;ambientFactor &amp;nbsp;= 1.0,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;diffuseFactor &amp;nbsp;= 1.0,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;specularFactor = 1.0,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;specularPower &amp;nbsp;= 20.0,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;planeColor = {0.0, 0.5, 0.0},&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;surfacecolor &amp;nbsp;= { 0.5, 0.9, 0.5 },&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;surfaceAlpha &amp;nbsp;= 0.1,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;diffuseColor &amp;nbsp;= {1.0, 1.0, 1.0},&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;specularColor = {0.8, 0.7, 0.65},&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;fresnelMin &amp;nbsp; = 0.2,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;fresnelMax &amp;nbsp; = 0.8,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;fresnelPower = 4.0,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;reflectionDistortion = 1.0,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;blurBase &amp;nbsp; &amp;nbsp; &amp;nbsp;= 2.0,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;blurExponent = 1.5,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;perlinStartFreq &amp;nbsp;= &amp;nbsp;8.0,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;perlinLacunarity = 3.0,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;perlinAmplitude &amp;nbsp;= &amp;nbsp;0.9,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;windSpeed = 1.0, --// does nothing yet&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;shoreWaves = true,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;forceRendering = false,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--// undefined == load them from resources.lua!&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--texture = &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot;&quot;,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--foamTexture = &amp;nbsp; &quot;&quot;,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--normalTexture = &quot;&quot;,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--caustics = {&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--&quot;&quot;,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--&quot;&quot;,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--},&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;},&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;teams = {&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;[0] = {startPos = {x = 7779, z = 2147}},&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;[1] = {startPos = {x = 353, z = 1982}},&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;},&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;terrainTypes = {&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;[0] = {&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;name = &quot;Default&quot;,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;hardness = 1.0,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;receiveTracks = true,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;moveSpeeds = {&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;tank &amp;nbsp;= 1.0,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;kbot &amp;nbsp;= 1.0,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;hover = 1.0,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;ship &amp;nbsp;= 1.0,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;},&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;},&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;},&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;custom = {&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;fog = {&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;color &amp;nbsp; &amp;nbsp;= {0.26, 0.30, 0.41},&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;height &amp;nbsp; = &quot;80%&quot;, --// allows either absolue sizes or in percent of map's MaxHeight&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;fogatten = 0.003,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;},&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;precipitation = {&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;density &amp;nbsp; = 30000,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;size &amp;nbsp; &amp;nbsp; &amp;nbsp;= 1.5,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;speed &amp;nbsp; &amp;nbsp; = 50,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;windscale = 1.2,&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;texture &amp;nbsp; = 'LuaGaia/effects/snowflake.png',&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;},&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;},&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;}&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--------------------------------------------------------------------------------&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--------------------------------------------------------------------------------&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;-- Helper&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;local function lowerkeys(ta)&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;local fix = {}&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;for i,v in pairs(ta) do&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;if (type(i) == &quot;string&quot;) then&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;if (i ~= i:lower()) then&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;fix[#fix+1] = i&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;end&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;end&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;if (type(v) == &quot;table&quot;) then&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;lowerkeys(v)&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;end&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;end&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;for i=1,#fix do&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;local idx = fix[i]&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;ta[idx:lower()] = ta[idx]&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;ta[idx] = nil&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;end&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;end&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;lowerkeys(mapinfo)&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--------------------------------------------------------------------------------&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--------------------------------------------------------------------------------&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;-- Map Options&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;do&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;local function tmerge(t1, t2)&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;for i,v in pairs(t2) do&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;if (type(v) == &quot;table&quot;) then&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;t1[i] = t1[i] or {}&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;tmerge(t1[i], v)&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;else&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;t1[i] = v&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;end&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;end&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;end&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;getfenv()[&quot;mapinfo&quot;] = mapinfo&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;local files = VFS.DirList(&quot;mapconfig/mapinfo/&quot;, &quot;*.lua&quot;)&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;table.sort(files)&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;for i=1,#files do&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;local newcfg = VFS.Include(files[i])&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;if newcfg then&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;lowerkeys(newcfg)&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;tmerge(mapinfo, newcfg)&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;end&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;end&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;getfenv()[&quot;mapinfo&quot;] = nil&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;end&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--------------------------------------------------------------------------------&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--------------------------------------------------------------------------------&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;return mapinfo&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--------------------------------------------------------------------------------&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;--------------------------------------------------------------------------------&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;

= Creating an archive of your map =
&lt;div&gt;Spring reads two different archive formats, 7zip and zip. Both archives are named sd7 and sdz, respectively. 7zip files are made by The 7zip archive program, available at&amp;nbsp;[http://www.7-zip.org/ http://www.7-zip.org/]&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;Navigate to your mapcontainer.sdd folder and zip it's contents into either a .7z file or .zip (7zip format is '''HIGHLY RECOMMENDED'''!), usually naming schemes follow the actual mapname (&amp;lt;mapname.sd7&amp;gt;, such as&amp;nbsp;EvoRTS-Craggy_Creek-v08.sd7&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;http://www.evolutionrts.info/random/examplearchivewith7zip.jpg&lt;br/&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;Once completed, copy the sd7/sdz file to your maps folder. At this point, be sure to remove the .sdd ending from your mapcontainer.sdd folder (or change the map name/version contained withing), otherwise you might get sync errors because spring is reading from the wrong archive source.&lt;/div&gt;
&lt;br/&gt;br/&gt; &lt;br/&gt;</text>
      <sha1>b4xqji5l4fp7i9kp3qhr1ci3h9vt9dl</sha1>
    </revision>
  </page>
  <page>
    <title>CurrentVersion</title>
    <ns>0</ns>
    <id>1123</id>
    <redirect title="Template:CurrentVersion" />
    <revision>
      <id>10951</id>
      <timestamp>2005-11-11T10:07:16Z</timestamp>
      <contributor>
        <username>Maelstrom</username>
        <id>32</id>
      </contributor>
      <comment>CurrentVersion moved to Template:CurrentVersion</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="38">#REDIRECT [[Template:CurrentVersion]]
</text>
      <sha1>ea6048661qpfdjz02gqawt0y86v8x8d</sha1>
    </revision>
  </page>
  <page>
    <title>CustomExplosionGenerators</title>
    <ns>0</ns>
    <id>1798</id>
    <redirect title="CEG" />
    <revision>
      <id>17241</id>
      <parentid>11612</parentid>
      <timestamp>2009-08-23T09:45:19Z</timestamp>
      <contributor>
        <username>Seanheron</username>
        <id>2595</id>
      </contributor>
      <comment>renamed</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="17">#REDIRECT [[CEG]]</text>
      <sha1>fxfqac1xg40ydz2g2xahjfs70n11bg1</sha1>
    </revision>
  </page>
  <page>
    <title>CustomUnitIcons</title>
    <ns>0</ns>
    <id>1776</id>
    <redirect title="Icontypes.lua" />
    <revision>
      <id>21598</id>
      <parentid>11590</parentid>
      <timestamp>2011-04-02T20:40:39Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>Redirected page to [[Icontypes.lua]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">#REDIRECT [[Icontypes.lua]]</text>
      <sha1>cpqk8mh5j2r1lllv2h985tmlukx9rnp</sha1>
    </revision>
  </page>
  <page>
    <title>Custom Explosion Generators</title>
    <ns>0</ns>
    <id>2735</id>
    <redirect title="CEG" />
    <revision>
      <id>17240</id>
      <parentid>17235</parentid>
      <timestamp>2009-08-23T09:45:13Z</timestamp>
      <contributor>
        <username>Seanheron</username>
        <id>2595</id>
      </contributor>
      <comment>renamed</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="17">#REDIRECT [[CEG]]</text>
      <sha1>fxfqac1xg40ydz2g2xahjfs70n11bg1</sha1>
    </revision>
  </page>
  <page>
    <title>Custom Unit Icons</title>
    <ns>0</ns>
    <id>1564</id>
    <redirect title="Icontypes.lua" />
    <revision>
      <id>21600</id>
      <parentid>21597</parentid>
      <timestamp>2011-04-02T20:42:22Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>Redirected page to [[Icontypes.lua]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">#REDIRECT [[Icontypes.lua]]</text>
      <sha1>cpqk8mh5j2r1lllv2h985tmlukx9rnp</sha1>
    </revision>
  </page>
  <page>
    <title>CvC</title>
    <ns>0</ns>
    <id>1978</id>
    <revision>
      <id>21273</id>
      <parentid>21197</parentid>
      <timestamp>2011-02-24T16:52:28Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="675">{{Historical}}

CvC was a Spring game made in ~2006 by KDR_11k that seems to be dead or asleep right now.

http://mitglied.multimania.de/KDR_11k/cvcmod.htm

http://springrts.com/phpbb/viewtopic.php?f=14&amp;t=5781&amp;hilit=Cosmos+vs.+Chaos
----


== Cosmos vs. Chaos ==

A few things I [rcdraco] did not make this mod, this mod is based on the belief that you have two kinds of units.  Small units I call them swarmers and the large hulking units in this case tanks.  This mod has some very unique and creative units, but currently is only in beta and as far as I know abandoned.

link needed here !

[This page was edited/created by rcdraco on December 21, 2006]

[[Category:Mods]]</text>
      <sha1>c3knhtu9fz3kcec68nd4bfizrkgq9au</sha1>
    </revision>
  </page>
  <page>
    <title>D-gun</title>
    <ns>0</ns>
    <id>1462</id>
    <revision>
      <id>24361</id>
      <parentid>21339</parentid>
      <timestamp>2012-05-02T08:41:27Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="490">{{Balanced_Annihilation_deprecated}}

[[category:Balanced Annihilation]]
The Disintegrator Gun, which only the Arm and Core Commanders can use. This weapon is capable of dissolving anything on a subatomic level, and requires a massive level of power (400 Energy) for each shot.

It is thought the 'backpacks' on the Commanders contain rare and exotic equipment needed to use this weapon, accounting for the megaton explosion on the destruction of these units.

[[Image:dgun.PNG|D-Gun Shot]]</text>
      <sha1>9snrkbkvlq7xnixnr22dc1yspmw7vp7</sha1>
    </revision>
  </page>
  <page>
    <title>Data Usage</title>
    <ns>0</ns>
    <id>3834</id>
    <revision>
      <id>31222</id>
      <parentid>31221</parentid>
      <timestamp>2020-04-26T13:57:28Z</timestamp>
      <contributor>
        <username>Silentwings</username>
        <id>2883</id>
      </contributor>
      <minor/>
      <comment>/* Data and usage of data */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="12286">[[Main_Page|Wiki]] &lt; [[Community_Docs|Community]] &lt; {{FULLPAGENAME}}

==Data and usage of data==

The SpringRTS server (springrts.com) and its managed infrastructure process and retain information generated by users: 

&lt;ol style=&quot;list-style-type:upper-alpha&quot;&gt;
&lt;li&gt;
Registration &amp; login details: email address, IP address, chosen username, (hashed) password.
&lt;/li&gt;
&lt;li&gt;
Actions taking place via Springs infrastructure: chat, games played by users and all associated ingame commands, hardware and connectivity information characterizing suitability to play such games, client software used, IP addresses of battle hosts; and derived statistics of these data. This data is divided into two types: 
&lt;ol style=&quot;list-style-type:decimal&quot;&gt;
&lt;li&gt; Data created in publicly accessible contexts, such as non-passworded chat channels and battle hosts. &lt;/li&gt;
&lt;li&gt; Data created in private contexts, such as private messages, passworded chat channels and passworded battle hosts. &lt;/li&gt;
&lt;/ol&gt;
&lt;li&gt;
Source files, artwork and other content relating to games and development of games.
&lt;/li&gt;
&lt;/ol&gt;
This data is used to provide services that would normally be expected from an online gaming platform, primarily: 
# '''Publicly available replays of games''' that were played in publicly accessible contexts. These include all actions taken by players, including chat, within the game.
# '''Persistent game and chat elements,''' which make users aware of publicly visible events that previously occurred on the platform.
# '''Development and provision of the Spring engine,''' plus supporting infrastructure, including a lobbyserver in which users chat to each other. 
# '''Bridging of publicly accessible chat channels''' to external locations, typically those managed by our own users and sub-projects for purposes explicitly related to SpringRTS.
# '''Verification of user identity''' on login and within battle hosts.
# '''Moderator action''' in the event of disputes and suspected misconduct.
'''We retain and process data of types A, B and C on basis of legitimate interest, to provide the above services.'''

Users may connect to our server using external and bespoke software, known as a “client”, as specified through a publicly available protocol. This software may be outside of our control and knowledge. In such cases, whilst we may deny connections from clients that do not comply with GDPR and other legal requirements where it is technically and practically possible for us to do so, the operation and compliance of client software is the responsibility of its authors and users. The data usage policies summarised in this notice ONLY cover our usage of the data that is sent by users and users client software to our server, running at springrts.com.

Users are contacted via automated messages to email addresses that they provide for purposes related to item 5 when it is necessary to do so, such as when a user requests account recovery. In exceptional circumstances we may also manually contact individual users for purposes related to items 3 or 6. We do not use these email addresses to send marketing emails to our users and we do not disclose email addresses to third parties. 

====Legitimate Interest====
We would be unable to provide the above services without retention and processing of the above data. Items 1 and 2 consist wholly of retaining and processing data of types B and C. Data retained and processed relating to item 3 consists of type B and C data, primarily communications occurring between users during their cooperative usage of our services, plus games and other content files for these services. Item 4 requires no retention of data, but requires on-the-fly processing of type B data. Item 5 requires type A data to correctly associate login attempts to user accounts and to help protect the server and battle hosts from malicious activity. Item 6 requires both type A and B data, to support moderator actions identifying, discouraging and preventing misconduct.

Type B.1 data is generated exclusively by individuals within in publicly accessible contexts, in which an expectation exists that this data will be shared with any number of other users. Type B.2 data is generated by individual in contexts where an expectation of privacy from other users exists. Such data is of a nature that is not expected to carry significant risk to an individual’s rights and freedoms, however steps are taken to respect this privacy as detailed below; this data is used only for purposes relating to items 3 and 6. The retention and processing of type B data carries a low risk of inhibiting individual’s rights and freedoms.

Type A data contains information (particularly: email, IP) provided in private contexts that could, in some cases, and when supplemented with external sources of related information, be used to identify a real individual from their online footprint and consequently requires appropriate protection as detailed below; since otherwise the data held by SpringRTS concerning such individuals is of a non-sensitive nature the associated impact on individuals interests, rights and freedoms is low.

Developers and other users who provide data of type C may also provide licenses for such data. Authors may choose to include their own contact details; the risk to the individual’s rights and freedoms is low. For details on how we handle such content see our policies on licensing, forking, and on how the GPL license of the spring engine affects game content.

We do not engage in targeted advertising. We do not engage in profiling or automated decision making that has legal implications for users. We do not process or retain criminal or special category data. 

All of our codebases are open source, permitting our users and developers to verify and review that our systems perform as described in this document, and to report any related technical errors.

==User rights under GDPR==

Users wishing to exercise their rights under GDPR should contact moderation staff, who are identifiable on the server by means of a spanner icon, and are contactable via the forum hosted at springrts.com or by email at postmaster@springrts.com; such requests are handled on a case-by-case basis. We have procedures in place to assess numbers of moderation staff and ensure that such people are contactable and able to respond within the required time periods. Any data supplied in response will typically come in plain text form, or in the form of access to online replay files.

Note that the right to erasure under GDPR is not absolute; in particular we may refuse to fully erase data of individuals with a record of past misconduct if we believe such data may be required to prevent potential future misconduct of sufficient severity. See [http://www.privacy-regulation.eu/en/recital-49-GDPR.htm] for details.

==Disclosure of data to third parties and other users==

When information is supplied to us within a publicly visible medium, such as through a public chat channel or public game host, we may and typically will make this information publicly available to other users and to GDPR compliant third parties. This pertains to type all type B.1 data, plus usernames. 

Type B.2 data is supplied to other users only when these other users are present or have access to the private context, such as a passworded chat channel or passworded game host, in which the data was created. This data is not disclosed to third parties, but it is retained to provide persistent chat functionality and is accessible to server administrators whilst it is retained.

When users choose to act as battle hosts, or provide automated battle hosts, the IP address of this host becomes publicly available information, necessarily to allow our users to make a (direct) connection to the battle, and for the battle host to accept or decline this connection. Battle hosts receive usernames plus type B data associated to the battles that they host and will typically distribute this data to other connected users. Battle hosts also necessarily become aware of the IP addresses of users attempting to connect to their battles. On a technical level, the distributed nature of battle hosting amongst our users arises from a need for more computational resources and connectivity than the Spring server alone provides. Consequently, battle hosts take on responsibilities of their own under the GDPR and are required to comply fully with the policies set out in this document. 

Non-public information supplied to us on login, pertaining to all type A data excluding usernames, may be visible to our moderators and developers when there is a need under items 3 or 6. Hashed passwords are accessible only to developers with a need to access the live user database. Type A data excluding usernames is not disclosed to third parties or other users, except to battle hosts as described above, and except where we judge it necessary for purposes of verifying the authenticity of users; we use external GDPR compliant services to assist in automated detection of potentially malicious users attempting to conceal their own identities. 

We reserve the right to pass ANY data that we hold to relevant law enforcement agencies if we believe that it may contain indications or evidence of illegal action.

==Data storage and protection==

All data retained are kept within databases and/or file archives on our server, located within the EU. 

The database files are directly accessible only to chosen individuals who require access for purposes related to server development or administration; access is possible only via an encrypted connection using individual credentials. The list of individuals with this access is reviewed regularly on timescales related to their activity. All data of type A held by us is contained within these databases.
Archives of replay files are made available through a public website.

Communications of users to and from our lobbyserver, which covers all type A data sometimes excepting usernames and chat taking place on the lobbyserver, is encrypted (except in cases where users have persistently declined over many years to install software updates supporting this encryption). Passwords are communicated and stored only in hashed format.

Communications taking place between players and spectators within online games, typically consisting of ingame commands and chat, are not encrypted; the Spring engine uses a bespoke protocol for such communications, which prioritises low latency. These communications consist of less sensitive data - type B data plus usernames – and it is judged here that the requirement of minimal latency should take precedence over the benefits to privacy of an encryption layer.

==Retention and erasure of personal data==

The record of type A data of a user is retained for as long as we regard the user as active or with a significant possibility of returning to activity; we engage in automated deletion of such records for users who have remained inactive for 5 consecutive years. This threshold is chosen based on the behaviour of our users, who are known to return after lengthy periods of absence.

Type B.1 data of users, plus usernames, is retained in the form of publicly available archives of online games. We engage in automated deletion of this data after 3 years, but in special cases some replays may be retained for longer.

Type B.1 and type B.2 data consisting of chat taking place on the server within registered channels, in which channel history functionality has been enabled, is stored for up to one month in a database that provides persistent chat functionality. Otherwise, type B.2 data is not retained.

Users should note that when they create type B data they typically do so in the presence of other users who may retain and process the data for periods and purposes outside of our control or knowledge.

We retain and erase type C data according to its license. We regard maintaining a publicly available archive of this data as critical to providing our services and to future development and, whilst we respect individuals right to erasure upon request of any personal data within this archive, we do not engage in automated deletion of it after any time period.


[[Category:Spring]]</text>
      <sha1>5o4xykwccoch9k0d7tfwhiuyfwkar5t</sha1>
    </revision>
  </page>
  <page>
    <title>Debian install</title>
    <ns>0</ns>
    <id>2920</id>
    <revision>
      <id>28630</id>
      <parentid>21256</parentid>
      <timestamp>2014-06-14T12:21:15Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3281">[[Linux|Linux Setup Guide]] &lt; {{FULLPAGENAME}}

__TOC__
[[Image:debian.png]]

For packaging &lt;font color=&quot;#00DD00&quot;&gt;requests&lt;/font&gt; or &lt;font color=&quot;#FF0000&quot;&gt;complaints&lt;/font&gt;, please contact [[Linux:Packaging#Debian | the packagers]].

=Debian=

==6.0 (Squeeze - Unstable)==

'''Official packages''' are available at usual mirrors so just:

&lt;code&gt;&lt;pre&gt;
sudo apt-get install spring
sudo apt-get install springlobby
&lt;/pre&gt;&lt;/code&gt;

will give you the latest packaged and uploaded release of spring for debian.

Debians info page for the spring packages can be found here:
http://packages.debian.org/sid/spring

The packages from unstable are usually up to date, if you always want to use the latests spring packages you should add the following line to your /etc/apt/sources.list

&lt;code&gt;&lt;pre&gt;
deb http://ftp.de.debian.org/debian sid main
&lt;/pre&gt;&lt;/code&gt;

If you don't want to use unstable for your system you need to use apt pinning or add a file with the following content in /etc/apt/apt.conf.d/ (i.e. /etc/apt/apt.conf.d/99default):

&lt;code&gt;&lt;pre&gt;
APT::Default-Release &quot;stable&quot;;
&lt;/pre&gt;&lt;/code&gt;

==5.0 (Lenny)==

Version tested: 0.79.1.2
&lt;ol&gt;

&lt;li&gt;Install needed packages for compiling (as superuser or sudoer)
&lt;br&gt;&lt;br&gt;
&lt;code&gt;aptitude install build-essential p7zip-full zlib1g-dev libfreetype6-dev libsdl1.2-dev libopenal-dev libglew-dev libdevil-dev zip libvorbis-dev libxcursor-dev libglew1.5-dev libboost1.35-dev cmake libwxgtk2.8-dev&lt;/code&gt;
&lt;/li&gt;&lt;br&gt;

&lt;li&gt;Unpack Spring tarball, cd into its directory and compile (as user)
&lt;br&gt;&lt;br&gt;
&lt;code&gt;cd spring-directory&lt;br&gt;
cmake .&lt;br&gt;
make&lt;/code&gt;&lt;/li&gt;
&lt;br&gt;

&lt;li&gt;
Install as superuser or sudoer&lt;br&gt;&lt;br&gt; 
&lt;code&gt;make install&lt;/code&gt;
&lt;/li&gt;&lt;br&gt;
&lt;li&gt;Unpack Spring Lobby, cd into its directory, compile and install
&lt;br&gt;&lt;br&gt;
&lt;code&gt;cd springlobby-directory&lt;br&gt;
./configure --disable-torrent-system --disable-sound&lt;br&gt;
make&lt;/code&gt;&lt;/li&gt;
&lt;br&gt;

&lt;li&gt;
Install as superuser or sudoer&lt;br&gt;&lt;br&gt;
&lt;code&gt;make install&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;b&gt;Optional:&lt;/b&gt;

You can install checkinstall and create a deb package by substituting &lt;b&gt;make install&lt;/b&gt; with:
 
&lt;code&gt;checkinstall make install&lt;/code&gt;

This will create a deb file along with installing it so next time you can remove it with:
 
&lt;code&gt;dpkg -r spring-&lt;version&gt; springlobby&lt;/code&gt;


==4.0 (Etch)==

This is not updated for 0.76b1. Somebody check if the install succeeds for the new release this way?

This is for version 0.75b2.

We need to use Yokozar's Ubuntu package, so we need some tricks.

The --build step will take about 15 minutes. Hopefully we have precompiled binaries for etch soon too.

&lt;code&gt;&lt;pre&gt;
wget -q http://ppa.launchpad.net/spring/ubuntu/387EE263.gpg -O- | \
    sudo apt-key add -

wget http://ppa.launchpad.net/spring/ubuntu/sources.list.d/gutsy.list \
    -O /etc/apt/sources.list.d/springproject.list

sudo apt-get update
sudo apt-get build-dep spring -y
sudo apt-get --build source spring -y
sudo dpkg -i spring_0.75~b2-1_i386.deb spring-data_0.75~b2-1_all.deb
&lt;/pre&gt;&lt;/code&gt;

If you want to install SpringLobby also, follow the instructions later on in this guide.

Your paths are: Spring executable in &lt;code&gt;/usr/games/spring &lt;/code&gt; and
read-only data in &lt;code&gt;/usr/share/games/spring&lt;/code&gt;.


= See Also: =
* [[Finalizing_linux_install]]
* [[Troubleshooting_linux]]

[[Category: Linux]]</text>
      <sha1>boblbsqbo6q3khpwqazb3p6m6brt67t</sha1>
    </revision>
  </page>
  <page>
    <title>Debug GFX problems</title>
    <ns>0</ns>
    <id>3430</id>
    <revision>
      <id>29289</id>
      <parentid>27012</parentid>
      <timestamp>2015-06-10T16:12:49Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="342">to debug GFX problems, you can use [https://github.com/apitrace/apitrace apitrace]

If you are on windows and have an ATI card, [http://developer.amd.com/tools/heterogeneous-computing/codexl/ CodeXL] can be used.

Use [https://springrts.com/phpbb/viewtopic.php?f=12&amp;t=33437 Software Rendering] to find general errors.

[[Category:Engine Dev]]</text>
      <sha1>6iv6p8uem4fv24wxgf4gvxn7cye71zt</sha1>
    </revision>
  </page>
  <page>
    <title>Debugging sync errors</title>
    <ns>0</ns>
    <id>2577</id>
    <revision>
      <id>30189</id>
      <parentid>30188</parentid>
      <timestamp>2016-07-26T20:52:10Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>/* Using buildbot */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5287">[[Engine_Development|Development]] &lt; Debugging Sync Errors

=Debugging Sync Errors=
Desync happens when simulation gives different results for different clients. Currently it is detected by means of checksumming crucial data on every write; this checksum is then transferred to the host, who compares them to his own checksum.

For purposes of debugging, the sync debugger stores every such write with some debugging information. When a desync happens, the write history is compared on every client, who then sends locations where computation has given different results. The location is then resolved to line number of the engine source, which should provide information about the nature of the desync.

First of all, before trying to find a sync-error you should make sure, that running with SIGNAL_NANS=TRUE works without getting SIGFPE's and valgrind doesn't detect invalid reads/writes as this can cause desyncs, too.

==check for NANs==

edit CMakeCache.txt and set SIGNAL_NANS=TRUE, recompile spring.

run spring and ideally, if you have a replay which desynced, run it with the nan-checking spring. else try some stuff like

&lt;code&gt;&lt;pre&gt;
/cheat
/give all
/give all 1
/give 100 unitname ...
&lt;/pre&gt;&lt;/code&gt;

==check for memory corruption with gcc's address sanitizer==

compile spring with gcc's address sanitizer (gcc &gt;= 4.8.0)

&lt;code&gt;&lt;pre&gt;
cmake . -DCMAKE_CXX_FLAGS=-fsanitize=address -DCMAKE_C_FLAGS=-fsanitize=address
make spring-headless
&lt;/pre&gt;&lt;/code&gt;

then run the demo with the compiled spring:

&lt;code&gt;&lt;pre&gt;
spring-headless demofile.sdf
&lt;/pre&gt;&lt;/code&gt;

==Compiling==

To enable sync debugging, you have use a special build of Spring. You can either use the buildbot or compile it yourself.

===Using buildbot===
Go to http://buildbot.springrts.com/builders/full-windows-test set 

&lt;code&gt;
&lt;pre&gt;
Property 1 Name = config
value           = syncdebug
&lt;/pre&gt;
&lt;/code&gt;

If the build works, an executable will be uploaded to the usual place; at the time of this writing, it's http://springrts.com/dl/buildbot/syncdebug/. The generated archive will have [syncdebug] in its name.

Valid values for config are stored in [https://github.com/spring/spring/blob/develop/buildbot/master/master.cfg#L57 master.cfg] of the buildbot config.

===Self-Compile===
To compile it, first get the same revision from git, configure with

&lt;code&gt;&lt;pre&gt;cmake -DCMAKE_BUILD_TYPE=DEBUG -DSYNCDEBUG=true&lt;/pre&gt;&lt;/code&gt;


you can add

&lt;code&gt;&lt;pre&gt;-DTRACE_SYNC=true&lt;/pre&gt;&lt;/code&gt;

which makes spring write a trace file which can be compared with &quot;diff&quot;.

==Running==
# Host a game. Make sure '''every''' player who joins has this exe; it's not needed to have it at the time of joining the battle, but when the game starts, everyone must have it. Expect random undefined behaviour otherwise.
# If you want engine source lines, the host has to download two more files: debug symbols and addr2line. Debug symbols are generated and uploaded by buildserv; as of now, they can be found at http://springrts.com/dl/buildbot/syncdebug/ . addr2line is a part of MinGW32 [http://sourceforge.net/project/showfiles.php?group_id=2435&amp;package_id=11290 binutils package].
## Download debug symbols
## Download addr2line
## Extract both to where your syncdebug-enabled spring.exe lives
## '''Rename debug symbols to spring.dbg'''
Only the host needs to download addr2line and debug symbols.

When everybody is in game, test your setup by enabling cheats (''/cheat'') and having one of the players do a test desync (''/desync''). The game should pause and syncdebugger should do its work. If the game pauses, but you won't see SD messages, it's likely that one of the clients doesn't have the correct exe.

In addition to syncdebugger logs, syncdebug engine builds also have synctrace enabled. This option makes spring.exe write a file called trace&lt;playernum&gt;.log which logs important simulation events in a diff-friendly format. After a desync, get this file from the desynced player(s) and do a ''diff -u yourtrace histrace'' to find the first ''logged'' sync mismatch. The real desync probably happened somewhere in between the two log lines.

If you're a game developer, please be aware that Lua may be a source of desyncs. E.g. table iteration using pairs when you have tables, coroutines, or functions as keys is not a sync-safe operation, see [http://springrts.com/mantis/view.php?id=1050 mantis #1050] for example of such a desync.

===available commands===
/desync
This command modifies some game data which causes the game to desync. Use this to test the sync debugger.

/fakedesync
This just triggers the sync debugger, without desyncing the game. The sync debugger will print an error â€œHuh, all checksums are equal?!?â€ to the logfile after issuing this command. Use this to test the sync debugger. Server only.

/reset
Reset the sync debugger to it initial state. Use this if you want to continue playing after the sync debugger finished outputting the debugging info.




===Post processing===

All previously required postprocessing has now been built into the sync debugger, so this step is quickly done: just check that syncdebug-server.log looks sane and if it does, send it to the team. You can also make a diff of trace0.log (taken from client + server) to see where the desync started.

[[Category:Engine Dev]]</text>
      <sha1>cevv4sv60f48xtce1ns2ek26dpv9gvr</sha1>
    </revision>
  </page>
  <page>
    <title>Dedicated Spamming</title>
    <ns>0</ns>
    <id>1556</id>
    <revision>
      <id>11371</id>
      <parentid>6144</parentid>
      <timestamp>2006-09-22T17:26:47Z</timestamp>
      <contributor>
        <username>Redstar</username>
        <id>6</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="816">'''Dedicated Spamming''' is an offensive battle tactic which focuses on producing one type of unit to exploit a particular loophole, at the cost of flexibility. It is similar to swarming, but slightly less interesting and much riskier logically in any balanced game.

Dedicated Spamming is particularly effective when:
* Enemy is engaging in the same tactic with a patently inferior unit
* Enemy is relying upon forces with a specific exploitable weakness
* Enemy is relying upon a small force
* Enemy is withdrawing from territory

Dedicated Spamming is likely to fail if:
* Enemy is differentiating his forces
* Enemy's defenses are varied
* Enemy has a significantly more powerful economy
* Enemy is flexible in tactics


''' [[Strategy_and_Tactics|&lt;- Back to Strategy and Tactics page]]'''

[[category:Strategy]]</text>
      <sha1>t6rx3e69ugn2s9juvzlcbiaanopbkwq</sha1>
    </revision>
  </page>
  <page>
    <title>Defense buildings</title>
    <ns>0</ns>
    <id>1493</id>
    <revision>
      <id>26414</id>
      <parentid>26362</parentid>
      <timestamp>2013-03-08T23:38:09Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>XTA -&gt; Xta</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="981">== Defensive Buildings ==
&lt;p&gt;This details the various defensive buildings in [[XTA]].&lt;/p&gt;

=== Land-Based ===
&lt;p&gt;The larger group (as opposed to sea-based, and (maybe;)) eventually air-based). This group includes everything, from lasers to missiles and plasma cannon.
&lt;br&gt;

* Ground Defense
** Lasers
*** [[LLT]] (Light Laser Tower)
*** [[HLT]] (Heavy Laser Tower)
*** [[Energy Weapon]]
** Plasma
*** Pop-Up Cannon
*** Plasma Battery
*** LRPC (Long Range Plasma Cannon - aka VLRPC)
*** RFLRPC (Rapid-fire Long Range Plasma Cannon)
** Wall
*** Dragon's Teeth
*** Fortification Wall
* Air Defense
** Missiles
*** [[Missile Tower]]
** Flak
*** [[Flak Cannon]]
* Intelligence
** Radar
** Advanced Radar
** Jammer
&lt;/p&gt;

=== Sea-Based ===
&lt;p&gt;This category include every definsive structure built on or under the sea.
&lt;br&gt;

* Sea Defense
** Lasers
*** Floating HLT
** Torpedo
*** Depth Charge Launcher
*** Advanced Torpedo Launcher
** Anti-Air
*** Floating Missile Tower

[[Category:Xta]]</text>
      <sha1>8jnfajbgqkcdzbdjc262h1rknqh7h6w</sha1>
    </revision>
  </page>
  <page>
    <title>Defensive Lines</title>
    <ns>0</ns>
    <id>1555</id>
    <revision>
      <id>19013</id>
      <parentid>12567</parentid>
      <timestamp>2010-03-13T18:04:44Z</timestamp>
      <contributor>
        <username>Koshi</username>
        <id>2371</id>
      </contributor>
      <comment>fix category</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="796">A defensive line is a defended position, made to hold the front of battle or maintain station in the midst of an offensive.

Generally, a defensive line is comprised of defensive structures and mobile units... with this combination it can be quite effective. However, a failure to produce both for such a use generally leads to defeat or inefficency in a balanced mod.

Many new players invest themselves in a costly defensive line, which commonly goes hand in hand with &quot;porcing&quot;. However, most experienced players use an equivalent to help hold territory.

Defensive lines are generally effective to some degree, and remain a viable tactical development in some situations throughout any balanced mod.

''' [[Strategy_and_Tactics|&lt;- Back to Strategy and Tactics page]]'''
[[Category: Strategy]]</text>
      <sha1>4bb8z82ph46s6phs5ozyq0qhohs4ogc</sha1>
    </revision>
  </page>
  <page>
    <title>Delaying Inevitable Defeat: Development Time</title>
    <ns>0</ns>
    <id>1824</id>
    <revision>
      <id>19639</id>
      <parentid>19015</parentid>
      <timestamp>2010-07-14T07:36:47Z</timestamp>
      <contributor>
        <username>Enetheru</username>
        <id>2783</id>
      </contributor>
      <minor/>
      <comment>removed erroneous mention of &quot;playing spring&quot;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1871">'''Introduction'''&lt;br&gt;
After several months of playing, it has become apparent to me that I am better known for making comebacks than for winning battles. Upon reading the treatise on winning in a one on one enviroment, I looked back upon my own experiences and drew several conclusions and tips that one should bear in mind, especially when playing against terrible odds.

'''Inevitable Defeat &amp; You'''&lt;br&gt;
The concept of inevitable defeat is often simply in your mind. If you understand that, you can often overcome it. Yes, you lost your defensive line, your standing forces, control of the sea, your massive air superiority, your main base. So what? If you have just one constructor, or one ally willing to give you one, you can make a difference - a lasting difference! If you don't have a constructor, and cannot obtain one, you're still not out of the woods - you can still make a difference - albeit it a minor one!

''In the face of crushing defeat, one is given a unique opportunity to play without reserve.'' 

This is little different at base from the anarchic freedom allowed to individuals during any number of wars in human history. However, in the limited enviroment of Spring, such a condition is not given to atrocity - for there are only warriors, and no civilians. It allows for unfettered creativity.

What better time to develop your own tactics and strategy than when afflicted with unfettered creativity? Limited resources, little left to lose... this is not a time to surrender! This is a time to experiment!

If you want me to sum up this stream of thought, I will put it thus...
*In the face of defeat, experiment
*You may not be defeated completely, despite all evidence to the contrary
*There is no shame in defeat if you make an effort

-Neddiedrow

''' [[Strategy_and_Tactics|&lt;- Back to Strategy and Tactics page]]'''
[[Category: Strategy]]</text>
      <sha1>3gxl6oolqqbzjlkor81slu121ctg7vh</sha1>
    </revision>
  </page>
  <page>
    <title>Deprecated Lua GL</title>
    <ns>0</ns>
    <id>3856</id>
    <revision>
      <id>31247</id>
      <parentid>31246</parentid>
      <timestamp>2020-06-19T21:46:14Z</timestamp>
      <contributor>
        <username>Ivand</username>
        <id>2933</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="690">* gl.Lighting
* gl.ShadeModel
* gl.Fog
* gl.AlphaTest
* gl.LineStipple
* gl.Material
* gl.LineWidth
* gl.PointSize
* gl.PointSprite
* gl.PointParameter
* gl.TexEnv
* gl.MultiTexEnv
* gl.TexGen
* gl.MultiTexGen
* gl.Shape
* gl.MultiTexCoord
* gl.SecondaryColor
* gl.FogCoord
* gl.EdgeFlag
* gl.DrawListAtUnit
* gl.Light
* gl.ClipPlane
* gl.CreateList
* gl.CallList
* gl.DeleteList
* gl.GetGlobalTexNames
* gl.GetGlobalTexCoords

The following calls are emulated for convenience:
* gl.Color
* gl.Vertex
* gl.TexCoord
* gl.Normal

* gl.BeginEnd will be probably removed, to discourage creation of JIT temporary VAO/VBO


Potentially matrix functions like Push/Pop/Mode will be removed as well.</text>
      <sha1>6sywhjadhpq2do5l8oqjkdrrfxzoel2</sha1>
    </revision>
  </page>
  <page>
    <title>Deprecated Map Making Guides</title>
    <ns>0</ns>
    <id>3217</id>
    <revision>
      <id>26613</id>
      <parentid>25251</parentid>
      <timestamp>2013-03-19T21:02:54Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>wanted links</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2952">{{deprecated|all tutorials on this page are outdated. use [[Map_development]] for up to date instructions}}


= Full Guides For Map Making (Outdated) =

The guides listed below are outdated and scheduled for archival.

*[[Create maps|aGorm's map creating Guide]]
*[[Map Making Guide|aGorms Ultimate Map Making Guide(unfinished)]]
*[[IceXuick Map Design Help|IceXuicks Map creating Guide]]
*[http://taspring.clan-sy.com/phpbb/viewtopic.php?t=3941 Forboding Angel's map creating Tutorial]
*[[Maps:Tutorial|Another tutorial from a designing point of view]]
*[[A Complete Map Making Tutorial|A Complete Map Making Tutorial (under construction)]]
*[[Runecrafter|Runecrafter's Map Tutorial]]
*[http://springrts.com/phpbb/viewtopic.php?f=13&amp;t=15390 Beherith's map creating tutorial using the World in Conflict map editor]

= Specific Guides (Extremely Outdated!) =

The linked pages below are scheduled for archival.

*[[Maps:SMD|Spring Map Definition(smd) reference]]
*[[Maps:Compiling|Everything about Compiling your map]]
*[[MapsBalance|Some things about map balance]]
*[[MapSizes|Map sizes in pixels]] and memory information about map sizes
*[[Height Map Tutorial|RogerN's height map tutorial]]
*[[Create map texture with povray|Basic howto: create map texture with Povray]]

Features. Stones, rocks, trees, for your map can be found at:&amp;nbsp;[http://springrts.com/phpbb/viewtopic.php?f=56&amp;t=25752 http://springrts.com/phpbb/viewtopic.php?f=56&amp;t=25752]


= Reference and FAQs (Outdated) (Deprecated) =

*[[Maps:Noob Mistakes]]
*[[Water Height: Mapconv vs. Heightmap]]

----

TIPS:

A useful tip, on almost every map in a 1v1 you will start opposite your opponent unless you choose your position. this is because random order simply randomly distributes players at the default start points which in almost every map are opposite each other. One exception that I know of is flooded desert where you both start on the left hand island.

----

Make sure that your map's ideas and game-play is sound before you release it for good. Do a lot of beta testing and learn about good level design! You can learn about what makes a good map by playing on good maps, so play often and map well. -url00



= Map making: SM3 (Experimental) (Deprecated) =

SM3 (Spring Mapformat 3) is getting allong nicely and maps using this format can be made. The following is documented so far.

*[[SM3 Map Format|jcnossen's brief description on how this mapformat works.]]
*[[SM3 FAQ|The first FAQ for the new mapformat.]]
*[[Maps:Map Designer|SpringMapDesigner]]

'''''NOTE:''''' SM3 format is &lt;s&gt;broken at the moment, do not use it. It only renders at all if sm3 shaders are disabled in springsettings, and even then with very low fps &lt;/s&gt; working now: [http://springrts.com/phpbb/viewtopic.php?p=396749#p396749 http://springrts.com/phpbb/viewtopic.php?p=396749#p396749] but performance is untested, . Software rendering is corrupted on nvidia cards, but not on ati ( unverified )</text>
      <sha1>2wbapvqifq1cptlvmtax2vrxptu1t9c</sha1>
    </revision>
  </page>
  <page>
    <title>Dev:LobbyDownloadSystems</title>
    <ns>0</ns>
    <id>3235</id>
    <redirect title="Download Systems" />
    <revision>
      <id>24074</id>
      <timestamp>2012-03-15T05:00:29Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>moved [[Dev:LobbyDownloadSystems]] to [[Download Systems]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30">#REDIRECT [[Download Systems]]</text>
      <sha1>fghulfj40mhva0cpwuxuzk2hd8c5c8b</sha1>
    </revision>
  </page>
  <page>
    <title>Development</title>
    <ns>0</ns>
    <id>980</id>
    <redirect title="Development:Main" />
    <revision>
      <id>27595</id>
      <parentid>26187</parentid>
      <timestamp>2013-08-24T23:07:19Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>double redirect</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30">#REDIRECT [[Development:Main]]</text>
      <sha1>4zg0g527z2j88705wkj3380oztpl66l</sha1>
    </revision>
  </page>
  <page>
    <title>Development:Getting Started</title>
    <ns>0</ns>
    <id>2616</id>
    <revision>
      <id>30300</id>
      <parentid>30299</parentid>
      <timestamp>2016-12-08T18:56:04Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>/* Development links */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5751">[[Engine_Development|Development]] &lt; Getting Started

=Starting Spring Development=
'''NOTE: Outlined below is information on assisting with the development of the Spring source itself. For information about developing a game (units, widgets, maps, etc.) see the [[Gamedev:Main]] page.'''

'''[[EngineSource_for_GameDevs|Even if you are developing a game, it is highly recommended that you get the engine source. Engine source + full text search: DO IT.]]'''

==Overview==
To start development, you will need:
#To read the [[Coding_Standards]]
#A good code manipulation program: [[Development_IDEs]]
#[[Building_spring|Compiling]] the source code

==Learning C++==
You will need to know C++ to modify or understand Spring's source code. If you are interested in learning C++, see [[Learning_CPP]]

However please note that badly designed code (code created by a C++ novice for example), even if working will likely not be included in the spring code. Spring is a large project, and therefore it is necessary to stay away from hack jobs and create general solutions to problems.

=Source Code Documentation=
The [https://springrts.com/dl/buildbot/doc/ doxygen documentation] can provide an overview about the source, directory structure and its dependencies. Unfortunately, there is no server running it, so you need to make them on your own, to do this, install doxygen and run &quot;doxygen&quot; in spring source directory (will take some time).

An explanation on how the code is executed in game can be found in the [[Spring Engine Code]]
page.

==Development Guidelines==
Before starting to make modifications to the source, take a look at the [[development guidelines]] which outlines some important things to think about. To find something interesting to work on, look for todos in the [http://springrts.com/phpbb/viewforum.php?f=60 forum]. You can also check in the forums to see what others are doing. If you do edit the code, please add [[Doxygen style comments]] to the code, which will then enhance the source code documentation.

==Keep track what others do==
If you develop with others, you need to know what they do. You can browse the source [http://github.com/spring/spring/tree/develop at our github-page], and there is a [http://github.com/feeds/spring/commits/spring/develop commit newsfeed].

==Buildbot and Stacktrace translator==
A buildbot server is [http://buildbot.springrts.com/waterfall?reload=60 here] available to automatically compile Spring, the default AIs and make the installer. It can also [http://stacktranslate.springrts.com/ translate stacktraces] directly from uploaded [[infolog.txt]] files.

=Important Developer Tasks=
==[[Engine_Profiling|Profiling]]==
==[[Debugging_sync_errors|How to debug SyncErrors]]==
==[[Debug GFX problems]]==

=How to get your code included=
If you create something that you think should be included in the official source tree please create a pull request to the develop branch of the spring repository on github.com.

Make sure that your changes:
# Were successfully tested locally.
# Conform with the [[Coding Standards]].
# Are spread over an appropriate amount of commits - Please refrain from combining many individual changes into a single commit and from including merge commits.
# Include an update to the changelog if it's a major change - this is not to save work for the devs, but mostly to provide a concise explanation of what the pull request changes.

Post in the [http://springrts.com/phpbb/viewforum.php?f=12 development forum] or drop in [[IRC|#sy]] after creating the pull request (or while coding it) to get feedback and eventually to have it included.

=Spring Engine TODO list=
If you want to code something, look into the [http://springrts.com/phpbb/viewforum.php?f=60 New Developers Forum] for TODOs.
There is also a [http://springrts.com/phpbb/viewforum.php?f=21 feature request forum], which may give you some ideas. Don't be overwhelmed by the sheer number of (silly) requests though!

Alternatively, you may just search the code for the [http://en.wikipedia.org/wiki/Comment_%28computer_programming%29#Tags famous comment tags],
for example on linux:
{{code|grep -r &quot;TODO&quot; rts}}

The Bugtracker contains a [http://springrts.com/mantis/view_all_bug_page.php long todo-list] as well.

There are also some [[Project_proposals|project proposals]].

=Development links=
* [http://github.com/spring/spring/ View the latest source in a web browser]
* [https://springrts.com/dl/buildbot/doc/{{EngineVersion:Stable}}/engine/ Doxygen documentation]
* [http://springrts.com/mantis/ Bug Tracking System]
* [http://buildbot.springrts.com/waterfall?reload=60 buildbot]
* [http://springrts.com/dl/buildbot/ buildbot builds]
* [https://springrts.com/dl/buildbot/doc/{{EngineVersion:Stable}}/engine/d9/d28/group__unitsync__api.html Unitsync API docs]
* [[Development:Minutes|Developer Meetings]]
* [http://stacktranslate.springrts.com Stacktrace Translator] (translates stacktraces from official win32 builds)
* [http://sourceforge.net/projects/springrts SourceForge project page]
* [http://github.com/spring/spring-website/ Web site repository]

=Legal=
The Spring engine and content in the main installer is Free Software, distributed under the GPL license.  You may distribute the Spring Engine freely, modify its contents, or redistribute the source.  For details, please read the license, which is included in the installer and source code. 

If you wish to use a game or mod in a game CD, promote it in a magazine, or promote it on another website, please contact the game's maintainers.  The Spring Project is not responsible for the legal status of any games built with or using this engine, and does not support redistribution of illegal content.

[[Category:Engine Dev]]</text>
      <sha1>h1l1gp0361729isfj0wnzts0zm0c8io</sha1>
    </revision>
  </page>
  <page>
    <title>Development:Main</title>
    <ns>0</ns>
    <id>1065</id>
    <revision>
      <id>29499</id>
      <parentid>29498</parentid>
      <timestamp>2015-08-21T06:52:11Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2052">{|width=&quot;100%&quot; style=&quot;border: 0px; border-spacing:0px&quot;
|width=&quot;500px&quot; valign=&quot;top&quot; style=&quot;padding-left:10px; padding-right:10px&quot;|

'''[https://github.com/spring/spring GitHub and Source Code]'''

Engine source code&lt;br&gt;

'''[[Links|Important Links]]'''

Important Community and Development links to git repos &amp; subprojects.&lt;br&gt;


'''[[Building spring|Compiling Engine]]'''

How to build the Spring engine from source.&lt;br&gt;


'''[[Development:Getting_Started|Engine Development]]'''

Information regarding contributing to the source code of the Spring engine.


'''[[Lobby_Development|Lobby Development (Clients and Servers)]]'''

Information regarding contributing to the source code of the different lobby clients and servers available for Spring.


'''[[Gamedev:Main|Game Development]]'''

Lots of links to valuable Articles and forum threads regarding Game, Mod &amp; Unit Development.


'''[[Mapdev:Main|Map Development]]'''

Tutorials and other useful information for creating maps.


'''[[Lua_Scripting|Lua Development]]'''

Information regarding the use of the supplementary Lua scripting language for Widgets and beyond.


'''[[AI:Development|AI Development]]'''

All you ever wanted to know about Skirmish AI Development for Spring, and more. This includes Skirmish and Lua AIs.


'''[[Infrastructure:Development|Infrastructure Development]]'''

Information about springs infrastructure

|valign=&quot;top&quot; style=&quot;padding:0px&quot;|

== Quick Links ==


|}

[[Category: Development]]</text>
      <sha1>1dt5jom16t0i00d9g11j72ilv8jleqr</sha1>
    </revision>
  </page>
  <page>
    <title>Development:Minutes</title>
    <ns>0</ns>
    <id>3016</id>
    <revision>
      <id>26687</id>
      <parentid>26371</parentid>
      <timestamp>2013-03-20T19:51:29Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>recat</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="365">=Developer Meetings=

The devs try to meet once a week, to discuss various changes in the engine. The logs of the meetings will be published to allow further discussions with other devs (game/lobby/ai/...) and users.

The minutes are published in the [http://springrts.com/phpbb/viewforum.php?f=73 Development &gt;&gt; Meeting Minutes] sub-forum.

[[Category:Engine Dev]]</text>
      <sha1>l530v15n4hpuznqvbg447f1vxqhva4x</sha1>
    </revision>
  </page>
  <page>
    <title>Development:Overview</title>
    <ns>0</ns>
    <id>3555</id>
    <redirect title="Development:Main" />
    <revision>
      <id>27593</id>
      <timestamp>2013-08-24T23:06:32Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>Flozi moved page [[Development:Overview]] to [[Development:Main]]: change to 'Main' for consistency with MapDev:Main and GameDev:Main</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30">#REDIRECT [[Development:Main]]</text>
      <sha1>4zg0g527z2j88705wkj3380oztpl66l</sha1>
    </revision>
  </page>
  <page>
    <title>Development IDEs</title>
    <ns>0</ns>
    <id>1181</id>
    <revision>
      <id>27307</id>
      <parentid>27304</parentid>
      <timestamp>2013-06-12T10:28:39Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>prefer opensource ide's / reorder</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2524">The Spring engine is highly complex; it is recommended that you use an IDE such as  Code::Blocks or Eclipse.

==Compatibility with official release builds==
In order to compile code that synchronizes with the official release, you'll need to compile with GNU GCC/G++ 4.0 or higher (MinGW). So, whilst you can edit in either of the aforementioned development environments, note that you won't be able to use them to build anything to work with the real Spring engine unless you install the MinGW compiler. In practice this is not too bad: usually you develop a patch against the latest source code, which usually doesn't synchronize with the official release anyway, so it does not matter which compiler you use.


==Code::Block/Dev C++==
Code::Blocks (and also Dev C++) is a light weight (around 3MB download), widely-used free/open source alternative to Visual Studio .NET, and can be downloaded here: http://www.codeblocks.org/ . Dev C++ is in the same vein as Code::Blocks, but slightly less advanced. It can be downloaded here: http://www.bloodshed.net/devcpp.html . Code::Blocks and Dev C++ both come with GNU GCC/G++ 3.4.

==Eclipse==
A good full blown free C++ IDE is Eclipse. Eclipse does not come with C++ support by default but has a downloadable plugin that provides C++ support. See http://www.eclipse.org/ and http://www.eclipse.org/cdt/. The download is much larger at around 100MB for the basic tool without the C++ plugin.

==Visual Studio 2012 Express for Windows Desktop==
[http://www.microsoft.com/visualstudio/eng/downloads#d-express-windows-desktop Visual Studio 2012 Express for Windows Desktop] is for free, but requires a registration after 30 days (to get a free license).

==Notes==
The game engine is found inside the /rts/ folder. The AI subsystems are located in respective folders. Take a peek and see where everything is.
You can take a look at http://springrts.com/doxygen/ for a good (graphical) and dynamic display of how the Spring engine code hangs together.

Compiling the source will make it into a playable executable. The very same IDEs previously mentioned can compile the source, so see the appropriate documentation for the program you are using to compile properly. Make sure that you are in Release mode and not Debug mode when you compile, because the game may be very slow in Debug mode (and the executable may be huge!)

==Resources==
[http://en.wikipedia.org/wiki/Comparison_of_integrated_development_environments#C.2FC.2B.2B Comparison of C++ IDE's]

[[Category:Engine Dev]]</text>
      <sha1>qz9kh11ymgaewm3q6ay41psi4nu1ziz</sha1>
    </revision>
  </page>
  <page>
    <title>Development Rules</title>
    <ns>0</ns>
    <id>3565</id>
    <revision>
      <id>27779</id>
      <parentid>27758</parentid>
      <timestamp>2013-10-26T20:40:07Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>categorise</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1544">Note: these rules are WIP!
TODO:
add/integrate/check if covered:
 - http://springrts.com/phpbb/viewtopic.php?f=1&amp;t=17847
 - http://springrts.com/phpbb/viewtopic.php?f=15&amp;t=23418
 - http://etherpad.springrts.com/p/r.HBQmr0nvFuzEbpkD
 - http://springrts.com/phpbb/viewtopic.php?f=1&amp;t=6693
 - create sections development / lobby / forum

== Respect Licenses ==

We know about our history but we wan't make the future better:
We don't respect license violations that are introduced by new projects. GPL doesn't allow to link closed-source code to GPL'ed binaries.

Some examples:
This implicates that for example Lobbies that use unitsync have to be at least GPL, AI's written in C/C++ have to be GPL as well. Lua-Code that includes GPL has to be GPL, too. If a modified Spring Engine is released somewhere else, the used Code has to be released as GPL code, too.

== Don't use names of existing projects ==
If you create a new Game/Map/AI/Engine/Fork, don't use the same or a similar name of existing projects. If you want / have to, then ask the authors of the existing projects if its ok or not. We see project names similar to trademarks.

BA contains an [http://springrts.com/phpbb/viewtopic.php?f=44&amp;t=23943 example] about this.

== Speak / Ask! ==
If you have questions, speak with others! Ask! We are humans, we all make mistakes.

== Consequences ==
If you violate these rule(s), you/ your project / link to your project / autohost / ... will be banned and removed from our sites when you don't fix the violation.

[[Category:Development]]</text>
      <sha1>3jvywuus9dg4yb0726jwfz1a3sissjw</sha1>
    </revision>
  </page>
  <page>
    <title>Development guidelines</title>
    <ns>0</ns>
    <id>989</id>
    <revision>
      <id>29667</id>
      <parentid>26697</parentid>
      <timestamp>2015-10-11T00:47:55Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2541">This page details some important things to take note of when doing Spring development.

===Spring runs synchronized on all computers===
Spring's networking is built upon the assumption that all player's simulations are in sync and only send their (or their AI's) input over the network. This mean that you will have to be very careful to keep the simulation deterministic. Here is a few pointers to think about. 

* There are essentially two sorts of code in spring, synced and unsynced. Which code is what is not as clear as one could wish but essentially the synced code is anything that is reached through CGame::Simframe or handlers of some network msgs, unsynced is everything else (graphic, input, sound etc). Synced code can write anything but should only read synced data. Unsynced code can read anything but must not write synced data. The rest of the points here is essentially about synced code. 
* Always make sure to initialize variables. Even if the value doesnt seem to matter it might unsync the simulation. 
* Be paranoid about array boundaries, reading one byte beyond an array might not crash but it will probably cause sync problems at some point. 
* For random numbers use the CGlobalStuff::RandFloat etc functions (but never use these from unsynced code) 
* Never compare memory block locations other than for equality. This mean for example that you shouldn't create a std::set or std::map with a pointer as index if the order might matter. 

===Adding your own stuff===
We welcome anyone to make changes to Spring but in order to get them accepted into our distribution the following can be worth thinking about. 

* Spring is a game and different people might want different things from it. So if your changes change gameplay it might be a good idea to make it optional. 
* Resources (esp. CPU time) is always in short supply for spring so make sure that you dont waste them needlessly and that your resource usage is in proportion to the impact of your changes. 
* Ask around before starting on a change. Not only might you get tips about how to implement it in the best way but also if anyone else is working on something similar.
* Comment your code to make it more readable. In particular use [[Doxygen style comments]] so that header comments for classes/methods/functions/fields etc. automatically get pulled into the source code [https://springrts.com/dl/buildbot/doc/ documentation].

===Engine Branching Model===
The version currently in use:
[[File:EngineBranchingModel.png|640px]]

[[Category:Engine Dev]]</text>
      <sha1>kkx1v668hsqcsdpu49x3kvydh5hlm7p</sha1>
    </revision>
  </page>
  <page>
    <title>Donations</title>
    <ns>0</ns>
    <id>3750</id>
    <revision>
      <id>31355</id>
      <parentid>31350</parentid>
      <timestamp>2021-01-14T19:51:01Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>/* Server costs */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1580">Donations are handled by [[Authors#Active|Kloot]]


== Bitcoin ==
[[Image:Bitcoin_logo.png|50px|link=bitcoin:12WLzbiRjT52satsr8hT2WyYQpP9sWxSQB]]
[bitcoin:12WLzbiRjT52satsr8hT2WyYQpP9sWxSQB bitcoin:12WLzbiRjT52satsr8hT2WyYQpP9sWxSQB]
([https://springrts.com/phpbb/viewtopic.php?f=86&amp;t=32878&amp;p=564309#p564309 Source])

(sorry, no other options possible atm)

The Donation(s) try to cover the costs of our [https://springrts.com/wiki/Spring:Organization Organization] which indirectly help [[Authors|us]] develop the spring engine!


== Server costs==

currently [https://springrts.com/phpbb/viewtopic.php?f=1&amp;t=32932&amp;p=564906 60€ / year] [https://springrts.com/phpbb/viewtopic.php?f=38&amp;t=32711 since 2014.11.05].

{| class=&quot;wikitable sortable&quot;
|-
! Year !! Expense (EUR) !! Date !! Income (EUR)

|-
| 2014 || 10 || || 
|-
| 2015 || 60 || ||
|-
| 2016 || 60 || ||
|-
| 2017 || 60 || ||
|-
| 2018 || 60 || 2018.03.13 || [https://springrts.com/phpbb/viewtopic.php?p=585298#p585298 161]
|-
| 2019 || 60 || 2019.03.24 || [https://springrts.com/phpbb/viewtopic.php?f=64&amp;t=39261 15]
|-
|      ||    || 2019.04.01 || [https://springrts.com/phpbb/viewtopic.php?f=64&amp;p=590470#p590469 200]
|-
|      ||    || 2019.06.26 || [https://springrts.com/phpbb/viewtopic.php?p=591596#p591596 15]
|-
|      ||    || 2019.10.30 || [https://springrts.com/phpbb/viewtopic.php?f=64&amp;p=592639#p592639 15]
|-
| 2020 || 60 || ||
|-
| 2021 || 60 || 2021.01.14 || [https://springrts.com/phpbb/viewtopic.php?p=596855#p596855 40]
|-
| '''Sum'''  || '''430''' || '''Sum'''  || '''446'''
|-
|}

[[Category:Spring]]</text>
      <sha1>056i59qtff34vltnullgwigsxeg4jax</sha1>
    </revision>
  </page>
  <page>
    <title>Download</title>
    <ns>0</ns>
    <id>2548</id>
    <revision>
      <id>31348</id>
      <parentid>31347</parentid>
      <timestamp>2021-01-01T20:45:05Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>/* Spring Engine */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4316">&lt;center&gt;
{|style=&quot;margin-top: 15px; padding: 10px; background:rgba(45,180,19,0.5); border: 1px solid rgba(0,0,0,0.5); border-radius: 6px 6px 6px 6px; box-shadow: 0 2px 6px rgba(0,0,0,0.3), inset 0 1px 2px rgba(255,255,255,0.5), inset 0 10px 8px rgba(255,255,255,0.3);&quot; |
| If you just want to &lt;u&gt;get ready to play&lt;/u&gt;, you want this:
|-
| style=&quot;margin-top: 15px; text-align: center&quot; | &lt;span style=&quot;font-size: 150%;&quot;&gt;&lt;b&gt;[[GamesDownloads|Games Downloads]]&lt;/b&gt;&lt;/span&gt;
|}
&lt;/center&gt;


= Spring Engine =

Latest stable version: '''{{EngineVersion:Stable}}''' ({{EngineVersion:Stable:ReleaseDate}})

(These downloads &lt;span class=&quot;warning&quot;&gt;do not contain a lobby&lt;/span&gt;!)


{|
| style=&quot;padding-right:10px&quot;| [[Image:Window.png]]
| '''Portable: [http://sourceforge.net/projects/springrts/files/springrts/spring-{{StableEngineVersion}}/spring_{{StableEngineVersion}}_win64_portable.7z/download spring_{{StableEngineVersion}}_win64_portable.7z ~25MB]''' - [https://springrts.com/dl/buildbot/default/master/{{StableEngineVersion}}/win64/spring_{{StableEngineVersion}}_win64_portable.7z {mirror}]
|}


{|
| style=&quot;padding-right:10px&quot;| [[Image:Tux-G2.png]]
| '''64bit static binaries: [http://sourceforge.net/projects/springrts/files/springrts/spring-{{StableEngineVersion}}/spring_{{StableEngineVersion}}_minimal-portable-linux64-static.7z/download spring_{{StableEngineVersion}}_linux64.7z ~15MB]''' - [https://springrts.com/dl/buildbot/default/master/{{StableEngineVersion}}/linux64/spring_{{StableEngineVersion}}_minimal-portable-linux64-static.7z {mirror}]
'''distro native installs:''' follow the '''[[SetupGuide|Linux Setup guide]]'''
|}

Note: The linux64 build require glibc &gt;= 2.29 (i.e. at least debian 11 bullseye / ubuntu 20 focal) libcurl4 for spring &gt;104.0, libsdl2-2.0-0 and libopenal1 to be installed


&lt;!-- we have no working osx build :-(
{|
| style=&quot;padding-right:10px&quot;| [[Image:Apple.png]]
|
'''.app-Bundle: [http://sourceforge.net/projects/springrts/files/springrts/spring-{{StableEngineVersion}}/spring_{{StableEngineVersion}}_MacOSX-10.6-SnowLeopard.zip/download spring_{{StableEngineVersion}}_MacOSX-10.6-SnowLeopard.zip ~50MB]''' - [https://springrts.com/dl/buildbot/default/master/{{StableEngineVersion}}/osx64/spring_{{StableEngineVersion}}_MacOSX-10.6-SnowLeopard.zip {mirror}]'''&lt;br/&gt;
The Mac OS X port is &lt;span style=&quot;color:red;&quot;&gt;experimental&lt;/span&gt;. Help with its development would be greatly appreciated. Check our forum '''[https://springrts.com/phpbb/viewforum.php?f=65 &lt;span style=&quot;color:#bbf;&quot;&gt;here&lt;/span&gt;]'''.
|}
--&gt;

== License ==
The Spring Engine is licensed under the [https://github.com/spring/spring/blob/develop/LICENSE GNU GPL v2 (or later)].

= Donations =

We are happy about [[Donations]]!

= Testing/Nightly Builds =
Used for testing latest engine developments.
[https://springrts.com/dl/buildbot/ list of all test builds]

= Source Code =
== git ==
'''[http://github.com/spring/spring &lt;span style=&quot;color:#bbf;&quot;&gt;Spring project page at github&lt;/span&gt;]''' &lt;small&gt;[http://status.github.com (status page)]&lt;/small&gt;
=== Getting the Source ===
latest stable:
&lt;pre&gt;git clone -b master git://github.com/spring/spring.git&lt;/pre&gt;
development branch (won't work for online gaming):
&lt;pre&gt;git clone git://github.com/spring/spring.git&lt;/pre&gt;

=== Alternate git url ===
&lt;pre&gt;git://springrts.git.sourceforge.net/gitroot/springrts/springrts&lt;/pre&gt;

== Latest Stable Snapshot ==
This tarball is the same as that used to build the last public release. See [[Building spring]] for build instructions.

The packages below target Linux only and do not contain certain files required to compile using CMake on Windows.

'''[http://sourceforge.net/projects/springrts/files/springrts/spring-{{StableEngineVersion}}/spring_{{StableEngineVersion}}_src.tar.lzma/download spring_{{StableEngineVersion}}_src.tar.lzma]''' - [https://springrts.com/dl/buildbot/default/master/{{StableEngineVersion}}/source/spring_{{StableEngineVersion}}_src.tar.lzma {mirror}]

'''[http://sourceforge.net/projects/springrts/files/springrts/spring-{{StableEngineVersion}}/spring_{{StableEngineVersion}}_src.tar.gz/download spring_{{StableEngineVersion}}_src.tar.gz]''' - [https://springrts.com/dl/buildbot/default/master/{{StableEngineVersion}}/source/spring_{{StableEngineVersion}}_src.tar.gz {mirror}]

__NOTOC__

[[Category:Spring]]</text>
      <sha1>0iz0szoqx15s29v64c46is4bgeh4rnw</sha1>
    </revision>
  </page>
  <page>
    <title>Download Systems</title>
    <ns>0</ns>
    <id>2922</id>
    <revision>
      <id>31194</id>
      <parentid>28362</parentid>
      <timestamp>2020-03-10T11:07:43Z</timestamp>
      <contributor>
        <username>Silentwings</username>
        <id>2883</id>
      </contributor>
      <minor/>
      <comment>/* clients/implementations */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="436">There are curently three systems for spring content files:
*[[rapid]] is currently for games only (rsync like)
*[[upq]] allows to search for games maps and engine
*[[plasma]] allows to search for games and maps

These systems allow to automaticly download files.

==clients/implementations==
*[[SpringLobby]] (c++, cross-platform)
*[[chobby]] (lua, cross-platform)
*[[pr-downloader]] (c++, cross-platform)
[[Category: Download_Systems]]</text>
      <sha1>je934tn6ilyodju756lombjgnvpkfkv</sha1>
    </revision>
  </page>
  <page>
    <title>Download Testing</title>
    <ns>0</ns>
    <id>3135</id>
    <revision>
      <id>30421</id>
      <parentid>30420</parentid>
      <timestamp>2017-09-06T09:33:36Z</timestamp>
      <contributor>
        <username>Hokomoko</username>
        <id>2896</id>
      </contributor>
      <comment>/* Linux */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3720">= Spring Engine Testing Release  =

Current test version: {{EngineVersion:Testing}} ({{EngineVersion:Testing:ReleaseDate}})

== Get It ==

=== [[SpringLobby]] ===

Go to Tools-&gt;Download Archives, then enter

&lt;code&gt;
engine:spring {{EngineVersion:Testing}} {{EngineBranch:Testing}}
&lt;/code&gt;

Click ok.

=== [[pr-downloader]] ===
easiest way is by using pr-downloader (which is included into spring)

&lt;code&gt;
pr-downloader --download-engine &quot;{{EngineVersion:Testing}} {{EngineBranch:Testing}}&quot;
&lt;/code&gt;

=== Windows ===

{|
| style=&quot;padding-right:10px&quot;| [[Image:Distributions-windows.png]]
|
&lt;ul&gt;
&lt;li&gt; [https://springrts.com/dl/buildbot/default/{{EngineBranch:Testing}}/{{EngineVersion:Testing}}/win32/spring_&amp;#123;{{EngineBranch:Testing}}&amp;#125;{{EngineVersion:Testing}}_win32.exe installer]
&lt;li&gt; [https://springrts.com/dl/buildbot/default/{{EngineBranch:Testing}}/{{EngineVersion:Testing}}/win32/spring_&amp;#123;{{EngineBranch:Testing}}&amp;#125;{{EngineVersion:Testing}}_win32-minimal-portable.7z portable] (Lobby not included)
&lt;li&gt; [https://springrts.com/dl/buildbot/default/{{EngineBranch:Testing}}/{{EngineVersion:Testing}}/win32/ whole build]
&lt;/ul&gt;
|}

=== Linux ===

{|
| style=&quot;padding-right:10px&quot;| [[Image:Tux-G2.png]]
|
&lt;ol&gt;
&lt;li&gt; '''get the source'''
  &lt;ol&gt;
  &lt;li&gt; creating the repo (first time only):&lt;br&gt;
    &lt;code&gt;git clone git://github.com/spring/spring.git spring_src&lt;/code&gt;
  &lt;li&gt; update to latest sources:&lt;br&gt;
    &lt;code&gt;cd spring_src &amp;&amp; git fetch &amp;&amp; git checkout {{EngineVersion:Testing}}&lt;/code&gt;
  &lt;/ol&gt;
&lt;li&gt; '''build''' by following the [[Building_Spring_on_Linux|build from source]] guide, or in short:&lt;br&gt;
  &lt;code&gt;cmake -G &quot;Unix Makefiles&quot; . &amp;&amp; make spring &amp;&amp; sudo make install-spring&lt;/code&gt;
&lt;/ol&gt;
|}

===static builds===
as alternative you can try the one of the linux static builds:

* [https://springrts.com/dl/buildbot/default/{{EngineBranch:Testing}}/{{EngineVersion:Testing}}/linux32/spring_%7b{{EngineBranch:Testing}}%7d{{EngineVersion:Testing}}_minimal-portable-linux32-static.7z static linux build (32 bit)]

* [https://springrts.com/dl/buildbot/default/{{EngineBranch:Testing}}/{{EngineVersion:Testing}}/linux64/spring_%7b{{EngineBranch:Testing}}%7d{{EngineVersion:Testing}}_minimal-portable-linux64-static.7z static linux build (64 bit)]

=== Mac OS X ===

{|
| style=&quot;padding-right:10px&quot;| [[Image:Distributions-mac-2.png]]
|
[https://springrts.com/dl/buildbot/default/{{EngineBranch:Testing}}/{{EngineVersion:Testing}}/osx64/spring_%7b{{EngineBranch:Testing}}%7d{{EngineVersion:Testing}}_MacOSX-10.6-SnowLeopard.zip '''App Bundle'''] (tested on 10.6 Snow-Leopard only)

In case the above fails, check out [[Spring_on_MacOSX|alternative ways]].
|}

== Lobby ==

Make sure your lobby client is configured to use the correct spring binary &amp; unitsync!
On Linux, this will usually be ''/usr/local/bin/spring'' &amp; ''/usr/local/lib/libunitsync.so''.

Use one of the test lobby servers (recommended):
* ''lobby1.springlobby.info:8200''
* ''lobby2.springlobby.info:8200''

Or alternatively, configure your lobby so it does not insist using the release version of the engine:
* SpringLobby: set &lt;code&gt;DisableVersionCheck=1&lt;/code&gt; in ''springlobby.conf''
* TASClient: press CTRL+SHIFT+F6 and enable &quot;Ignore server version incompatibility&quot;

== Bugs and issues ==

Report on [https://springrts.com/mantis/ Mantis].
Remember to upload [[infolog.txt]] if you crash!

== Changelog ==

For changes please look into the [https://github.com/spring/spring/blob/{{EngineVersion:Testing}}/doc/changelog.txt Change Log] or the [https://github.com/spring/spring/compare/{{EngineVersion:Stable}}...{{EngineVersion:Testing}} diff log] for details.

See the topmost for changes to the upcoming version.


[[Category: Development]]</text>
      <sha1>cqrb2440gpete2i6jfrj3wxmassuhdk</sha1>
    </revision>
  </page>
  <page>
    <title>Downloading</title>
    <ns>0</ns>
    <id>2512</id>
    <redirect title="Getting Spring Content and Links" />
    <revision>
      <id>18892</id>
      <parentid>14679</parentid>
      <timestamp>2010-03-13T16:52:27Z</timestamp>
      <contributor>
        <username>Koshi</username>
        <id>2371</id>
      </contributor>
      <comment>redirect to correct page</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="46">#REDIRECT [[Getting_Spring_Content_and_Links]]</text>
      <sha1>n8455fx1du2xzvl4xp09hzbbs09qirj</sha1>
    </revision>
  </page>
  <page>
    <title>Downloading uploding</title>
    <ns>0</ns>
    <id>2497</id>
    <redirect title="Getting Spring Content and Links" />
    <revision>
      <id>18723</id>
      <parentid>14419</parentid>
      <timestamp>2010-03-13T10:01:46Z</timestamp>
      <contributor>
        <username>Koshi</username>
        <id>2371</id>
      </contributor>
      <comment>redirect to correct page</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="46">#REDIRECT [[Getting_Spring_Content_and_Links]]</text>
      <sha1>n8455fx1du2xzvl4xp09hzbbs09qirj</sha1>
    </revision>
  </page>
  <page>
    <title>Doxygen style comments</title>
    <ns>0</ns>
    <id>1069</id>
    <revision>
      <id>29666</id>
      <parentid>26699</parentid>
      <timestamp>2015-10-11T00:47:18Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2281">Spring gets automatically generated documentation for the source code which can be found [https://springrts.com/dl/buildbot/doc/ here]. The tool used for this is [http://www.doxygen.org doxygen]. Whilst doxygen does a good job of producing diagrams and extracting logical relationships from the code, the documentation can be somewhat hard to digest without any descriptive text to read!

The good news is that doxygen can automatically extract your header comments from the code and use them as a description for the class/method/field they're associated with... as long as you stick to the doxygen comment style. Therefore, please put doxygen style comments into the code.

Doxygen comments have the same syntax as Javadoc basically - if you're familiar with Javadoc, go ahead and write header comments as you normally would in Java. If you're not familiar with Javadoc, the main thing you need to know is to use:

/**

At the start of your comment blocks (doxygen also works with /*!). Or on the otherhand if you prefer using // style comments, use /// or //! as your comment marker.

Within the comment blocks you can also use [http://www.stack.nl/~dimitri/doxygen/commands.html special commands] including the very useful @todo command. All @todo commands are noted by Doxygen and pulled out into a single &quot;TODO&quot; list page, which lists all the @todo items across the entire project in one place.

The full [http://www.stack.nl/~dimitri/doxygen/manual.html doxygen manual] describes all the various commenting conventions you can use which doxygen will pick up. This includes nice things like being able to mark several items as having the same comment (part of [http://www.stack.nl/~dimitri/doxygen/grouping.html grouping]), producing [http://www.stack.nl/~dimitri/doxygen/lists.html lists], [http://www.stack.nl/~dimitri/doxygen/autolink.html links] into other classes/methods etc., how to use [http://www.stack.nl/~dimitri/doxygen/htmlcmds.html HTML] within the comments etc.

The current codebase (0.65b2) contains non doxygen comments as we've only just started using it. If you do see header/field comments which start with just /* or //, please do a search-and-replace on them so that we can have the benefit of them in the documentation. Thanks

[[Category:Engine Dev]]</text>
      <sha1>1byqud2xy49usemw092yweaqmmuqc93</sha1>
    </revision>
  </page>
  <page>
    <title>Dozerz</title>
    <ns>0</ns>
    <id>1979</id>
    <revision>
      <id>21284</id>
      <parentid>21215</parentid>
      <timestamp>2011-02-24T16:55:29Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1748">{{Historical}}

SO HELP ME IF I SEE MY PAGES ADVERT-EDITED AGAIN I WILL PERSONALLY MAKE SURE THAT YOU NEVER SEE THE LIGHT OF DAY AGAIN.


  == Dozerz ==

This mod is made by the same person that made Cosmos vs. Chaos  (KDR_11) it is based on the concept of Rock, Paper, Scissors.  In this mod you get your base in this case a flag, and the flag can build your only other unit the Dozer.  The Dozer has a few unique features it has 3 guns, has a shield, and can cloak.  In order to win you must get you Dozerz to your enemies base and detonate them to do damage to the flag.


----

=== Dozerz Weapons ===

==== The Dual Laser ====

The Dual Laser is the standard weapon on the Dozer it can only fire directly to the front, but is effective in masses.

==== The Dual Beam / Scissor Beams ====

The Scissor Beams or whatever it is that you want to call them are effective when you have fewer units then you opponent and need to defeat a mass.  This gun is not effective against small groups because the spread is wide and inefficient.  In order to use this weapon you need to switch your dozer to ON mode.

==== The D-Gun / Riot Grenade ====

The Riot Grenade or as I like to call it the Crowd Breaker is an excellent weapon against masses of enemies and can easily defeat a swarm of defending or attacking dozerz.  The only thing bad about this gun is it's energy consumption is high and it temporarily disables your Dozerz shield.

----

==== [This page was created/edited by rcdraco on December 21, 2006] ====

I hereby state that I did not make this mod, but I like making these wikis to help spread the word and help people out.

==== forum thread====
http://springrts.com/phpbb/viewtopic.php?f=14&amp;t=8284&amp;hilit=Dozerz&amp;start=0


[[Category:Mods]]</text>
      <sha1>3sr9vt0hd4uvv0w6rd3s2lbiwwr7uv9</sha1>
    </revision>
  </page>
  <page>
    <title>Duel</title>
    <ns>0</ns>
    <id>1905</id>
    <revision>
      <id>21274</id>
      <parentid>20589</parentid>
      <timestamp>2011-02-24T16:52:40Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="253">{{historical}}

Duel is a mod by Blueshift.
Duel is a mod for a small map with a lot of players in free for all. Drive around at high speeds in your nuke silo lobbing nukes at everyone. But be careful, you have to stay still to shoot!

[[Category:Mods]]</text>
      <sha1>1t1tycu71qwcak45gkdna5hqqyvqf85</sha1>
    </revision>
  </page>
  <page>
    <title>Dynamic scripts</title>
    <ns>0</ns>
    <id>3332</id>
    <revision>
      <id>26359</id>
      <parentid>25357</parentid>
      <timestamp>2013-03-08T16:16:34Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>[[Category:Emmanuel]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1618">&lt;big&gt;changing unitdef ingame by animdef
&lt;/big&gt;


exemple:
&lt;code&gt;

local=word --define a variable storage

word=UnitDefs[unitDefID].turnRate --store the turnrate in word variable

Spring.MoveCtrl.SetGroundMoveTypeData((unitID),&quot;turnRate&quot;,6280) --set a new turnrate at the 6280 value&lt;/code&gt;

==there is diferent instruction for change diferent cathegory of data in UnitDef file:==
*
:Spring.SetUnitSensorRadius ( number unitID, string type, number radius ) -&gt; nil | number newRadius
 type can be:
 &quot;los&quot;,&quot;airLos&quot;,&quot;radar&quot;,&quot;sonar&quot;,&quot;seismic&quot;,&quot;radarJammer&quot;,&quot;sonarJammer&quot;

*
:Spring.MoveCtrl.SetAirMoveTypeData 
 ( number unitID, string key, value  ) -&gt; nil
 ( number unitID, table values ) -&gt; nil
 supported keys:
 numbers:
   wantedHeight
   myGravity
   maxBank
   maxPitch
   turnRadius
   maxAcc
   maxAileron
   maxElevator
   maxRudder
 booleans:
   collide
   useSmoothMesh
 
*
:Spring.MoveCtrl.SetGroundMoveTypeData 
 ( number unitID, string key, value  ) -&gt; nil
 ( number unitID, table values ) -&gt; nil
 supported keys:
 numbers:
   baseTurnRate
   turnRate
   accRate
   decRate
   maxSpeed
   maxReverseSpeed
   requestedSpeed
   requestedTurnRate
 booleans:
   floatOnWater
 
*
:Spring.MoveCtrl.SetGunshipMoveTypeData 
 ( number unitID, string key, value  ) -&gt; nil
 ( number unitID, table values ) -&gt; nil
 supported keys:
 numbers:
   wantedHeight
   turnRate
   accRate
   decRate
   altitudeRate
   currentBank
   currentPitch
   breakDistance
 booleans:
   collide
   useSmoothMesh
   bankingAllowed
   dontLand
   airStrafe
 

**NOTE: not all keys and not all values may work correctly.

[[Category:Emmanuel]]</text>
      <sha1>lfuhkpy1tf38gnwpuzya5fgjoeiyhhu</sha1>
    </revision>
  </page>
  <page>
    <title>EEstoryline</title>
    <ns>0</ns>
    <id>1433</id>
    <revision>
      <id>11248</id>
      <parentid>5979</parentid>
      <timestamp>2006-09-15T15:07:49Z</timestamp>
      <contributor>
        <username>FoeOfTheBee</username>
        <id>20</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4656">2022:  January 6th &quot;Black Friday&quot; Ã¢â‚¬â€œ After years of down turns in the international economy as a result of the sky rocketing oil prices, increasing rarity of resources and consistent natural disasters the worst possible scenario transpired on January 6th . The polar ice caps exhausted  through Global Warming and the following global market collapses cast the modern world into chaos and uncertainty. Subsequently, nations ravaged by the floods faced enormous economic meltdown and were systematically being acquired (through either force or alliance ) by the stronger countries that began to emerge as super states. These super states, or &quot;factions,&quot; came to consist of three major governments that in total controlled most of the Earth's entire land mass and oceans. 

In the Eastern Hemisphere, China forcefully acquired Russia and subsequently all of Russia's former satellite nations. Following the acquisition of Russia the Chinese easily coerced the southeast Asian nations into its control through fear and intimidation. After engulfing the surrounding Asian countries China attempted to acquire the relatively strong nations of Japan, India and South Korea by offering clemency if they would turn over control of their governments. South Korea and Japan refused and allied with one another against the Chinese aggression. The Chinese responded to this defiance by declaring total war against both nations and within days completely irradiated the economy and populace of both countries. China remained unchecked by the other powers in the opposite hemisphere as they were embroidered in their own diplomatic and social turmoil. India and Australia, previously neutral to China immediately surrendered in fearful response to the eradication of Korea and Japan. Thus the new empire was born. The &quot;Global Dynasty&quot; had now become the most powerful super state in the world and commanded the strongest army in existence. 


Across the globe in the western hemisphere the United States reformed its government in the central mid west after losing its coastal cities and infrastructure. This new, more totalitarian government was created with the promise that after the reconstruction of the national economy the government would return power back to the people through a true democracy. However this promise was never fulfilled and instead the American leaders sought tighter control and rapid militarization to Ã¢â‚¬Å“defend against the Global Dynasty threatÃ¢â‚¬Â. A massive campaign was enacted to convince the allied nations of South America to relinquish control to America in order for their protection. Nations that refused faced immediate military occupation. Within six years through either passive diplomacy or total war America had finally taken control of the entire Western hemisphere. The new expanded territory of the United States led to a consequential  renaming under the label the Ã¢â‚¬Å“United Robot ConfederationÃ¢â‚¬Â or URC. The peculiar name was the brainchild of the American engineer Herman Robinson who with deep government funding successfully created robust pilot able mech-machines and crawlers capable of military use.


As rapid social and political upheaval was taking place in the western and eastern hemisphere so had rampant changes altered Europe forever. After the floods nearly collapsed the European economy the circumstances were only made worse by the surge of refugees from from Russia and other eastern countries under the Global Dynasty's occupation. 2024 Ã¢â‚¬â€œ In order to stabilize their economies and protect from GD expansion the European nations agreed to conglomerate power into a newly formed European union now called the Ã¢â‚¬Å“New InitiativeÃ¢â‚¬Â or NI. The first action of the newly formed NI government was to close all of Europe's borders to refugees and begin a national program to construct a modern military and infrastructure. In comparison to the GD and URC factions the NI excersie a much more democratic government and its citizens were given a wider range of individual rights. However armed service was mandatory at age 16 for all citizens and the NI political process was tightly controlled by the few elected leaders within the  parliament. 

2030- International diplomatic relations and trade were almost non-existent. The three super powers relied solely on their own expansive land masses for their resources. However more resources were needed and even with new solutions to fuel costs the factions began to hunger for new land resources. This greed would come to be the arbiter of wars to come.....



[[Image:EEMAPFINAL02.jpg]]

[[category:Expand and Exterminate]]</text>
      <sha1>d7h4m8pkxveqfzl89xsrzokchcdcbsa</sha1>
    </revision>
  </page>
  <page>
    <title>Eaglebird</title>
    <ns>0</ns>
    <id>1773</id>
    <redirect title="User:Eaglebird" />
    <revision>
      <id>11587</id>
      <timestamp>2006-09-15T15:09:52Z</timestamp>
      <contributor>
        <username>FoeOfTheBee</username>
        <id>20</id>
      </contributor>
      <comment>Eaglebird moved to User:Eaglebird</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29">#REDIRECT [[User:Eaglebird]]
</text>
      <sha1>nr9i12fe95pcxrgmvxkeh7qhwjvpwkn</sha1>
    </revision>
  </page>
  <page>
    <title>EdS</title>
    <ns>0</ns>
    <id>1351</id>
    <revision>
      <id>21429</id>
      <parentid>20716</parentid>
      <timestamp>2011-02-27T15:13:35Z</timestamp>
      <contributor>
        <username>Jk</username>
        <id>2584</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3877">{{deprecated}}
&lt;h1&gt;Welcome to the documentation of the program Editor Spring&lt;/h1&gt;

I really must do a better job with this when i have time. For now, this is what you have :p

This program is released under the General Public License. You can get it here:
http://www.fileuniverse.com/?p=show&amp;a=it&amp;id=2746
&lt;br&gt;&lt;br&gt;&lt;br&gt;
&lt;b&gt;Requirements:&lt;/b&gt;&lt;br&gt;
- You will need access to a MySql server (http://www.mysql.com/)&lt;br&gt;
MySql 4.0 is the one that provides the best performance with a default instalation:&lt;br&gt;
http://downloads.mysql.com/archives.php?p=mysql-4.0&lt;br&gt;
MySql 5.0, with a default instalation, seems to provide a maximum of 1 query per second, being totally unacceptable performance.&lt;br&gt;
- You will need to have installed the mono virtual machine to run the virtual code that composes the program (http://mono-project.com/Main_Page)&lt;br&gt;
The program was compiled with mono 1.1.13.4, which can be found here:&lt;br&gt;
http://go-mono.com/archive/1.1.13.4/download/&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Running the program:&lt;/b&gt;&lt;br&gt;
- After the mono virtual machine is installed,&lt;br&gt;
- Unzip it, of course&lt;br&gt;
- Execute the file &quot;EditorSpring.exe.mono&quot; (in Windows, double-click on it then , since mono does not registers .mono files to itself, search for the mono executable, usually c:\Programs\mono*\bin\mono.exe)&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Simple tutorial:&lt;/b&gt;&lt;br&gt;
- Choose the language you wish to use (more languages will be added if people are willing to make translations).&lt;br&gt;
- You will start in the Configurations menu. Choose user and password with which to access the MySql server by pressing the button.&lt;br&gt;
- Choose the server if the server is not running on your own computer.&lt;br&gt;
- On the menu on the left press &quot;Manage Databases&quot; or on the menu on the right press &quot;haa, something database&quot;.&lt;br&gt;
- Now, create a new Database.&lt;br&gt;
- Select it from the list and press the button select.&lt;br&gt;
- You are now on the Editing menu in the section for importing and exporting mods. The big widget on the center is to select the working directory. The 4 buttons on the right are:&lt;br&gt;
1- &quot;Import&quot; This will import a mod from files on the specified working directory. It will search for the file &quot;Armor.txt&quot;, &quot;Modinfo.tdf&quot;, the 3 files in the folder &quot;Gamedata&quot;, and all files in the folders &quot;Units&quot; and &quot;Weapons&quot;. It also checks for the existance of the folder &quot;Download&quot; and tries to import the stuff in there.&lt;br&gt;
!!! This is really slow. It takes 3 mins to import one of the great mods in a Duron 1300. !!!&lt;br&gt;
2- &quot;Load&quot; This will load a mod from the Sql server to memory. If you just imported a mod to database, it will not be in memory yet and you need to load it.&lt;br&gt;
!! This one is also somewhat slow. !!&lt;br&gt;
3- &quot;Verify&quot; This will try to verify if the mod is properly made. At the moment it only checks to see if all sides have a comander assigned and if all units have dependencies assigned.&lt;br&gt;
4- &quot;Export&quot; This will dump into the specified working directory all the mod's information properly stored in the needed files.
Remember that any change in the mod through the program will be reflected in the Database. There is no button to Ã‚Â«unloadÃ‚Â» the mod back to Database. The modifications will run syncronized with the database.&lt;br&gt;

- The remaining buttons in the bottom of the Editing menu are for accessing the editing menus of the several diferent sections of a mod. ..try them.&lt;br&gt;

&lt;br&gt;&lt;br&gt;
&lt;b&gt;Known issues:&lt;/b&gt;&lt;br&gt;
The mod XTA_se has, in the weapons definitions, reference to the weapons dealing specific damage to ARMBRAWL. It should be referencing a class on units from the file Armor.txt but it does not, it references one unit inside one of those classes. The program will not handle this. So, if you want to mess around with the mod XTA (the most common one), you will have to fix that before importing it or after. Optionally, the mod Uberhack is tested and works Ã‚Â«out of the boxÃ‚Â».</text>
      <sha1>4v9jlqkwwhz6dfujor9vao50blify6a</sha1>
    </revision>
  </page>
  <page>
    <title>Elmo</title>
    <ns>0</ns>
    <id>3311</id>
    <redirect title="Gamedev:UnitsOfMeasurement" />
    <revision>
      <id>27537</id>
      <parentid>25306</parentid>
      <timestamp>2013-08-19T17:11:25Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>double redirect</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="47">#REDIRECT [[Gamedev:UnitsOfMeasurement#Linear]]</text>
      <sha1>cw0vg97b2ls4upcfng607jvgvscdcxy</sha1>
    </revision>
  </page>
  <page>
    <title>Emiter scripts</title>
    <ns>0</ns>
    <id>3484</id>
    <revision>
      <id>26600</id>
      <parentid>26597</parentid>
      <timestamp>2013-03-18T19:44:04Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>[[Category:Emmanuel]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1788">= &lt;big&gt;Emiter Scripts Exemples:&lt;/big&gt; =


== &lt;big&gt;make at an (empty) piece a cosmetic or physical effect&lt;/big&gt; ==
::&lt;code&gt;EmitSfx(left_wheel,258)&lt;/code&gt;

::&lt;code&gt;EmitSfx(piecename,number)&lt;/code&gt;

&lt;big&gt; number=
::1 = flame(not sure)
::2 = wave  underwater
::3 = wave underwater
::4 = wave underwater
::5 = wave underwater
::257 = smoke
::258 = smoke 
::259 = bubles underwater
::1024 = emit a Ceg defined in a file (see CeG wiki)
::2048 = shoot the weapon1 in the direction of the piece (add +1 for weapon2 +2 for weapon3 etc)
::4096 = detonate the weapon1 at the piece location (often use noselfdamage=true in weapondef),add +1 for weapon2 ,+2 for weapon3 ,etc&lt;/big&gt;


== &lt;big&gt;make a piece explode or ejected randomly&lt;/big&gt; ==
::&lt;code&gt;Explode(piecename,30)&lt;/code&gt;
::&lt;code&gt;Explode(piecename,1)&lt;/code&gt;
''the bitwise contain mostly 2 usual alternative :
*make your piece explod in faces 
::or 
*make your piece ejectected with flame smoke rebound on ground and make 20 damage at hit location 
**each of this conbination can be selected using exponant of ^2''
(not sure if 1 and &gt; are compatible)
&lt;br /&gt;
[the piece still exist and must be hidded when not placed at the die of the unit]
::
::&lt;code&gt;(piecename,bitwise)&lt;/code&gt;
'''
&lt;big&gt;::bitwise =
::1 = faces fly fall 
::2 = piece fly rebound explod 
::4 = fly rebound 
::8 = fly insmoke 
::16 = fly infire 
::30 = is evry thing smoke fire rebound explod&lt;/big&gt;'''


*note: 
the number can be replaced by spring names

 &lt;big&gt;Explode
::SFX.SHATTER
::SFX.EXPLODE
::SFX.EXPLODE_ON_HIT
::SFX.FALL
::SFX.SMOKE
::SFX.FIRE
::SFX.NONE
::SFX.NO_CEG_TRAIL
::SFX.NO_HEATCLOUD

:: EmitSfx
::SFX.VTOL
::SFX.WAKE
::SFX.REVERSE_WAKE
::SFX.WHITE_SMOKE
::SFX.BLACK_SMOKE
::SFX.BUBBLE
::SFX.CEG
::SFX.FIRE_WEAPON
::SFX.DETONATE_WEAPON&lt;/big&gt;

[[Category:Emmanuel]]</text>
      <sha1>pgg8ssy3c1xn8kogdk1vdmkavdsy19h</sha1>
    </revision>
  </page>
  <page>
    <title>Energy Weapon</title>
    <ns>0</ns>
    <id>1518</id>
    <revision>
      <id>24360</id>
      <parentid>21328</parentid>
      <timestamp>2012-05-02T08:41:24Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1189">{{Balanced_Annihilation_deprecated}}

[[category:Balanced Annihilation]]

The Annihilator and Doomsday Machine are one of the most powerful structures you can build. They are Tech Level 3 structures, built by the most advanced construction units available.

===The Arm Annihilator===

[[Image:Annihilator.JPG|Arm Annihilator]]

''The Annihilator is an offensive and defensive weapon that fires energy shells, and is effective against the stronger units, but can easily be taken down by many weak units. It does massive damage, but shoots slowly and takes a lot of energy (4000) to fire. Although expensive to build, and time consuming, it is one of Arm's most powerful structures.''

===The Core Doomsday Machine===

[[Image:Doomsday.JPG|Core Doomsday Device]]

''The Doomsday Machine is equipped with a cannon that fires explosive energy shells. However, its range is slightly less than that of an annihilator. This is compensated for by an [[HLT]] below the main cannon, and another HLT below that. Like the Annihilator, it is time consuming and expensive to build, but it is extremely powerful and very effective. It can become a linchpin of your base defense the moment you build it.''</text>
      <sha1>az4j0qa8q2lvmn5h0jiims20emt0ine</sha1>
    </revision>
  </page>
  <page>
    <title>Enetheru:3dpathway</title>
    <ns>0</ns>
    <id>3702</id>
    <redirect title="User:Enetheru:3dpathway" />
    <revision>
      <id>29340</id>
      <timestamp>2015-07-06T09:03:04Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>Flozi moved page [[Enetheru:3dpathway]] to [[User:Enetheru:3dpathway]]: user page</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="37">#REDIRECT [[User:Enetheru:3dpathway]]</text>
      <sha1>9yqo0i401b0c2kayidsvjemac6czo9n</sha1>
    </revision>
  </page>
  <page>
    <title>Enetheru:BlenderVision</title>
    <ns>0</ns>
    <id>3457</id>
    <redirect title="User:Enetheru/BlenderVision" />
    <revision>
      <id>26444</id>
      <timestamp>2013-03-09T22:39:47Z</timestamp>
      <contributor>
        <username>Enetheru</username>
        <id>2783</id>
      </contributor>
      <comment>Enetheru moved page [[Enetheru:BlenderVision]] to [[User:Enetheru/BlenderVision]]: renamed as per flozi's instruction</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="41">#REDIRECT [[User:Enetheru/BlenderVision]]</text>
      <sha1>cx7099jf2ed9ig6dnqpggrkb11qees1</sha1>
    </revision>
  </page>
  <page>
    <title>Enetheru:Dump</title>
    <ns>0</ns>
    <id>3547</id>
    <redirect title="User:Enetheru/Dump" />
    <revision>
      <id>27542</id>
      <timestamp>2013-08-19T17:29:39Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>Flozi moved page [[Enetheru:Dump]] to [[User:Enetheru/Dump]]: Keep uncategorised pages in User, please! :P</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="32">#REDIRECT [[User:Enetheru/Dump]]</text>
      <sha1>ee2mkzj4gh0u89wp0n9ov50pcreb7h3</sha1>
    </revision>
  </page>
  <page>
    <title>Enetheru:MapCreation:Blender:Diffuse Map</title>
    <ns>0</ns>
    <id>3478</id>
    <redirect title="User:Enetheru/MapCreation/Blender/Diffuse Map" />
    <revision>
      <id>26583</id>
      <timestamp>2013-03-18T00:38:44Z</timestamp>
      <contributor>
        <username>Enetheru</username>
        <id>2783</id>
      </contributor>
      <comment>Enetheru moved page [[Enetheru:MapCreation:Blender:Diffuse Map]] to [[User:Enetheru/MapCreation/Blender/Diffuse Map]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="59">#REDIRECT [[User:Enetheru/MapCreation/Blender/Diffuse Map]]</text>
      <sha1>kg3t5nr26p9kwb62x954w83zircwrkf</sha1>
    </revision>
  </page>
  <page>
    <title>Enetheru:MapCreation:Blender:Sculpting Terrain</title>
    <ns>0</ns>
    <id>3482</id>
    <redirect title="Mapdev:howto height blender" />
    <revision>
      <id>27781</id>
      <parentid>26591</parentid>
      <timestamp>2013-10-26T21:18:42Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>double redirect</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="41">#REDIRECT [[Mapdev:howto_height_blender]]</text>
      <sha1>oh9wq2nagdq34l7ad74fz73j8jsq3rz</sha1>
    </revision>
  </page>
  <page>
    <title>Enetheru:Map Features</title>
    <ns>0</ns>
    <id>3458</id>
    <redirect title="User:Enetheru/Map Features" />
    <revision>
      <id>26446</id>
      <timestamp>2013-03-09T22:40:21Z</timestamp>
      <contributor>
        <username>Enetheru</username>
        <id>2783</id>
      </contributor>
      <comment>Enetheru moved page [[Enetheru:Map Features]] to [[User:Enetheru/Map Features]]: renamed as per flozi's instruction</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="40">#REDIRECT [[User:Enetheru/Map Features]]</text>
      <sha1>terrlgtbc6u9vvybl60xznd9qoxyz28</sha1>
    </revision>
  </page>
  <page>
    <title>Enetheru:Mapping:Sun</title>
    <ns>0</ns>
    <id>3479</id>
    <redirect title="User:Enetheru/Mapping/Sun" />
    <revision>
      <id>26585</id>
      <timestamp>2013-03-18T00:39:09Z</timestamp>
      <contributor>
        <username>Enetheru</username>
        <id>2783</id>
      </contributor>
      <comment>Enetheru moved page [[Enetheru:Mapping:Sun]] to [[User:Enetheru/Mapping/Sun]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="39">#REDIRECT [[User:Enetheru/Mapping/Sun]]</text>
      <sha1>gtzfvohq1dihpostusmaj9fyxehezi4</sha1>
    </revision>
  </page>
  <page>
    <title>Enetheru:Mapping:mapinfo.lua</title>
    <ns>0</ns>
    <id>3270</id>
    <redirect title="Mapdev:mapinfo.lua" />
    <revision>
      <id>26351</id>
      <parentid>24589</parentid>
      <timestamp>2013-03-07T21:46:01Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>double redirect</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="32">#REDIRECT [[Mapdev:mapinfo.lua]]</text>
      <sha1>iusqup0q1y9kcl4j4g7wqv0d64lbh9v</sha1>
    </revision>
  </page>
  <page>
    <title>Enetheru:Meshes</title>
    <ns>0</ns>
    <id>3459</id>
    <redirect title="User:Enetheru/Meshes" />
    <revision>
      <id>26448</id>
      <timestamp>2013-03-09T22:40:50Z</timestamp>
      <contributor>
        <username>Enetheru</username>
        <id>2783</id>
      </contributor>
      <comment>Enetheru moved page [[Enetheru:Meshes]] to [[User:Enetheru/Meshes]]: renamed as per flozi's instruction</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="34">#REDIRECT [[User:Enetheru/Meshes]]</text>
      <sha1>n0h72jxqqyibijwam99oksx7ygojj4m</sha1>
    </revision>
  </page>
  <page>
    <title>Enetheru:Model Making obj</title>
    <ns>0</ns>
    <id>3480</id>
    <redirect title="User:Enetheru/Model Making obj" />
    <revision>
      <id>26587</id>
      <timestamp>2013-03-18T00:39:21Z</timestamp>
      <contributor>
        <username>Enetheru</username>
        <id>2783</id>
      </contributor>
      <comment>Enetheru moved page [[Enetheru:Model Making obj]] to [[User:Enetheru/Model Making obj]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="44">#REDIRECT [[User:Enetheru/Model Making obj]]</text>
      <sha1>5b6orgk2hap15bn235h9yi977ot3smr</sha1>
    </revision>
  </page>
  <page>
    <title>Enetheru:mapWishList</title>
    <ns>0</ns>
    <id>3483</id>
    <redirect title="User:Enetheru/mapWishList" />
    <revision>
      <id>26593</id>
      <timestamp>2013-03-18T00:40:49Z</timestamp>
      <contributor>
        <username>Enetheru</username>
        <id>2783</id>
      </contributor>
      <comment>Enetheru moved page [[Enetheru:mapWishList]] to [[User:Enetheru/mapWishList]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="39">#REDIRECT [[User:Enetheru/mapWishList]]</text>
      <sha1>hwouhutdj4qysxdi9abk56gssoizzkh</sha1>
    </revision>
  </page>
  <page>
    <title>Enetheru:mapconv</title>
    <ns>0</ns>
    <id>3150</id>
    <redirect title="MapConv" />
    <revision>
      <id>22817</id>
      <timestamp>2011-09-26T23:04:00Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>moved [[Enetheru:mapconv]] to [[MapConv]]: cleanup...</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="21">#REDIRECT [[MapConv]]</text>
      <sha1>p9q6hkja3omnw8ic9mmjuceoudsqvjv</sha1>
    </revision>
  </page>
  <page>
    <title>Enetheru:mapping2</title>
    <ns>0</ns>
    <id>3481</id>
    <redirect title="User:Enetheru/mapping2" />
    <revision>
      <id>26589</id>
      <timestamp>2013-03-18T00:39:45Z</timestamp>
      <contributor>
        <username>Enetheru</username>
        <id>2783</id>
      </contributor>
      <comment>Enetheru moved page [[Enetheru:mapping2]] to [[User:Enetheru/mapping2]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="36">#REDIRECT [[User:Enetheru/mapping2]]</text>
      <sha1>tnk1j2e5lvnpofn2uh15g45saz5bkom</sha1>
    </revision>
  </page>
  <page>
    <title>Enetheru:smd</title>
    <ns>0</ns>
    <id>2912</id>
    <redirect title="Map Making:SMD" />
    <revision>
      <id>24773</id>
      <parentid>19908</parentid>
      <timestamp>2012-07-13T22:18:38Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>remove drd</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="28">#REDIRECT [[Map_Making:SMD]]</text>
      <sha1>r47xwkocvbxykhjnk1zcv8li4n5ofat</sha1>
    </revision>
  </page>
  <page>
    <title>EngineChangelogForContentDevs</title>
    <ns>0</ns>
    <id>3215</id>
    <revision>
      <id>28831</id>
      <parentid>28830</parentid>
      <timestamp>2014-10-08T12:00:45Z</timestamp>
      <contributor>
        <username>Silentwings</username>
        <id>2883</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5889">==About this page==
This page holds informations about engine changes that are relevant to game/map makers.
The idea is to replace the &quot;make your game ready for next release&quot;-threads with a wiki page because unlike a forumpost, everybody can edit this.
So if you find a thread (or mantis post etc) that explains a fix, please add it here.
{{forumlink|topic=27777|title=Back-link to forum. Use for bumping.}}

==Spring 98.0==
slight changes:
* fix definitions of UnitDef::Is{Strafing,Hovering}AirUnit  {{Sourcelinkhash|b95764cd25f1ad6e3972f5fb0d48cd2353a1d23f}}
* experience has slightly different effects: {{Sourcelinkhash|0f59e103731bb1fb7133cd0ea0693affa0372a4a}} , http://springrts.com/mantis/view.php?id=4446
* unsynced luarules now recieves all synced luarules callins (could break very lazily coded gadgets, also if game includes gadgethandler then it should be updated to match, or unsynced luarules chatactions will be executed twice)
* each usage of SYNCED now makes a copy of the whole table
* types of variables returned from callins are now checked, e.g. MouseMove must return a bool
* TTL for LightningCannon now needs to be set in weapondefs, as 'beamttl' (see https://github.com/spring/spring/commit/dd7d1f79c3a9b579f874c210eb4c2a8ae7b72a16)
* Spring.GetUnitCommands/Spring.UnitCommandQueue won't work if they are called to often without a limit on the size of the table they return. Use e.g. Spring.GetUnitCommands(unitID, maxQueueSize)

==Spring 96.0==

==Spring 95.0==
NOT COMPLETE: interessting changes from 25 Aug backwards to Aug 09, 2013

* new folder structure: http://springrts.com/phpbb/viewtopic.php?f=12&amp;t=30044

* the folder &quot;mods&quot; isn't supported any more: {{Sourcelinkhash|7d3830a01c7e81377c1fd3369658d95b82979612}}

'''Lua:'''

* change to weapon indexing in lua gadgets: {{Sourcelinkhash|ba9721b4e4a296f35efd9838a36c94ab7a9f476e}} (likely to cause index out of bounds errors in any gadgets using weapon related API calls)  ALL weapon API functions are 1-based now!

* .moveData has been removed, use .moveDef instead {{Sourcelinkhash|4e58b8b0f7af04065878d34e5e17523246739b0c}} (detecting what type of unit a unit is, isCommander etc)

* Spring.GetUnitNearestEnemy doesn't return neutral units anymore

* {{Sourcelinkhash|90c897393de9dbb6ca9b5678c3efef201ee1231c}}
* add third return-value to Spring.GetUnitBlocking

''new functions:'' 

* {{Sourcelinkhash|90c897393de9dbb6ca9b5678c3efef201ee1231c}}
** add Spring.SetFeatureBlocking
** add Spring.GetFeatureBlockin
** add Spring.SetPieceProjectileParams
*add SetProjectileAlwaysVisible {{Sourcelinkhash|9435ac706c4955e7d7063600fa861d15b0c2bf40}}
* add callins FeatureDamaged and FeaturePreDamaged  {{Sourcelinkhash|85779b57d7b45010b3f6e975ce65ca601e36747d}} 
* add Spring.GetRadarErrorParams {{Sourcelinkhash|475828d8516e048680c7467cc00085f32867ee0e}} 
* add Spring.SetRadarErrorParams see above
* add Spring.SetUnitPosErrorParams {{Sourcelinkhash|0f4ed485d7eeb56b54a1953edfc21512a2b8cb91}} 
* add Spring.GetUnitPosErrorParams see above
* add Spring.GetUnitWeaponCanFireunitID, weaponNum {{Sourcelinkhash|66117e4c4d57b511b8818a7f1ad3e2f5d613ede6}} 
* add  LuaSyncedCtrl: add callouts SetFeatureVelocity and SetFeaturePhysics {{Sourcelinkhash|765994b40633798d88011ddd00cf3f4a8c5a4012}} 

* add new Game.constants: Game.gameName, Game.gameVersion, ... {{Sourcelinkhash|a813447139a01deede046723db1194c929f8704c}}  See [[Lua_ConstGame]]


'''Misc:'''

&lt;span class=&quot;warning&quot;&gt;armordefs.lua MUST be updated. The fix is to simple the converter loop at end of file:&lt;/span&gt; [[Armordefs.lua#Example]]


* load only image formats which work on all platforms, current supported image formats are:
 PNG, JPG, TGA, DDS, BMP  (note: no more .jp2)

* make Gaia the default feature team, not -1/0 

'''Sim'''
* sweepfiring beamlaser works (someone test?) {{Sourcelinkhash|b0295a72c42a828f4dcf9e4672dc1798c6a6abf2}}



'''Someone check if relevant:'''
{{Sourcelinkhash|66a2b96f71ff7f1e8838038f0aeb0d5f45990c22}}
something with startmoving/stopmoving?

{{Sourcelinkhash|e4dc43a3f1d622168a5634030842d6e609a5b30d}}
something startposition bla

==Spring 94.0 (or 93, or 92)==
* gadget:UnitPreDamaged has a new projectileId argument inserted in the middle, so attackerID, attackerDefID, attackerTeam shifted position
* Bomb weapons need a range, or they won't be fired
* Spring.AddUnitDamage requires a weaponDefID (may be a bug, may be corrected for 95) http://springrts.com/mantis/view.php?id=3841
* QueryNanoPiece is called much less often

==Spring 86.0, 87.0==
* {{forumlink|topic=27749|title=movedefs: depthmod is now a subtable.}}
* toairweapon tag has been removed, use onlytargetcategory instead


* {{forumlink|topic=27773&amp;start=45|title=ERROR_TYPE in WeaponDefs __index}} when looping over WeaponDefs - causes several fails.
[http://springrts.com/mantis/view.php?id=3019 mantis 3019]&lt;br&gt;
fixed in next release.


* builders stop reclaiming sometimes.

fixed for next engine release: http://springrts.com/mantis/view.php?id=3012&lt;br&gt;
want it to work right now: {{forumlink|topic=27816|title=use a gadget as workaround}}

==Spring 0.83, 84.0, 85.0==
* {{forumlink|topic=26358|title=Make your game ready for the next release!}}
* {{forumlink|topic=27057|title=instant infolog.txt}}

* [http://springrts.com/mantis/view.php?id=2877 Changing of unit's max velocity is no longer possible]
* {{forumlink|topic=23992|title=Announcement: game end condition moved to Lua}}
* {{forumlink|topic=26993|title=Announcement: gui_buildspacing &amp; minimap_startbox removed (0.83)}}
* {{forumlink|topic=26302|title=To Game-Devs: The &quot;n&quot; entry in array-like tables was removed}}
* AttachUnit obeys cantbetransported http://springrts.com/phpbb/viewtopic.php?f=23&amp;t=30468

==Spring 0.82==
* {{forumlink|topic=21883|title= Engine will stop spawning start units and resources.}} Now needs a Lua gadget.


[[Category:Game Dev]]
[[Category:Releases]]</text>
      <sha1>t6tho0hm0civ0dxyk05ulofuoo1uniw</sha1>
    </revision>
  </page>
  <page>
    <title>EngineSource for GameDevs</title>
    <ns>0</ns>
    <id>3162</id>
    <revision>
      <id>28531</id>
      <parentid>26917</parentid>
      <timestamp>2014-04-29T23:21:32Z</timestamp>
      <contributor>
        <username>Knorke</username>
        <id>833</id>
      </contributor>
      <minor/>
      <comment>/* Intro */ bit clearer</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2454">==Intro==
During creation of a Spring game you will soon notice that not every detail is documented.
The most common things can be done without ever looking at the engine. But sometimes there are some specifique questions where one wants more details.

Fortunately, the engine is open source and thus some things can be figured out by looking at it. Wait, isn't that like, super cryptic? Yes, scroll past those parts. A few things are comprehensible.

==Downloading source and opening the files==
Download this https://github.com/spring/spring/zipball/master and unpack the zip file.

==Text==
For example the code to load UnitDefs can be found here:
https://github.com/spring/spring/blob/develop/rts/Sim/Units/UnitDef.cpp

Scroll down to about line 270:&lt;br&gt;
Notice how there are lines like for example this:

&lt;code&gt;metalStorage = udTable.GetFloat(&quot;metalStorage&quot;, 0.0f);&lt;/code&gt;

The word in double quotes (&quot;metalStorage&quot;) is the UnitDef tag as it is read from the unit file.

If a tag can not be found in this file in this form, it is very likely that it does nothing and you can remove it from the unit file.

GetFloat means that this tag is a float number.
The number, in this case 0.0f, is the default value that is used, when the tag can not be found in the unit file.

Since the engine expects a number (eg 100.0) it is understandable that metalStorage = &quot;a lot&quot;, or metalStorage=false will not work.

Beside '''GetFloat''' there are:

'''GetBool''' - true or false

'''GetInt''' - an integer number

'''GetString''' - a string, that means a word eg a unit name or a file name

'''GetFloat3''' - 3 floats, for example coordinates in case of &quot;modelCenterOffset&quot; or a vector in case of &quot;flareDropVector&quot;


==Searching text in files==
It is usefull to have an text editor that can search for text in multiple files at once, for example this one: http://notepad-plus-plus.org/

==Interesting files==
Most things outside &quot;Sim&quot; folder are uninteresting.

The files where XY'''defs''' get loaded:

https://github.com/spring/spring/blob/develop/rts/Sim/Units/UnitDef.cpp

https://github.com/spring/spring/blob/develop/rts/Sim/Weapons/WeaponDefHandler.cpp

https://github.com/spring/spring/blob/develop/rts/Sim/Features/FeatureHandler.cpp

https://github.com/spring/spring/blob/develop/rts/Sim/MoveTypes/MoveInfo.cpp

Unit actions (damage, kill, experience,...):&lt;br&gt;
https://github.com/spring/spring/blob/develop/rts/Sim/Units/Unit.cpp

[[Category:Game Dev]]</text>
      <sha1>nnee2t6nwno1nt0lt7dtekxw94y2p7a</sha1>
    </revision>
  </page>
  <page>
    <title>EngineVersion</title>
    <ns>0</ns>
    <id>3019</id>
    <revision>
      <id>26689</id>
      <parentid>21852</parentid>
      <timestamp>2013-03-20T19:52:17Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>recat</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1475">= Spring Engine Version Explained =

== Stable ==

The current stable version is '''{{EngineVersion:Stable}}''' (see [[Template:EngineVersion:Stable|the Wiki template]]), while the synced part is '''{{EngineVersion:Stable:Synced}}'''.
If you do not know what '''sync''' refers to in spring, you may read:
http://springrts.com/wiki/Syncing_System

== Parts ==

names:
'''&lt;font color=&quot;#FF0000&quot;&gt;Major&lt;/font&gt;.&lt;font color=&quot;orange&quot;&gt;Minor&lt;/font&gt;.&lt;font color=&quot;#EEEE00&quot;&gt;Patchset&lt;/font&gt; &lt;font color=&quot;#00DD00&quot;&gt;(Additional)&lt;/font&gt;'''

example:
'''&lt;font color=&quot;#FF0000&quot;&gt;{{EngineVersion:Stable:Major}}&lt;/font&gt;.&lt;font color=&quot;orange&quot;&gt;{{EngineVersion:Stable:Minor}}&lt;/font&gt;.&lt;font color=&quot;#EEEE00&quot;&gt;{{EngineVersion:Stable:Patchset}}&lt;/font&gt; &lt;font color=&quot;#00DD00&quot;&gt;(0.82.7-22-gb98590d Headless Sync-Debug)&lt;/font&gt;'''


'''&lt;font color=&quot;#FF0000&quot;&gt;Major&lt;/font&gt;'''

You may think of these as a milestones. Big feature sets get introduced in these.

'''&lt;font color=&quot;orange&quot;&gt;Minor&lt;/font&gt;'''

Mostly (bigger) bug-fixes, including synced ones.

'''&lt;font color=&quot;#EEEE00&quot;&gt;Patchset&lt;/font&gt;'''

Minor, non sync-changing bug-fixes.

'''&lt;font color=&quot;#00DD00&quot;&gt;Additional&lt;/font&gt;'''

This contains everything that further specifies a build, but would not fit into a fixed version scheme, like indicator strings for special builds, or the exact SCM commit. It may be empty.
As this part is specific to a binary, it usually omitted when specifying a spring version. It can be found in the main log.

[[Category:Engine Dev]]</text>
      <sha1>bqh2jhq6x0bezq5208eqlyvmwwleuti</sha1>
    </revision>
  </page>
  <page>
    <title>Engine Development</title>
    <ns>0</ns>
    <id>3554</id>
    <redirect title="Development:Main" />
    <revision>
      <id>27594</id>
      <parentid>27591</parentid>
      <timestamp>2013-08-24T23:06:56Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>double redirect</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30">#REDIRECT [[Development:Main]]</text>
      <sha1>4zg0g527z2j88705wkj3380oztpl66l</sha1>
    </revision>
  </page>
  <page>
    <title>Engine Profiling</title>
    <ns>0</ns>
    <id>2989</id>
    <revision>
      <id>30356</id>
      <parentid>26688</parentid>
      <timestamp>2017-05-17T22:29:30Z</timestamp>
      <contributor>
        <username>Hox</username>
        <id>2931</id>
      </contributor>
      <comment>/* Engine Profiling */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9118">[[Engine_Development|Development]] &lt; Engine Profiling

= Engine Profiling =

== Linux ==

=== Intro ===
There are several ways to profile an application.

'''gprof'''

The compiler injects special code in the binary that self profiles it when it runs. this is what &lt;code&gt;cmake -DCMAKE_BUILD_TYPE=PROFILING&lt;/code&gt; is here for. We are not going to use this. It does not interfere with normal program's work-flow. With spring, it gets so slow that it is unusable for profiling anything in late game (which is where it is needed the most). It requires special compiling options.

'''oprof'''

OProfile uses statistical sampling. It is a kernel module, which every n clock ticks, registers which function is currently being processed. It is lightweight; it may run with almost 0 performance impact. This method always profiles your profiles your whole system; relevant info has to be filtered out after the profiling run has finished.
The downside of statistical profiling, is that it requires at least a certain sample size to achieve good accuracy. Also remember, that ''oprof'' still requires the debug symbols, to resolve addresses into function names.
It can be turned on/off at any time, so for instance, you may skip spring loading so you would only profile in-game runtime. You can also merge multiple profiling sessions.


'''perf'''

Powerful and lightweight Linux performance profiler based on perf events. Part of linux kernel from version 2.6.31. 

=== Setting up ''oprof'' ===

Required stuff:
* ''oprof'' kernel module
* ''oprof'' package

=== Using ''oprof'' ===

&lt;center&gt;
{|style=&quot;margin-top: 15px; padding: 10px; border: 1px solid rgba(0,0,0,0.5); border-radius: 6px 6px 6px 6px; box-shadow: 0 2px 6px rgba(0,0,0,0.3), inset 0 1px 2px rgba(255,255,255,0.5), inset 0 10px 8px rgba(255,255,255,0.3);&quot; |
| Note: Modern CPUs have special statistical sampling timing functions to make profiling with software like ''oprof'' fast.
|}
&lt;/center&gt;

You will have to load the kernel module.
The profiling daemon is controlled using ''opcontrol'' as root.
As regular user, you can do post-processing using ''opreport''.


'''Recommended settings'''

* use a call-graph depth of size 16
* disable kernel profiling &amp; enable user-space profiling
* separate each application in its own profile
* separate each thread in its own profile; you can always merge them later, using ''opreport''


'''A typical profiling session'''

&lt;code&gt;&lt;pre&gt;
# We need to be root
su -

# In case the kernel module is not already loaded ...
modprobe -v oprofile

# This has to be sent only once; it will be saved
opcontrol --event=CPU_CLK_UNHALTED:1000000:0x0:0:1 \
          --callgraph=16 \
          --separate=thread,library \
          --no-vmlinux

# -- Bring spring into a state where you want to start profiling --

# start the profiler
opcontrol --start

# -- In spring, do whatever you want to profile --

# stop the profiler
opcontrol --stop

# in order to make the profile data available to user-space,
# you have to dump the data
opcontrol --dump
&lt;/pre&gt;&lt;/code&gt;

=== Post processing ''oprof'' data ===

[[File:Oprof_engine_part.png|710px]]

We will first explain the post processing steps, and then give a script that should work for most general spring profiling tasks.


'''Extract the data'''

The data is now stored in ''oprofile''s cache, and we need to extract the parts of it that we are interested in, and write them to a file.
With the settings we used above, ''oprofile'' indexes stuff by thread- and process-ID. In order to generate a report, we will have to tell which program, which threads and which sampling sessions to include.
If you do not care much, you can just merge thread data and sampling data, as we do here too.


'''Converting the data file to a dot-graph file'''

[https://code.google.com/p/jrfonseca/wiki/Gprof2Dot gprof2dot] takes ''oprof'' data and outputs a nice dot-graph. We use it to generate the dot graph out of ''oprofile''s &lt;code&gt;--callgraph&lt;/code&gt; version.


'''Finalizing (Creating an image out of the graph file)'''

Then you can either use [https://code.google.com/p/jrfonseca/wiki/XDot XDot] to view it directly, or create an image out of the graph file. We will use [http://www.graphviz.org/ GraphViz]'s ''dot'' utility to render to an image.

=== Using ''perf'' ===

'''Setup'''

For ubuntu install linux-tools-common using apt-get. In fedora the package's name is perf.
Make sure &lt;code&gt;/proc/sys/kernel/kptr_restrict&lt;/code&gt; contains value '''0'''

'''Useful commands'''

* perf top - shows statistics in real time
* perf record - save statistics to file for further insight
* perf report - read previously generated data
* perf diff a.data b.data - show differences between two report files

'''Example'''

* Get data of running spring proccess for 10 seconds. Pay attention to frequency parameter -F. At this rate the output takes about 17 mb of space. Parameter call-graph dwarf unwinds the stack even when frame pointer optimization is on.
&lt;code&gt;perf record -F 99 -p PID_NUMBER -o my_output1.data --call-graph dwarf sleep 10&lt;/code&gt;
* Read the report. Press / and type symbol to narrow list to e.g &quot;air&quot;
&lt;code&gt;perf report -i my_output1.data -g&lt;/code&gt;
&lt;code&gt;&lt;pre&gt;
  Children      Self  Command  Shared  Symbol                                                                                   
+  132.33%    29.15%  unknown  spring  [.] CStrafeAirMoveType::Update
+   71.36%     3.35%  unknown  spring  [.] CStrafeAirMoveType::UpdateFlying
+   52.01%    32.48%  unknown  spring  [.] CStrafeAirMoveType::UpdateAirPhysics
+   36.42%     0.00%  unknown  spring  [.] CAirCAI::ExecuteFight
    34.50%    12.55%  unknown  spring  [.] CommandDrawer::DrawAirCAICommands
+   32.11%     0.00%  unknown  spring  [.] CStrafeAirMoveType::UpdateLanding
    26.65%    12.90%  unknown  spring  [.] CGameHelper::GetClosestEnemyAircraft
    16.73%     0.00%  unknown  spring  [.] CAirCAI::GiveCommandReal
    15.91%     0.00%  unknown  spring  [.] CStrafeAirMoveType::FindLandingPos
    15.91%     6.42%  unknown  spring  [.] CStrafeAirMoveType::BrakingDistance
     9.82%     0.00%  unknown  spring  [.] CAirCAI::AirAutoGenerateTarget
     9.82%     0.00%  unknown  spring  [.] CAirCAI::SlowUpdate
     3.28%     0.00%  unknown  spring  [.] CAirCAI::ExecuteMove
     3.26%     0.00%  unknown  spring  [.] CStrafeAirMoveType::HandleCollisions
     3.17%     3.17%  unknown  spring  [.] AAirMoveType::UseSmoothMesh                                                
&lt;/pre&gt;&lt;/code&gt;

'''Flamegraph'''

* &lt;code&gt;perf script -i a.data | ./stackcollapse-perf.pl &gt; out.perf-folded&lt;/code&gt; - convert perf stacks data to text representation
* &lt;code&gt;./flamegraph.pl out.perf-folded &gt; my_idle_air.svg&lt;/code&gt; - create flamegraph from perf data
or
* &lt;code&gt;grep -i air out.perf-folded | ./flamegraph.pl &gt; my_idle_air.svg&lt;/code&gt; - same as above, but it ignores stacks that do not contain &quot;air&quot; in symbol names

[[File:flamegraph-grepped-example.png|flamegraph-grepped-example.png]]

'''Links'''

[https://perf.wiki.kernel.org/index.php/Tutorial perf kernel wiki tutorial]

[http://www.brendangregg.com/perf.html perf examples by Brendan Gregg]

[https://eclipse.org/linuxtools/projectPages/perf/ Eclipse perf plugin]

[https://github.com/brendangregg/FlameGraph Flamegraph]

== Windows ==

&lt;Please add&gt;



[[Category:Engine Dev]]</text>
      <sha1>qvixic9wn9h31pi0rqu6src5o438cc7</sha1>
    </revision>
  </page>
  <page>
    <title>Epic</title>
    <ns>0</ns>
    <id>1465</id>
    <revision>
      <id>14423</id>
      <parentid>11280</parentid>
      <timestamp>2008-04-06T23:59:15Z</timestamp>
      <contributor>
        <username>Redstar</username>
        <id>6</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="817">{{AI|Epic AI|AF|Not Available|Universal Mod Support|to be announced|Open Source}}

Epic is the next AI after the NTai series. A lot of the discussion on TAI and NTai never got implemented, and lots of other things have been thought of. Epic is the amassing of all of that and coding it into a skirmish AI.



''AF: A first release was pencilled in for late 2007/early 2008, however by that time I hadn't written anything and NTai still required development aside from the various other projects. I also vastly underestimated the time needed to build Epic, and as such the new target date is 2014.''

''I would not expect anything of this project for the moment, and the goal of the AI is more likely to be AI research than providing spring with an unbeatable AI.''


''' [[AIs|&lt;- Back to AI page]]'''

[[category:AI]]</text>
      <sha1>nyc9qtcmfj9gruie1vy4akzcf3etzsp</sha1>
    </revision>
  </page>
  <page>
    <title>Epic 40000</title>
    <ns>0</ns>
    <id>1000</id>
    <revision>
      <id>21275</id>
      <parentid>20613</parentid>
      <timestamp>2011-02-24T16:52:55Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5917">{{deprecated}}

[[Image:Spring-Baneblade.jpg|frame|center|Want some Epic 40k Style Super Heavies added to The Level 2 Vehicle Factory? [http://www.awars.com/ryan/superheavy-spring.ufo Get The .ufo] (Posted By Benito
)[http://taspring.clan-sy.com/phpbb/viewtopic.php?t=1497&amp;postdays=0&amp;postorder=asc&amp;start=100]]]


The Epic mod is still being made, goto the [http://taspring.clan-sy.com/phpbb/viewforum.php?f=14 mods] or [http://www.tauniverse.com/forum/forumdisplay.php?f=141 TAU] to check out how its progressing.

Note by Guessmyname (one of the modellers): We have loads of models, but we're waiting for the new model format (unless you really want to have pink Leman Russ tanks). The above Baneblade was made by Benito, and as you may have noticed, is having a bit of trouble aiming properly because Spring calls the Aiming scripts near-constantly instead of once like in normal TA. - EDIT: This was fixed a while ago by the way (GMN again)

This mod is meant to go with zwszg's upcoming conversion of WTA into Spring (Space Marines and Eldar). We will add the Imperial Guard and the Tau, and probably the Chaos Space Marines and Necrons. Tyranids, Mutants (Lost and the Damned) and Orks, being very organic and that will probably have to wait for the new unit format if there is one.

'''Work in progress'''
# Imperial Guard
#* Super Heavy Battle Tanks[http://www.awars.com/ryan/superheavy-spring.ufo]
#** Baneblade - Modelled &amp; scripted, needs texturing &amp; new weapons&lt;b&gt;*&lt;/b&gt; - Benito
#** Shadowsword - Modelled &amp; scripted, needs texturing &amp; new weapons&lt;b&gt;*&lt;/b&gt; - Benito
# Titan Legions
#* Warhound Scout Titan - Modelled &amp; scripted(basic), needs texturing &amp; weapons&lt;b&gt;*&lt;/b&gt; - Benito
#* Reaver Titan - Modelled, needs textures, script, and weapons&lt;b&gt;*&lt;/b&gt; - Benito
# Imperial Navy
#* Thunderbolt Fighter - Modelled, needs textures script &amp; weapons&lt;b&gt;*&lt;/b&gt; - j5mello
&lt;b&gt;*&lt;/b&gt; by weapons we mean not the standard TA weapons which are being used as placeholders

All the other IG stuff, save super heavies and aircraft - modelled, conversion to new format in progress. -Guessmyname

We need people to model the buildings &amp; aircraft. 
Forum for the mod thru TAU: [http://www.tauniverse.com/forum/forumdisplay.php?f=141 Link]. 
Mod Website: [http://epic40k.tauniverse.com/ Link]

==RESOURCE METHOD==
Metal: Ore, or if you prefer, planetary resources. 

==IMPERIAL GUARD==
(&lt;B&gt;NOTE&lt;/b&gt; units with an M next to their name are modelled)

Command HQ 
*Imperial Guard Recruitment Centre
**Guardsman Squad - Lasguns (M)
**Guardsman Squad - Flamer (M)
**Guardsman Squad - Plasma Gun (M)
**Guardsman Squad - Meltagun (M)
**Guardsman Squad - Grenade Launcher (M)
**Fire Support Team - Heavy Bolter (M)
**Fire Support Team - Autocannon (M)
**Anti-Tank Team - Missile Launcher (M)
**Anti-Tank Team - Lascannon (M)
**Mortar Team (M)
**Snipers (M)
**Commissar (M)
**Tech Priest Enginseer
***Elite Infantry Centre
****Tech Priest Enginseer
*****(see first Enginseer Entry above)
****Command HQ
*****(see first Command HQ Entry above)
****Cadian Kasrkin Squad - Hellguns
****Cadian Kasrkin Squad - Flamer
****Cadian Kasrkin Squad - Plasma Gun
****Cadian Kasrkin Squad - Meltagun
****Cadian Kasrkin Squad - Grenade Launcher
****Ogryns
****Rough Riders (M)
****Lieutennant
***Heavy Flamer Turret Emplacement
***Mortar Emplacement (M)
***Missile Emplacement (M)
***Heavy Bolter Pillbox (M)
***Command Pillbox (M)
***Autocannon Pillbox (M)
***Imperial Guard Vehicle Centre
****Chimera (M)
****Chimera - Autocannon (M)
****Chimera - Heavy Bolter (M)
****Chimera - Heavy Flamer (M)
****Hellhound (M)
****Towed Cargo Flatbed (Energy storage + Solar) (M)
****Trojan Support Vehicle (Transports towed guff) (M)
****Atlas Recovery Vehicle (Repairs tanks) (M)
****Sentinel - Multi Laser (M)
****Sentinel - Missile Launcher (M)
****Salamander Command Vehicle (M)
****Salamander Scout Vehicle (M)
****Cyclops Demolition Vehicle (M)
****Revealer Radar Vehicle (M)
****Concealer Radar Jammer (M)
****Imperial Engineering Vehicle (M)
*****Earthshaker Cannon Platform (M)
*****Hydra Emplacement (M)
*****Manticore Missile Platform (M)
*****Imperial Turret Emplacement
*****Tarantula Sentrygun - Heavy Bolter (M)
*****Tarantula Sentrygun - Lascannons (M)
*****Imperial Gun Tower (M)
*****Sentry Tower (M)
*****Imperial Tank Manufactorum (M)
******Griffon Mortar (M)
******Leman Russ (M)
******Leman Russ Demolisher (M)
******Leman Russ Exterminator (M)
******Leman Russ Executioner (M)
******Leman Russ Conqueror (M)
******Leman Russ Vanquisher (M)
******Hydra Flak Tank (M)
******Destroyer Tank Hunter (M)
*****Imperial Airfield
******Aquila Lander (M)
******Vulture Gunship - Air to Air Missiles
******Vulture Gunship - Air to Ground Missiles
******Vulture Gunship - Bombs
******Vulture Gunship - Multilasers
******Vulture Gunship - Autocannons
******Thunderbolt Fighter (M)
******Valkyrie - Heavy Bolters
******Valkyrie - Rocket Pods
******Lightning Attack Fighter
******Lightning Strike Fighter - Air to Air Missiles
******Marauder Bomber
******Marauder Destroyer (Hellstrike Missiles)
*****Imperial Artillery Centre
******Thunderer Seige Tank (M)
******Bassilisk Artillery Tank (M)
******Medusa Heavy Mortar (M)
******Manticore Missile Tank (M)
******Imperial Bombard (M)
******Towed Bassilisk (M)
******Towed Manticore (M)
*****Imperial Super Heavy Tank Centre
******Stormblade
******Stormsword Super Heavy Seige Tank
******Baneblade Super Heavy Tank (D)
******Shadowsword Titan Hunter (D)
*Logistics Centre (Solar) (M)
*Logistics Storage (energy storage) (M)
*Sandbags NS (M)
*Sandbags EW (M)
*Pillbox (Building that loads infantry and gives them protection) (M)
*Sandbag Bunker (Like the pillbox but cheaper, less protection and more room to stuff Guardsmen in) (M)
*&quot;Dragons Teeth&quot; Tank Traps (M)
*Imperial Flag (fun) (M)
*Imperial Ore Extractor (M)
*Radar Station (M)
*Sentry Tower (M)

Back to [[Mods]]

[[Category:Mods]]
{{Category:Mods}}</text>
      <sha1>irroc9pv95eelqqo5a4scomo5n08rh4</sha1>
    </revision>
  </page>
  <page>
    <title>Epic Legions</title>
    <ns>0</ns>
    <id>1997</id>
    <revision>
      <id>21290</id>
      <parentid>20601</parentid>
      <timestamp>2011-02-24T16:58:04Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1462">{{deprecated}}

Epic Legions is a Warhammer 40,000 mod currently under development by Guessmyname

It is currently in closed beta status

Special Thanks to:
Abokasee (Testing)
Nemo (Testing, balance critiques)
Ivory_King (Testing)
Pintle (Testing)
Neddiedrow / Sehkmet (Testing, Stats info)

The first release will probably involve Chaos Space Marines vs Imperial Space Marines

A close-combat prototype is in the works. Until this is in proper, the other races (Tau and Tyranids especially) will not be involved due to the imbalances caused by removing an important game mechanic.

Credits go mostly to Games Workshop:

This mod is completely unofficial and in no way endorsed by Games Workshop Limited
This is a free mod and is what one would classify as fan art. The designs, story and concept are all property of Games Workshop and as such I have no copyright on this work. However, the fan art that is this mod does belong to me, as any other fan art would belong to it's author. Which means, that unless I give permission the artwork, models, sounds, scripts, unit files and game design are not for use in other projects. You may play the mod all you want but I ask that you not modify it, disassemble it or take parts from it, this is my only request. Unless it's part of the gpl content (all the stuff made by Argh), in which case, have fun and go nuts.

--[[User:Guessmyname|Guessmyname]] 14:38, 20 Jan 2007 (W. Europe Standard Time)


[[Category:Mods]]</text>
      <sha1>38rgjfuzyej4k9zhy42z96qre1drybz</sha1>
    </revision>
  </page>
  <page>
    <title>EvoGreenLitFAQ</title>
    <ns>0</ns>
    <id>3628</id>
    <revision>
      <id>29946</id>
      <parentid>29347</parentid>
      <timestamp>2016-04-07T20:55:29Z</timestamp>
      <contributor>
        <username>Forboding angel</username>
        <id>2578</id>
      </contributor>
      <comment>Blanked the page</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1>phoiac9h4m842xq45sp7s6u21eteeq1</sha1>
    </revision>
  </page>
  <page>
    <title>EvoGreenlitList</title>
    <ns>0</ns>
    <id>3627</id>
    <revision>
      <id>29346</id>
      <parentid>28500</parentid>
      <timestamp>2015-07-06T09:55:41Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>/* Solved */ categorise</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2471">List of most urgent problems currently preventing players from playing evo.

=Current=

==engine detection==

For &lt;s&gt;unknown reasons&lt;/s&gt; http://code.google.com/p/springweblobby/wiki/EvoSteamBugs '''often does not work.'''

&quot;stops at 100%&quot;

&quot;nothing happens&quot;

or errors like http://springrts.com/phpbb/viewtopic.php?f=64&amp;p=556182#p556131

=Addressed/Fixed=

==Maps==

===Solved===

A limited maplist was introduced, unsynced players are auto-specced.

The maps from maplist were added in the steam distribution in the operation dubbed &quot;Preload&quot;, as well as the engine and pool/packages with the game.
--

Too much random map changes. Too much downloading, too much unsync = no games start.

Some commonly chosen maps are unplayable (space maps etc)

Solve: '''Maplist''' on ALL hosts.

Best only put ONE map so that players do not have to download much and can just play.
Map could be:
http://springfiles.com/spring/spring-maps/eye-horus-v2

Progress:
unsynced players are specced and can not delay gamestart but does not seem to help so much

==Singleplayer==

===Solved===

Preload.
--

Does not work with fresh install because there are no files.

One must first join a MP to download engine,map,mod.

Solve: '''Download files on login''' or something.

==empty room, use !lock==

===Solved===

Springie seems to work correctly now.
--

The common solution to select an empty autohost and then lock the room does not work:

Players need to be manually to use !lock command. The empty hosts are impossible to find because players randomly join&amp;leave all the time. Even if you join an empty host, hardly does one have enough time to type !lock before another player joins.

==Bots, AIs==

===Solved===

Bot filter specific to evo was created.
--

Needs '''filter''' for add-bot menu. Only evo-compatible bots must be listed.
AAI is too often choosen because top of list but it does not work.

Solve:
If nessecarly hard-coded hack in lobby might be needed?
(real solution like implenting validAI.lua probally no time)

CarRepairer: Actually the REAL real solution is to remove AIs from the engine, which should have been done years ago like widgets. That would solve it for future versions only so a validAI list would be needed now of course.

The evo-AIs reportedly &quot;do nothing.&quot;&lt;br /&gt;
Under investigation at: http://springrts.com/phpbb/viewtopic.php?p=556029#p556029 &lt;br /&gt;
Possible quick fix: play on metal maps (Trololo, Trench_Linked).&lt;br /&gt;

[[Category:Historical]]</text>
      <sha1>1bo086vum0hootoczdmqvsyehok7rrk</sha1>
    </revision>
  </page>
  <page>
    <title>EvoTA</title>
    <ns>0</ns>
    <id>977</id>
    <revision>
      <id>20381</id>
      <parentid>13078</parentid>
      <timestamp>2010-10-30T10:39:50Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="484">{{deprecated}}

&quot;EvoTA 1.0&quot; changes Spring from XTA to more closely resemble classic TA gameplay, with the addition of pretty new models for many units.


&quot;EvoTA basic&quot; just contains the models, for those who like XTA fine.

The Evo Models were cool in TA but look silly in spring. I say stick with the xta models and download the OTA patch...the xta models are MUCH better looking

Download [http://www.fileuniverse.com/?p=show]

Back to [[Mods]]

{{Category:Mods}}
[[Category:Mods]]</text>
      <sha1>7vn6mksoa0j3tswk32y1uz0w7dzez5u</sha1>
    </revision>
  </page>
  <page>
    <title>Example projects</title>
    <ns>0</ns>
    <id>1880</id>
    <revision>
      <id>23728</id>
      <parentid>18815</parentid>
      <timestamp>2012-03-02T19:03:15Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="125">{{deprecated|deprecated, see [[Project_proposals]]}}

*[[GlobalAI Mono Bindings]] Create mono bindings for GlobalAI interface</text>
      <sha1>to78h7x92v4d2abrvzub7chn6mf7scz</sha1>
    </revision>
  </page>
  <page>
    <title>Expand</title>
    <ns>0</ns>
    <id>1721</id>
    <redirect title="Expand and Exterminate" />
    <revision>
      <id>11535</id>
      <timestamp>2006-08-12T04:10:32Z</timestamp>
      <contributor>
        <username>FireCrack</username>
        <id>237</id>
      </contributor>
      <comment>Expand moved to Expand and Exterminate</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="37">#REDIRECT [[Expand and Exterminate]]
</text>
      <sha1>pqh3ygkho0n4vvazknlpqsftsa2lrgq</sha1>
    </revision>
  </page>
  <page>
    <title>Expand &amp; Exterminate</title>
    <ns>0</ns>
    <id>1420</id>
    <redirect title="Expand and Exterminate" />
    <revision>
      <id>20625</id>
      <parentid>20624</parentid>
      <timestamp>2010-11-29T10:09:11Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>Redirected page to [[Expand and Exterminate]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="36">#REDIRECT [[Expand and Exterminate]]</text>
      <sha1>2u8vti0ul2f216re1ps7g3e4ogtmqud</sha1>
    </revision>
  </page>
  <page>
    <title>Expand and Exterminate</title>
    <ns>0</ns>
    <id>1505</id>
    <revision>
      <id>21481</id>
      <parentid>21291</parentid>
      <timestamp>2011-03-16T01:18:28Z</timestamp>
      <contributor>
        <username>Knorke</username>
        <id>833</id>
      </contributor>
      <comment>added forum link &quot;EE Fixed for 0.82.6.1&quot;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="13324">{{deprecated}}
[[Image:E&amp;E-wikiheadline.png|right|Expand &amp; Exterminate]] 
Development on E&amp;E stopped and after some time changes to the Spring engine made it incompatible.
Google_Frog fixed it to work with current Spring:
[http://springrts.com/phpbb/viewtopic.php?f=14&amp;t=24636 EE Fixed for 0.82.6.1]
----

__TOC__
[[Image:E&amp;E-screenshot2.jpg|thumb|200px|right|URC units outside a GD stronghold.]]

=Overview=

[[Image:E&amp;E-screenshot.jpg|thumb|200px|right|A well defended GD stronghold.]]

Expand and Exterminate offers three very unique and dynamic factions fighting for global domination. Each faction has its own design and fighting style that requires players to employ their own style of combat to defeat opponents. All three teams also have their own unique super weapons that offer great strategic difference. Expand and Exterminate is set in the near future that includes many futuristic and even alien-like vehicles for combat.

Expand and Exterminate is currently ''discontinued''.


'''Download it here:'''&lt;br&gt;
[http://xn--d-bga.su/EEv46.sd7 - '''V .46''' (current)]&lt;br&gt;
[http://hosted.filefront.com/Fang4606 - '''V .43''' (oudated)]


'''Single Player:'''&lt;br&gt;
Use KAIK


=Faction Overview=


==Global Dynasty==
[[IMAGE:E&amp;E-GD.png|left]]
A tank force that uses brute force to push through enemies. GD uses conventional weapons like miniguns, cannon shells, and rockets along with more specialized laser and nuclear weapons. In a one on one fight, GD has the stronger units but they also have higher costs and build times. Their airforce consists of jets and helicopters.
[[GD Unit Guide]]

==United Robot Confederation==
[[Image:E&amp;E-URC.png|left]]
Enforces control through walking mechanized units that use stealth and versatility to attack. URC's main weapons are plasma and rockets with both flamethrowers and cannons showing up on more specialized units. URC units are the best at climbing hills and can navigate high terrain better than any other faction. Their airforce consists of Vtols. [[URC Unit Guide]]

==New Initiative==
[[Image:E&amp;E-NI.png|left]]
Utilizies heavy amounts of hovercraft and aircraft to swiftly move and attack enemies, great for raiding. They also expand quicker than the other two factions but those expansions are quite fragile. The NI use exotic weapons such as lightning, lasers and photon systems along with conventional rockets. Includes largest and strongest airforce of all three factions. (This faction is not currently available but is under active development)

==Aliens==
Unknown force that fields bipedal and hovering ground combat units. This side is able to clone and morph many of its units to build up larger forces or advance to a new tech. They have the most powerful and most expensive units on the battlefield. They have a smaller air force than the other sides thats based on flying drones.

=Strategy=

==GD==

In this guide you will learn how to utilize the GD's greatest attribute: staying power, and minimize their weakness: lack of mobility.

* '''STAYING POWER''' - GD units generally have more armor, better range, and greater firepower than the combat units of the other factions.  This allows GD tanks to form a line and focus fire on incoming enemies.  GD also has better artillery than the other factions. The higher you climb the tech lvls the more armor hp damage and turrets you get on your units. At lvl 3 GD's tanks are lumbering behemoths with multiple turrets spewing fire in many directions. The key word in that last sentence is lumbering for those tanks are slow so either transport them or hide them till they are in range.
** '''LVL1''' 
** '''LVL2''' 
** '''LVL3''' 

* '''CENTRALIZED RESOURCING''' - GD basic mexes give energy, so you won't need to build a reactor immediately. GD also has a light gas plant that gives the same amount of energy as the mexes. When you're getting around to building a nuclear reactor it gives 2x+ more energy than its closest equivalent (URC fusion). While this means less building you had better space out your reactors cause they go up like nukes. At lvl3 the Gd get the ability to make a Super reactor that produces around 2000 energy. GD also may construct armed mexes, allowing them to more easily hold territory and making raiding difficult but are more expensive.

* '''LACK OF MOBILITY''' - Overall GD is the slowest of the three factions.  GD's first transport unit is available in the lvl1 air plant and is a key unit in their plans. Armed mexes combined with the rapid deployment of units via air transports helps minimize GD's lack of mobility.  GD light tanks can climb fairly well, lvl2 tanks have more difficulty, lvl3 tanks have horrid climbing ability. At lvl3 the GD receive a heavily armored transport helo. With a little skill (and some pre raid destruction) these will be able to penetrate enemy airspace and drop of their precious cargo. 

* '''METAL RAIN''' - GD arty will devastate almost any target save air units. They have an advantage vs any side but they are expensive and slow moving so you must protect them wisely. Lvl 1 arty is good support for your tanks and can help soften up a defensive line before a push. Lvl 2 arty is more effective than its lvl 1 cousin, where as the lvl 1 arty fired straight up in high trajectory, the lvl 2 can fire both in low and high trajectories. The main difference is in accuracy, with low trajectory having higher accuracy. At lvl 3 the GD gain both saturation artillery and nuke artillery. The saturation arty is like its lvl 1 cousin in that it fires straight up but that is the end of similarities. With four barrels this unit puts out a constant stream of shells that is devastating to both static defense and mobile units. The nuke artillery is a devastating weapon if used correctly. You must pay for each individual shell you fire so this is gonna be expensive unit to use in bulk or consistently. However the power unleashed form this units is devastating. The GD also have a tactical nuke launcher. Similar to the nuke artillery, you must pay for each missile you fire. The main difference between them is accuracy. The tactical nuke is perfect for pinpoint strikes while the nuke arty can and does miss so be forewarned. 

GD is all about brute force; avoid your enemies' emplacements if you can, but you can likely roll right over them. Lasers are particularly good at taking down defensive turrets (as well as units).&lt;i&gt;-Decimator&lt;/i&gt;

Most definitely. Don't forget to mix your units as well. &lt;i&gt;-Shadowsage&lt;/i&gt;

==URC==

this short guide you will explain URC's best attributes, agility and stealth.

* '''Mobility''' - To begin, when using the URC faction its best to take advantage of their ability to climb steep slopes and mountains. There are a number of ways to utilize this advantage as you have the ability to attack from angles no other faction can. Its advised that when possible that you should attack from the steepest ground possible as GD and NI units will usually not be able to follow you and your units will gain greater firing range. But most important to URC strategy is the potential for invading bases by avoiding defenses. While GD shoves through defenses and NI runs through it, the URC can completely ignore it by going through high terrain to surprise attack an opponent's base. If the high terrain is steep enough, you're assured that neither GD or NI can build defenses on their hills or mountains around their base.

* '''STEALTH''' - The URC are the only faction to have units that cloak. After you have put up your early economy and first land factory use spiders (cheap, cloakable spy units that can build cameras and mines) very early in game to put cameras around key positions and to observe enemy bases. A good objective to keep in mind is to use this unit as your eyes and ears to basically monitor your enemies base for an undefended route that you can use late game to invade. Be sure to build a few battle mechs and a couple construction mechs afterwards to properly expand in early game. During middle to late game, you can build a stealth factory to produce a variety of medium strength attack mechs that can both cloak and jam radars. At the cost of this ability however these mechs are more expensive and take less damage than their non-stealth counterparts. Therefore its advised to use these units in small raiding parties to disrupt and destroy the opponents economy. Do not mainly focus them on aiding your main armies in combat as its not cost effective, they are best used for surprising un-protected bases.


As URC you have many options open to you in conquest. Even though I have written guidelines for a suggested play style, you can still win without using stealth and agility, its entirely up to your gameplay style. You may find that using URC as brute force works better for you, as they can operate a highly strong head on function in proper numbers. Whatever your style is, URC can probably fit into it. &lt;i&gt;-Flintlock&lt;/i&gt;

Your increased mobility on the ground combined with stealth can give you as a URC player the option of choosing when and where you battle, a decisive point. As Flintlock said, you can essentially run successfully with any of an array of play styles. &lt;i&gt;-Neddiedrow&lt;/i&gt;

==Aliens==

Aliens are the newest race to enter the E&amp;E battlezones and also one of the most unique. This quick guide should give you a heads up as to how they operate.

* '''CLONE AND MORPH''' - Rather than using traditional factories like GD or URC, the aliens increase their forces (and tech level) by cloning or morphing their units. The commander can construct the scout, construction and light combat forms. These units are built the same way as a building. To get more of these units, the commander can build more or a live unit can clone itself. Cloning will stop whatever the unit was currently doing and freeze it in place. As the process moves along the clone's outline will flash next to the cloning unit. Once cloning is finished the unit can go back to what it was doing (though builders will not automatically go back to building something they started) and the clone is ready to go. Aircraft however cannot morph or clone and must be built by the appropriate level Anti Air form. Ships can clone but not morph, in order to access higher level ships you'll need a higher level constructor.

* Morphing works similarly to cloning except the unit that is morphed from is lost (in a sense you are &quot;upgrading&quot; that unit to the new type). The morph tree is [http://img252.imageshack.us/img252/6838/morphsystemkz1.jpg here]. You will know you are morphing as the build pic will be overlaid with the word Morph.


* '''EARLY GAME''' - The aliens have the most powerful units in the game, one vs. one they will beat their counterparts in the other factions. However this comes at the cost of a high price tag both in resources and building/cloning/morphing time. It is imperative that an alien player spread out and take as many metal deposits on the map as possible. This is best done using the scout form. Scout forms are cheap, fast, have long Line of Sight, and can very quickly get Extraction Pylons up over a large radius. Going construction form first will stall your economy to the point where you might never recover.

* Generally two Extractors and four Energies will be enough to cover early unit costs.
* After the inital set of Scouts (2-4)and Light Combat Forms(0-2), have you commander go on to building 6-7 or so Energy Pylons. 
* Use cloning and morphing to increase your army size and diversity but always have some &quot;live&quot; units to deal with enemies. 
* Storage is very important for the aliens as an excess of resources allows cloning and morphing whenever its needed. 3-4 storage will carry you through most of a match but spares are always nice to have.


[[Image:E&amp;E-screenshot3wide.jpg|702px|center|]]

=Links=
*'''[http://xn--d-bga.su/EEv46.sd7 Download current version]''' (.46)
*'''[http://hosted.filefront.com/Fang4606/ Download outdated versions]'''  WARNING: these versions can be testing versions so bugs and imbalances could be present!!!
*'''[http://spring.clan-sy.com/phpbb/viewtopic.php?f=14&amp;t=13801 Current Expand &amp; Exterminate Thread on Spring Forums]'''
*'''[http://smoth.net/foram/viewforum.php?f=7 Expand &amp; Exterminate section on Smoth's Forums]'''

=Credits=
'''Mod Creation'''
*Fang - Created all of E&amp;E, scripted, textured, modeled and compiled
*Smoth - Scripting and modeling advice, and much other assistance 
*Argh - Scripting and modeling advice, as well as much other assistance
*Ground Zero - Provided modeling help and sounds 
*Nemo - Weapon setup assistance
*Forboding Angel - Cursors/Loading Screens/Sounds
*Wasp - Buildpics/Icons/Website help

'''Additional Help'''
*Decimator - Wrote GD Strategy
*Flintlock - Initial Promotional/Biography/Wiki/Graphic Designs
*Zoombie - Unit Guides
*j5mello - Wiki

'''Alpha Testing'''
*Big Steve
*Cabbage
*DasBruce
*DavetheBrave
*Decimator
*Drexion
*GuiltySpark
*OverDamage
*Flintlock
*Forboding Angel
*J5mello
*Smoth
*Tenebrous
*Wasp

'''Beta Testing'''
*Sleksa
*WarhammerC
*Cronyx
*Chapparal
*Sekhmet/Neddiedrow
*Aun
*Kixxe
*Krogothe
*Drone_Fragger

'''Current Players'''
*Thank you for playing and keep giving input on the current version.


Back to [[Games]]

{{Category:Mods}}</text>
      <sha1>elvigi69v4pyklkmsjtz4a72bkixnd9</sha1>
    </revision>
  </page>
  <page>
    <title>Expand and Exterminate/Units</title>
    <ns>0</ns>
    <id>1745</id>
    <revision>
      <id>11559</id>
      <parentid>5977</parentid>
      <timestamp>2006-09-15T15:06:57Z</timestamp>
      <contributor>
        <username>FoeOfTheBee</username>
        <id>20</id>
      </contributor>
      <comment>/* Medium GD Units */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8746">This page is a guide to the units in Expand and Exterminate. It is intended to give you some idea of what units are available, what they look like, and what they're good for.

==Commander==

As in most Spring mods, you start with a single Commander unit in EE. The Commander in EE is unarmed, but has a lot of HP and moves and builds very quickly. It is amphibious, so it can move into or across bodies of water to build shipyards, floating structures, or new bases.

----

==Weapons==

Weapons in EE are very standardized. Each side generally has a couple of &quot;signature&quot; weapons that many of their units use, combined with a few common or unique weapons. Understanding the weapon types will help you develop good force mixes, understand what your enemy's using against you, and quickly identify new units.

===URC Plasma===

The signature weapon of the URC, Plasma weapons look like a green beam. They're direct fire, so they cannot fire over units or terrain, and they have a slightly shorter range and lower damage than GD Cannons. They're still the best direct-fire weapon available to URC forces for unit-on-unit combat, and plasma units should form the bulk of most of your forces. Like all direct-fire weapons, their effectiveness increases significantly if they're lined up. (Click and drag when issuing a move order.)

===GD Cannon===

The signature weapon of GD's tank units, Cannons are slower-firing than Plasma, but longer range and higher damage. Cannon tanks will usually be the bulk of your battle force, and their effectiveness increases significantly when they're arranged in a line. (Click and drag when issuing a move order.)

===Rockets and Missiles===

Used by both GD and URC, rockets and missiles are practically identical. They have lower DPS than GD Cannon or URC Plasma weapons, but can fire over other units and have a larger area of effect. This makes them an excellent choice to support Cannon/Plasma units, as they can stay behind them and still engage the enemy, improving the group's overall damage.

===GD Lasers===

A specialist weapon used by some GD tanks, lasers have a shorter range than Cannons but a higher DPS. This makes them excellent at destroying buildings quickly, but poor at engaging enemy units.

===GD Ion Cannons===

Another specialist weapon used by some GD tanks. Ion Cannons can paralyze units for a short amount of time. Ion Cannon blasts pass through units, allowing them to paralyze several units in a clump at once.

===URC Flamethrowers/Cannons===

Like GD Lasers, URC Flamethrowers have a shorter range but higher damage. They, too, excel at demolitions, and can also be used as an anti-swarm weapon with cover from other units.

Medium and Heavy URC mechs carry cannons instead of flamethrowers. These weapons have little in common with GD Cannons and, like flamethrowers, are best suited for demolitions.

===Anti-aircraft Weapons===

Both the URC and GD use a wide variety of anti-aircraft weapons including SAMs and anti-air artillery. They are generally fast-firing and hard-hitting, capable of doing substantial damage to enemy aircraft. They are, however, totally useless against ground units.

===Artillery and Mortars===

Artillery and Mortars are high-trajectory support weapons. Inaccurate and slow-firing but long-ranged and powerful, they are best used to engage units and structures visible only on radar. They typically require considerable support from other ground units, as they cannot effectively engage close-in enemies.

===Torpedoes===

Torpedoes are useless against land units, but do significant damage to water units. Note that torpedoes fired by underwater units may not be able to effectively damage floating structures.

===Stealth and Cloaking===

There are two general ways to avoid detection in Spring: stealth and cloaking. Stealth is always on, and prevents a unit from being detected with radar. Cloaking costs energy to use, but prevents the unit from being detected visually unless it fires, you run out of energy, or the enemy gets too close.

----

==General Unit Types==

Like weapons, the capabilities of the types of units each faction can build are fairly standardized.

===Mechs===

The URC's main ground combat units are mechs. Heavier models walk on two legs, while lighter models and stealth models walk on four or six. URC mechs have a significant maneuverability advantage over other unit types, and are faster than tanks and capable of climbing much steeper hills. They pay for this with less HP and less powerful weapons.

===Tanks===

The favourite ground combat units of the GD. Tanks are slower and tougher than most other units, and mount heavier weapons. They cannot climb hills well, but rule on flat, open ground.

===Ships===

Used by both the URC and the GD, ships and submarines are limited to water. They generally move much faster and have much more HP and range than their land-based cousins.

===Aircraft===

Capable of flying high above any terrain, aircraft are fast and mobile, but have even less HP than mechs.

----

==Light Units==

Light units are faster and cheaper but weaker than their heavier cousins. They are your most flexible combat units, and will probably form the bulk of your forces throughout the game. You'll almost always want to have two or three factories spread throughout your territory producing Light units.

===Light Construction Units===

Light construction units can build everything the Commander can and a bit more. They can build their faction's special metal extractor, Medium Factory, and are amphibious.

===Scout Units===

A special unit that can only be built at the Light Unit Factory, proper use of Scout units is invaluable. While very weak and easy prey for any real combat unit, they're fast, cheap, and have a huge sight range. Each is capable of building a couple of simple but effective structures. The URC Scout Mech can build cloaked cameras and mines. The GD Scout Tank can build stealthy perimeter cameras and short-range radar. Mixing a couple scouts in with your combat units is a good idea, especially if you use them to build cameras, mines, and radar as you advance.

===Light URC Units===

The Light Mech factory can build mechs armed with Plasma, Rockets, Surface-to-Air Missiles, Flamethrowers, or Mortars and a stealthy, cloakable mech armed with Plasma. It can also build an ECM Mech, which is unarmed but carries a medium-range radar and a short-range jammer.

===Light GD Units===

The Light Vehicle Factory can build tanks armed with cannons, missiles, ion cannons, artillery, AA, and lasers. It can also build a &quot;Radar Tank&quot;, which carries a smaller cannon than a normal battle tank but adds a medium-range radar.

----

==Medium Units==

Medium Units are more powerful and tougher than Light Units, but correspondingly slower and more expensive. They need to be supported by Light Units to be effective, as otherwise they can be swarmed and overwhelmed. When used properly, they can provide an extra punch to an assault or defense force, allowing it to press through or turn back enemies it would otherwise have been annihilated by.

===Medium Construction Units===

Medium Construction Units are similar to their Lighter cousins, but have a slightly more specialized build menu. They can build a Heavy Factory, more sophisticated (and expensive) metal extractors and power generators, a geothermal plant, larger turrets, and longer-range radars. Unlike Light Construction Units, they are ''not'' amphibious.

===Medium URC Units===

The Medium Mech Factory can build two-legged mechs armed with Plasma, Rockets, URC Cannons, SAMs, and artillery. There's also a stealthy, amphibious version of the Plasma mech, which is slightly more expensive but just as combat-worthy. It can also build a stealthy, cloakable amphibious transport mech, a stealthy amphibious mech armed with torpedoes for anti-ship work, and a minelayer mech.

===Medium Stealth URC Units===

To help compensate for their lack of battle power, the URC gets a second factory that can produce stealth mechs. These mechs cannot be detected on radar and can cloak, which makes them excellent for surprise attacks. Stealth Mechs armed with Plasma, Rockets, SAMs, and Torpedoes are available, as well as a Stealth Mech with a radar-jamming ECM suite.

===Medium GD Units===

The Medium Tank Factory can build larger Medium Tanks armed with Cannons, Rockets, Lasers, Ion Cannons, Bombardment Artillery (rapid-fire), and Anti-Air Artillery. Amphibious versions of the cannon, rocket, and anti-air tanks are available. It can also build an ECM tank, which can jam enemy radar, a minelayer tank, and an amphibious tank armed with torpedoes for anti-ship work.


[[category:Expand and Exterminate]]</text>
      <sha1>elm121bagrsplqduv9tdsnkl05q7v3m</sha1>
    </revision>
  </page>
  <page>
    <title>Expand and Exterminate Strategy</title>
    <ns>0</ns>
    <id>1722</id>
    <revision>
      <id>11536</id>
      <parentid>5978</parentid>
      <timestamp>2006-09-15T15:07:11Z</timestamp>
      <contributor>
        <username>FoeOfTheBee</username>
        <id>20</id>
      </contributor>
      <comment>/* Other Weapons */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9152">=Overview=

==GD==

In this guide you will learn how to utilize the GD's greatest attribute: staying power, and minimize their weakness: lack of mobility.

* '''STAYING POWER''' - GD units generally have more armor, better range, and greater firepower than the combat units of the other factions.  This allows GD tanks to form a line and focus fire on incoming enemies.  GD also has better artillery than the other factions. The higher you climb the tech lvls the more armor hp damage and turrets you get on your units. At lvl 3 GD's tanks are lumbering behemoths with multiple turrets spewing fire in many directions. The key word in that last sentence is lumbering for those tanks are slow so either transport them or hide them till they are in range.
** '''LVL1''' level 1 Specific info
** '''LVL2''' level 2 Specific info
** '''LVL3''' level 3 Specific info

* '''CENTRALIZED RESOURCING''' - GD basic mexes give energy, so you won't need to build a reactor immediately. GD also has a light gas plant that gives the same amount of energy as the mexes. When you're getting around to building a nuclear reactor it gives 2x+ more energy than its closest equivalent (URC fusion). While this means less building you had better space out your reactors cause they go up like nukes. At lvl3 the Gd get the ability to make a Super reactor that produces around 2000 energy. GD also may construct armed mexes, allowing them to more easily hold territory and making raiding difficult; however these mexes don't make energy.

* '''LACK OF MOBILITY''' - Overall GD is the slowest of the three factions.  GD's first transport unit is available in the lvl1 air plant and is a key unit in thier plans. Armed mexes combined with the rapid deployment of units via air transports helps minimise GD's lack of mobility.  GD light tanks can climb fairly well, lvl2 tanks have more difficulty, lvl3 tanks have horrid climbing ability. At lvl3 the GD recieve a tough armed transport helo. With a little skill (and some pre raid destruction) these will be able to penetrate enemy airspace and drop of their precious cargo. 

* '''METAL RAIN''' - GD arty will devastate almost any target save air units. They have an advantage vs any side but they are expensive and slow moving so you must protect them wisely. Lvl 1 arty is good support for your tanks and can help soften up a defensive line before a push. Lvl 2 arty is more effective than its lvl 1 cousin, where as the lvl 1 arty fired straight up in high trajectory, the Lvl 2 can fire both in low and high trajectories. The main difference is in accuracy, with low trajectory having higher accuracy. At lvl 3 the GD gain both saturation artillery and nuke artillery. The saturation arty is like its lvl 1 cousin in that it fires straight up but that is the end of similarities. WIth four barrels this unit puts out a constant stream of shells that is devastating to both static defense and mobile units. The nuke artillery is a devastating weapon if used correctly. You must pay for each individual shell you fire so this is gonna be expensive unit to use in bulk or consistantly. However the power unleashed form this units is devastating. The GD also have a tactical nuke launcher. Similar to the nuke artillery, you must pay for each missile you fire. The main difference between them is accuracy. The tactical nuke is perfect for pinpoint strikes while the nuke arty can and does miss so be forewarned. 

GD is all about brute force; avoid your enemies' emplacements if you can, but you can likely roll right over them. &lt;i&gt;-Decimator&lt;/i&gt;

==URC==

In this guide you will learn how to properly combine the URC's best attributes, agility and stealth.

* '''CLIMBING'''- To begin, when using the URC faction its best to take advantage of their ability to climb steep slopes and mountains. There are a number of ways to utilize this advantage as you have the ability to attack from angles no other faction can. Its advised that when possible that you should attack from the steepest ground possible as GD and NI units will usually not be able to follow you and your units will gain greater firing range. But most important to URC strategy is the potential for invading bases by avoiding defenses. While GD shoves through defenses and NI runs through it, the URC can completly ignore it by going through high terrian to suprise attack an opponent's base. If the high terrian is steep enough, youre assured that neither GD or NI can build defenses on their hills or mountains around their base.

* '''STEALTH''' - The URC are the only faction to have units that cloak. During early game after you have put up your small economy and unit factory use spiders (cheap, cloakable spy unit that can build cameras and mines. LV1) very early in game to put cameras around key positions and to observe enemy bases. A good objective to keep in mind is to use this unit as your eyes and ears to basically monitor your enemies base for an undefended route that you can use late game to invade. Be sure to build a few battle mechs and a couple construction mechs afterwards to properly expand in early game. During middle to late game, you can use your level two factory to produce a variety of medium strength attack mechs that can both cloak and jam radars. At the cost of this ability however these mechs are more expensive and less strong than its non-stealth counterparts. Therfor its advised to use these units in small raiding parties to disrupt and destroy the oponnents economy. Do not mainly focus them on aiding your main armies in combat as its not cost effective, they are best used for suprising un-protected bases.


''As URC you have many options open to you in conquest. Even though I have written guidelines for a suggested play style, you can still win without using stealth and agility, its entirely up to your gameplay style. You may find that using URC as brute force works better for you, as they can operate a highly strong head on function in proper numbers. Whatever your style is, URC can probably fit into it. '''-Flintlock''' ''

=Weapons=

Because of the way Expand and Exterminate works, knowig the properties of weapons is essential to sucess. Typicaly the same weapons are repeated across each tech level, with similar properties but increasing effectiveness at higher levels. This section of the guide shows the weapons in groups that denote their purpose, and gives information on the properties of each weapon.

==Frontline Weapons==
Units with frontline weaponsa re what will likely make up the bulk of your army. These weapons typicaly have fairly good fire rates and good damage/second. Their main drawback is that while good in all areas they excell in none. As a consolation for this, however, units with these weapons typicaly can take more damage than others.
*'''Cannon (GD)''' - GD cannons have a fairly slow firing rate combined with a high damage. This combination does, however, typicaly end up with giving a slightly higher damage/second than URC plasma weapons, in combination with their slightly higher range this makes them a generaly supirior weapon. Because these are balistic weapons firing from high to low areas gives a range bonus and firing from low to high a penalty.
*'''Plasma (URC)''' - URC plasma cannons fire much faster than the GD cannons but also do much less damage. The weapons overall damage/second isslightly lower than that of a GD cannon, and they have slightly less range. Units with plasma do tend to cost less than GD cannon units though. URC plasma weapons are not balistic and as thus do not get any range bonuses or penalties from the terrain.

==Support Weapons==
*'''Missile (GD)'''
*'''Rocket (URC)'''

==Heavy Support Weapons==
Heavy support weapons are short range, generaly high damage powerhouses. Some of these gain a damage bonus against base structures making them deadly if they get behind enemy defences. Units with these tend to be able to take more damage than those with frontline weapons, and tend to cost less too. The drawback of these weapons is their short range, alone they can be outrun and eventualy destroyed.
*'''Laser (GD)''' - GD laser weapons are utterly devastating. They have a fair range for a heavy support weapon and an incredible damage potential. At low levels laser units do over twice the damage/second of their counterpart cannon unit, and even more against buildings. A level 3 laser tank does over 3x the damage/second of a level 3 cannon tank. The only thing keeping these weapons from being totaly overpowering is that GD units are slow, so you should be able to outrun and eventualy destroy a laser tank.
*'''Flamethrower (URC)'''
*'''Cannon (URC)''' - URC cannons are very slow firing, very high damage/shot weapons with little resemblence to GD cannons. These cannons have a very high damage per shot and a very slow firing rate.

==Artillery Weapons==
*'''Artillery (GD)'''
*'''Saturation Artillery (GD)'''
*'''Mortar (URC)'''
*'''Rocket Artillery (URC)'''
*'''Heavy Rocket Artillery (URC)'''

==Special Weapons==
*'''Ion Cannon (GD)'''

==Other Weapons==
*'''Torpedoes'''

[[category:Expand and Exterminate]]</text>
      <sha1>jwgz3x8tpiwx593t00pct14k0innpu0</sha1>
    </revision>
  </page>
  <page>
    <title>Expansion</title>
    <ns>0</ns>
    <id>1397</id>
    <revision>
      <id>12301</id>
      <parentid>11213</parentid>
      <timestamp>2007-07-08T18:36:40Z</timestamp>
      <contributor>
        <ip>217.87.214.36</ip>
      </contributor>
      <comment>removed spam</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2918">'''Expansion''' focuses on building a large sprawling base.  The aim is to capture resources as quickly as possible.  With a significant economic advantage, the player can then crush the opponent with superior forces.  In most Real Time Strategy games, the ability to expand effectively is required to have a chance of winning against reasonably experienced opposition. Unlike many other RTSes, Expansions in TA are cheap and fast to build, allowing for rapid expansion across the map.

To expand effectively, a balance between military units and resource units must be found.  If you build too few military units an enemy raid can destroy half of your base.  Build too many military units and your expansion will be slowed down due to lack of resources being spent on expansion.

Many beginners err on the side of building too many military units.  They only expand when they have enough defenses to feel confident that an enemy attack will not do any damage.  However in most TA based mods, metal extractors can be built cheaply and quickly.  A fast and lightly defended expansion can build up a resource advantage, unless the enemy's fast to respond, in which case the metal from your unit's corpses can give him an edge.  Enemy raids will reduce this advantage. but as long as you defend well enough to avoid losing large parts of your base, as opposed to a few cheap outlying metal extractors, the advantage will be maintained.

The other error beginners can make is to not build military units early enough.  They focus on only expanding their economy during the early part of the game, and then move into a subsequent period building up military strength and massed assaults.  This strategy will fail if the opponent rushes or raids early. While the Commander can serve as a deterrent to such attacks, most light units are much faster than he is, and can easily avoid him.

In team games, the normal starting arrangement is to have each team in a line on each side of the map, in a North-vs-South or East-vs-West arrangement.  Players then focus on expanding towards the middle as quickly as possible to seize as much territory as they can and deny that territory to the enemy.  Once a solid defensive line is established as far forward as possible, any vacant resource spots behind it can be occupied later with little fear of opposition.  With several players expanding forward in a line, there is less chance for enemies to slip through the defensive line before it closes. A good player may still find a way through and cause unexpected havoc, or break through with the aid of light artillery.

In a one on one game, there are usually several directions to expand in.  A player that expands directly towards the middle as in a team game can find the opponent expanding sideways and attacking from exposed flanks.



''' [[Strategy_and_Tactics|&lt;- Back to Strategy and Tactics page]]'''

[[Category:Strategy]]</text>
      <sha1>bn1g7sys2ibl774xav07wosmmiz2ext</sha1>
    </revision>
  </page>
  <page>
    <title>Explspike</title>
    <ns>0</ns>
    <id>2481</id>
    <revision>
      <id>28800</id>
      <parentid>22416</parentid>
      <timestamp>2014-10-05T16:36:21Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>tag for delete</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="906">{{delete}}
== Introduction ==

Explspike basically makes rays of light, like sunlight leaking into a dusty room, but without the dust.

== Source ==

{{sourcelink|file=rts/Sim/Projectiles/Unsynced/ExploSpikeProjectile.cpp}}

== Suggested Use ==

Explspike is good for making an explosion seem bright. It is good for situations where you want to suggest that a weapon is powerful without necessarily suggesting that it has a large area of effect.

== Parameters ==

=== length ===

Starting length of the pike?

=== width ===

Width of the pike at the base.

=== alpha ===

The starting alpha of the pike.

=== alphaDecay ===

This is subtracted from the alpha every frame. If the alpha passes zero, the effect ends.

=== lengthGrowth ===

Not sure exactly what this does.

=== dir ===

The direction of the pike. The larger this vector, the faster the pike will grow.

=== color ===

The color of the pike.</text>
      <sha1>bm5yybyrmneznglmagwai8i3crna91y</sha1>
    </revision>
  </page>
  <page>
    <title>FAQ</title>
    <ns>0</ns>
    <id>935</id>
    <revision>
      <id>29281</id>
      <parentid>27845</parentid>
      <timestamp>2015-06-03T15:32:16Z</timestamp>
      <contributor>
        <username>Af</username>
        <id>2575</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1489">{|border=&quot;0&quot; width=&quot;100%&quot; style=&quot;border: 0px; border-spacing:0px&quot;
|width=&quot;500px&quot; valign=&quot;top&quot; style=&quot;padding-left:10px; padding-right:10px&quot;|
'''[[FAQs]]'''

Frequently asked questions for the following: 
* [[FAQ:general|General FAQ]]
* [[FAQ:technical|Technical FAQ]]
* [[FAQ:player|Playing ingame FAQ]]
* [[FAQ:trouble|Troubleshooting FAQ]]


'''[[Read_Me_First|Read Me]]'''

How to start your first game.


'''[[Keyboard]]'''

Default Keyboard Layout in the Engine.

'''[[Games]]'''

Games that use the Spring engine.


'''[[Maps]]'''

All about maps for the Spring engine and where to get them.


'''[[Lua Widgets]]'''

All about installing and using LuaUI widgets...


'''[[AI:Skirmish|AIs]]'''

Skirmish AIs, Lua AIs...


'''[[Hosting Spring]]'''

Autohosting and related topics.


'''[[Spring:CategoryStructure]]'''

Check here to get an overview of the website.

|valign=&quot;top&quot; style=&quot;padding:0px&quot;|

== Quick Links ==


|}
[[Category:FAQ]]</text>
      <sha1>hs89j8gbtqg3rnwv95dp3xe7d1gyetn</sha1>
    </revision>
  </page>
  <page>
    <title>FAQ:Content</title>
    <ns>0</ns>
    <id>2809</id>
    <revision>
      <id>27843</id>
      <parentid>26637</parentid>
      <timestamp>2013-10-28T19:55:23Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>update link</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="13728">= Spring Modification and Game Developement FAQ + Basics =
== How To Get Help ==
* '''Play Before You Ask Anything:''' If you found this site as part of you trying to figure out how to make your dream game that's awesome.  Regardless of why you are here, if you want to design games you'll need to familiarize yourself with the engine's capabilities and the best way to do that is to play the games that already exist.  As a basic rule, before posting a question, make sure you have at least learned how to download and install content packages and played a multi-player game... if you don't want to play a multi-player game you should at-least spectate a few of them.

* '''Don't Be Stupid:''' If You post in a forum and don't present yourself in an intelligent manner demonstrating commitment to your project in the form of actual work or demonstrating the intelligence needed to actually do what what you are asking for, most of the people who reply will be doing so to mock you/scare you away. There are many projects all in competition for help, your project will at many times be just you and you need to be able to do all project related tasks if you expect to reach completion.

* '''Figure Out What You Are Asking For:''' If you are unsure where to start, posting a &quot;Where do I start?&quot; topic without any details is not the right approach. Figure out what you want to do (make a new Game Type or Mutator, Make New Units, Make a New Map, Make a Mission or Campaign, Make an AI) and ask for that specifically.

* '''We Help Those Who Help Themselves:''' Don't post something like &quot;I have this awesome Idea, help me make it!&quot;, without also posting what contributions you intend to provide to the project... if you are just posting an idea and intend to be &quot;The Idea Guy&quot; then you probably want to post it in the Off-Topic forums.

* '''Don't Take It Personally:''' Without exception, no matter how hard you try, no matter how awesome you are at modeling, scripting or game design... someone is going to try to &quot;Help&quot; you by being a jerk to you... These people have usually interpreted your behavior as being cocky or n00bish and want to tear you down as a way of weeding useless people out of the community.  When this happens, just ignore them and press on or leave.

* '''If No One Helps You Don't Get Mad:''' If people don't respond to your post it's likely because the people who know the answer are busy working on their own projects and haven't taken the time to check the forums.  First, be patient. Second, poke around with the documentation or crack open a pre-existing Package and try to figure out a better way to ask your question. Finally, you can also log in to the lobby software and ask there, check the list of available channels, there's usually one about the topic you are trying to learn... if all else fails just ask in #main.

== Stuff Everyone Should Know ==
Spring is an Engine designed to allow people to make real-time strategy games... It is not a game in itself.  Unfortunately this has lead to a lot of very complex and bitter arguments on semantics, the results of which can be summarized as follows:


&quot;Content&quot; can be developed for Spring and distributed in &quot;Content Packages&quot; (namely SDZ, SD7 Files or SDD folders) or dumped into your Spring directory structure directly (a bad idea in many cases, as except for certain notable exceptions it will cause you to be unable to synchronize with other players).  The content of these Packages can take the form of Units, Textures, Models (3DO or S3O), Game Types and Maps... (Lua and COB Scripts along with other Data Files may also count in certain contexts...)

This leads to a bunch of quazi-defined meta-terminology:

=== General Terminology ===

'''TA-ist/TA-isms''': Spring was initially designed to play a Port of XTA, a Mod of Total Annihilation build for the original Total Annihilation engine. As such there are a number of things, like the resource structure, the general interface, unit tags (and to be honest nearly everything that isn't Lua) that are essentially extensions of this concept.

=== &quot;Game Type&quot; Terminology ===

'''Mods, Games and Mutators''' are all essentially synonyms for &quot;A Content Package Containing At Least One Game Type&quot;. Colloquially speaking: 

*'''Mods''' are modifications of existing games, in almost all cases these are a Derivative Work of Total Annihilation. 

*'''Games''' Projects creating Original Works, independent of the aforementioned Total Annihilation data and Copyright.

*'''Mutators''' are new Game Types meant to be used in conjunction with an existing Package called a &quot;dependency&quot;. They are not meant to be mods as they exist to facilitate the addition of features or the altering of gameplay for the core of a project. In the more common vernacular of video gaming these would have been mods.

'''Modders, (Mod-)Devs, Game Developers''' are interchangeable terms for the people working on a Project.  Typically someone who is working with existing content developed by someone else falls into the '''&quot;Modders&quot;''' category and and those who are creating all new content are called '''&quot;Game Developers&quot;''', but most content developers tend to both create new content and modify existing content so the terms are really more a matter of preference. 

'''Game Designers'''
Aka, idea men, most of us are intelligent enough to come up with the code to pull off these crazy ideas you suggest. Odds are that intellect also comes with the creativity to have our own ideas. Idea men are not needed here and will find themselves alone and without the ability to finish their project.

'''Units''' are entity templates defined in text files that reference Model, Other Text Files, Script and Texture files (sometimes this reference is inferred).  Like most RTS Games, a Game Type in Spring will typically define one or more kind of starting unit which will be able to be given orders to do things like move, attack and build new other units.  The term &quot;Units&quot; is used both to describe these definitions and the resulting instances in games.

'''Features and Wreckage''' are special types of Units that are not owned by any player.  These include things like rocks and trees as well as the corpses of fallen units.

=== Map Terminology ===
A map in Spring consist of a heightfield, environmental lighting and sky settings, type map, texture, metal map and features.
the Map Data Files:
*(SMD), contains parameters that set things such as lighting and startpoints
*(SMT), Tiles File 
*(SMF), Contains the heightmap, metal map, typemap and and the feature and grass layout information

Maps may also include their own lua gadgets, which are to be stored in lua gaia. They may have their own feature models, units, effects and even map options which allow a host to change properties of the map.

=== Scripting Terminology ===

'''Synchronized Code'''
Lua Gadgets and Unit Scripts (Lua or COB) are what is referred to as synchronized code.  They define much of the behavior of all Games of a given Game Type and as such must act the same on all players computers.  Because Unit animation is used for things like aiming speed, how long it takes a unit to open and close, or when it is able to shoot a specific weapon, all of the code for this behavior is synchronized.

'''Gadgets''' are Lua scripts that are inherent to a &quot;Game Type&quot;, they can define pretty much anything from which units are available to custom resources to unit animations to GUI elements.  If you ask a question like &quot;Is it possible for the game I'm building to do X&quot; the answer is most-probably, &quot;Yes, with enough Lua&quot;.  You could for example use Lua, in conjunction with the Spring Engine, to build a first person shooter or turn based strategy game... though it would take an awful lot of creative Lua to do so.

'''Lua Unit Definitions and Scripts''' Lua can also be used within the traditional TA-ist framework to set the values of a Unit's tags and define the Unit's animation scripts.

'''Widgets'' are Lua scripts that are not inherent to &lt;s&gt;the&lt;/s&gt; &lt;s&gt;a&lt;/s&gt; yes &quot;Game Type&quot; (though they might be included along with a Game Type in a Package).  They define things like custom GUI elements, macro-equivalent short-cut commands or pretty much anything that is specific to your individual client session and not the game simulation.  Widgets are one of the few things you can drop relatively safely into your Spring directory structure without interfering with sync.

'''COB''' is a compiled script that is a derived form of the unit script files in Total Annihilation.  Many Game Types still use COB to define how their units behave. '''BOS''' files are the source-code form of a COB file, they are sometimes included along with the COB files by kind Game Developers to be used as reference.

== General Development FAQ ==

This covers the basic concepts of Spring Content creation that are common to all Game Types, Maps or Content in general.

=== How I Mod?! ===
In general, the first thing you'll want to do is crack open an existing Package for the type of thing you want to modify.

Packages Will contain some or all of the following Files:
* Data Files (Plain Text files with the extension .TDF (for &quot;Total Annihilation Data File&quot;) or .FBI)
* Textures (in the form of Image files)
* Models (in 3DO or S3O format)
* Scripts (in Lua or compiled COB format)
* Map Tiles (Compiled SMT files (not human readable))
* Map Data (Plain Text SMD Files)
* Map &quot;Everything Else&quot; Files (Compiled SMF files (not human readable))

These are all stored in either ZIP or 7zip Format and can both be opened with [http://www.7-zip.org/ 7zip]

=== So Really, How do I Mod the Spring Engine? ===
You Don't, see next section.
=== Okay... How do I Create a new Project or Modify an existing Package For the Spring Engine? ===
That depends, do you want to:
* Make a New Unit
* Modify an Existing Game Type
* [[Mapdev:Main|Make a Map]]
* Script a Widget
* Make a New Game Type

=== Where do I put all these files? ===
The folder structure for a Package is the same for every Game Type or Map:

First start with a &quot;.SDD&quot; folder or SDZ/SD7 Archive within the &quot;Packages&quot;, &quot;Maps&quot; or &quot;Mods&quot; Folder chosen within your Spring Preferences:
* '''.SDD Folder:''' Create a folder called &quot;PackageName.SDD&quot; containing your files
* '''SDZ:''' Create a ZIP file containing your files and rename it to PackageName.SDZ
* '''SD7:''' Create a 7z file containing your files and rename it to PackageName.SD7

Within your mod folder or archive you need to have the following [[Mod_Development:Archives|folder structure]]:


[[Image:Folder-red.gif]]Root (SDZ/SD7 Archive or .SDD Folder)&lt;br&gt;
[[Image:T-Piece.png]][[Image:File.gif]]modinfo.lua - basic information about a Game Type and it's dependencies&lt;br&gt;
[[Image:T-Piece.png]][[Image:Folder-yellow.gif]]anims&lt;br&gt;
[[Image:V-Piece.png]][[Image:L-Piece.png]][[Image:File.gif]]Images related to Cursors&lt;br&gt;
[[Image:T-Piece.png]][[Image:Folder-yellow.gif]]download&lt;br&gt;
[[Image:V-Piece.png]][[Image:L-Piece.png]][[Image:File.gif]]FileName.TDF - Old Style way to decide which units can be built by what units&lt;br&gt;
[[Image:T-Piece.png]][[Image:Folder-yellow.gif]]features&lt;br&gt;
[[Image:V-Piece.png]][[Image:T-Piece.png]][[Image:Folder-yellow.gif]]corpses&lt;br&gt;
[[Image:V-Piece.png]][[Image:V-Piece.png]][[Image:L-Piece.png]][[Image:File.gif]]TDF&lt;br&gt;
[[Image:V-Piece.png]][[Image:L-Piece.png]][[Image:Folder-yellow.gif]]allworlds&lt;br&gt;
[[Image:V-Piece.png]][[Image:blank-Piece.png]][[Image:L-Piece.png]][[Image:File.gif]]TDF&lt;br&gt;
[[Image:T-Piece.png]][[Image:Folder-yellow.gif]]gamedata&lt;br&gt;
[[Image:V-Piece.png]][[Image:T-Piece.png]][[Image:File.gif]]MOVEINFO.TDF&lt;br&gt;
[[Image:V-Piece.png]][[Image:T-Piece.png]][[Image:File.gif]]SIDEDATA.TDF&lt;br&gt;
[[Image:V-Piece.png]][[Image:L-Piece.png]][[Image:File.gif]]SOUND.TDF&lt;br&gt;
[[Image:T-Piece.png]][[Image:Folder-yellow.gif]]guis&lt;br&gt;
[[Image:V-Piece.png]][[Image:L-Piece.png]][[Image:File.gif]]SomeFile.TDF&lt;br&gt;
[[Image:T-Piece.png]][[Image:Folder-yellow.gif]]objects3d&lt;br&gt;
[[Image:V-Piece.png]][[Image:T-Piece.png]][[Image:File.gif]]3DO&lt;br&gt;
[[Image:V-Piece.png]][[Image:L-Piece.png]][[Image:File.gif]]S3O&lt;br&gt;
[[Image:T-Piece.png]][[Image:Folder-yellow.gif]]maps&lt;br&gt;
[[Image:V-Piece.png]][[Image:T-Piece.png]][[Image:File.gif]]MapName.SMF&lt;br&gt;
[[Image:V-Piece.png]][[Image:T-Piece.png]][[Image:File.gif]]MapName.SMD&lt;br&gt;
[[Image:V-Piece.png]][[Image:L-Piece.png]][[Image:File.gif]]MapName.SMT&lt;br&gt;
[[Image:T-Piece.png]][[Image:Folder-yellow.gif]]scripts&lt;br&gt;
[[Image:V-Piece.png]][[Image:T-Piece.png]][[Image:File.gif]]BOS&lt;br&gt;
[[Image:V-Piece.png]][[Image:T-Piece.png]][[Image:File.gif]]COB&lt;br&gt;
[[Image:V-Piece.png]][[Image:L-Piece.png]][[Image:File.gif]]Lua&lt;br&gt;
[[Image:T-Piece.png]][[Image:Folder-yellow.gif]]sidepics&lt;br&gt;
[[Image:V-Piece.png]][[Image:L-Piece.png]][[Image:File.gif]]BMP&lt;br&gt;
[[Image:T-Piece.png]][[Image:Folder-yellow.gif]]sounds&lt;br&gt;
[[Image:V-Piece.png]][[Image:L-Piece.png]][[Image:File.gif]]WAV&lt;br&gt;
[[Image:T-Piece.png]][[Image:Folder-yellow.gif]]unitpics&lt;br&gt;
[[Image:V-Piece.png]][[Image:L-Piece.png]][[Image:File.gif]]Images&lt;br&gt;
[[Image:T-Piece.png]][[Image:Folder-yellow.gif]]unittextures&lt;br&gt;
[[Image:V-Piece.png]][[Image:T-Piece.png]][[Image:File.gif]]Image textures for S3O models&lt;br&gt;
[[Image:V-Piece.png]][[Image:L-Piece.png]][[Image:Folder-yellow.gif]]tatex&lt;br&gt;
[[Image:V-Piece.png]][[Image:blank-Piece.png]][[Image:L-Piece.png]][[Image:File.gif]]Images for 3DO models&lt;br&gt;
[[Image:T-Piece.png]][[Image:Folder-yellow.gif]]units&lt;br&gt;
[[Image:V-Piece.png]][[Image:L-Piece.png]][[Image:File.gif]]UnitNames.FBI&lt;br&gt;
[[Image:L-Piece.png]][[Image:Folder-yellow.gif]]weapons&lt;br&gt;
[[Image:blank-Piece.png]][[Image:L-Piece.png]][[Image:File.gif]]Weapons.TDF&lt;br&gt;



[[Category: FAQ]]</text>
      <sha1>9yf7jl79tzkhw9a8bo6miu2mo229uvb</sha1>
    </revision>
  </page>
  <page>
    <title>FAQ:content</title>
    <ns>0</ns>
    <id>2575</id>
    <revision>
      <id>22514</id>
      <parentid>19643</parentid>
      <timestamp>2011-07-17T18:31:51Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>/* Does Spring support campaigns? */ update links</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4999">{{deprecated}}

=Content=
 
==Do Spring maps need a &quot;ground&quot;?==

Spring maps do require a ground. However, the ground texture can be set to be 'transparent' below 0, allowing a map to look like asteroids lost in space. However, technically the game still plays mostly as a 2D RTS, it is not a true three dimensionnal battlefield.

==You stated that Spring uses the TA unit format.==

Spring does support the Total Annihilation unit format. However, there is also a new format dubbed '.s3o' which uses a UV mapped texture instead of 3do's per face texturing system, as well as other improvements.

==Does Spring have a limited number of weapons?==
No. Unlike Total Annihilation, Spring's weapon IDs are unlimited. Meaning it is possible to add as many third-party units as you want.  However, the current model format limits 16 weapons to each unit. And the texture space is limited, which proved to be the bottleneck for most 'let's add as many old third party TA races into spring' projects.

==Does Spring have a limited number of unique units?==

No. Unit IDs, like weapon IDs, are unlimited.

==Do units have a maximum of 3 unique weapons?==

Total Annihilation had a limitation that permitted a maximum of 3 unique weapons per unit. Spring currently has a way to have 16 weapons per unit. (Replace Primary, Secondary, Tertiary by 1 2 3 ...16). More can be made possible by modifying the source if there's a sufficient demand by mod makers.

==I'm curious as to the per-unit polygon limit.==

The engine itself does not have a polygon count limit. The limit is that of the processing power of today's computers. Since Spring requires a 3D card, the maximum polygon count per unit is many, many times higher than Total Annihilation's; tricounts of &gt;1000 on Peewee equivalents are perfectly viable. This isn't an excuse to waste polies, though!

==Are units able to perform basic terraforming?==

Yes, support for terraforming is possible with [[Lua Scripting]], such as in the [[Complete Annihilation]] mod. Alternatively, all construction units can restore ground, and certain weapons (especially explosive ones) can be used to deform the ground.

==Is tunnel building possible?==

Subterranean areas of any sort is impossible. However, it is possible to heavily deform the ground with explosives... Which is great fun!

==Is the ground's water retention editable?==

No. Water level is always set 0, so pieces of map under 0, whether there started under 0, or that started over 0 then were dug/explosed to under 0, are always filled with water.

==Does Spring have a limit on the number of races?==

Spring has no limit on the total number of sides/races.

==What are the sizes of the biggest and smallest units?==

Static units (buildings, defenses, etc.) have no size limitations in the engine. Technically, neither do mobile units, but units with a footprint larger than 4x4 &quot;squares&quot; (an arbitrary size standard created by Cavedog) might have problems pathfinding.

==What is the maximum possible sea depth?==

For all practical purposes, it is unlimited. The depth values are stored as &quot;float variables&quot;, so it is doubtful that maps would ever be made which even come close to approaching the limit.

==Does Spring support campaigns?==

Basic Map scripting has been implemented, using a Lua scripting engine. From that, it would be possible to make a basic campaign, but for ease of use a better way of selecting scripts and an improved Single player menu is needed.

==How big are the Spring files?==

Spring is as small as however much content is included with it. The &quot;essential&quot; files are only several megabytes large. Content (such units and mostly, maps) add considerable size to the Spring download. Currently, the file size is roughly 30 MB.

==How does Spring render sound effects?==

Sound is rendered 3D, meaning that the volume and direction (assuming a multi-speaker setup) vary with the location of the camera from the sound &quot;emitter&quot;. What this translates into gameplay terms means that the closer you are to a unit making a sound or motion, the louder the sound is. Additionally, the sound is heard differently depending on which way the camera is facing relative to units making sound.

==Does Spring have ambient sound?==

There is no ambient sound, and we haven't planned on adding it thus far.

==Is there an AI or a &quot;skirmish&quot; mode?==

We have created an interface for artificial intelligences (AIs), and several have been developed. Information on these can be found at the [[AIs]] wiki page.

==Is a &quot;possess&quot; or a FPS option present?==

Yes, it is possible to fully control a unit from the first person view. It is more of a gimmick, but it still allows for a nice diversion once in a while. Press 'C' to toggle &quot;First Person Shooter Mode&quot;.

==How do I create maps?==

See the [[Map development]] page for all the map info.

==How do I create units/mods?==

See the [[Mod_and_Unit_development#Mod_devlopement|Mod and Unit development]] page on creating units/ mods.</text>
      <sha1>ktcrow4gjyy49eczxn6a7x1cwepj6hi</sha1>
    </revision>
  </page>
  <page>
    <title>FAQ:general</title>
    <ns>0</ns>
    <id>2568</id>
    <revision>
      <id>30035</id>
      <parentid>29091</parentid>
      <timestamp>2016-06-07T15:09:02Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>/* I want to donate. */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2287">[[Category:FAQ]]

=General information FAQ=

Here are general questions asked about spring and their answers

==What is Spring?==
Spring is a project to create the best RTS engine ever (no joke). There are three principle goals which we hope to achieve.

# Build a flexible and powerful 3D RTS engine that can handle large numbers of units and state-of-the-art special effects and animation.
# Support new games and maps with powerful built-in Lua language support that allows game designers to realize their goals and develop better and better games.
# Support end-users, fix bugs and provide the best support we can.

==Is Spring free?==
The core game is released under GPL License.  It is 100% free to download and use.  [[Games]] may have any license the developers wish.

==How can i play a game?==

please look at the [[Read_Me_First|readme]] page.

==Playing on a LAN==
See the dedicated page [[Spring_on_a_LAN|Playing on a lan]].

==Why can I edit this page?==
This page, and several others, are located in the Spring [http://en.wikipedia.org/wiki/Wiki Wiki]. The link gives a full explanation of what it is, but in short it is a way of letting anyone who wants to contribute to the page content. This can of course be abused, but even while it is easy for someone to vandalize the page, it is just as easy for someone to restore it, since the wiki saves all previous versions of a page.

==Why can't I edit this page?==
You need to be [[Special:Userlogin|logged in]] to edit our wiki because people were vandalizing and/or being morons too much, so we had to lock it down.

==I want to help, what can I do?==
Please look in the Forums. There are lots of things you can do according to your skills. These range from artistic development through to hard coding components. We are always looking for new fresh ideas. Avoid old stale ones found in the [[Monthly_Topic_Rotation]].

==I want to donate.==

Atm direct financial cost associated with the Spring project involves running main server. It hosts many different domains and projects including:
 * [http://springrts.com springrts.com] itself and lobby server
 * buildbot master, the buildslaves (which are doing the work) are hosted by some spring supporters
 * autohosts and relayhosts
See the [[Donations]]-Page for details.</text>
      <sha1>jysympyjjecc1tg26zpp42sj60qmbac</sha1>
    </revision>
  </page>
  <page>
    <title>FAQ:getting a game started</title>
    <ns>0</ns>
    <id>2572</id>
    <revision>
      <id>26622</id>
      <parentid>21850</parentid>
      <timestamp>2013-03-19T21:58:31Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>/* What do all those icons mean in the server list? */ wanted link</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4986">=Getting into a game=

==People talk about 'Single Player'. How do I start a single player game?==
'''See if the games homepage has instructions on how single player works for this game.''' 

Otherwise simply start a game in the lobby, and enter a password, so that nobody can join. Then click ready, and start and away you go!

Alternatively, you can get [http://spring-portal.com/index.php/docman/doc_download/232-springsp-v09 Spring Single Player] (new link) , a handy tool that lets you create single player games without cluttering up the lobby, as well as watch replays easily.

It's also very easy to set up singleplayer games using SpringLobby. Just click on the singleplayer tab, add some bots, and play. You can grab it from the  [http://springlobby.info SpringLobby website].

==When I try to make a single player game, it gives me an error.==

See if the games homepage has instruction on how single player works for this game.

Read [[Bugs]] and ask for help in forum.

==Does Spring support AI Players?==

Yes, see [[AI:Skirmish]]

==How do I join an Internet multiplayer game?==

Run one of the installed multiplayer lobbies from the Start menu or from your installation folder.

==When I try to connect to the lobby it gives me an error.==

There could be 3 problems. Either you don't have an account, the server is down, or you have not configured your router/firewall correctly. If you don't have an account, make one. If the server is down, you'll just have to wait (this doesn't happen often, though). If you have a router/firewall read below. Have a look at this website's News page and/or the Messageboard, it is likely that you will get some information there in the eventuality that the server is down.

Also make sure that you don't have any spaces in your username.

==I have a router and I don't seem to be able to get a game==

If you are using a router you may have other problems. Explanations of [http://www.portforward.com/routers.htm how to forward ports] has instructions for every router.

==Where can I download more maps?==

Please refer to the [[Maps| Maps section]].

==How do I install downloaded maps?==

http://springrts.com/wiki/Maps#Install_maps

==Sometimes when I try to join games it gives me a countdown and the game does not start.==

The host is behind a firewall that has not opened the correct ports for Spring.

==When a multiplayer game starts I never make it past the loading screen.==

This indicates a problem with your video card. Once again the best way to deal with this situation is to make sure your video card has the latest driver updates and that all Spring video features are on the lowest settings.

==When a multiplayer game starts, I make it past the loading screen, but when I get into the game it says, &quot;Waiting for Host&quot;, and does a 10 second countdown. It always reaches zero and boots me out, what gives?==

This is a firewall issue. There are three things you can do to fix this. First, make sure your windows firewall is either off, or is not blocking the TA: Spring application. Secondly, if you are behind a router, you can forward the ports that the host is using (especially if you are the host), and it usually fixes the problem. To do this you must go to your router configuration page. You can see what port 'you' are using (as the host), by hosting a multiplayer game in the Spring Lobby. You must make this your trigger port, and make sure that it is open for both TCP and UDP. Thirdly, if none of the aforementioned worked. The easiest thing to do (assuming you are behind a router) is to set the DMZ (Demilitarized Zone). This means your computer will be completely exposed to the internet, which will make you vulnerable to any unknown or unpatched exploits in windows. All you have to do is find the personal IP if the computer you are using and add it to your router's DMZ list. Please only try this last option if you can't get the others to work.
Good Luck

==I got into the game, but some people didn't.==

The host may have reached the number of players it has set.
Or the players may be experiencing firewall or video card difficulty. That is not your fault. Please ask them too leave if they are still there when you get into the 'game lobby'. Some people have problem connecting to &quot;hole punching&quot; hosts.

==I got into a game but my name is red, nobody can hear me speak, and eventually I get disconnected==

This is to do with how long it takes the game to start up (the &quot;load time&quot;). If it takes too long you will see this problem. The load time can be reduced by changing the game graphics settings to lower quality. In particular try setting texture quality to lowest.

==What do all those icons mean in the server list?==

Server status icons inform you, at a quick glance, what the server is doing at the moment, and what state it's in (password protected, locked, open, full, etc). Hit F1 in the Battle room for even more information on the icons and their meaning.
[[Category:FAQ]]</text>
      <sha1>clweqpgqnusinm7vnvmxdfv8onhp5mi</sha1>
    </revision>
  </page>
  <page>
    <title>FAQ:player</title>
    <ns>0</ns>
    <id>2573</id>
    <revision>
      <id>23083</id>
      <parentid>22797</parentid>
      <timestamp>2011-12-31T14:10:04Z</timestamp>
      <contributor>
        <username>Knorke</username>
        <id>833</id>
      </contributor>
      <comment>small fixes</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9844">[[Category:FAQ]]

This FAQ includes answers on questions every newbie is facing during gameplay. Feel free to update it by yourself if you solved the problem not mentioned below. Help new players!


=General=
==After I'm finished driving a unit, where what used to be my mouse pointer is now a crosshair. Why?==

: This is a special 'view mode' that allows you to move around the screen much faster. It's good for viewing the battle or getting screenshots. Simply press on your third mouse button (usually the wheel) or 'backspace' to revert back to your mouse pointer.

==People are cheating! How do I stop it?!==

: Well currently, you can't.

: Only the host can &quot;activate&quot; the cheat codes. After that, any player can do almost all cheats.

: The best thing to do is just not play with the cheaters anymore.

==Well how do you cheat?==

&lt;table border=&quot;3&quot; cellpadding=&quot;2&quot; cellspacing=&quot;0&quot;&gt;
 &lt;tr&gt;&lt;th&gt;Cheat Command&lt;/th&gt;&lt;th&gt;Effect&lt;/th&gt;&lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;/cheat&lt;/td&gt;&lt;td&gt;Enable cheats (note: cheats don't work in multiplayer until the host types this)&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;/nocost&lt;/td&gt;&lt;td&gt;Instabuild (doesn't work on things already under construction, only on new ones)&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;/globallos&lt;/td&gt;&lt;td&gt;Allows you to see the entire map. &lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;/team 0, /team 1, etc.&lt;/td&gt;&lt;td&gt;Change player&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;/give ARMCOM, /give 10 CORKROG, etc.&lt;/td&gt;&lt;td&gt;Place 1 or specified number of specified unit.  Valid units are the internal names of units as specified in the unit definition.&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

: You can use auto-completion in the spring console if you don't remember the internal unit name. To do that type: 
 &quot;/give arm&quot; and then press your '''TAB key''' 
: A list of all matching units will be shown.

==This game is different than TA, the units HP and damage are not the same==

: First off, Spring is not TA. Spring is an engine, on which various games can be run, some of which are modifications of TA content.
: The games most closet to TA are:
:* [[XTA]]
:* [[Balanced_Annihilation]]
Some other games tried to reproduce TA gameplay more closely but are abandoned and no longer playable:
:* [[BOTA|Basically OTA]]
:* [http://spring.clan-sy.com/phpbb/viewtopic.php?f=14&amp;t=14613 Hardcore Annihilation]
: Other [[Games]] have no connection to TA content or the TA universe.

==XTA? OTA? AA? OMFGLAMO? WTF do those abbreviations mean?==

: [http://spring.clan-sy.com/phpbb/memberlist.php?mode=viewprofile&amp;u=145 zwzsg] maintains a handy dandy FAQ about TA, and the abbreviations that relate to Spring too, of course. [http://www.tauniverse.com/forum/showthread.php?t=27309 Click here].

==How do I ally or unally in game?==

: Type /ally &lt;teamID&gt; [0|1] (this only works if the host allows changing allies midgame).

==Is there a way that I can play music directly through Spring, with alternating tracks for building/attacking like in the original Total Annihilation?==

:Some games have music. I do not know if it is the music from TA. This is a stupid question.

==How can I record and watch demos/replays?==
See [[Spring_Replays|replays]].

== How can I run Spring in windowed mode? ==

: Open [[SpringSettings]] application, turn on Expert mode, select &quot;Render quality / Video mode&quot; page, uncheck &quot;Run full-screen&quot; checkbox and finally save your settings.

== Where can I see the time I played online? ==
: Open any lobby client, connect to the TAServer, switch to chat, select appropriate channel (for TASClient it is #local, for SpringLobby it is &quot;Official Server&quot;) and type '''/ingame''' into the chat. The result will be in minutes.
: [http://spring.clan-sy.com/phpbb/viewtopic.php?f=11&amp;t=17732 Discuss this issue].

== Can I run unpacked mod? ==
: Yes, you can. Make sure your unpacked folder name ends with '''.sdd'''.

=Control=
==What is with this weird right-click mode? I'm 'bout to break my keyboard.==

: Sorry, you'll just have to get used to it. As of now it can't be changed.

==Why is somebody else also controlling my units?==

: In the 'game lobby' there are two sets of teams. There are the 'Ids' and the 'teams'. If you are on the same 'Id', then you both get the same commander, and can control the same units (commonly referred to as comsharing). If you are on the same 'Team', then you both get different commanders and can't control each others units.

==Then why would I want to be on the same 'Id' as somebody?==

: Because it's fun to just drive around units and not have to worry about commanding (assuming that one of the people on the team is commanding). Most importantly, however, you can split tasks, such as base building, and troops management.

==But I don't have a third mouse button!==

: The key 'J' works in the same way as the 'middle mouse button' does. So where you would use ctrl + middle mouse button to change camera modes, ctrl + j does the same thing. Pressing J once will also switch you from 'crosshair mode' to 'pointer mode' and vice versa.
: Just use ctrl+F1/F2/F3/F4 to change camera mode.

==In-game Commands==

See [[UI_commands]]

==Can I kick people from my 'game lobby' or my game?==

: First of all, you have to be the host to kick. Use the good old &quot;/kick playernamehere&quot; command. Works in-game too, use it wisely.

==I hate driving around with the 'arrow keys'. Is there any way I can use the 'W-A-S-D' controls (the controls most First Person Shooters use) anymore?==

: Go into your Spring directory and edit the uikeys file. Keep in mind that 'S' is originally a 'hot-key' that will stop your units and that 'D' is a 'hot-key' for your commander's D-Gun. You might want to change those too.

==I can't go backwards when I am 'driving' a unit. Why not?==

: Only works with some units in some games.

==I'm in an Unreal Tournament kind of mood. How do I strafe?==

: You can only strafe in 'brawler type' aircraft, such as the brawler, rapier, and light gunships.

== Can I invert the mousewheel behaviour to make normal zoom control? ==

: You have to set a negative zoom value. There are 2 choices for you:
:# Set the value by using [[SpringSettings]] tool (UI Options tab &gt; Zoom). 
:# Directly edit [[springrc]] &amp; adjust '''ScrollWheelSpeed''' value.
: [http://spring.clan-sy.com/phpbb/viewtopic.php?f=11&amp;t=8030 Discuss this issue].

== Can i change Ctrl+Z behaviour to select visible units on the screen only, not of the hole map? ==
: Double click on a unit or adjust the desired behaviour by using SelectionEditor.exe tool at Spring root folder. 
: [http://springrts.com/phpbb/viewtopic.php?f=11&amp;t=17646 Discuss this issue].

== How can I add map markers and lines during a game? ==
: On US keyboards, its the key to the left of the &quot;1&quot; key on your keyboard (known as ''tilde''). Hold it down and draw with you left mouse button, or double click to add a marker with text. On other keyboards this may vary, on Swiss one it's the key to the left of backspace for example.

== How can I rotate buildings? ==
: Use the [ and ] keys.

== How can I customize mouse button click behaviour managing the minimap? ==
: You have rather limited possibilities by now. Please, visit [http://springrts.com/phpbb/viewtopic.php?f=1&amp;t=8096 this thread] for info.

=Communication &amp; Interchange=
==How do I talk to my allies only?==

: You must type 'a:' before you speak, or press &quot;Alt Enter&quot; at the same time. Here's an example: a: Now I am talking to my allies only.

==How do I give somebody units or metal or energy?==

: Press the 'H' key. Then select the amount of metal and/or energy to share. Then select the receiving player and press OK.

: When sharing units, you must first select the units to share, then press 'H' key. Tick share units checkbox and choose a receiving player.

==How do I continually give somebody metal and/or energy after a certain point (i.e. Original TA commands +setshare..., +shareall)?==

: You'll notice that on your metal and energy bars (top of screen), there are two red bars. You have to put them wherever you want your metal and energy to be shared after.


=Troubleshooting=
==Sometimes I can't write anything but numbers and some other symbols. Why is that?==

: This is most likely because of the Windows language bar change from which &lt;br&gt;Spring doesn't recognize the characters written. 
: Note that Default hotkeys in Windows XP for changing the language is Shift+Alt, which is similar to square build hotkeys in Spring!

==Help! After I'm finished driving a unit, the camera is all insane! This is nuts! How do I fix it?==

: Whoa now. Calm down. Just press ctrl + mouse button 3 to change camera modes.  If your unit is destroyed in FPS mode, you will stay in FPS mode until you change camera modes.  Also, the camera will stay in &quot;free look&quot; when FPS mode is disengaged, press middle-mouse or J to switch to normal scrolling.

==I've managed to get stuck in this weird camera mode and my perspective is all messed up. How do I switch to the overhead (OTA style) camera?==

: Shift+Backspace (or Shift+J or Shift+MiddleMouseClick) switches between the fps style, total war style and OTA style cameras. Use it to get your camera back to normal in this situation.

==I turned the shadows feature on; I still don't see shadows. What gives?==

: Try to enable ''Reflective units'' option in [[SpringSettings]]. If it does not work for you, then, probably, your graphics card can't handle shadows, so Spring automatically turns them off.

==Sometimes when I play get &quot;not sync&quot; &quot;delayed sync&quot; errors==

: That's caused because of lag. One of the players in the game is having some lag issues. Ask him/her to free up its bandwidth for the game to use.

: Alternatively, you can use the pause key and wait till the connection gets more stable.

: Ping is the second number showed when you use the /info command ingame, values larger than ~1000ms are not usual in a normal game and are a signal of lag.</text>
      <sha1>qf87o9l8n4humb9n03hzgitjfyxbkp3</sha1>
    </revision>
  </page>
  <page>
    <title>FAQ:requirements</title>
    <ns>0</ns>
    <id>2571</id>
    <revision>
      <id>21243</id>
      <parentid>21238</parentid>
      <timestamp>2011-02-21T15:32:34Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3023">{{deprecated|This page is outdated, either look at the [[FAQ]] or the [[Requirements]] page for up to date info}}

=Requirements=

==What platforms will Spring run on?==
At the moment, it runs on Windows, Linux, FreeBSD and basically on [[Spring_on_MacOSX |Mac OS X]].

==What sort of a system do I need to run Spring?==
You need a 3D graphics card to run Spring. Anything better or equal to a GeForce4 MX should work. It is also '''Strongly Recommended''' that you update your drivers to the latest versions. Spring needs at least a SSE capable CPU, a more powerfull CPU can support larger maps and a greater maximum unit limit. A 1 GHz CPU should be able to support an estimated 500 units. You should also have at least 512 MB RAM.
For further details and tested Systems check the [[Requirements]] page.

==Spring says 'Missing Default Cursor'==
That means you are playing a mod or 'game content' that depends on files you do not have. Most of times, it's due to trying to play a TA mod without having the TA base files (/base/otacontent.sdz, /base/tacontent_v2.sdz, /base/tatextures_v062.sdz). You can download them from [http://springrts.com/dl/installer/base/ here] (After download, move them to the /base/ subfolder of your Spring folder). However, that would be illegal if you do not own the disc from a ten years old video game called Total Annihilation. Pretty sure it's illegal if you own it too {Stupid Corporations}. And don't even try to dump genuine TA data in your Spring folder, that won't work. To remain legal, play mod / 'game content' that do not depend on repacked TA contents.

==I need the GL_ARB_texture_env_combine extension==
This error can be caused by various things:
#Old video Hardware.
#Old drivers.
#Bad installed Drivers.
#Bad game settings.

If your hardware is old check [http://www.delphi3d.net/hardware/extsupport.php?extension=GL_ARB_texture_env_combine THIS] ([http://web.archive.org/web/20070627091726/http://www.delphi3d.net/hardware/extsupport.php?extension=GL_ARB_texture_env_combine alternative Link]) list, if you cant find your video card then, sorry, you have to buy a new video card.

If your hardware is in the above list or you are sure that your video card support this opengl extension download [http://www.realtech-vr.com/glview/download.html THIS] software. Intall, run, and check if under the ''Report'' tab there is the ''GL_ARB_texture_env_combine'' string.
If the string is present then the problem resides in your Spring settings, try lower screen resolution and disable all graphics effect.
If the string is not present and your hardware is in the list the problem are your video card drivers. To solve this '''UNINSTALL ALL PREVIOUS DRIVERS''' and install last stable drivers for your video card. Usually the problem shows when there are uninstalled old video drivers on the system.

'''NOTE:''' Use '''glxinfo''' on a Linux system. You don't need to download any third party application because most if not all systems with x11 should have that program already.</text>
      <sha1>jivd1nsgbitakiuedrr5aqi47y0ol2o</sha1>
    </revision>
  </page>
  <page>
    <title>FAQ:technical</title>
    <ns>0</ns>
    <id>2570</id>
    <revision>
      <id>29833</id>
      <parentid>29832</parentid>
      <timestamp>2016-01-21T23:43:29Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>/* Why doesn't the spring engine use all my cpu cores? */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2660">[[Category:FAQ]]

=Technical FAQ=

==What port numbers does Spring use?==
Game uses port 8452 UDP by default, which can be changed in the lobby. If you are behind a router, and are having problems hosting, try forwarding the correct port and also make sure the firewall is not blocking it.

==What APIs does Spring use?==
Spring uses OpenGL for graphics and OpenAL for sound. Also SDL is used for input and some other stuff.

==What language is Spring written in?==
The Spring game engine is mostly written in C++. TASClient is written in Delphi, SpringLS in Java, SpringLobby in C++. Widgets and Gadgets are written in Lua. Skirmish AIs can be written in Lua, C, C++, Java VM languages and Python.

==Is Spring open source?==
Yes, it is. Go to the [[Download|downloads]] section of the site to download the source code.

==Is there any documentation for the source code?==
Doxygen is used to generate the documentation of springs' source code. An [https://springrts.com/dl/buildbot/doc/ up to date documentation] is generated from the ''develop'' branch. To generate the documentation yourself, install DoxyGen and run &quot;doxygen&quot; from within the spring source directory.

==Is Spring a Portable Application?==

Yes, spring can be run from any big-enough portable storage device.
Sometimes config files and content files are saved god knows where ie in &quot;my documents&quot;

==Is there an alternative way to connect to the lobby server?==

Yes, using the [[IrcBridge | IRC-Bridge]] through an [http://en.wikipedia.org/wiki/Internet_Relay_Chat#Clients IRC client]. Keep in mind though, that this is not officially supported, and no guarantee is given for the reliability of this service.

==What do the spring version parts mean?==

See [[EngineVersion#Parts]].

== Why doesn't the spring engine use all my cpu cores?==

Multi-threading is not an issue, it's software behaviour.

Examples of issues:
  1) Graphic glitches
  2) Bad performance

Examples of possible solutions (respectively):
  1) A dev with an AMD card who knows what they're doing
  2) Reducing cache misses (responsible for a significant portion of the speedup in 100.0)

Examples of sexy terms which sound like solutions but are probably more trouble than gain (in most cases):
  1) Multi-threading


From now on we'd recommend refraining from saying:

    Spring should be more multithreaded


As this is not only wrong but useless and annoying.

Instead you can say things like:

    Spring is slow for me and I'd like it to be faster


Which may or may not make a difference, but it will definitely make you look less foolish.

(see https://springrts.com/phpbb/viewtopic.php?f=1&amp;t=33908#p573296 )</text>
      <sha1>ofj9xzdw9cbb4gvpw36eu6086rqcmfi</sha1>
    </revision>
  </page>
  <page>
    <title>FAQ:trouble</title>
    <ns>0</ns>
    <id>2783</id>
    <revision>
      <id>31461</id>
      <parentid>31459</parentid>
      <timestamp>2021-02-07T20:58:42Z</timestamp>
      <contributor>
        <username>Masterbel</username>
        <id>2937</id>
      </contributor>
      <comment>Add fix for repeating tile bug</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11617">[[Category:FAQ]]

=Troubleshooting=


==Network==

===My buddy can not connect to a game I've opened. What can we do?===
The engine uses UDP port 8452 by default, which can be changed in the lobby. If you are behind a router, and are having problems hosting, try forwarding the correct port and also make sure the firewall is not blocking it. If you do not know what a port or a firewall is, use a relay host instead: when hosting a game, tick the check-box labeled &quot;Use relayhost&quot;.

===I can not connect to the online lobby server?===
See in the [http://springrts.com/phpbb/index.php forum] if others have the same problem.

The server might be temporary down for maintenance.
Most lobbies should allow you to connect to a &quot;backup server&quot; or just try again after some time.

==Graphics==

===Map texture repeating across the map in squares===
[[File:Screenshot Spring Squares of Doom.jpg|200px]]

Try adding &lt;code&gt;UsePBO = 0&lt;/code&gt; to your springsettings.cfg.

===Low fps that get better in metalview (F4)===
Try typing into ingame chat:

''/advmapshading 0

/advmodelshading 0''

And/Or add to springsettings.cfg:

''AdvMapShading = 0

AdvUnitShading = 0''

(usually the AdvMapShading part is enough)

===I am having really bad framerates (fps) on my dual core! What am I doing wrong?===
Some of this helped other users:

* This error is sometimes reported by people having multicore-CPUs. To solve this, you could try to restrict it to run on one core. Enable &quot;SetCoreAffinity=1&quot; in your [[springrc]].
* Installing the latest processor drivers and Windows hotfixes for your system may also help.
* Also try to disabling the &quot;Exhaust&quot; effect on planes could help: Press f11 while ingame, disable LUPS and Lups manager (by clicking on them to make them turn red)

===How to Alt-Tab out of full-screen on Linux?===
Play windowed with ''/grabinput'', or [http://springrts.com/phpbb/viewtopic.php?p=449972#p449972 use devilspie].

===I use Linux with Open-Source Gfx drivers, and the map is all white!===
[[File:Whitemap.png|200px]] 

Due to patents S3TC texture support is disabled by default. To enable it you need the tool driconf (note, you no longer require libdxtn):

&lt;code&gt;&lt;pre&gt;
$ sudo apt-get install libgl1-mesa-dev driconf
$ driconf
&lt;/pre&gt;&lt;/code&gt;

On the &quot;Image Quality&quot; tab activate &quot;Enable S3TC texture compression even if software support is not available&quot;.

Related forum threads:
* [http://springrts.com/phpbb/viewtopic.php?f=20&amp;t=20809 Spring on Intel or ATI 'open-source' drivers]

===It crashes, hangs, ...===
Possible fixes are: 
* updating your graphics driver
* lowering the graphic-settings at SpringSettings
* disabling graphics effects at SpringSettings


=== Spring crashes on my notebook but it has a really nice graphic card! (or some effects are messed up) ===
for example air plane trails might look like:

[[File: Bugged_plane_trails_graphics.jpg]]

Some notebooks have two graphic cards: One for 3D and a small integrated one to save power while on facebook.
Setting it to use the correct 3D card has helped some players.
Use the internet to find out how to do that.
Screenhot of such controll panel, though it might look different on different computers:

[[File: Graphic_cards_selection.png]]

===Nvidia===

====I am having really bad framerates (FPS)!====
Turn off 'threaded optimizations' for Spring in the nVidia control panel, enable &quot;Compress textures&quot; in SpringSettings.

[[File:MToptimizations.png|200px]]

====After playing Spring, in background running firefox window is white or gray. ====

Disable Anti-Aliasing / decrease graphic-quality (&lt;=high) in SpringSettings.

====Shadows on Units doesn't work====
[[File:Shadows_fail.jpg|200px]]

Check if Shadows and AdvUnitShading is enabled, update your graphics driver.

====It crashes/hangs====

* try disabling shadows (SpringSettings)
* try disabling advanced map shading (AdvMapShading=0)

===Intel===

====Why does spring hang for a few seconds?====
This bug occurs on maps like FolsomDamDeluxeV2, Tangerline. FPS suddenly drops to 1 and game runs very slowly. This seems to be an Intel driver bug. For Windows Vista/7 try updating driver up to 8.15.10.2246 or newer. For Windows XP there is no solution yet.

Related forum threads:
* [http://springrts.com/phpbb/viewtopic.php?f=11&amp;t=23541 Intel HD Graphics Driver issue?]
* [http://springrts.com/phpbb/viewtopic.php?f=11&amp;t=23081 Performance issues on Intel X4500]

====Fonts are unreadable====
[[File:IntelBorkedFonts.png|200px]]

This is a driver bug, try to update/downgrade your driver.

====It crashes, hangs etc...====
Possible fixes are:
* disabling texture-compression at SpringSettings
* disabling reflective units at SpringSettings
* disable ReflectiveWater
* [http://downloadcenter.intel.com/ updating your driver]
* use linux! (yes, this hint sucks, but the open-source-drivers seems to work better...)

===ATI/AMD===
First of all, if you encourage a graphics related problem on ATI/AMD graphic device update your drivers to the latest version [http://support.amd.com/us/gpudownload/Pages/index.aspx ATI/AMD dowload].

==== I've got the most recent drivers and the game crashes in atioglxx.dll====
As of Spring 0.80.5, use only basic or dynamic water. Bump water with disabled shore waves should also work. Reflective or refractive water will make the game crash after 15-20 minutes due to a memory leak.

Spring 0.81.2 and/or Catalyst 10.2 drivers or newer should fix this problem.

if the game crashes immediatly after the loading screen is finished (&quot;Finalizing&quot;) in the Zero-K or Gundam mods and the video card is based on the RV670 GPU (some models of: 3690, 3850, 3870, 4570, 4730, 3730, 3610, 4580, 4750, 3750, 2600 XT/PRO, 3830) Catalyst 8.12 drivers may fix it (windows xp 32-bit, possibly other NT5-based 32-bit platforms), however even with that driver there may still be a crash (not immediatly after the loading screen, as soon as the simulations starts) in Annihilation-based mods that use RED UI, the same lua-based atioglxx.dll crash also happens with the 1944 mod.

also note that later versions of Catalyst drivers for these cards reduce performance in OpenGL applications (windows xp 32-bit, possibly other NT5-based 32-bit platforms) (found at least in: spring, quake3 and Nexuiz), for spring the most significant drop (by ~15%) appears in 9.10 and higher Catalyst versions (more than 15%), if you have one of the lower-performing models of these and don't use shadows you may want to try the Catalyst 8.3 and 8.4 drivers (they do not support shadows but should work ~5% faster compared to 8.12) but those drivers may be less stable

====I've got a notebook and official ATI/AMD drivers refuse to install, what to do?====
First of all, make sure you're installing the 'AMD Mobility Radeon' driver pack branch.
Use [http://www.driverheaven.net/modtool.php ATI Mobility Modder] or unofficial drivers - DNA or Omega. Use [http://google.com Google] or get them from [http://downloads.guru3d.com/Videocards----ATI-Catalyst-(Modified)_c24.html guru3d].

====UI disapears after 5-10 mins of play on old ATI videocards====
In cmdcolors.txt, simply comment out or remove the following lines:
 stipplePattern 0xffcc
 stippleFactor 1
 stippleSpeed 1.0
The problem detected on:
* ATI Radeon X3200 with latest drivers ([http://springrts.com/phpbb/viewtopic.php?f=11&amp;t=20817 ref])
* ATI Radeon 9500 with Omega drivers 3.8.442 ([http://springrts.com/phpbb/viewtopic.php?f=11&amp;t=23526 ref])

====I see the complete screen full of red/green/yellow or giant dots on minimap====

[[File:Redui-minimap-bug.pngâ€Ž|200px]]

This is a bug somewhere in LUA drawing with ATI/AMD. Disable widgets that draw via F11 menu to find the one. There is no real fix. A Widget causing this is &quot;Red UI Minimap&quot;, &quot;Highlight Units&quot; or &quot;Chili Minimap&quot;. Setting &quot;Max nano simultaneous particles&quot; (SpringSettings) seems to help, too.

====I see big green rectagle on minimap====
[[File:AMD-Minimap-green_rectangle-bug.png|200px]]

Try to set [[Springsettings.cfg#MiniMapDrawProjectiles|MiniMapDrawProjectiles]] in Spring settings to 0. 

====The textures looks scary====
[[File:Ati-drawing-issues.jpg|200px]]

This is a known ATI/AMD-bug. Try using different driver, preferably other than 10.5, 10.6, 10.7 -&gt; newer driver pack with fixed OpenGL driver should be fine.

====Units are almost invisible, except for same black pieces====
For example on Radeon X1300/X1550 Series.

[[File:InvisibleUnitBug_Radeon_X1300X1550AdvUnitShading.jpg]]

Set [[Springsettings.cfg#AdvUnitShading]] = 0

====It crashes always at start, hangs etc...====
Check [[infolog.txt]], as it mostly contains hints whats the cause for the crash.
Possible fixes are:
* try the [[springsettings.cfg#Safemode|safemode]] / set [[springsettings.cfg]] safemode values.
* updating or even downgrading [http://support.amd.com/ ATI driver]

==Sound==

===The Sound is crackling/pausing in Windows, what can i do?===
Try:
* Update the sounds driver
* Enable SystemSoundsService in Vista/Seven

===I am having sound problems under Linux! What can i do?===
In more then 90% of the cases, this is caused by PulseAudio. If this is the problem, there are three known solutions to solve it. Use one of them.

====disable sound effects====
Make sure you have the OpenAL-Soft configuration utility. You might want to run:

&lt;code&gt;&lt;pre&gt;
# install
sudo apt-get install alsoft-conf
# run
alsoft-conf
&lt;/pre&gt;&lt;/code&gt;

If you're not on a debian-based distribution, you can download the source from the project's homepage: http://www.anduin.net/~angasule/?x=entry:entry091211-133213. You can also check if there's a newer version.
&lt;code&gt;&lt;pre&gt;
#download
wget http://www.anduin.net/~angasule/fp-content/attachs/alsoft-conf_1.4.3.tar.gz
#extract
tar xvf alsoft-conf_1.4.3.tar.gz
cd alsoft-conf-1.4.3
#compile
cmake .
make
#run
./alsoft-conf
&lt;/pre&gt;&lt;/code&gt;

In the &quot;Effects&quot; tab remove everything from &quot;Allowed effects&quot;.

====disable non-ALSA (preferred)====
run alsoft-conf (for installation see above)

In the &quot;backend&quot; tab, keep only &quot;ALSA&quot; on the left column, then save. Done!

''Side Note:'' ALSA is redirected to the PulseAudio layer when installed.

==Misc==

===Middle mouse button does not work ingame===

If you use Logitech Setpoint be aware that it sets your middle mouse button by default to 'Autoscroll'. It should be set to 'Middle button' instead. Change the setting in Setpoint.

===Spring crashes after Error opening cache\ ... in infolog.txt===

   [f=0000000] Reading Estimate PathCosts [8]
   [f=0000000] Error opening cache\paths\...

this is a known bug in 0.82.7.1. Your cpu also has many cores?
Then try to set HardwareThreadCount=2&quot; in [[springrc]]. Spring tries to create the PathCache with to many threads in parallel and crashes because out of memory.

===I have a problem that is not described here! What can i do?===
There is a number of things you can do, among these are:
* Search in the [http://springrts.com/phpbb/viewforum.php?f=11 Help &amp; Bugs Forum], and ask if you can not find a suiting topic.
* Check the games forum or homepage.
* Look at the [[Gentoo_install#Linux_specific_Troubleshooting|Linux only FAQ]].
* Ask for help in the lobby in a suiting channel, eg: #springlobby, #de, #fr, #ai, #main
* Ask the FAQ-Bot in the lobby in channel #springlobby. To get a list of topics, write ''!faqlist'' and then use ''!faq &lt;topic-name&gt;'' to get the help text. For example, try ''!faq rename''.

===The ingame chat spams a lot of cryptic error messages===
This is most likely a problem with the game's Lua scripting.
Report it in the games forum or its bug tracker.
[[Bugs|Here]] are some hints how to so.</text>
      <sha1>jy7sd9nd11chbi5hdewah8hyq0gcil5</sha1>
    </revision>
  </page>
  <page>
    <title>FAQs</title>
    <ns>0</ns>
    <id>2641</id>
    <revision>
      <id>21241</id>
      <parentid>20836</parentid>
      <timestamp>2011-02-21T15:31:12Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="528">'''[[FAQ:general|General FAQ]]'''
  An FAQ containing generic questions about spring and the project itself


'''[[FAQ:technical|Technical FAQ]]'''
  An FAQ on some common issues


'''[[FAQ:player|Playing ingame FAQ]]'''
  An FAQ with questions about the ingame GUI and playing with the spring engine


'''[[FAQ:trouble|Troubleshooting FAQ]]'''
  An FAQ with workarounds for crashes caused by bugs of not directly spring related problems (eg hardware failure or driver bugs)


'''[[FAQ|&lt;- Back to Help page]]'''
[[Category:FAQ]]</text>
      <sha1>q98csjych7zw3oscf49qnujgi6575no</sha1>
    </revision>
  </page>
  <page>
    <title>Factory scripts</title>
    <ns>0</ns>
    <id>3338</id>
    <revision>
      <id>26356</id>
      <parentid>25384</parentid>
      <timestamp>2013-03-08T16:16:01Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>[[Category:Emmanuel]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1368">&lt;big&gt;FACTORY SCRIPT&lt;/big&gt;
:&lt;sub&gt;Factory are totally diferent synthax from mobile builder due to engine design:&lt;/sub&gt;

==Basic code==
&lt;code&gt;
:local pad = piece &quot;pad&quot; --piece where the unit build is landed 
:local nano = piece &quot;nano&quot; --piece where the nano particule come from
:function script.QueryBuildInfo ( ) return pad end
:function script.QueryNanoPiece ( ) return nano end
:function script.Activate()
:StartThread( product )
:end

:function product()
:Signal(1)
:SetSignalMask(1)
:SetUnitValue ( 19,1)--ask evacuate area
:SetUnitValue ( 18,1)--switch the UnitDef Yardmap to open
:SetUnitValue ( 5,1)--start nano
:return 1
:end

:function script.Deactivate() 
:StartThread( endproduct )
:end

:function endproduct()
:Signal(1)
:SetSignalMask(1)
:SetUnitValue ( 5,0)--end nano
:SetUnitValue ( 18,0)--switch the UnitDef Yardmap to close
:SetUnitValue ( 19,0)--stop to ask evacuate area
:return 0
:end

&lt;/code&gt;
note: if the pad piece is more high than ground then the unit will fall when completed


===advanced script===
*can have arms with multiple nao emiter moving pad and checking the unit completion




--UnitDef tag involvd in the factory :--
:Builder = 1,--the unit build some static or mobile units
:WorkerTime = 999,--amount per second can be spent in build of metal &amp; energy max
:CanBeAssisted=1,
:buildoptions = {product1,product2}

[[Category:Emmanuel]]</text>
      <sha1>rv7hjj8pntjp9k2hufnjmvro3o931kn</sha1>
    </revision>
  </page>
  <page>
    <title>Features</title>
    <ns>0</ns>
    <id>937</id>
    <redirect title="About" />
    <revision>
      <id>20615</id>
      <parentid>16820</parentid>
      <timestamp>2010-11-29T09:34:02Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>Redirected page to [[About]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="19">#REDIRECT [[About]]</text>
      <sha1>er14b6zyl3y3jbuas9uw262avyx5zo9</sha1>
    </revision>
  </page>
  <page>
    <title>Fedora install</title>
    <ns>0</ns>
    <id>2991</id>
    <revision>
      <id>28641</id>
      <parentid>20959</parentid>
      <timestamp>2014-06-14T12:35:52Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>/* See Also: */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="477">[[Linux|Linux Setup Guide]] &lt; {{FULLPAGENAME}}

__TOC__
[[Image:Distributions-fedora.pngâ€Ž]]

For packaging &lt;font color=&quot;#00DD00&quot;&gt;requests&lt;/font&gt; or &lt;font color=&quot;#FF0000&quot;&gt;complaints&lt;/font&gt;, please contact [[Linux:Packaging#Fedora | the packagers]].

= Fedora =
Please see the install instructions [http://projects.springlobby.info/projects/springlobby/wiki/Install#Fedora-10 here].

= See Also: =
* [[Finalizing_linux_install]]
* [[Troubleshooting_linux]]

[[Category: Linux]]</text>
      <sha1>hsuv8cwiqcd51qt6f18czf8nzxk5610</sha1>
    </revision>
  </page>
  <page>
    <title>Felony</title>
    <ns>0</ns>
    <id>3681</id>
    <revision>
      <id>30329</id>
      <parentid>30328</parentid>
      <timestamp>2017-01-11T12:12:38Z</timestamp>
      <contributor>
        <username>Silentwings</username>
        <id>2883</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="12118">[[Main_Page|Wiki]] &lt; [[Community_Docs|Community]] &lt; {{FULLPAGENAME}}

Please follow the [[Forum_Etiquette| Forum Etiquette]], and don't do the things listed on this page!

==Felony offenses:==
These offenses are looked upon by forum moderation with extreme seriousness.  It will take very few of them to result in a temp ban, and only slightly more will result in long term or permanent bans.  Forum moderators reserve the right to ban you with no warning in extreme cases; however, in most cases we will be sure to first contact you.

===1===
No flaming or insulting of other users, respect for all other users is mandatory and assumed regardless of post count, amount contributed, or time active.

===2===
Constructive criticism and good feedback are always encouraged, but repeated unconstructive comments about a user or project, especially constant unwarranted negative responses without any real merit, will be considered intentional harassment and not be tolerated.

Posting negative threads regarding issues for which you don't provide or seem to expect a ready solution, especially those which could be considered rabble-rousing or geared to stir up masses to harmful inaction, will be considered a form of intentional disruption and punished accordingly.


===3===
Spamming is not allowed.  This includes a single user intentionally posting multiple threads on the same topic, intentionally posting nonsensical garbage of poor humor in a thread, or commercial or paid advertising.

===4===
Backseat moderation will not be allowed to bring threads off topic. Comments like ''why isn't this thread locked yet?'' or ''we don't allow your type in this community'' are not acceptable, they slime the thread creator and undermine forum moderation.  Discussions about relevant moderator actions or rules and policies are allowed provided they do not throw threads off topic or are done with excessive rudeness.  We want to know how we can improve the way we moderate or things that we have missed, and we don't want to be flamed any more than anyone else.

Threats toward the staff are taken seriously and will result in an immediate ban.
Attempting to coerce moderators to use their power unjustly is considered a serious offense. (It's up to the moderators to decide what is just. Don't use this clause as a way to cast doubt upon a moderator's actions unless you were personally involved in the coercion.)

Private disputes and disagreements should remain between those they concern directly.  Public disruptions regarding private matters can be considered intentional and warrant discipline.  This includes discussing and contesting moderators' actions regarding you.

If you feel you have been treated unfairly, ask the moderator to pass your case to another or directly present your case to one of the active higher moderators.

===5===
No posting of excessively mature content.  These forums should be appropriate enough that community members 13 and older are not offended by our content and appropriate enough that they are safe for people viewing in workplace environments.  This includes posting of sexually explicit material, excessive or crude usage of foul language, posting gore or shock humor images or websites of any type, or intimate discussions of a sexual or violent nature.  Exceptions will be made only for creative writers who PROPERLY PRECEDE their works with appropriate warnings of content.

===6===
Disrespect of moderators decisions or forum rules will not be allowed.  Disagreeing with the actions or opinions of a moderator in a moderation case is fine, but any sign of disrespect will be looked upon with grave seriousness.  Ultimately we are here to keep order and keep community content appropriate, impeding these goals is unacceptable.

===7===
Dodging or ignoring moderators actions is unacceptable and will result in an immediate long term ban in most cases.  This includes creating a new account to avoid a temp ban or restoring a moderator edited or moderator deleted post to it's original content without permission.

===8===
Posting hacks or illegal/malicious files for download is not acceptable.

===9===
Racism or prejudice of any kind will not be supported here.

===10===
Our policy is ''Report, don't retaliate''.  Offenses committed in retaliation will not be seen any less serious than offenses committed without reason.  Our moderators are not omnipresent and will miss some things, such times, or in cases of harassment the only way we can regard your case effectively is if you report it to us first and don't take matters into your own hands.  To make a report collect any posts you see as good examples of your case as evidence and email to any moderator, preferably with links to the originals so they can see it in forum format.

===11===
Discussion of specific projects' licensing status is not allowed under any circumstances other than in very good faith and a highly positive and productive manner, unless sanctioned by the license holder.

Practically what this means: If someone tells you you they don't want you to use their content, don't use it, and don't whine about it.  We will come out harshly against you if you try to play lawyer and tell a content producer how they can or can't maintain their licences.  &quot;I should be allowed to use your model in my mod because you are illegally using TA scripts&quot; is not a valid argument.  We protect the content rights of the content artists and producers in our community first, and third parties second.  You can be banned for stealing other's work here if it's reported to us.

===12===
Refrain from discussion of politics or religion in the Off Topic forum.

==Misdemeanor Offenses:==
These offenses are considered less serious and will most often result in only moderator edits or deletions and in extreme cases will result in warnings and disciplinary action.  It's plausible to get banned permanently for repeated misdemeanor offenses, so don't think you are invincible and ignore these.

===m1===
Off-topic posting is in most cases allowable, although requests from a thread's original author or the bulk of a thread's to keep the thread clean will be honored.  If you are clearly posting with the destructive intent to derail a thread, moderators may discipline you.

===m2===
Topics should be named in some accordance with their intended content.

===m3===
Be careful with comments made with humorous intent.  Irrelevant of how many emotes or /sarcasm tags you use to denote your sarcastic intent sooner or later there will be someone who misses the boat or misunderstands the gesture.  [i]&quot;It was just a joke&quot;[/i] is not an acceptable reason for a moderator to not delete something that looks like a flame or another piece of inappropriate content.

===m4===
Being inconsiderate of another members opinions or feelings is discouraged.  Extreme cases will be treated as flames.

===m5===
Unintentionally breaking any of the rules in felony offenses as per moderator discretion.  Moderators are expected to evaluate the actions of any community member and attempt to discern their intentions, in a case where a moderator feels that there were clearly no ill intentions in the mistaken rule infraction a felony offense may be downgraded to a misdemeanor offense.  [i]&quot;I didn't know it was a rule&quot;[/i] is never an acceptable excuse; community members are expected to know and abide by our rules at all times.

===m6===
Avatars are not a privilege we allow you so that you may annoy other users with them.  Do not use flashing or excessively busy animated avatars.  Removal of an avatar by moderation coupled with a warning should be regarded as a message to change your avatar to something less obnoxious.  The moderation staff reserves the right to prevent you from changing your avatar.

===m7===
Don't use colored text excessively. A highlight or two is fine but (multi) colored posts are out of order. Large font size doesn't make you right. Use it sparingly.

In general, use formatting to make things clearer or don't use it at all. Do not use it to obfuscate your posts, and remember, you don't win an argument by using a larger font or a brighter color than your opponent.

===m8===
Don't abuse or misuse the post flagging function. If a report is closed, you should not simply re-flag the post, nor should you flood the moderators with superfluous reports.

===m9===
Follow the guidelines of argumentative discussion, found below.

==Argumentative Discussion:==
While arguments and headed discussions are not discouraged, certain common assumptions and behaviors just cause them to spiral downward into flame wars.  Serious infractions of the following guidelines will be considered misdemeanor offenses.

===a1===
''If you don't like it, don't play/use it'' is not a valid argument.  While you can't please everyone, try to have a valid reason why their suggestions or opinions aren't workable for the purposes of the project in question.

===a2===
Your e-resume does not make you right, neither does being part of the majority.  How many other people agree with you or how expert you are on the topic in question is not a valid reason to dismiss another person's argument or accept an argument.  If a topic is worth arguing about, then it's worth having solid evidence to support your opinion.

===a3===
Down casting an opponents e-resume or questioning the amount of popular support they have is also not a valid argument to why they are wrong.  Once again, if something is worth arguing, it is worth having solid evidence.

===a4===
Respect and consider the opinions of others.  It's very rare to be objectively right or blatantly wrong,  Don't assume your opponents are stupid or haven't thought things through properly unless you can prove otherwise.

==Mandatory Minimum Warning System Bans==
While individual warnings may necessitate immediate moderation action, collections of warnings indicate consistently unacceptable behaviour. In the interests of clarity and fluidity, here are rules on mandatory minimum warning sentencing for repeat offenders.

===b1===
Upon the receipt of a third formal warning in a sixty day period, the offending user will be banned from the forum. This ban shall have a minimum duration of one week.

===b2===
Upon the receipt of a formal warning within sixty days of the end of a previous ban, the offending user will be banned from the forum. This ban shall have a minimum duration twice that of the previous ban.


Forum rules are subject to change at any time, and moderator enforcement of these rules is applicable from the date of change forward.  To a certain degree the seriousness of an offense and the disciplinary action as such is up to moderator discretion dependent on their understanding and opinion on the intents of the offender in question.  We believe that everyone is innately capable of maintaining themselves as a constructive member of this community and it's simply a matter of desire and work ethic.  It's entirely acceptable for moderators to deal with two similar cases in different manners based on the history of the cases in question and the results of private communication.  Our moderators' greatest goal is the maintenance and rightness of this community as a safe and inclusive place.  Thank you for reading these guidelines, and more importantly... have fun!

-------------------------------
* May 24, 2012
Added clarification to licensing statuses rule (felony 11)

* May 23, 2011
Added section on politics and religion in off topic forum.

* May 23, 2011
(knorke)  combined etiquette&amp;rules sticky, moved this changelog to bottom of post

* Apr 20, 2010
Added mandatory minimum sentences for repeat offenders.

* Jan 7, 2010
Added clause to felony four regarding threats toward the staff.

* Jan 5, 2010
Added misdemeanor for abuse of the post flagging features.

* November 19, 2009
Added clause in felony four about coercing moderators to act unjustly.

* August 14, 2009
The official forum guidelines have been revised and consolidated, with the old posts retained for reference and posterity.

[[Category:Spring]]</text>
      <sha1>b4o2afcmo2lgcg6vz387dr1lq0566he</sha1>
    </revision>
  </page>
  <page>
    <title>Final Frontier</title>
    <ns>0</ns>
    <id>1140</id>
    <revision>
      <id>17000</id>
      <parentid>16951</parentid>
      <timestamp>2009-08-09T10:57:16Z</timestamp>
      <contributor>
        <username>Seanheron</username>
        <id>2595</id>
      </contributor>
      <comment>deprecated again - It can be undeprecated when it's updated - we're not deleting stuff in deprecated, so no problem with tagging it until then</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5821">{{deprecated}}

'''PLEASE BE AWARE THIS MOD IS NOT COMPATIBLE WITH CURRENT SPRING ENGINE.

Becouse of the bug you can't build any building or ship in this mod. You need to have older version of spring to use this mod! (That leads that you cant play it online due to very old lobby version)
'''






== &lt;center&gt;'''Final Frontier''' &quot;The Next Generation Of War&quot;&lt;/center&gt; ==



&lt;center&gt;website: http://www.ta-spring.com/mods/final_frontier/&lt;/center&gt;



&lt;center&gt;http://www.fileuniverse.com/images/Logo1.2.gif&lt;/center&gt; 




Final Frontier &quot;The Next Generation Of War&quot; is a modification for the Springproject . Originaly the mod was developed for the old realtime strategy game Total Annihilation some years ago. Because Spring gives us a new and better engine for developing we decided to recreate Final Frontier in a better way.

 

The mod contains two races (Arm and Core) with more than 140 diferent units. All units except buildings are spacecrafts, fighting each other with huge lasercannons, plasmabombs, rockets and a lot of other cool stuff wich brings a lot of destruction ;-).

 

Containing nearly all old units from the original mod, we put a lot of new units into it, completely rebalanced it, changed nearly all weaponeffects, changed most models, retextured all, changed the scripts and even more you have to find out.

'''Features:

*two unique races with more than 140 different units 
*different armorclasses for space ships which brings a well balanced &quot;paper-scissor-rock&quot; system 
*most units are able to lose weapons and Hullparts 
*3 techlevels: starting with small Fighters going over Frigates and Destroyer to Battle Ships and Planetkillers 
*very Beautiful weapon effects and sounds (some call it laser show =D) 
*many weapons aren't fully rotatable, so it's useful to attack slow ships from behind, bringing you the full advantage of your weapons while the opponent's weapons arent able to fire backwards 
*unique space maps especially designed for Final Frontier 


--[[User:Optimus Prime|Optimus Prime]] 12:39, 19 Jan 2006 (W. Europe Standard Time)
 







&lt;center&gt;http://www.fileuniverse.com/images/FFscreen029.jpg&lt;/center&gt;

A few notes on strategy: 

The first important note is that although FF has wonderful turrets and defensive buildings, your opponent can fly HIS ENTIRE ARMY right over them and will never be hampered in his advance by wreckage from his downed ships. This makes defence quite different from Total Annihilation style mods; usually a strong front line defense can be bypassed, so the &quot;line defence&quot; strategy is not nearly so useful.

There are a variety of strats you can pull off, to name a few;

*fighter spam. takes all those 'pros' (rofl) opty was talking about off guard. take out their outlying mexes or their tech 2 plant. make sure you tech after though, and if you build a extra plant it is a good idea to reclaim it to help.
*ODS spam. small groups of ODS, build a few 4 minutes or so in to raid their mexes, then get a plant as close to their base as possible and spam ODS in unholy amounts. watch out for the com though!
*supported com rush. go in with a few antifighters or tech 2 corvettes and your com. claim land. build 2 odd tech 1 antifighter things and then get a tech 2 unit to build a gatling laser or such, or if you haven't teched a tech 1 anti starship turret
*tech 2 antifighter rush. deadly, as there is no effective unit that can stand in your way till tech 3 all you have to do is aviod defenses and make sure u have some fighters dealing with the com or know he is elsewhere! com pwns these HARD but they are pretty cost effective when tearing apart their base. again, go for their eco/plant and try to reclaim the wrecks later too.
*Tech 3 rush (lol) please, feel free :)
*porcing. works well, weak to marauding com but now that enemy cons can be targetted by lvl1 antifighter all you need is to expand a little and have these turrets scattered around with a small group of fighters to stop their com. teching to get the extra metal then going to counter whatever your enemy does.
in all cases scouting is important and there is a level of strategy in this game that becomes quite enjoable.
the micro is a bitch as, like hawks in OTA based mods, the fighters behave like...fighters, they bugger off and do their own thing, unless you spam 's' commands and have them on hold position. annoying, but this is only for the anti-fighter fighter or the EMP corvette, most other basic ships behave like gunships.
battleships are now well balanced and fun to use, not the fastest of things though.
owh and the warlock mark 2 is a very potent raiding unit, fast and moderately powerful. little HP though so don't go head on with enemy defenses, skirt round the edges and toast their econ and production.
and the '''Unit[Counter]''' thing is ''really'' useful!

--[[User:Min3mat|Min3mat]] 19:39, 20 Apr 2006 (W. Europe Daylight Time)

===Current Status Of The Mod===

Final Frontier has long been a subject of controversy within the Spring community, and numerous small arguments have formed around the balance of the mod. As a result, the mod will continue development through multiple avenues at this time.

*Nemo has updated a variant, Low-Fat FF, for Optimus Prime's release of FF 1.18
*Aun has released a variant, Epic FF, for Optimus Prime's release of FF 1.18
*Optimus Prime is taking a break from development, but plans to continue from FF 1.18
*A team, as yet unnamed, has formed to take FF back to the OTA basics and work from there, in hopes of releasing a different balanced mod in a new version. Major members of this team include Smoth, Min3Mat and DayWalker. Members of the EE team are also contributing significantly. This team may be found at http://cs.selu.edu/~ssmith/BB/index.php

--[[User:Neddiedrow|Neddiedrow]]

[[Category:Mods]]</text>
      <sha1>b1wurp866f013aoj1n9szm91k8vp9jk</sha1>
    </revision>
  </page>
  <page>
    <title>Final Frontier/</title>
    <ns>0</ns>
    <id>1202</id>
    <redirect title="Final Frontier" />
    <revision>
      <id>11029</id>
      <parentid>3527</parentid>
      <timestamp>2006-04-16T17:04:35Z</timestamp>
      <contributor>
        <username>SeanHeron</username>
        <id>3</id>
      </contributor>
      <comment>I reconned this page was no longer needed</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="28">#REDIRECT [[Final Frontier]]</text>
      <sha1>fdkt213agsw0zmqwdg6lc0hbm5qzwnu</sha1>
    </revision>
  </page>
  <page>
    <title>Finalizing linux install</title>
    <ns>0</ns>
    <id>2484</id>
    <revision>
      <id>28635</id>
      <parentid>28633</parentid>
      <timestamp>2014-06-14T12:24:38Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1712">= Finalizing installation =
You should have Spring installed by now; if not, please see the [[SetupGuide]].

== Maps &amp; Mods ==

Since Spring is only an engine, you need to download [[games]] for it, and the maps that go with those games. 

SpringLobby will automatically do this for you when you attempt to join a game with a map or mod that you do not currently have, using an integrated downloader.

If you want to download it manually or browse existing maps, there are several easy to use websites:
*[http://spring.jobjol.nl/subcategory.php?id=1 SpringFiles]
*[http://spring-portal.com/ Spring-Portal]
*[http://www.darkstars.co.uk/downloads/index.php?dir=spring Darkstars]

Pick any of those sites, download a map or mod, and then double click it. This will move it to your Spring folder, using the spring map/mod installer program. If you wish to move maps/mods by hand, they are located under &lt;code&gt;~/.spring/maps/&lt;/code&gt; or &lt;code&gt;~/.spring/mods/&lt;/code&gt; (if the folder does not exist - create it). Do not unpack the file in any way though, just download and save it. Reload your maps/mods in SpringLobby, (''Tools - Reload maps/mods'') and they will be ready to use.

These sites also may provide other neat things like Lua widgets, epic replays, AI bots (for playing offline or to team up on with a friend). Generally the installation requires you to download the file and place it in the appropriate folder in your ''~/.spring'' directory. (you may have to create the folder)

''Hint:'' If you know the name of the map you want, there is a Search function provided in those websites. Just write a part of the name, like one word, and you will easily find the map you were looking for.

[[Category:Linux]]</text>
      <sha1>tckaz5evqz0c0m9qjuzlwkl56nsp74r</sha1>
    </revision>
  </page>
  <page>
    <title>First 16 player</title>
    <ns>0</ns>
    <id>1840</id>
    <revision>
      <id>18777</id>
      <parentid>11654</parentid>
      <timestamp>2010-03-13T13:25:25Z</timestamp>
      <contributor>
        <username>Koshi</username>
        <id>2371</id>
      </contributor>
      <comment>made historical</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1431">{{Historical}}
On the 12th/13th of October 2006 (It went on!) Wil2 Hosted the first known 16 player (plus spectator) game on TASPRING


&lt;div style=&quot;background-color:#EEEEEE&quot;&gt;
&lt;b&gt;WRONG!&lt;/b&gt; first known was hosted by TradeMark, 8th October 2006, view topic:
http://taspring.clan-sy.com/phpbb/viewtopic.php?t=7473

And it doesnt need so good cpu either: TradeMark has 1.4Ghz CPU, 1.5GB memory, 6Mbps/512kbps connection.
&lt;/div&gt;


Despite the general errors with so many players, the game had very low lag and was fully playable and enjoyable!

The games were all played on the Castles map in 2 teams of 8 v 8, north versus south.

When it was tried first playing on supreme battlefield, the game did work twice, there was not a huge ammount of lag, however due to the server having standard on board graphics (and only PCI-X expansion), it was unplayable and a smaller map of castles was decided.


Server Specs.

The game was hosted on a Dual 3.0ghz Xeon server, with 8GB of memory and a internet connection of 10MB/s (burstable).


The second of the replays was accidently deleted, however the replays for the first and third games are available at the following links:

http://www.unknown-files.net/replays/replay.php?id=56 &lt;br&gt;
http://www.unknown-files.net/replays/replay.php?id=58

Wil2 would like to mention that whilst he has a fast machine and can host a game like this, he does suck at the game so do not mock his gameplay! :)</text>
      <sha1>09pfh8vj3zyq25wb6dtudmqhhohlra0</sha1>
    </revision>
  </page>
  <page>
    <title>FirsttimeEE</title>
    <ns>0</ns>
    <id>2066</id>
    <revision>
      <id>19147</id>
      <parentid>19082</parentid>
      <timestamp>2010-03-13T21:31:36Z</timestamp>
      <contributor>
        <username>Koshi</username>
        <id>2371</id>
      </contributor>
      <comment>fix category</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3281">When you joined the battleroom you were like ''&quot;yea iam so pro right&quot;'' but now  you are no longer so sure?&lt;br&gt;
The game is about to begin and there is too little time to read the whole wiki-page about E&amp;E?&lt;br&gt;

So here comes the ultra-easy guide:&lt;br&gt;


==Which side do I want to play?==
&lt;br&gt;
For the beginner GD is probally better.&lt;br&gt;
Their units are tanks and everybody knows what tanks are good for.&lt;br&gt;

==What buildings should I construct first?== &lt;br&gt;
1) Start next to a group of metalspots. Press F4 if you can not see them.
&lt;br&gt;&lt;br&gt;
2) Use your Commander to build at least '''3 metal extractors'''.&lt;br&gt;
You can que the buildorders up by holding shift if you want to.&lt;br&gt;
Note how the GD metalextractors also produce some energy.
&lt;br&gt;&lt;br&gt;
3) Now comes the tricky part: In E&amp;E, factories are built by '''constructions-hubs'''.&lt;br&gt;
So use your Commander to build one of those.
&lt;br&gt;&lt;br&gt;
4) Use the construction hub to build a '''light factory'''.&lt;br&gt;
The Commander can speed this up if you rightclick him on the factory while it is built.
&lt;br&gt;&lt;br&gt;
5) Your Commander can now leave the startarea to build some '''more metalextractors.''' &lt;br&gt;Pay attention that you do not drive too far away because he has no weapons!
&lt;br&gt;&lt;br&gt;
6) When the factory is done, order the hub to build a '''Nuclear Power Plant''', because you when you start producing tanks your factory will drain more energy.
&lt;br&gt;&lt;br&gt;
7) Also build a '''Radar''' using the hub, it will tell you about enemy activity in its area.&lt;br&gt;
&lt;br&gt;&lt;br&gt;

After the first minutes your base should look like this:&lt;br&gt;
[[Image:EE_startbuildorder_GD.JPG]]


&lt;br&gt;&lt;br&gt;

Now you are ready to produce some tanks for attack or defense!&lt;br&gt;&lt;br&gt;
But...&lt;br&gt;&lt;br&gt;
==What units should I build with my first factory?== &lt;br&gt;
1) Build one or two '''Scouttanks'''.&lt;br&gt;
They are only armed with a small machinegun but you can use them to search for the enemy and maybe kill some of his metalextractors.&lt;br&gt;&lt;br&gt;
Also, try using them to build a fieldradar (or a hidden camera) in the enemy territory. This can prove very usefull.&lt;br&gt;&lt;br&gt;
2) Build some '''Battletanks''' to guard your commander while he wanders around and builds metalextractors.&lt;br&gt;&lt;br&gt;
3) Use construction units to expand across the map and start raids against the enemy!&lt;br&gt;&lt;br&gt;
4) Building a Energystorage and a Metalstorage can be life-saving when your Commander gets killed.&lt;br&gt;&lt;br&gt;


'''Advanced Notes:'''&lt;br&gt;
-Don't be a victim of the airrush!&lt;br&gt;
Construct a flakturret at your factory and some more all around the map.&lt;br&gt;
Almost all units can shoot at planes, but they usually miss.&lt;br&gt;&lt;br&gt;
-When your metalincome is bigger than ~20, '''construct a second factory!'''&lt;br&gt;
Building more Hubs and using them as Nanotowers alÃƒÂ¡ BA will not speed up production.&lt;br&gt;&lt;br&gt;
-The constructions vehicles can also build waterstructures&lt;br&gt;&lt;br&gt;
-There are '''no metalmakers.''' So the more land you controll, the more metalextractors you can build. Easy.&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;

This is not suppossed to be a page where you can read about supersecret supertactics.&lt;br&gt;
It is for all these people who do not know what a hub is and who spend their money by building random stuff in front of their allies factories or are asking why the dgun is broken.
[[Category:Expand_and_Exterminate]]</text>
      <sha1>dpfyrnf98u77ij46i9f8l1wpfphgt1i</sha1>
    </revision>
  </page>
  <page>
    <title>Firsttime E</title>
    <ns>0</ns>
    <id>2068</id>
    <redirect title="FirsttimeEE" />
    <revision>
      <id>11881</id>
      <timestamp>2007-03-21T03:12:11Z</timestamp>
      <contributor>
        <username>Knorke</username>
        <id>833</id>
      </contributor>
      <comment>Firsttime E moved to FirsttimeEE</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="26">#REDIRECT [[FirsttimeEE]]
</text>
      <sha1>4a23hxymjgaflj0alhapn0givefw4ny</sha1>
    </revision>
  </page>
  <page>
    <title>Flack Cannon</title>
    <ns>0</ns>
    <id>1801</id>
    <redirect title="Flak Cannon" />
    <revision>
      <id>11615</id>
      <timestamp>2006-09-19T14:53:30Z</timestamp>
      <contributor>
        <username>FoeOfTheBee</username>
        <id>20</id>
      </contributor>
      <comment>Flack Cannon moved to Flak Cannon</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="26">#redirect [[Flak Cannon]]
</text>
      <sha1>2forinrm1lllvsh0hqxd75drthm6n4h</sha1>
    </revision>
  </page>
  <page>
    <title>Flak Cannon</title>
    <ns>0</ns>
    <id>1538</id>
    <revision>
      <id>26877</id>
      <parentid>24358</parentid>
      <timestamp>2013-03-23T23:10:42Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>remove Category:Units</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="419">{{Balanced_Annihilation_deprecated}}

[[category:Balanced Annihilation]]
Flak cannon are the main defense against air, other than fighters. It only takes a couple of these to wipe out a group of air units. They can fire at ground units, but are very ineffective and need to be backed up with traditional defense and units.

&lt;br&gt;&lt;br&gt;

Arm: Flakker
[[Image:armflak.jpg|Flakker]]



Core: Cobra
[[Image:corflak.jpg|Cobra]]</text>
      <sha1>oijm37p4k384lh3uhb0yi8g16liuuat</sha1>
    </revision>
  </page>
  <page>
    <title>Floating Metal Maker</title>
    <ns>0</ns>
    <id>1554</id>
    <revision>
      <id>26878</id>
      <parentid>25271</parentid>
      <timestamp>2013-03-23T23:10:52Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>remove Category:Units</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="495">{{Balanced_Annihilation_deprecated}}

This is simply a floating variant of the normal Metal Maker. This should not be used as a source of metal, unless you have expanded across as much of the map and cannot get to any more metal patches. It should be used to funnel excess energy to metal, and should be used with the Metal Maker GroupAI for the greatest effect.

[[Image:armfmakr.jpg|Arm Floating Metal Maker]][[Image:corfmakr.jpg|Core Floating Metal Maker]]

[[category:Balanced Annihilation]]</text>
      <sha1>7m5t6121dfmsxauvtq8ahs3ytcstuh1</sha1>
    </revision>
  </page>
  <page>
    <title>Forgotten Chronicles</title>
    <ns>0</ns>
    <id>1849</id>
    <revision>
      <id>18823</id>
      <parentid>11663</parentid>
      <timestamp>2010-03-13T14:01:34Z</timestamp>
      <contributor>
        <username>Koshi</username>
        <id>2371</id>
      </contributor>
      <comment>made historical</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5778">{{Historical}}
'''Forgotten Chronicles : What is it?'''

'''Currently not under development, we are doing something else...'''

Forgotten Chronicles is an extremely ambitious mod/game. The developers (I, Snipawolf, and Chrispin) are going to the extremes to push the engine to its limits. Most units in the game have at least 2 weapons, and almost all units are affected by veterancy. We are also interested in the spring rewrite and the new engine.

'''Forgotten Chronicles : Name'''

The name is intertwined with the story. Forgotten Chronicles as in long lost records, of an extremely brutal and hellish war.

'''Forgotten Chronicles : Storyline'''

Let's start from the begining when the first space mission to go out of our solar system was launched in 2296. We could finally test out the use of wormholes to travel through space. The ship used in the mission carried over 100 men consisting of mostly scientists. The mission was succesful and the ship was carried out of our solar system. After the scientists eagerly identified and named many new planets, all communication with the ship was lost. The last report sent from the ship to Earth was a report of an attack over the planet Felmar II. The weaponry that attacked the ship was like nothing ever seen before. They were weapons of mass destruction. 5 years later and the next mission out of our solar system was launched. This time the ship carried weapons, but again, the ship lost communication and was obliterated over Felmar II. Felmar II was described to be a complete organic wasteland. It was very exciting to see the first life on another planet, but the planet was far beyond inhabitable by humans. The place was too rich in oxygen. Organisms overcrowded the planet. Felmar II was clearly a living giant. Scientists began to think that if you were to take a step on the planet, you would be eaten alive. Soon, many missions were sent out to observe the planet with great precautions. Scientists wondered how a such crude planet could have such powerful weaponry. They greatly under-estimated the aliens. Many missions turned into battles between the 2 races. The aliens had few actual fleets of ships. Most of the time creatures themselves would actually fly out into space. The aliens seemed very adaptable to their enviroment. The aliens obviously had technology beyond humans, but they rarely used it. Mission after mission was sent, humans began to forget why they were around the planet in the first place. They would send out missions with the main purpose of attacking Felmar II. Many citizens of Earth did not like these attack missions. The humans could not keep attacking without consequence though. Many lives were lost and soon to be more... many more. The whole out of solar system exploration act had formed a war. Aliens tracked ships back to Earth and attacked. Humans were devastated by alien attacks and no longer felt safe on their own planet. The humans had to start a war. They had no choice for the aliens would never stop attacking. The humans had about the technology equivelent to the aliens for the fact that the aliens were mostly simple organisms mixed with very few organisms with complex brains. The aliens had a history of galactic conquest. The aliens' ancients were very advanced and had the devastating weaponry that the aliens recovered over a thousand years later. So after many human lives were taken, the humans decided that the aliens and humans were even matched and now the humans needed an advantage to end this war. The aliens were even faster learners than humans and the humans needed faster learners now. Only artificial intelligence could solve this problem. Though, robot brains themselves could not be as smart as humans. The only solution to that was to implant actual human brains into the robots. The humans were willing to do whatever they needed to do in order to win the Fight for Humanity. And after the first AI robot with a human brain operating it was created. This soon turned into a disaster. The robots had free will and would sometimes malfuntion and kill humans. The robots could communicate much quicker than humans. Who knows what the robots could be plotting. The robots were succesful in exterminating much of the alien race by landing on the planet, but humans remained to have problems on Earth with the robots. The robots became more fiercer and would sometimes take humans and use their brains in order to build more of their own kind. The rage against the aliens and the robots continues. It seems as though all hope is lost for humans, or is it? It's all up to you, Commander. Lead your race to victory, or face bitter defeat.

(Story by Chrispin) (PS: The humans hadn't had war in an extremely long time, which is why weapons like machine guns and cannons are still up to date.)

'''Forgotten Chronicles: Release Date'''

Currently unknown, we are estimating 2008 for the finished product, maybe later.


'''Forgotten Chronicles: A look at the Races'''

Humans

Resources: Supplies (Metal) - Used for buildings, materialistic needs, and ammunition used by troops.
Requisition Points (Recognition, ability to call in greater forces) - Used for training infantry, weapon crews, and pretty much anything that humans build.

Unit Style: The Humans are versatile, no real style suits them.

Robots

Resources: Metal - Used for building bots.
Energy - Used for weaponry.

Aliens: Metal - Used for technology and buildings.
Food (Energy) - Used for spawning troops and using weapons.

'''Forgotten Chronicles: What we have'''

Nothing in game yet, I have a lot of models, well, 3 that can adapt well to be around 20. I need to get a commander and get him in game first, then I can try with other units.

Back to [[Mods]]
[[Category:Mods]]</text>
      <sha1>1w0tm68wz9ssuq25onefo6jy3cxsjr1</sha1>
    </revision>
  </page>
  <page>
    <title>Forum Etiquette</title>
    <ns>0</ns>
    <id>2137</id>
    <revision>
      <id>30306</id>
      <parentid>29021</parentid>
      <timestamp>2016-12-13T07:06:52Z</timestamp>
      <contributor>
        <username>Silentwings</username>
        <id>2883</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9442">[[Main_Page|Wiki]] &lt; [[Community_Docs|Community]] &lt; {{FULLPAGENAME}}

==Why use good ettiquette?==

So many whingers on this forum.  And now another one wants to tell me what I should and shouldn't say.  Get a ticket and stand in line.  Or better yet toughen up and stop being such a whimp.  I'll say whatever I feel like and if you don't like it, well too bad.  You can't make me change a thing.

And you are right.  Unless you post something that brings a moderator ban down on you, you can say what you like and I can't do anything to stop you.  But if you take some time to think, and apply some good etiquette principals, just maybe you'll be glad that you did.  For your own sake.

I mean, why do you post on these forums anyway?  Do you want respect from other people?  Popularity?  To feel good because you have contributed something useful?  To influence the development of spring or one of the mods in a direction that suits you?  

Whatever your reason, if you pay attention to what is written in this article, and put some effort into what you have to say, you will get improved results.  People who say the right things are more popular, better respected, and more likely to make a difference when discussing things like whether unit X should be buffed or nerfed.

Or maybe you post just because you like the sound of your own typing.  Or you get a thrill from seeing lots of text on the internet credited as being written by someone that doesn't even have your real name.  In that case stop reading this and start spamming flaming and trolling for all you're worth.

==Active Listening==

A great skill to develop is effective listening.  What happens when you don't listen?  Its a bit like you are talking to an imaginary person.  You read things that weren't said.  You don't take into account things that were said.  You often end up looking silly.

But thats not all there is to good listening.  A basic principal of human interaction is that everyone else wants to know that people are understanding what they have to say. A nasty habbit that most of us have is that if we don't think the other person heard or understood what we had to say, we'll just repeat it louder and angrier.  This tends to be a good way to start a flame war. 

You can take advantage of this tendancy by showing people that you understand.  If you show someone that you understand what they have to say, they'll think you are a good person and may be more interested in what you have to say.  

For instance Jimbob says that widgets should be nerfed because they swarmed through his whatsit army and cut them to pieces.  You know that this is stupid.  So you tell Jimbob 'Heh stupid if we nerf widget then they won't be good against doodads anymore'.  And this might be a very good point, but Jimbob will hate you because you ignored his point about the widgets thrashing whatsits.  He might resort to a personal attack along the lines of 'You're just a widget spammer who doesn't want them nerfed so you don't have to learn to use other units'.

But if you show you understand what he has to say you normally get some more respect.  'I can understand that it is frustrating that you can't beat widgets with whatsits.  But if we nerf Widgets than the doodads will be able to kill the widgets far too easily.  Jimbob then says 'Oh I didn't think of that.  Maybe we should buff the whatsits instead'.  Suddenly you are having a sensible conversation.  You have a chance of agreeing on something that may help improve the mod you are talking about.  Or at least you can agree to disagree in a civilized manner which makes it less likely that the other guy won't try and disagree with you next time you say something just to pay you back.

==Whats in it for me==

What is most likely to make you change your opinion or actions?  Often its when you are convinced that the change is in your best interests.  You might change to avoid a moderator threat of ban.  You might play a new mod if you are convinced there is a worthwhile chance of fun.  You might agree to a proposed balance change if you think it will make the game better - for you.

However when we post, we often are still thinking about whats in it for us.  We forget that the people reading the post won't have any interest in whats in it for you. They will want to know whats in it for them.  If you can find a reason why something will be of interest to both yourselves, and to the people who read it, then you have a better chance of getting a favourable response.

==Careful criticism==

How do you feel when you are criticised?  You probably hate it, I know I do.  A normal response is to return the criticism, with interest.  So before you criticise someone, think about what you are trying to achieve.  If you are trying to convince someone else of something, provoking a hostile reaction will greatly reduce your chance of doing so.  Anticipate a potential hostile reaction to any criticism and consider carefully what you say.  Unless of course your purpose is to provoke a hostile reaction.  

Some tips for taking the sting out of criticism:
* avoid emotionally loaded words and personal insults;
* stick to facts and behaviours that are simple to describe;
* allow for the chance that you may be wrong;
* make sure it is clear what the desired response is.

Consider for example the difference between 'Stop being a total and utter jerk', and 'Please don't insult my skill level'.

Another drawback with criticism is that it restricts creativity.  If someone has an idea it might be very easy to criticise the idea if it has serious flaws.  This can kill the idea and prevent its further development.  This may seem like a good outcome if the idea is seriously flawed.  However you never know whenever a seriously flawed idea might not be the basis of a really good idea.  If an idea is flawed you always have the choice to either criticise it, ignore it, or suggest further ideas that may help to improve it.

==Pragmatism vs Judgement==

We often think in terms of what people do and don't deserve.  We make judements about people.  For instance so and so said X which was really rude, therefore he deserves to be insulted, ignored or whatever.  We also make judgements about people's inner motives.  'He's only suggesting that balance change because he can't cope with strategy X'.  

But there is an inherent problem in making such judgements.  Nearly all the time if we make a negative value judgement about someone they will disagree.  All of us think we are doing the right thing and rarely if ever consider that we are a bad person that deserves to be mistreated.  If someone is rude, they probably feel justified by whatever provoked them to be rude.  If someone can't cope with strategy X, then they will probably consider strategy X to not be a valid strategy.

So when you make a value judgement about someone, that person will almost certainly disagree with you.  And many value judgements cannot be proven, but rely on our interpretation of other people's motives.  Most value judgements come across as heavily loaded criticisms, which are either ignored or responded to vigorously.

So before you make a value judgement, consider the desired outcome, and what is likely to happen when you say what you want to say.

==Just because you spam==

Just because you can say something does that mean you should say it?  People hate spam.  Anything that does not contribute something useful to the thread may be considered spam by some readers.  Write enough spam and you will annoy a lot of people, who will be less likely to listen to you when you have something worthwhile to say.  If you want to be taken seriously can the spam.  Some common examples:
*posting in a thread to state how stupid the thread is;
*posting 'me too';
*What is more off topic in a thread than pointing out that the thread is off topic?

==Spelling and Grammar==

There are many grammar and spelling nazis out there.  They can be a right royal pain in the backside with their nitpicking and criticisms.  And you might think 'Why should I put any effort into spelling and grammar - its the ideas that are important.  It doesn't matter whether I follow an arbitrary set of inconsistent rules on how I should present those ideas'.

If you are trying to 'sell' and idea, presentation counts.  People will always take you more seriously if you have good spelling and grammar.

==Read what you write==

When you finish writing something, are you eager to see your message up in lights as soon as humanly possible?  Do you hit the send button a split second after you have rushed to the conclusion of your post?

Or do you spend a little time checking everything you write.  After you finish, you spend a minute fixing up spelling mistakes, correcting yourself when you have changed thought mid sentence etc.  Sometimes you shudder to read what you have written and are glad to have the second change to make sure you say something that will be easy to read, and come across as being written by someone smart.

You don't have to proof read everything you write before you post, but I am quite often glad that I do...

==Use pastebin for long c&amp;p texts==
Do not copy &amp; paste long texts such as error logs or code snippets directly into the forum.

Instead use a pastebin website such as http://paste.springfiles.com or http://www.pastebin.ca

Or attach the files to your posting.

[[Category:Spring]]</text>
      <sha1>4b9988cw3uup3nzjqklere0zd082a4l</sha1>
    </revision>
  </page>
  <page>
    <title>Frames</title>
    <ns>0</ns>
    <id>3114</id>
    <redirect title="Gamedev:UnitsOfMeasurement" />
    <revision>
      <id>27536</id>
      <parentid>22187</parentid>
      <timestamp>2013-08-19T17:11:15Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>double redirect</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="40">#REDIRECT [[Gamedev:UnitsOfMeasurement]]</text>
      <sha1>7665j9sv4kihud1oon6zk5di6prhvxc</sha1>
    </revision>
  </page>
  <page>
    <title>FreeBSD install</title>
    <ns>0</ns>
    <id>3158</id>
    <revision>
      <id>30700</id>
      <parentid>26370</parentid>
      <timestamp>2018-06-06T22:22:39Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1599">{{#css:
  table.glossy {
    margin: 4px; padding:10px;
    border: 1px solid rgba(0,0,0,0.5);
    border-radius: 10px 10px 10px 10px;
    box-shadow: 0 2px 6px rgba(0,0,0,0.5), inset 0 1px rgba(255,255,255,0.3), inset 0 10px rgba(255,255,255,0.2), inset 0 10px 20px rgba(255,255,255,0.25), inset 0 -15px 30px rgba(0,0,0,0.3);
    text-align: center;
  }
  /*table.glossy:hover {
    background: rgba(160,160,220,0.4);
  }*/
}}

[[Linux|Linux Setup Guide]] &lt; {{FULLPAGENAME}}

__TOC__
[[Image:Distributions-freebsd.png]]

=FreeBSD=

==FreeBSD-STABLE and FreeBSD-CURRENT==
These are the development branches of FreeBSD.

As root, just type:

&lt;code&gt;&lt;pre&gt;
pkg_add -r springlobby
&lt;/pre&gt;&lt;/code&gt;

If you only want the spring engine:

&lt;code&gt;&lt;pre&gt;
pkg_add -r spring
&lt;/pre&gt;&lt;/code&gt;

As of 08 October 2011, this will install 82.7.1.

==8.2-RELEASE and 7.4-RLEASE==
These are the production releases.
The FreeBSD production releases currently have outdated binary packages for spring (spring 82.5.1,) therefore if the above method of installation is used, online play will not be possible.  To play online, use the FreeBSD ports collection instead.  If you have not already installed the ports collection, detailed instructions are available in the
[http://www.freebsd.org/doc/handbook/ports-using.html FreeBSD Handbook]
.  Once you have the ports collection, you can install the latest version of spring like any other port.

&lt;code&gt;&lt;pre&gt;
cd /usr/ports/games/springlobby
make install clean
&lt;/pre&gt;&lt;/code&gt;

If you only want the spring engine without the lobby, replace springlobby with spring.

[[Category:Linux]]</text>
      <sha1>9yhxtf8bof4f8rretj2twbhhhsf7pwi</sha1>
    </revision>
  </page>
  <page>
    <title>GD Unit Guide</title>
    <ns>0</ns>
    <id>1871</id>
    <revision>
      <id>26368</id>
      <parentid>13412</parentid>
      <timestamp>2013-03-08T18:36:54Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>[[Category:Expand_and_Exterminate]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="24076">[[Image:E&amp;E-GD.png|200px|right|A well defended GD stronghold.]]

== Level One: Land ==


'''Vladost: Light cannon tank'''
[[Image:Vladost.jpg|left|100px]]
The Vladost forms the bulk of any Global Dynasty force.  These durable tanks are equiped with a double-barreled cannon. They are best used in lines where their superior range and damage can inflict heavy losses on the enemy. Vladosts nearly always shoot first in an engagement.



'''Petra: Light missile tank'''
[[Image:Petra.jpg|left|100px]]
The Petra serves as a support unit for the GD forces.  Their arcing missile fire allows them to bring their weapons to bear no matter their surroundings.  Due to its inferior armor this unit should be put to the rear of a combat force, where it can use its indirect fire to greater effect.


'''Taiga: Light laser tank'''
[[Image:Tagia.jpg|left|100px]]
The Taiga fires a short-ranged continuous laser at enemy targets, rapidly cutting through their armor.  Faster than other GD units as well as more heavily armored these untis excel at short range combat.  Their superior damage against structures makes them ideal for flank attacks or especially as candidates for covert airdrops.


'''Vladost IIC: Radar tank'''
[[Image:VladostIIC.jpg|left|100px]]
The Vladost IIC is a GD forces eyes and ears.  Equipped with a short range sensor suit these tanks can improve line of sight as well as providing mobile radar.  However Armed with only a single-barreled cannon and reduced armor these are not a substitue for light cannon tanks.  They will however tilt the balance in your favor allowing your forces to engage the enemy from maximum range and detecting flank attacks.



'''Tchernia LT: Ion Cannon Tank'''
[[Image:TcherniaLT.jpg|left|100px]]
The GD's ace in the hole when it comes to rapid strikes by the enemy, the Tchernia Ion Cannon Tank is literally a show stopper, armed with a single large bore ion cannon this tank is capable of stopping any enemy units in it's tracks with an EMP pulse. Due to its expensive cost and high energy use this tank should be built sparingly, however it can turn the tide should you face a numerically superior foe. 


'''Pavost Light Artillery'''
[[Image:Pavost.jpg|left|100px]]
The Pavost light artillery is the back bone of the GD's early long range divisions. Capable of putting a hail of fire on a target area when grouped, The Pavost will get your enemy moving, weakened and confused. However Pavost light artillery have very thin armor, if caught alone it has no chance of survival. 


'''Pavost AAI: Light Anti-air tank'''
[[Image:PavostAA.jpg|left|100px]]
The Pavost AAI is the first line in the GD's defense against aerial attacks. Its Light Flak cannon can easily dispatch light aircraft of all sorts, and built in mass it can even deal with medium aircraft. These should be included in all attack forces to protect against aerial attack. As heavier aircraft become present on the battlefield the Pavost AAI may require support from other anti air elements.


'''Vladost IAMP''' 
[[Image:VladostIIA.jpg|left|100px]]
A perfect surprise for your enemies, this modified Vladost tank known as the IAMP version, has been refitted with a amphibious suit for navigating even deep water. Equipped with the same double-barreled cannon as its land going counterpart this tank can still pack a punch. However the Amphibious Vladost is easy prey for ships and submarines lacking anyway to retaliate against them. Use them with care, as a well planned and executed amphibious assault can breach even the most heavily defended stronghold. 


'''Kamir I''''
[[Image:KamirI.jpg|left|100px]]
This light fast scout tank is capable of building remote camera's and camoflaged radar.  Great for roving ahead of an attack force and determining the oposition.  This scout tank is perfect for harassing the enemy, keeping tabs on distant parts of your territory, clearing minefields and quickly reclaiming debris on the battlefield. 


'''Gurnz construction vehicle'''
[[Image:Gurnz.jpg|left|100px]]
The Gurnz is your ticket to victory. It may be ugly, it's crew may be surly and ill trained, it's paint might be chipped and it might smell, but the Gurnz is still your basic building unit. It can construct level one buildings and level two HUBs, allowing you to tech up to the next level of units.

==Tales from the Front== 
January 23, 3132 AD 
Denmark Campaign 
24 km outside URC held Helden 
(Formerly Odense)



	Ã¢â‚¬Å“The Vladost battle tank's control room sounded like a better choice to me when I first joined up. It was either that or the helo division. And every single time I took the plane to Kong I spent the entire time in the head, retching. 

	It had 'sounded' good. Now I was seriously reconsidering that. 

	Ã¢â‚¬Å“Explosive! Explosive rounds, damn it!Ã¢â‚¬Â Victor kicked me in the back. He was well situated, his head sticking out of the copula, his legs right near my upper back and head. I put my eye against the looker and spotted the enemy bots round the hill. I fingered the trigger, my other hand telling the auto-loader to give us a explosive. A bolt of plasma burnt into the side of our tank and I yelped as the room became boiling hot for a moment. Then the damage control systems kicked in and the air reached a livable temperature. For revenge, I pulled the trigger. 

	BOOM! BANG! I swear the second cannon sounds different from the first. I swear it, but neither the driver, nor my commander believe me. No matter. The explosive shell smashes into the ground between the two bots and smoke fills my scanner scope. A secondary explosion kicks up more dirt. The second shell hits and another explosion kicks up even more dust. The dust clears and I grin. Both bots are down. 

	WHAM! Something slams me in the back of my head. Smoke fills the cabin and Victor is screaming something. I reach for my escape hatch. It doesn't open. Victor kicks me in the back, scrambling out of his hatch. The gunner isn't screaming. I smell burnt meat. Another something slams into the tank and my head smashes against the wall. Then hands are grabbing me, pulling me up. I scramble out, stars dancing in front of my eyes. 

	Victor throws me off the tank and I hit the dirt, wheezing. He is about to jump when the tank itself explodes violently. I stand, my head ringing, blood running down the side of my head. Bits of the tank land all around me, piffing into the dirt ground. My knees knock together as it hits me. Victor might have been a bastard...and Hoe, the gunner, he'd been all right...

	I hear the stomp stomp stomp of URC mechs. I turn around and see the four mechs that had hit us...bastards had crested the hill we were sitting against. Where was the rest of the battle group! I turned, trying to see some tanks.

	None. I was alone. 

	I turned back to the robos. I supposed the plasma would be quick...I closed my eyes.

	And that was what saved my eyes. A flash, brighter than anything I thought possible, burst through my eye lids. I hit the ground and heat washed over me. I opened my eyes in time to see the robos fall down. A brilliant, beautiful cloud rose above the city of Odense. It was shaped like the mushrooms I used to eat when I was a kid. 

	Ã¢â‚¬Å“Holy shit,Ã¢â‚¬Â I muttered. Ã¢â‚¬Å“They did it. They really did it.Ã¢â‚¬Â 

	So thats why we had been stationed here. Thats why the GD had pulled back. I felt cold. If I had known how bad it was going to get...I'd have deserted. But at the time I only known one thing: The war had gone nuclear.&quot;

==Level One: Air==

'''Doppler: Radar/Sonar Helo'''
[[Image:Doppler.jpg|left|100px]]
	The helicopter is small, cheap and can be used to patrol the area around your base, extending your radar and sight range. Useful as a mobile spotter and a submarine finder, the Doppler can make your day much easier. 


'''Cossack: Interceptor Helicopter'''
[[Image:Cossack.jpg|left|100px]]
	Equipped with air to air missiles, the Cossack is perfect for taking down the enemy bombers. Capable of destroying most enemy aircraft (assuming the Cossack team has numbers on its side) the Cossack is a must have for total air superiority. 


'''Khan: Attack Helicopter'''
[[Image:Khan.jpg|left|100px]]
	The Khan is a gunship, equipped with deadly heavy machine guns, the Khan is suited to destroying enemy patrols and harassing enemy forces. Remember to pull it back before it's fuel supplies run low, or it will not be coming back from it's mission. Best used in packs to destroy isolated pockets of resistance, hunt down fleeing enemies, or blasting apart undefended buildings.


'''Grund: Light Transport Helicopter'''
[[Image:Grund.jpg|left|100px]] 
	A swift transport, the Grund is capable of trasnporting light units. Unfortunately it's speed is balanced by a complete lack of armor, guns or anything that will allow it to survive enemy attacks. Use it to ferry unit's around safe territory, or carefully sneak it through the enemy's defensive line.

==Tales from the Front==

 December, 25 3132 AD. GD 'tactical withdrawal' Somewhere over Siberia. 

	I bounced in my cockpit and watched my army fall back. It felt bad, It felt worse than the day Moriscaw was plasma bombed by the robo bastards. It felt even worse than when my first son had died. 

	Ã¢â‚¬Å“Damn it. Damn it!Ã¢â‚¬Â I muttered, keeping my voice off the radio. The rest of my squad didn't near to hear me going to pieces. Hell, I didn't need to hear me going to pieces. A sudden buffet of wind shook my Cossack. That made me pay attention. Siberia killed. It had killed when my ancient ancestors had fought the Nazis, it had killed before them...it would kill after I and mine had gone by too. 

	But the one thing it wouldn't...couldn't kill was the robos. URC mechs marched underneath us, bolts of plasma lighting up the ground. Occasionally one of our tanks would fire back...more often, they would explode brightly. Like a star in the night sky. 

	Ã¢â‚¬Å“Contact!Ã¢â‚¬Â Kim shouted, his voice crackling over my radio. I snapped back to focus, my training taking over. The red dots on my radar screen were going to fast to be tanks, too slow to be fighters. Bombers...and the computer in my radar projected their course to the bridge. Shit! 

	Ã¢â‚¬Å“Form up on my mark,Ã¢â‚¬Â I said. Ã¢â‚¬Å“Don't let a single one of those bombers get past!Ã¢â‚¬Â 

	I moved my joystick and the Cossack moves about. I see the bombers. Wide, engines glowing. They're not even trying to hide! I grin, reading my heat seeking missiles. 

	Ã¢â‚¬Å“Missiles away!Ã¢â‚¬Â I shout. The missiles streak towards the bombers. One impacts, then the other. The bomber falls out of the sky, trailing smoke. It hits the ground and it's plasma hold lights up with a bright green flash. Missiles streak past me as my wingmates open fire. Two more bombers go down. 

	Ã¢â‚¬Å“This is too easy...Ã¢â‚¬Â I murmur. I let go two missiles and the last bomber explodes. 

	I wait for the shoe to drop. 

	Nothing. I bring my Cossack back to the patrol route. 

	Ã¢â‚¬Å“Hey, why can't they make it this easy each time?Ã¢â‚¬Â That's...Vlad. Then warning indicators flash and his helo's signals vanish. A flash bursts through my windshield and I look to the side. Vlad's helo, whats left of it, falls to the ground. 

	Ã¢â‚¬Å“Missles! Break, break break!Ã¢â‚¬Â I shout. Another one of the helo's, this time Kim's, explodes. Ã¢â‚¬Å“Fall back!Ã¢â‚¬Â 

	The remains of my squad peels towards the bride. As we leave the operational area, my radar detects more URC bombers heading towards the bridge.


==Level Two: Land== 

'''Khrushchev: Medium battle tank'''
[[Image:Krushchev.jpg|left|100px]]
Armed and armored like a...tank, the Khrushchev is a deadly weapon on the battle. Slow, but heavily armored, the Khrushchev is armed with two cannons and a mini-gun that can take down a verity of targets. The Khrushchev, in numbers, is a platform capable of handling any number of enemy ground units. Beware: It's lack of mobility and can lead it it's doom through enemy flanking maneuvers and sneak attacks. 


'''Irveranguz: Medium Missle Tank''' 
[[Image:Irveranguz.jpg|left|100px]]
With arching missiles and heavier armoring, the Irveranguz can destroy enemies located behind hills, around corners and so on. Use it to back up the direct fire power of your tanks, and to control crowds through it's high AOE. 


'''Kirovich: Medium Laser Tank''' 
[[Image:Kirovich.jpg|left|100px]]
With no less than four short range, high powered lasers, the Kirovich is a fast assault raider, capable of burning down enemy buildings in a flash. Beware: High energy usage make this tank a nuclear powered beast that can destroy your economy. Make sure your power plants are running at full tilt. 


'''Aurora: Bombardment Artillery'''
[[Image:Aurora.jpg|left|100px]]
The Aurora brings death at long range, with two massive barrels and an infinite amounts heavy shells. Unlike its level 1 counterpart, it can fire horizontally. This feature, if used with care, can be used to devestate aproaching armies if their positions are wel known. It is also slower and more unwieldy than the Pavost light artillery. Use it with care, and be sure to protect it, as it is an expensive investment. 


'''Tchernia: Medium Ion Cannon'''
[[Image:Tchernia.jpg|left|100px]]
A larger, longer ranged, more heavily armored version of the Tchernia LT, with duel cannons, the Tchernia is a non-lethal weapon that can turn the tide of battle by paralyzing your enemies and styming their advanced. Guaranteed Ã¢â‚¬Å“Blitzkrieg StopperÃ¢â‚¬Â 



'''Yatioa: AA TankÃ¢â‚¬Â
[[Image:Yaota.jpg|left|100px]]
A heavy Flak wielding tank, this tank is capable of destroying URC VTOLS en mass. Keep it protected from a ground assault. 



'''Yakovitch: ECM Tank''' 
[[Image:ECM.jpg|left|100px]]
Equipped with nothing but a machine gun, the Yakovitch is still one of the most powerful weapons in your arsenal. Capable of hiding an entire attack force from enemy radar, the Yakovitch is the way to sneak your army behind the enemies gates.



'''Vaikovic: Minelayer Tank'''
[[Image:Minelayer.jpg|left|100px]]
Capable of building light and medium mines, use the Vaikovic to cover the entrances into your base. Capable of stopping all but the most determined (or suicidal) enemies, mine fields are your best friend when it comes to defense. 



''' Khrushchev IAMP: Amphibious Battle Tank'''
[[Image:Anphib.jpg|left|100px]]
Equipped with standard suicide pills and self contained air supply, this version of the Khrushchev is perfect for delivering a nasty water born shock to the enemy. 

 

'''Irveranguz IIAMP: Amphibious Missile Tank'''
[[Image:Amissle.jpg|left|100px]]
With watertight seals for the missiles and an air tight command cabin, this version of the Irveranguz can cross waters and support your Amphibious Khrushchevs



'''Kurzt IAMPT: Amphibious Torpedo Tank'''
[[Image:Torp.jpg|left|100px]]
The only amphibious tank that comes without suicide pills, the Kurzt is capable of firing torpedoes at sea targets. Use them to cover your amphibious assaults. 



''' Yatioa IIAMP: Amphibious AA Tank'''
[[Image:AAA.jpg|left|100px]]
An anti air tank that's also capable of crossing water passages. Use them to create a all purposes water born assault.

==Tales from the Front==

August, 1, 3156 AD. Tokeyo Defense Campaign. 10 km outside GD held Yokohama


	Five helos flew over head. They were...I grinned. I wondered if Dyana was in one of those. She and I had met...was it a year already? I had been in the Siberian pull back, the Denmark campaign...

	Had it been a decade? A decade? This war had been going on longer than my sister had lived. Longer than Dyana's son. Now that had been a sobering conversation. 

	Ã¢â‚¬Å“Hey! Mal! Radio just chimed in and we're moving out!Ã¢â‚¬Â 

	I sat up, folding the mirror I had been using to aid my sunbathing. The thing they didn't tell you about Khrushchevs is that not only are they excellent main battle tanks, awesome engines of destructions and so on and so forth, but also amazing sunbathing...rest...things. 

	Maybe the sun was cooking my brain instead of just my skin. 

	Ã¢â‚¬Å“Moving where?Ã¢â‚¬Â I asked, walking across the hood of the tank to my copula and slipped into my seat. Jaeger and Henekle got into their positions, Henekle near the front of the tank, next to the machine gun. She would be getting us where we were going. Jaeger sat in front of me, in a nicely kick able location. I refrained from abusing my command privileges such, instead slapping the side of the turret, grinning. Ã¢â‚¬Å“Where to!Ã¢â‚¬Â 

	Ã¢â‚¬Å“Point A-5,Ã¢â‚¬Â Henekle said. 

	Ã¢â‚¬Å“Full speed!Ã¢â‚¬Â I said. Around us, the rest of the division was moving out. Some Tagia's paved the way in front of us, followed by some older Vladost tanks. I remembered when Vladosts had been the forefront of tank warfare. That was back when the robos had used light, four legged bots. Now they had started to use larger, two legged ones. They hit harder and packed more armor...but less armor than our stuff. They're first strikes against Yohohama had been rebuffed, their flanks broken by Iron Rain. Thats what we called the 432nd artillery division. Iron Rain. 

	The other Khrushchevs moved along our sides, each of their commanders relaxing in their cupolas. There was a jovial air to our movements. As if we were driving to a party instead of an attack. The URC must have regretted attacking the Japanise Islands by no- 

	A Tagia in front of us exploded. I ducked down, heart hammering in my chest. What the...bombers! 

	But the sky was clear. Two helos flew over head, as if to make sure. I knew Dyana wouldn't let a single robo fla through, let alone a tac bomber.

	This time a Khrushchev next to me cooked up. It hit me, the same time it hit our commanders. 

	Ã¢â‚¬Å“You have entered a mine field at point A-3. Halt and wait for the sappers. Wait for the sappe-Ã¢â‚¬Â

	Another Khrushchev cooked up. That one had been sitting still. A green bolt burned its way across my eyes and I pointed to the side, shouting at Jaeger. For a moment I slipped back into Russionease, but caught myself. My tank crew just had to be Repatriated East German. This time I got it right, but it had cost us valuable seconds. Another vehicle cooked up, a Kirovich. 

	Ã¢â‚¬Å“Robos! That way!Ã¢â‚¬Â I pointed. Not exact, but it got Jaeger to turn the turret. Cannon reports sounded. The turret turned and I saw the mechs full on. Two leggers, all of them. Most were plasma...but a single one had a shotgun slung under one side. 

	Shit. 

	The shotgun blasted and the cannon rounds blasted into our sides. 

	Ã¢â‚¬Å“Henekle, move us backwards!Ã¢â‚¬Â I shouted. Ã¢â‚¬Å“Jaeger, bag us that shotgunner!Ã¢â‚¬Â

	Two other Khrushchev commanders had the same idea. The shotgunner exploded. The URC attack peeled off, but the damage had been done. Behind us, explosions sounded. The radio squawked. 

	Ã¢â‚¬Å“Tank group, retreat back to Yotohama base. Total URC attack is under way. Repeat. Total URC attack is under way!

==Level Two: Air==
'''Zukov: Air Attack helicopter'''
[[Image:Inter.jpg|left|100px]]
	Deadly air superiority fighter, this is the heavy fighter can take down enemy planes nicely and survives longer than the Cossack. 


'''Kharkrov: Cluster Bomber''' 
[[Image:DFA.jpg|left|100px]]
	Capable of saturating an area with high yield explosives, this helo is affectionately referred to it's pilots as 'Cluster&lt;explative deleated&gt;er' Because it...er...screws the enemy up.


'''Kharkrov II: Ground Attack Helicopter'''
[[Image:GAH.jpg|left|100px]]
	A rearmed Cluster Bomber, the Kharkroc II is capable of sticking around and delivering missile after missile to it's targets. Use it as a harassment or harrying role, capable of slowing or even destroying an undefended convoy. 


'''Orsk: Tactical Bomber'''
[[Image:Orsk.jpg|left|100px]]
	Where the Kharkrov is a weapon on massive destruction, the Orsk is a scalpel. Capable of destroying a single target then return home, the Orsk is useful for taking out a radar dish, a factory...whatever needs destroying. 


'''Murnmansk: Anti-ship Bomber'''
[[Image:TBH.jpg|left|100px]]
	The terror of the high seas, the Murnmansk is capable of destroying enemy shipping. Dropping a torpedo into the oceans at high speeds, the Murnmanks should be used to cover for your navy.

==Tales from the Front==

August, 1, 3156 AD. Japan Defense Campaign. 10 km above GD held Sydney.


	Ã¢â‚¬Å“Shit!Ã¢â‚¬Â I muttered, jerking on my stick. The missile locks blared. BEEP! BEEP! BEEP! I thumbed the flare button and the lock on failed. As I turned my Zukov round, I saw the base outside my window. 

	Bedlam. The robos were rolling through the defensive line, plasma fire and shotgun blasts shattering buildings, blowing apart construction vehicles. Then I saw mechs fall under cannon and laser fire. The tank group had returned. It was smaller...smaller enough to make my heart falter slightly. Mal might be in one of the tanks left back in that damned mine field...

	I spun the Zukov around again, detecting inbound targets. Bombers. I triggered my missiles and they smashed into the air. Both hit and the first URC bomber went down. They're escort showed up, two fighter VTOLS breaking away from the fighter swarm. They fired and the missiles shot towards me and my wing mate. I dropped, turning off my blades at the right moment. The missile missed.

	My wing mate wasn't that lucky. His Zukov exploded, smashing into the ground. I fired my next pair of missiles, locking onto both VTOLs. My missiles peeled off and struck both robos. One blew up and smashed into the ground. The other survived with minor damage, darting through the air at me. It fired it's missiles. In an instant I saw them heading towards me. I tanked on my stick, pulling off a maneuver that would have sent me into the ground...if the missile hadn't hit me first. 

	A warning blared in my ears and slammed my fist down on the eject. The cockpit exploded...then I shot down, away from the Helicopter, which smashed onto a URC mech. The mech, to my fury, didn't explode. I hung from the silk, looking over the battlefield. The URC bombers flew over the base. 

	A flurry of plasma tore though he ground, buildings, tanks. People. Smoke began to rise as URC flame throwers began to burn up the base. I saw the wrecks of half our tanks, the buildings burning, the helos downed or fighting a desperate battle in the sky. 

	But the URC simply had more. They always had more. 

	I hit the ground, rolling with the impact. I disengaged my parachute, trying to get as far away from the base as possible as I could on foot. I felt the ground shake, clomp, clomp, clomp. I turned around, slowly. A URC two legger stood, it's plasma barrels glowing. It fired again, the bolts of plasma  incredibly hot. I gasped, ducking as the URC stepped over me, walking forward. 

	I stood and ran. The sky above me was filled with URC planes. The only other thing in the air...was smoke. 

	I got to the perimeter, where a massive hole had been torn by a URC explosive. I ducked out and looked around. Sydney was north...but where was north? A Khrushchev rolled past me, firing backwards as it drove forward. A plasma bolt impacted in its back and it exploded, the blast knocking me off my feet.

	I stood up, brushing my shirt off. I chose a random direction, any direction away from the base...and ran.


==Level Three: Land==


'''Ural: Heavy Battle Tank'''
[[Image:Ural.jpg|left|100px]]
The Ural. A name that can inspire fear in the enemy. The Ural is a heavy death platform. Equipped with a staggering level of firepower, the Ural is a leviathan, capable of rolling over the enemy if used en mass. A single Ural can strengthen a battle line, while a battle line of Urals is deadly beyond belife. Warning: The Ural is equipped with two front cannons, two side turrets and a double barreled turret. The only way every gun can be fired would be if the Ural was facing straight forward. Ural is weak if flanked. Check your corners.

[[Category:Expand_and_Exterminate]]</text>
      <sha1>14ex3r88bb0ic6zf0xmqpgfja71sujl</sha1>
    </revision>
  </page>
  <page>
    <title>GEM</title>
    <ns>0</ns>
    <id>1226</id>
    <revision>
      <id>21283</id>
      <parentid>20591</parentid>
      <timestamp>2011-02-24T16:55:12Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10348">{{historical}}

G/E/M stands for Galactic Empire Mod.  The mod is based on Imperium Galactica, a space strategy game from 1994.  It will incorporate many ideas from the original game.

Uhh... I'll add more info here later.

The mod is based around the premise that the most fun and interesting battles in TA usually take place with 20 or fewer units on each side.  At this point it is still possible to micromanage units to use them to optimal effect, but there is also probably more than one battle taking place simultaneously and all that stuff.

Anyway, if that's the best part of the game, why should it be relegated to the opening 5-20 minutes of the game?  Beyond that point, tactics become less and less important, when you basically just throw massive bunches of units at each other.  Sure, you can split your group into two forces and do a pincers movement or something, but by and large a lot of battles are simply too large to be able to use every unit to its optimal effectiveness.

What G/E/M will do to address this situation is to make every unit you build important.  A single destroyer might represent total domination over a fair-sized segment of the map - at least, for a time.

Fighters, while being powerful attackers and having enough hit points to survive anywhere between 5 and 20 direct hits, have no radar and a poor line of sight.  In other words, you *must* either have a specific target in mind or otherwise use them as part of a battle group.  Destroying your enemy's only ship with a radar or good line of sight might mean he is forced to retreat because it will be difficult to target these small ships without radar tracking for pilots.

Bombers are superior anti-ship units but are relatively slow, ungainly, and highly vulnerable to fighters.

Destroyers serve as scouts, featuring a moderate to long line of sight, and also as anti-fighter platforms.  In numbers, they are also more than capable of defending themselves against larger ships, although their weapons are not specifically designed for that sort of combat.  These ships have many turrets with wide firing arcs - however, usually only one or two turrets will have an overlapping arc, so a single destroyer is vulnerable to even a moderate-sized group of fighters.

Cruisers feature a small to moderate line of sight but have radar which enables them to serve as logistics support in battle.  They are your mobile early warning system.  Cruisers feature powerful anti-ship guns, generally having only a limited firing arc.  In other words, they are superior anti-ship attackers, but can be outmaneuvered by a clever opponent.  Their anti-fighters turrets are strong but have very limited arcs; in fact, most cruisers' anti-fighter weaponry is also limited by having a relatively small firing arc.  Cruisers are the cheapest way to ensure an area is protected from your enemies.

Flagships are powerful warships with good line of sight, good radar range, a wide assortment of weapons, and are (or, hopefully will be) capable of building fighters and other small/utility ships while mobile.  They also have repair bays for battle-damaged fighters.  They are ultimately a mobile base, but their large size and slow movement makes them vulnerable to an opportunistic opponent.  Guard them well, but make no mistake: these ships are not an easy target to bring down.

Construction units are your means of, uh, constructing things.  They build structures but are not capable of repairing or assisting construction.  All units, except fighters, have a slow auto-repair that begins when the unit is not in combat.  Advanced ships can repair themselves (ie, recharging shields) even during combat, albeit not very quickly.

Command Ships are basically the same thing as a Commander in TA.  Basically they are the most powerful mobile unit, although obviously not featuring d-guns or that sort of thing.  However, although these ships will be overwhelmingly powerful compared with most other ships, they do have weaknesses, and more importantly, have a much slower auto-repair compared with other ships of its size.

Tanks are ground units.  They are required in order to secure an enemy base.  These come in several different flavours, depending on what you need them for.  There will be no more than 6 ground units available even at the top of your tech tree, as the game focuses mainly on starship combat.

Projectors (ie, Ion Projector, Plasma Projector, Meson Projector) are expensive but extremely powerful anti-ship buildings which are built on the ground.  They are very large compared to most other structures you can build, and are literally capable of holding off an entire invasion force.  These units have extra damage versus transport ships.

Transport ships are what is required to move tanks around the map quickly.  They can be used to bypass impassible terrain, whether natural or artificial.  Each transport can carry quite a few tanks.

Barracks, Fortresses, and Strongholds are ground structures which are your only means of defense against tanks besides other tanks.  G/E/M has no infantry-like units.

Satellites are units which have a long line of sight and radar, and the more advanced ones are even radar-invisible.  However, they are virtually defenseless against any kind of attack, and enemies will use this to their advantage.  Literally a single fighter can destroy a satellite in a matter of a minute or so.

Trade stations generate income for your empire.  Many low-tech or smaller ships can be bought with the credits trade stations provide.  Trade stations do not provide a steady flow of credits, however, and it will vary depending on what map you're playing on.

Refineries will allow you to purchase the various metals required for building advanced ships, then turn them into a refined, usable product which is then sent to your shipyards and construction ships.  If these are placed in areas which are naturally metal-rich, their output is increased.

Residences and Colony Bases generate a steady supply of credits from colonists.  Don't worry, in the event of an attack they are quickly evacuated and won't return until the crisis is over!

Space Bases provide defense for an area.  It would likely be wise to build one of these over your bases when you have the credits for them, since projectors alone can only defend very well against larger ships.  Space bases, on the other hand, are not only potent adversaries for large ships, but also come with a full complement of anti-fighter defenses.

Shipyards are lightly defended construction platforms which are available in a variety of sizes and tech levels depending on what you want to build with them.  For instance, you might build a shipyard designed specially for building fighters quickly, or you might build one designed for larger ships, or you might build a general-purpose one.  The general-purpose one will, of course, be the most expensive and will be a major target.  As I mentioned in passing earlier, it will be impossible to assist the construction of ships (or any other unit/structure).  But, never fear, the entire mod is being planned around this, so I'll be making sure that it won't take all day to get a half-decent fleet assembled.

Factories construct ground units such as tanks and construction vehicles.

Colony Hubs are the central part of any base.  If you lose your colony hub, your  storage will be greatly reduced.  These structures have a lot of armour and even some minimal anti-tank cannons.

Even the weakest units in G/E/M will be capable of surviving reasonably intense combat intact.  A destroyer, for instance, might have 1000 hit points and be capable of dealing out 100 damage every 10 seconds.  This is just a very rough estimate that I haven't even calculated for, so take that with a grain of salt.  Anyway, fighters will be able to survive several direct hits from most weapons.  Because ships repair slowly over time, but cannot be repaired all at once by construction units, the fact that you managed to inflict 90% damage on a flaghip before your attack force was destroyed is not necessarily a defeat - you might be able to return 5 minutes later and deal a final blow.  Or, you might force a retreat, allowing you to take control of whatever part of the map it was protecting.

Ships in G/E/M will be relatively slow from what you might imagine.  They won't move around at a snail's pace, like a sumo compared to a flea, but you will need to ensure that you have enough ships spread out over your territory that you can respond quickly to threats.  You will not be able to make an all-out attack without exposing yourself to serious repercussions - you'll be leaving yourself wide open for a counterattack.  Similarly, you will have to consider carefully moving ships around to protect an area under attack - what if it's only a decoy from the real attack?  Does your opponent have enough resources to attack two fronts simultaneously?  What ships would best be used to cover your defense?  Should you &quot;accidentally&quot;  expose your all-important Command Ship to bait your opponent into a trap?

Furthermore, most ships will be incapable of firing on any ground targets EXCEPT projectors (ground-based anti-ship guns) - this is where ground warfare comes into play.  You must protect your transports so that they can begin dropping your ground units behind enemy lines and thereby allow you to attack your enemy's economy and production.

In G/E/M, you must wage war on two fronts - and losing on either of them could take you out of the game permanently.

Progress on initial beta:

Planned ships: 15
Completed ships: 10

Planned other/utility: 2
Completed other/utility: 0

Beta estimated completion date: sometime in 2006 (a more specific date will be available when I know what it is ^^)

The full G/E/M tech tree consists of approximately 50 units and structures (I have an exact number somewhere, but I can't think of it offhand)

This mod will feature much more detailed models than any TA or Spring mod has to date.  Here's a rough guide of how many triangles per ship you'll find in G/E/M:

Fighter: 1000 or less&lt;BR&gt;
Bombers: ~1250&lt;BR&gt;
Destroyer: ~3000&lt;BR&gt;
Cruiser: ~4500&lt;BR&gt;
Flagship: 6000-8000&lt;BR&gt;

Work on G/E/M began in early November of 2005.

----

Back to [[Mods]]
[[Category:Mods]]

{{Category:Mods}}</text>
      <sha1>b2w5ihrj0iu5y5tplj9pbrxbvjzr5wf</sha1>
    </revision>
  </page>
  <page>
    <title>GIMP</title>
    <ns>0</ns>
    <id>3382</id>
    <revision>
      <id>26872</id>
      <parentid>26533</parentid>
      <timestamp>2013-03-23T18:50:10Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>Map tools -&gt; Map Tools</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="413">= GIMP =
== Working with alpha channels ==
Basically you have to only have one layer in your image, and then add a mask, the mask will be the alpha channel, when you save the image it will have correctly stored the colour values for all three channels. its super important to only have one layer, or a flatten operation will occur and your RGB layers will have been modified before export.

[[Category:Map Tools]]</text>
      <sha1>edlv5csa1j3sxnac6k1mowjoxiulwsh</sha1>
    </revision>
  </page>
  <page>
    <title>GSoC: Project proposals 2012</title>
    <ns>0</ns>
    <id>3210</id>
    <redirect title="Project proposals" />
    <revision>
      <id>23721</id>
      <timestamp>2012-03-02T18:57:45Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>moved [[GSoC: Project proposals 2012]] to [[Project proposals]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="31">#REDIRECT [[Project proposals]]</text>
      <sha1>1ebt4f9ngaasbmmy5v3hbfiddyg28g0</sha1>
    </revision>
  </page>
  <page>
    <title>GSoC:student application</title>
    <ns>0</ns>
    <id>2837</id>
    <revision>
      <id>23789</id>
      <parentid>23788</parentid>
      <timestamp>2012-03-04T07:51:12Z</timestamp>
      <contributor>
        <username>Midknight</username>
        <id>2604</id>
      </contributor>
      <comment>whitespace</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2190">This is the student application for [[Google Summer of Code]]. 
If you're a prospective student, then please fill out this template and post your application [http://springrts.com/phpbb/viewtopic.php?f=60&amp;t=21879&amp;p=515890#p515890 in this thread].


=Student Application for GSoC=

===Short introduction of yourself===

* Name:


* Email:


* Spring Forum user name:


''If you don't have one, please make one [http://springrts.com/phpbb/ucp.php?mode=register here]''
* IRC or Spring Lobby nickname:




===Your Project===

* What's your goal? What do you want to archive?


* Why did you select this specific project?


* What makes you suited to doing this project?


* How much time do you plan to invest in the project before, during, and after the Summer of Code?




===Schedule===

*Please provide a plan of how you will spend the time on the task. You should aim to define a milestone roughly every week.


''Please be realistic -- You will be expected to meet your schedule during the Summer of Code. You will also be required to issue weekly progress reports for the duration of GSoC.'' 
* Do you have any other commitments during the summer? Bear in mind that your commitment to the Summer of Code is full-time. If you have exams or other commitments that take place during the Summer, make sure you factor those into your schedule and plan to catch up later.


* After the summer, do you envision the project being extended into the future? No concrete plans are required here, just some ideas of where you might like to take the project once the Summer of Code has ended. 




===Your Skills===

* What platform do you use to code? Hardware specifications and operating system


* Did you code in C++/Lua, yes/no? what's your experience? Did you contribute to other similar projects?




===Spring and You===

* Have you been involved in Spring development in the past? What was your contribution?


* Have you worked on other open-source projects in the past? If so, which, when, and in what role?




If you need help filling out the application, ask on the forum or in the IRC/lobby. Please don't hesitate to [[Google_Summer_of_Code#Contact|contact]] us!



[[Category:GSoC]]</text>
      <sha1>6j1k52i80hbmwvob159zdeu33pkh79z</sha1>
    </revision>
  </page>
  <page>
    <title>GSoC Engine resource abstraction</title>
    <ns>0</ns>
    <id>2830</id>
    <revision>
      <id>23686</id>
      <parentid>18917</parentid>
      <timestamp>2012-03-02T17:54:59Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="965">= GSoC idea: Engine level abstraction of resources =

== Why ==
Current hardcoded resource system generates defects and can produce effects which are hard to workaround for game designers which aren't willing to use it.

== What ==
The old system needs to be replaced, the new one should be flexible enough to reproduce everything that the old system did and be able to imitate the behaviour of most common RTS game titles.

The engine's Lua API to fetch resources will have to be adapted to the new system and new calls will have to be added to modify its state.

== Required skills ==
* Knowledge of C++
* Knowledge of Lua/C API bindings

== Difficulty ==
Estimated: medium to hard

== Technical details ==

* The new system should completely supersede the current
* Sync check should be adapted to hash the new resource system
* Hardcoded assumptions such as cost-based targeting should be removed completely and replaced with something better

[[Category:GSoC]]</text>
      <sha1>01xfoddlst2ahluk1sdv8hqmhf26ps6</sha1>
    </revision>
  </page>
  <page>
    <title>GSoC Ingame lobby</title>
    <ns>0</ns>
    <id>2831</id>
    <revision>
      <id>29088</id>
      <parentid>29087</parentid>
      <timestamp>2015-01-10T16:26:35Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1425">{{deprecated}}

This was implemented/done by gajop http://springrts.com/phpbb/viewtopic.php?p=561799

= GSoC idea: Basic ingame lobby =

== Why ==
All existing Spring interfaces (lobbies) are either difficult to customize for game developers or have a different look and feel from the game itself and require focus switch from the game itself to operate.

== What ==
A new lobby should be implemented with customization and control in mind, using Lua scripting and reusing Spring codebase when possible. For the lobby itself luasocket could be used and it is then implemented in lua to allow easy customizing. For the lobby and loading game / map an additional lua state should be added.

Optionally, the engine's start screen should be replaced and integrated with it.

== Required skills ==
* Knowledge of C++
* Knowledge of Lua
* Knowledge of Lua API/C bindings
* Knowledge of basic OpenGL programming

== Difficulty ==
Estimated: hard

== Technical details ==

* ensure Spring can clean up properly
* ensure Spring can change game and map during program runtime (requires that some singletons be converted to Spring's *handler pattern)
* create a new Lua context or initalize current context earlier in the code and rewrite Spring's start interface using Lua scripting.

There is some potential of re-using/adapting libSpringLobby for the server interaction. Contact koshi in our IRC/Lobby channels if you are interested.</text>
      <sha1>57t8gp5c707u2b1ailw97774gm54mf3</sha1>
    </revision>
  </page>
  <page>
    <title>GSoC Limited play area</title>
    <ns>0</ns>
    <id>2827</id>
    <revision>
      <id>23689</id>
      <parentid>18921</parentid>
      <timestamp>2012-03-02T17:55:15Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1089">= GSoC idea: Limited play area =

== Why ==
Current spring map formats have a hardcoded rectangle geometry. They also provide very limited support for defining aesthetics of the surrounding environment outside the play area.

== What ==
The new system should allow the map to restrict the playable area to a subset of the global area, possibly adding support for multiple shapes and/or non-rectangular shape restrictions.

The restriction shapes should be readable and changeable mid-game through the engine's Lua API. Proper handling of units which are suddenly off-map needs to be implemented.

== Required skills ==
* Knowledge of C++
* Knowledge of Lua/C API bindings

== Difficulty ==
Estimated: medium

== Technical details ==

Most of the current code is based on the assumption that the map's top left is always at (0, 0) and bottom right at (width, height). The most difficult part will be identifying all places that check for point-in-map condition and determining whether they should be converted to the new limited map area or left as-is (e.g. for drawing).

[[Category:GSoC]]</text>
      <sha1>cpq6fan2qt9vx35o74gzwhwtjuev00s</sha1>
    </revision>
  </page>
  <page>
    <title>GSoC More AI interfaces</title>
    <ns>0</ns>
    <id>2833</id>
    <revision>
      <id>23864</id>
      <parentid>23863</parentid>
      <timestamp>2012-03-07T19:14:57Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1122">{{deprecated|this page is deprecated, spring already has many ai interfaces}}

= GSoC idea: More AI interfaces =

== Why ==
The Spring engine is already a popular engine for academic projects to study Artificial Intelligence. This project could enhance Spring's attractiveness to developers and teachers wanting to explore or teach about AI research.

== What ==
The Spring engine's AI interface supports bindings for multiple languages, currently C++, C and java are supported.

Bindings for more languages and/or virtual machines should be added to allow broader AI developing audience (for example: Ruby, Perl, JavaScript, Python, D, Go, Mono, LLVM, Parrot).

== Required skills ==
* Understanding of the Spring AI interface
* Knowledge of C
* Understanding of the target language/virtual machine

== Difficulty ==
Estimated: medium

== Technical details ==

The current C AI interface has been structured so it acts as a bridge between the engine and the various AI language wrappers, since automatic wrapper generators have been tried in the past and found infeasible, manual creation is necessary.

[[Category:GSoC]]</text>
      <sha1>pscerrnop9epy8bqkh3i8j5p3y3dqok</sha1>
    </revision>
  </page>
  <page>
    <title>GSoC New map format</title>
    <ns>0</ns>
    <id>2838</id>
    <revision>
      <id>23740</id>
      <parentid>23739</parentid>
      <timestamp>2012-03-02T19:21:05Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="629">= GSoC idea: A new map format. =

== Why ==
Spring has at the moment two map formats. SM2 which is used mostly but old and requires a lot of storage. SM3 is newer but still isn't perfect and doesn't have brand new technologies included, like most new commercial map formats have.

== Required skills ==
* C++
* OpenGL

== Difficulty ==
Estimated: medium to hard

* Design a new map format, communicate with the community
* Implement a first draft
* Extend the draft until the map format is playable
* Add visual improvements to the map format 

[http://springrts.com/phpbb/viewtopic.php?f=61&amp;t=21910 FORUMLINK]

[[Category:GSoC]]</text>
      <sha1>53623b7bizjuyy08glsfw0ud6wvsvu7</sha1>
    </revision>
  </page>
  <page>
    <title>GSoC New rendering system</title>
    <ns>0</ns>
    <id>2834</id>
    <revision>
      <id>23903</id>
      <parentid>23902</parentid>
      <timestamp>2012-03-08T08:26:09Z</timestamp>
      <contributor>
        <username>Jk</username>
        <id>2584</id>
      </contributor>
      <minor/>
      <comment>/* Difficulty */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1221">= GSoC idea: New Rendering System =

== Why ==
Spring rendering engine includes many fixed function pipeline OpenGL functions. This rendering system is becoming deprecated and is generally slower and less flexible than more modern approaches.

== What ==
Under this proposal, the rendering code should get a complete overhaul and moved into a Scene Graph.
Allowing to replace the old code optionally with shader based approaches, including techniques as normal/relief mapping or 100% GPU based rendering of particles.

== Required skills ==
* Knowledge of C++
* Knowledge of OpenGL 2.0 API 
* Knowledge of GLSL

== Difficulty ==
Estimated: high

== Technical details ==

* Refactor C++ code and classes
* Create new GLSL shaders and integrate some from Lua scripts
* Add threading to renderer
* Remove all direct OpenGL calls from synced (sim) code.
* Push more work onto GPU and use DMA transfers (VBOs) while retaining OpenGL 1.4 code path for intel chipsets
* Reduce/refactor the amount of code paths used for rendering different world objects and model types.
* Use more class overriding for new rendering code (instead of branching)
* OpenGL ES 2.0 compatibility should be aimed at where possible.

[[Category:GSoC]]</text>
      <sha1>q453ebi8hq6fyanh6vjuyhbjilerzcr</sha1>
    </revision>
  </page>
  <page>
    <title>GSoC Reconnect Host change</title>
    <ns>0</ns>
    <id>2835</id>
    <revision>
      <id>23685</id>
      <parentid>18927</parentid>
      <timestamp>2012-03-02T17:54:42Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>/* Possible Mentor(s) */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1075">= GSoC idea: Reconnect / Host change during a match  =

== Why ==
Network links can sometimes be unreliable, being able to overcome temporary issues will improve play experience.

== What ==
Spring's network model implies the existence of a server to host a battle. For various reasons the network link between host and clients can be interrupted. A system should be designed to allow manual and/or automatic switching of the game's host (possibly using an existing player after testing load handling capabilities) and manual and/or automatic reconnection from client side if host remains the same.

== Required skills ==
* Knowledge of C++
* General networking knowledge
* Understanding Spring's networking model

== Difficulty ==
Estimated: medium to hard

== Technical details ==

* During a drop-out clients can be at diverging points in simulation time (game frame), so any solution would have to determine a common point and bring all players to that to ensure sync.
* During a server switch extra measures need to be implemented to prevent cheating.

[[Category:GSoC]]</text>
      <sha1>hknnlgey5bn0ahxiuxder5bk6pctj31</sha1>
    </revision>
  </page>
  <page>
    <title>GSoC Sensor handling redesign</title>
    <ns>0</ns>
    <id>2829</id>
    <revision>
      <id>23687</id>
      <parentid>18922</parentid>
      <timestamp>2012-03-02T17:55:07Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2136">= GSoC idea: Sensor handling redesign / simplification  =

== Why ==
The Spring Engine is currently capable of significant real-world applications in the area of simulation of certain types of events or situations; a better sensor system could greatly improve Spring's applicability to an even wider range of projects.

== What ==
Currently there are a number of different &quot;sensor&quot; systems in the engine: LineOfSight, Radar, Sonar, and Seismic. Some sensors can be jammed, some cannot. Some respect terrain, and some are always circular in coverage.

A new sensor system should integrate the current LOS, Radar, Sonar, Seismic systems into a streamlined codebase, to reduce amount of code in each implementation, and it should add additional features which would be then available for all types, while improving efficiency where possible.

Preferably this all should also be faster than the current system or a compelling argument/experiment should be made that shows there cannot be a faster system with the same features.

== Required skills ==
* Knowledge of C++
* Bachelor level algorithmics knowledge
* Bachelor level software engineering knowledge

== Difficulty ==
Estimated: hard

== Technical details ==

* It should be possible to specify different behaviours for sensors of either type: is it based on e.g. simple 2d or 3d distance check or terrain raycast (i.e. LOS).
* It should be possible to use multiple different types of radar in one game (possibly current seismic sensors system could be a type of radar too, internally).
* It should be possible to use &quot;reversed LOS&quot; for the sensor (instead of sight distance, detection distance is used - like cloak now).
* There should be a generic mechanism for jamming (removing coverage of an area) and stealth (only this unit is not detectable using this sensor) for each type of sensor.
* There should be support for Lua defined areas that block sensors operating in that area, hide units in that area for certain sensors, or block the rays of terrain-raycasting sensors.
* There should be support for creating false positives and false negatives using Lua.

[[Category:GSoC]]</text>
      <sha1>nafw45eeb8sg0jlaske25026jy6se03</sha1>
    </revision>
  </page>
  <page>
    <title>GSoC Smarter pathfinder</title>
    <ns>0</ns>
    <id>2832</id>
    <revision>
      <id>23872</id>
      <parentid>23682</parentid>
      <timestamp>2012-03-07T19:23:50Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1493">{{deprecated|deprecated: kloot is already working on this}}

= GSoC idea: Smarter pathfinder =

== Why ==
Current pathfinder is rather inflexible and inefficient.

== What ==
Spring's pathfinder uses a 2d grid and is somewhat limited in functionality. A partial/full rewrite should be introduced to add support for navigating using more than 8 primary directions and selectively ignore certain unit types for performance reasons.

Spring's Lua API should be extended to allow game developers to push new nodes/links and be able to alter or delete existing ones. (for pathfinder-aware tunnels/teleporting/etc.)

Preferably this all should also be faster then the current system, or a compelling argument/experiment should be made that shows there can not be a faster system with the same features. 

== Required skills ==
* Knowledge of graphs and pathfinding (particularly navigation graphs)
* Knowledge of C++
* Knowledge of Lua API/C bindings

== Difficulty ==
Estimated: hard

== Technical details ==

The pathfinder is one of the better encapsulated subsystems in spring; generally, there will only be minor changes required in the rest of the engine, if any. There's a lot of algorithmic work to do under the hood, though:
* Cooperative pathfinding exists in a very scant form and could be greatly improved
* Navigation mesh could be introduced for better paths and faster searches - at the cost of generating the mesh and updating it online due to terrain modification

[[Category:GSoC]]</text>
      <sha1>jz8d00vrz22k93mv2i78k2klgn4fcie</sha1>
    </revision>
  </page>
  <page>
    <title>GSoC Spring IDE</title>
    <ns>0</ns>
    <id>2836</id>
    <revision>
      <id>23738</id>
      <parentid>18605</parentid>
      <timestamp>2012-03-02T19:20:30Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1089">= GSoC idea: An IDE for Spring game developing. =

== Why ==
At the moment Spring as a game engine project has no dedicated IDE for developing Spring games which would allow easier developing of Spring games. A new IDE or plugins/addins for an existing IDE like Eclipse would lower the barrier for new developers. Speeding up the developing process and managing the huge amount of files which come with most games would allow developers to focus more on the content than on organization. 

== Required skills ==
* An understanding of Springs file types.
* A knowledge of a programming language or the language of the targeted IDE

== Difficulty ==
Estimated: medium 

* Use an existing cross platform IDE (or create a new IDE)
* Add a plugin which handles common Spring file types
* A Lua plugin should handle syntax highlighting, auto-completion (including Spring functions) and text snippets
* A texture and mode editor (import/export/modify)
* Templates for projects and file types related to Spring


[http://springrts.com/phpbb/viewtopic.php?f=61&amp;t=22428 FORUMLINK]

[[Category:GSoC]]</text>
      <sha1>nlccdhldmls9t5px2tfhngafa3ry84h</sha1>
    </revision>
  </page>
  <page>
    <title>GadgetDatabase</title>
    <ns>0</ns>
    <id>2823</id>
    <revision>
      <id>30595</id>
      <parentid>26680</parentid>
      <timestamp>2017-12-26T12:11:18Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>Category lua -&gt; historical, never went anywhere (flawed concept imo)</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2787">[b]Some Logistics thoughts:[/b]

There's already been some worthy gadgets suggested for inclusion (on the thread this idea was discussed). And of course I'd like to see them online! While it wouldn't be too great an effort for me to upload them, for two reasons, I'd prefer not too: 

- First, if we get even a fraction of the potential general use gadgets that are out there onto the database, that'd be a considerable workload for me to shoulder alone. 
- Second (and perhaps more importantly), a good number of them will continue to be improved or kept up to date - and would thus be outdated pretty soon on the database, if the authors can't easily update it themselves.

For the second reason, I'd also be happy to set up shared accounts for game development groups (since you can only edit gadgets you've uploaded with your account, and there's no way of allowing other accounts edit-powers).


Since the Gadget-DB builds on the great system made for the Widget-Database, if you've ever used the Browser-based interface of that ([url=http://www.springinfo.info/?page_id=690]as seen on Springinfo[/url]) - this is the same. Accordingly, if you happen to have managed Widgets, the system is the same here :) !

some technicalities/suggestions regarding documentation of Gadgets you upload and such
Finally, the technicalities (I'm wondering if there'd be a better place for this info - maybe wiki ?):

And/or have a look at the docu I included with [url=http://gadgetdb.springrts.de/lua_manager.php?m=10&amp;id=356]the KeyboardSteering Gadget[/url]

[b]&quot;Modules&quot;[/b] - As pointed out repeatedly, a lot of gadgets actually require multiple files, and potentially entries in unitdefs (or whatnot) to work properly. Thanks to the setup vbs has made though, it is trivial to upload multiple files and specify different places for them to go different :).

I would suggest that where eg unitdefs are required. I realise anyone more savvy with lua will not require this per se - I think with a little extra effort though, we can keep the database accessible to people with little grasp of lua.

In that vein, the following also seem a pretty much &quot;must-have&quot; to me:
As well as including an &quot;Api&quot; text file explaining how the gadget interfaces with the rest of Spring:
- ie what unitdefs it needs;
- any &quot;calls&quot; it requires (ie global vars be set) from non-generalisable seperate gadgets;
Or to pick up your example:
- what info it passes on to GUI elements;
- CMDs it depends on being given, etc.

Finally, I'd suggest some categories (if you want to categorise that is - as of now there's no functionality, since it's made with SpringDownloader in mind).

UI, (GUI), Map, Unitbehaviour, Unitdefs, Unitvars, Antihack,
(I'm sure there's some more that might be added.)

[[Category: Historical]]</text>
      <sha1>bbpibdhfbercq9xbqyookruzxm8urff</sha1>
    </revision>
  </page>
  <page>
    <title>Galaxy 662</title>
    <ns>0</ns>
    <id>1053</id>
    <revision>
      <id>18758</id>
      <parentid>10885</parentid>
      <timestamp>2010-03-13T13:00:24Z</timestamp>
      <contributor>
        <username>Koshi</username>
        <id>2371</id>
      </contributor>
      <comment>made historical</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6761">{{Historical}}
*Guessmyname suddenly notices how many times he's misspelled shields*

Aw shit

== THE BEGINNING ==


Not much to say really. I've always been a fan of space modifications. I just think they're cool. So I decided to try my hand at making one.

I've already figured out most of the balance, and had a design doc of sorts (I'm constantly adding to it)

So far I have about 7 models. All quite high poly. I have a race 4 - I haven't gotten around to making a plot or naming races yet. Also, first release will have race 4 and race 6 in it. Race 4 because it has some cool ideas in, and race 6 because they're probably going to be the easist for people to get to grips with - Battlecruiser, which I call the &quot;Dauntless&quot;. Two race 4 fighters (basic and advanced) ad a bomber, a race 6 constructor ship and two very heavily armed space stations to whom I have yet to assign a race. As the mod progressed I will add to this wiki page


== NEWS ==

Does &quot;announced&quot; count?

--[[User:Guessmyname|Guessmyname]] 02:27, 4 Nov 2005 (W. Europe Standard Time)

Added some other stuff, like the race4 lvl1 spacedock. Working to get it ingame

More stuff. See below

Pic of some of the models: http://www.haxorsoft.net/images/album07/all?full=1

--[[User:Guessmyname|Guessmyname]] 18:24, 21 Dec 2005 (W. Europe Standard Time)

Project recontinued - I found all the missing models! Woo!

Now why-oh-why did my search not find them...

PS Adv Fighter + Gunship, Race 6

Scout Craft, Race 3

== STUFF ==


List of units:


Race 1


Race 2


Race 3
*Scout Craft

Race 4
*Fighter
*Advanced Fighter
*Battlecruiser &quot;Dauntless&quot;
*Carrier Retrebution
*Bomber
*RC Kamikaze craft
*AS Mine
*Lvl1 Space Dock


Race 5


Race 6
*Constructor Fleet Ship
*Scout
*Frigate
*Fighter
*Advanced Fighter
*Gunship
*Advanced Gunship
*Solar Collector
*Advanced Fighter
*lvl 1 Builder
*lvl 1 defense lasers
*Super Carrier


Unassigned
*Space Station Alpha
*Space Station Alpha Mk2

== OTHER STUFF ==

Races will utilise there different types of shielding. 
# Health Sheilding.
# Repulsor shielding.
# Hybrid.

Health Sheilds is where the unit starts off with its armoured state activated. The armoured state is the shield. When the unit goes below a certain health boundary, the shield is lost, and cannot be replaced.

Repulsor Sheilds are repulsors, unsuprisingly. Hopefully we will be able to say what blocks what, instead of of just plasma all the time. I like this idea (which I came up with by the way):

''Have an &quot;inner-circle&quot; thing, within which weapon fire is not deflected. Like in Star Wars Ep1. The droids outside the gungan shields could not get shots through. One they passed through the shields though...''

''It would also add tactical diversity: Long range deflectors that stopped LRPCs and smaller, less energy-intesive ones that cover a smaller area and stops unit fire. Also, let us give a tag to weapons that say wether or not they can be repulsed...''

''EDIT: Better yet, add a txt file - weapontypes.txt or somesutch. This file contains a list of all the different weapon types, ie:''

* ''PLASMA;''
* ''MISSILE;''
* ''UNBLOCKABLE;''
* ''RIFLE;''
* ''etc.''

''Then, add two new tags for weapons. One for repulsors, and one for normal weaponry. Something like this''


''weapontype=PLASMA;''


''and''


''repulsetype=MISSILE;''


''I think its obvious as to what I'm trying to imply here''


This would allow better flexibility with weapon repulsors.

'''Hybrid sheilds:''' Health and Repulse sheilds. Just not as powerful.

Health Sheilds and ordinary health can also be arranged to make some interesting play styles, ie: really good sheilds but crap amounts of health could make for an interseting race (Race 1 infact) where just-built units are superior than badly wounded units. Also, if you keep the units above the &quot;lose-shield threshold&quot; and then repair them, they keep their shield bonus. Or ships that, when heavily damaged, send all power to their sheilds - the ship cannot do anything (ANYTHING) at all but has extremely high powered shields (read: Armoured State coming into play), that will allow it to survive until it can be repaired (ie, after the health goes up to a certain point it loses the armoured state and can do stuff again). If I can make them unable to move when in its armoured state, I will.


'''Ammo:''' I may include ammo for certain weapons


'''Sheild ships:''' A variety of cheap, unarmed &quot;Sheild ships&quot; (Race 4 has the best)that do nothing more than generate relatively large repulse shields that can cover up a taskforce of small craft or parts of larger ships. A similar thing will be implemented for radar jammers, obviously.


'''Mines:''' Units can lay mines, but they will be weapons that hover until something (including your own units) fly into it. This will be a command-fire weapon, obviously. There will be minesweeper units however. (they will basically be units that take no damage from mines)


'''Another Balance idea:''' A race has a fleet of small, fast and dirt-cheap units with peashooters that can cloak and are hard (not impossible, hard) to catch. They can also jam radars. However, all this takes up a lot of energy. Their defenses will be crap and they have no &quot;sheild ships&quot; to try and help defend stuff. Their energy buildings, while each creates a lot of energy, are very weak, making them easy to destroy. So while they fight (and possible start to win) at your base, you send your own little task force, hidden by sheild ships and jammers, to destroy their energy production facilities, thus causing the little craft to lose their stealthy advantages and be easily shot down by your fleets.


'''Targets:''' I'd like to include (on larger ships though) a system wherein, for instance, the engines were hit several times (read: static-var McFiddlery) by specific weapons the ship's engines would be disabled and the thing would be inable to move. Or sheild generators. Hit them, bye-bye shield bonuses. This whole thing would require some updates to scripting (being able to stop units from moving and a HitByWeapon(piecename, weaponname) type function. Basically, this will not be implemented yet, simply because it cannot be implemented.

See the &quot;fuse-building&quot; thread in the development forums: http://taspring.clan-sy.com/phpbb/viewtopic.php?t=3245

'''Side lasers:''' something I'd like to try and implement. Basically these are powerful beam lasers on the side of ships and are to be used against other large ships or installations. To be fired, the ship must come alongside, leaving them open to return fire (unless of course you take out ''their'' side lasers - see &quot;Targets&quot;).

EDIT: These can be implemented. Lineofsight=1; weapons me do!

== COMMENTS ==

Leave 'em here


[[Category:Mods]]</text>
      <sha1>85ax1m67gxxyr87o8ukeo9gm4cdt3li</sha1>
    </revision>
  </page>
  <page>
    <title>Game and Unit development</title>
    <ns>0</ns>
    <id>1453</id>
    <redirect title="Gamedev:Main" />
    <revision>
      <id>26206</id>
      <parentid>26089</parentid>
      <timestamp>2013-02-22T15:10:59Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>Change to a redirect to Gamedev:Main</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="26">#REDIRECT [[Gamedev:Main]]</text>
      <sha1>i8doqfxgw0r0qgaftgrxzsn5vvhgqjz</sha1>
    </revision>
  </page>
  <page>
    <title>Game specification</title>
    <ns>0</ns>
    <id>947</id>
    <revision>
      <id>27575</id>
      <parentid>26918</parentid>
      <timestamp>2013-08-24T13:44:48Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>tag for delete, adds nothing to info in modinfo.lua page</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2454">{{delete}}
===Overview===

This is a specification of how Spring will support mods and switching between them. 

Spring looks for games in the folders &quot;maps&quot;, &quot;base&quot; and &quot;mods&quot; and &quot;games&quot;, and all their subfolders. It is recommended to put your game in a subfolder of /games.  Spring supports multiple subfolders within /games:  '''/games/my_nifty_game/game.sdd''' and '''/games/my_nifty_game/game_support.sdz''' are both correct.

On startup, Spring will search these folders and their subfolders for files called [[Modinfo.lua]]. This file declares all ''dependencies'' of this game, such as additional graphics, sounds and the like.

The general idea is that this file should be used as a manifest file to let Spring know what to do with the archive it is found inside, so each archive file in the mods directory is supposed to have one. Archive files that do not contain this file are ignored, and aren't available to Spring's Virtual File System.

===Modinfo.lua===
See [[Modinfo.lua]]

===Replacements===
'''When releasing new versions of a game or map it is recommended that a new unique filename is used.''' In this manner it would be possible for the lobby to download archives from a fast webserver based on the filename. 

But if a new name is used for a support archive with content for example, it would break other mods that depend on the archive. To avoid this, replacements can be used.

Replacements simply specifies which other archives this one replaces. So if a new archive specifies that it replaces old_archive.sdz, any other mod that depends on old_archive.sdz would now use the new one instead.

It is probably not always a good idea to use this for new versions of a mod however, since if you hide the old version people would not be able to switch between the old and the new version. So only use replacements when you are sure that it is what you want.

===Distribution===

If a player does not have a certain game's files when trying to join a game online, the Lobbies are designed to let them know that they don't have the game.  If you have uploaded your game to the [[Dev:LobbyDownloadSystems|various services]] that are supported by the Lobby applications, players can automatically download the game.  Also, SpringDownloader allows players to share the game's file with others easily.  Modinfo.lua lets both the Lobby application and Spring know what your game is, and whether it &quot;knows&quot; where it can be downloaded from.</text>
      <sha1>lygqjl0afwfzn8l3ngcgg3q7y3j6yrc</sha1>
    </revision>
  </page>
  <page>
    <title>Game structure</title>
    <ns>0</ns>
    <id>3566</id>
    <redirect title="Gamedev:Structure" />
    <revision>
      <id>27786</id>
      <timestamp>2013-10-26T22:03:35Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>Flozi moved page [[Game structure]] to [[Gamedev:Structure]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="31">#REDIRECT [[Gamedev:Structure]]</text>
      <sha1>3btqoip51cd19ikv0bu65ph07htn973</sha1>
    </revision>
  </page>
  <page>
    <title>Gamedev:Archives</title>
    <ns>0</ns>
    <id>1017</id>
    <revision>
      <id>28518</id>
      <parentid>27826</parentid>
      <timestamp>2014-04-23T12:20:15Z</timestamp>
      <contributor>
        <username>Knorke</username>
        <id>833</id>
      </contributor>
      <comment>added SDD</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1474">Spring supports reading from zlib zip and non-solid 7zip files. The filenames for these compression types must be .SDZ for zlib and .SD7 for 7zip respectively. They are standard files, just with different extensions for Spring. Here's a list of all filetypes supported by Spring; a higher read order means the contents of a file of that extension will take priority over files of a lower read order.


{|class=&quot;wikitable&quot;
|-
!Read Order
!File Extension
!Compression Method
!Description
|-
|1
|&lt;b&gt;SD7&lt;/b&gt;
|Non-Solid 7zip
|A 7zip file with the extension changed to .SD7. 7zip compressed archives generally have the highest compression (and therefore lowest filesizes). Files of this type are read first.
|-
|2
|&lt;b&gt;SDZ&lt;/b&gt;
|ZLIB ZIP
|A zlib ZIP file with the extension changed to .SDZ. Maps and games alike can be stored in these files. These are read second.
|-
|3
|&lt;b&gt;SDD&lt;/b&gt;
|uncompressed
|A normal folder with the extension .sdd added. Used only during development because it is possible to test the game/map without having to unzip/zip it for every change.
|}

The best tools to use to view the contents of a compressed Spring file, and
to pack and unpack the contents of such a file are:

*[http://www.rarlabs.com WinRAR] to view, browse, extract, and pack SDZ files, or to browse SD7 files.
*[http://www.7-zip.org/ 7zip] to view, browse, extract, and pack SD7 files.

For the internal file structure of a Spring package, see [[Gamedev:Structure]].

[[Category:Game Dev]]</text>
      <sha1>nwpaf2eeeo1oxr1tqdd8yldem1r85x4</sha1>
    </revision>
  </page>
  <page>
    <title>Gamedev:Buildpics</title>
    <ns>0</ns>
    <id>1013</id>
    <revision>
      <id>27891</id>
      <parentid>27889</parentid>
      <timestamp>2013-10-29T11:03:09Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>recategorise to Game Dev</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3223">The buildpic is the small picture of a unit which appears in the build menu of its constructor. Commonly it is 96x96 pixels in size, and it must always be located in the &lt;code&gt;Unitpics/&lt;/code&gt; directory.

Spring supports multiple image formats for buildpics. These formats are &lt;b&gt;PCX&lt;/b&gt;, &lt;b&gt;JPG&lt;/b&gt;, &lt;b&gt;BMP&lt;/b&gt;, &lt;b&gt;DDS&lt;/b&gt; and &lt;b&gt;PNG&lt;/b&gt;. By default, Spring will try to load &lt;b&gt;unitname.dds&lt;/b&gt;, where unitname is the short name of your unit, if it isn't found it tries to load the next image format depending on its priority (see below). To override this and use a different (DevIL supported) image format, use the {{xtaglink|Gamedev:UnitDefs|buildPic}} UnitDef tag.

Here's a detailed list of the formats supported:

&lt;div align=&quot;center&quot;&gt;
&lt;table width=&quot;90%&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th width=&quot;10%&quot; bgcolor=&quot;#C0C0C0&quot;&gt;Priority&lt;/th&gt;
    &lt;th width=&quot;10%&quot; bgcolor=&quot;#C0C0C0&quot;&gt;File Extension&lt;/th&gt;
    &lt;th width=&quot;30%&quot; bgcolor=&quot;#C0C0C0&quot;&gt;Color Depth&lt;/th&gt;
    &lt;th width=&quot;50%&quot; bgcolor=&quot;#C0C0C0&quot;&gt;Description&lt;/th&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td width=&quot;10%&quot;&gt;1&lt;/td&gt;
    &lt;td width=&quot;10%&quot;&gt;&lt;b&gt;DDS&lt;/b&gt;&lt;/td&gt;
    &lt;td width=&quot;30%&quot;&gt;24-bit (16.7 million colors)&lt;br/&gt;Slightly Lossy (compression)&lt;/td&gt;
    &lt;td width=&quot;50%&quot; valign=&quot;top&quot;&gt;Nvidia's DirectX-enabled .dds format. This is how the maps in Spring are stored. It offers compression, but it can be lossy. It is also difficult to work with. Other formats are still recommended.&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td width=&quot;10%&quot;&gt;2&lt;/td&gt;
    &lt;td width=&quot;10%&quot;&gt;&lt;b&gt;PNG&lt;/b&gt;&lt;/td&gt;
    &lt;td width=&quot;30%&quot;&gt;24-bit (16.7 million colors)&lt;br/&gt;Non-Lossy&lt;/td&gt;
    &lt;td width=&quot;50%&quot; valign=&quot;top&quot;&gt;New non-lossy, but still small in filesize, standard and with support for alpha channels. It is now recommended for use in Spring.&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td width=&quot;10%&quot;&gt;3&lt;/td&gt;
    &lt;td width=&quot;10%&quot;&gt;&lt;b&gt;PCX&lt;/b&gt;&lt;/td&gt;
    &lt;td width=&quot;30%&quot;&gt;8-bit (256 colors)&lt;br/&gt;Lossy (palette)&lt;/td&gt;
    &lt;td width=&quot;50%&quot; valign=&quot;top&quot;&gt;A PCX file. You're not limited to the Total Annihilation palette, but only 256 colors pcx are supported. Quickest to use if you're converting TA units since it's what TA uses but not recommended for use in Spring.&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td width=&quot;10%&quot;&gt;4&lt;/td&gt;
    &lt;td width=&quot;10%&quot;&gt;&lt;b&gt;BMP&lt;/b&gt;&lt;/td&gt;
    &lt;td width=&quot;30%&quot;&gt;24-bit (16.7 million colors)&lt;br/&gt;Non-Lossy&lt;/td&gt;
    &lt;td width=&quot;50%&quot; valign=&quot;top&quot;&gt;A standard Windows bitmap file. Recommended because of the high color depth and no loss due to compression or palette.  However, BMP files are notorious for having large filesizes.&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td width=&quot;10%&quot;&gt;none&lt;/td&gt;
    &lt;td width=&quot;10%&quot;&gt;&lt;b&gt;JPG&lt;/b&gt;&lt;/td&gt;
    &lt;td width=&quot;30%&quot;&gt;24-bit (16.7 million colors)&lt;br/&gt;Lossy (compression)&lt;/td&gt;
    &lt;td width=&quot;50%&quot; valign=&quot;top&quot;&gt;A standard JPEG file. Excessive compression is not recommended since it will reduce quality, but much smaller than BMP&lt;/td&gt;
  &lt;/tr&gt;

&lt;/table&gt;
&lt;/div&gt;

Although JPG will lose some quality compared to BMP its file size is drastically smaller even on the lowest compression settings, this will drastically reduce the size of your mod especially if it has a large number of units. Also it has been noted that since spring loads things on the fly large buildpic files can create lag when you first select a factory or construction unit.

[[Category:Game Dev]]</text>
      <sha1>jxzw5ck6evw56m8aq4qmyp31ehkztif</sha1>
    </revision>
  </page>
  <page>
    <title>Gamedev:CollisionVolumes</title>
    <ns>0</ns>
    <id>3066</id>
    <revision>
      <id>31160</id>
      <parentid>28974</parentid>
      <timestamp>2020-01-09T11:27:19Z</timestamp>
      <contributor>
        <username>Deadnight warrior</username>
        <id>2675</id>
      </contributor>
      <minor/>
      <comment>Changed link to active repositories</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3459">= Collision Volumes =
== What is a collision volume? ==
The collision volume is a geometric shape around Spring units and features. If a projectile collides with this shape, the engine registers it as a hit. Other names are hitbox, hitsphere etc.

[[File:Units_with_hitboxes.jpg|256px|right]]

== How to see them ingame ==
Press alt + v or type '''/debugcolvol''' into chat.
Look at the purple wireframe shapes around units.
If you can not see them, the collision volume might be blocked from view by the 3D model or be very offset like underground or in the sky.
Red shapes indicate the unit was hit.

== What else are they used for? ==
* line-of-fire calculations
* mouse-click detection when selecting a single unit

==How to edit their shape==
===In Upspring===
In the 3D view, click on the blue &quot;3D&quot; text and a menu opens.&lt;br&gt;
Click &quot;draw model radius + height&quot;&lt;br&gt;
At the right side, go to the &quot;Model&quot; tab and edit the values.&lt;br&gt;
With Upspring, you can only define sphere shaped collision volumes.&lt;br&gt;

===In the Def===
There are numerous [[Gamedev:UnitDefs#Collision_Volumes|tags]] that control shape, size and position of the collision volume. You have to restart Springfor the changes to take effect, there is no way to reload unit and feature defs.

===boxxy the hitbox editor===
This creation allows you move hitboxes by pressing buttons.
This way you can get the needed numbers and copy them to the unitdef file.

http://h-4.abload.de/img/loveandtrolls25t5u.gif

{{forumlink|topic=24882|title=Its Boxxy!}} (forum)

===Multiple collision volumes===
A unit can have multiple collision volumes. For example a tank could use a box for the chassis and a cylinder for the turret.

Each piece can have its own collision volume. {{xtaglink|Gamedev:UnitDefs|usePieceCollisionVolumes|true}}, will cause each piece on the model to have an autogenerated hitvolume; unwanted hitvolumes can then be removed with Lua.

==Can they be changed during gameplay?==
Yes. One example would be &quot;pop up&quot; turrets that get a smaller hitbox when sunken into the ground etc.
See &lt;code&gt;Spring.SetUnitCollisionVolumeData()&lt;/code&gt; and &lt;code&gt;Spring.SetUnitPieceCollisionVolumeData()&lt;/code&gt;
at [[Lua_SyncedCtrl]].

Example: [https://github.com/Balanced-Annihilation-Reloaded/BAR.sdd/blob/master/luarules/gadgets/unit_dynamic_collision_volume.lua Dynamic Collision Volume gadget] and it's [https://github.com/Balanced-Annihilation-Reloaded/BAR.sdd/blob/master/luarules/configs/collisionvolumes.lua configuration file].

==Unit radius &amp; height VS collision volume==
Even when a unit defines a collision volume that is not a sphere, the ''radius'' and ''height'' values set in Upspring still have a number of purposes. To name a few examples: ''height'' is used to decide whether a ship can move over an underwater structure, ''radius'' is used in collision handling for aircraft. Most importantly, all collision checks first do a pre-check with the unit ''radius'' before doing the colvol checks. Ergo the unit ''radius'' must be larger or equal to the colvol!

==Which spot on an enemy do units target==
The model centre set in Upspring

==Common problems (and how to solve)==
===weapons miss the unit===
Weapons like Dgun and torpedos might pass through under the unit if the hitvolume does not extend a bit into the ground/underwater.

===Intersecting hitboxes===
Two near units might refuse to shoot if their turrets intersect with each other's hitboxes.

[[Category:Game Dev]]</text>
      <sha1>dae6pf86wyhffe4yeh4decr4qx6gj2v</sha1>
    </revision>
  </page>
  <page>
    <title>Gamedev:DebugDrawModes</title>
    <ns>0</ns>
    <id>3657</id>
    <revision>
      <id>31257</id>
      <parentid>31235</parentid>
      <timestamp>2020-06-25T14:46:40Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>/* /DebugColVol (alt+v) */ about the points</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2179">= Debug Drawing Modes =
Spring has several drawing modes which are useful for debugging and performance checking. 
They are listed below by [[UI commands]] with their default key binding.

== /Debug (alt+b) ==
[[File:Debug.jpg|400px|left|/Debug]]
Draws a toggleable list of engine functions and a breakdown of how much time is spent computing them. When toggled on a line graph is drawn to illustrate the change in performance over time. 

Since 97.0 there is a new '''Frame Grapher''' visualisation which shows how the last half-second was spent:

* Green are video frames
* Red are simframes
* Blue is swapBuffer (gpu/vsync)
* Pink is lua gc
&lt;br clear=&quot;all&quot;/&gt;


== /DebugColVol (alt+v) ==
[[File:DebugColVol.jpg|400px|left|/DebugColVol]]
Draws unit and feature [[Gamedev:CollisionVolumes|collision volumes]] as purple meshes. When hit by a weapon the meshes turn red. Since 99.0 weapon debug spheres are also drawn in this mode for the [[Animation-LuaCallins#Weapons|AimFromWeapon()]] position, [[Animation-LuaCallins#Weapons|QueryWeapon()]] (muzzle) position and unit target position. Shields spheres are drawn in blue. Weapon 'Query' points are in red, orange if aiming. Weapon 'AimFrom' points are in yellow. The unit centre is in magenta, and if it is different the target point of the unit is in red.
&lt;br clear=&quot;all&quot;/&gt;

== /DebugPath (alt+p) ==
[[File:DebugPath_Close.jpg|400px|left|/DebugPath Close up view]][[File:DebugPath_Far.jpg|400px|left|/DebugPath Far out view]]

Draws pathfinder routes, colour coded by accuracy.

* Red is the most finely computed pathing
* Green is intermediate paths
* Blue is least accurate long range path
&lt;br clear=&quot;all&quot;/&gt;

== /DebugTraceRay ==
It is meant for debugging trajectories of ballistic projectiles. [https://springrts.com/mantis/view.php?id=4664 Currently broken in 98.0]

&lt;br clear=&quot;all&quot;/&gt;

== /DebugDrawAI ==
[[File:DebugDrawAI_E232AI.jpg|400px|left|/DebugDrawAI implemented in E232AI]]
This mode is toggled through the engine but is up to the native AI to implement itself. The image shows how [[AI:Skirmish:List|E232AI]] implements a real-time threatmap rendering and a real-time performance profiler.

[[Category: Game Dev]]</text>
      <sha1>guavi2mep3tjfxr0t5mgy6m6v1l4x5c</sha1>
    </revision>
  </page>
  <page>
    <title>Gamedev:FeatureDefs</title>
    <ns>0</ns>
    <id>3118</id>
    <revision>
      <id>30550</id>
      <parentid>30549</parentid>
      <timestamp>2017-12-22T09:45:56Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>/* Sub Tables */ here also</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7910">==Location==
FeatureDef files are .lua files stored in the &lt;code&gt;Features/&lt;/code&gt; directory of a Spring Game.

==Purpose==
FeatureDef files have one purpose; to define the properties of features. They are the main description file for what attributes your features should have and how units interact with them.

==Source==
The engine source code which loads the tags from these files is viewable here:

* {{sourcelink|file=rts/Sim/Features/FeatureHandler.cpp}}

==Data Types==
{{DataTypes}}

==Details==
There follows a comprehensive list of the tags available, their data type, default value and a brief description of what they do. Bear in mind that the source code linked above is the ultimate reference when dealing with these tags. 

In lua tables keys (i.e. the tags) should be lower case, here they are represented in camelCase for readability. In your files you may use the &lt;code&gt;lowerkeys&lt;/code&gt; function on your final table to ensure the keys are properly cased.

It is usual to name the returned FeatureDef table the internal &lt;code&gt;featureName&lt;/code&gt; desired for the unit.

===General===
{{tag
|name = description
|type = string
|default = &quot;&quot;
|description = This is the tooltip description of the feature seen by the player.
}}

{{tag
|name = damage
|type = float
|default = 0.0
|description = How much damage this feature can take before being destroyed. Analogous to {{xtaglink|Gamedev:UnitDefs|maxDamage}} for units.
}}

{{tag
|name = featureDead
|type = string
|default = &quot;&quot;
|description = The &lt;code&gt;featureName&lt;/code&gt; of the feature to spawn when this feature is destroyed. Used to make chains of features which 'disintegrate' as they are further damaged. Analogous to {{xtaglink|Gamedev:UnitDefs|corpse}} for units.
}}

{{tag
|name = indestructible
|type = bool
|default = false
|description = Can the feature be destroyed or not? If &lt;code&gt;true&lt;/code&gt; the feature will not even take damage.
}}

{{tag
|name = flammable
|type = bool
|default = false (true for engine trees)
|description = Can the feature be set on fire? The size of the flame particle is determined by the model radius. The duration of the fire in [[frames]] is a random number in the range [200, 230].
}}

{{tag
|name = noSelect
|type = bool
|default = false
|description = If &lt;code&gt;true&lt;/code&gt; the cursor won't change to `reclaim` when hovering the feature.
}}

{{tag
|name = mass
|type = float
|default = 0.4 * metal + 0.1 * damage
|description = The mass of the feature, used in unit/feature crushing calculations (See [[Movedefs.lua]]). Minimum value is &lt;code&gt;1.0&lt;/code&gt;.
}}

{{tag
|name = crushResistance
|type = float
|default = mass
|special ={{new|85.0}}
|description = How resistant is the feature to being crushed? Any [[Movedefs.lua|'''MoveClass''']] with a {{xtaglink|Movedefs.lua|crushStrength}} greater than this will crush the feature.
}}

===Visual===
{{tag
|name = object
|type = string
|default = &quot;&quot;
|lua = modelname
|description = The filename of the 3D model file for this unit, assumes &lt;code&gt;Objects3D/&lt;/code&gt; directory. Analagous to {{xtaglink|Gamedev:UnitDefs|objectName}} for units.
}}

{{tag
|name = smokeTime
|type = int
|default = 300
|description = How many frames a corpse feature should emit smoke for after unit death.
}}

{{tag
|name = drawType
|type = int
|default = 0
|description = What kind of drawing type is the feature. Can be &lt;code&gt;0&lt;/code&gt; - A loaded model, &lt;code&gt;-1&lt;/code&gt; - Nothing rendered for this feature at all (used for geovents), values &gt;= &lt;code&gt;1&lt;/code&gt; are used for the engine default trees. Generally speaking you should ignore this tag.
}}

===Reclaim &amp; Resources===
{{tag
|name = reclaimable
|type = bool
|default = true if not {{taglink|indestructible}}, false otherwise
|description = Can this feature be reclaimed by a construction unit?
}}

{{tag
|name = autoReclaimable
|type = bool
|default = reclaimable
|description = Should this feature be reclaimed by a construction unit executing a patrol or area-reclaim command?
}}

{{tag
|name = reclaimTime
|type = float
|default = (metal + energy) * 6.0
|description = The time taken to reclaim this feature. Related to unit {{xtaglink|Gamedev:UnitDefs|reclaimSpeed}} such that &lt;code&gt;Time taken to reclaim = feature reclaimTime / unit reclaimSpeed&lt;/code&gt;.
}}

{{tag
|name = metal
|type = float
|default = 0.0
|description = How much metal resource this feature gives the player when reclaimed.
}}

{{tag
|name = energy
|type = float
|default = 0.0
|description = How much energy resource this feature gives the player when reclaimed.
}}

{{tag
|name = resurrectable
|type = int
|default = -1
|description = Can this feature be resurrected back into a living unit? Can be the following values &lt;code&gt;-1&lt;/code&gt; - Only resurrectable if it is the 1st level {{xtaglink|Gamedev:UnitDefs|corpse}} of the [[Gamedev:UnitDefs|UnitDef]], &lt;code&gt;0&lt;/code&gt; - Not resurrectable, &lt;code&gt;1&lt;/code&gt; - Always ressurrectable.
}}

{{tag
|name = geoThermal
|type = bool
|default = false
|special={{new|83.0}}
|description = Does this feature act as a geothermal vent?
}}

===Placement===
{{tag
|name = footprintX
|type = int
|default = 1
|description = How wide the feature is in footprint units, left to right. 1 footprint unit = 16 [[elmo]]s. Cannot be below &lt;code&gt;1&lt;/code&gt;.
}}

{{tag
|name = footprintZ
|type = int
|default = 1
|description = How wide the feature is in footprint units, top to bottom. 1 footprint unit = 16 [[elmo]]s. Cannot be below &lt;code&gt;1&lt;/code&gt;.
}}

{{tag
|name = blocking
|type = bool
|default = true
|description = Does this feature block the movement of units or can they pass right through it? Features that are non-blocking are also ignored by weapon aiming.
}}

{{tag
|name = upright
|type = bool
|default = false
|description = Does the feature tilt with the slope of the terrain or remain upright?
}}

{{tag
|name = floating
|type = bool
|default = false
|special = {{new|90.0}}
|description = Does this feature float on the top of water or is it placed on the seabed?
}}

===Decals===
{{tag
|name = useBuildingGroundDecal
|type = bool
|default = false
|description = For structures, do they display a ground decal on the terrain under their model?}}

{{tag
|name = buildingGroundDecalType
|type = string
|default = &quot;&quot;
|description = The filename of the image to be used as ground decal. Assumed to be in &lt;code&gt;Unittextures/&lt;/code&gt;.}}

{{tag
|name = buildingGroundDecalSizeX
|type = int
|default = 4
|description = How wide the decal is left to right, in footprint units.}}

{{tag
|name = buildingGroundDecalSizeY
|type = int
|default = 4
|description = How wide the decal is top to bottom, in footprint units.}}

{{tag
|name = buildingGroundDecalDecaySpeed
|type = float
|default = 0.1
|description = A measure of how quickly the decal should fade out if the structure dies. Essentially this value is multiplied by the time since death and subtracted from the original alpha until the decal is fully transparent.}}

===Collision Volumes===
See [[Gamedev:UnitDefs#Collision_Volumes]].

===Selection Volumes===
See [[Gamedev:UnitDefs#Selection_Volumes]].

===Other===

==Sub Tables==

===customParams===
The &lt;code&gt;customParams&lt;/code&gt; subtable of a FeatureDef allows the game designer to give their features custom attributes, which can then be accessed via lua gadgets and widgets. It is a map (key-value pair indexed table) of strings. When accessing these attributes in lua the strings can be turned back into numbers, bools or even tables. This gives great control to game designers to essentially implement their own behaviour tags.

There are no additional tags specific to this subtable.

===collisionVolume===
See [[Gamedev:UnitDefs#collisionVolume]].

===selectionVolume===
See [[Gamedev:UnitDefs#selectionVolume]].

==Examples==
Many games include unit corpse features into the UnitDef (See [[Gamedev:UnitDefs#Examples]])

{{ExampleRepoLinks
|path = features/
|entity = FeatureDefs
}}

[[Category: Game Dev]]</text>
      <sha1>77ixydgab41v43xk33omdj6ajq6oxm3</sha1>
    </revision>
  </page>
  <page>
    <title>Gamedev:Glossary</title>
    <ns>0</ns>
    <id>3570</id>
    <revision>
      <id>29663</id>
      <parentid>28688</parentid>
      <timestamp>2015-10-09T18:26:02Z</timestamp>
      <contributor>
        <username>Silentwings</username>
        <id>2883</id>
      </contributor>
      <minor/>
      <comment>fix invisibility</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2819">__NOTOC__
=Game Dev Glossary=
This page contains definitions of technical terms and acronyms associated with Spring game development.

== AtlasedTexture ==
An alias to a texture. This means the alias must be defined somewhere and pointing to to a real texture. For AtlasedTextures used in projectiles (like those spawned by explosiongenerator) they need to be defined in [[resources.lua]] under the [projectiletextures].

A line defining a texture alias in [[resources.lua]] looks like this:

&lt;code&gt;alias = &quot;real_image.tga&quot;,&lt;/code&gt;

Most spring supported image format can be used in AtlasedTextures, but not compressed dds.}}

== CColorMap ==
A collection of 2 or more RGBA colours. They can be expressed either as a string of decimal numbers, or pointing to an image file where each pixel will be used as a colour.

Example:

This gives a '''ColorMap''' with 2 colours, the first one blue and second one white:&lt;br&gt;
&lt;code&gt;colorMap = &quot;1.0 0.0 0.0 1.0 1.0 1.0 1.0 1.0&quot;,&lt;/code&gt;

Or it can be pointed to a bitmap file:&lt;br&gt;
&lt;code&gt;colorMap = &quot;bitmap_file.tga&quot;,&lt;/code&gt;

'''ColorMaps''' usually describe how the colours of an entity will shift during its lifetime, where the first colour will be used at the beginning and then cycle through all colours until the last one is used at the end of its lifetime.

== OTAism ==
Refers to a feature, bug or design quirk which traces its routes back to the early days of Spring when it was designed to reproduce [http://en.wikipedia.org/wiki/Total_Annihilation Total Annihilation] gameplay.

== QTPFS ==
Quad-Tree Path-Finder System. A path finding algorithm based on a [http://en.wikipedia.org/wiki/Quadtree Quadtree] data structure.

See also:
* [[Media:qtpfs0.png | Screenshot of QTPFS in action]]
* [[Media:qtpfs1.png | Another screenshot of QTPFS]]
* {{forumlink|topic=27663|title=Feedback on QTPFPS pathing (Forum)}}

== springcontent.sdz ==
A base content package which is '''always''' loaded for all Spring games. It supplies many 'background' files that games generally won't need to overwrite (but may do so). It also supplies example gadgets in the &lt;code&gt;LuaGadgets/Gadgets/&lt;/code&gt; directory which can be directly included by a game, most importantly:
* &lt;code&gt;unit_script.lua&lt;/code&gt; - For running [[Animation-LuaScripting | LUS]] animation scripts
* &lt;code&gt;game_spawn.lua&lt;/code&gt; - For spawning units on game start
* &lt;code&gt;game_end.lua&lt;/code&gt; - For controlling game ends conditions


Example:

&lt;code&gt;return include(&quot;luagadgets/gadgets/unit_script.lua&quot;)&lt;/code&gt; in &lt;code&gt;LuaRules/Gadgets/unit_script.lua&lt;/code&gt;

as well as the base content gadget handler itself:

&lt;code&gt;VFS.Include(&quot;luagadgets/gadgets.lua&quot;,nil, VFS.BASE)&lt;/code&gt; in &lt;code&gt;LuaRules/main.lua&lt;/code&gt; and &lt;code&gt;LuaRules/draw.lua&lt;/code&gt;


See also:
* {{sourcelink|file=cont/base/springcontent}}

[[Category:Game Dev]]</text>
      <sha1>737s6oh92hjtqr48rfj4mqpjh23tqb7</sha1>
    </revision>
  </page>
  <page>
    <title>Gamedev:Main</title>
    <ns>0</ns>
    <id>3439</id>
    <revision>
      <id>30807</id>
      <parentid>30776</parentid>
      <timestamp>2018-11-11T04:19:25Z</timestamp>
      <contributor>
        <username>Gajop</username>
        <id>2804</id>
      </contributor>
      <comment>/* Lua API &amp; Libraries (excerpt) */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4273">[[Engine_Development|Development]] &lt; {{FULLPAGENAME}}

= Game Development =
This information is meant to help newcomers learn how to develop their own games for the Spring Engine. If you are interested in creating maps for Spring, see [[Mapdev:Main]].

= Templates &amp; Examples =
* [[Gamedev:SpringABC|SpringABC]] - A hierarchical set of empty template games, without examples
* [[SpringTutorialGame|Spring Tutorial Game]] - A tutorial template game with full examples
* [[Gamedev:PublicRepos|Public Repos]] - Publicly readable Spring game code repositories

= Technical Documentation =
== GameData ==
* [[Armordefs.lua]] - armor classes
* [[Icontypes.lua]] - strategic unit icons
* [[Modinfo.lua]] - game identifier file (name, version,...)
* [[Modrules.lua]] - Global game variables
* [[Movedefs.lua]] - MoveClasses for pathfinding
* [[Resources.lua]] - index file for textures
* [[Sidedata.lua]] - playable factions/races/sides
* [[Sounds.lua]] - index file for sounds
* [[Messages.lua]] - Team death messages {{new|95.0}}:deprecated

== Definition Files ==
* [[Gamedev:UnitDefs]] - define the attributes of units
* [[Gamedev:WeaponDefs]] - define the attributes of weapons/projectiles
* [[Gamedev:FeatureDefs]] - define the attributes of static map features and wrecks
* [[CEG:Main]] Particle effects (explosions etc)

== Lua API &amp; Libraries (excerpt) ==
* [[Lua_Scripting|Lua API Documentation]]
* [[Lua_Libraries|Lua Libraries]]

== Animation of units ==
Lua Animations (LUS)
*[[Animation-LuaScripting]]
**[[Animation-LuaCallins]]
**[[Animation-LuaCallouts]]
**[[Animation-CobLuaDifferences]]

COB Animations (Antiquated)
*[[Animation-CobOverview]]
**[[Animation-CobAnimation]]
**[[Animation-CobCallins]]
**[[Animation-CobConstants]]
**[[Animation-CobThreads]]
**[[Animation-CobHitByWeaponID]]
**[[Lua-LuaCOB]] - how to interface COB with LUA
**[[CEG_For_Units|Game Development:Calling basic CEGs from COB]]
**{{forumlink|topic=7457|title=GPL COB Examples}}

== Models &amp; Textures ==
* [[About_s3o|.s3o]]
* [[Assimp]]
** [[3DModels:AssimpWorkflow]]
* [[3DModels:Textures]]
* [[Shaders:CustomUnitShadingFramework]]
** [[Shaders:PBRShaders]]

== Misc ==
* [[Gamedev:DebugDrawModes]]
* [[Gamedev:Archives]] - packing game/map
* [[Gamedev:Buildpics]]
* [[Gamedev:CollisionVolumes]]
* [[Gamedev:Glossary]]
* [[Gamedev:MouseCursors]]
* [[Gamedev:Sidepics]]
* [[Gamedev:Structure]]
* [[VirtualFileSystem]]

= Tools =
== In-Game Tools ==
*[http://springboard-core.readthedocs.io/en/latest/ SpringBoard] - Powerful map and scenario editor
*[[Map Making: Feature Placer|Feature Placer]] - A Map Feature &amp; NPC Unit Placement Tool

== External Tools ==
* [[Upspring]]
* [[Map,_Mod,_And_Unit_Development_Programs|Development Tools]]

= Engine Related =
* [[Download_Testing]] - Test the compatibility of your game on upcoming versions of the Spring engine.

* [[EngineChangelogForContentDevs]] - New engine versions sometimes require games to adjust. A list of common problems.

* [[EngineSource_for_GameDevs]] - Notes about the engine source, from modding point of view.

= Tutorials =
== Tips, Tricks &amp; Testing ==
[[TestingYourGame|These tricks and commands]] are useful for testing or debugging.

== Game Development Tutorials ==
*[[The Complete Guide To Making A Spring Game]] - A fairly comprehensive getting started tutorial.
*[http://springrts.com/phpbb/viewtopic.php?f=14&amp;t=26409| Porting TA content to Spring]
*&lt;strike&gt;[[Simple Mod Tutorial|Simple Game Tutorial]]&lt;/strike&gt; - needs to be updated

==Modelling Tutorials==
'''Wings3D'''
* [[3DModels:Wings3DTutorial]]
* [http://springrts.com/phpbb/viewtopic.php?t=10612 Wings UV Mapping Tutorial]

'''Blender'''
* [[TutorialBlenderWorkFlow|Blender Workflow Tutorial]]

'''3DS Max'''
* [http://springrts.com/phpbb/viewtopic.php?t=10503 Runecrafter's 3DS Max UV Mapping Tutorial]

==Texturing Tutorials==
* [http://springrts.com/phpbb/viewtopic.php?f=57&amp;t=22392 DDS Textures:  How To]
* [http://springrts.com/phpbb/viewtopic.php?t=10947 Greeble Tutorial 1]
* [http://springrts.com/phpbb/viewtopic.php?f=9&amp;t=12356 Greeble Tutorial 2]

=Misc=
* [[Ren'Py]]: a visual novel engine that can be used with Spring
* &lt;strike&gt;[http://answers.springlobby.info/ Q&amp;A Site for the Spring Engine]&lt;/strike&gt; Currently down.

[[Category:Game Dev]]</text>
      <sha1>hq0b0wyvouu8lfoqq00su15nzxrtjl4</sha1>
    </revision>
  </page>
  <page>
    <title>Gamedev:MouseCursors</title>
    <ns>0</ns>
    <id>3048</id>
    <revision>
      <id>27788</id>
      <parentid>26928</parentid>
      <timestamp>2013-10-26T22:33:41Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>Flozi moved page [[MouseCursors]] to [[Gamedev:MouseCursors]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6030">[[Engine_Development|Development]] &lt; [[Mod_and_Unit_development|Game Development]] &lt; {{FULLPAGENAME}}

=Mouse Cursors=
==Location==
Cursors for Spring are stored in the &lt;code&gt;Anims/&lt;/code&gt; directory.

==Supported Image Formats==
The cursors have to be in either:
* png
* tga
* bmp
To make transparent sections in bmp's use RGB(84, 84, 252).&lt;br/&gt;
The images don't have to be squared neither power-of-two, but those are preferred and the size should be &lt;=128.

==Filename==
Even if your cursor isn't animated, it must have the _0 at the end of its name.
Only when using a .txt this isn't needed.

==Animated Cursors==
===Via Filenames===
To make animated cursors, just make a sequence where the filenames start with '_0' at the end of the first in the sequence, going on sequentially until the last frame. This uses the default `frame time` (= the time each sprite is visible) of 0.1sec.

===Via .txt===
You can also create a .txt file with further specifications for your cursor:

&lt;code&gt;cursorattack.txt:&lt;/code&gt;
&lt;div&gt;
&lt;code&gt;&lt;pre&gt;
hotspot %hotspot
frame %filename_0 %timespan_0
frame %filename_1 %timespan_1
frame %filename_2 %timespan_2
...
&lt;/pre&gt;&lt;/code&gt;
&lt;/div&gt;
The &lt;code&gt;hotspot&lt;/code&gt; tag is optional and can be either &lt;code&gt;topleft&lt;/code&gt; or &lt;code&gt;center&lt;/code&gt;.&lt;br/&gt;
Note, the filenames have to contain the full path, e.g. &lt;code&gt;Anims/CursorMove.png&lt;/code&gt;.

=Engine Cursors=
Spring itself just needs one cursor and that's &lt;code&gt;cursornormal&lt;/code&gt;, &lt;span class=warning&gt;if this isn't present in your game Spring will crash with an ContentError&lt;/span&gt;.

Still there are additional cursors the engine will use when present:&lt;br/&gt;
&lt;span class=note&gt;(When cursors are double named in the table, it means that the following ones are fallbacks.)&lt;/span&gt;
&lt;div align=&quot;center&quot;&gt;
&lt;table width=&quot;60%&quot; border=&quot;1&quot; cellspacing=0&gt;
  &lt;tr&gt;
    &lt;th style=&quot;background: #CCC; color:#444&quot;&gt;Cursor Name&lt;/th&gt;
    &lt;th style=&quot;background: #CCC; color:#444&quot;&gt;Internal Name/Usage&lt;/th&gt;
    &lt;th style=&quot;background: #CCC; color:#444&quot;&gt;Def. Hot Spot&lt;/th&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;cursornormal&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;TopLeft&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;cursorareaattack&lt;/td&gt;
    &lt;td&gt;Area attack&lt;/td&gt;
    &lt;td&gt;Center&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;cursorattack&lt;/td&gt;
    &lt;td&gt;Area attack&lt;/td&gt;
    &lt;td&gt;Center&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;cursorattack&lt;/td&gt;
    &lt;td&gt;Attack&lt;/td&gt;
    &lt;td&gt;Center&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;cursorattackbad&lt;/td&gt;
    &lt;td&gt;AttackBad&lt;/td&gt;
    &lt;td&gt;Center&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;cursorattack&lt;/td&gt;
    &lt;td&gt;AttackBad&lt;/td&gt;
    &lt;td&gt;Center&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;cursorbuildbad&lt;/td&gt;
    &lt;td&gt;BuildBad&lt;/td&gt;
    &lt;td&gt;Center&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;cursorbuildgood&lt;/td&gt;
    &lt;td&gt;BuildGood&lt;/td&gt;
    &lt;td&gt;Center&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;cursorcapture&lt;/td&gt;
    &lt;td&gt;Capture&lt;/td&gt;
    &lt;td&gt;Center&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;cursorcentroid&lt;/td&gt;
    &lt;td&gt;Centroid&lt;/td&gt;
    &lt;td&gt;Center&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;cursordwatch&lt;/td&gt;
    &lt;td&gt;DeathWait&lt;/td&gt;
    &lt;td&gt;Center&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;cursorwait&lt;/td&gt;
    &lt;td&gt;DeathWait&lt;/td&gt;
    &lt;td&gt;Center&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;cursordgun&lt;/td&gt;
    &lt;td&gt;DGun&lt;/td&gt;
    &lt;td&gt;Center&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;cursorattack&lt;/td&gt;
    &lt;td&gt;DGun&lt;/td&gt;
    &lt;td&gt;Center&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;cursorfight&lt;/td&gt;
    &lt;td&gt;Fight&lt;/td&gt;
    &lt;td&gt;Center&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;cursorattack&lt;/td&gt;
    &lt;td&gt;Fight&lt;/td&gt;
    &lt;td&gt;Center&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;cursorgather&lt;/td&gt;
    &lt;td&gt;GatherWait&lt;/td&gt;
    &lt;td&gt;Center&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;cursorwait&lt;/td&gt;
    &lt;td&gt;GatherWait&lt;/td&gt;
    &lt;td&gt;Center&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;cursordefend&lt;/td&gt;
    &lt;td&gt;Guard&lt;/td&gt;
    &lt;td&gt;Center&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;cursorpickup&lt;/td&gt;
    &lt;td&gt;Load units&lt;/td&gt;
    &lt;td&gt;Center&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;cursormove&lt;/td&gt;
    &lt;td&gt;Move&lt;/td&gt;
    &lt;td&gt;Center&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;cursorpatrol&lt;/td&gt;
    &lt;td&gt;Patrol&lt;/td&gt;
    &lt;td&gt;Center&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;cursorreclamate&lt;/td&gt;
    &lt;td&gt;Reclaim&lt;/td&gt;
    &lt;td&gt;Center&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;cursorrepair&lt;/td&gt;
    &lt;td&gt;Repair&lt;/td&gt;
    &lt;td&gt;Center&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;cursorrevive&lt;/td&gt;
    &lt;td&gt;Resurrect&lt;/td&gt;
    &lt;td&gt;Center&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;cursorrepair&lt;/td&gt;
    &lt;td&gt;Resurrect&lt;/td&gt;
    &lt;td&gt;Center&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;cursorrestore&lt;/td&gt;
    &lt;td&gt;Restore&lt;/td&gt;
    &lt;td&gt;Center&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;cursorrepair&lt;/td&gt;
    &lt;td&gt;Restore&lt;/td&gt;
    &lt;td&gt;Center&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;cursorselfd&lt;/td&gt;
    &lt;td&gt;SelfD&lt;/td&gt;
    &lt;td&gt;Center&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;cursornumber&lt;/td&gt;
    &lt;td&gt;SquadWait&lt;/td&gt;
    &lt;td&gt;Center&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;cursorwait&lt;/td&gt;
    &lt;td&gt;SquadWait&lt;/td&gt;
    &lt;td&gt;Center&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;cursortime&lt;/td&gt;
    &lt;td&gt;TimeWait&lt;/td&gt;
    &lt;td&gt;Center&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;cursorwait&lt;/td&gt;
    &lt;td&gt;TimeWait&lt;/td&gt;
    &lt;td&gt;Center&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;cursorunload&lt;/td&gt;
    &lt;td&gt;Unload units&lt;/td&gt;
    &lt;td&gt;Center&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;cursorwait&lt;/td&gt;
    &lt;td&gt;Wait&lt;/td&gt;
    &lt;td&gt;Center&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;

Example: A &lt;code&gt;cursorattack_0.bmp&lt;/code&gt; (same for &lt;code&gt;cursorattack.txt&lt;/code&gt;) in your &lt;code&gt;Anims/&lt;/code&gt; dir will automatically used for attack commands.

=Lua/Custom Cursors=
==Runtime Replacing Default Cursors==
To runtime change cursors (e.g. per-faction cursors or user-configurable ones) you may want to use [[Lua_UnsyncedCtrl#GUI_2 | Spring.ReplaceMouseCursor]]. Example:

&lt;code&gt;&lt;pre&gt;
Spring.ReplaceMouseCursor(&quot;cursorattack&quot;, &quot;faction2_subdir/cursorattack&quot;)
Spring.ReplaceMouseCursor(&quot;cursormove&quot;, &quot;faction2_subdir/cursormove&quot;)
...
&lt;/pre&gt;&lt;/code&gt;

==Give Custom Commands a Cursor==
First you need to register your custom cursor with &lt;code&gt;Spring.AssignMouseCursor&lt;/code&gt;. After that you can use it in &lt;code&gt;Spring.EditUnitCmdDesc/Spring.InsertUnitCmdDesc&lt;/code&gt;:
&lt;code&gt;&lt;pre&gt;
--loads cursor from foo_cursor.txt, foo_cursor_0.bmp, ...
Spring.AssignMouseCursor(&quot;mahcursor&quot;, &quot;foo_cursor&quot;, false)

--NOTE: this is SYNCED code!
--add custom cmddesc
Spring.InsertUnitCmdDesc(unitID, {
  ...
  cursor = &quot;mahcursor&quot;,
  ...
})
&lt;/pre&gt;&lt;/code&gt;


[[Category:Game Dev]]</text>
      <sha1>bulxb4q4k6q729dl10knnf9r426umih</sha1>
    </revision>
  </page>
  <page>
    <title>Gamedev:PublicRepos</title>
    <ns>0</ns>
    <id>3546</id>
    <revision>
      <id>31832</id>
      <parentid>31768</parentid>
      <timestamp>2022-07-21T18:01:42Z</timestamp>
      <contributor>
        <username>Maddox</username>
        <id>2934</id>
      </contributor>
      <comment>Added TAP github to the list</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1774">==What Is This?==
This is a small collection of publicly known and readable code repositories for established Spring games. The intention being to provide a wealth of examples to all game developers from noob to pro.

Most of these repositories can be downloaded with one of the [[Rapid_Tags]].

== Known Repos ==
[https://github.com/KingRaptor/air-raid-spring Air Raid]

[https://github.com/balanced-annihilation Balanced Annihilation]

[https://github.com/spring-archive/basically-ota BOTA]

[https://github.com/spring-archive/conflictterra Conflict Terra]

[http://www.petro.darkstars.co.uk/damned/ Damned]

[https://github.com/EvolutionRTS/Evolution-RTS Evolution RTS]

[https://github.com/SpringCabal/Gravitas Gravitas]

[https://github.com/imperialwinter/swiw.sdd Imperial Winter]

[https://bitbucket.org/PicassoCT/journeywar Journeywar]

[https://github.com/PicassoCT/MOSAIC MOSAIC]

[https://github.com/jk3064?tab=repositories jK]
* [[Chili]]
* [[LUPS]]
* Custom-Unit-Shader-Framework
* [[Mapdev:Main#Blueprint | Map-Blueprint]]

[https://github.com/David-Becker/mods KDR_11k] 
* Cuberors' Finest
* CvC
* Doserz
* Fibre
* GINTA
* Gun Wings Test
* Light Side of Spring
* MicroModules
* Pong

[https://github.com/SpringMCLegacy/SpringMCLegacy MechCommander: Legacy]

[https://github.com/spring1944/spring1944 Spring: 1944]

[https://github.com/spring-archive/springtanks Spring Tanks]

[https://github.com/spring-archive/springtutorialgame.sdd/ Spring Tutorial Game]

[https://github.com/n3wm1nd/TA Tech Annihilation]

[https://github.com/fluidplay/TAP Total Atomic Power - TAP]

[https://github.com/KingRaptor/THIS THIS]

[http://code.google.com/p/xta-springrts/ XTA]

[https://github.com/ZeroK-RTS/Zero-K/ Zero-K]

[[Category:Game Dev]]
[[Category:Download Systems]]</text>
      <sha1>j8imnexwk7h6rrtqvesxy86bomj50q6</sha1>
    </revision>
  </page>
  <page>
    <title>Gamedev:Sidepics</title>
    <ns>0</ns>
    <id>1473</id>
    <revision>
      <id>27547</id>
      <parentid>26923</parentid>
      <timestamp>2013-08-19T17:42:34Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>Flozi moved page [[Mod Development:Sidepics]] to [[Gamedev:Sidepics]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="380">Sidepics are the faction icons which display in the Multiplayer Lobbies.
They have to follow these simple rules:

* be 16x16 pixels
* be in either ''PNG'' (preferred) or ''BMP'' format (where white=(RGB: 255,255,255) is transparent)
* be located in the [[Game_structure|''Sidepics/'']] directory
* be named the same as the ''name'' field in [[sidedata.lua]]

[[Category:Game Dev]]</text>
      <sha1>kwn4847sryz6de7xp28eyldzn6ebifd</sha1>
    </revision>
  </page>
  <page>
    <title>Gamedev:SpringABC</title>
    <ns>0</ns>
    <id>3579</id>
    <revision>
      <id>28564</id>
      <parentid>27831</parentid>
      <timestamp>2014-05-16T17:05:58Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>/* Where to get it? */ github links</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1459">__notoc__
= SpringABC =
[[File:SpringABClogo.png|128px|right|SpringABC logo]]
== What is it? ==
A series of hierarchical templates for Spring Games, meant as a clean-slate foundation to build games upon, not an example of how to do so.

== What is included? ==
* '''A'''''(lmost Minimal)''
: Basically just empty directories and a working [[Modinfo.lua]], [[Engineoptions.lua]], [[Modoptions.lua]], [[Resources.lua]] and base-content gadget handler inclusion.
* '''B'''''(are Bones)''
: A + [[Armordefs.lua]], [[Movedefs.lua]], and [[Sidedata.lua]]} skeletons with links to relevant wiki articles, as well as inclusion of base content &lt;code&gt;unit_script.lua&lt;/code&gt;, &lt;code&gt;game_spawn.lua&lt;/code&gt; and &lt;code&gt;game_end.lua&lt;/code&gt; gadgets.
* '''C'''''(hili UI Framework)''
: B + [[Chili]] (2.1) &amp; associated files to make it work.

Most people will want to use B.sdd or C.sdd, A.sdd is provided for completeness or for veterans who have their own core files to include already.

== What is it not? ==
* A replacement for [[SpringTutorialGame]]
* A repository of example units and scripts, none are included whatsoever, if you seek examples use the [[SpringTutorialGame|STG]] or look at [[Gamedev:PublicRepos]]

== Where to get it? ==
Forum: {{forumlink|topic=31070|title=Spring ABC - Empty / Template Games}}

or GitHub: https://github.com/FLOZi/SpringABC 

or [https://github.com/FLOZi/SpringABC/archive/master.zip Direct link to GitHub .ZIP]


[[Category:Game Dev]]</text>
      <sha1>ngsxze33iuiz7n2mgpefgu6p7b79osp</sha1>
    </revision>
  </page>
  <page>
    <title>Gamedev:Structure</title>
    <ns>0</ns>
    <id>2990</id>
    <revision>
      <id>29947</id>
      <parentid>27919</parentid>
      <timestamp>2016-04-07T21:41:19Z</timestamp>
      <contributor>
        <username>Eronoobos</username>
        <id>2912</id>
      </contributor>
      <comment>/* root of game folder */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4743">= Game Structure =
== .sd7 or .sdz ==

A mod is presented as an [[sd7]] or sdz file.  This is just a zip file of the individual files comprising the game.

You can unzip the sd7 or sdz file by renaming it to .zip, and using a zip tool to unzip it.

sd7 / sdz files are created using 7zip.

== .sdd directories ==
You can avoid using the archives altogether by storing the whole mod directory structure in an .sdd directory. This is useful for game development because the changes you make are visible without any additional step.

On Linux one can also symlink the development directories from the Spring's mod directory:
  ln -s ~/projects/caspring/games/zk ~/.spring/games/zk.sdd

== Directory Structure ==
==='''&lt;code&gt;root of game folder&lt;/code&gt;'''===

[[Modinfo.lua]] and can also contain [[Modoptions.lua]], [[AI:Development:Lang:Lua|LuaAI.lua]], and [[springignore.txt]]

==='''&lt;code&gt;anims\&lt;/code&gt;'''&lt;br&gt;===
image files for [[MouseCursors|mouse cursors]]

==='''&lt;code&gt;bitmaps\&lt;/code&gt;'''&lt;br&gt;===

===='''&lt;code&gt;bitmaps\loadpictures&lt;/code&gt;'''&lt;br&gt;====
pictures that will be displayed when the game loads.

===='''&lt;code&gt;bitmaps\tracks&lt;/code&gt;'''&lt;br&gt;====
images that are used for the [[Gamedev:UnitDefs#Decals|unit tracks]]

==='''&lt;code&gt;features\&lt;/code&gt;'''&lt;br&gt;===
.lua [[Gamedev:FeatureDefs|FeatureDef]] files
: Corpse and map-static feature definitions. The corpse files are similar to [[Gamedev:UnitDefs|UnitDefs]] but usually contain a less data, such as what model to use as the wreckage, how much metal the wreck will give if reclaimed, etc. Some games choose to subsume these into the [[Gamedev:UnitDefs|UnitDef]] instead of having separate files.Subfolders are allowed.

==='''&lt;code&gt;gamedata\&lt;/code&gt;'''&lt;br&gt;===
[[:Category:Gamedata|Various files]] that control global things or setup graphic &amp; sound resources.

==='''&lt;code&gt;icons\&lt;/code&gt;'''&lt;br&gt;===
images for [[Icontypes.lua|unit symbols and radar icons]]

==='''&lt;code&gt;LuaRules\&lt;/code&gt;'''&lt;br&gt;===
various files to make Lua scripts work such as gadget handler
===='''&lt;code&gt;LuaRules\Gadgets&lt;/code&gt;'''&lt;br&gt;====
[[Lua_Scripting|Lua gadgets]]: scripts that control the gameplay
===='''&lt;code&gt;LuaRules\Configs&lt;/code&gt;'''&lt;br&gt;====
config files read by Lua gadgets

==='''&lt;code&gt;LuaUI\&lt;/code&gt;'''&lt;br&gt;===
===='''&lt;code&gt;LuaUI\widgets&lt;/code&gt;'''&lt;br&gt;====
[[Lua_Scripting|Lua widget]]: scripts that make up the user interface or do other unsynced things

==='''&lt;code&gt;objects3d\&lt;/code&gt;'''&lt;br&gt;===
.3do, [[About_s3o|.s3o]] or [[Assimp]] compatible 3D model files
: This contains the actual 3D model that units and features use in-game. Most units have a variety of different pieces that are put together in a hierarchy type form (for instance, a tank has a hull, a turret attached to that, and a barrel attached to that). The {{xtaglink|Gamedev:UnitDefs|model}} tag determines what model is used.

==='''&lt;code&gt;scripts\&lt;/code&gt;'''&lt;br&gt;===
[[Animation-LuaScripting|.lua]] or [[Animation-CobOverview|.cob ]] animation script files
: This contains all of the animation scripting for the units. Scripts work by calling on pieces of the unit's model to do things, such as rotate a turret to aim at a target, or emit smoke when the unit is damaged. The pieces named in the script file must reflect actual parts of the unit's.

==='''&lt;code&gt;sidepics\&lt;/code&gt;'''&lt;br&gt;===
[[Sidedata.lua|Faction icons]] read by lobby etc.

==='''&lt;code&gt;sounds\&lt;/code&gt;'''&lt;br&gt;===
[[Sounds.lua|sound files]]

==='''&lt;code&gt;units\&lt;/code&gt;'''&lt;br&gt;===
.lua [[Gamedev:UnitDefs|UnitDef]] files
: Contains most of the active data that a unit uses, such as its health, a list of which weapons it has, speed, metal/energy cost, whether it is a construction unit or not, so on and so forth. Subfolders are allowed.

==='''&lt;code&gt;unitpics\&lt;/code&gt;'''&lt;br&gt;===
.dds or .png [[Gamedev:Buildpics|buildmenu pictures]]
:Unit pictures are those little thumbnails which show up in the build menus of units in-game. They're just a little graphical representation of the unit so people know what they're building when they click it. Assigned via the {{xtaglink|Gamedev:UnitDefs|buildpic}} tag.

==='''&lt;code&gt;unittextures\&lt;/code&gt;'''&lt;br&gt;===
.dds, .tga or .png image [[3DModels:Textures|texture]] files. 
: Image files which are stretched over the unit. Texture 1 contains the diffuse and team colour and texture 2 controls reflectivity, specular, glow and 1-bit transparency. Subfolders are allowed.

==='''&lt;code&gt;weapons\&lt;/code&gt;'''&lt;br&gt;===
.lua [[Gamedev:WeaponDefs|WeaponDef]] files
: Most units have weapons. The characteristics of these weapons, from its behaviour to how it acts in the air, is determined in the weapon file. Some games choose to subsume these into the [[Gamedev:UnitDefs|UnitDef]] instead of having separate files. Subfolders are allowed.

[[Category:Game Dev]]</text>
      <sha1>2kcohm0lip74n8bjagqhsqrdyur40zp</sha1>
    </revision>
  </page>
  <page>
    <title>Gamedev:UnitDefs</title>
    <ns>0</ns>
    <id>3109</id>
    <revision>
      <id>31749</id>
      <parentid>31642</parentid>
      <timestamp>2022-02-01T19:16:29Z</timestamp>
      <contributor>
        <username>Maddox</username>
        <id>2934</id>
      </contributor>
      <comment>Added alert that 'harvestStorage' isn't working</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="55379">[[Gamedev:Main|Development]] &lt; [[Gamedev:Main]] &lt; {{FULLPAGENAME}}

==Location==
UnitDef files are .lua files stored in the &lt;code&gt;Units/&lt;/code&gt; directory of a Spring Game.

==Purpose==
UnitDef files have one purpose; to define the properties of units. They are the main description file for what attributes your unit should have and how it should behave.

==Source==
The engine source code which loads the tags from these files is viewable here:

* {{sourcelink|file=rts/Sim/Units/UnitDef.cpp}}


The engine source which reads the [[#sounds]] subtable can be found here:

* {{sourcelink|file=rts/Sim/Units/UnitDefHandler.cpp}}

==Data Types==
{{DataTypes}}

==Details==
There follows a comprehensive (certain deprecated tags are not present) list of the tags available, their data type, default value and a brief description of what they do. Bear in mind that the source code linked above is the ultimate reference when dealing with these tags. 

In lua tables keys (i.e. the tags) should be lower case, here they are represented in camelCase for readability. In your files you may use the &lt;code&gt;lowerkeys&lt;/code&gt; function on your final table to ensure the keys are properly cased.

It is usual to name the returned UnitDef table the internal &lt;code&gt;unitName&lt;/code&gt; desired for the unit.

===General===
{{tag
|name = name
|type = string
|default = &quot;&quot;
|lua = humanName
|description = This is simply the name of the unit as it appears to the player.}}

{{tag
|name = description
|type = string
|default = name
|lua = tooltip
|description = This is the tooltip description of the unit seen by the player. It defaults to the {{taglink|name}} of the unit.}}

{{tag
|name = buildPic
|type = string
|default = &quot;&quot;
|lua = buildPicName
|description = The filename of the image to be used as the build picture, assumes &lt;code&gt;Unitpics/&lt;/code&gt; directory (see [[Gamedev:Buildpics]]).}}

{{tag
|name = objectName
|type = string
|default = &quot;&quot;
|lua = modelname
|description = The filename of the 3D model file for this unit, assumes &lt;code&gt;Objects3D/&lt;/code&gt; directory.}}

{{tag
|name = script
|type = string
|default = unitName + &quot;.cob&quot;
|lua = scriptName
|description = The filename of the animation script file for this unit, assumes &lt;code&gt;Scripts/&lt;/code&gt; directory. Default assumes .cob file but [[Animation-LuaScripting | LUS]] should be preferred.}}

{{tag
|name = maxDamage
|type = float
|default = 0.0
|lua = health
|description = The base 'hitpoints' the unit will have.}}

{{tag
|name = autoHeal
|type = float
|default = 0.0
|description = How much health the unit will regain every second.}}

{{tag
|name = idleAutoHeal
|type = float
|default = 10.0
|description = How much health the unit will regain every second whilst it is idle.}}

{{tag
|name = idleTime
|type = int
|default = 600
|description = The time in [[frames]] taken until a unit is considered to be idle.}}

{{tag
|name = buildCostMetal
|type = float
|default = 1.0
|lua = metalCost
|description = The amount of metal resource the unit costs to build. Cannot be below &lt;code&gt;1.0&lt;/code&gt;.}}

{{tag
|name = buildCostEnergy
|type = float
|default = 0.0
|lua = energyCost
|description = The amount of energy resource the unit costs to build.}}

{{tag
|name = buildTime
|type = float
|default = 0.0
|description = The time taken to build the unit, in conjunction with the {{taglink|workerTime}} of the constructor. In [[Gamedev:UnitsOfMeasurement#Time|Resource Frames]], &lt;code&gt;Time to build = (buildTime / workerTime)&lt;/code&gt;. Defaults to &lt;code&gt;0.0&lt;/code&gt; but cannot actually be below &lt;code&gt;1.0&lt;/code&gt;.}}

{{tag
|name = mass
|type = float
|default = buildCostMetal
|description = The mass of the unit, used in weapon impulse calculations. Cannot be less than &lt;code&gt;1.0&lt;/code&gt;.}}

{{tag
|name = reclaimable
|type = bool
|default = true
|description = Can the unit be reclaimed by a builder?}}

{{tag
|name = capturable
|type = bool
|default = true
|description = Can a unit be stolen by a builder using the capture command?}}

{{tag
|name = repairable
|type = bool
|default = true
|description = Can the unit be repaired by a builder?}}

{{tag
|name = maxRepairSpeed
|type = float
|default = 1e20
|description = The maximum cumulative speed at which this unit type can repair a single target.}}

{{tag
|name = iconType
|type = string
|default = &quot;default&quot;
|description = The name of the radar icon type this unit should use (see [[Icontypes.lua]]).}}

{{tag
|name = corpse
|type = string
|default = &quot;&quot;
|lua = wreckName
|description = The name of the feature this unit should leave behind as a wreck when it dies (see [[Gamedev:FeatureDefs]]).}}

{{tag
|name = explodeAs
|type = string
|default = &quot;&quot;
|description = The name of the weapon this unit should explode as when it is killed (see [[Gamedev:WeaponDefs]]).}}

{{tag
|name = selfDestructAs
|type = string
|default = &quot;&quot;
|description = The name of the weapon this unit should explode as when it self destructs (see [[Gamedev:WeaponDefs]]). Also used as the {{taglink|kamikaze}} weapon.}}

===Resources===
{{tag
|name = harvestStorage
|type = float
|default = 0.0
|special = {{new|97.0; ATTENTION: unfinished implementation, can be set in UnitDefs but it can't be read in-game}}
|description = How much of the metal resource a unit can store when used as an engine-assisted resource 'harvester'. See also [[Lua_SyncedRead#Unit_Informations|Spring.GetUnitHarvestStorage]] and [[Lua_SyncedCtrl#Unit_Resourcing|Spring.SetUnitHarvestStorage]] callouts.}}

{{tag
|name = metalStorage
|type = float
|default = 0.0
|description = The amount of the metal resource storage the unit contributes.}}

{{tag
|name = energyStorage
|type = float
|default = 0.0
|description = The amount of the energy resource storage the unit contributes.}}

{{tag
|name = extractsMetal
|type = float
|default = 0.0
|description = The amount of the metal resource the unit extracts from the ground. The amount extracted depends on the metal map defined in the map itself. Works only for structures.}}

{{tag
|name = windGenerator
|type = float
|default = 0.0
|description = The maximum amount of the energy resource the unit generates which is dependant on the map wind. Works only for structures. If wind speed is higher than this, the unit will still only produce this much. If wind speed is less, it will produce as much as windspeed is.}}

{{tag
|name = tidalGenerator
|type = float
|default = 0.0
|description = The amount of the energy resource the unit generates which is dependant on the maps tidal power. Clearly, this only works on water structures.}}

{{tag
|name = metalUse
|type = float
|default = 0.0
|lua = metalUpkeep
|description = The amount of the metal resource the unit consumes per game 'tick' when activated.}}

{{tag
|name = energyUse
|type = float
|default = 0.0
|lua = energyUpkeep
|description = The amount of the energy resource the unit consumes per game 'tick' when activated.}}

{{tag
|name = metalMake
|type = float
|default = 0.0
|description = The amount of the metal resource the unit generates unconditionally per game 'tick'.}}

{{tag
|name = energyMake
|type = float
|default = 0.0
|description = The amount of the energy resource the unit generates unconditionally per game 'tick'.}}

{{tag
|name = makesMetal
|type = float
|default = 0.0
|description = The amount of the energy resource the unit turns into the metal resource per game 'tick'.}}

===Sensors===
{{tag
|name = onOffable
|type = bool
|default = false
|description = Does the unit have an on/off button? Currently the activation status tied to this button also turns sensors (other than LOS) on and off.}}

{{tag
|name = activateWhenBuilt
|type = bool
|default = false
|description = Should the unit's activation status be on or off when it is created?}}

{{tag
|name = sightDistance
|type = float
|default = 0.0
|lua = losRadius
|description = The radius of the units sight (LOS is circular in Spring). 
}}

{{tag
|name = airSightDistance
|type = float
|default = 1.5 * sightDistance
|lua = airLosRadius
|description = How far away the unit can see aircraft (and some FX).}}

{{tag
|name = losEmitHeight
|type = float
|default = 20.0
|lua = losHeight 
|special = {{new|83.0}}
|description = How high up the unit is the point used to calculate it's LOS vs. the terrain?}}

{{tag
|name = radarEmitHeight
|type = float
|default = 20.0
|lua = radarHeight
|special = {{new|83.0}}
|description = How high up the unit is the point used to calculate it's radar vs. the terrain?}}

{{tag
|name = radarDistance
|type = int
|default = 0
|lua = radarRadius
|description = The radius of the units radar.}}

{{tag
|name = sonarDistance
|type = int
|default = 0
|lua = sonarRadius
|description = The radius of the units sonar.}}

{{tag
|name = radarDistanceJam
|type = int
|default = 0
|lua = jammerRadius
|description = The radius of the units radar jamming.}}

{{tag
|name = sonarDistanceJam
|type = int
|default = 0
|lua = sonarJamRadius
|description = The radius of the units sonar jamming.}}

{{tag
|name = stealth
|type = bool
|default = false
|description = Is the unit undetectable by radar?}}

{{tag
|name = sonarStealth
|type = bool
|default = false
|description = Is the unit undetectable by sonar?}}

{{tag
|name = seismicDistance
|type = int
|default = 0
|lua = seismicRadius
|description = The radius of the unit's seismic (movement) sensor.}}

{{tag
|name = seismicSignature
|type = float
|default = 0 for units with {{taglink|floater}}, {{taglink|canHover}} or {{taglink|canFly}}, otherwise sqrt(mass / 100.0)
|description = How fast the seismic ring expands in [[elmo]]s per frame. Each ping always lasts 15 [[frames]], so this also determines the maximum radius of the seismic ring.}}

====Cloaking====
For units with {{taglink|canCloak|true}}:
{{tag
|name = cloakCost
|type = float
|default = 0.0
|description = The energy cost per tick to cloak the unit while it is stationary.}}

{{tag
|name = cloakCostMoving
|type = float
|default = cloakCost
|description = The energy cost per tick to cloak the unit while it is moving.}}

{{tag
|name = initCloaked
|type = bool
|default = false
|lua = startCloaked
|description = Is the unit cloaked as soon as it is created?}}

{{tag
|name = minCloakDistance
|type = float
|default = 0.0
|description = The minimum distance (radius) which the unit must be from any enemy units to remain cloaked.}}

{{tag
|name = decloakSpherical
|type = bool
|default = true
|description = Does {{taglink|minCloakDistance}} apply in 3D or only 2D? i.e. can aircraft flying above the unit decloak it?}}

{{tag
|name = decloakOnFire
|type = bool
|default = true
|description = Does the unit decloak when it fires a weapon?}}

{{tag
|name = cloakTimeout
|type = int
|default = 128
|description = The minimum time, in [[frames]], between a decloak and subsequent re-cloak.}}

===Commands===
{{tag
|name = canMove
|type = bool
|default = false
|description = Can the unit be issued Move orders?
}}

{{tag
|name = canAttack
|type = bool
|default = true
|description = Can the unit be issued Attack orders?
}}

{{tag
|name = canFight
|type = bool
|default = true
|description = Can the unit be issued Fight orders?
}}

{{tag
|name = canPatrol
|type = bool
|default = true
|description = Can the unit be issued Patrol orders?
}}

{{tag
|name = canGuard
|type = bool
|default = true
|description = Can the unit be issued Guard orders?
}}

{{tag
| name = canCloak
| type = bool
| default = false
| description =
Can the unit be issued Cloak orders?
}}

{{tag
|name = canRepeat
|type = bool
|default = true
|description = Can the unit be issued Repeat orders?
}}

{{tag
|name = canSelfDestruct
|type = bool
|default = true
|lua = canSelfD
|description = Can the unit be issued a self destruct order?
}}

{{tag
|name = moveState
|type = int
|default = -1 for mobile units, 1 for structures
|description = The initial movement state for the unit. Can be {{value|-1}} - Inherits from factory, {{value|0}} - Hold Position, {{value|1}} - Manoeuvre or {{value|2}} - Roam.
}}

{{tag
|name = fireState
|type = int
|default = -1 for units with {{taglink|noAutoFire|false}}, 2 otherwise
|description = The initial firing state for the unit. Can be {{value|-1}} - Inherits from factory, {{value|0}} - Hold Fire, {{value|1}} - Return Fire or {{value|2}} - Fire At Will. Since 104.0 there is an additional value {{value|3}} - Fire At Neutral.
}}

{{tag
|name = noAutoFire
|type = bool
|default = false
|lua = canFireControl
|description = Controls whether or not the unit has a fire state button.
}}

{{tag
|name = canManualFire
|type = bool
|default = false
|description = description = Can the unit be issued ManualFire commands? A ManualFire command will fire any weapons with the {{xtaglink|Gamedev:WeaponDefs|commandfire}} tag.
}}

====Builder Commands====
{{tag
|name = canRestore
|type = bool
|default = builder &amp;&amp; {{taglink|terraformSpeed}} &gt; 0
|description = Can the unit be issued restore terrain commands? For builders only.
}}

{{tag
|name = canRepair
|type = bool
|default = builder &amp;&amp; {{taglink|repairSpeed}} &gt; 0
|description = Can the unit be issued repair commands? For builders only.
}}

{{tag
|name = canReclaim
|type = bool
|default = builder &amp;&amp; {{taglink|reclaimSpeed}} &gt; 0
|description = Can the unit be issued reclaim commands? For builders only.
}}

{{tag
|name = canResurrect
|type = bool
|default = builder &amp;&amp; {{taglink|resurrectSpeed}} &gt; 0
|description = Can the unit be issued resurrection commands? For builders only.
}}

{{tag
|name = canCapture
|type = bool
|default = builder &amp;&amp; {{taglink|captureSpeed}} &gt; 0
|description = Can the unit be issued capture commands? For builders only.
}}

===Builder===
{{tag
|name = builder
|type = bool
|default = false
|lua = isBuilder
|description = Is the unit a builder?}}

{{tag
|name = buildDistance
|type = float
|default = 128.0
|description = How far away from itself the unit can build, measured to the centre of the unit being built. The minimum value is &lt;code&gt;38.0&lt;/code&gt;.}}

{{tag
|name = buildRange3D
|type = bool
|default = false
|description = Does the builders {{taglink|buildDistance}} apply in all 3 dimensions or only 2?}}

{{tag
|name = workerTime
|type = float
|default = 0.0
|lua = buildSpeed
|description = How fast the builder builds, used in conjunction with the {{taglink|buildTime}} of the unit being built. Effectively, &lt;code&gt;Time to build = buildTime / workerTime&lt;/code&gt;. If this value is &lt;= &lt;code&gt;0.0&lt;/code&gt; then {{taglink|builder}} is set to false.}}

{{tag
|name = repairSpeed
|type = float
|default = workerTime
|description = How fast the builder can repair other units.}}

{{tag
|name = reclaimSpeed
|type = float
|default = workerTime
|description = How fast the builder can reclaim other units and features.}}

{{tag
|name = resurrectSpeed
|type = float
|default = workerTime
|description = How fast the builder can resurrect corpse features back into living units.}}

{{tag
|name = captureSpeed
|type = float
|default = workerTime
|description = How fast the builder can capture other units.}}

{{tag
|name = terraformSpeed
|type = float
|default = workerTime
|description = How fast the builder levels and restores terrain.}}

{{tag
|name = canAssist
|type = bool
|default = builder
|description = Can the builder assist other constructions?}}

{{tag
|name = canBeAssisted
|type = bool
|default = true
|description = Can the builder be assisted by other builders?}}

{{tag
|name = canSelfRepair
|type = bool
|default = false
|description = Can the builder repair itself?}}

{{tag
|name = showNanoSpray
|type = bool
|default = true
|description = Does the builder emit OTA-style nanospray whilst constructing?}}

{{tag
|name = nanoColor
|type = float[3]
|default = {0.2, 0.7, 0.2} aka green
|description = The RGB colour of a builders' emitted nano particles if {{taglink|showNanoSpray|true}}. Also controls the RBG colour of a unit's own nanoframe if {{taglink|showNanoFrame|true}}.}}

{{tag
|name = fullHealthFactory
|type = bool
|defaul[[elmo]]s
|description = If &lt;code&gt;true&lt;/code&gt;, units are repaired before they are allowed to leave the factory i.e. units from this factory will be healed back to 100% health if they are damaged during construction.}}

{{tag
|name = isAirbase
|type = bool
|default = false
|special = Removed in 101.0 in favour of more flexible lua custom commands
|description = Is this unit an airbase? Aircraft may land and repair on units which are airbases.}}

===Movement &amp; Placement===
{{tag
|name = footprintX
|type = int
|default = 1
|description = 
How wide the unit is in footprint units, left to right. 1 footprint unit = 16 [[elmo]]s. Cannot be below &lt;code&gt;1&lt;/code&gt;. For mobile units this should be the same as the {{xtaglink|Movedefs.lua|footprintX}} of its {{taglink|movementClass}}. Also used for obstacle avoidance.
}}

{{tag
|name = footprintZ
|type = int
|default = 1
|description = 
How wide the unit is in footprint units, top to bottom. 1 footprint unit = 16 [[elmo]]s. Cannot be below &lt;code&gt;1&lt;/code&gt;. For mobile units this should be the same as the {{xtaglink|Movedefs.lua|footprintZ}} of its {{taglink|movementClass}}. Also used for obstacle avoidance.
}}

{{tag
|name = yardmap
|type = string
|default = &quot;&quot;
|description = 
Used to determine a structure from a mobile unit. A string of characters which defines in detail each 'footprint square' of the structure. Each footprint square may be: 
:: &lt;code&gt;y&lt;/code&gt; - 'Yard' - Always open, unblocking, 
:: &lt;code&gt;c&lt;/code&gt; - 'Construction' - Open and unblocking only while constructing (for factories, controlled via &lt;code&gt;COB.YARD_OPEN&lt;/code&gt; see [[Animation-LuaCallouts#Other]]), 
:: &lt;code&gt;i&lt;/code&gt; - 'Inversed Construction' - Closed and blocking only while constructing (for factories, controlled via &lt;code&gt;COB.YARD_OPEN&lt;/code&gt; see [[Animation-LuaCallouts#Other]]) ({{new|89.0}}), 
:: &lt;code&gt;g&lt;/code&gt; - 'Geothermal' - Flags that the unit must be placed over a {{xtaglink|Gamedev:FeatureDefs|geoThermal}} feature, does not actually count as a square, 
:: &lt;code&gt;h&lt;/code&gt; - 'High Resolution' - Indicates that the yardmap will use double resolution with four times as many characters. Must be the '''first''' character, and does not count as a square itself ({{new|93.0}}),
::&lt;code&gt;o&lt;/code&gt; - 'Obstacle' - Always closed, blocking, all other chars are treated the same way.
: Tip: 'Draw' out the yardmap over multiple lines. As of &lt;span class=warning&gt;89.0&lt;/span&gt; all whitespace characters are ignored, including newlines.
}}

{{tag
|name = buildingMask
|type = int
|default = 1
|description = [http://en.wikipedia.org/wiki/Mask_(computing) Bitmask] representing the types of ground that this structure can be built on. Each digit of binary that is set to one means that a ground square with the corresponding digit set via [[Lua_SyncedCtrl#Ground|Spring.SetSquareBuildingMask]] can be built on.
}}

{{tag
|name = levelGround
|type = bool
|default = false
|description = For structures. Does the constructor have to level the ground underneath the build area before beginning to build the structure?
}}

{{tag
|name = movementClass
|type = string
|default = &quot;&quot;
|lua = moveDef.name
|description = The name of the movement type a mobile, non aircraft, unit should use. See [[Movedefs.lua]].
}}

{{tag
|name = canHover
|type = bool
|default = false
|special = &lt;span class=&quot;warning&quot;&gt;Removed in 95.0&lt;/span&gt;
|description = Is the unit a hovercraft? Hovercraft can cross water of any depth without a speed penalty. Hover's must also have &lt;code&gt;HOVER&lt;/code&gt; within the name of their {{taglink|movementClass}} (see [[Movedefs.lua]]).
}}

{{tag
|name = floater
|type = bool
|default = false if a {{taglink|moveClass}} is defined, if not true if {{taglink|waterline|true}}, false otherwise
|description = When a mobile unit is crossing water, or a structure is placed on water, does it float on top of the water or crawl / lay on the sea bed?
}}

{{tag
|name = upright
|type = bool
|default = false
|description = Does the unit follow the terrain or always remain upright? Generally used for walkers.
}}

{{tag
|name = maxSlope
|type = float
|default = 0.0
|lua = maxHeightDif
|description = The maximum slope a building can be placed on. Mobile unit's use the {{xtaglink|Movedefs.lua|maxSlope}} set in their {{taglink|movementClass}}. The value is in degrees and is clamped between &lt;code&gt;0.0&lt;/code&gt; and &lt;code&gt;89.0&lt;/code&gt;. This value is converted to a &quot;maximum allowed height difference&quot; (call it M), which involves a hard-coded constant. When a building gets placed, the height of each of its footprint squares is compared to a reference height (calculated for the build position). If the difference exceeds M for any square, that build position is rejected. The value readable from lua has been changed from that in the unitdef and reflects the internal engine value.
}}

{{tag
|name = minWaterDepth
|type = float
|default = -10e6
|description = The minimum depth of water a building can be placed on. Mobile unit's use the {{xtaglink|Movedefs.lua|minWaterDepth}} set in their {{taglink|movementClass}}.
}}

{{tag
|name = maxWaterDepth
|type = float
|default = 10e6
|description = The maximum depth of water a building can be placed on. Mobile unit's use the {{xtaglink|Movedefs.lua|maxWaterDepth}} set in their {{taglink|movementClass}}.
}}

{{tag
|name = waterline
|type = float
|default = 0.0
|description = How low in the water does a ship sit? Higher values means the ship is lower in the water.
}}

{{tag
|name = minCollisionSpeed
|type = float
|default = 1.0
|description = The minimum net impact speed that will cause a unit to be damaged by collisions with another unit.
}}

{{tag
|name = pushResistant
|type = bool
|default = false
|description = Can the unit be pushed around by other units? Turning it on doesn't remove all pushing but is a marked improvement.
}}

{{tag
|name = maxVelocity
|type = float
|default = 0.0
|lua = speed
|description = The maximum speed attainable by the unit in [[elmo]]s per frame. If the value is -ve, the absolute value is used.
}}

{{tag
|name = maxReverseVelocity
|type = float
|default = 0.0
|lua = rSpeed 
|special = {{new|99.0}}
|description = The maximum speed attainable by the unit in reverse in [[elmo]]s per frame. If the value is -ve, the absolute value is used.
}}

{{tag
|name = acceleration
|type = float
|default = 0.5
|lua = maxAcc
|description = The acceleration of the unit, in [[elmo]]s per frame&lt;sup&gt;2&lt;/sup&gt;. If the value is -ve, the absolute value is used.
}}

{{tag
|name = brakeRate
|type = float
|default = acceleration
|lua = maxDec
|description = The deceleration of the unit, in [[elmo]]s per frame&lt;sup&gt;2&lt;/sup&gt;. If the value is -ve, the absolute value is used. For units with {{taglink|canFly|true}} this is multiplied by &lt;code&gt;0.1&lt;/code&gt;. Prior to 95.0 this was scaled by 0.1 for aircraft and the default was 3x acceleration.
}}

{{tag
|name = myGravity
|type = float
|default = 0.4
|description = As Spring aircraft are slower than real aircraft this tag allows to lower gravity to compensate. Multiplies against map gravity for aircraft, replaces map gravity for ground vehicles if non-zero.
}}

{{tag
|name = turnRate
|type = float
|default = 0.0
|description = How fast the unit can turn. &lt;code&gt;degrees per seconds = 0.16 * turnRate&lt;/code&gt;.
}}

{{tag
|name = turnInPlace
|type = bool
|default = true
|description = Does the unit turn on the spot (like a person or tank) or must it be moving forwards to turn (like a car).
}}

{{tag
|name = turnInPlaceSpeedLimit
|type = float
|default = A complex formula based on {{taglink|turnRate}} and {{taglink|maxVelocity}}
|description = For units with {{taglink|turnInPlace|false}}, this defines the minimum speed it will slow down to (the speed at which the turn is actually performed can be higher depending on the angular difference and {{taglink|turnRate}}).
}}

{{tag
| name = turnInPlaceAngleLimit
| type = float
| default = 0.0
| special = {{new|86.0}}
| description = For units with {{taglink|turnInPlace|true}}, defines the maximum angle (in degrees) of a turn above which it starts to brake.
}}

{{tag
|name = blocking
|type = bool
|default = true
|description = Does the unit block the movement of other units? (Mines, i.e. non-mobile units with the {{taglink|kamikaze}} tag default to &lt;code&gt;false&lt;/code&gt;).
}}

{{tag
|name = crushResistance
|type = float
|default = mass
|special = {{new|85.0}}
|description = How resistant is the unit to being crushed? Any [[Movedefs.lua|'''MoveClass''']] with a {{xtaglink|Movedefs.lua|crushStrength}} greater than this will crush the unit - IFF this has been enabled via [[Lua_SyncedCtrl#Unit_Control|Spring.SetUnitBlocking]] and the collider impulse exceeds that of the colidee.
}}

===Flanking===
{{tag
|name = flankingBonusMode
|type = int
|default = flankingBonus.defaultMode set in [[Modrules.lua]]
|description = The mode of operation of Spring's inbuilt flanking system. Can be &lt;code&gt;0&lt;/code&gt; - No flanking bonus. Mode &lt;code&gt;1&lt;/code&gt; builds up the ability to move over time, and swings to face attacks, but does not respect the way the unit is facing. Mode &lt;code&gt;2&lt;/code&gt; also can swing, but moves with the unit as it turns. Mode &lt;code&gt;3&lt;/code&gt; stays with the unit as it turns and otherwise doesn't move, the ideal mode to simulate something such as tank armour.
}}

{{tag
|name = flankingBonusDir
|type = float[3]
|default = {0.0, 0.0, 1.0}
|description = This is the direction vector where the armour is facing; i.e. where the least damage is applied. The default is straight forwards.
}}

{{tag
|name = flankingBonusMax
|type = float
|default = 1.9
|description = The maximum multiplier to the damage dealt, when a unit is hit from the opposite direction to {{taglink|flankingBonusDir}}.
}}

{{tag
|name = flankingBonusMin
|type = float
|default = 0.9
|description = The minimum multiplier to the damage dealt, when a unit is hit from the same direction as {{taglink|flankingBonusDir}}.
}}

{{tag
|name = flankingBonusMobilityAdd
|type = float
|default = 0.01
|description = This defines the ability of {{taglink|flankingBonusDir}} to move over time. Its value is added to the mobility every [[SlowUpdate]]. When the unit is attacked, the build up mobility value is multiplied by a vector facing the attack, which is added to {{taglink|flankingBonusDir}}.
}}

===Aircraft===
{{tag
|name = canFly
|type = bool
|default = false
|description = Can the unit fly, i.e. is it an aircraft?
}}

{{tag
|name = canSubmerge
|type = bool
|default = false
|description = Can the aircraft land underwater?
}}

{{tag
|name = factoryHeadingTakeoff
|type = bool
|default = true
|description = Controls the take-off behaviour of aircraft with {{taglink|hoverAttack|true}}. &lt;code&gt;true&lt;/code&gt; means planes start matching their heading right after taking off from the pad, &lt;code&gt;false&lt;/code&gt; means they maintain the heading of the pad until reaching {{taglink|cruiseAlt}}.
}}

{{tag
|name = collide
|type = bool
|default = true
|description = Does the unit collide with other aircraft, or can it occupy the same space?
}}

{{tag
|name = hoverAttack
|type = bool
|default = false
|description = Controls whether the aircraft flys and attacks like a fighter/bomber or a helicopter/gunship.
}}

{{tag
|name = airStrafe
|type = bool
|default = true
|description = For aircraft with {{taglink|hoverAttack|true}}, controls if the unit strafes side to side while attacking or remains stationary.
}}

{{tag
|name = cruiseAlt
|type = float
|default = 0.0
|lua = wantedHeight
|description = The altitude in [[elmo]]s which the unit attempts to fly at while cruising.
}}

{{tag
|name = airHoverFactor
|type = float
|default = -1.0
|lua = dlHoverFactor
|description = For aircraft with {{taglink|hoverAttack|true}}, less then &lt;code&gt;0&lt;/code&gt; means it can land and &gt;= &lt;code&gt;0&lt;/code&gt; indicates how much the unit will move during hovering on the spot.
}}

{{tag
|name = bankingAllowed
|type = bool
|default = true
|description = For aircraft with {{taglink|hoverAttack|true}}, controls whether or not the unit banks when moving turning.
}}

{{tag
|name = useSmoothMesh
|type = bool
|default = true
|description = Does the aircraft follow the real map terrain or the special smoothed out navigation mesh generated by Spring specifically for aircraft?} Can become problematic for construction aircrafts, building in canyons.
}}

{{tag
|name = maxFuel
|type = float
|default = 0.0
|special = Removed in 101.0 in favour of more flexible lua custom commands
|description = The maximum flight time in seconds before aircraft must return to an airbase to refuel.
}}

{{tag
|name = refuelTime
|type = float
|default = 5.0
|special = Removed in 101.0 in favour of more flexible lua custom commands
|description = The time in seconds required to refuel the aircraft at an airbase.
}}

{{tag
|name = minAirbasePower
|type = float
|default = 0.0
|special = Removed in 101.0 in favour of more flexible lua custom commands
|description = The minimum {{taglink|workerTime}} an airbase must have to repair / refuel this aircraft.
}}

{{tag
|name = canLoopbackAttack
|type = bool
|default = false
|description = Can the aircraft perform an [http://en.wikipedia.org/wiki/Immelmann_turn Immelmann turn]?
}}

====Advanced Air Tags====
The following set of tags are not well understood and using non-default values can lead to undesired flight behaviours.&lt;br /&gt;&lt;br /&gt;
{{tag
|name = wingDrag
|type = float
|default = 0.07
|description = The drag caused by the aircraft's wing. Clamped between &lt;code&gt;0.0&lt;/code&gt; and &lt;code&gt;1.0&lt;/code&gt;.
}}

{{tag
|name = wingAngle
|type = float
|default = 0.08
|description = The angle between the front and the wing plane.
}}

{{tag
|name = frontToSpeed
|type = float
|default = 0.1
|description = How far nose can be unaligned to speed vector before accelleration is applied.
}}

{{tag
|name = speedToFront
|type = float
|default = 0.07
|description = Rate for the nose to align to new (true) direction change. Values above 0.1 may lead to cumulative speedup issues.
}}

{{tag
|name = crashDrag
|type = float
|default = 0.005
|description = The drag used when crashing. Clamped between &lt;code&gt;0.0&lt;/code&gt; and &lt;code&gt;1.0&lt;/code&gt;.
}}

{{tag
|name = maxBank
|type = float
|default = 0.8
|description = The maximum roll (z-axis rotation) the aircraft can achieve.
}}

{{tag
|name = maxPitch
|type = float
|default = 0.45
|description = The maximum pitch (x-axis rotation) the aircraft tries to keep.
}}

{{tag
|name = turnRadius
|type = float
|default = 500.0
|description = Hint to Spring unit AI about the required turning radius.
}}

{{tag
|name = verticalSpeed
|type = float
|default = 3.0
|description = The speed of takeoff and landing, at least for gunships ({{taglink|hoverAttack|true}}).
}}

{{tag
|name = maxAileron
|type = float
|default = 0.015
|description =  The maximum turn speed around the roll (z) axis.
}}

{{tag
|name = maxElevator
|type = float
|default = 0.01
|description = The maximum turn speed around the pitch (x) axis.
}}

{{tag
|name = maxRudder
|type = float
|default = 0.004
|description = The maximum turn speed around the yaw (y) axis.
}}

{{tag
|name = maxAcc
|type = float
|default = 0.065
|description = The maximum acceleration or 'engine power' of the aircraft.
}}

{{tag
|name = attackSafetyDistance
|type = float
|default = 0
| special = Exists only in version 99.0
|description = Fighters abort dive toward target if within attackSafetyDistance and try to climb back to normal altitude while still moving toward target. It's disabled by default. Set to half of the minimum weapon range to avoid collisions, enemy fire, AOE damage. If set to greater than the weapon range, the unit will fly over the target like a bomber. This tag was removed in version 100.0 and changed to a [[Lua_MoveCtrl#MoveType-Controlling|Spring.SetMoveTypeData]] key.
}}

====Flares====
The following set of tags are rarely used and are hardcoded to only work vs. missile weapons. The texture is hardcoded to be &lt;code&gt;flareprojectiletexture&lt;/code&gt; defined in [[Resources.lua]].&lt;br /&gt;&lt;br /&gt;
{{tag
|name = canDropFlare
|type = bool
|default = false
|description = Can this aircraft drop flares to distract missile weapons?
}}

{{tag
|name = flareReload
|type = float
|default = 5.0
|lua = flareReloadTime
|description = The time in seconds between successive flare drops.
}}

{{tag
|name = flareDelay
|type = float
|default = 0.3
|description = The delay between detecting an incoming missile and launching flares. Multiplied by a random number between 1 and 16.
}}

{{tag
|name = flareEfficiency
|type = float
|default = 0.5
|description = The probability that an incoming missile will target the flare instead of the aircraft.
}}

{{tag
|name = flareDropVector
|type = float[3]
|default = {0.0, 0.0, 0.0}
|description = The direction vector which flares are emitted in.
}}

{{tag
|name = flareTime
|type = int
|default = 3
|description = The lifetime of a dropped flare in [[frames]].
}}

{{tag
|name = flareSalvoSize
|type = int
|default = 4
|description = How many flares are dropped at once?
}}

{{tag
|name = flareSalvoDelay
|type = int
|default = 0
|description = The delay in [[frames]] between the release of each individual flare in a burst.
}}

===Transports===
{{tag
|name = transportSize
|type = int
|default = 0
|description = The size of units that the transport can pick up, in terms of the passengers {{taglink|footprintX}}.}}

{{tag
|name = minTransportSize
|type = int
|default = 0
|description = The smallest size of unit that the transport can pick up, in terms of the passengers {{taglink|footprintX}}.}}

{{tag
|name = transportCapacity
|type = int
|default = 0
|description = The total number of units that the transport can pick up, with each unit multiplied by it's {{taglink|footprintX}} size. Prior to 101.0 if this tag is not present, then any Script.AttachUnit and Script.DropUnit call in the animation script will be ignored (See [[Animation-LuaCallouts#Other]]), in successive versions all units can use [[Lua_SyncedCtrl#Unit_Control|Spring.UnitAttach]] et al regardless of this tag.}}

{{tag
|name = transportMass
|type = float
|default = 100000.0
|description = The total cumulative {{taglink|mass}} of passengers the transport can carry.}}

{{tag
|name = minTransportMass
|type = float
|default = 0.0
|description = The minimum {{taglink|mass}} passenger the transport can carry.}}

{{tag
|name = loadingRadius
|type = float
|default = 220.0
|description = How far away in [[elmo]]s can the transporter pick up and drop units?}}

{{tag
|name = unloadSpread
|type = float
|default = 5.0
|description = How spread out the passengers are when unloaded. Is multiplied by the passengers radius.}}

{{tag
|name = isFirePlatform
|type = bool
|default = false
|description = Can transported units still aim and shoot while loaded by this transport?}}

{{tag
|name = holdSteady
|type = bool
|default = false
|description = If &lt;code&gt;true&lt;/code&gt; - passengers are slaved to orientation of transporter attachment piece, if &lt;code&gt;false&lt;/code&gt; - passengers are slaved to orientation of transporter body.}}

{{tag
|name = releaseHeld
|type = bool
|default = false
|description = Does the transporter unload it's passengers when it dies?}}

{{tag
|name = cantBeTransported
|type = bool
|default = false for mobile units, true for structures
|description = Controls if a unit is transportable at all or not. If &lt;code&gt;false&lt;/code&gt; it is overridden by [[Modrules.lua]] &lt;code&gt;transportability&lt;/code&gt; subtable tags.}}

{{tag
|name = transportByEnemy
|type = bool
|default = true
|description = Controls if a unit can be transported by an enemy transport. i.e. can it be kidnapped.}}

{{tag
|name = transportUnloadMethod
|type = int
|default = 0
|description = For air transports. Can be &lt;code&gt;0&lt;/code&gt; - Land to unload individually, &lt;code&gt;1&lt;/code&gt; - Flyover drop (i.e. Parachute), or &lt;code&gt;2&lt;/code&gt; - Land and flood unload all passengers. Can be used on ground transports with mixed results.}}

{{tag
|name = fallSpeed
|type = float
|default = 0.2
|description = For air transports with {{taglink|transportUnloadMethod|1}}. The speed in [[elmo]]s per second which units will fall at when released from the transport.}}

{{tag
|name = unitFallSpeed
|type = float
|default = 0.0
|description = Allows you to override {{taglink|fallSpeed}} for an individual passenger.}}

===Categories===
{{tag
|name = category
|type = string
|default = &quot;&quot;
|description = The category tag is a string of separate words, each representing a category of units. There is a maximum of 32 categories. The primary purpose of categories is weapon targeting (See [[#weapons]]).}}

{{tag
|name = noChaseCategory
|type = string
|default = &quot;&quot;
|description = The unit will still target enemies with a matching {{taglink|category}}, but will not chase after it if it moves out of weapon range.}}

===Decals===
{{tag
|name = leaveTracks
|type = bool
|default = false
|description = Does the unit leave a track mark decal behind it when it moves? For mobile units.}}

{{tag
|name = trackType
|type = string
|default = &quot;stdTank&quot;
|description = The filename of the image, without extension, assumed to be in &lt;code&gt;Bitmaps/Tracks/&lt;/code&gt;, to be used as the track decal. The red channel of the image controls the brightness and the green channel the alpha (how visible it is) of the track. Blue channel is unused.}}

{{tag
|name = trackWidth
|type = float
|default = 32.0
|description = The width of the track decal left on the ground, in [[elmo]]s.}}

{{tag
|name = trackOffset
|type = float
|default = 0.0
|description = How far back in [[elmo]]s the track should be drawn from the centre of the unit.}}

{{tag
|name = trackStrength
|type = float
|default = 32.0
|description = How visible or 'deep' the track mark should be. Also used to determine how long the decal should last.}}

{{tag
|name = trackStretch
|type = float
|default = 1.0
|description = How much the track is stretched in the forward direction compared to the sides (i.e. used to change aspect ratio).}}

{{tag
|name = useBuildingGroundDecal
|type = bool
|default = false
|description = For structures, do they display a ground decal on the terrain under their model?}}

{{tag
|name = buildingGroundDecalType
|type = string
|default = &quot;&quot;
|description = The filename of the image to be used as ground decal. Assumed to be in &lt;code&gt;Unittextures/&lt;/code&gt;.}}

{{tag
|name = buildingGroundDecalSizeX
|type = int
|default = 4
|description = How wide the decal is left to right, in footprint units.}}

{{tag
|name = buildingGroundDecalSizeY
|type = int
|default = 4
|description = How wide the decal is top to bottom, in footprint units.}}

{{tag
|name = buildingGroundDecalDecaySpeed
|type = float
|default = 0.1
|description = A measure of how quickly the decal should fade out if the structure dies. Essentially this value is multiplied by the time since death and subtracted from the original alpha until the decal is fully transparent.}}

===Collision Volumes===
For a deeper explanation of these tags, see [[Gamedev:CollisionVolumes]]. Note that all collision checks first do a pre-check with the unit ''radius'' before doing the colvol checks. Ergo the unit ''radius'' must be larger or equal to the colvol!


{{tag
|name = usePieceCollisionVolumes
|type = bool
|default = false
|lua = collisionVolume.defaultToPieceTree
|description = When turned on the model and UnitDef collision volumes are ignored and Spring generates a bounding box volume for each piece of the unit model. These volumes can be manipulated or replaced by [[Lua_SyncedCtrl#Unit_Control | Spring.SetUnitPieceCollisionVolumeData]]. Increases the performance cost of collision calculations.}}

{{tag
|name = useFootPrintCollisionVolume
|type = bool
|default = false
|special = {{new|92.0}}
|lua = .collisionVolume.defaultToFootprint
|description = Replaces any defined collision volume with a box with dimensions equal to the object's footprint (this also overrides any custom scaling and/or offsets).
}}


The following three tags can instead be replaced with a [[#collisionVolume]] subtable:

{{tag
|name = collisionVolumeType
|type = string
|default = &quot;s&quot;
|lua = collisionVolume.type
|description = What shape should the unit's collision volume be? Can be {{value|&quot;box&quot;}}, {{value|&quot;sphere}} or a cylinder aligned to an axis; {{value|&quot;cylX&quot;}}, {{value|&quot;cylY&quot;}}, {{value|&quot;cylZ&quot;}}.}}

{{tag
|name = collisionVolumeScales
|type = float[3]
|default = {0.0, 0.0, 0.0}
|lua = collisionVolume.scale{X{{pipe}}Y{{pipe}}Z}
|description = The lengths of the collision volume in each of the three axes. Note that non-spherical ellipsoids and elliptical cylinders are not supported.}}

{{tag
|name = collisionVolumeOffsets
|type = float[3]
|default = {0.0, 0.0, 0.0}
|lua = collisionVolume.offset{X{{pipe}}Y{{pipe}}Z}
|description = The offset from the unit centre to the hit volume centre in each axis.}}


The following tags have now been removed from the engine:

{{tag
|name = collisionVolumeTest
|type = int
|default = 0
|special = &lt;span class=&quot;warning&quot;&gt;Removed in 90.0 (Now always continuous)&lt;/span&gt;
|description = The type of test used to detect collisions. Can be &lt;code&gt;0&lt;/code&gt; (discrete) or &lt;code&gt;1&lt;/code&gt; (continuous). Use the latter for catching high speed projectiles which may otherwise 'skip through' small collision volumes, but beware of the increased performance cost.}}

{{tag
|name = modelCenterOffset
|type = float[3]
|default = {0.0, 0.0, 0.0} 
|special = &lt;span class=&quot;warning&quot;&gt;Removed in 89.0 (Now set via lua)&lt;/span&gt;
|description = How far from the model's defined centre should the centre of the unit be?}}

===Selection Volumes===
Introduced in 104.0, units may now have custom selection volumes in exactly the same way as collision volumes were already defined.


{{tag
|name = usePieceSelectionVolumes
|type = bool
|default = false
|special = {{new|104.0}}
|lua = .selectionVolume.defaultToPieceTree
|description = When turned on the model and UnitDef selection volumes are ignored and Spring generates a bounding box volume for each piece of the unit model (the same volumes are used for collision and selection). These volumes can be manipulated or replaced by [[Lua_SyncedCtrl#Unit_Control | Spring.SetUnitPieceColisionVolumeData]]. Increases the performance cost of selection calculations.}}

{{tag
|name = useFootPrintSelectionVolume
|type = bool
|default = false
|special = {{new|104.0}}
|lua = .selectionVolume.defaultToFootprint
|description = Replaces any defined selection volume with a box with dimensions equal to the object's footprint (this also overrides any custom scaling and/or offsets).
}}


The following three tags can instead be replaced with a [[#selectionVolume]] subtable:

{{tag
|name = selectionVolumeType
|type = string
|default = &quot;s&quot;
|special = {{new|104.0}}
|lua = collisionVolume.type
|description = What shape should the unit's selection volume be? Can be {{value|&quot;box&quot;}}, {{value|&quot;sphere}} or a cylinder aligned to an axis; {{value|&quot;cylX&quot;}}, {{value|&quot;cylY&quot;}}, {{value|&quot;cylZ&quot;}}.}}

{{tag
|name = selectionVolumeScales
|type = float[3]
|default = {0.0, 0.0, 0.0}
|special = {{new|104.0}}
|lua = .selectionVolume.scale{X{{pipe}}Y{{pipe}}Z}
|description = The lengths of the selection volume in each of the three axes. Note that non-spherical ellipsoids and elliptical cylinders are not supported.}}

{{tag
|name = selectionVolumeOffsets
|type = float[3]
|default = {0.0, 0.0, 0.0}
|special = {{new|104.0}}
|lua = .selectionVolume.offset{X{{pipe}}Y{{pipe}}Z}
|description = The offset from the unit centre to the selection volume centre in each axis.}}

===Attack Behaviours===
{{tag
|name = highTrajectory
|type = int
|default = 0
|lua = highTrajectoryType
|description = Can the unit fire it's (ballistic) weapons in a high trajectory arc? Can be &lt;code&gt;0&lt;/code&gt; - Low trajectory only, &lt;code&gt;1&lt;/code&gt; - High trajectory only, or &lt;code&gt;2&lt;/code&gt; - Toggle button.}}

{{tag
|name = kamikaze
|type = bool
|default = false
|lua = canKamikaze
|description = Does the unit attack its target by blowing itself up?}}

{{tag
|name = kamikazeDistance
|type = float
|default = 0.0
|lua = kamikazeDist
|description = How close to the target, in [[elmo]]s, the unit must get before detonating. Measured in 3D, not 2D.}}

{{tag
|name = kamikazeUseLOS
|type = bool
|default = false
|description = Does the target unit have to be in LOS when detonating or only within {{taglink|kamikazeDistance}}.}}

{{tag
|name = strafeToAttack
|type = bool
|default = false
|description = Should the unit move sideways when it can't shoot?}}

===Other===
{{tag
|name = decoyFor
|type = string
|default = &quot;&quot;
|description = The UnitDef name (not human {{taglink|name}}) which this unit is a decoy for.}}

{{tag
|name = selfDestructCountdown
|type = int
|default = 5
|lua = selfDCountdown
|description = The length in seconds taken between issuing self destruct order and the unit exploding.}}

{{tag
|name = damageModifier
|type = float
|default = 1.0
|lua = armoredMultiple
|description = The multiplier applied to weapon damage when the units ARMORED status (See [[Lua_ConstCOB]]) is turned on.}}

{{tag
|name = isTargetingUpgrade
|type = bool
|default = false
|lua = targFac
|description = Does the unit upgrade the targeting so that units shoot accurately at enemy units which are in radar but not in LOS.}}

{{tag
|name = isFeature
|type = bool
|default = false
|description = Does the unit immediately die into it's {{taglink|corpse}} feature when built? Used mainly for making walls.}}

{{tag
|name = hideDamage
|type = bool
|default = false
|description = Should the units current health be invisible to enemy players?}}

{{tag
|name = showPlayerName
|type = bool
|default = false
|description = Should the unit display it's controlling player as its name instead of {{taglink|name}}. Generally used for commander or hero units.}}

{{tag
|name = showNanoFrame
|type = bool
|default = true
|description = Does the unit show an OTA-style nanoframe whilst being constructed?}}

{{tag
|name = unitRestricted
|type = int
|default = MAX_UNITS
|lua = maxThisUnit
|description = How many of this unit type may a player control at once? Defaults to being the maximum amount of units controllable. Is overridden by lobby unit restrictions.}}

{{tag
|name = power
|type = float
|default = {{taglink|buildCostMetal}} + ({{taglink|buildCostEnergy}} / 60.0)
|description = The relative power of the unit. Used in weapon targeting priority and experience gain calculations.}}

==Sub Tables==

===collisionVolume===
The &lt;code&gt;collisionVolume&lt;/code&gt; subtable of a UnitDef replaces the older individual {{taglink|collisionVolumeType}}, {{taglink|collisionVolumeScales}} and {{taglink|collisionVolumeOffsets}} tags.

{{tag
|name = type
|type = string
|default = &quot;s&quot;
|lua = .collisionVolume.type
|description = What shape should the unit's collision volume be? Can be {{value|&quot;box&quot;}}, {{value|&quot;sphere&quot;}} or a {{value|&quot;cylinder&quot;}}.}}

{{tag
|name = axis
|type = string
|default = &quot;z&quot;
|description = Which axis does the unit's collision volume lie along? Can be {{value|&quot;x&quot;}}, {{value|&quot;y&quot;}} or {{value|&quot;z&quot;}}.}}

{{tag
|name = scales
|type = float[3]
|default = {0.0, 0.0, 0.0}
|lua = .collisionVolume.scale{X{{pipe}}Y{{pipe}}Z}
|description = The lengths of the collision volume in each of the three axes. Note that non-spherical ellipsoids and elliptical cylinders are not supported.}}

{{tag
|name = offsets
|type = float[3]
|default = {0.0, 0.0, 0.0}
|lua = .collisionVolume.offset{X{{pipe}}Y{{pipe}}Z}
|description = The offset from the unit centre to the hit volume centre in each axis.}}

===selectionVolume===
The &lt;code&gt;selectionVolume&lt;/code&gt; subtable of a UnitDef can replace the individual {{taglink|selectionVolumeType}}, {{taglink|selectionVolumeScales}} and {{taglink|selectionVolumeOffsets}} tags.

{{tag
|name = type
|type = string
|default = &quot;s&quot;
|lua = .selectionVolume.type
|description = What shape should the unit's selection volume be? Can be {{value|&quot;box&quot;}}, {{value|&quot;sphere&quot;}} or a {{value|&quot;cylinder&quot;}}.}}

{{tag
|name = axis
|type = string
|default = &quot;z&quot;
|description = Which axis does the unit's selection volume lie along? Can be {{value|&quot;x&quot;}}, {{value|&quot;y&quot;}} or {{value|&quot;z&quot;}}.}}

{{tag
|name = scales
|type = float[3]
|default = {0.0, 0.0, 0.0}
|lua = .selectionVolume.scale{X{{pipe}}Y{{pipe}}Z}
|description = The lengths of the selection volume in each of the three axes. Note that non-spherical ellipsoids and elliptical cylinders are not supported.}}

{{tag
|name = offsets
|type = float[3]
|default = {0.0, 0.0, 0.0}
|lua = .selectionVolume.offset{X{{pipe}}Y{{pipe}}Z}
|description = The offset from the unit centre to the selection volume centre in each axis.}}

===weapons===
The &lt;code&gt;weapons&lt;/code&gt; subtable of a UnitDef tells Spring which weapons the unit has. It is a simple array (number indexed table) of &lt;code&gt;weaponName&lt;/code&gt;s (not the human readable &lt;code&gt;name&lt;/code&gt;!).

The following additional tags are associated with this subtable:

{{tag
|name = name
|type = string
|default = &quot;&quot;
|description = The &lt;code&gt;weaponName&lt;/code&gt; of the weapon (See [[Gamedev:WeaponDefs]]). If using the [[weapondefs_post.lua]] provided by [[springcontent.sdz]], you may include the WeaponDef tables within the UnitDef as the &lt;code&gt;weaponDefs&lt;/code&gt; subtable, and refer to them with &lt;code&gt;def&lt;/code&gt; rather than &lt;code&gt;name&lt;/code&gt;. This can be a useful way to organise definitions if units do not generally share weapons.}}

{{tag
|name = badTargetCategory
|type = string
|default = &quot;&quot;
|description = A string of unit {{taglink|category}} entries which this weapon prefers to avoid targeting. i.e. given two units which ''can'' be targeted, any unit whose {{taglink|category}} matches any entry in this tag, will be targeted last. (See [[#Categories]])}}

{{tag
|name = onlyTargetCategory
|type = string
|default = &quot;&quot;
|description = A string of unit {{taglink|category}} entries which this weapon can target. i.e. any unit whose {{taglink|category}} does not match any entry in this tag, cannot be targeted by this weapon. (See [[#Categories]])}}

{{tag
|name = slaveTo
|type = int
|default = 0
|description = The number of the weapon which this weapon is slaved to. A slaved weapon can only target what it's master is targeting. Weapon numbers start at &lt;code&gt;1&lt;/code&gt; and correspond to the index of the weapon within the subtable.}}

{{tag
|name = mainDir
|type = float[3]
|default = {0.0, 0.0, 1.0} i.e. forwards
|description = A vector representing the firing direction of this weapon if it has a limited firing arc. Used in conjunction with {{taglink|maxAngleDif}} (See [[Gamedev:WeaponMainDir]]).}}

{{tag
|name = maxAngleDif
|type = float
|default = 360.0
|description = How wide this weapons limited firing arc is in degrees. Symmetrical about {{taglink|mainDir}} i.e. &lt;code&gt;180.0&lt;/code&gt; is 90 degree freedom either way (See [[Gamedev:WeaponMainDir]]).}}

{{tag
|name = fuelUsage
|type = float
|default = 0.0
|description = How much fuel in seconds is deducted from the units initial {{taglink|maxFuel}} when this weapon fires.}}

===buildOptions===
The &lt;code&gt;buildOptions&lt;/code&gt; subtable of a UnitDef tells Spring which other units the unit can build (in the case of a builder) or produce (in the case of a factory).
It is a simple array (number indexed table) of &lt;code&gt;unitName&lt;/code&gt;s (not the human readable {{taglink|name}}!).

There are no additional tags specific to this subtable.

===SFXTypes===
The &lt;code&gt;SFXTypes&lt;/code&gt; subtable of a UnitDef tells Spring which [[CEG]] effects are associated with the unit. It consists of two further subtables, with no additional tags specific to them.

====explosionGenerators====

The &lt;code&gt;explosionGenerators&lt;/code&gt; subtable of &lt;code&gt;SFXTypes&lt;/code&gt; tells Spring which [[CEG]]s the unit's script can call, via the &lt;code&gt;EmitSFX()&lt;/code&gt; callout (See [[Animation-LuaCallouts#Effects]]). It is a simple array (number indexed table) of CEG names, prefaced by the string &lt;code&gt;&quot;custom:&quot;&lt;/code&gt;. 

====pieceExplosionGenerators====
{{new|83.0}}

The &lt;code&gt;pieceExplosionGenerators&lt;/code&gt; subtable of &lt;code&gt;SFXTypes&lt;/code&gt; tells Spring which [[CEG]]s the unit's script can pick at random to attach to a flying unit piece, created from the &lt;code&gt;Explode()&lt;/code&gt; callout (See [[Animation-LuaCallouts#Effects]]). It is a simple array (number indexed table) of CEG names, with no prefix.

Forum thread (with examples): {{forumlink|topic=27554|title=pieceExplosionGenerators}}

===sounds===

The &lt;code&gt;sounds&lt;/code&gt; subtable of a UnitDef tells Spring which sound files to play when the unit triggers various events.

Files are assumed to be in the &lt;code&gt;Sounds/&lt;/code&gt; directory; accepted formats are .wav and .ogg, the former being assumed if no extension is given.

Sounds can be defined in one of three ways:

# Each event can be used as though it were a &lt;code&gt;string&lt;/code&gt; tag referring to the filename.
# Each event can be the name of a subtable, which is a simple array containing the filenames. One sound is picked at random from the list each time the event occurs.
# Each event can be the name of a subtable, which is a simple array containing further tables, which contain the following tags:
{{tag
|name = file
|type = string
|default = &quot;&quot;
|description = The filename of the sound to play.}}

{{tag
|name = volume
|type = float
|default = 1.0
|description = The default volume of the sound.}}

Spring checks any referenced sound filename to see if a SoundItem has been created, which allows greater control over how it is played (See [[Sounds.lua]]).

====sounds Example====

For clarification, here is an example of all three methods:

&lt;code&gt;&lt;pre&gt;sounds = {
  -- Method 1
  ok = 'oksound', -- .wav appended
  -- Method 2
  arrived = {
    'arrived1.wav',
    'arrived2.wav',
  },
  -- Method 3
  select = {
    { file = 'selsound1.ogg', volume = 2.0 },
    { file = 'selsound2.ogg', volume = 2.5 },
  },
}&lt;/pre&gt;&lt;/code&gt;

====sounds Events====

The events called by the engine are as follows:

{{ItemType
|name = ok
|description = Unit is issued a command.
}}

{{ItemType
|name = select
|description = Unit is selected by the player.
}}

{{ItemType
|name = arrived
|description = Unit has arrived at its destination. Mobile ground units only.
}}

{{ItemType
|name = build
|description = Unit begins building. Called for both factories and mobile construction units.
}}

{{ItemType
|name = activate
|description = Unit is activated, i.e. Is turned on. Also called when a mobile ground unit starts moving.
}}

{{ItemType
|name = deactivate
|description = Unit deactivates, i.e. Is turned off.
}}

{{ItemType
|name = cant
|description = Unit cannot carry out this order. Loaded but not currently called by the engine.
}}

{{ItemType
|name = underattack
|description = Unit gets attacked. Loaded but not currently called by the engine.
}}

===customParams===
The &lt;code&gt;customParams&lt;/code&gt; subtable of a UnitDef allows the game designer to give their units custom attributes, which can then be accessed via lua gadgets and widgets. It is a map (key-value pair indexed table) of strings. When accessing these attributes in lua the strings can be turned back into numbers, bools or even tables. This gives great control to game designers to essentially implement their own behaviour tags.

There are no additional tags specific to this subtable

==Examples==
MC:L implements OO with inheritance (base classes in [http://sourceforge.net/p/mwspring/code/HEAD/tree/Gamedata/unitdefs_pre.lua#l36 unitdefs_pre.lua])


{{ExampleRepoLinks
|path = units/
|entity = UnitDefs
}}

[[Category: Game Dev]]</text>
      <sha1>396ons0gkwfrd109aofbf86cg2z0a1h</sha1>
    </revision>
  </page>
  <page>
    <title>Gamedev:UnitsOfMeasurement</title>
    <ns>0</ns>
    <id>3111</id>
    <revision>
      <id>28606</id>
      <parentid>27859</parentid>
      <timestamp>2014-06-06T21:24:40Z</timestamp>
      <contributor>
        <username>Hokomoko</username>
        <id>2896</id>
      </contributor>
      <comment>/* Time */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2863">=Units of Measurement=
==Overview==
This page is copied from the [http://trac.caspring.org/wiki/UnitsOfMeasurement CA wiki]. It is a list of the many and varied units of measurement Spring Game developers have to deal with. Fortunately, all of the [[Animation-CobOverview | COB]] based units can be ignored if you are using [[Animation-LuaScripting | LUS]].
==Base Units==
===Time===
* '''Seconds (s)'''
* '''Frames (f)''' - There are 30 frames in a second. 
* '''Resource Frames''' - These occur every 32 frames. 
* '''SlowUpdate''' - These occur every 16 frames.

===Linear===
* '''Elmo''' - Fundamental linear unit of Spring.
* '''Footprint Unit''' - This is equal to 16 elmos. Note that in Upspring or when building a unit in game you actually see two squares per side on a footprint square. Used in UnitDef and FeatureDef &lt;code&gt;footPrint{X,Z}&lt;/code&gt; tags. (See [[Gamedev:UnitDefs#Movement_.26_Placement | Gamedev:UnitDefs]] and [[Gamedev:FeatureDefs]])
* '''COB linear unit (clu)''' - 1 clu is 1/216 elmo. Scriptor can automatically converts to COB units based on a constant that you set (default: 2.5 elmos). 
* '''Map Size''' - This appears to be 512 elmos; thus a 16x16 map is about 8192 elmos on a side. 

===Angular===
* '''Degrees'''
* '''COB angular unit (cau)''' - There are 65536 cau in a circle, which means there are 182.044... cau per degree. Scriptor automatically converts to cau based on a constant that you set (default converts from degrees). 
* '''1/45055 circle''' - Used for &lt;code&gt;accuracy&lt;/code&gt; and &lt;code&gt;sprayAngle&lt;/code&gt; (see [[Gamedev:WeaponDefs]]). 
* '''Radians (rad)''' -  There are 2 * pi radians in a circle. Used in lua.

==Derived Units==
===Velocity, Acceleration===
* '''Elmo / Second (elmo/s)''' - Used for weapon velocity. 
* '''Elmo / Second&lt;sup&gt;2&lt;/sup&gt; (elmo/s&lt;sup&gt;2&lt;/sup&gt;)''' - Used for weapon acceleration, map gravity. &quot;Default&quot; gravity is 130. 
* '''Elmo / Frame (elmo/f)''' - Used for unit velocity. 
* '''Elmo / Frame&lt;sup&gt;2&lt;/sup&gt; (elmo/f&lt;sup&gt;2&lt;/sup&gt;)''' - Used for unit acceleration. 
* '''COB linear units / Second (clu/s)''' - Used for COB move statement speed. Always positive even if the movement is in a negative direction. 

===Angular Velocity, Angular Acceleration===
* '''COB angular units/Second (cau/s)''' - Used for weapon turn rate; COB turn and spin speed. Always positive even if the movement is in a negative direction. 
* '''COB angular units/ Frame (cau/f)''' - Used for unit turn rate. (Actually uses 65535 in a circle instead of 65536, but that's not enough to matter in most cases.) 
* '''COB angular units/ Frame-Second (cau/(f*s))''' -  Used for COB spin acceleration. Note that COB acceleration is signed, unlike COB speed; if you want a negative spin, you need negative acceleration.

==Coordinates System==

http://springrts.com/mediawiki/images/1/19/Untitled-1.png

[[Category:Game Dev]]</text>
      <sha1>5psaexqvohsq7xeitaz9533v7p3fnc4</sha1>
    </revision>
  </page>
  <page>
    <title>Gamedev:WeaponDefs</title>
    <ns>0</ns>
    <id>3296</id>
    <revision>
      <id>30801</id>
      <parentid>30539</parentid>
      <timestamp>2018-10-25T04:38:17Z</timestamp>
      <contributor>
        <username>Maddox</username>
        <id>2934</id>
      </contributor>
      <minor/>
      <comment>Updated targetmoveerror description with https://springrts.com/phpbb/viewtopic.php?t=2234</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="46341">[[Gamedev:Main|Development]] &lt; [[Gamedev:Main]] &lt; {{FULLPAGENAME}}

==Location==
WeaponDef files are .lua files stored in the &lt;code&gt;Weapons/&lt;/code&gt; directory of a Spring Game. Alternatively they can be integrated into [[Gamedev:UnitDefs|UnitDefs]].

==Purpose==
WeaponDef files have one purpose; to define the properties of weapons. They are the main description file for what attributes your weapon should have and how it should behave. Since version 100.0, Spring will record a warning whenever it finds an unknown tag.

==Source==
The engine source code which loads the tags from these files is viewable here:

* {{sourcelink|file=rts/Sim/Weapons/WeaponDef.cpp}}

==Data Types==
{{DataTypes}}

==Details==
There follows a comprehensive (certain deprecated tags are not present) list of the tags available, their data type, default value and a brief description of what they do. Bear in mind that the source code linked above is the ultimate reference when dealing with these tags. 

In lua tables keys (i.e. the tags) should be lower case, here they are represented in camelCase for readability. In your files you may use the &lt;code&gt;lowerkeys&lt;/code&gt; function on your final table to ensure the keys are properly cased.

It is usual to name the returned WeaponDef table the internal &lt;code&gt;weaponName&lt;/code&gt; desired for the weapon.

===Common===
The following tags are common to all or at least a majority of '''WeaponTypes''', depending on the tag.

====General====
{{tag
|name = weaponType
|type = string
|default = &quot;Cannon&quot;
|description = Spring has 14 '''WeaponTypes''' which provide game developers with basic behaviours which they can customise to an extent with the '''WeaponDef''' tags. Some tags are specific to certain '''WeaponTypes''' and not implemented for others, [https://docs.google.com/spreadsheet/ccc?key=0Am5BbZxm93S9dEZXc1Q4dXR4TFRYTFM4NlR4OFJFdWc#gid=0 this two-way table] indicates which tags work for which types.}} The possible values are:
* [[#AircraftBomb|AircraftBomb]]
* [[#BeamLaser|BeamLaser]]
* [[#Cannon|Cannon]]
* [[#DGun|Dgun]]
* [[#EmgCannon|EmgCannon]]
* [[#Flame|Flame]]
* [[#LaserCannon|LaserCannon]]
* [[#LightningCannon|LightningCanon]]
* [[#Melee|Melee]]
* [[#MissileLauncher|MissileLauncher]]
* [[#Rifle|Rifle]]
* [[#Shield (WeaponType)|Shield]]
* [[#StarburstLauncher|StarburstLauncher]]
* [[#TorpedoLauncher|TorpedoLauncher]]

{{tag
|name = name
|type = string
|default = &quot;Weapon&quot;
|description = The descriptive name of the weapon as listed in FPS mode.}}

{{tag
|name = turret
|type = bool
|default = false
|description = Does the unit aim within an arc (up-to and including full 360Â° turret traverse) or always aim along the owner's heading?}}

{{tag
|name = noSelfDamage
|type = bool
|default = false
|description = Can the weapon's explosion damage the unit which fires it? Useful for preventing bombers with high-yield weapons destroying themselves.}}

{{tag
|name = impactOnly
|type = bool
|default = false
|description = Does the weapon only deal damage through direct hits and not 'splash' damage through {{taglink|areaOfEffect}}?}}

{{tag
|name = noExplode
|type = bool
|default = false
|description = Does the weapon explode on impact with a target or continue through? Note that these weapons will do damage every single frame they are inside the [[Gamedev:CollisionVolumes|collision volume]] of an object, underground or under water, massively multiplying their damage.}}

{{tag
|name = burnblow
|type = bool
|default = false
|lua = selfExplode
|description = Does the weapon explode when it reaches its maximum range or continue on its path? The name is an [[OTAism]].}}

{{tag
|name = range
|type = float
|default = 10.0
|description = The maximum range in [[elmo]]s that the weapon can fire at.}}

{{tag
|name = weaponVelocity
|type = float
|default = 0.0
|description = The velocity in [[elmo]]s per second of the weapon projectile. Since 99.0 &lt;code&gt;maxVelocity&lt;/code&gt; is a synonym.}}

{{tag
|name = reloadTime
|type = float
|default = 1.0
|description = The time in seconds between shots fired.}}

{{tag
|name = metalPerShot
|type = float
|default = 0.0
|description = Metal used per shot. If the specified amount is not available, the weapon cannot be fired. Can also be used to specify how much a {{taglink|stockpile}} weapon will cost to build.}}

{{tag
|name = energyPerShot
|type = float
|default = 0.0
|description = Energy used per shot. If the specified amount is not available, the weapon cannot be fired. Can also be used to specify how much a {{taglink|stockpile}} weapon will cost to build.}}

{{tag
|name = myGravity
|type = float
|default = 0.0
|description = Overrides the map gravity for ballistic weapons. The default of &lt;code&gt;0.0&lt;/code&gt; disables the tag in favour of map gravity.}}

{{tag
|name = fireStarter
|type = float
|default = 0.0
|description = The percentage chance (&lt;code&gt;0.0&lt;/code&gt; to &lt;code&gt;100.0&lt;/code&gt;) of the weapon setting fire to static map features on impact.}}

{{tag
|name = cameraShake
|type = float
|default = damage (0.0 for paralyzers)
|description = Passed to the [[LuaCallinReturn#Game_Events:|ShockFront() callin]] as the first argument. Intended as a means to make the camera shake if in range of detonation.}}

{{tag
|name = stockpile
|type = bool
|default = false
|description = Does each round of the weapon have to be built and stockpiled by the player? Will only correctly function for the first of each stockpiled weapons a unit has.}}

{{tag
|name = stockpileTime
|type = float
|default = reloadTime
|description = The time in seconds taken to stockpile one round of the weapon.}}

{{tag
|name = interceptedByShieldType
|type = int
|default = Depends on {{taglink|weaponType}}
|description = [http://en.wikipedia.org/wiki/Mask_(computing) Bitmask] representing the types of shields that can intercept this weapon. Each digit of binary that is set to one means that a shield with the corresponding digit in its {{taglink|interceptType}} will intercept this weapon. A value of &lt;code&gt;0&lt;/code&gt; means that no shields will intercept the weapon. The defaults are as follows:
* &lt;code&gt;0&lt;/code&gt; - [[#DGun]]
* &lt;code&gt;1&lt;/code&gt; - [[#Cannon]] and [[#EmgCannon]]
* &lt;code&gt;2&lt;/code&gt; - [[#LaserCannon]] and [[#BeamLaser]]
* &lt;code&gt;4&lt;/code&gt; - [[#MissileLauncher]] and [[#StarburstLauncher]]
* &lt;code&gt;8&lt;/code&gt; - [[#AircraftBomb]]
* &lt;code&gt;16&lt;/code&gt; - [[#Flame]]
* &lt;code&gt;32&lt;/code&gt; - [[#TorpedoLauncher]]
* &lt;code&gt;64&lt;/code&gt; - [[#LightningCannon]]
* &lt;code&gt;128&lt;/code&gt; - [[#Rifle]]
* &lt;code&gt;256&lt;/code&gt; - [[#Melee]]
(See [[Shield Interception Tag Use]]).}}

====Collision &amp; Avoidance====

{{tag
|name = avoidGround
|type = bool
|default = true
|description = Should the weapon avoid firing if terrain blocks the line of fire?}}

{{tag
|name = avoidFriendly
|type = bool
|default = true
|description = Should the weapon avoid firing if a friendly unit is in the line of fire?}}

{{tag
|name = avoidFeature
|type = bool
|default = true
|description = Should the weapon avoid firing if a static map feature is in the line of fire?}}

{{tag
|name = avoidNeutral
|type = bool
|default = false
|description = Should the weapon avoid firing if a neutral unit is in the line of fire?}}

{{tag
|name = collideEnemy
|type = bool
|default = true
|lua = noEnemyCollide
|description = Does the weapon projectile collide with enemy units or pass through?}}

{{tag
|name = collideFriendly
|type = bool
|default = true
|lua = noFriendlyCollide
|description = Does the weapon projectile collide with friendly units or pass through?}}

{{tag
|name = collideFirebase
|type = bool
|default = false
|lua = noFirebaseCollide
|description = Does the weapon projectile collide with friendly firebase units the owner is loaded onto, or pass through?}}

{{tag
|name = collideFeature
|type = bool
|default = true
|lua = noFeatureCollide
|description = Does the weapon projectile collide with static map features or pass through?}}

{{tag
|name = collideNeutral
|type = bool
|default = true
|lua = noNeutralCollide
|description = Does the weapon projectile collide with neutral units or pass through?}}

{{tag
|name = collideGround
|type = bool
|default = true
|lua = noGroundCollide
|description = Does the weapon projectile collide with terrain or pass through?}}

{{tag
|name = collisionSize
|type = float
|default = 0.05 (0.5 for [[#Flame]] and [[#LaserCannon]], 10.0 for [[#Dgun]])
|description = Modifies visual size of EMG and Flame projectiles, and physical size '''only''' for hitscan interceptor weapons (e.g. antinuke lasers). [[https://github.com/spring/spring/blob/3034e5f5a8f5b9fb4624a97f7a85cb5c90457725/rts/Sim/Projectiles/WeaponProjectiles/WeaponProjectile.cpp#L250 1]][[https://github.com/spring/spring/blob/master/rts/Sim/Misc/CollisionHandler.cpp#L33 2]]}}

====Targeting &amp; Accuracy====
{{tag
|name = commandFire
|type = bool
|default = false
|description = Determines if the weapon will automatically fire on enemy units in range or only when manually ordered to attack.}}

{{tag
|name = canAttackGround
|type = bool
|default = true
|description = Determines if the weapon can be force-fired on ground positions or only fire on targeted units.}}

{{tag
|name = waterWeapon
|type = bool
|default = false
|description = Determines if the weapon can pass through water and target underwater units.}}

{{tag
|name = fireSubmersed
|type = bool
|default = waterWeapon
|description = Determines if the weapon can fire whilst underwater.}}

{{tag
|name = targetBorder
|type = float
|default = 0.0 (1.0 for [[#Melee]])
|description = Controls whether the weapon aims for the centre or the edge of its target's [[Gamedev:CollisionVolumes|collision volume]]. Clamped between &lt;code&gt;-1.0&lt;/code&gt; - target the far border, and &lt;code&gt;1.0&lt;/code&gt; - target the near border.}}

{{tag
|name = cylinderTargeting
|type = float
|default = 0.0 (1.0 for [[#Melee]])
|description = Controls whether the weapon range is calculated in a sphere or a cylinder. The height of the cylinder is determined by the value of this tag multiplied by the {{taglink|range}}. Clamped between &lt;code&gt;0.0&lt;/code&gt; and &lt;code&gt;128.0&lt;/code&gt;.}}

{{tag
|name = tolerance
|type = float
|default = 3000.0 (+/- ~18 degrees)
|description = The amount (in [[Gamedev:UnitsOfMeasurement#Angular|cau]]) to which the weapon's &quot;real&quot; aim can be off while the weapon will still be able to fire accurately at the target. For {{taglink|turret|false}} or {{taglink|fixedLauncher|true}} weapons this determines in what arc the unit will fire.}}

{{tag
|name = fireTolerance
|type = float
|default = 32768.0 (+/- 180 degrees)
|special = {{new|99.0}}
|description =  Final check to prevent weapons from shooting sideways. If a weapon is about to fire but the difference between its old aim and requested aim is greater than this angle (in [[Gamedev:UnitsOfMeasurement#Angular|cau]]) then it will not fire.}}

{{tag
|name = allowNonBlockingAim
|type = bool
|default = false
|special = {{new|99.0}}
|description = When enabled it makes [[Animation-LuaCallins#Weapons|AimWeapon()]] script calls non-blocking (still the {{taglink|fireTolerance}} tag might prevent the weapon firing). This is very useful for fast units that need to re-target often.}}

{{tag
|name = targetMoveError
|type = float
|default = 0.0
|description = The degree to which a weapon's aiming will fail to keep up with its target's movement. It adds a fraction of the target's speed (per second) as a random error to the targetting. So if the target moves 50 units per second and the targetmoveerror is 0.5 a random error of 25 will be added to the target position. If set very low or not set at all, a weapon will lead its target and almost always hit.}}

{{tag
|name = leadLimit
|type = float
|default = -1.0
|description = Limits the maximum distance a unit will lead a target. The default of &lt;code&gt;-1&lt;/code&gt; allows an infinite distance.}}

{{tag
|name = leadBonus
|type = float
|default = 0.0
|description = Controls how experience boosts the weapon's target leading. Is multiplied with the unit's experience and added to the {{taglink|leadLimit}}.}}

{{tag
|name = predictBoost
|type = float
|default = 0.0 (0.5 for {{taglink|burnblow|true}} weapons)
|description = Controls how well the weapon predicts unit speeds. Works in a similar way to  {{taglink|targetMoveError}} except that it is 1-dimensional. This tag spreads the shots in a line based on the direction of the target whereas {{taglink|targetMoveError}} spreads the shots all around based on the movement.}}

{{tag
|name = heightMod
|type = float
|default = 0.2 (0.8 for [[#Cannon]], 1.0 for [[#BeamLaser]] and [[#LightningCannon]])
|description = Changes the spherical weapon range into an ellipsoid. Values above &lt;code&gt;1.0&lt;/code&gt; mean the weapon cannot target as high as it can far, values below &lt;code&gt;1.0&lt;/code&gt; mean it can target higher than it can far. For example &lt;code&gt;0.5&lt;/code&gt; would allow the weapon to target twice as high as far.}}

{{tag
|name = proximityPriority
|type = float
|default = 1.0
|description = Acts as a multiplier for the distance to the target in the priority calculation. Note that negative values make weapons prefer distant targets.}}

{{tag
|name = accuracy
|type = float
|default = 0.0
|description = How accurate the weapon is. Lower values are more accurate. Accuracy is relative to the distance to the target; for instance, if the target is very close, even a very high value will probably still hit. If a target is very far away, even a very low value will likely cause the weapon to miss.}}

{{tag
|name = movingAccuracy
|type = float
|default = accuracy
|description = A weapon's {{taglink|accuracy}} whilst the owning unit is moving.}}

{{tag
|name = sprayAngle
|type = float
|default = 0.0
|description = How wide the the angle of a burst from a [[#Bursts|burst weapon]] can be. Very similar to {{taglink|accuracy}}, except that this tag affects each projectile in a burst, whilst the former does not.}}

{{tag
|name = ownerExpAccWeight
|type = float
|default = 0.0 (See description)
|description = A multiplier to {{taglink|accuracy}} and {{taglink|sprayAngle}} that reduces inaccuracy as a units experience increases. Defaults are as follows:
* &lt;code&gt;0.9&lt;/code&gt; - [[#Cannon]], [[#Rifle]]
* &lt;code&gt;0.7&lt;/code&gt; - [[#LaserCannon]], [[#BeamLaser]], [[#StarburstLauncher]]
* &lt;code&gt;0.5&lt;/code&gt; - [[#MissileLauncher]], [[#LightningCannon]], [[#EmgCannon]], [[#DGun]]
* &lt;code&gt;0.2&lt;/code&gt; - [[#Flame]]
}}

{{tag
|name = targetable
|type = int
|default = 0
|special = {{new|92.0}} Previously only for [[#StarburstLauncher]]
|description = [http://en.wikipedia.org/wiki/Mask_(computing) Bitmask] representing the types of weapon that can intercept this weapon. Each digit of binary that is set to one means that a weapon with the corresponding digit in its {{taglink|interceptor}} tag will intercept this weapon. Instant-hitting weapons such as [[#BeamLaser]], [[#LightningCannon]] and [[#Rifle]] cannot be targeted.
}}

{{tag
|name = interceptor
|type = int
|default = 0
|special = {{new|92.0}} Previously only for [[#StarburstLauncher]]
|description = [http://en.wikipedia.org/wiki/Mask_(computing) Bitmask] representing the types of weapons that this weapon can intercept. Each digit of binary that is set to one means that a weapon with the corresponding digit in its {{taglink|targetable}} tag will be intercepted by this weapon.
}}

{{tag
|name = interceptSolo
|type = bool
|default = true
|special = {{new|92.0}} 
|description = If &lt;code&gt;true&lt;/code&gt; no other interceptors may target the same projectile.
}}

{{tag
|name = coverage
|type = float
|default = 0.0
|special = {{new|92.0}} Previously only for [[#StarburstLauncher]]
|description = The radius in [[elmo]]s within which an {{taglink|interceptor}} weapon will fire on {{taglink|targetable}} weapons.
}}

====Bouncing====

{{tag
|name = waterBounce
|type = bool
|default = false
|description = Does the weapon bounce on water impacts?}}

{{tag
|name = groundBounce
|type = bool
|default = false
|description = Does the weapon bounce on ground impacts?}}

{{tag
|name = bounceSlip
|type = float
|default = 1.0
|description = The decimal-percentage amount of horizontal velocity a projectile keeps when it bounces.}}

{{tag
|name = bounceRebound
|type = float
|default = 1.0
|description = The decimal-percentage amount of vertical velocity a projectile keeps when it bounces.}}

{{tag
|name = numBounce
|type = int
|default = -1
|description = The number of times the weapon will bounce on impact before exploding. The default value of &lt;code&gt;-1&lt;/code&gt; allows infinite bounces (at least until velocity reaches 0).}}

====Area Of Effect, Impulse &amp; Cratering====

{{tag
|name = areaOfEffect
|type = float
|default = 8.0 * 0.5
|lua = damageAreaOfEffect
|description = The ''diameter'' in [[elmo]]s in which the weapons explosion will cause damage.}}

{{tag
|name = craterAreaOfEffect
|type = float
|default = areaOfEffect * 0.5
|description = The ''radius'' in [[elmo]]s in which the weapons explosion will cause terrain cratering. Behaviour changed slightly in 98.0 as previously craters were 1.5x {{taglink|craterAreaOfEffect}} whilst decals were 1.0x, they are now both the same size.}}

{{tag
|name = edgeEffectiveness
|type = float
|default = 0.0
|description = Determines what percent of a weapon's maximum damage value will be applied to units within the weapon's {{taglink|areaOfEffect}}. Falls off from the epicentre according to the formula &lt;code&gt;damageApplied = damage * [(areaOfEffect - distToUnit) / (areaOfEffect - (distToUnit * edgeEffectiveness))]&lt;/code&gt;, a graph of the function for various values is available [[Media:EdgeEffectiveness.png|here]].}}

{{tag
|name = explosionSpeed
|type = float
|default = See description
|description = The speed at which the weapon's explosion propagates from the epicentre. The default is calculated by this complex formula: &lt;code&gt;defExpSpeed = {8.0 + [max(30.0, default_damage / 20.0) * 2.5]} / {9.0f + [sqrt(max(30.0, default_damage / 20.0f)) * 0.7]} * 0.5&lt;/code&gt;.}}

{{tag
|name = impulseFactor
|type = float
|default = 1.0
|description = A multiplier to the impulse given to units within the explosion {{taglink|areaOfEffect}}, which is otherwise equal to the damage dealt after {{taglink|edgeEffectiveness}} is taken into account. For [[#Melee]] weapons this is instead multiplied by the owning unit's mass (See [[Gamedev:UnitDefs#Tag:mass|Gamedev:UnitDefs]]).}}

{{tag
|name = impulseBoost
|type = float
|default = 0.0
|description = A constant amount added to the weapon's impulse, regardless of distance from the epicentre or the damage potential of the explosion, prior to the application of {{taglink|impulseFactor}}}}

{{tag
|name = craterMult
|type = float
|default = impulseFactor
|description = A multiplier to depth of terrain crater the weapon's explosion will create, which is otherwise based on the damage potential.}}

{{tag
|name = craterBoost
|type = float
|default = 0.0
|description = A constant amount, added to the weapon's cratering depth before the application of {{taglink|craterMult}}.}}

====Bursts====

{{tag
|name = burst
|type = int
|default = 1
|lua = salvoSize
|description = How many shots to fire per burst.
}}

{{tag
|name = burstRate
|type = float
|default = 0.1
|lua = salvoDelay
|description = The time in seconds between shots in a burst. Note that {{taglink|reloadTime}} starts to count down from the ''first'' round fired, not the last so if &lt;code&gt;reloadTime &lt; burst * burstRate&lt;/code&gt; the weapon will fire continuously.
}}

{{tag
|name = projectiles
|type = int
|default = 1
|description = How many projectiles released per shot (shotgun style). e.g. a weapon with {{taglink|burst|5}}, {{taglink|burstRate|0.5}} and {{taglink|projectiles|2}} will shoot 5 lots of 2 for 10 projectiles total, with gaps of 0.5 seconds, before waiting for {{taglink|reloadTime}}. Best used in conjunction with {{taglink|sprayAngle}} or changing the firing piece using [[Animation-LuaCallins#Weapons|ShotX]] as otherwise they'll all be clumped in one shot.
}}

====Paralyzing====
{{tag
|name = paralyzer
|type = bool
|default = false
|description = Is the weapon a paralyzer? If &lt;code&gt;true&lt;/code&gt; the weapon only stuns enemy units and does not cause damage in the form of lost hit-points.
}}

{{tag
|name = paralyzeTime
|type = int
|default = 10
|lua = damages.paralyzeDamageTime
|description = Determines the maximum length of time in seconds that the target will be paralyzed. The timer is restarted every time the target is hit by the weapon. Cannot be less than &lt;code&gt;0&lt;/code&gt;.
}}

====Dynamic Damage====
The following set of tags allow for a weapon's damage potential to vary with the distance to its target.

{{tag
|name = dynDamageExp
|type = float
|default = 0.0
|description = Exponent of the range-dependent damage formula, the default of &lt;code&gt;0.0&lt;/code&gt; disables dynamic damage, &lt;code&gt;1.0&lt;/code&gt; means linear scaling, &lt;code&gt;2.0&lt;/code&gt; quadratic and so on.
}}

{{tag
|name = dynDamageMin
|type = float
|default = 0.0
|description = The minimum floor value that range-dependent damage can drop to.
}}

{{tag
|name = dynDamageRange
|type = float
|default = 0.0
|description = If set to non-zero values the weapon will use this value in the range-dependant damage formula instead of the actual {{taglink|range}}. 
}}

{{tag
|name = dynDamageInverted
|type = bool
|default = false
|description = If &lt;code&gt;true&lt;/code&gt; the damage curve is inverted i.e. the weapon does more damage at greater ranges as opposed to less.
}}

====Sounds====
{{tag
|name = soundTrigger
|type = bool
|default = false (true for [[#Melee]], [[#Rifle]] and non-beamBurst [[#BeamLaser]])
|description = Does the weapon play {{taglink|soundStart}} only once for each salvo (&lt;code&gt;true&lt;/code&gt;) or for every round in a burst (&lt;code&gt;false&lt;/code&gt;)?}}

{{tag
|name = soundStart
|type = string
|default = &quot;&quot;
|description = The name of a '''SoundItem''' (See [[Sounds.lua]]) or filename of a sound to play when the weapon fires.}}

{{tag
|name = soundHitDry
|type = string
|default = &quot;&quot;
|description = The name of a '''SoundItem''' (See [[Sounds.lua]]) or filename of a sound to play when the weapon collides with solid ground. Note that a [[#BeamLaser]] will play this sound every frame of its lifetime.}}

{{tag
|name = soundHitWet
|type = string
|default = &quot;&quot;
|description = The name of a '''SoundItem''' (See [[Sounds.lua]]) or filename of a sound to play when the weapon collides with water. Note that a [[#BeamLaser]] will play this sound every frame of its lifetime.}}

====Visuals====

{{tag
|name = cegTag
|type = string
|default = &quot;&quot;
|description = The name, without prefixes, of a [[CEG]] to be emitted by the projectile each frame.
}}

{{tag
|name = intensity
|type = float
|default = 0.9 (0.2 for [[#Cannon]])
|description = Alpha transparency for non-3D model projectiles. Lower values are more opaque, but &lt;code&gt;0.0&lt;/code&gt; will cause the projectile to disappear entirely.
}}

{{tag
|name = model
|type = string
|default = &quot;&quot;
|description = The filename of a 3D model to use when rendering the projectile. Note that only the root piece of a projectile model is rendered. Currently only for [[#Cannon]], [[#LaserCannon]], [[#MissileLauncher]], [[#StarburstLauncher]] and [[#TorpedoLauncher]].
}}

{{tag
|name = explosionScar
|type = bool
|default = false
|description = Does the weapon's explosion leave a scar decal on the ground? For all types except [[#Melee]] and [[#Rifle]].
}}

{{tag
|name = alwaysVisible
|type = bool
|default = false
|description = If &lt;code&gt;true&lt;/code&gt; the weapon is always rendered regardless of whether or not it is in LOS range of a player's units.
}}

{{tag
|name = rgbColor
|type = float[3]
|default = {1.0, 0.0, 0.0} (See Description)
|description = The primary colour for sprite rendering weapons. Additional defaults are as follows:
* [[#Cannon]] - &lt;code&gt;{1.0, 0.5, 0.0}&lt;/code&gt;
* [[#EmgCannon]] - &lt;code&gt;{0.9, 0.9, 0.2}&lt;/code&gt;
}}

{{tag
|name = explosionGenerator
|type = string
|default = &quot;&quot;
|description = The name of a [[CEG]], with &lt;code&gt;custom:&lt;/code&gt; prefix, to spawn as the weapon's explosion. Does not currently work for [[#Melee]] and [[#Rifle]].
}}

{{tag
|name = bounceExplosionGenerator
|type = string
|default = &quot;&quot;
|description = For weapons which can use {{taglink|groundBounce|true}}, the name of a [[CEG]], with &lt;code&gt;custom:&lt;/code&gt; prefix, to spawn when weapon the bounces.
}}

{{tag
|name = texture1
|type = string
|default = &quot;&quot;
|description = The projectile texture for [[#AircraftBomb]], [[#Cannon]], [[#EmgCannon]], [[#Flame]]; beam texture for [[#LaserCannon]], [[#BeamLaser]], [[#LightningCannon]]; flare texture for [[#MissileLauncher]], [[#StarburstLauncher]] and dome texture for the [[#Shield]].
}}

{{tag
|name = texture2
|type = string
|default = &quot;&quot;
|description = The end-of-beam texture for [[#LaserCannon]], [[#BeamLaser]] and {{taglink|smoketrail}} texture for [[#MissileLauncher]], [[#StarburstLauncher]].
}}

{{tag
|name = texture3
|type = string
|default = &quot;&quot;
|description = Flare texture for [[#BeamLaser]], or muzzle texture if {{taglink|largeBeamLaser|true}}. Also used as the flame texture for [[#StarburstLauncher]].
}}

{{tag
|name = texture4
|type = string
|default = &quot;&quot;
|description = Flare texture for [[#BeamLaser]] with {{taglink|largeBeamLaser|true}}.
}}

===AircraftBomb===
Drops a ballistic projectile at the same movement vector as the unit itself. Intended only for aircraft. Visually drawn as a billboarded sprite as used by the [[#Cannon]], but more commonly used with a 3D model.

There are no tags specific to this '''WeaponType'''

====AircraftBomb Visuals====

When not using a {{taglink|model}}, the AircraftBomb is the same as [[#Cannon Visuals]].

===BeamLaser===
An instant-hit weapon which spawns a beam and does a portion of its total damage each frame. Cannot be [[Animation-LuaCallouts#Effects|script emitted]] if it has a {{taglink|beamTime}} longer than one frame. Visually drawn as a [http://en.wikipedia.org/wiki/Star_Trek Star Trek] Phaser-style laser weapon. The {{taglink|largeBeamLaser}} tag allows changing the visual effect of the laser, such as using a tileable, scrolling texture without changing the behaviour.

{{tag
|name = minIntensity
|type = float
|default = 0.0
|description = The minimum percentage the weapon's damage can fall-off to over its range. Setting to &lt;code&gt;1.0&lt;/code&gt; will disable fall off entirely. Unrelated to the visual-only {{taglink|intensity}} tag.
}}

{{tag
|name = beamTime
|type = float
|default = 1.0
|lua = beamtime (all lowercase!)
|description = How long in seconds to fire the laser before waiting for {{taglink|reloadTime}} to start. Damage is distributed over the duration of the {{taglink|beamTime}}, and the weapon will aim to hit the target when the beam is in the middle of its {{taglink|beamTime}} (i.e. using prediction).
}}

{{tag
|name = beamBurst
|type = bool
|default = false
|lua = beamburst (all lowercase!)
|description = Makes the laser fire a burst of beams that are all aimed towards the target (instead of aimed with the piece). A [[#BeamLaser]] can do its full damage with every shot if {{taglink|beamBurst}} is enabled. Disables {{taglink|beamTime}} in favour of the [[#Bursts|burst tags]].
}}

{{tag
|name = sweepFire
|type = bool
|default = false
|description = Makes the laser continue firing while it aims for a new target, 'sweeping' across the terrain. Reimplemented in 95.0, still has no script interaction so use with care. Respects {{taglink|reloadTime}} constraint but not much else.
}}

====BeamLaser Visuals====

See also {{taglink|thickness}} and {{taglink|coreThickness}}.

{{tag
|name = beamTTL
|type = int
|default = 0
|description = The time in frames for which the laser beam remains visible.
}}

{{tag
|name = beamDecay
|type = float
|default = 1.0
|description = How fast the beam fades out. Each frame the {{taglink|intensity}} is multiplied by this value.
}}

{{tag
|name = laserFlareSize
|type = float
|default = 15.0
|description = Determines the size of the firing flare.
}}

{{tag
|name = largeBeamLaser
|type = bool
|default = false
|description = Changes the visual effect allowing tiling and scrolling of the texture and a pulsating firing flare.
}}

{{tag
|name = tileLength
|type = float
|default = 200.0
|description = Defines the length before the texture used is repeated (tiled). Only if {{taglink|largeBeamLaser|true}}.
}}

{{tag
|name = scrollSpeed
|type = float
|default = 5.0
|description = Controls how fast the texture scrolls. Only if {{taglink|largeBeamLaser|true}}.
}}

{{tag
|name = pulseSpeed
|type = float
|default = 1.0
|description = Controls how fast the pulsating effect at the start of the beam is. Only if {{taglink|largeBeamLaser|true}}.
}}

===Cannon===
The default '''WeaponType'''. Fires a ballistic projectile, for the best result (without under/overshooting) the {{taglink|weaponVelocity}} should be set so as to give an elevation of 45Â° when firing at the maximum {{taglink|range}}. Substituting the angle into the [http://en.wikipedia.org/wiki/Trajectory#Range_and_height trajectory equation] and rearranging, we get: 
&lt;code&gt;&lt;pre&gt;weaponVelocity = âˆš(range * g)&lt;/pre&gt;&lt;/code&gt; 
where &lt;code&gt;g&lt;/code&gt; is the map gravity, usually around &lt;code&gt;120&lt;/code&gt; for most Spring maps (You can use the {{taglink|myGravity}} tag if you want to be exact). Visually drawn as a billboarded sprite or 3D model. 

{{tag
|name = highTrajectory
|type = int
|default = 2
|description = Can this weapon be fired in a high trajectory (&gt;45Â° angle). Can be &lt;code&gt;0&lt;/code&gt; - low trajectory only, &lt;code&gt;1&lt;/code&gt; - high trajectory only or &lt;code&gt;2&lt;/code&gt; - enables a high/low toggle button on the unit.
}}

{{tag
|name = heightBoostFactor
|type = float
|default = -1.0
|description = Controls the boost given to {{taglink|range}} by high terrain. Values &gt; &lt;code&gt;1.0&lt;/code&gt; result in increased range, &lt;code&gt;0.0&lt;/code&gt; means the cannon has fixed range regardless of height difference to target. Any value &lt; &lt;code&gt;0.0&lt;/code&gt; (i.e. the default value) result in an automatically calculated value based on {{taglink|range}} and theoretical maximum range.
}}

====Cannon Visuals====

{{tag
|name = size
|type = float
|default = 2.0 + min(default_damage * 0.0025, {{taglink|areaOfEffect}} * 0.1)
|description = The drawing radius of the billboarded sprite. Also for [[#AircraftBomb Visuals]], [[#EmgCannon Visuals]] (default: &lt;code&gt;3.0&lt;/code&gt;) and [[#Flame Visuals]].
}}

{{tag
|name = colorMap
|type = string
|default = &quot;&quot;
|description = A set of RGB colours to transition between over the projectile's lifetime. Can be given as a string of RGB digits or an image filename (See [[CColorMap]]). Also for [[#Flame Visuals]].
}}

{{tag
|name = sizeDecay
|type = float
|default = 0.0
|description = How quickly each particle of the Cannon shot decays in size.
}}

{{tag
|name = alphaDecay
|type = float
|default = 1.0
|description = How quickly each particle of the Cannon shot fades out.
}}

{{tag
|name = separation
|type = float
|default = 0.0
|description = The distance between each particle of the Cannon shot.
}}

{{tag
|name = noGap
|type = bool
|default = true
|description = Switch between the distance between particles being proportional to the size of the two particles (&lt;code&gt;true&lt;/code&gt;) or proportional to the size of the first particle (&lt;code&gt;false&lt;/code&gt;). 
}}

{{tag
|name = stages
|type = int
|default = 5
|description = The number of particles in each Cannon shot.
}}

===DGun===
Fires a line-of-sight or ballistic projectile (selected via the {{taglink|gravityAffected}} tag). Visually represented by a fireball effect that cannot be customised, however it can be replaced by a 3D model. The name and visual effect are [[OTAism]]s.

{{tag
|name = gravityAffected
|type = bool
|default = false
|description = Does the fireball projectile lose height due to map gravity?
}}

===EmgCannon===
A line-of-sight weapon. Visually drawn as a billboarded sprite very similar to that of the [[#Cannon]], however not as customisable, or a 3D model. The name is another [[OTAism]].

There are no tags specific to this '''WeaponType'''.

===Flame===
A line-of-sight weapon intended for use as a flamethrower or similar. Visually drawn as a stream of textured particles, the colour of which can be controlled very precisely using the {{taglink|colorMap}} tag (see [[CColorMap]]).

====Flame Visuals====
See also {{taglink|colorMap}}.

{{tag
|name = sizeGrowth
|type = float
|default = 0.5
|description = How much the draw radius of the flame projectile increases each frame.
}}

{{tag
|name = flameGFXTime
|type = float
|default = 1.2
|description = Makes the flamethrower projectile stay alive as a visual-only effect (i.e. does not deal any damage) after it has reached maximum {{taglink|range}}. It is a percentage multiplier, e.g. &lt;code&gt;1.2&lt;/code&gt; makes the projectile stay alive until it reaches 20% beyond {{taglink|range}}.
}}

===LaserCannon===
A particularly versatile line-of-sight weapon. Visually drawn like a [http://en.wikipedia.org/wiki/Star_Wars Star Wars] Blaster-style laser weapon, or a 3D model.

====LaserCannon Visuals====

{{tag
|name = duration
|type = float
|default = 0.05
|description = Multiplied against {{taglink|weaponVelocity}} to determine the visual length of the beam projectile.
}}

{{tag
|name = hardStop
|type = bool
|default = false
|description = Does the laser projectile stop dead or fade out?
}}

{{tag
|name = fallOffRate
|type = float
|default = 0.5
|description = Rate at which the beam fades out after it goes past its maximum {{taglink|range}} if {{taglink|hardStop|false}}. A value of &lt;code&gt;0.0&lt;/code&gt; is never fade out, &lt;code&gt;1.0&lt;/code&gt; is finish fading out exactly at maximum {{taglink|range}}.
}}

{{tag
|name = lodDistance
|type = int
|default = 1000
|description = Minimum camera distance at which the default LaserCannon projectile is simplified to a single rectangle.
}}

{{tag
|name = thickness
|type = float
|default = 2.0
|description = The thickness (width) of the LaserCannon projectile. Also for [[#BeamLaser Visuals]].
}}

{{tag
|name = coreThickness
|type = float
|default = 2.0
|description = The thickness (width) of the LaserCannon projectile's core. Also for [[#BeamLaser Visuals]].
}}

{{tag
|name = rgbColor2
|type = float
|default = {1.0, 1.0, 1.0}
|description = The colour of the LaserCannon projectile's core. Also for [[#BeamLaser Visuals]].
}}

===LightningCannon===
An instant-hit weapon similar to the [[#BeamLaser]], but which does all its damage at once. Visually drawn like [http://en.wikipedia.org/wiki/Star_Wars Star Wars] 'Force Lightning' or [http://en.wikipedia.org/wiki/Command_%26_Conquer:_Red_Alert CnC: Red Alert] [http://en.wikipedia.org/wiki/Tesla_coil Tesla Coil] weapons, the effect is not very customisable.

There are no tags specific to this '''WeaponType'''.

===Melee===
A weapon that always damages the target, no ifs or buts; unsurprisingly intended for use as a close quarters [http://en.wikipedia.org/wiki/Melee#Use_in_gaming 'melee'] weapon. It does not fire a projectile and does not care about the line of fire.

There are no tags specific to this '''WeaponType'''.

===MissileLauncher===
A versatile weapon which can optionally track targets and accelerate from a low initial velocity.  It can also use {{taglink|trajectoryHeight}} to have the shot arc similar to a ballistic  projectile. Visually represented by a 3D model, with an optional {{taglink|smokeTrail}}.

{{tag
|name = startVelocity
|type = float
|default = 0.0
|description = The initial velocity of the weapon projectile. Also for [[#StarburstLauncher]] and [[#TorpedoLauncher]].
}}

{{tag
|name = weaponAcceleration
|type = float
|default = 0.0
|description = The initial acceleration of the weapon projectile. Also for [[#StarburstLauncher]] and [[#TorpedoLauncher]]. Note that if it is &lt;code&gt;0.0&lt;/code&gt; the weapon can never increase from its {{taglink|startVelocity}} and will not reach its maximum {{taglink|weaponVelocity}}. Since 99.0 &lt;code&gt;acceleration&lt;/code&gt; is a synonym.
}}

{{tag
|name = tracks
|type = bool
|default = false
|description = Can the weapon projectile track a moving target? Also for [[#StarburstLauncher]] and [[#TorpedoLauncher]].}}

{{tag
|name = turnRate
|type = float
|default = 0.0
|description = The rate (in [[Elmo#Angular|cau]]) at which {{taglink|tracks|true}} weapons turn towards their target. This is relative to a projectile's current velocity; a weapon with a higher velocity will need a higher value in order to be able to hit targets that turn suddenly.}}

{{tag
|name = flightTime
|type = float
|default = 0.0
|description = The time in seconds before a missile projectile's fuel runs out; it ceases to obey {{taglink|tracks}}, loses velocity and falls to the ground. Also for [[#StarburstLauncher]]. Large values may cause over/undershoot problems. As of 104.0 also applies to [[#EmgCannon]].
}}

{{tag
|name = fixedLauncher
|type = bool
|default = false
|description = Makes the projectile spawn with the orientation of the shooting piece instead of their normal orientation. Also for [[#StarburstLauncher]] and [[#TorpedoLauncher]]. Weapons may not correctly obey [[#Collision &amp; Avoidance|avoidance settings]] when using this tag.
}}

{{tag
|name = wobble
|type = float
|default = 0.0
|description = Adds a random vector to the direction of travel every 16 frames, multiplied by the value of the tag. The effect is reduced as the firing unit gains experience. As this missiles direction is changed, wobbling swarm of missiles will diverge.
}}

{{tag
|name = dance
|type = float
|default = 0.0
|description = Adds a random vector to the position of a missile projectile every 8 frames, multiplied by the value of the tag. As the projectile is not rotated, a dancing swarm of missiles will remain relatively coherent.
}}

{{tag
|name = trajectoryHeight
|type = float
|default = 0.0
|description = Determines the height of the arc the missile will reach as it moves towards its target. A value of &lt;code&gt;0.0&lt;/code&gt; will result in a flat trajectory, &lt;code&gt;1.0&lt;/code&gt; will launch at 45&amp;deg;. Can be any value &gt;= &lt;code&gt;0.0&lt;/code&gt;; extreme values may require the {{taglink|tracks}} tag to be able to hit a target.
}}

====MissileLauncher Visuals====
A note about the missile exhaust flare: the size of the flare is determined by the model radius. The emit position of the flare is at (0,0,-radius) so the model may need careful adjustment to get the flare looking right.

{{tag
|name = smokeTrail
|type = bool
|default = false
|description = Does the missile projectile emit a smoke trail as it travels? Also for [[#StarburstLauncher]].
}}

===Rifle===
An instant hit weapon which does all its damage at once. Visually represented by a hardcoded tracer, firing and hitting effects. Rarely used.

There are no tags specific to this '''WeaponType'''.

===Shield (WeaponType)===
As the name suggests, not a weapon but a defensive shield. Can absorb or deflect ({{taglink|repulsor|true}}) projectiles. Individual weapons can be set to be intercepted or not by the shield using a [http://en.wikipedia.org/wiki/Mask_(computing) bitmask] (see [[Shield Interception Tag Use]]). Visually represented as a translucent sphere, with control over colour and texture; by default the shield is invisible ({{taglink|visible|false}}).

See the [[#shield]] sub-table section for other tags specific to this type.

===StarburstLauncher===
Fires a projectile that rises vertically for {{taglink|weaponTimer}} seconds, then turns towards its target. It can optionally track targets and accelerate from a low initial velocity. Before spring 92.0 was the only weapon that can be {{taglink|targetable}} and act as an {{taglink|interceptor}}. Visually represented by a 3D model, with an optional {{taglink|smokeTrail}}.

{{tag
|name = weaponTimer
|type = float
|default = 0.0
|description = The time in seconds during which the missile ascends vertically before turning towards its target.
}}

===TorpedoLauncher===
Fires a projectile that will behave ballistically out of water and like a missile in water. Usually used with {{taglink|waterWeapon|true}} so they can fire underwater and target underwater units. An aircraft carrying a [[#TorpedoLauncher]] is a special case, the weapon turns into an [[#AircraftBomb]] projectile that will spawn a torpedo projectile on impact with water. Visually represented by a pointed black cuboid, usually the default object is replaced by a 3D model. 

{{tag
|name = subMissile
|type = bool
|default = false
|description = Can the torpedo leave the water and target units and positions on land?
}}

===NoWeapon===
Not actually a '''WeaponType''', but an individual weapon requested by Spring to 'fill in the gaps' if a unit claims to have a weapon which isn't actually defined. There needs to be only one of these weapons and it is created by setting {{taglink|weaponName|&quot;NOWEAPON&quot;}} rather than by the {{taglink|weaponType}} tag.

==Sub Tables==

===damage===
The damage subtable lists how many hit points the weapon depletes against each armor class (See [[Armordefs.lua]]). It is a key-value map of armor class names and damage values. The special &lt;code&gt;default&lt;/code&gt; entry is as the name suggests the default damage applied to any unit which does not belong to a listed armor class, or to shields.

For example a weapon which deals 100 damage by default but only 50 to units in the 'tank' armor class:

&lt;code&gt;&lt;pre&gt;damage = {
    default = 100,
    tank = 50,
}&lt;/pre&gt;&lt;/code&gt;

===shield===
The preferred way to create a shield or repulser is to use the shield subtable rather than the old shield tags. 

The following tags are repulser specific:

{{tag
|name = repulser
|type = bool
|default = false
|description = Does the shield [http://dictionary.reference.com/browse/repulse?s=t repulse] (deflect) projectiles or absorb them? Btw its [http://springrts.com/mantis/view.php?id=4206 not repulsOr, but repulsEr]!}}

{{tag
|name = force
|type = float
|default = 0.0
|description = The force applied by the repulser to the weapon - higher values will deflect weapons away at higher velocities.}}

{{tag
|name = maxSpeed
|type = float
|default = 0.0
|description = The maximum speed the repulser will impart to deflected projectiles.}}

{{tag
|name = visibleRepulse
|type = bool
|default = false
|description = Is the (hard-coded) repulse effect rendered or not?}}

The following tags are general behaviour for all shields:

{{tag
|name = interceptType
|type = int
|default = 0
|description = [http://en.wikipedia.org/wiki/Mask_(computing) Bitmask] representing the types of weapons that this shield can intercept. Each digit of binary that is set to one means that a weapon with the corresponding digit in its {{taglink|interceptedByShieldType}} will be intercepted by this shield (See [[Shield Interception Tag Use]]).}}

{{tag
|name = armorType
|type = string
|default = &quot;&quot;
|description = Specifies the armorclass of the shield; you can input either an [[Armordefs.lua|armorclass]] name OR a unitdef {{xtaglink|Gamedev:UnitDefs|name}} to share that unit's armorclass.}}

{{tag
|name = smart
|type = bool
|default = false
|description = Determines whether or not projectiles fired by allied units can pass through the shield (&lt;code&gt;true&lt;/code&gt;) or are intercepted as enemy weapons are (&lt;code&gt;false&lt;/code&gt;).}}

{{tag
|name = exterior
|type = bool
|default = false
|description = Determines whether or not projectiles fired within the shield's radius can pass through the shield (&lt;code&gt;true&lt;/code&gt;) or are intercepted (&lt;code&gt;false&lt;/code&gt;).}}

{{tag
|name = energyUse
|type = float
|default = 0.0
|description = The amount of the energy resource consumed by the shield to absorb or repulse weapons, continually drained by a repulser as long as the projectile is in range.}}

{{tag
|name = radius
|type = float
|default = 0.0
|description = The radius of the circular area the shield covers.}}

{{tag
|name = power
|type = float
|default = 0.0
|description = Essentially the maximum allowed hit-points of the shield - reduced by the &lt;code&gt;damage&lt;/code&gt; of a weapon upon impact.}}

{{tag
|name = startingPower
|type = float
|default = 0.0
|description = How many hit-points the shield starts with - otherwise the shield must regenerate from &lt;code&gt;0&lt;/code&gt; until it reaches maximum {{taglink|power}}.}}

{{tag
|name = powerRegen
|type = float
|default = 0.0
|description = How many hit-points the shield regenerates each second.}}

{{tag
|name = powerRegenEnergy
|type = float
|default = 0.0
|description = How much energy resource is consumed to regenerate each hit-point.}}

{{tag
|name = rechargeDelay
|type = float
|default = 0.0
|description = The delay in seconds before a shield begins to regenerate after it is hit.}}

The following tags control the visual aspects of the shield:

{{tag
|name = visible
|type = bool
|default = false
|description = Is the shield visible or not?}}

{{tag
|name = visibleHitFrames
|type = int
|default = 0
|description = The number of frames a shield becomes visible for when hit.}}

{{tag
|name = badColor
|type = float[4]
|default = {1.0, 0.5, 0.5, 1.0} (Red)
|description = The RGBA colour the shield transitions to as its hit-points are reduced towards &lt;code&gt;0&lt;/code&gt;.}}

{{tag
|name = goodColor
|type = float[4]
|default = {0.5, 0.5, 1.0, 1.0} (Blue)
|description = The RGBA colour the shield transitions to as its hit-points are regenerated towards its maximum {{taglink|power}}.}}

{{tag
|name = alpha
|type = float
|default = 0.2
|description = The alpha transparency of the shield whilst it is visible.}}

===customParams===
The &lt;code&gt;customParams&lt;/code&gt; subtable of a WeaponDef allows the game designer to give their weapons custom attributes, which can then be accessed via lua gadgets and widgets. It is a map (key-value pair indexed table) of strings. When accessing these attributes in lua the strings can be turned back into numbers, bools or even tables. This gives great control to game designers to essentially implement their own behaviour tags.

There are no additional tags specific to this subtable

==Examples==
Some games may have most WeaponDefs integrated into their [[Gamedev:UnitDefs#Examples|UnitDefs]].

S44 and MC:L implement an [http://en.wikipedia.org/wiki/Object-oriented_programming OOP] paradigm with [http://en.wikipedia.org/wiki/Inheritance_(computer_science) inheritance].


{{ExampleRepoLinks
|path = weapons/
|entity = WeaponDefs
}}

[[Category: Game Dev]]</text>
      <sha1>6yrhmpdxm20bzurjzyqxn6vjn7g74tu</sha1>
    </revision>
  </page>
  <page>
    <title>Gamedev:WeaponMainDir</title>
    <ns>0</ns>
    <id>1288</id>
    <revision>
      <id>29837</id>
      <parentid>29836</parentid>
      <timestamp>2016-01-24T16:02:30Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>/* Example: forward firing gun */ just rewrite that whole block</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1613">= WeaponMainDir =
{{xtaglink|Gamedev:UnitDefs|weaponMainDir}} is a vector showing the direction of the weapon's aiming cone.
{{xtaglink|Gamedev:UnitDefs|maxAngleDif}} is the size of the aiming cone.
With these tags you can limit the firing arc of weapons.

If you want to precisely choose the WeaponMainDir, you could run [[Upspring]], create a new piece, move it around until the line, from the origin, to your piece, is along the line you want your weapon to fire, then write down the coordinate in WeaponMainDir. Keep in mind that [[Upspring]] inverts the sign of the x and z axes.

==Example: forward firing gun==
For instance, if you want your primary weapon to have a 90Â° fire arc forward, you'd write:  

&lt;code&gt;&lt;pre&gt;weapons = {		    
  {
    def = &quot;Flamer&quot;,
    mainDir = &quot;0 0 1&quot;, -- x:0 y:0 z:1 =&gt; that's forward!
    maxAngleDif = 90, -- 90Â° from side to side, or 45Â° from centre to each direction
  },
}&lt;/pre&gt;&lt;/code&gt;

==Example: two turrets on the sides of a unit==
[[File:Firing_arcs.gif|right]]
This unit that has one turret at left side and one turret at right side.

Each turret can rotate around 220Â°, a bit more then a semi circle which would be 180Â°
This way each turret can only shot at its side. The firing arcs overlap at front and back so both turrets can fire there.

To achieve this effect, the [[Gamedev:UnitDefs|UnitDef's]] weapon section looks like this:
&lt;code&gt;&lt;pre&gt;
weapons = {		    
  {
    def = [[Flamer]],
    mainDir = [[1 0 0]],
    maxAngleDif = 220,
  },
  {
    def = [[Flamer]],
    mainDir = [[-1 0 0]],
    maxAngleDif = 220,
  },
}
&lt;/pre&gt;&lt;/code&gt;

[[Category:Game Dev]]</text>
      <sha1>n6yzryia6i2db286vtd1raviyynmprt</sha1>
    </revision>
  </page>
  <page>
    <title>Gameplay Strategy For The Mod Developer</title>
    <ns>0</ns>
    <id>1883</id>
    <revision>
      <id>11697</id>
      <parentid>7053</parentid>
      <timestamp>2006-12-04T21:52:06Z</timestamp>
      <contributor>
        <username>Neddiedrow</username>
        <id>428</id>
      </contributor>
      <comment>/* The Mod Developer's Role In Relation To Strategy */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1549">===Overview===

As the developer of play content for the Spring engine, you are catering to an audience of players, many of them intelligent and creative. Through trial and error with the units you include, they will establish tactics and define overhead strategies which can be employed in your mod.

===The Mod Developer's Role In Relation To Strategy===

As a developer you have two chief responsibilities outside of your personal vision of what your mod should be. You are supposed to present a dynamic enviroment with units that promote the sort of play originally intended by your vision. On the other hand your game design must compensate for the actions and desires of the player base. 

In example, if an artillery unit is highly capable in direct combat, chances are you have let the role of the unit collapse and must correct the mistake. In order to solve issues like this you must be aware of what the players are doing. These events are inevitable, as promoted by the interaction between your vision, the engine, different maps and of course the ever-present force of sheer human creativity.

===Conclusion===

In many ways, the developer of mod content for the Spring engine defines the limits of strategy and tactics within his or her own mod. It is thus your responsibility to rectify issues which undermine the gameplay strategy you seek to promote, and this takes precedence over cosmetics or the popular opinion. Your vision, your role.

''' [[Strategy_and_Tactics|&lt;- Back to Strategy and Tactics page]]'''

[[category:Strategy]]</text>
      <sha1>cr54hzospmq6we231g7afiwmvjn4ih3</sha1>
    </revision>
  </page>
  <page>
    <title>Games</title>
    <ns>0</ns>
    <id>2547</id>
    <revision>
      <id>31790</id>
      <parentid>31727</parentid>
      <timestamp>2022-05-10T11:34:42Z</timestamp>
      <contributor>
        <username>Ares</username>
        <id>2960</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11218">There are a number of games made for the Spring Engine. Some of the more popular ones are listed below, sorted by their terms of use. &lt;!--(/license schemes?)--&gt;

You can download games automatically, using your lobby (see [[Read_Me_First|Read Me First]]). Some games also offer a stand-alone installer.

=Open Source=
''These games are all free to download and play and may be open to modifications, however, be sure to read the licenses before doing so.''
{|
| &lt;h2&gt;[https://zero-k.info/ Zero-K]&lt;/h2&gt;
([https://github.com/ZeroK-RTS/Zero-K/blob/f24c14f31bcd1040e7dce66336ec39fce63b7de9/sounds/music/license.txt CC-BY-NC-ND for music], [https://github.com/ZeroK-RTS/Zero-K/blob/079af01d8781e9785d21e41057d0d67f0c571b12/legal.txt GPL/PD for code and all other assets])
|-
| [[Image:Zero-k_image.jpg|300px|link=https://zero-k.info/]]
| valign=&quot;top&quot; | Zero-K is a fast, competitive game with a focus on a streamlined economy and advanced interface that takes the focus off tedious tasks and back on the action. A huge roster of interesting, unique units and a variety of unit abilities provides tremendous tactical and strategic depth to the game. (This game is available via [https://zerok.itch.io/zero-k Itch.io] and [https://store.steampowered.com/app/334920/ZeroK/ Steam].)
|-
| &lt;h2&gt;[https://github.com/spring1944/spring1944/wiki Spring: 1944]&lt;/h2&gt;([https://github.com/spring1944/spring1944/blob/1e36bbf93f42018bb9f52af8c3dc3e9ffa9fbeff/docs/License.txt CC-BY-NC])
|-
| [[Image:S44_tigers.jpg|300px|link=http://spring1944.net/]]
| valign=&quot;top&quot; | Spring:1944 is a WWII themed game with eight fully functional armies (US, Germany, USSR, Britain, Japan, Italy, Hungary, Sweden), period-accurate units and strengths. Realism comes second only to creating a game that is fun and accessible to play. ([https://spring1944.github.io/ homepage], [https://youtu.be/bg5k4b8Zgsk youtube 1], [https://youtu.be/76jFZvpvwoA youtube 2], [https://springrts.com/phpbb/viewforum.php?f=45 subforum])
|-
|  | &lt;h2&gt;[https://www.evolutionrts.info Evolution RTS]&lt;/h2&gt;([https://github.com/EvolutionRTS/Evolution-RTS/blob/f8a5df79b384f28fa8705f58df2cd2b580f0c982/license.txt CC-BY-SA])
|-
| [[Image:Evoimg.jpg|300px|link=https://www.evolutionrts.info]]
| valign=&quot;top&quot; | A new war is brewing. A violent conflict, between the Six Colonies, each one convinced that it was in the right, each one sure of its own ability to defeat its enemies. But they need Generals. They need soldiers. They need you. (This game is available via [https://forboding-angel.itch.io/evolution-rts Itch.io] and [https://store.steampowered.com/app/291150/Evolution_RTS/ Steam].)
|-
| &lt;h2&gt;[[Kernel Panic]]&lt;/h2&gt;([[Kernel_Panic#License:|FOSS]])
|-
| [[Image:Kernel_Panic_3.4.jpg|300px|link=Kernel Panic]]
| valign=&quot;top&quot; | A game based around combat '''inside''' a computer, with 3 unique sides: the System, the Hacker and the Network waging war in a matrix of DOOM! No resource economy exists in KP, with the only constraints being time and space.
|-
| &lt;h2&gt;[https://springfiles.com/spring/games/edge-1 On The Edge]&lt;/h2&gt;  (GPL, [https://github.com/PepeAmpere/On-The-Edge/blob/master/README.md CC-BY-NC-SA], [https://github.com/PepeAmpere/On-The-Edge/blob/master/wiki/credits.md etc])
|-
| [[Image:start3.jpg|300px|link=https://springfiles.com/spring/games/edge-1]]
| valign=&quot;top&quot; | First Spring MOBA with unique pre-game hero setup. Under heavy development. ([http://springrts.com/phpbb/viewtopic.php?f=55&amp;t=31476 On The Edge forum thread])
|-
| &lt;h2&gt;[http://www.metalfactions.pt Metal Factions]&lt;/h2&gt;
([http://www.metalfactions.pt/about.html#license CC-BY-ND, with GPL/PD code])
|-
| [[Image:Mf_spring_wiki.jpg|300px|link=http://www.metalfactions.pt]]
| valign=&quot;top&quot; | An evolving game that started as a TA mod and currently features four factions: AVEN, GEAR, CLAW and SPHERE. Commanders can morph to fit into different play styles and be easily revived. Economy scaling is more strictly tied to map control. 
|-
| &lt;h2&gt;[https://springrts.com/phpbb/viewtopic.php?f=54&amp;t=23988#p447937 The Cursed]&lt;/h2&gt;
([https://springrts.com/phpbb/viewtopic.php?f=54&amp;t=23988&amp;p=566530&amp;hilit=license#p566530 CC-BY-NC-SA])
|-
| [[Image:cursed_logo.jpg|300px|link=http://www.indiedb.com/games/the-cursed]]
| valign=&quot;top&quot; | The game is about bones, undead, demons, space marines and magic settled in a futuristic environment. It is a fresh   mixture of gameplay elements from many popular RTS games like Starcraft and C&amp;C. ([https://www.indiedb.com/games/the-cursed homepage], [https://youtu.be/EiBh8l200oo youtube 1], [https://youtu.be/oah7Xt0CgVY youtube 2], [https://springrts.com/phpbb/viewforum.php?f=54 subforum])
|-
| &lt;h2&gt; [https://drive.google.com/file/d/0Bx_Nvv6rzVvgLXJkckpYaDhaOVU/view Journeywar] &lt;/h2&gt;
([https://github.com/PicassoCT/Journeywar/blob/97aa399693cd04097367eb5c587eeb590723b700/LICENSE GPLv3])
|-
| [[Image:JwLogo.jpg|300px|link=https://springrts.com/phpbb/viewtopic.php?f=69&amp;t=23275&amp;start=1180#p578989]]
| valign=&quot;top&quot; |  Journeywar is the final battle between Combine and Exobiotics. Join the fight and rediscover the HL- Universe from a new, strategic perspective. ([https://springrts.com/phpbb/viewtopic.php?f=69&amp;t=23275&amp;start=1220#p588002 dev blog], [https://springrts.com/phpbb/viewforum.php?f=69 subforum])
|}

=Proprietary=
''These games may or may not be free to play. Modifying their content (i.e. the art assets) is not allowed without the game authors explicit permission, although the code is GPL and some games include large GPL-friendly content collections.''

{|
|-
| &lt;h2&gt;[https://www.moddb.com/games/conflict-terra/tutorials/how-to-start-a-game-of-conflict-terra Conflict Terra]&lt;/h2&gt;
|-
| [[Image:CT_Hojos.png|300px|link=http://www.moddb.com/games/conflict-terra]]
| valign=&quot;top&quot; | A unique game with heavy emphasis on mobility and featuring Spring's first major &quot;collect and drop-off&quot; economy, Conflict Terra boasts a distinctive art style.  Play as one of two factions in an ever-changing battlefield as you struggle to come out on top. ([http://www.moddb.com/games/conflict-terra homepage], [https://github.com/oksnoop2/conflictterra/commit/0e72529194e1ff363c986a43ce3af77d0cf720f7 currently proprietary], [https://github.com/oksnoop2/conflictterra/blob/e4a974c697f425c6ed00f83b1864d64c366da2f1/games/CT/License.txt last known public domain release], [https://springrts.com/phpbb/viewforum.php?f=63 subforum])
|-
| &lt;h2&gt; [https://springrts.com/phpbb/viewforum.php?f=46 Star Wars: Imperial Winter] &lt;/h2&gt;
|-
| [[Image:Imperial Winter assault.jpg|300px|link=https://springrts.com/phpbb/viewforum.php?f=46]]
| valign=&quot;top&quot; | A Star Wars themed game set in the troubled post-Return of the Jedi era.
|-
| &lt;h2&gt; [https://github.com/SpringMCLegacy/SpringMCLegacy/wiki Spring Mech Commander Legacy Project] &lt;/h2&gt;
|-
| [[Image:Spring_Mech_Commander_Legacy_Project.jpg|300px|link=https://github.com/SpringMCLegacy/SpringMCLegacy/wiki]]
| valign=&quot;top&quot; | A cool RTS based in the Battletech Universe.
|}

=TA-derived=
''At least parts of these games are derived from data of the  Total Annihilation game (copyright Wargaming). As such, their distribution is potentially in breach of copyright laws and therefore not officially endorsed by the Spring RTS team.''

{|
|-
|&lt;h2&gt; [https://springrts.com/wiki/Balanced_Annihilation#Links Balanced Annihilation] &lt;/h2&gt;
|-
| [[Image:Balanced-annihilation.png |300px]]
| valign=&quot;top&quot; | Balanced Annihilation (BA) is a fan mod of TA that evolved out of the TA Demo Recorder (1999) that aims to build on the graphics and balance of the original. BA gameplay develops in stages of progressively heavier units with a growing economy. Many strategies are viable in BA, including focusing on map control, aggression, defense, air power, sea power, or mobility. BA also runs competitive 1v1 tournaments, such as the Crown Cup 3, which attracted 64 players.
([https://balancedannihilation.com/ website], [https://discord.gg/jvFCZHBXTU discord])

|-
|&lt;h2&gt; [https://www.beyondallreason.info/ Beyond All Reason] &lt;/h2&gt;
|-
| [[Image:BAR Promo Render.png|300px]]
| valign=&quot;top&quot; | Beyond All Reason (BAR) is a free/open source real-time strategy video game. Powered by the Spring game engine, it was created to uphold the legacy of Total Annihilation. Its gameplay is heavily based on Balanced Annihilation, but it most notably introduces updated graphics, models, sound effects, soundtrack, and user interface, with the original aim to free the game from the proprietary assets of Total Annihilation.
Currently, the game is in playable open-alpha, with the multiplayer gameplay nearing a finalised state.
([https://www.beyondallreason.info/ Website], [https://discord.gg/N968ddE Discord])

|-
|&lt;h2&gt;[https://springrts.com/phpbb/viewforum.php?f=55 NOTA]&lt;/h2&gt;
|-
| [[Image:notAgame02.jpg|300px|link=http://nota.machys.net/]]
| valign=&quot;top&quot; | Not Original Total Annihilation is a rethink of the Total Annihilation universe with a focus on strategic, base oriented gameplay. With its revised unit scale, huge battles erupt engaging hundreds of units and scores of unit types. NOTA's completely rethought air and sea gameplay forces participation in all elements and places the tide of conflict in your hands. (This game is available via [http://nota.machys.net/downloads its own lobby].)
|-

|-
|  &lt;h2&gt; [http://fluidplay.co/taprime TA Prime] &lt;/h2&gt;
|-
| [[Image:Taprime site.png|300px|link=http://fluidplay.co/taprime]]
| valign=&quot;top&quot; |Highly polished prequel to Total Annihilation, with a full-blown tech tree, unit abilities and a strong rock-paper-scissors countering system similar to C&amp;C games.
|-

|-
|  &lt;h2&gt; [https://springrts.com/phpbb/viewforum.php?f=91 Tech Annihilation] &lt;/h2&gt;
|-
| [[Image:Tech_Annihilation.png|300px|link=https://springrts.com/phpbb/viewforum.php?f=91]]
| valign=&quot;top&quot; |This Game is bigger, greater and more epic! Tech your Commander from a tiny Commander to a Galactic Commander! (currently no homepage)
|-

|-
|  &lt;h2&gt; [[XTA]] &lt;/h2&gt;
|-
| [[Image:Screen508_s.jpg|300px|link=XTA]]
| valign=&quot;top&quot; | Originally developed as a Total Annihilation game by the Swedish Yankspankers, XTA is the Original Public Game released with first versions of Spring. Development of this game by the SYs has stopped a while ago, but it is still played and actively developed by the community.
|
|}

=Installing Games in Spring=
Quite a few of the games listed above come with standalone installers, which makes things easy. Check their website to find out! Otherwise a lobby such as [[SpringLobby]] will download everything for you when you join a game room.

Games can also be downloaded manually as .sdz/.sd7 files, for example ''BA750'''''.sd7''' or ''XTA'''''.sdz''', and placed into ''...\My Documents\My Games\Spring\Games\'' or ''...\Spring\games\'' folder (''~/.spring/games/'' on Linux/Unix/Mac). Read the advice on [[Read_Me_First|this page]] if your lobby does not find your games.
You may install multiple games in the same engine installation. The same goes for [[Maps]]. Place them into a folder called maps in  the same folder where the games folder is.

Still not enough Games? There are [[Getting_Spring_Content_and_Links|some more]], not listed here or make your [[Game_and_Unit_development|own Game]]!

[[Category: Games]]</text>
      <sha1>bvoeapkgd8o56lwn18uhr8zh8cr7cw9</sha1>
    </revision>
  </page>
  <page>
    <title>GamesDownloads</title>
    <ns>0</ns>
    <id>2774</id>
    <revision>
      <id>31742</id>
      <parentid>31136</parentid>
      <timestamp>2022-01-09T18:58:38Z</timestamp>
      <contributor>
        <username>Zwzsg</username>
        <id>29</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3445">{{#css:
  table.glossy {
    width: 200px;
    margin: 9px; padding:3px;
    border: 1px solid rgba(0,0,0,0.5);
    border-radius: 10px 10px 10px 10px;
    box-shadow: 0 2px 6px rgba(0,0,0,0.5), inset 0 1px rgba(255,255,255,0.3), inset 0 10px rgba(255,255,255,0.2), inset 0 10px 20px rgba(255,255,255,0.25), inset 0 -15px 30px rgba(0,0,0,0.3);
    text-align: center;
  }

  /*#installers img {
    border: 1px solid rgba(0,0,0,0.5);
    box-shadow: 0px -1px 3px rgba(0,0,0,0.8), 0px 1px 3px rgba(255,255,255,0.5);
  }*/

  /*table.glossy:hover {
    background: rgba(160,160,220,0.4);
  }*/
}}
[[Download]] &lt; {{FULLPAGENAME}}

== Spring Lobby ==

For the Spring engine and a variety of games to play on it! Online battlerooms and singleplayer. Also, there is a lobby to chat in.

&lt;div style=&quot;padding-left:7px&quot;&gt;
{{Template:GamesDownload|name=SpringLobby|image=Springlobby_64.png|url=https://springlobby.springrts.com/}}
 The easiest way to play: download SpringLobby, join the Spring server and enter an online battleroom.

MacOS players: see https://springrts.com/phpbb/viewtopic.php?f=65&amp;t=32970 for the SpringLobby download link. Engine must be downloaded seperately (103.0 is current), in the same forum.

&lt;!--
{{Template:GamesDownload|name=Spring Web Lobby|image=Blobby.png|url=http://weblobby.springrts.com}}
A well featured lobby that can be used to play any game. (Windows &amp; Linux)
--&gt;
&lt;/div&gt;


== Games available via [https://www.steampowered.com Valve Steam] for Windows ==
&lt;div id=&quot;steam&quot; style=&quot;padding-left:7px&quot;&gt;
{{Template:GamesDownload|name=Zero-K|image=eclipse.jpg|url=https://store.steampowered.com/app/334920/ZeroK/}}
{{Template:GamesDownload|name=Evolution RTS|image=Evoimg.jpg|url=https://store.steampowered.com/app/291150/Evolution_RTS/}}
&lt;/div&gt;

== Games available via [https://www.itch.io itch.io] for Linux ==

&lt;div id=&quot;itch&quot; style=&quot;padding-left:7px&quot;&gt;
{{Template:GamesDownload|name=Zero-K|image=eclipse.jpg|url=https://zerok.itch.io/zero-k}}
{{Template:GamesDownload|name=Evolution RTS|image=Evoimg.jpg|url=https://forboding-angel.itch.io/evolution-rts}}
&lt;/div&gt;


== Individual game installers ==
A handful of Spring games also provide their own installers (and/or other infrastructure). These usually contain everything you need to play that game, but they might not allow you to play other games too.
&lt;div id=&quot;installers&quot; style=&quot;padding-left:7px&quot;&gt;

{{Template:GamesDownload|name=Zero-K|image=eclipse.jpg|url=https://zero-k.info/Wiki/Download}}
&lt;span class=&quot;warning&quot;&gt;(!)&lt;/span&gt; This lobby is limited to playing Zero-K. (Windows &amp; Linux)

{{Template:GamesDownload|name=NOTA|image=notAgame02.jpg|url=http://nota.machys.net/downloads}}
&lt;span class=&quot;warning&quot;&gt;(!)&lt;/span&gt; This lobby is limited to playing NOTA. (Windows &amp; Linux &amp; Mac OS X)

{{Template:GamesDownload|name=Spring 1944|image=S44_tigers.jpg|notAs44lobby|url=https://trello.com/c/XllGyMqI/}}
&lt;span class=&quot;warning&quot;&gt;(!)&lt;/span&gt; This lobby is limited to playing Spring 1944, NOTA and Kernel Panic. (Windows &amp; Linux)

{{Template:GamesDownload|name=Kernel Panic|image=Kernel_Panic_3.4.jpg|url=https://www.moddb.com/games/kernel-panic}} &lt;span class=&quot;warning&quot;&gt;(!)&lt;/span&gt; This lobby is limited to playing Kernel Panic. (Windows)
&lt;/div&gt;


For more Spring games, check out the [[Games]] page. Please note that some of them will require you to have the engine installed in order to work, as well as some maps, as they don't come with their own installer.


[[Category:Spring]]</text>
      <sha1>9uo63y4tm6289e91omwcmsvug6ceue8</sha1>
    </revision>
  </page>
  <page>
    <title>General Resources</title>
    <ns>0</ns>
    <id>1855</id>
    <revision>
      <id>29268</id>
      <parentid>29234</parentid>
      <timestamp>2015-05-18T07:12:33Z</timestamp>
      <contributor>
        <username>Gajop</username>
        <id>2804</id>
      </contributor>
      <comment>/* Textures */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3010">[[Engine_Development|Development]] &lt; [[Game and Unit development]] &lt; General Resources

=Textures=
* Nobiax cc0 patterns
::Download (Mega): https://mega.co.nz/#!7N0wlaBK!u-8vrCP-vDEOk_y2yLHEYH8j91vAMuzB0yHXAOnoXRM
::Download (Google Drive): https://drive.google.com/file/d/0B25BbZxm93S9VGJoSEI4SlVIczA/view?usp=sharing
::Forum: https://springrts.com/phpbb/viewtopic.php?f=9&amp;t=33492
::License: [https://creativecommons.org/publicdomain/zero/1.0/ Public Domain (cc0)]

* [http://springrts.com/phpbb/viewtopic.php?t=7093&amp;start=0 Texture Competition 0001 - Metal]&lt;br&gt;
* [http://springrts.com/phpbb/viewtopic.php?t=7188&amp;start=0 Texture Competition 0002 - Camo]&lt;br&gt;
* [http://springrts.com/phpbb/viewtopic.php?t=7731 Texture Competition 0003 - Stone/Concrete]&lt;br&gt;
* [http://www.cgtextures.com/ CG Textures]&lt;br&gt;
* [http://spring.clan-sy.com/phpbb/viewtopic.php?f=13&amp;t=11009&amp;st=0&amp;sk=t&amp;sd=a Skyboxes]&lt;br&gt;
* [http://springrts.com/phpbb/viewtopic.php?f=13&amp;t=30674 More skyboxes, based on NASA photography]

=Features=
[http://springrts.com/phpbb/viewtopic.php?t=4047 Compilation List of Features for Maps]&lt;br&gt;
[http://spring1944.com/s44/files/S44%20Trees.rar Trees]

=Models=
[http://planet-wars.eu/ModelBase/Units.aspx Model Base] - models/textures/scripts by the CA/zK team (?), mostly remakes of TA units

[http://springrts.com/phpbb/viewtopic.php?f=9&amp;t=22283 KaiserJ's &quot;Lego&quot; pieces] - easily create units by puzzling together various &quot;Lego pieces&quot;, comes with texture.

=Sounds=
[http://freesound.iua.upf.edu/ Freesound] free sounds and samples, distributed under the [http://creativecommons.org/licenses/sampling+/1.0/ Creative Commons License]
[http://www.pdsounds.org/ Public domain sounds] sounds and samples distributed to the public domain

=Code=
[http://springrts.com/phpbb/viewtopic.php?t=7457 GPL Code Repository]&lt;br&gt;
[http://springrts.com/phpbb/viewtopic.php?t=6569&amp;postdays=0&amp;postorder=asc&amp;start=0 The Millionth Monkey Gets Its Typewriter - Movement Optimization]

=Maps=
[http://cs.selu.edu/~ssmith/spring/GPL/islands_in_war/ Islands in war]

=Games=
[http://spring.jobjol.nl/show_file.php?id=1531 THIS]&lt;br&gt;
[http://spring.jobjol.nl/show_file.php?id=1070 Fibre]&lt;br&gt;
[http://spring.jobjol.nl/show_file.php?id=1476 Micro Modules]&lt;br&gt;
[http://spring.jobjol.nl/show_file.php?id=1079 Under Pressure]&lt;br&gt;

=Lua=
[[WidgetDatabaseFAQ|Widget-DB]] - you may use this for finding code samples

=Various=
[https://springrts.com/phpbb/viewforum.php?f=67 Game Development Tutorials &amp; Resources] - A cornucopia of valuable resources, since years developers come here for top notch content. Also perfect to get old projects going again.

[http://spring.clan-sy.com/phpbb/viewtopic.php?f=14&amp;t=8573 Various Resources by various people]
- cegs in .tdf format, bos scripts and some 404s ;)

[[CollectionOfStuff|Unsorted list of interesting threads about Spring game development]]

{{forumlink|topic=23961|title= Dario D.'s interface pack}} - contains textures and sounds, useable to make an interface

[[Category:Game Dev]]</text>
      <sha1>l0vhxxydp1gtd3yzqlslk2omwil5lv1</sha1>
    </revision>
  </page>
  <page>
    <title>Gentoo install</title>
    <ns>0</ns>
    <id>2491</id>
    <revision>
      <id>31750</id>
      <parentid>31724</parentid>
      <timestamp>2022-02-05T10:33:23Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="420">[[Linux|Linux Setup Guide]] &lt; {{FULLPAGENAME}}

__TOC__
[[Image:Gentoo.png]]

For packaging &lt;font color=&quot;#00DD00&quot;&gt;requests&lt;/font&gt; or &lt;font color=&quot;#FF0000&quot;&gt;complaints&lt;/font&gt;, please contact [https://github.com/spring/gentoo-overlay/issues the packagers].

= Installation =

See https://github.com/spring/gentoo-overlay#overlay

= See Also: =
* [[Finalizing_linux_install]]
* [[Troubleshooting_linux]]

[[Category: Linux]]</text>
      <sha1>4dj9gxy4iwpbdo5yyp74u4morjq0230</sha1>
    </revision>
  </page>
  <page>
    <title>GetTextHeight</title>
    <ns>0</ns>
    <id>2715</id>
    <revision>
      <id>19497</id>
      <parentid>19084</parentid>
      <timestamp>2010-06-30T18:27:00Z</timestamp>
      <contributor>
        <username>Jk</username>
        <id>2584</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="565">[[Engine_Development|Development]] &lt; [[Lua_Scripting|Lua Scripting]] &lt; {{FULLPAGENAME}}

=GetTextHeight() Illustrations=
&lt;span class=&quot;note&quot;&gt;note: the returned heights are normalized, so you need to multiply them with your wanted fontSize&lt;/span&gt;


'''GetTextHeight'''
  ( string singlelined_text ) -&gt; number textHeight, number textDescender, number num_lines=1
[[Image:Gettextheight_singleline.png]]

'''GetTextHeight'''
  ( string multilined_text ) -&gt; number textHeight, number textDescender, number num_lines
[[Image:Gettextheight_multiline.png]]
[[Category: Lua]]</text>
      <sha1>jx14znmqxuqtjd2isk165mi4puynklo</sha1>
    </revision>
  </page>
  <page>
    <title>Getting Spring Content and Links</title>
    <ns>0</ns>
    <id>2525</id>
    <revision>
      <id>31833</id>
      <parentid>30648</parentid>
      <timestamp>2022-07-24T04:06:46Z</timestamp>
      <contributor>
        <username>Titanshadow12</username>
        <id>2980</id>
      </contributor>
      <comment>Fix dead spring maps link</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="316">===Content download websites for Spring===

;https://springfiles.springrts.com : Nearly all spring related files can be found here, files avaiable there are also downloadable by lobby clients.

;https://zero-k.info/Maps : List of most maps with detailed info



''' [[FAQ|&lt;- Back to Help page]]'''

[[Category:Help]]</text>
      <sha1>h649z6yra8y5looqudz14ykzzgpbocp</sha1>
    </revision>
  </page>
  <page>
    <title>Getting Started</title>
    <ns>0</ns>
    <id>1026</id>
    <redirect title="Read Me First" />
    <revision>
      <id>20560</id>
      <parentid>20547</parentid>
      <timestamp>2010-11-25T15:05:24Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>Redirected page to [[Read Me First]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="26">#REDIRECT[[Read Me First]]</text>
      <sha1>m2u0m6wwablrv9boclc8xgvyxdofm1j</sha1>
    </revision>
  </page>
  <page>
    <title>Getting Started:Windows</title>
    <ns>0</ns>
    <id>2994</id>
    <redirect title="Read Me First" />
    <revision>
      <id>20562</id>
      <parentid>20561</parentid>
      <timestamp>2010-11-25T15:07:56Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>Redirected page to [[Read Me First]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="26">#REDIRECT[[Read Me First]]</text>
      <sha1>m2u0m6wwablrv9boclc8xgvyxdofm1j</sha1>
    </revision>
  </page>
  <page>
    <title>Getting Started Development</title>
    <ns>0</ns>
    <id>2917</id>
    <redirect title="Development:Getting Started" />
    <revision>
      <id>19984</id>
      <timestamp>2010-08-18T10:00:10Z</timestamp>
      <contributor>
        <username>Hoijui</username>
        <id>2288</id>
      </contributor>
      <comment>[[Getting Started Development]] moved to [[Development:Getting Started]]: standardization</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="41">#REDIRECT [[Development:Getting Started]]</text>
      <sha1>fxkxbh2n720x8019wcrb37eps93ve13</sha1>
    </revision>
  </page>
  <page>
    <title>Glenda</title>
    <ns>0</ns>
    <id>3828</id>
    <revision>
      <id>30711</id>
      <timestamp>2018-07-25T18:19:09Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>Created page with &quot;[https://github.com/TurBoss/Glenda Glenda] is a Spring Lobby to [[Matrix]] bridge.  [[Category:Lobby]]&quot;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="102">[https://github.com/TurBoss/Glenda Glenda] is a Spring Lobby to [[Matrix]] bridge.

[[Category:Lobby]]</text>
      <sha1>1v9vwek3m7l9zble5q4olhzqeu2w2ym</sha1>
    </revision>
  </page>
  <page>
    <title>GlobalAI Mono Bindings</title>
    <ns>0</ns>
    <id>1877</id>
    <revision>
      <id>29431</id>
      <parentid>26851</parentid>
      <timestamp>2015-08-09T10:34:58Z</timestamp>
      <contributor>
        <username>Hughperkins</username>
        <id>673</id>
      </contributor>
      <comment>direct manageddreams.com with hughperkins.com</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7020">= Introduction =

Writing AIs in C# massively facilitates development, because C# runs just as fast as C++ and avoids those annoying stack/heap corruption errors.

We have bindings for .Net Framework 1.1 and 2.0 for Windows.  It would be useful to create a set of bindings for Mono so that this could run also on any Mono-supported platform.

Such bindings would make it possible to write portable AIs in C#, Boo (Python.Net), and any .Net language capable of being compiled into a portable ILSM class library.

Here's some thoughts on writing such bindings.

These thoughts are taken from a fuller thread at [http://taspring.clan-sy.com/phpbb/viewtopic.php?t=7634&amp;postdays=0&amp;postorder=asc http://taspring.clan-sy.com/phpbb/viewtopic.php?t=7634&amp;postdays=0&amp;postorder=asc]

= High-level overview =

To create bindings for Mono, we almost certainly need a generator. The hardest part of writing a generator is parsing the input files. In the case of the Mono bindings, we can use Reflection on the existing CSAIInterfaces.dll. This could save a lot of time.

= Download =

Code written so far:
*prototyping code and generator: modified MonoEmbeddedTest at [http://hughperkins.com/csai/MonoEmbeddedTest.zip http://hughperkins.com/csai/MonoEmbeddedTest.zip]
*C# AI &quot;Hello World&quot; for Mono: [http://hughperkins.com/csai/CSharpAIMono.zip http://hughperkins.com/csai/CSharpAIMono.zip] Note that you will need to ensure that Mono-1.1.18/bin is in Spring.exe's path.

A generator has been started in the file &quot;GenerateCode.cs&quot; in the MonoEmbeddedTest.zip zipfile. You can build it by doing:

&lt;pre&gt;
csc /debug GenerateCode.cs /reference:CSAIInterfaces.dll
&lt;/pre&gt;

Using mono, you'd do:

&lt;pre&gt;
mcs -debug -reference:CSAIInterfaces.dll GenerateCode.cs
&lt;/pre&gt;

= Architecture =

There are three types of classes we need to deal with:
*data classes, pass-by-value. This includes: Command, Float3
*proxied method calls from C++ to C#. This includes: IGlobalAI
*proxied method calls from C# to C++. This includes: IUnitDef, IAICallback

== Pass-by-value ==

We create a class in C++ for each pass-by-value class, with static methods &quot;Marshall_MyType_to_MonoObject&quot; and &quot;Marshall_MonoObject_to_MyType&quot;

The generator does this already, although it needs tweaking to cope with the double array in Command.

Two files are created for each type: MyTypeMarshaller.cpp and MyTypeMarshaller.h

We include the include file for the original Spring native type from MyTypeMarshaller.h, eg Float3Marshaller.h includes Float3.h.

== Proxied method calls from C++ to C# ==

There is only one class that this applies to, IGlobalAI.

We create a C# class GlobalAIProxyLoader, which contains delegate definitions for each method in IGlobalAI, and which calls SetUnitCreatedHandler etc on the C++ proxy class

We create a C++ class GlobalAIProxyCppToCs , which contains a function to receive each delegate from the C# ProxyLoader. It implements each function in IGlobalAI, redirecting to a user-provided GlobalAI C# class.

We strip the leading &quot;I&quot; from the interface name to get the underlying type name.

== Proxied method calls from C# to C++ ==

This applies to: IUnitDef, and IAICallback.

The native instances of these classes are always created by Spring itself, then passed back to the AI. We need to provide a C# proxy to wrap calls to a C++ proxy, which forwards the calls to the native instance.

Two classes called MyTypeCallbackProxyCsToCpp are created, one in C# one in C++.

The MyTypeCallbackProxyCsToCpp class in C# contains instance methods, such as SendTextMsg, which redirect to static methods, such as _SendTextMsg. The static methods are extern'd internal calls to methods with the same name in the MyTypeCallbackProxyCsToCpp class in C++.

In the general case, there can be many instances of each of these proxied classes, so we create a map of reference number to instance in the C++ proxy. The reference number is an arbitrary number starting from 1.

Each time a function on the Spring side returns a class that needs to be proxied into C#, we create a new reference number and add it to the map. The reference number is returned into the C#-side proxy, and will be used as a handle for method calls in the future.

The C#-side proxy that called the spring function that returned the new proxied class will receive the new handle from the C++-side proxy, and create a new instance of the appropriate proxy class, passing in the new handle in the constructor. It can then pass the new proxy class instance onto the C# AI.

The method calls from C# into C++ contain an additional first parameter, which is the reference number , which allows the C++-side proxy to select the appropriate native object and forward the call, eg to a UnitDef object. The instance methods in the C#-side proxy class will add the additional handle parameter when they call the corresponding static method.

The method calls in the C++ proxy are static, so they can be internal-called from C#, and in a class, to avoid namespace collisions.

= Generator main block =

The generator main block can add each of the types to be generated into an arraylist TypesByVal, ProxiesCppToCs or ProxiesCsToCpp, as appropriate. Then when we call generate:
*it goes through each arraylist and generates the appropriate classes
*when a class undergoing generation uses one of the other classes, the generator can handle this accordingly by checking which arraylist the other classes are in

= Use of attributes =

It's possible to add custom attributes to parameters and methods in the interface classes in CSAIInterfaces.dll . These can be read by the generator and used to tweak the generation.

For example, we could have [MarshallAsCNullTerminatedString] vs [MarshallAsCppStdString].

An attribute is just an empty class that derives from Attribute, eg:

&lt;pre&gt;
[AttributeUsage(AttributeTargets.Parameter, Inherited = false, AllowMultiple = true)]
public class MarshallAsCNullTerminatedString: Attribute
{
   // nothing needed here, empty class
}
&lt;/pre&gt;

Use of attributes should probably be kept to a minimum, to avoid modifying CSAIInterfaces.dll, but the possibility exists where necessary.

= Hand-Tweaked Code =

It will almost certainly be necessary to add hand-tweaked code to the proxies. For example, GetMetalMap() cannot be easily guessed, because there is no info on the size of the array, and it's not constant either.

Hand-tweaked code could be added by creating a derived class, in C++, from the proxy class one wishes to tweak. This keeps generated code separate from human-written code, so it is easy to regenerate the files as the interfaces change.

The generator will need to know the name of any derived classes so that it can use this in any &quot;new&quot; statements it generates for that proxy.

= Overall =

A plan exists that should probably work. Some code has been written. The devil is in the details.

Writing the Mono bindings will need someone with a good knowledge of the Mono API, the Spring GlobalAI API, C, C++ and C#.
[[Category: AI Dev]]</text>
      <sha1>hj07nroqog05yyoj8swpuu55wof61zn</sha1>
    </revision>
  </page>
  <page>
    <title>Glossary</title>
    <ns>0</ns>
    <id>985</id>
    <revision>
      <id>29669</id>
      <parentid>26882</parentid>
      <timestamp>2015-10-11T00:48:35Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>/* Glossary */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4870">{{deprecated}}

===Intro===

Can't find what you're looking for? Please edit this page and add an entry for the word/phrase you don't understand, with the text &quot;what's this?&quot; (click the &quot;Edit Page&quot; link at the bottom to begin). Secondly, have a look to see if there are any &quot;what's this?&quot; entries that you know the answer to, and fill them in.

Please keep this page in alphabetical order, and remember it is just a glossary not an encyclopedia - brief descriptions only please! Thank you.

===Glossary===

;AA
:&quot;Anti Air&quot; - units which are good against aircraft.
:Also see [[Absolute Annihilation]]. &quot;Balancing mod&quot; with lots of extra units, based on [[UH]].

;AoE
:Area of Effect.

;assist-build
:See &quot;build-assist&quot;.

;BA
:[[Balanced Annihilation]]. The most popular Spring mod.

;balancing mod
:Changes the stats, abilities, or build menus of existing units, may add extra units.

;BB
:&quot;Big Bertha&quot;, which is a &quot;VLRPC&quot;.

;BSR
:&quot;Brave Sir Robin&quot; - producer of [[UH]].

;build-assist
:Speeding up unit/building construction with extra con units.

;[http://en.wikipedia.org/wiki/C_plus_plus C++]
:A computer language. Spring is written in this language.

;CA
:[[Complete Annihilation]] mod. Constantly in development Total Annihilation based mod experimenting with new graphics and gameplay ideas.

;CB
:see Comm Bomb

;CEG
: ''todo''

;CVS
:&quot;Concurrent Version System&quot;, allows the developers to work together; it contains the Spring source code.
:&quot;SVN&quot; (Subversion) is another system for the same task.

;comm
:&quot;commander&quot;, the unit you start the game with.

;comm bomb
:Self-destructing (Ctrl+D) your commander in an enemy base to destroy it.

;commnap
:Snatching an opponent's commander with a transport unit (usually an air transport), with the intent of self-destructing it in the enemy's base.

;con
:&quot;Construction&quot;, e.g. &quot;con air&quot;/&quot;air con&quot; is a construction aircraft.

;DD
:&quot;Doomsday Machine&quot;, Core T3 Laser tower.

;DPS
:Damage Per Second.

;[http://www.doxygen.org doxygen]
:Source code documentation system used on Spring. Generates [https://springrts.com/dl/buildbot/doc/ documentation] directly from code.

;[[FAQ]]
:Answers to &quot;Frequently Asked Questions&quot;.

;LOS
:Line Of Sight (of your units).

;LRPC
:Long Range Plasma Cannon.
:See also &quot;VLRPC&quot; (Very -&quot;&quot;-).

;LUPS
: Lua Particle System.

;[[Maximum_Annihilation|MA]]
:[[Maximum_Annihilation|Maximum Annihilation]] mod - TA themed mod which evolved from [[Balanced_Annihilation|BA]] and features lots of new units and some changes on the concept to make it more challenging and fun.

;mex (mexes)(mohomex)
:Metal Extractor(s).

;[[MiniSpring]]
:[[Mods|Mod]] with all the unit sizes scaled down by a factor of 2.

;[[Mods|mod]]
:Modification to the game which changes the units, see [[Mods]].

;[http://en.wikipedia.org/wiki/Microsoft_.NET .NET]
:A software development platform used by Spring.

;[[NOTA]]
:Not Original Total Annihilation, referring to the a TA mod.

;[[OTA]]
:Original Total Annihilation, referring to the unmodified TA units.

;OP
:OverPowered, when a unit is too strong.

;Phoenix Works
:A game lobby and persistent campaign system supporting Spring [[XTA]] as well as several (mainly rebalancing) mods for [[OTA|original TA]].

;Porcing
:Playing defensively and not expanding (Small and Good Defense, like a Porcupine); term from an old CaveDog Strategy Article.

;PW
:See &quot;Phoenix Works&quot;.
:Can also stand for &quot;PeeWee&quot;s.

;rebalance
:See &quot;balancing mod&quot;.

;rush
:Early attack, see [[Rushing]].

;self-D
:&quot;Self-destruction&quot; - all units can do this ([CTRL]+[D] to activate/cancel).

;[http://sf.net SourceForge]
:The open source website used for the development of the source code.

;SVN
:Subversion, used by the developers, it contains the [[Spring]] programming code. Considered superior to CVS.

;SWTA
:Star Wars &quot;total conversion&quot; [[Mods|mod]].

;[[SY]]s
:&quot;Swedish Yankspankers&quot; - the guys who started the whole [[Spring]] thing 8)

;TA
:Total Annihilation, the name of the game.

;[[TA-WD|TAWD]]
:&quot;Total Annihilation: World Domination&quot; - a quality World War 3 mod.

;TC
:See &quot;total conversion&quot;.

;TiA
:Tired Annihilation, a TA-based mod by Tired.

;total conversion
:A [[Mods|mod]] which replaces the entire unit set, and often every other aspect(graphics, sound, etc.) of a game.

;[[UH]]
:&quot;[[UberHack]]&quot; - Perhaps the most widely acclaimed &quot;balancing mod&quot; - produced by &quot;BSR&quot;.

;UF
:Unknown-Files, a site that hosts Spring content.

;unit stats
:The amount of armour, max speed, etc. that a unit has.

;VLRPC
:Very Long Range Plasma Cannon.
:See also &quot;LRPC&quot;.

;veh
:Stands for &quot;Vehicle&quot;.

;[[XTA]]
:Standard mod packaged with Spring. Developed by a small community of enthusiasts. v9.5 is latest version.

=== See also ===
* &quot;[http://www.tauniverse.com/forum/showthread.php?s=&amp;postid=435301#post435301 Abbreviations]&quot; entry in the [http://www.tauniverse.com tauniverse.com] forum</text>
      <sha1>8qqqz8xzsy0qb0j7olujt0froux2b5d</sha1>
    </revision>
  </page>
  <page>
    <title>Google Summer of Code</title>
    <ns>0</ns>
    <id>2633</id>
    <revision>
      <id>23931</id>
      <parentid>23930</parentid>
      <timestamp>2012-03-08T22:43:08Z</timestamp>
      <contributor>
        <username>Jk</username>
        <id>2584</id>
      </contributor>
      <minor/>
      <comment>/* I'm a Student -- What's this all about? */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1974">= Introduction =
__NOTOC__
Welcome to the [http://www.google-melange.com/gsoc/homepage/google/gsoc2012 GSoC 2012] page!
This year, Spring wants to participate in Google's fantastic Summer of Code program. We can't do this alone, however -- everyone has to pitch in to make the experience a good one.

== I'm already a Springer -- How can I help? ==

If you're knowledgeable about the engine or with regard to content creation, you can apply to be a mentor.

Volunteers can also help by cleaning up and expanding the documentation, especially pages pertinent to GSoC.

== I'm a Student -- What's this all about? ==

If you want to help Spring out and learn something along the way, you can join us as a student!

* For possible projects, look at the [[Project proposals|project proposals]] page. You can also come up with your own ideas. If our projects gets accepted, send your application to Google.

* To participate, see the [[GSoC:student_application|student application]] page.

* To get in contact with the Spring community create a forum account, join one of our irc channels (#sy @ QuakeNet &amp; #taspring @ FreeNode) or create a lobby account and join #sy in the game lobby. (all channels are bridged by an irc bot)

* To get in touch with Spring, [http://springrts.com/wiki/Building_spring download its source code &amp; setup a build enviroment] to get familiar with it.

See the [http://www.google-melange.com/gsoc/events/google/gsoc2012 timeline at GSoC] for more details.

= Contact =
You can reach the Spring developers at:
* [http://springrts.com/phpbb/viewforum.php?f=12 The Spring forum]
* IRC  (at irc.freenode.net in channel [irc://irc.freenode.net/taspring #taspring] or at irc.quakenet.org in [irc://irc.quakenet.org/sy #sy])
* On Spring's lobby server in channel #sy
* [[File:mailinglist.png|link=mailto:springrts-team@SPAMPROTECTED]]

Please read [http://code.google.com/intl/de/soc/ Google's Summer of Code Website] for more information.

[[Category:GSoC]]</text>
      <sha1>5kw6r6des345qnjq3okkl8kslxgug1w</sha1>
    </revision>
  </page>
  <page>
    <title>Google Summer of Code 2009</title>
    <ns>0</ns>
    <id>3204</id>
    <redirect title="Google Summer of Code" />
    <revision>
      <id>23662</id>
      <timestamp>2012-03-02T17:12:00Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>moved [[Google Summer of Code 2009]] to [[Google Summer of Code]] over redirect</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="35">#REDIRECT [[Google Summer of Code]]</text>
      <sha1>gaw4hiui1kfw2p7ia2e77s9pn3wcxbr</sha1>
    </revision>
  </page>
  <page>
    <title>Google Summer of Code 2010</title>
    <ns>0</ns>
    <id>2825</id>
    <redirect title="Project proposals" />
    <revision>
      <id>23736</id>
      <parentid>23677</parentid>
      <timestamp>2012-03-02T19:18:52Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>Redirected page to [[Project proposals]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="31">#REDIRECT [[Project proposals]]</text>
      <sha1>1ebt4f9ngaasbmmy5v3hbfiddyg28g0</sha1>
    </revision>
  </page>
  <page>
    <title>Google Summer of Code 2010 student application</title>
    <ns>0</ns>
    <id>3051</id>
    <redirect title="GSoC:student application" />
    <revision>
      <id>24772</id>
      <parentid>24769</parentid>
      <timestamp>2012-07-13T22:17:56Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>remove drd</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="38">#REDIRECT [[GSoC:student_application]]</text>
      <sha1>0d4jo5yx3jozuzhhlrmwd65xa1vy07x</sha1>
    </revision>
  </page>
  <page>
    <title>Google Summer of Code 2011</title>
    <ns>0</ns>
    <id>3205</id>
    <redirect title="Project proposals" />
    <revision>
      <id>24770</id>
      <parentid>23666</parentid>
      <timestamp>2012-07-13T22:17:00Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>remove drd</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="31">#REDIRECT [[Project_proposals]]</text>
      <sha1>9xoq5qey1i3cgy8e9t3yu8a9al7nmrc</sha1>
    </revision>
  </page>
  <page>
    <title>Google Summer of Code 2011 student application</title>
    <ns>0</ns>
    <id>3206</id>
    <redirect title="GSoC:student application" />
    <revision>
      <id>24771</id>
      <parentid>23669</parentid>
      <timestamp>2012-07-13T22:17:23Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>remove drd</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="38">#REDIRECT [[GSoC:student_application]]</text>
      <sha1>0d4jo5yx3jozuzhhlrmwd65xa1vy07x</sha1>
    </revision>
  </page>
  <page>
    <title>Google Summer of Code 2012</title>
    <ns>0</ns>
    <id>3207</id>
    <redirect title="Project proposals" />
    <revision>
      <id>23737</id>
      <parentid>23675</parentid>
      <timestamp>2012-03-02T19:19:18Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>Redirected page to [[Project proposals]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="31">#REDIRECT [[Project proposals]]</text>
      <sha1>1ebt4f9ngaasbmmy5v3hbfiddyg28g0</sha1>
    </revision>
  </page>
  <page>
    <title>Google Summer of Code student application</title>
    <ns>0</ns>
    <id>3208</id>
    <redirect title="GSoC:student application" />
    <revision>
      <id>23695</id>
      <timestamp>2012-03-02T18:06:27Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>moved [[Google Summer of Code student application]] to [[GSoC:student application]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="38">#REDIRECT [[GSoC:student application]]</text>
      <sha1>fc39gkga7xjjkv6vwpwqt7ikqsd2fbj</sha1>
    </revision>
  </page>
  <page>
    <title>HLT</title>
    <ns>0</ns>
    <id>1520</id>
    <revision>
      <id>26879</id>
      <parentid>25264</parentid>
      <timestamp>2013-03-23T23:11:17Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>remove Category:Units</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="653">The Sentinel and the Gaat Gun, Arm and Core's Level 2 heavy laser towers, are an important part of a developing base. They can provide an invaluable defense, where [[Missile Tower|rocket towers]] are too weak, and plasma turrets are too inaccurate, these sum it up nicely. They require a store of energy to fire, so make sure that you still have some other land defense.

===The Arm Sentinel===

[[Image:sentinel_hlt.JPG|Sentinel action shot]]

''The Sentinel is the Arm HLT.''

===The Core Gaat Gun===

[[Image:gaatgun_hlt.JPG|Gaat Gun]]

''The Core version, the Gaat Gun is a powerful triple barreled laser tower.''

[[Category:Balanced Annihilation]]</text>
      <sha1>kbuy0x6h43eb5bntezxlsy8q0o38m3m</sha1>
    </revision>
  </page>
  <page>
    <title>Health scripts</title>
    <ns>0</ns>
    <id>3341</id>
    <revision>
      <id>30462</id>
      <parentid>30461</parentid>
      <timestamp>2017-09-21T18:25:21Z</timestamp>
      <contributor>
        <username>Maddox</username>
        <id>2934</id>
      </contributor>
      <minor/>
      <comment>another formatting fix</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="940">==Get the health of the unit in AnimDef==


*read the &quot;damage&quot; full health in UnitDef data:
 &lt;nowiki&gt;
local maxhealth
local percenthealth,health,maxHealth,paralyzeDamage,captureProgress,buildProgress

health,maxHealth,paralyzeDamage,captureProgress,buildProgress=Spring.GetUnitHealth(unitID)

percenthealth=(health/maxHealth)*100
&lt;/nowiki&gt;


*print all the data in the chat box and infolog for control :
 &lt;nowiki&gt;
Spring.Echo(&quot;health=&quot;..health,&quot;maxHealth=&quot;..maxHealth,&quot;paralyzeDamage=&quot;..paralyzeDamage,
&quot;captureProgress=&quot;..captureProgress,&quot;buildProgress=&quot;..buildProgress,&quot;percenthealth=&quot;..percenthealth..&quot; %&quot;)

--health=19921.25390625,maxHealth=20000,paralyzeDamage=0,captureProgress=0,buildProgress=1,percenthealth=99.606269836426 %
(unitID)
&lt;/nowiki&gt;
**note the buildprogress and captureprogress values are in the range 0 to 1 (1 = complete)




*[[SpringRtsTutorialAnimDef]] return to the list of animDef exemples


[[Category:Emmanuel]]</text>
      <sha1>76w153hzptc4xrua55qigjmqqhsuhii</sha1>
    </revision>
  </page>
  <page>
    <title>Heatcloud</title>
    <ns>0</ns>
    <id>2480</id>
    <revision>
      <id>28796</id>
      <parentid>22415</parentid>
      <timestamp>2014-10-05T16:33:00Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>tag for delete</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1135">{{delete}}
==Introduction==

heatcloud is one of the simplest and most common explosion types. Ironically, it is also one of the least intuitive. First of all, ignore the name--it basically makes an expanding image at the point at which it is spawned.

==Source==

{{sourcelink|file=rts/Sim/Projectiles/Unsynced/HeatCloudProjectile.cpp}}

==Suggested Use==

heatcloud makes a good main piece of an explosion. Think of it as a background for the other components of your explosion generator.

==Parameters==

=== heat, maxheat, heatFalloff ===

Most explosions have alpha and ttl. I don't know why heatcloud uses these instead. Basically:

Starting alpha = heat / maxheat

ttl = heat / heatFalloff

The alpha decreases linearly across the heatcloud's lifetime.

=== size, sizeGrowth ===

The heatcloud starts at size size and grows sizeGrowth each frame.

=== sizemod, sizemodmod ===

It seems that the heatcloud expands by a factor of (1 - sizemod) each frame. The sizemod itself is multiplied by sizemodmod every frame. Most of the time it's probably best just not to contemplate these.

=== texture ===

The texture of the heatcloud.</text>
      <sha1>a5890pe2iijdtvbzyxe0sj6yndrdd8a</sha1>
    </revision>
  </page>
  <page>
    <title>Height Map Tutorial</title>
    <ns>0</ns>
    <id>3660</id>
    <redirect title="Tutorial:HeightMapWithPOVRay(RogerN)" />
    <revision>
      <id>28907</id>
      <timestamp>2014-10-18T21:53:53Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>Flozi moved page [[Height Map Tutorial]] to [[Tutorial:HeightMapWithPOVRay(RogerN)]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="50">#REDIRECT [[Tutorial:HeightMapWithPOVRay(RogerN)]]</text>
      <sha1>8l7bm0hmhzxrm4mikswjzrv4pyui93u</sha1>
    </revision>
  </page>
  <page>
    <title>Help</title>
    <ns>0</ns>
    <id>2578</id>
    <revision>
      <id>26435</id>
      <parentid>19672</parentid>
      <timestamp>2013-03-09T21:16:54Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>tag for delete, use FAQ instead?</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2286">{{delete}}
=Basic Help Topics=
==Installing Spring==

=== For Players ===
Users who wish to play a game that uses the Spring engine should go to the [[Games]] page and use the standalone installer for their game if one is available. A list of these games offered is at the [[GamesDownloads]] page as well.

For games that do no have standalone installers, users can instead download and run the Spring Engine installer and then download the mod by going to that game's page. Double-clicking on a mod or map file (.sd7 or .sdz )when the Spring Engine is installed will automatically 'install' it for you.

=== For Developers ===
Developers should visit the [[download]] section and follow the instructions there.

==Starting a Test or Single-Player Game==
Windows:

There is no real &quot;Single Player Mode&quot; but in the current version you can execute the &quot;spring.exe&quot; included in the install directory (or use the &quot;Test Spring&quot; shortcut in the Start Menu on windows). This will bring up a list of &quot;Games&quot;, pick one. Next Choose a GlobalAI Test for the AI you want to fight (Some AIs may just sit there and do nothing with some or all Games) or &quot;Random Enemies&quot; (which will throw random enemies at you, but might not work with all Games). Then choose a map and get started.

The more reliable way to start a single player game is to start a passworded or locked game on the server and add AI &quot;bots&quot; to the match instead of human players. See: [[#Hosting Games| Hosting Games]]

==Playing==
For help and strategy guides for playing individual games, go to the relevant game's page via the [[Games]] page.

==Joining Games==
==Hosting Games==
==Installing New Maps and Mod Files==
'''For Windows Users:''' Double clicking on a mod or map file (.sd7 or .sdz)will automatically 'install' it by moving it to a folder where Spring will be able to recognise it.

=More Places to Find Help=

Links/Pages:
*[[Using Spring]]  (Attempts to be an exhaustive manual for playing Games made for the Spring Engine)
*[[FAQ|Wiki Frequently Asked Questions (FAQs)]]
*[http://spring.clan-sy.com/websvn/listing.php?repname=spring&amp;path=%2Ftrunk%2FDocumentation%2F&amp;rev=0&amp;sc=0| &quot;Official Documentation&quot;] (Right from the Devs, via SVN)
*[http://spring.clan-sy.com/phpbb/viewforum.php?f=11| Official Help &amp; Bugs Forum]</text>
      <sha1>sujsmg15ing4kutjp9ke2oci91voq2i</sha1>
    </revision>
  </page>
  <page>
    <title>HelpAndBugsSticky</title>
    <ns>0</ns>
    <id>3552</id>
    <revision>
      <id>27579</id>
      <parentid>27578</parentid>
      <timestamp>2013-08-24T16:54:59Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>recategorise to 'Forum'</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="350">==How to report bugs==
See [[Bugs]]

==How to start playing? What is Spring?==
See [[Read_Me_First]] and [[FAQ]]

==What is this page?==
This page is to be linked in a sticky post on [http://springrts.com/phpbb/viewforum.php?f=11 Help and Bugs subforum.]

The sticky threads could not be edited by most posters but this page can.

[[category: Forum]]</text>
      <sha1>b97pz8j7feqddznmecmb2yw7nutxrye</sha1>
    </revision>
  </page>
  <page>
    <title>History</title>
    <ns>0</ns>
    <id>1155</id>
    <revision>
      <id>30956</id>
      <parentid>29745</parentid>
      <timestamp>2019-02-18T06:17:51Z</timestamp>
      <contributor>
        <username>Hawara</username>
        <id>2945</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2513">== History ==
The Spring engine is inspired by the game &quot;Total Annihilation&quot; (TA) by Cavedog Entertainment. TA, released in 1997 is the best RTS (&quot;Real Time Strategy&quot;) game &quot;of all time&quot; according to [http://archive.gamespy.com/top10/february04/rts/index11.shtml Gamespy].

Stefan Johansson started the Spring project within the [[SY]] clan that had already made the [[XTA]] mod for the original TA engine. His goal was to make a engine that could replace the now ageing TA engine.

The original TA engine was very advanced but still had some hard limits. Cavedog went bankrupt some years after it released TA. Before it went under it had released TA:Kingdoms but despite it had a more advanced engine it did not get very popular. So the community kept using the original TA engine.

Atari the current owner of the TA franchise, showed little intention to make a sequel. And Chris Tailor the lead developer of the original TA game was hard at work with his new company &quot;Gas Powered Games&quot; to make the &quot;Dungeon Siege&quot; games.

After some years of private development within the [[SY]] Stefan and the others decided to release Spring under the GPL. I was not around but I do understand that this was difficult choice as Spring represented a lot of work. The [https://springrts.com/phpbb/viewtopic.php?f=2&amp;t=680 first version of TA Spring] was released on 26 Apr 2005.

With this the Spring Project managed to attract attention from people that would otherwise not be interested. David Anderson was one of them, he started the multi platform port of Spring. Which now after a difficult start will replace the existing Windows only branch. Stefan Johansson was hired by ''Massive Entertainment'' and therefore stopped active Spring engine development. Still he is around and keeps [[XTA]] up to date.

With the releases of games such as [https://www.rockpapershotgun.com/2018/04/27/free-total-annihilation-like-rts-zero-k-lands-on-steam/ Zero-K] and [https://store.steampowered.com/news/12889/ Evolution RTS] on Steam, the legacy and spirit of Cavedog is continuing, while always looking for new volunteers to keeping Spring Engine in shape.

=== History Links ===
* &quot;[http://www.tauniverse.com/forum/showthread.php?s=&amp;postid=435289#post435289 Latest info about TA 2 &amp; TA sequels + a little history of TA :]&quot; entry in the [http://www.tauniverse.com tauniverse.com] forum
* [[Press]]

== See also ==
* [[Wikipedia:Total Annihilation]]
* [[Wikipedia:Cavedog Entertainment]]
* [[Wikipedia:TA Spring]]

[[Category:Spring]]</text>
      <sha1>677kjrzte5hqsbtf9cym8bv8ocvugdz</sha1>
    </revision>
  </page>
  <page>
    <title>Hosting Spring</title>
    <ns>0</ns>
    <id>1892</id>
    <revision>
      <id>28120</id>
      <parentid>27970</parentid>
      <timestamp>2013-12-30T11:35:06Z</timestamp>
      <contributor>
        <username>Bibim</username>
        <id>2690</id>
      </contributor>
      <minor/>
      <comment>/* SPADS */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="593">==Hosting==
* [[Spring_on_a_LAN|Java lobby server]]
==Autohosting==
There are some autohosts, programs which can be run on a secondary computer to provide a bot-controlled automated hosting enviroment, available for Spring. 

=== Springie ===
*[http://taspring.clan-sy.com/phpbb/viewtopic.php?t=7921 Licho's Springie Autohost]
*[[LINUX:SetupSpringie|How to setup Springie]]
*[[Hosting Spring/Autohost|How to use Springie]]

=== SPADS ===
*[http://springrts.com/wiki/SPADS SPADS links]

===  Zydox Autohost ===
https://github.com/Zydox/SpringAutohost

written in python

[[Category: Autohosts]]</text>
      <sha1>j8jwmaz2c6a7sjfvm0ujmftspn3ktnl</sha1>
    </revision>
  </page>
  <page>
    <title>Hosting Spring/Autohost</title>
    <ns>0</ns>
    <id>3353</id>
    <redirect title="Hosting Spring/Springie" />
    <revision>
      <id>25439</id>
      <timestamp>2012-11-19T20:53:07Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>Abma moved page [[Hosting Spring/Autohost]] to [[Hosting Spring/Springie]]: Title should be = Topic</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="37">#REDIRECT [[Hosting Spring/Springie]]</text>
      <sha1>nao6o0ebmrjl2q2h510h2jqsbsmtp6l</sha1>
    </revision>
  </page>
  <page>
    <title>Hosting Spring/Springie</title>
    <ns>0</ns>
    <id>2559</id>
    <revision>
      <id>26639</id>
      <parentid>25440</parentid>
      <timestamp>2013-03-20T14:03:00Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>1cat</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6187">[[Springie]] is an Autohost for Spring, it creates a battleroom and starts automatically when enough people have joined. It also reacts to a number of chat commands.

==Requirements==
*Spring
*Open UDP Port
*Springie

==Using==
Springie is easy to use but you will need an open UDP port to be able to host a game. You can download it using the link at the end of the page, no install is required.

===Creating===
After opening an UDP port, you need to create a new account for the bot and ask a GO (Game Operator) to put a bot flag on it. Now you only need to log in with Springie and configure the map and other settings!

'''''Note:''' Spring changes Spring settings to 40 x 40 pixels and windowed mode, so if you want to play you will need to reconfigure it.''

===Commands===
'''HELP''''

*!help - lists the commands that are available to you
*!helpall - lists all commands (sorted by their level) - you may not be able to use all of them

'''COMMUNICATION'''
*!ring [&lt;filters&gt;..]- rings either all unready or specified users
*!say - allows you to talk between lobby and game (not needed if chat is enabled)
*!notify - Springie will notify you when game ends

'''TEAM AND ALLY MANAGEMENT'''
*!fix - fixes teamnumbers
*!fixcolors - fixes team colors (similar colors are changed)
*!random [&lt;allycount&gt;] - assigns people to &lt;allycount&gt; alliances (default: 2 alliances)
*!balance [&lt;allycount&gt;] - scans all ally combinations and randomly chose one which is balanced (eg regarding ranks) (warning: not tested for large teams, might take a long time)
*!cbalance [&lt;allycount&gt;] - assigns people to allycount random balanced alliances, attempting to put clanmates on the same alliance
*!ally &lt;allynum&gt; [&lt;player&gt;..] - forces ally number
*!team &lt;teamnum&gt; [&lt;player&gt;..] - forces team number
*!spec &lt;username&gt; - forces a player to become spectator
*!specafk - forces all AFK players to become spectators

'''GAME CONTROL'''
*!start - starts game (checks for duplicate team numbers and ally fairness)
*!forcestart - overrides ordinary !start checks (duplicate team numbers and ally fairness)
*!force - makes spring force start (ctrl+enter in-game)
*!exit - exits the game
*!manage &lt;minplayer&gt; [&lt;maxplayers&gt;] - automanage game for min to max players. If minplayers is 0, it won't manage. In this mode, Springie keeps alliances even, colors fixed, autorings and spec afk or even kicks them.

'''VOTING'''
*!voteforcestart - starts vote to execute !forcestart
*!voteforce - starts vote to force (in-game)
*!voteexit - starts vote to exit game
*!votekick [&lt;filters&gt;] - starts vote to kick player
*!votemap [&lt;filters&gt;] - starts vote for given map
*!voterehost [&lt;filter&gt;] - starts vote to rehost the game
*!votepreset [&lt;presetname&gt;..] - starts a vote to apply the given preset
*!voteboss &lt;name&gt; - sets &lt;name&gt; as a new boss, use without parameter to remove any current boss. If there is a boss on server, other non-admin people have their rights reduced
*!votekickspec - starts a vote to enables or disable automatic spectator kicking
*!votesetoptions &lt;name&gt;=&lt;value&gt;[,&lt;name&gt;=&lt;value&gt;] - starts a vote to apply the given option(s)
*!vote &lt;number&gt; - casts your vote (you must say it in battle window)
*!endvote - ends current poll

'''BATTLE LOCKING'''
*!lock - locks battle
*!unlock - unlocks battle
*!autolock [&lt;players&gt;] - sets desired number of players in game. If this number is reached, Springie will lock the server, and if someone leaves, it will unlock it again. !autolock without parameter disables auto locking.

'''PRESETS'''
*!listpresets [&lt;presetname&gt;..] - lists all the known presets (with name filtering)
*!presetdetails [&lt;presetname&gt;..] - shows the details of the given preset
*!preset [&lt;presetname&gt;..] - applies the given preset to current battle

'''BOXES'''
*!addbox &lt;left&gt; &lt;top&gt; &lt;width&gt; &lt;height&gt; [&lt;number&gt;] - adds a new box rectangle
*!clearbox [&lt;number&gt;] - removes a box (or removes all boxes if no number is specified)
*!split &lt;&quot;h&quot;/&quot;v&quot;&gt; &lt;percent&gt; - makes 2 boxes in h or v direction
*!corners &lt;&quot;a&quot;/&quot;b&quot;&gt; &lt;percent&gt; - makes 4 corners, a/b determines ordering

'''MAPS'''
*!listmaps [&lt;filters&gt;] - lists maps (can apply filtering)
*!map &lt;filters&gt; - changes map, and prints the new maplink in the battle
*!maplink - looks for map links on unknown files 
*!dlmap &lt;mapname/dllid/url&gt; - downloads map to server. You can either specify map name or map id (from unknown files) or map URL

'''MODS'''
*!listmods [&lt;filters&gt;] - lists mods (can apply filtering)
*!modlink - looks for mod links on unknown files 
*!dlmod &lt;modname/dllid/url&gt; - downloads mod to server. You can either specify mod name or mod id (from unknown files) or mod URL
*!rehost [&lt;filter&gt;] - rehosts game (optionally with new mod)
*!listoptions - lists all mod options
*!setoptions &lt;name&gt;=&lt;value&gt;[,&lt;name&gt;=&lt;value&gt;] - applies mod/map options

'''ADMINISTERING''' 
*!admins - list privileged users
*!boss &lt;name&gt; - sets &lt;name&gt; as a new boss, use without parameter to remove any current boss. If there is a boss on server, other non-admin people have their rights reduced.
*!kick &lt;filters&gt; - kicks specified players from server (both game and lobby)
*!setlevel &lt;username&gt; &lt;level&gt; - sets rights level for given player 
*!ban &lt;username&gt; [&lt;duration&gt;] [&lt;reason&gt;...] - bans user username for duration (in minutes) with given reason. Duration 0 = ban for 1000 years
*!unban &lt;username&gt; - unbans user
*!listbans - lists currently banned users
*!reload - reloads mod and map list
*!kickspec [0|1] - enables or disables automatic spectator kicking
*!mincpuspeed &lt;GHz&gt; - sets minimum CPU for this host - players with CPU speed below this value are auto-kicked, 0 = no limit
*!setpassword &lt;newpassword&gt; - sets server password (needs !rehost to apply)
*!setminrank &lt;minrank&gt; - sets server minimum rank (needs !rehost to apply)
*!setmaxplayers &lt;maxplayers&gt; - sets server size (needs !rehost to apply)
*!setgametitle &lt;new title&gt; - sets server game title (needs !rehost to apply)
*!springie - displays basic springie information
*!cheats - enables/disables .cheats in game

'''STATISTICS'''
*!stats - lists various stats
*!smurfs - lists smurfs

==Links==
*[http://spring.clan-sy.com/phpbb/viewtopic.php?t=7921 Springie Topic]

[[Category: Autohosts]]</text>
      <sha1>t2jp43c0yhli3d373n48mlcb8wxuj1r</sha1>
    </revision>
  </page>
  <page>
    <title>How to be good at 1v1</title>
    <ns>0</ns>
    <id>1813</id>
    <revision>
      <id>19070</id>
      <parentid>15587</parentid>
      <timestamp>2010-03-13T18:40:18Z</timestamp>
      <contributor>
        <username>Koshi</username>
        <id>2371</id>
      </contributor>
      <comment>fix category</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6812">== Intro==
I thought i'd try and throw down in text all the thoughts in my head and how I think when playing high level games. But i'm afraid after writing this it comes out as tiny patches only scratching the surface of various areas.

Please dont take this as a comprehensive guide, as Meta-gaming is something you have to really learn yourself, as I echo a few times through this


== Opening Quote ==

''Post by Swiftspear pretty much summing up how you move from being a good player to an elite player''
&lt;blockquote&gt;
I'll put up any boxer who has gone through a proper training routine against any boxer who just fights with people constantly. The boxer with the training routine will always win. If you want to be the best you have to train, not just crunch hourage. You will take WAY longer to intellectualize the game if you just play and don't study it. The best player is the best player because their reflexes are honed, they know exactly what happens in every situation, and they know what their opponent knows so they can counter him. Ability to play a game at the high level breaks down into 3 areas: Mastery of the interface, mastery of the numbers, and mastery of the mind game. If your game plan for improving is &quot;Play the game alot&quot; you only really improve your mastery of the interface, and even then you will likely be worse at that then someone who has improved all three area's at once through proper training because you're relying on accidentally discovering the optimums rather then knowing the optimums because you have crunched the numbers and developed the theory.
&lt;/blockquote&gt;
*&lt;blockquote&gt;
If you want to be the best at the game, you study replays, analyze in depth what was done right, what was done wrong, analyze where you are spending your time and what you are letting slip, then take the knowledge gained and replay and get new replays. Also test out units, see which units can shoot over DT and which can not, which units can crush which corpses and which can not, which units can get through which bottlenecks and how easily, if you know the game theoretically you don't have to make the mistakes the first time to learn from them. Finally study your opponents and learn what makes them tick. Know what an opponent is most likely to do just for statistical convenience, figure out a counter. Know your opponents strengths and weaknesses, know the counter to every counter and the counter to every counter counter in and out and know exactly what if you do you are weak to, and how you can minimalize the risk.
&lt;/blockquote&gt;
&lt;blockquote&gt;
Ask any great chess player how they learned to play the game, weather it was more beneficial to them to talk with other players about the strategy of the game and read over the theory books, or weather it was more beneficial to them to just play the game over and over and over, they have all done both. While it's objective, you need to play to win, that doesn't mean you will win if all you ever to is play alot. Being the best is alot of boring work as well as the fun of playing.&lt;/blockquote&gt;




The first step to being an elite player is you have to want to be a good player, I dont mean &quot;I wouldnt mind being a elite player&quot;, you have to be willing to learn everything it takes.

Being a top player isnt something you can be instructed on, you become an elite player when you can train yourself. Luckily, you can be taught to train yourself.


== Reading Material ==

http://www.sirlin.net/Features/feature_PlayToWinPart1.htm
Playing to win, this is the bible of playing competetively, breaking the barriers in yourself described in the article you are already double the player you were before.


'''The Art of War'''
http://www.chinapage.com/sunzi-e.html

Though I highly reccomend the whole thing, the part most pertaining to playing TA is the chapter 'Tactical Dispositions'

'' 7. The general who is skilled in defense hides in the
    most secret recesses of the earth; he who is skilled in
    attack flashes forth from the topmost heights of heaven. 
    Thus on the one hand we have ability to protect ourselves;
    on the other, a victory that is complete.''




==Getting started==

First you need to watch people better than you do what you want to do, watch their tactics, their build orders, their micro.

Analyze their moves, find why they are being used instead of other ones, think of ways they could be changed to be more powerful. Assess the impacts of every move on every level. 
''How much metal is this tactic costing compared to how much damage it is doing?''
''How much concentration does this need?''
''How much micromanagement?''
''How much micromanagement and concentration does it leech from the enemy?''
''Does it make the opponent act irrationally?''

I cannot teach you all the questions because being an elite player means being able to teach yourself the questions.

Being able to watch how a tactic went wrong in a replay is a thousand times easier than to predict how a tactic will go wrong when you are playing in real time.

Now you have to do the tricky part, lose alot of games. The biggest way to stall in climbing the mountain of being a great player is to be afraid of losing. Dont forget this, because the higher you get the worse the fear can become.

Every game you lose, find out what beat you, then work back. 
20 Instigators leveled my base and destroyed my commander
*How did they slip through
*How did my opponent stop this happening to him
*How did my opponent get the metal to do this
*How did my opponent know where to strike




== Know Thy Enemy ==
Keep a profile in your head of every player, check the 'Recent games' as often as you can on the ladder site, see the outcome of the tournaments. Watch every game of every player worth watching.

Know your opponents to the point you can be half way through a game and know exactly what they are doing. Until you know what every radar blip they are sending at you is gonna be.
Every player has a style, every player weighs risk versus reward differently

Skill as a player is not only knowing your opponents, but not allowing them to know you

== Summing up in nice dot points ==

*Dont use a tactic because it is what someone better than you does, use it because you know why they use it.

*Tactics have to be used with the intent of winning the game. Dont tech unless the tactical options for winning on the current tech level are exhausted.

*Hold yourself responsible. No tactic is lame. It doesn't matter if your teammates are noobs. The only way to improve yourself is to find what you did wrong.

*Keep your cool. Look at everything objectively. Don't let yourself change tactics from &quot;Seeking to win&quot; to &quot;Prolonging Defeat&quot;.

''' [[Strategy_and_Tactics|&lt;- Back to Strategy and Tactics page]]'''
[[Category: Strategy]]</text>
      <sha1>jib1koipwpx8y0at2xlibsjcx67zz7s</sha1>
    </revision>
  </page>
  <page>
    <title>IRC</title>
    <ns>0</ns>
    <id>3637</id>
    <revision>
      <id>30714</id>
      <parentid>28640</parentid>
      <timestamp>2018-08-05T16:04:18Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1172">=Connect=
Join either IRC chat in &lt;code&gt;#taspring&lt;/code&gt; on Freenode or &lt;code&gt;#sy&lt;/code&gt; on QuakeNet, or ask for help in the lobby channels &lt;code&gt;#sy&lt;/code&gt; or &lt;code&gt;#springlobby&lt;/code&gt;. These Channels are connected to #sy on the lobby server.
Also an [[IrcBridge]] exists to directly connect to the lobby server with an IRC-client, but this required a lobby account.

== How to get help on IRC ==

[http://workaround.org/getting-help-on-irc Getting Help on IRC]

Okay, so you need human help. This is how '''NOT''' to do it:

&lt;code&gt;&lt;pre&gt;
15:54 -!- **** [n=****@*] has joined #taspring
15:54 &lt; ****&gt; Hi, i have a problem with compiling spring on debian
15:54 &lt; ****&gt; can anyone help me?
15:57 -!- **** [n=****@*] has quit [Client Quit]
&lt;/pre&gt;&lt;/code&gt;

Do not ask to ask, instead go straight to business by stating the exact problem you have, and giving all necessary information. What you were trying to achieve, how did you try to do it, what happened and what did you expect to happen.

Then WAIT for someone to notice you.

== Where ==

* #sy @ QuakeNet
* #sy @ springrts.com (with a Spring lobby client only, f.e SpringLobby)
* #taspring @ FreeNode

[[Category: Lobby]]</text>
      <sha1>g7nrluig6g0s4d01d8cdd60lkgivnrz</sha1>
    </revision>
  </page>
  <page>
    <title>IceXuick Map Design Help</title>
    <ns>0</ns>
    <id>3658</id>
    <redirect title="Tutorial:MapDesignHelp(IceXuick)" />
    <revision>
      <id>28900</id>
      <timestamp>2014-10-18T20:35:44Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>Flozi moved page [[IceXuick Map Design Help]] to [[Tutorial:MapDesignHelp(IceXuick)]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="46">#REDIRECT [[Tutorial:MapDesignHelp(IceXuick)]]</text>
      <sha1>3hnjilpedw2vkcf6u43jfge1ysbekex</sha1>
    </revision>
  </page>
  <page>
    <title>Icontypes.lua</title>
    <ns>0</ns>
    <id>3059</id>
    <revision>
      <id>30824</id>
      <parentid>28754</parentid>
      <timestamp>2018-12-03T03:08:01Z</timestamp>
      <contributor>
        <username>Gajop</username>
        <id>2804</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2732">==Location==
&lt;code&gt;icontypes.lua&lt;/code&gt; is a file in the &lt;code&gt;Gamedata/&lt;/code&gt; directory of a Spring Game. 

==Purpose==
This file defines the icons used to represent units on the minimap and rendered in place of 3d geometry when zoomed out.

==Source==
The engine source code which parses the data from this file is viewable here:

* {{sourcelink|file=rts/Rendering/IconHandler.cpp}}

==Data Types==
{{DataTypes}}

==Details==

Game developers can set icons for different types of units, (such as land, air, sea), or go so far as to give every unit its own icon. The different types icons will be shown for friendly units, and enemy units within Line Of Sight. For enemy units in radar range Spring will use the 'default' icon.

===IconType Properties===
{{tag
|name = bitmap
|type = string
|default = &quot;&quot;
|description = The location of the custom icon image (not limited to bitmaps!). If it is missing or incorrect, Spring replaces it with the standard radar dot. The bitmap will get blended with the team color, so there is no special team color channel. In order to look nice, the image will need to have an alpha channel for transparency.}}

{{tag
|name = size
|type = float
|default = 1.0
|description = Acts as multiplier for the icon size. The larger the number, the larger the icon will be.}}

{{tag
|name = distance
|type = float
|default = 1.0
|description = Acts as a multiplier for the distance at which the unit will show up as an icon. The larger the number, the further away the camera has to be from the unit for it to turn into an icon.}}

{{tag
|name = radiusAdjust
|type = bool
|default = false
|description = Whether or not the icon should scale with the unit radius.}}

===Assigning IconTypes===
To assign units to a specific icon type, set the {{xtaglink|Gamedev:UnitDefs|iconType}} attribute of their UnitDef to the type name set in &lt;code&gt;icontypes.lua&lt;/code&gt; (see [[#Example]])

&lt;pre&gt;
...
iconType = &quot;circle&quot;,
...
&lt;/pre&gt;

If the {{xtaglink|Gamedev:UnitDefs|iconType}} tag is missing, Spring sets it to the &quot;default&quot; icontype. If the &quot;default&quot; type is not specified, Spring will create it with the default values. Furthermore, enemy units that are within radar range, but not in your Line Of Sight, will be shown as the default icon. Thus if there is a bitmap specified for the &quot;default&quot; icon type it will override the standard radar blip.

==Example==
&lt;pre&gt;
local iconTypes = {
  default = {
    size = 1,
    radiusadjust = true,
  },
  flag = {
    bitmap = &quot;icons/flag.png&quot;,
    size = 6,
    radiusadjust = true,
    distance = 100,
  },
  circle = {
    bitmap = &quot;icons/circle.png&quot;,
    size = 4,
    radiusadjust = true,
    distance = 100,
  },
  ...
}

return iconTypes
&lt;/pre&gt;

[[Category:Gamedata]]</text>
      <sha1>jd3987gyftvpteemzcidulwhwnkul5y</sha1>
    </revision>
  </page>
  <page>
    <title>Ideas on stuff</title>
    <ns>0</ns>
    <id>3141</id>
    <redirect title="CollectionOfStuff" />
    <revision>
      <id>22726</id>
      <timestamp>2011-08-29T19:45:58Z</timestamp>
      <contributor>
        <username>Knorke</username>
        <id>833</id>
      </contributor>
      <comment>moved [[Ideas on stuff]] to [[CollectionOfStuff]]: it is a better name and i want to test if moving pages works</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="31">#REDIRECT [[CollectionOfStuff]]</text>
      <sha1>0jn1fsc9okr1ekp6viiuznblwsh007c</sha1>
    </revision>
  </page>
  <page>
    <title>IdiotsGuide</title>
    <ns>0</ns>
    <id>2499</id>
    <redirect title="FAQ" />
    <revision>
      <id>18986</id>
      <parentid>14466</parentid>
      <timestamp>2010-03-13T17:48:00Z</timestamp>
      <contributor>
        <username>Koshi</username>
        <id>2371</id>
      </contributor>
      <comment>useless content, redirect to faq instead</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="17">#REDIRECT [[FAQ]]</text>
      <sha1>1chp1kpwmmzd1pt3pqxuc4un6hc56dq</sha1>
    </revision>
  </page>
  <page>
    <title>Infolog.txt</title>
    <ns>0</ns>
    <id>3147</id>
    <revision>
      <id>29497</id>
      <parentid>29496</parentid>
      <timestamp>2015-08-19T21:35:19Z</timestamp>
      <contributor>
        <username>Silentwings</username>
        <id>2883</id>
      </contributor>
      <minor/>
      <comment>/* incomplete or empty logfile? */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="696">log file for the spring rts engine

==windows==
Usually in MyDocuments\My Games\Spring\infolog.txt or next to spring.exe when installed in portable mode.

==linux==
can be found in ~/.config/spring/infolog.txt

=How to share it=
[http://paste.springfiles.com paste.springfiles.com] is a good site.

=incomplete or empty logfile?=
In some cases the file is sometimes [http://springrts.com/mantis/view.php?id=2796 incomplete or empty.]
To get a complete log you can try to direct stdout to a file:

'''On a Mac:''' &lt;code&gt;./spring &amp;&gt; infolog_full.txt&lt;/code&gt;

'''On Windows:''' &lt;code&gt;spring.exe &gt; infolog_full.txt&lt;/code&gt;

In [[springrc|settings]], set '''LogFlushLevel=0'''


[[Category:Development]]</text>
      <sha1>2pmkz5hqy9g0lwqdb39c6rmsyknayv5</sha1>
    </revision>
  </page>
  <page>
    <title>Infrastructure:Development</title>
    <ns>0</ns>
    <id>3705</id>
    <revision>
      <id>30674</id>
      <parentid>30673</parentid>
      <timestamp>2018-04-19T19:24:27Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1337">See [[Spring:Organization]] for responsibilities. For questions / problems please use the bug tracker or the forum and avoid pm's!

==Lobby Server==

[[uberserver]] is used as lobby server. also an [[IrcBridge]] exists. [[SpringLobby]] is the default lobby client. An ingame lobby client written in lua exists, too.

=Website=

==repo==
https://github.com/spring/spring-website

==Bug Tracker==
https://springrts.com/mantis/view_all_bug_page.php?project_id=8

=Download system=

[[pr-downloader]] is used as client for automaticly downloading files in [[SpringLobby]] and springweblobby. Also, a console client exists.
==repo==
https://github.com/spring/pr-downloader

==upq api==
http://api.springfiles.com/

==rapid==
[[Rapid]] is used for fast distribution of games from a git repository.

==engine integration==
It is planed to integrate it directly into the engine.
Current WIP state can be found at these two repositories:
https://github.com/gajop/pr-downloader

https://github.com/gajop/spring/tree/pr-downloader (pr-downloader branch)

=replay site=

http://replays.springrts.com/

==repo==
https://github.com/dansan/spring-replay-site/

=Continuous Delivery / Continuous Integration=

[[Buildbot]] and [https://travis-ci.org/spring/spring travis-ci] is used for automaticly building + testing spring.



[[Category:Development]]</text>
      <sha1>4dp4e75jqydy32y0tuxyf5mhp07nkzt</sha1>
    </revision>
  </page>
  <page>
    <title>Installing Visual C plus plus</title>
    <ns>0</ns>
    <id>1304</id>
    <revision>
      <id>23729</id>
      <parentid>12649</parentid>
      <timestamp>2012-03-02T19:04:53Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2644">{{deprecated}}

Ok getting the free Microsoft IDE to run is not the easiest task, if you donÃ‚Â´t know what your doing. If you do though its easy easy :D .
First of all your going to need quite a bit of free Hard drive memory, about 2 gigabytes. Roughly one Gigabyte needs to be free on your windows drive (usually C:).

What I say after this can basically be found on the microsoft page [http://msdn.microsoft.com/vstudio/express/visualc/usingpsdk/ here] with links included, so you might as well go there, and just check here if your having problems.
You first need to install the &quot;Visual Studio C++ 2005 Express edition&quot; . Long name ey? Anyway there are two ways to install: 
#The [http://go.microsoft.com/fwlink/?LinkId=51410&amp;clcid=0x409 online installation], where you download a small installer, which then downloads the files as you install. I advise against this, as it was always moaning about not having this or that windows update. I do run on a Windows 2000 Machine though, so maybe its no problem with XP.
# Anyway the other (in my opinion: better) way is to download the [http://go.microsoft.com/fwlink/?linkid=54766 Image file] (.img), extract this with an image reader (you can get one free, just google for it). Than all you need to do is run setup/install, and presto ! You donÃ‚Â´t need to install the frills by the way (the Visual Studio Library or the SQL something).

Okay, that was step one.
Now you need to install the &quot;Windows Platform SDK (Software Developer Kit)&quot;.
Again there are two ways of installation, same as before. This time though IÃ‚Â´d advise using the [http://www.microsoft.com/downloads/info.aspx?na=46&amp;p=3&amp;SrcDisplayLang=en&amp;SrcCategoryId=&amp;SrcFamilyId=A55B6B43-E24F-4EA3-A93E-40C0EC4F68E5&amp;u=http%3a%2f%2fdownload.microsoft.com%2fdownload%2fa%2f5%2ff%2fa5f0d781-e201-4ab6-8c6a-9bb4efed1e1a%2fPSDK-x86.exe&amp;oRef=http%3a%2f%2fmsdn.microsoft.com%2fvstudio%2fexpress%2fvisualc%2fusingpsdk%2f online installer], as the [http://www.microsoft.com/downloads/details.aspx?familyid=D8EECD75-1FC4-49E5-BC66-9DA2B03D9B92&amp;displaylang=en Image file] was broken (for me anyway).

OK if youÃ‚Â´ve got that done, your almost ready.
Next you need to follow the [http://msdn.microsoft.com/vstudio/express/visualc/usingpsdk/ instructions on the Windows page], manually changing some of the VS C++ 2005 Settings.

After that you need to install the vclibs package and (if you want to compile the source, and not only AIÃ‚Â´s) the directx SDK.
Also, the VC8 Project file isn't updated as much as the source code changes, so you might have to look through the SVN log and manually tell it about files added since the last update.</text>
      <sha1>r33wc6l6jihli9em31y2eepqnzpa77r</sha1>
    </revision>
  </page>
  <page>
    <title>Invqueuekey</title>
    <ns>0</ns>
    <id>2770</id>
    <revision>
      <id>26640</id>
      <parentid>26546</parentid>
      <timestamp>2013-03-20T14:03:24Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>recat</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1973">This setting, inverts the behaviour of the shift key ingame.


= Setting it up =

You must bind a key to the command &quot;invqueuekey&quot;, and press it one time, once ingame.

This will toggle the value of the configuration, and save it somewhere, so you dont need to press it again (unless what to revert shift key bhaviour).


== Adding the key to uikeys.txt ==

Just add:

bind              Any+y  invqueuekey

to your uikeys.txt file.

this example uses the y key for the binding, you can use whichever you like/is free.


= Using it ingame =


Press the toggle key once.

From now on, any build order you issue, will be added to the queue, as if shift were being pressed.

To issue &quot;direct&quot;, &quot;inmediate&quot; orders, like for example, Dgun order, or to cancell a queue, hold down Shiftkey and issue the order. this will erase the queue and execute the order inmediatly.


== The Pros ==

Statistically, you hold/press shiftkey many times in a game.

This setting will decrease the wearing of the key.

Easier queubuilding.

No camera speedup/speeddown when adding things to the queue.

If you pick an &quot;unbuildable&quot; spot, the requested building is not canceled, it just stays selected for placing.

more?

== The Cons ==

At times, for exmple when dgunning, it &quot;feels&quot; less responsive. Not sure if this is true.

Lua programmers not always take into account this modifier, so it has odd behaviour on some widgets.

= Additional notes for LUA programmers =

Special care must be taken to make widgets compatible with this feature.

Examples of compatible widgets, that work with this setting, are found in [http://springrts.com/phpbb/viewtopic.php?f=23&amp;t=18997 Central Build Ai Widget],
or latelly [http://springrts.com/phpbb/viewtopic.php?f=23&amp;t=18523 Custom formations widget].


Examples of not compatible widgets are LolUI.
Some other UIs.

More specific information about how to make lua work with this setting are appreciated, so add or link them from here.

[[Category:Help]]</text>
      <sha1>kf72mmbce6eaj2t77aaw2xnea5t7yny</sha1>
    </revision>
  </page>
  <page>
    <title>IrcBridge</title>
    <ns>0</ns>
    <id>2824</id>
    <revision>
      <id>31011</id>
      <parentid>31010</parentid>
      <timestamp>2019-03-26T20:33:00Z</timestamp>
      <contributor>
        <username>Bibim</username>
        <id>2690</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8585">&lt;span style=&quot;font-weight:bold; font-size:large;&quot;&gt;IRC bridge for Spring lobby&lt;/span&gt;
----
==What is it and how does it work ?==

This Spring IRC bridge is a Perl program that translates IRC commands into Spring lobby commands. It acts like a proxy for your lobby connection, allowing you to use a standard IRC client to connect to Spring lobby server. However, don't expect to mask your IP address and be anonymous this way, as the client IP is still forwarded to Spring lobby server by the IRC bridge as &quot;local&quot; IP in Spring lobby protocol.

==How to use it ?==

Configure your IRC client as follows:
* server: irc.springrts.com
* port: 6667 (or 16667)
* nickname: login of a valid Spring lobby account (not connected to Spring lobby server currently)
* password: password of the Spring lobby account

Then you can use the bridge like any other IRC server (list channels, join channels, send private messages...).

'''''Note:''''' When creating a new lobby account to be used over IRC, you first have to login with it on the lobby, at least once.

==How to get the full player list ? How to know who is online ?==

Usually, in Spring lobby clients, there is a &quot;local&quot; tab which contains all online players so that you know who is online. You can have the same behavior with IRC bridge by joining the special &quot;&amp;local&quot; channel. This channel is actually a fake channel which contains all online clients.

Also, if you try to send a private message to a client who isn't online, you will be warned by the IRC bridge that no one received your message (like with normal IRC servers).

==Can I join battles ?==

Yes, the Spring IRC bridge handles battles as special channels. These battle channels are prefixed by '&amp;' instead of '#', and they are named according to their battle ID (numbers used internally by Spring lobby servers and clients).

Here are some ways to join battles easily using IRC bridge:
* you can use the IRC command &quot;LIST&quot; to list all channels. The battles will appear in this list, with various colored information as topic (status, number of players/specs, modname, mapname, description etc.)
* you can use the &amp;&lt;playerName&gt; alias to refer to the battle in which &lt;playerName&gt; is. For example, sending the IRC command &quot;JOIN &amp;joe&quot; will join the battle in which player &quot;joe&quot; is currently
* you can use the IRC command &quot;WHOIS&quot; on a player to check in which battle he is

When you join a battle, you will appear as an unsynced spectator. That way, players know you don't want to play and you won't be able to join the game when it starts.

==What do IRC user prefixes &quot;!.@%+&quot; mean in Spring world ?==

In IRC world, channel user modes are used to indicate characteristics of users in a channel. These user modes are shown as nickname prefixes in user lists.
Here are the nickname prefixes used by Spring IRC bridge and the corresponding user modes:

For standard channels:
: &lt;span style=&quot;font-family:courier&quot;&gt;! &lt;/span&gt;Admin bot
: &lt;span style=&quot;font-family:courier&quot;&gt;@ &lt;/span&gt;Operator/admin
: &lt;span style=&quot;font-family:courier&quot;&gt;% &lt;/span&gt;Bot
: &lt;span style=&quot;font-family:courier&quot;&gt;+ &lt;/span&gt;In-game user

For battles:
: &lt;span style=&quot;font-family:courier&quot;&gt;! &lt;/span&gt;Admin bot
: &lt;span style=&quot;font-family:courier&quot;&gt;. &lt;/span&gt;Host
: &lt;span style=&quot;font-family:courier&quot;&gt;@ &lt;/span&gt;Operator/admin
: &lt;span style=&quot;font-family:courier&quot;&gt;% &lt;/span&gt;Bot
: &lt;span style=&quot;font-family:courier&quot;&gt;+ &lt;/span&gt;Player (non-spectator)

==What do IRC masks mean in Spring world ?==

In IRC world, user masks are used to identify clients.
Standard format is &quot;&lt;nick&gt;!&lt;ident&gt;@&lt;host&gt;&quot;, where &lt;nick&gt; is the nickname of the client (as seen on screen during chat), &lt;ident&gt; is the username (as provided by the client), and &lt;host&gt; is the actual hostname or IP address of the client.

When using Spring IRC bridge, &lt;ident&gt; is replaced by &lt;countryCode&gt; which is the country code on 2 letters. And &lt;host&gt; is replaced by &quot;&lt;accountId&gt;.taspringmaster.clan-sy.com&quot;, where &lt;accountId&gt; is the account identifier (which doesn't change when users renames).

That way, IRC client functionalities which rely on IRC user masks (ignore, highlights etc.) still work reliably.

==How to get more Spring-specific information about users ? (ranks, status etc.)==

You can use the standard IRC command &quot;WHOIS&quot; to get detailed information about any user.
The rank, in-game status, and current battle if any are shown.

==How to send raw commands to Spring lobby server ?==

If you try to send raw commands directly with your IRC client, the raw command will be interpreted by the IRC bridge itself and won't be forwarded to Spring lobby server.
To send raw commands to Spring lobby server through IRC bridge, you have to join the special channel &quot;&amp;local&quot; and simply say the command as a chat message here. The &quot;&amp;local&quot; channel is just a fake channel, and no one will see what is entered here. Messages are simply forwarded to Spring lobby server without any modification.

==How to filter annoying user mode changes ?==

In standard channels, the +v/-v user mode changes corresponding to in-game/out-of-game Spring status changes can be annoying because there can be a lot of them at the same time, and they may generate messages at client side. Usually you can filter these messages in your IRC client. But you can also choose to filter them at IRC bridge level, by disabling your &quot;s&quot; (STATUS_CHANGES) user flag. To do so you can send the following standard IRC command: &quot;MODE &lt;nickname&gt; -s&quot; (user modes are persistent at IRC bridge level, so you don't have to send it every time you reconnect).

==Can I use CTCP (Client-To-Client Protocol) IRC extension ?==

Yes, the IRC bridge supports the CTCP IRC protocol extension. CTCP VERSION is supported even when interacting with standard Spring lobby clients, whereas other CTCP commands (DCC CHAT, DCC SEND ...) only work with other IRC bridge users.

==How to avoid timeouts between your client and the IRC bridge ?==

If you have connection issues, you can try to tune the IRC bridge timeout. Default value is 120 seconds, which should fit most connections (maximum value is 600 and minimum value is 20). If you use a big value as IRC timeout, you will be able to stay connected even if your Internet connection is down for a long time. However the IRC bridge will take more time to detect that your connection is down, so you could appear online on Spring lobby server whereas your connection is down. You can change your IRC timeout value by changing your &quot;t&quot; (TIMEOUT_IRC) user flag. To do so you can send the following standard IRC command: &quot;MODE &lt;nickname&gt; t &lt;timeout&gt;&quot; (user modes are persistent at IRC bridge level, so you don't have to send it every time you reconnect). Note that increasing the IRC timeout value won't help if your IP address changes after each disconnection.

==How to avoid timeouts between IRC bridge and Spring lobby server ?==

If Spring lobby server takes too much time to answer, IRC bridge will consider the connection as down. The default timeout is 60 seconds, which should be ok most of the time (maximum value is 600 and minimum value is 20). However, sometimes Spring lobby server is overloaded so it takes very long to answer to all Spring clients but connections are still active. You can increase the lobby timeout if you want to stay connected in this case. On the other hand, the IRC bridge will take more time to detect that Spring lobby server is down, so you could think you are still connected whereas lobby server is down. You can change your lobby timeout value by changing your &quot;T&quot; (TIMEOUT_LOBBY) user flag. To do so you can send the following standard IRC command: &quot;MODE &lt;nickname&gt; T &lt;timeout&gt;&quot; (user modes are persistent at IRC bridge level, so you don't have to send it every time you reconnect).

==I have problems using the bridge, can I see the network messages exchanged in real time to investigate myself?==

Sure, you can join the special channels &quot;&amp;debug&quot;, &quot;&amp;debug_lobby&quot; and &quot;&amp;debug_irc&quot;. These fake channels allow any IRC bridge user to check the messages exchanged between his IRC client, the IRC bridge and the lobby server (for his connection only of course).

* &amp;debug_lobby contains all network messages exchanged between the Spring lobby server and the IRC bridge
* &amp;debug_irc contains all network messages exchanged between the IRC bridge and the IRC client
* &amp;debug contains the same as &amp;debug_lobby and &amp;debug_irc gathered in one channel

==Is the source code available? What is the license?==

The IRC bridge source code is available [https://github.com/Yaribz/SpringIrcBridge here] under GPL v3 license.

[[Category: Lobby]]</text>
      <sha1>rylivwq95lelqxpzbapp7gyyf4c6sy0</sha1>
    </revision>
  </page>
  <page>
    <title>KAI</title>
    <ns>0</ns>
    <id>1225</id>
    <revision>
      <id>11052</id>
      <parentid>7406</parentid>
      <timestamp>2007-01-30T10:39:17Z</timestamp>
      <contributor>
        <username>Tobi</username>
        <id>172</id>
      </contributor>
      <comment>mention kloot took over development</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2701">{{AI|KAI|Krogothe|Version 0.11|Supports most mods|Under Active Development|Closed Source}}

KAI is an AI originally being developed by [[User:krogothe|krogothe]]. The latest version by Krogothe is currently version 0.11 and was up to a challenging standard of play. Kloot has now taken over development of KAI, and released KAI version 0.12, which has been included with Spring 0.74b3.

It has several limitations such as frequent crashes, but it still manages to produce a decent challenge in groups of three or more due to its relentless attacking and decent economy. For best results play in a flat, large map with specific mex spots..

There are many goals Krogoth is pursuing with KAI. These mirror the goals of other AI developers in many ways - universal mod compatibility, for example - with a few twists that other AI authors are not currently pursuing, such as real objective-based use of its units. 

Let's say Human has relatively weak air defence but ironclad antitank defence. KAI will start building a group of bombers while putting a mission together to take the anti-air out - its attack force, balanced against the defenses there will target the anti air as highest priority and if successful will bomb the base. Turn the tables on this scenario and KAI will start building heavy tanks while planning how to eradicate the weaker antitank defence. (Objectives have not been implemented yet, although KAI will try to balance its units against the enemy forces in the test build, and even against the terrain.)

While the AI is in an early stage, there are many developments which give a hint of the immense promise KAI has. The most impressive, yet one of the simpler, is KAI's ability to think in chokepoints. According to Krogothe, this took five to ten minutes 'under the current framework', so whatever the framework is, it is certainly impressive.

KAI is closed source, although Krogothe has released a few AI utilities for other developers to use, the most notable of which is his Metal Class, used in one form or another by almost all AI developers.

KAI does show great promise in testing, and v0.11 is a worthy opponent even with the relatively high probability of crashes. It should be noted that KAI's prowess is largely down to maphack functionality; the AI will always know where your units and structures are, and does not need to scout like a human does. KAI was always planned to have this trait.

=== Info ===
*Status : Early test build (v0.11)
*Compatible mods : Most commonly played mods
*Playability : Challenging, crash-prone

=== Links ===
* [http://taspring.clan-sy.com/phpbb/viewtopic.php?t=5500 Forum Thread]

''' [[AIs|&lt;- Back to AI page]]'''
[[category:AI]]</text>
      <sha1>bylntv26ecoke24bh69w11paotztt0r</sha1>
    </revision>
  </page>
  <page>
    <title>Kernel Panic</title>
    <ns>0</ns>
    <id>2004</id>
    <revision>
      <id>31613</id>
      <parentid>31575</parentid>
      <timestamp>2021-07-13T23:20:58Z</timestamp>
      <contributor>
        <username>Zwzsg</username>
        <id>29</id>
      </contributor>
      <comment>Add Mod DB link (to installer)</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="19526">&lt;center&gt;[http://timblokdijk.nl/spring/Kernel%20Panic/logo/kernel0_hd.png https://springrts.com/mediawiki/images/f/fc/Kernel_Panic_Alpha_Title_Half.png]&lt;/center&gt;



==Overview:==

''For the latest news and/or assistance, try the [http://springrts.com/phpbb/viewforum.php?f=43'''KP forum'''] or go to #kp when you log onto the lobby.''


'''Kernel Panic''' is a game about computers. Systems, Hackers and Networks wage war in a matrix of DOOM! The only constraints are time and space; unlike other real time strategy games, no resource economy exists in KP. 

All units are free in this game, every factory built will be spamming units at all times. You can build more factories, but only on pre-defined areas (geothermal vents). All that remains is pure strategy and tactics. 

KP makes for a frantically fast-paced, action-oriented game, with a very unique graphical style.

----

==Download links:==

Current Version of Kernel Panic is 4.9

* &lt;u&gt;Newcomers:&lt;/u&gt;
** If you run '''Windows''' (2000,XP,Vista,7,8,10):
*** Here you can get a complete installer:
**** http://zwzsg.ddns.net/kp/installers/Kernel_Panic_4.9_Including_Spring_105.0_Installer39.exe
**** Mod DB mirror: https://www.moddb.com/games/kernel-panic/downloads/kernel-panic-49-installer-39
*** Use it to install both Spring and Kernel Panic in one go.
*** Then use the shortcuts created in your Start Menu or Desktop.
** If you run '''Linux''':
*** Get a Linux static build of the Spring engine from https://springrts.com/wiki/Download
*** Get and unzip that file: http://zwzsg.ddns.net/kp/zips/Kernel_Panic_4.9.zip
*** Unzip both in the same folder, so that Kernel_Panic_4.9_Launcher_Linux is next to spring executable
*** Run Kernel_Panic_4.9_Launcher_Linux
*** Alternatively, running spring directly would bring a greenish menu once ingame
*** For multiplayer or advanced options, run SpringLobby

* &lt;u&gt;Experienced Users:&lt;/u&gt;
** If you have already the Spring engine (or prefer to install it yourself): Here you can get a zip with the mod file, the maps, and a tiny executable for single player frontend. Unzip into your Spring root folder: http://zwzsg.ddns.net/kp/zips/Kernel_Panic_4.9.zip
** If you are certain you have all the maps and just need a quick link to the mod file itself: http://zwzsg.ddns.net/kp/mods/Kernel_Panic_4.9.sd7

----

==Media:==

===Youtube Videos:===

[http://youtube.com/watch?v=doF7owZ0blk&amp;fmt=18 http://i.ytimg.com/vi/doF7owZ0blk/default.jpg] 
[http://youtube.com/watch?v=Ug1c19yaZac http://i.ytimg.com/vi/Ug1c19yaZac/default.jpg] [http://youtube.com/watch?v=GAZQhRlt5bU http://i.ytimg.com/vi/GAZQhRlt5bU/default.jpg]
[http://www.youtube.com/watch?v=3q48ys5hFtI&amp;fmt=18 http://i.ytimg.com/vi/3q48ys5hFtI/default.jpg]

----
===Still shots:===

[http://tof.canardpc.com/view/076c8061-5505-44a1-96f4-1bb68e6b7ae5.jpg http://tof.canardpc.com/preview/076c8061-5505-44a1-96f4-1bb68e6b7ae5.jpg] [http://tof.canardpc.com/view/4e607ea7-c428-4ca3-8b70-b12cbf44c18c.jpg http://tof.canardpc.com/preview/4e607ea7-c428-4ca3-8b70-b12cbf44c18c.jpg] [http://tof.canardpc.com/view/23b958ce-d5c9-4b66-b3f9-684db81f9683.jpg http://tof.canardpc.com/preview/23b958ce-d5c9-4b66-b3f9-684db81f9683.jpg]

[http://tof.canardpc.com/view/44f4804f-ec99-40f9-a2e2-c3dc0b7617b8.jpg http://tof.canardpc.com/preview/44f4804f-ec99-40f9-a2e2-c3dc0b7617b8.jpg] [http://tof.canardpc.com/view/e5184baf-6c95-4c90-8469-b00a4f092054.jpg http://tof.canardpc.com/preview/e5184baf-6c95-4c90-8469-b00a4f092054.jpg] [http://tof.canardpc.com/view/cbe6dae0-a696-450a-bf22-236043d76511.jpg http://tof.canardpc.com/preview/cbe6dae0-a696-450a-bf22-236043d76511.jpg]

----

==License:==
Extracted from the &lt;code&gt;Kernel_Panic_readme.txt&lt;/code&gt; file:

&lt;pre&gt;
========--------------------------------------------
License:
--------
- The content of the /mods/Kernel*.sd7 is Public Domain, save:
  /LuaUI/Widgets/kp_buildbar.lua
  /LuaRules/Gadgets/autohold.lua
  /LuaRules/Gadgets/Burrow.lua
  /LuaRules/Gadgets/game_spawn.lua
  which are GPL, taken from http://www.caspring.org or http://springrts.com
- The maps Marble Madness and Direct Memory Access are Public Domain
- The maps Major Madness and Speed Balls 16 Way status are unknown
- The maps Central Hub, Corrupted Core, Dual Core, Quad Core were CC BY-NC-SA and are now CC-BY-SA
   https://springrts.com/phpbb/viewtopic.php?f=43&amp;t=21331&amp;p=401680#p397471
   https://springrts.com/phpbb/viewtopic.php?f=43&amp;t=27499&amp;start=6
- The Spring engine is GPL, available from http://spring.clan-sy.com
&lt;/pre&gt;


----

== Game Modes:==
By default the aim is to destroy the homebase and all the minifacs of all opposing teams.
&lt;br /&gt;&lt;br /&gt;
Other &quot;mod options&quot; available are:
* '''King Of The Hill :''' Keeps control of the map center for a given time to win.
* '''O.N.S. :''' Adds shields to buildings, preventing homebase rush.
* '''Save Our Mem :''' Unit leave &quot;leaks&quot; that must be reclaimed.
* '''Color Wars :''' Whoever controls the most territory when timer elapse wins.
* '''Heroes of Mainframe :''' You only control a very buffed up but single unit. Best used with &quot;Pre-placed Minifacs&quot;.
* '''Rebalancing formula :''' Let you change the stat of any units of weapons without the hassle of making a mutator. 
&lt;br /&gt;
For details, read [http://zwzsg.ddns.net/kp/Kernel_Panic_readme.txt &lt;code&gt;Kernel_Panic_readme.txt&lt;/code&gt;] or click [?] next to each mod option in your lobby.
----

==Units and Buildings:==

===System units:===

&lt;table&gt;&lt;td&gt;https://springrts.com/mediawiki/images/5/54/96x96Kernel.png&lt;/td&gt;&lt;td&gt;'''The Kernel:''' You start with one of these. It can build all mobile units in the game. Has rapid auto-heal and lots of health.&lt;/td&gt;&lt;/table&gt;

&lt;table&gt;&lt;td&gt;https://springrts.com/mediawiki/images/b/b2/96x96Socket.png&lt;/td&gt;&lt;td&gt;'''The Socket:''' The socket is a factory which can only be built on a geothermal vent. It can solely build bits, and slower than the kernel can. It autoheals, and has a decent amount of health.&lt;/td&gt;&lt;/table&gt;

&lt;table&gt;&lt;td&gt;https://springrts.com/mediawiki/images/8/8c/96x96Terminal.png&lt;/td&gt;&lt;td&gt;'''The Terminal:''' This is a new structure that gets placed on geovents. It can dispatch a nuclear bomber once every 90 seconds that will deal about 16000 damage to a large target area, i.e. it destroys everything except factories. It does much less damage to the kernel and hole. The bomber can strike any position on the map, there is no defense.&lt;/td&gt;&lt;/table&gt;

&lt;table&gt;&lt;td&gt;https://springrts.com/mediawiki/images/1/1e/96x96Assembler.png&lt;/td&gt;&lt;td&gt;'''The Assembler:''' The assembler is a construction unit. It can build sockets, but it cannot assist-build. Slow, little health. Equipped with a radar to detect mines and other cloacked units.&lt;/td&gt;&lt;/table&gt;

&lt;table&gt;&lt;td&gt;https://springrts.com/mediawiki/images/0/0a/96x96Bit.png&lt;/td&gt;&lt;td&gt;'''The Bit:''' Your basic attacking unit. Cheap, fast, small, not very much health. Is armed with a SPARCling laser. Can be built by a kernel or a socket.&lt;/td&gt;&lt;/table&gt;

&lt;table&gt;&lt;td&gt;https://springrts.com/mediawiki/images/e/e3/96x96Byte.png&lt;/td&gt;&lt;td&gt;'''The Byte:''' A large, strong, and slow attacking unit. Can holds it's own against many bits, as it has lots of health and a powerful gun. More armored when closed. Can plow through bad blocks. The byte has an alternate firing mode, the mine launcher, which throws 5 mines at the cost of much health.&lt;/td&gt;&lt;/table&gt;

&lt;table&gt;&lt;td&gt;https://springrts.com/mediawiki/images/5/51/96x96Pointer.png&lt;/td&gt;&lt;td&gt;'''The Pointer:''' An artillery unit. Its normal shot is not so useful against moving units, but can kill kernels and sockets pretty quickly. Is slow and has little health, so it needs protection. The pointer has an alternate firing mode, the NX Flag, which set a wide area ablaze for a minute, causing constant damage to all units, or buildings within it's range.&lt;/td&gt;&lt;/table&gt;

----

===Hacker units:===
&lt;table&gt;&lt;td&gt;https://springrts.com/mediawiki/images/7/7f/96x96NewHoleLow.png&lt;/td&gt;&lt;td&gt;'''Security Hole:''' The Hacker kernel equivalent.&lt;/td&gt;&lt;/table&gt;

&lt;table&gt;&lt;td&gt;https://springrts.com/mediawiki/images/7/70/96x96Window.png&lt;/td&gt;&lt;td&gt;'''Window:''' The Hacker socket equivalent.&lt;/td&gt;&lt;/table&gt;

&lt;table&gt;&lt;td&gt;https://springrts.com/mediawiki/images/f/fb/96x96Obelisk.png&lt;/td&gt;&lt;td&gt;'''Obelisk:''' This building is a stationary artillery weapon, it can fire an infection shot every 40 seconds (the obelisk has a pink fire on top when it's ready to shoot) that will cover a large area in poison. The poison does a bit of damage (about 1000) and turns any enemy that dies inside the cloud into a Virus. The weapon's range is fairly limited. Best used against stationnary herds of Bits/Bugs.&lt;/td&gt;&lt;/table&gt;

&lt;table&gt;&lt;td&gt;https://springrts.com/mediawiki/images/c/c5/96x96NewTrojan.png&lt;/td&gt;&lt;td&gt;'''Trojan:''' This unit is your constructor as well as radar platform (needed for detecting mines and cloaked units), just like the assembler. It builds all the same stuff as the assembler, except it has the window instead of the socket and the obelisk instead of the terminal.&lt;/td&gt;&lt;/table&gt;

&lt;table&gt;&lt;td&gt;https://springrts.com/mediawiki/images/9/94/96x96Virus.png&lt;/td&gt;&lt;td&gt;'''Virus:''' A crappy little swarm unit. It cannot be built but is produced when killing enemy units with certain weapons. Namely, the Virus, the Worm, and the Obelisk.&lt;/td&gt;&lt;/table&gt;

&lt;table&gt;&lt;td&gt;https://springrts.com/mediawiki/images/f/ff/96x96NewBug.png&lt;/td&gt;&lt;td&gt;'''Bug:''' The Hacker spam unit. The Bug is weaker than the Bit but can sense movement outside of its LOS. It has a stronger weapon and more range but cannot shoot at things behind it or through friendly units and won't take much damage before dying. The mine ability of the old bug has been removed. Instead it can now morph into the Exploit with the deploy button, or the bombard button.&lt;/td&gt;&lt;/table&gt;

&lt;table&gt;&lt;td&gt;https://springrts.com/mediawiki/images/c/c4/96x96Exploit.png&lt;/td&gt;&lt;td&gt;'''Exploit:''' This is the new name for the bug cannon. It's a building the Bug morphs into with the deploy or bombard command. The Exploit is a stationary artillery emplacement that does more damage the further the target is away. Even more frail than the Bug, so don't let any foe come near.&lt;/td&gt;&lt;/table&gt;

&lt;table&gt;&lt;td&gt;https://springrts.com/mediawiki/images/4/40/96x96NewWorm.png&lt;/td&gt;&lt;td&gt;'''Worm:''' The worm is a sneaky assassin, travelling cloacked, then surfacing only to kill many bits at once with its large area of effect weapon, which turn any slain units into virus. The worm large splash damage will damage your own units. However, it does practicaly no damage against other worms or virus. When cloacked, the worm does not automatically attack, you have to give attack orders manually. If you'd rather have your worms auto-attack even when cloacked, set autohold to off. The autohold setting of new worms is inherited from the Security Hole.&lt;/td&gt;&lt;/table&gt;

&lt;table&gt;&lt;td&gt;https://springrts.com/mediawiki/images/f/f4/96x96DoS.png&lt;/td&gt;&lt;td&gt;'''Denial of Service:''' Not an artillery, but close: fire a beam that stun units. For bigger targets it'll take longer to stun them so perform a DDoS (use multiple) to stun them fast. Once the DoS stops firing the target will quickly unfreeze. It moves faster than the pointer but causes a particle trail that can be seen from far away.&lt;/td&gt;&lt;/table&gt;

----

===Network units:===
The network faction is built around mobility, its small factories (Ports) don't produce units openly but instead increment a virtual counter (the Buffer). Packets in the Buffer can be materialized at any teleporter unit (currently that means the Port and the Connection), it's also possible to dematerialize the Packets back into the Buffer by making them enter a teleport.

&lt;table&gt;&lt;td&gt;https://springrts.com/mediawiki/images/7/76/96x96Carrier.png&lt;/td&gt;&lt;td&gt;'''Carrier:''' The base building, like a Kernel or Security Hole.&lt;/td&gt;&lt;/table&gt;

&lt;table&gt;&lt;td&gt;https://springrts.com/mediawiki/images/4/46/96x96Port.png&lt;/td&gt;&lt;td&gt;'''Port:''' The production building. It puts Packets into the Buffer, to materialize them select the Dispatch command. Dispatch will send 12 Packets if available, you can hold ALT when giving the order to make the Port dispatch until the Buffer is empty.&lt;/td&gt;&lt;/table&gt;

&lt;table&gt;&lt;td&gt;https://springrts.com/mediawiki/images/8/83/96x96Firewall.png&lt;/td&gt;&lt;td&gt;'''Firewall:''' This building can cover units (affects friendly units in a certain radius around the target location) in a protective shield for 20 seconds. The shield halves all damage the unit receives and throws the other half back at the attacker.&lt;/td&gt;&lt;/table&gt;

&lt;table&gt;&lt;td&gt;https://springrts.com/mediawiki/images/6/6c/96x96Gateway.png&lt;/td&gt;&lt;td&gt;'''Gateway:''' The constructor. It is lightly armed to help against enemy raids.&lt;/td&gt;&lt;/table&gt;

&lt;table&gt;&lt;td&gt;https://springrts.com/mediawiki/images/8/8b/96x96Packet.png&lt;/td&gt;&lt;td&gt;'''Packet:''' The basic light spam unit, it's weaker in combat than both competitors but much faster.&lt;/td&gt;&lt;/table&gt;

&lt;table&gt;&lt;td&gt;https://springrts.com/mediawiki/images/2/26/96x96Connection.png&lt;/td&gt;&lt;td&gt;'''Connection:''' Mostly a mobile teleporter (i.e. can dispatch Packets and let them enter like a Port). The Connection has decent armor and an arc beam that can do a lot of damage to single targets and has good range. It can defeat most large units one on one but engaging Bytes will probably result in pointer fire which the Connection cannot withstand and the arc beam is not optimal for engaging swarms.&lt;/td&gt;&lt;/table&gt;

&lt;table&gt;&lt;td&gt;https://springrts.com/mediawiki/images/0/01/96x96Flow.png&lt;/td&gt;&lt;td&gt;'''Flow:''' An air unit. The Flow moves fairly slowly but can of course cross any terrain. It's equipped to attack light targets (spam units and fire support) but it's highly vulnerable to return fire. If you want to use them in open combat give them a meatshield and hope the enemy doesn't field long range units, Pointers, DoSes and Connections make short work of Flows if they hit.&lt;/td&gt;&lt;/table&gt;


----

===All side Units:===

&lt;table&gt;&lt;td&gt;https://springrts.com/mediawiki/images/9/98/96x96BadBlock.png&lt;/td&gt;&lt;td&gt;'''The Bad Block:''' A tiny wall, built by Assembler/Trojan/Gateway. Blocks small units movement. Do not block shots however. Easily removed by the Debug or simply crushing them with a Byte or Connection.&lt;/td&gt;&lt;/table&gt;

&lt;table&gt;&lt;td&gt;https://springrts.com/mediawiki/images/a/a4/96x96Mine.png&lt;/td&gt;&lt;td&gt;'''The Logic Bomb:''' A mine that can be built by the Assembler/Trojan/Gateway. And also launched by Bytes. It takes out Bits &amp; Bugs in a single blow, has a decent damage radius, and doesn't chain explode. Use with care, as the blast hurts your own units too. Limited to 32.&lt;/td&gt;&lt;/table&gt;

&lt;table&gt;&lt;td&gt;https://springrts.com/mediawiki/images/3/35/96x96MineBlaster.png&lt;/td&gt;&lt;td&gt;'''The Debug:''' An easy way to clear an area of all mines and walls, this is a one shot weapon built by the Assembler/Trojan/Gateway.&lt;/td&gt;&lt;/table&gt;


----

==Playing Guide for System:==
&lt;!-- 

Attention all editors: Try and improve this playing guide to make less assumptions about the setup, and allow for team maps, larger maps, and generally teach more general strategy 

--&gt;

Playing Kernel Panic is fairly simple and quickly learned, but can be hard to master and can be very complex. It is recommended that beginners start with play the System faction, as they can be considered the least &quot;gimmicky&quot; of the factions.

&lt;!--

Maybe it might be a good idea to move this to after the next two paragraphs.

--&gt;
One rather effective general strategy for a duel on small maps is to send three to five bits to destroy your enemy's early game units, and, to a lesser degree, for scouting purposes. This is most effective if they started with construction units, as this will likely cripple their plans for an early expansion, and gives you a slight head start. After the initial attack, if your scouting shows that your enemy started with offensive units, build a byte for defense, and place it between your Kernel and the hill. After that, build an assembler and use it to build a socket on one the three closest building locations, which should automatically start producing bits. After this, you should order your assembler to build more sockets on free spots close to it. It is crucial that all sockets' rally points are below them, as bits turning inside a socket will stall production until it is able to exit the factory. It is sometimes wise to repeat the prior process with one or two other assemblers. After this is done, construct about ten bits from your factor, and set your kernel to alternate between building bytes and pointers.


&lt;!--

 A section on the uses of the faction's special units, and buildings (sigterm, pointer's fire, and byte's mine layer) could be useful, and these paragraphs might need modification.

Making them flow better, and more coherent will help.

--&gt;
What units you build at your kernel, and what you use them for, is an important factor in winning. As buildings can't be resumed, sending in groups of bits to kill construction units creating buildings can be very effective at stopping expansion attempts. Building too many pointers, will result in them being destroyed by connections, bits and especially worms, due to their stealth. Also, bytes are easily destroyer by and pointers, and exploits. A good general purpose ratio seems to be to queue one byte and one pointer, but this will need adapting as the game develops, and depending on the enemy's play style. 

Scouting is important too, as many enemies will leave their factories undefended, and knowing their build, and general unit use can help you in adapting the units you use to better fight them. Note that the Network can instantly spawn packets at any of their ports, or connections with their buffer system, meaning that all their factories should be considered defended. Single bits can be used to scout to find the enemy's current expansion attempts. 

When attacking a Byte or Connection with bits, it is important to overwhelm it with large numbers of bits. For bytes, try to exploit a byte's blind spot directly under it, by moving bits into that area. If your byte is under attack, moving it backwards to keep the attacking units in it's shooting arc can help repel the attack. It is not recommended to engage a worm with bits, as it's attack will convert your bits to viruses on the worm's owner's side.


&lt;!--

Might reposition this section. Feel free to add map specific paragraphs for other maps as well. In fact, this will be very helpful to newcomers, I bet.

--&gt;
On Marble Madness, there are two main ways paths to victory. The simplest one is to control the hill and use pointers stationed on the hill to destroy the enemy's factories, and kernel. Gaining control of the hilltop will likely not be without resistance, because it requires a decent amount of time for units to reach the top of the hill, meaning most units involved will be spam units from your factories on it, and the fact that it will likely be highly contended. However, if you control it, you have a large advantage over the enemy as you can shell your opponents home base with ease. The other way is around the hill, which can be very effective if you control terrain you can use pointers to great effect. In both strategies, using pointers is the crucial factor. While they are hard to use correctly, they are game-winners as they destroy home bases and enemy units with ease.

----

==Credits:==
- Original concept by Boirunner&lt;br&gt;
- About all the work done by KDR_11k&lt;br&gt;
- Sounds by Noruas&lt;br&gt;
- Maintenance by zwzsg&lt;br&gt;
- Maps by Boirunner, Runecrafter, zwzsg, and TradeMark&lt;br&gt;
- Some Lua interface upgrade based of jK and trepan code&lt;br&gt;

----
Back to [[Games]]
[[Category:Games]]</text>
      <sha1>1p5xbmqlsu1hlhn3l4c7p9zzrkg6b8i</sha1>
    </revision>
  </page>
  <page>
    <title>Kernel Panic King Help</title>
    <ns>0</ns>
    <id>2258</id>
    <revision>
      <id>18826</id>
      <parentid>12066</parentid>
      <timestamp>2010-03-13T14:04:42Z</timestamp>
      <contributor>
        <username>Koshi</username>
        <id>2371</id>
      </contributor>
      <comment>made historical</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="893">{{Historical}}
==King Setup==


Format below:


(Kings numbers in order of kingship, if he was 1st king, 4th king, and 8th king. Do not make a new section for the his fourth, instead change the first area for him. It will look like this: First Fourth, and Eighth King)

(New King (and or nickname too) and preferred date for his times)

Example:


SirKillsalot is King June 23 to July 1th. July 4th to July 17th. August 12th to August 13.




(The Witness or witnesses to verifying the new king) 

Example:


Camera Man, Pervert, Closet Monster




(The kings who were defeated) 

Example:


Cookie Monster, MegaByte, Bitster




(Who defeated this king) 

Example:


Captain Hack, Smoth, Tobi



(And the challengers if possible) 

Example:


Noruas, Sadman, Loserville



(Rank of King (This is based on the amount of challengers he defeats!)) 

Example:


Rank: Last place out of over 9000!</text>
      <sha1>kdo0jbdy29rocqi29hbvjius5u5qkhg</sha1>
    </revision>
  </page>
  <page>
    <title>Keyboard</title>
    <ns>0</ns>
    <id>3010</id>
    <revision>
      <id>29676</id>
      <parentid>29122</parentid>
      <timestamp>2015-10-23T08:10:47Z</timestamp>
      <contributor>
        <username>Silentwings</username>
        <id>2883</id>
      </contributor>
      <minor/>
      <comment>add link to source pos</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2994">Up to date list of engines default bindings: [https://github.com/spring/spring/blob/53f439d880e491520014aa0a7bd6ba20f9236d29/rts/Game/UI/KeyBindings.cpp#L39 source]

==Default Keyboard Layout in Spring==

Note: This page is currently incomplete and different games might use different keyboard configurations. But this page covers the basics which are broadly common to most Spring games.


{|
|-
!Mouse 1 &lt;small&gt;(left)&lt;/small&gt;
|Selecting units, selecting orders/buildings from the menu and also to give orders!
|-
!Mouse 2 &lt;small&gt;(right)&lt;/small&gt;
|Give the default order (move). Or change from a non-default order (e.g. attack, fight, guard) back to a move order without giving an order.
|-
!Scroll Wheel
|Zoom in/out
|-
!Mouse 3
|Pan camera (mouse 2 is normally pressing the scroll wheel)
|-
|-
!SHIFT
|Queue order. Press shift as you give the order, queue up as many as you like! Press Ctrl/Alt as well for building formations.
|-
![ and ]
|Rotate building (first select something to build and then rotate)
|-
!A
|Attack &lt;small&gt;(attack unit/ground)&lt;/small&gt;
|-
|-
!M
|Move
|-
!F
|Fight &lt;small&gt;(as move, but units will stop to kill enemies along the way)&lt;/small&gt;
|-
!G
|Guard
|-
!P
|Patrol. &lt;small&gt;(Moves back and forth between current position and patrol position)&lt;/small&gt;
|-
!S
|Stop &lt;small&gt;(cancels all orders)&lt;/small&gt;
|-
!E
|Reclaim &lt;small&gt;(Eat!)&lt;/small&gt;
|-
!R
|Repair
|-
!D
|D-Gun (or other manual fire weapon)
|-
!K
|Cloak on/off
|-
!CTRL + D
|Self Destruct
|-
!W
|Wait (or stop waiting)
|-
!CTRL + number (1-0)
|Assign using to group
|-
!number (1-0)
|Select unit group
|-
!Double Click
|Select all units of targetted type in view
|-
!CTRL + Z
|Select all units of selected type on map.
|-
!CTRL + A
|Select all units on map.
|-
!TAB
|Zooms out to see the whole map.
|-
!F1
|Shows heightmap
|-
!F2
|Shows areas where you can build (if the building what you want to build is selected)
|-
!F3
|Goes to the latest spot of action (also goes to the latest markers)
|-
!F4
|Shows metalmap
|-
!F5
|Hides User Interface
|-
!CTRL+F1/2/3/4
|Change camera mode
|-
!F6
|Turns sounds off (currently a bug causes sounds be on when zoomed in the spot where sound comes from (for example an explosion))
|-
!F11
|Show list of Widgets, use to enable/disable Widgets, press ESC to close it.
|-
|colspan=&quot;2&quot;| &lt;h4&gt;Multiplayer Communication&lt;/h4&gt;
|-
!ENTER
|Chat
|-
!ALT + ENTER
|Allied chat
|-
!SHIFT + ENTER
|Spectator chat
|-
!CTRL + ENTER
|Return to global chat
|-
!` + Mouse Button 1
|Draw on map.&lt;br&gt;&lt;small&gt;(On a UK/US keyboard ` is to the key left of 1. The same functionality is mapped to the \ key)&lt;/small&gt;
|-
!` + Mouse Button 2
|Erase markers and drawings
|-
!` + Mouse Button 3
|Place marker
|-
!` + Double Click
|Place marker with annotation
|}

Somewhat out-dated: [http://springrts.com/mediawiki/images/a/a5/KeyboardLayout.jpg Spring Keyboard Layout Image]

=== Changing bindings ===

[http://springrts.com/phpbb/viewtopic.php?f=11&amp;t=25043 This] forum thread might be helpful.

[[Category:Help]]</text>
      <sha1>f55nerktu4a7sz2m1c207hzmoilsx5o</sha1>
    </revision>
  </page>
  <page>
    <title>King of CS</title>
    <ns>0</ns>
    <id>1886</id>
    <revision>
      <id>18812</id>
      <parentid>11700</parentid>
      <timestamp>2010-03-13T13:54:13Z</timestamp>
      <contributor>
        <username>Koshi</username>
        <id>2371</id>
      </contributor>
      <comment>made historical</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="792">{{Historical}}
== Rules ==
-The King of Commander Shooter must accept challenges from anyone, or give them the title by default.

-Challenges must be 1v1

-Three matches are played. Best of 3 wins.

-The King chooses the map the challenge is made on.

-The king chooses who hosts. (Unless either is unable to host)

-Resources must be set at 1000.

-Speed must be locked at 1.0

-If both players start in the same spot, redo.

-If the challenge is overly laggy then the challenge is invalid.

-The Ex-ex-king (The king before the king who was beaten) names the new king.

== Kings ==
FuzionMonkey the Headshot Commander. As of November 20th, 2006.

Noruas the Newb Slaying Commander. As of November 23th, 2006.

== Current King ==
Noruas the Newb Slaying Commander. As of November 23th, 2006.</text>
      <sha1>qiwwski6dxedp0jlpbdiznpaqhpwbdg</sha1>
    </revision>
  </page>
  <page>
    <title>King of Kernel Panic</title>
    <ns>0</ns>
    <id>2257</id>
    <revision>
      <id>18846</id>
      <parentid>13834</parentid>
      <timestamp>2010-03-13T15:16:50Z</timestamp>
      <contributor>
        <username>Koshi</username>
        <id>2371</id>
      </contributor>
      <comment>made historical</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3528">{{Historical}}
This is a page in the works so do not complain, I have did very little to this page since it did not exist. In Kernel Panic, The king can decide if to have a tournament, where players play each other, and than the king for the championship. I do not know if you can challenge the king, as I am not in control of these rules. I would think you can challenge the king 1 vs 1 on any kernel panic map, such as marble madness.
''This page is for the kings list, and the rules which will soon be seen at the bottom.'''

First King is currently Noruas, this was done in the first tournament for Kernel Panic. the topic can be found for the first tournament is [http://spring.clan-sy.com/phpbb/viewtopic.php?t=10267&amp;postdays=0&amp;postorder=asc&amp;start=60 Here!].

How to Edit the or do kinglist is [[Kernel_Panic_King_Help_|Here!]]

== First King==

Lord King Collector Noruas is King since June 19, 2007

Witness to king: BoiRunner

Other Challenger: Hellcom/Relative

Defeated by:

Challenged by:

Rank of King: First Place

==Rules==

*The original Kernel Panic must be played, none of this hacker, or uh, worm stuff that looks really like the thing that gets no daylight. I mean thats just gross. This will be best preferred 1.0, we will argue about this later about this rule.

*You play to win, thats right, to win. Why bother the king when he will try to rape you, so try your best not to get rape, and if anything beat him.

*If agreed, a warm up round is always appropriate. Play up to 3 games on the same map you selected, and make sure you play all 3 hard. If you lose twice, you are automatically disqualified. 

*Do not bother the king on how to beat him or something about his strategies, watch a replay of the game you lose against him, and see what he does and then learn from that.

*The challenger must fight the king on his land(map of his choice) at a time when the king can be on and as well as the challenger. If the king and challenger agrees to meet on the battlefield at a certain time later during the day, or week, the king or challenger that did not attend the game will automatically lose!

*Remember, if the king disagrees with the time, and does not set a possible time within a week of the challenge for the battle to occur, then the king is to surrender. (This is to keep it fast paced and hard for kings to stay!)

*Sportsmanship is wanted, and will make people happy. Kings and challengers should not be blistering hate toward each other unless they are some sort of rivals that understand each other. (In other words, if you do not know them, do not be an ass)

*One Witness must be at the scene, and when the game is over, the witness's name must be mentioned!

*Pick a certified Kernel Panic map. If the map is worth adding to the list below, then add it!
Number 1:[http://www.unknown-files.net/spring/2326/Marble_Madness/ Marble Madness!].

Number 2:[http://unknown-files.net/spring/2871/Direct_Memory_Access_0.5c_beta/ Direct Access C!].

Number 3:[http://unknown-files.net/spring/2872/Direct_Memory_Access_0.5e_beta/ Direct Access E!].

Number 4:[http://unknown-files.net/spring/2770/KP-Water-Spout-V1.sd7/ Water Spout!].

Number 5:[http://unknown-files.net/spring/2819/KP-Chasm-V1.sd7/ Chasm!].

Number 6:[http://unknown-files.net/spring/2776/Major_Madness_3.0/ Major Madness three point O!].

Number 7:[http://unknown-files.net/spring/2830/Speed_Balls_Star_6_Way/ Speed Balls Star 6 Way!].

Number 8:[http://spring.unknown-files.net/file/2804/Speed_Balls_16_Way/Speed Balls 16 Way!].</text>
      <sha1>elofihvr0z5qxj59cwh3uhfqjv9y70a</sha1>
    </revision>
  </page>
  <page>
    <title>KnoX</title>
    <ns>0</ns>
    <id>1993</id>
    <revision>
      <id>18820</id>
      <parentid>11806</parentid>
      <timestamp>2010-03-13T14:00:18Z</timestamp>
      <contributor>
        <username>Koshi</username>
        <id>2371</id>
      </contributor>
      <comment>made historical</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="224">{{Historical}}
===The Knights of XTA===

KnoX maintains the popular OTA-derivative mod XTA.
Their website/forum can be found [http://knox.o-sg.net/forums/index.php?sid=28a4acd1868b6f3dbe7556647edcef1b here].

Back to [[XTA]]</text>
      <sha1>m5jeon15zzqg345dbpxbjvomwldpt6t</sha1>
    </revision>
  </page>
  <page>
    <title>KoH</title>
    <ns>0</ns>
    <id>1983</id>
    <revision>
      <id>18817</id>
      <parentid>11797</parentid>
      <timestamp>2010-03-13T13:58:33Z</timestamp>
      <contributor>
        <username>Koshi</username>
        <id>2371</id>
      </contributor>
      <comment>made historical</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="857">{{Historical}}
== King of hosting ==

Well somebody had to be it ;)


Curret king

T1_Deadeye_64      

here are the  highest &quot;!stats games&quot; and &quot;!springie&quot; stats (still rising)


                    --- STATS ---
                  == T1_Auto_server ==
T1_Auto_server (Springie 0.91a4) running for 2.17:36:51

Total games: 46

Total in-game time: 1 days 2 hours 47 minutes

Average player count in game: 6

Total games: 240

Total in-game time: 5 days 13 hours 49 minutes

Average player count in game: 6
                   

                      --- STATS --
                   == T1_Auto_server02 ==
T1_Auto_server02 (Springie 0.91a4) running for 2.14:50:07

Total games: 71

Total in-game time: 1 days 15 hours 25 minutes

Average player count in game: 7

Total games: 240

Total in-game time: 5 days 13 hours 49 minutes

Average player count in game: 6</text>
      <sha1>36odw9jtp31s8rzl8u9hnhu02r6etau</sha1>
    </revision>
  </page>
  <page>
    <title>KoM</title>
    <ns>0</ns>
    <id>1439</id>
    <revision>
      <id>18847</id>
      <parentid>13854</parentid>
      <timestamp>2010-03-13T15:17:06Z</timestamp>
      <contributor>
        <username>Koshi</username>
        <id>2371</id>
      </contributor>
      <comment>made historical</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="284">{{Historical}}
== KoM (King of Monitors) ==

ok, i just want to know, who has the best moniter(highest res + refresh rate)...i recently purchased an 'iimaya vision master 403'...and it displays 2048 X 1536 at 95hz..lol..

anyone beat that? :D

== current king ==

[a_clan]willieturnip</text>
      <sha1>66td1t2vgyw8fxirf38c85gf5hoiuru</sha1>
    </revision>
  </page>
  <page>
    <title>KoSELFD</title>
    <ns>0</ns>
    <id>2449</id>
    <revision>
      <id>18837</id>
      <parentid>13449</parentid>
      <timestamp>2010-03-13T14:18:34Z</timestamp>
      <contributor>
        <username>Koshi</username>
        <id>2371</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="185">{{Historical}}
Try to Slef D the fastest u can and u win the title.

But its need to Slef D in all games Otherwise you lose the title!

(Me Thinks Dojeh was drunk when he made this :) )</text>
      <sha1>9t0vuohlia8uwzla44t0st92of70jxb</sha1>
    </revision>
  </page>
  <page>
    <title>KoSM,QoSM,PoSM,PoSM,KnoSM</title>
    <ns>0</ns>
    <id>2460</id>
    <revision>
      <id>18840</id>
      <parentid>13553</parentid>
      <timestamp>2010-03-13T15:13:06Z</timestamp>
      <contributor>
        <username>Koshi</username>
        <id>2371</id>
      </contributor>
      <comment>made historical</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2342">{{Historical}}
===The Validity of the Information Posted===
Because this page is wiki page which can be edited by virtually anyone, the informations posted are valid if and only if Aeon_Illuminate(The Moderator of these title) Posted these informations.  Check the history page for the last edit done by Aeon_Illuminate if you feel like informations posted are invalid or vandalized.

===The Current Rules===
King of Speedmetal(KoSM)      Aeon_Illuminate


Queen of Speedmetal(QoSM)     [K]Tsuyosa


Prince of Speedmetal(PoSM)    Blue_Frost


Knight of Speedmetal(KnoSM)   No one yet

===The Rules===
1.  The starting metals and energy must be both set to 1,000 or very close to 1,000


2.  The unit limit must be set to 5,000


3.  No combombing in first 10 minutes
 

4.  No comdropping on enemy base for first 10 minutes


5.  The starting box must be on before starting the game, and it must be equivalent  size to box created using !split v 15 command in autohost


6.  No cheating whatsoever


7.  All battle must be reported to Aeon_Illuminate(The Moderator of this titles).    The one must report script, infolog, and the replay of the battle over the title.


8.  There are 5 separate titles and they are gender specific.  Nobody should challenge the title that belongs to other gender.


9.  Only the Speedmetal map is allowed


10. The game must be set to have the game continue when commander dies


11. Every units should be allowed.  No units should be disabled just because you can't handle it.


12. Players must not exploit any glitches to win the game or help win the game.


13. A person can take only one title.


14. The mod for the battle must be latest version of balanced annihilation.


15. No D-gun limit


Note: Aeon_Illuminate can declare any match that he sees as unfair invalid.  The conditions for unfair matches are defined as bug in the game, unplayable lag, cheating, exploiting glitches, etc.  All matches are declared invalid if they don't have proper replay, infolog, and script.  The infolog and script can be obtain from spring directory. The script and infolog erases once you play new game.

===The History of Title Holders===
The starting date for the title holding is December 7,2007

The all position classfied as blank is first come first serve, and after that battle is required to win the title.</text>
      <sha1>diu1z1tgmh3yhqljym3p2iylbbwar0u</sha1>
    </revision>
  </page>
  <page>
    <title>KoSM:Queen of Speed Metal</title>
    <ns>0</ns>
    <id>1843</id>
    <revision>
      <id>18848</id>
      <parentid>13855</parentid>
      <timestamp>2010-03-13T15:17:22Z</timestamp>
      <contributor>
        <username>Koshi</username>
        <id>2371</id>
      </contributor>
      <comment>made historical</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="218">{{Historical}}
== Queen of Speed Metal ==

The challenge is to beat as many people on speed metal as possible on 1 vs x (x=being number of people)


==Current Queen==
10(or over cant remmber) - Angel - the one and only</text>
      <sha1>ginomid0hp3362r5znr448upgnuqvvz</sha1>
    </revision>
  </page>
  <page>
    <title>Krogothes Metal class</title>
    <ns>0</ns>
    <id>1467</id>
    <revision>
      <id>26852</id>
      <parentid>21213</parentid>
      <timestamp>2013-03-23T16:45:46Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>AI -&gt; AI Dev</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="492">[[Engine_Development|Development]] &lt; [[AI:Development|AI Development]] &lt; Krogothe's Metal Class

This class generates an array of coordinates that represent where mexes should be placed. It doesn't choose which one you should build on, or handle upgrading from normal mexes to mohos, or extraction ranges, but it is a core algorithm every skirmish AI should have.

[http://springrts.com/phpbb/viewtopic.php?t=4874 Download here]. &lt;- the link given in that thread is dead.
[[Category: AI Dev]]</text>
      <sha1>diwxvcpmo40zffch69n4430ec4wh5lm</sha1>
    </revision>
  </page>
  <page>
    <title>KuroTA</title>
    <ns>0</ns>
    <id>1095</id>
    <revision>
      <id>18883</id>
      <parentid>16902</parentid>
      <timestamp>2010-03-13T16:41:44Z</timestamp>
      <contributor>
        <username>Koshi</username>
        <id>2371</id>
      </contributor>
      <comment>made historical</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1179">{{historical}}
Mods, and their strategies/tactics

KuroTA started as a bunch of custom units that I had slapped together over the years in my old TA installation. I added and dropped units to help fufill certain roles that never existed in the original TA. For example, there are now mine laying ships. The mod has all sorts of new units, from lvl1 flamethrowers vehicles to massive lvl4 artillery cannons.

Since the conversion to Spring, I've worked on making all of the units a little better balanced, as well as opening up avenues for more interesting strategies. This project is still in development so suggestions/comments are always entertained (or entertaining).


[[Image:KuroTA1.jpg|center]]
[[Image:KuroTA2.jpg|center]]
[[Image:KuroTA3.jpg|center]]
[[Image:KuroTA4.jpg|center]]


Get the most current TASClient Compatible version (0.50) at...

[http://www.fileuniverse.com/?p=show&amp;a=it&amp;id=4290 File Universe]

[http://spring.unknown-files.net/file/2386/KuroTA_v0.50/ Unknown Files]

[http://kuroneko.gotdns.com:27018/ta/KuroTA-v050.sd7 Kuroneko's Website]


[http://spring.clan-sy.com/phpbb/viewtopic.php?t=9393 Discussion Thread]


{{Category:Mods}}
[[Category:Mods]]</text>
      <sha1>f8ioi8k22wymzkub647awp5tt775fsd</sha1>
    </revision>
  </page>
  <page>
    <title>Kustorion</title>
    <ns>0</ns>
    <id>2470</id>
    <revision>
      <id>21647</id>
      <parentid>21289</parentid>
      <timestamp>2011-04-10T15:44:47Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>remove wanted page link</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30429">{{Historical}}
Metal Fatigue was a game made in 2000 and was sold for only a year. It had ComBots which were robots operated by three people. ComBots could have swappable parts(Arm-Arm-Torso-Legs) which differed in variety of ways. Some parts were for defensive purposes others for offensive and some that would be called passive(Axes/Swords/Shields/Speed Legs...). This mod will continue this idea. But the ground units will be customizable as well as mechs(Will be called in another name). But their weapons won't be as effective as those on the mechs!&lt;br&gt;
Metal Fatigue also had the three planes(Air/Asteroid Plane; Surface; Underground). Not decided if these will be in the mod.&lt;br&gt;
Pendrokar - In my opinion the planes made the game more intense due to needed spectating of each plane. Which I think is a bad thing.&lt;br&gt;

This mod will try to make these custom units as easy as possible to create and save them! &lt;br&gt;

Tech level will differ in the size of the unit chassis that higher tech factories can build. The mechs will be built at Tech 3 or 4 not yet decided.&lt;br&gt;

Races: Two races. Meant to have one playable(Humans) and one unplayable for single player. The unplayable race was supposed to be a more advanced alien race whose units were much more powerful than that of the humans.

Resources same as in Total Annihilation: metal and energy.

Story: Highly influenced by the ending of Metal Fatigue although that would have been IP stealing to continue that story.
 
Unit chassis/engines:
Driven by remote control from a command center that is not on the battlefield.

{| border=&quot;1&quot;
|+ '''Ground Unit Chassis Table'''
!width=&quot;30pt&quot;| Chassis !! Wheeled !! Treaded  !! Spiderling !! Hovercraft !! Underground Digger
|-
! Tech Levels
| format align=&quot;center&quot;| 4 || format align=&quot;center&quot;| 4 || format align=&quot;center&quot;| 2 || format align=&quot;center&quot;| 2(Tech 2/3) || format align=&quot;center&quot;| 3(Tech 2/3/4)
|-
! Visual Description
| '''(Tech 1)''' On 3 wheels.&lt;br&gt;'''(Tech 2)''' 4, a bit bigger wheels, (whole size is 30% bigger than Tech 1).&lt;br&gt;'''(Tech 3)''' 6 big wheels (whole size 2 times bigger than Tech 1).&lt;br&gt;'''(Tech 4)''' 8 big wheels (size 3 times bigger than Tech 1)
| '''(Tech 1)''' A pair of treads.&lt;br&gt;'''(Tech 2)''' Two same pair of treads (size same % as wheeled).&lt;br&gt;'''(Tech 3)''' Two pair of treads, back treads 150% larger than front.&lt;br&gt;'''(Tech 4)''' Two big pair of treads same sizes.
| Robot-Spider type.&lt;br&gt;'''(Tech 2)''' 6 Legged .&lt;br&gt;'''(Tech 3)''' 8 legged; size about 50% larger than Tech 2
| '''(Tech 1)''' Length:Width = 3:2&lt;br&gt; '''(Tech 2)''' Length:Width = 4:2&lt;br&gt;'''(Tech 3)''' Length:Width = 6:3
| '''(Tech 2)''' Tech 2 cylinder type body with two pair of treads with an drill on the front.&lt;br&gt; '''(Tech 3)''' Bigger by 60% and has two pair of treads(front:back = 1:2).&lt;br&gt; '''(Tech 4)''' has three drills on the front pointed close to the center with two pairs of threads and 120% bigger than Tech 1.
|-
! Movement
|Good speed and chassis, turret rotation speed; Cannot drive onto steep terrain. Has small chance of getting tires shot therefore making the unit immobile until repaired.
|Moderate speed, slow rotation speed for both the vehicle and turrets and can drive on steep terrain. 
|Slow speed; Very fast rotation speed; All terrain; Amphibious.
|Very fast speed; Moderate rotation speed; Cannot drive onto steep terrain; Can Glide down a hill; Can Hover over short walls.
|Very slow speed and rotation speed on ground; Moderate speed when going through underground. Can drive onto steep terrain.
|-
! Weapon, Armor, Shield and Device slot count
| '''Tech 1''' - 2&lt;br&gt;'''Tech 2''' - 5&lt;br&gt;'''Tech 3''' - 8&lt;br&gt;'''Tech 4''' - 12
| '''Tech 1''' - 2&lt;br&gt;'''Tech 2''' - 4&lt;br&gt;'''Tech 3''' - 9&lt;br&gt;'''Tech 4''' - 14
| '''Tech 2''' - 3&lt;br&gt;'''Tech 3''' - 7
| '''Tech 1''' - 1&lt;br&gt;'''Tech 2''' - 4&lt;br&gt;'''Tech 3''' - 8
| '''Tech 2''' - 6&lt;br&gt;'''Tech 3''' - 12&lt;br&gt;'''Tech 4''' - 18
|-
! Carrying Capacity
|format align=&quot;center&quot; | Low
|format align=&quot;center&quot; | Medium
|format align=&quot;center&quot; | Medium
|format align=&quot;center&quot; | Low
|format align=&quot;center&quot; | Very High
|}

{| border=&quot;1&quot;
|+ '''Air Unit Chassis Table'''
!width=&quot;30pt&quot;| Chassis !! Gunship !! Bomber !! Fighter
|-
! Tech Levels
| format align=&quot;center&quot; | 3
| format align=&quot;center&quot; | 3
| format align=&quot;center&quot; | 3
|-
! Visual Description
| Tech 3 would be similar to a Krow from the [[Absolute Annihilation|AA]] mod! 
| Higher Tech bombers are larger!
| Each changing size by 20% more than previous Tech.
|-
! Flight Height
| Tech 1/2 - Low&lt;br&gt;Tech 3 - Medium
| Tech 1 - Medium&lt;br&gt; Tech 2/3 - High
| Low-Medium(Default)-High
|-
! Weapon, Armor, Shield and Device slot count
| '''Tech 1''' - 2&lt;br&gt;'''Tech 2''' - 5&lt;br&gt;'''Tech 3''' - 8
| '''Tech 1''' - 2&lt;br&gt;'''Tech 2''' - 4&lt;br&gt;'''Tech 3''' - 7
| '''Tech 1''' - 1&lt;br&gt;'''Tech 2''' - 2&lt;br&gt;'''Tech 3''' - 5
|}

{| border=&quot;1&quot;
|+ '''Naval Unit Chassis Table'''
!width=&quot;30pt&quot;| Chassis !!  Battleship !! Support Ship !! Carrier Ship !! Submarine
|-
! Tech Levels
| format align=&quot;center&quot; |4
| format align=&quot;center&quot; |3
| format align=&quot;center&quot; |2(Tech 2/3)
| format align=&quot;center&quot; |3(Tech 1/3/4)
|-
! Description
|Tech 1(scout ships), Tech 2 (destroyers), Tech 3 (cruisers/battleships), Tech 4(dreadnoughts). '''NO DEVICES OR SHIELDS CAN BE ADDED'''=&gt; standart los and radar give disadvantage to any target! Slower with every better tech!
|Primary naval builders, best with radars,sonars and/or radar-jammers combined with battleships, modernate speed, not that expensive!
|Tech 2 has two repair/refuel pads and a fighter/bomber/gunship bay that can hold 4 air units, Tech 3 has four repair/refuel pads and a fighter/bomber/gunship bay that can hold 11 air units! Fight command sends fighters/gunships to fight the carrier stays in place! Can manage an effective coastal offence! Expensive!
|Underwater submarine. Hidden from battleships, unless detected by a sonar! Can shoot nukes from underwater(Nuke-Package required). Can submerge/unsubmerge! Can only shoot torpedoes and nukes while submerged! Very Expensive and '''cannot have any Anti-Air weaponry!'''
|- 
! Weapon, Armor, Shield and Device slot count
| (Cannot have Shields and Devices)&lt;br&gt;'''Tech 1''' - 2&lt;br&gt;'''Tech 2''' - 6&lt;br&gt;'''Tech 3''' - 11&lt;br&gt;'''Tech 4''' - 17
| '''Tech 1''' - 1&lt;br&gt;'''Tech 2''' - 3&lt;br&gt;'''Tech 3''' - 6
| '''Tech 2''' - 6&lt;br&gt;'''Tech 3''' - 10
| '''Tech 1''' - 2&lt;br&gt;'''Tech 3''' - 4&lt;br&gt;'''Tech 4''' - 9
|-
! Carrying Capacity
|format align=&quot;center&quot; | Very High
|format align=&quot;center&quot; | Very Low
|format align=&quot;center&quot; | Medium
|format align=&quot;center&quot; | High
|}

Adding weapons, shields and devices to units will make them heavier and thus reduce their speed and off course make the unit longer to build! PS. By expensive and cheap I mean in the cost of metal!

{| border=&quot;1&quot;
|+ '''Weapons Table Part 1/4'''
!width=&quot;30pt&quot;| Weapon !! Lasers !!  Minigun !! Plasma !! Lightning !! Rockets (Unguided)
|-
! Description
|Precise, heat creative weapon, don't weight much and are cheap, but drain's energy when shot. Adding more than one makes lasers stronger and their range boosted, but makes much more energy usage! Low damage against air!*
| Precise, low-medium damage, fast rate of fire, cheap, light, though has small range! Good ammunition for raiding!
| Imprecise weapon, pretty heavy but powerful shot with splash damage. medium ammunition! Higher range for Naval units(25%)!*
| &lt;font size=2&gt;Precise weapon, light, cheaper than lasers, doesn't do as much damage as a laser but EMP's the target a bit plus deactivates enemy units radar for a second; moderate range, uses loads of energy! Lightning is a pulse weapon unlike the Laser Tech 2!&lt;/font&gt;
| Powerful and very long range, but pretty heavy and has low ammunition capacity. Good against slow moving and immobile units.
|-
! Tech Levels
| format align=&quot;center&quot; |3
| format align=&quot;center&quot; |3
| format align=&quot;center&quot; |3
| format align=&quot;center&quot; |3
| format align=&quot;center&quot; |3
|-
! Tech Level Descriptions
| '''Tech 1''' - Red laser(pulse laser); rapid fire; short range; low damage!&lt;br&gt;'''Tech 2''' - Green laser; medium range; medium damage(160% more damage a sec.)!&lt;br&gt; '''Tech 3''' - Blue laser(pulse laser); slow rate of fire; long range; high damage!&lt;br&gt;
| '''Tech 1''' - Short range; low damage; plenty ammunition&lt;br&gt;'''Tech 2''' - A bit longer range; double barreled=&gt;doubled damage; 30% less ammunition than Tech 1&lt;br&gt; '''Tech 3''' - Range as long as Tech 2; Triple barreled with more powerful ammunition; 50% less ammunition than Tech 1&lt;br&gt;
| '''Tech 1''' - Medium range; medium damage; a bit slow rate of fire; medium ammunition&lt;br&gt;'''Tech 2''' - Longer range; higher damage; slow rate of fire; a bit less ammunition&lt;br&gt; '''Tech 3''' - Long range(shorter than lasers/rockets/lightning); great damage; slow rate of fire; low ammunition&lt;br&gt;
|&lt;font size=2&gt; '''Tech 1''' - Medium range, 30% less damage than Tech 1 laser a sec., low EMP power, medium energy consumption.&lt;br&gt;'''Tech 2''' - Better range, 10% more damage than Tech 1 laser a sec. and 20% faster firing speed, medium EMP power, lightning bolt can hop to other targets that are near the primary target(At a very short range and less EMP power) heavy energy consumption!&lt;br&gt; '''Tech 3''' - Long range(longer than laser Tech 3), twice more damage than a Tech 1 laser does a sec., but 40% slower firing rate than lighting Tech 1, high EMP power, larger hop radius, very heavy energy consumption!&lt;br&gt; &lt;/font&gt;
| '''Tech 1''' - Medium range, medium power rockets, fires one fast rocket a second, 50-65 ammo(about), doesnÃ¢â‚¬â„¢t do splash damage&lt;br&gt;'''Tech 2''' - Long range, medium-high power rockets, fires one slower rocket every 1.5 seconds, 30-45 ammo, very small splash damage&lt;br&gt; '''Tech 3''' - Very long range(but not as long as vertical fire missles), high power rockets, fires one rocket every 2 seconds, 15-28 ammo, small splash damage&lt;br&gt;
|}
{| border=&quot;1&quot;
|+ '''Weapons Table Part 2/4'''
!width=&quot;30pt&quot;| Weapon !! Missiles(Guided) !! Anti-Air Missiles (Guided) !! Vertical Fire Rockets (OTA Diplomat type) !! Anti-Air Long Range Missiles (A-ALRM)  !! Railgun
|-
! Description
|Not as powerful as the rockets and range is also shorter than rockets, good against fast moving targets and slow air units, medium ammunition and have a bit faster rate of fire than rockets!
|Very fast rate of fire, not that expensive and has lots of ammunition against early gunships, but not a fleet of gunships cause these missiles don't do splash damage!
|Longest range, low ammunition, heavy and expensive. Best against very slow and immobile targets!
|Very expensive, very heavy and slow rate of fire, but has a dreadful damage against air units! Very low ammunition!'''*''' 
|Pretty precise, powerful shots with extra force and has medium range(bit longer than plasma weapons), but very heavy, every shot makes unit stop cause of recoil(no recoil for Naval units), expensive. '''Available only at Tech 2 labs and further on!*'''
|-
! Tech Levels
| format align=&quot;center&quot; |3
| format align=&quot;center&quot; |1
| format align=&quot;center&quot; |3
| format align=&quot;center&quot; |2(Tech 2/3)
| format align=&quot;center&quot; |3
|-
! Tech Level Description
| '''Tech 1''' - Medium range; medium damage; slow rate of fire; 10-20 ammo; small splash damage range; medium weigh&lt;br&gt;'''Tech 2''' - Medium range; medium damage; a bit faster rate of fire; 18-32 ammo; small splash damage range; lighter weigh than Tech 1&lt;br&gt; '''Tech 3''' - Long range; heavy damage and impulse; slow rate of fire; 8-15 ammo; medium splash damage range; heavy&lt;br&gt;
| format align=&quot;center&quot; | ---
|'''Tech 1''' - very long range; heavy; medium splash damage range; about 6-8 rockets.&lt;br&gt;'''Tech 2''' - very long range; a bit lighter than Tech 1; medium splash damage range; about 10-13 rockets; a bit more expensive.&lt;br&gt;'''Tech 3''' - longest range; very heavy; large splash damage range; contains 5-7 rockets (almost like mini-nukes); very expensive
|'''Tech 2''' - range = radar Tech 1; heavy damage (medium to ground); medium splash damage range; 6-8 missiles&lt;br&gt;'''Tech 3''' - range = 1.5 radar Tech 1; very heavy damage (between medium-heavy to ground units); large splash damage range; 10-12 missiles
|&lt;br&gt;'''Tech 1''' - low range; medium damage; low impulse; normal rate of fire; 20-28 ammo; medium weigh&lt;br&gt;'''Tech 2''' - medium range; heavy damage; medium impulse; slow rate of fire; 18-24 ammo; heavy&lt;br&gt;'''Tech 3''' - a bit longer range than Tech 3; heavy impulse; slow rate of fire; 14-19 ammo; very heavy and very expensive
|}
{| border=&quot;1&quot;
|+ '''Weapons Table Part 3/4'''
!width=&quot;30pt&quot;| Weapon !! Sonic !! Flame Thrower !! Flak cannon (Anti-air) !! Blade Wings !! Bombs
|-
! Description
|Creates very strong sound waves that can even make light units fly(no effect against flying units, except the ones that are landed)! Cheap, no ammo required but shots drain energy. Almost doesn't do any damage, but slows heavy units and can push light units strongly enough to knock them over, throw them in the air or smash against a cliff!. Best against multiple light(in weight) units! Ignores friendly units nearby when shooting.*/^*
|Short range, drains much less energy than lasers and are more powerful, more expensive than lasers though! Good against slow moving units, immobile units and units with spiderling chassis! Stronger at close range!*
|Medium range, pretty expensive, fast rate of fire and splash damage. Good against gunships and as a crippler on a bombing run air fleet!*
|Adds armored and sharp blades to the fighter unit's wings, allowing the unit to run through specified Air Units with or without self-termination (further noted as spearing)! Spearing comes at a cost of HP of the fighter, more correctly 7% of the speared plane multiplied by 1.# % of the amount of Standard Armor added to the speared plane!
|For ground/naval units acts as a manual trigger bomb for a great explosion (the bigger the unit the larger blast radius), very heavy and a bit expensive! For bomber air units adds drop bombs, adding more adds better explosion power and ammunition (18 (6 dropped) in a pack)!
|-
! Tech Levels
| format align=&quot;center&quot; |3
| format align=&quot;center&quot; |3
| format align=&quot;center&quot; |1
| format align=&quot;center&quot; |3
| format align=&quot;center&quot; |1
|-
! Tech Level Description
|'''Tech 1''' Ã¢â‚¬â€œ short range; low impulse(can only slow down other units); light; 110 grad wave angle.&lt;br&gt;'''Tech 2''' Ã¢â‚¬â€œ medium range; medium impulse(very light units get pushed); medium weight; 70 grad wave angle.&lt;br&gt;'''Tech 3''' Ã¢â‚¬â€œ medium range; high impulse(slows heavy units, but can push medium weight units); a bit more heavy than Tech 2; more expensive than Tech 2; 90 grad wave angle; medium amount of energy drained.
|'''Tech 1''' Ã¢â‚¬â€œ short range, medium heat, low energy drain.&lt;br&gt;'''Tech 2''' Ã¢â‚¬â€œ short range, high heat, a bit increased energy drain and heavier than Tech 1.&lt;br&gt;'''Tech 3''' Ã¢â‚¬â€œ medium range, high heat, medium energy drain, medium weight
| format align=&quot;center&quot; | ---
|
| format align=&quot;center&quot; | ---
|}

{| border=&quot;1&quot;
|+ '''Weapons Table Part 4/4'''
!width=&quot;30pt&quot;| Weapon !! Napalm Bombs !! EMP Bomb !! Torpedoes 
|-
! Description
|Can only be added to bomber/fighter type planes! Does small amount of damage, large area of effect, good against multiple low level ground units, ineffective against tough heavy units!
|For ground units acts as a trigger bomb for a EMP explosion (good for spies)! For air units adds EMP drop bombs (12 (4 dropped) in each pack). ^*
|Can only be added to naval units and bomber/fighter type planes! Ammunition for planes = 4 torpedoes (1 dropped).
|-
! Tech Levels
| format align=&quot;center&quot; |1
| format align=&quot;center&quot; |1
| format align=&quot;center&quot; |1(3 for Naval Units)
|-
! Tech Level Description
| format align=&quot;center&quot; | ---
| format align=&quot;center&quot; | ---
|'''Tech 1''' Ã¢â‚¬â€œ medium range, medium damage, slow rate of fire, fast torpedo speed, medium ammo (8-11), medium weigh.&lt;br&gt;'''Tech 2''' Ã¢â‚¬â€œ medium range, high damage, slow rate of fire, slower torpedo speed than Tech 1, low ammo (5-7)&lt;br&gt;'''Tech 3''' Ã¢â‚¬â€œ long range, high damage, faster rate of fire than Tech 1/2, fast torpedo speed (fast as Tech 1), medium ammo (9-11), heavy and expensive.
|}
* * - Cannot be added to air units with an exception of hovercrafts! 
* ^* - Cannot be added to naval units&lt;br&gt;
&lt;br&gt;
Armor/Shields/Protective devices:
* Black boxes Ã¢â‚¬â€œ Cheap boxes that are made of a heavy material, therefore making the carrier heavier! Good protection against sonic and other powerful force weapons (Railguns)!

* Standard Armor - against miniguns, plasma, rockets, missiles, railguns but offers much less protection to lasers and flame throwers. Heavy and bit expensive! Adding more make use of tougher material!

* Anti-Heat Armor (heat withstanding) - against lasers and flame throwers. Light, but then again expensive!

* ECM - against guided missiles and torpedoes giving a chance to redirect missile/torped fire (lesser chance on torpedoes). Light, expensive and '''cannot be added to planes'''!

* Self-protecting deflector shield - acts as a deflector to plasma and minigun weapons, heavy, not that expensive but costs energy while in use!

* Deflector shield (Bubble) - acts as a deflector to plasma and minigun weapons by creating a bubble, very heavy, expensive and very demanding on energy both while on and when deflecting!

* Standard Shield (Supcom style)(Bubble) - against all weapons except lasers, lightning guns and flame throwers, which cause more damage through this shield than without it! Very heavy, most expensive shield, but does drain energy when ON and needs recharge when maximum capable protection is done!

* Angled Standard Shield (Supcom style)(120* wide) Ã¢â‚¬â€œ just like the standart shield, but acts like a turret which targets higher priority vehicles with powerful guns! Weights less, less expensive compensates the Bubble shield to work on 120* so it is stronger than Ã¢â‚¬Å¾Standart ShieldÃ¢â‚¬Â, though energy draining is lessened only by a bit

* Switchable Standard Shield/Cloaker Device Ã¢â‚¬â€œ A shield/device that can be switched from a Standard Shield to a cloaker shield and the other way around! Weights 65% less than both devices/shields combined and has a 5 sec. interval when switching!

* EMP Protector - Makes it harder for the unit to get paralysed.

Other devices(one device can be added to a unit(few exceptions) and can be added only in device labs):

* Nano turret - for repairing, reclaiming, helping nano. More than one can be added, which makes nanolating more effective!

* Minelayer build pack - allows unit to lay mines, sea mines for naval units*

* Tech 1 build pack - allows unit to make Tech 1 buildings, building variety depends on ground/naval/air units differently*

* Tech 2 build pack - allows unit to make Tech 2 buildings,-||-*

* Tech 3 build pack - allows unit to make Tech 3 buildings,-||-*

* Tech 4 build pack - allows unit to make Tech 4 buildings(few superweapons and factories), and it is long to build this device*

* Nuke package - allows the unit to load and use nukes! Very heavy and very expensive! Takes 3 slots and can hold only 1 nuke!! Range = 50% further than an anti-nuke package!*^

* Anti-Nuke package - allows the unit to make anti-nukes! Takes two slots and can hold 4 anti-nukes!*^

* Amphibious Armor Plate - Doesn't give any protection against weapons, but allows the unit to go through water, if it can drive through steep terrain! '''Planes become seaplanes if this device is added!'''

* Recreation/Ressurection turret - for repair, reclaiming, ressurecting and restoring terrain, but cannot help to nano units or buildings! More than one can be added!

* Radar Tech 1 - small range radar (can be added in Tech 1/2/3 device labs)

* Radar Tech 2 - medium range radar (can be added in Tech 2/3 device labs)

* Radar Tech 3 - long range radar (can be added in Tech 3 device labs)

* Sonar Tech 1 - Can be added to naval and air units. small/medium range (Can be added in all tech shipyards and in Tech 2/3 airports)

* Sonar Tech 2 - Can be added to naval and air units. medium/long range (Can be added in tech 3/4 shipyards and in Tech 3 airports)

* Jammer Tech 1 - small radar jamming (drains three times more energy than a stealty device and can be added in Tech 1 device lab)

* Jammer Tech 2 - medium radar jamming 6x (Can be added in a Tech 2 device lab)

* Jammer Tech 3 - long radar jamming 9x (Can be added in Tech 3 device labs)

* Stealty Device - enemy can't see this unit on radar, drains small amount of energy, a bit heavy.

* Cloak Device - enemy can't see the unit exept on the radar, drains great amount of energy, better tech vehicles get more energy usage penalty!

* Switchable Standart Shield/Cloaker Device - |see armor/shields|

* Cloaker Device (Bubble)- cloaks units in an area, uses dreadful amount of energy! If the unit gets hit the cloaker is disabled for 3 seconds!

Planes get twice bigger energy penalty with energy draining devices, 150% on radar/sonar devices!

* * - Nano turret required 
* *^ - Cannot be added to air units
  
'''Buildings''' (Upgrading doesnÃ¢â‚¬â„¢t mean it will upgrade by itself! Upgrading = New Tech cost and buildtime Ã¢â‚¬â€œ Old Tech cost and buildtime) (Note: Buildings that can create and add weapons/devices/shields need that type associated factory. This does not include defensive turrets):

'''Metal/Energy generating buildings:'''
* Metal extractors - Extracts metal from spots! Tech 1, Tech 2(built by Tech 3 cons) and another type Tech 1/2 with the capability to upgrade(create and add weapons to itself) (Armored metal extractor(Customizable!))

* Wind Turbines - Generates energy from wind power. Can be upgraded, by adding another wind turbine with morphing(max. 3)(Cheaper than building more generators, but less safety)

* Solar Power Plant - Generates energy from solar energy. Upgrading makes panels more effective(max. 3) (33% solar power gathered; 66% solar power gathered; 100% solar power gathered) Generates 50% less energy in shadowed areas(behind a cliff)(Needs coding). Though upgrading costs more it can be useful for space reservation!

* Geothermal Power Plant - Built on geothermal vents. Generates a nice load of energy and energy storage for early starts. Built by Tech 2 cons. Can be morphed into a Tech 3 Hazardous/Safe Geothermal Power Plant!

* Geoquiztum Power Plant Ã¢â‚¬â€œ Almost the same as the normal, but uses all energy to make metal and needs more time and energy than an normal Geothermal Power Plant.(More effective than building metal makers for a standart Power Plant)

* Underwater Geothermal Power Plant Ã¢â‚¬â€œ Geothermal smoke can sometimes come from the bottom of seas and this building makes use of the water by boiling it with the geothermal heat, thas generating more energy than a normal land Geothermal Power Plant. Built by Tech 2 naval/air constructors. DoesnÃ¢â‚¬â„¢t have Tech 3 Level! (Not that usage is possible, because no map has underwater Geothermal Vents, but itÃ¢â‚¬â„¢s a logical idea)

* Tidal Collector Ã¢â‚¬â€œ Built on water. MakeÃ¢â‚¬â„¢s use of tidal waves to generate energy. Tech 2 can be made by Tech 2 constructors, which costs a bit more, but works underwater with no extras in generating. Cannot be morphed into Tech 2 though!

* Fusion Reactor - Generates energy with an advanced technology method that is capable of producing great amount of energy. Tech 1 is built by Tech 3 ground/air cons! Tech 1 can be then morphed into a Advanced Fusion Reactor.

* Underwater Fusion Reactor Ã¢â‚¬â€œ more expensive than a normal Reactor, but better hidden. Built by Tech 3 Naval/Seaplane constructors!

* Customizable Fusion Reactor Ã¢â‚¬â€œ a bit more expensive than a normal Fusion Reactor. Two devices can be added(Disinclining Turrets/Packs)!

* Metal Maker Ã¢â‚¬â€œ Takes high amount of energy to produce metal. Has two techs.

'''Factories:'''
* Ground Unit Factory Ã¢â‚¬â€œ Can nanolathe Wheel/Tread/Legged Chassis! Has four Techs each built by the corresponding build pack! !!!Setting an assembly as a rally point will allow for pre-building/adding weapons, shields, armor and devices. (For all unit factories)

* Specialized Unit Factory - Can nanolathe Spiderling/Hovercraft/Digger Chassis! A little cheaper in metal than the ground unit factory, but more expensive in energy cost!

* Airport Ã¢â‚¬â€œ Can create all air unit chassis! Has three Techs!

* Shipyard Ã¢â‚¬â€œ Builds Naval units! All naval factories/labs/armories can be submerged, which hides the buildings underwater and (For shipyard) can build submarines but at a slower building rate as well as for the weapon/device/shield/armor labs! Takes 6 seconds to submerge and rise from submerge unit, weapon etc. production is stopped!

* Weapons Lab (3 Techs) Ã¢â‚¬â€œ Creates weapons needed for non-naval units!!

* Naval Weapons Lab (3 Techs) Ã¢â‚¬â€œ Creates weapons and devices for naval/seaplane/hovercraft units! Cannot build weapons that are not meant for naval vessels!&lt;br&gt;

* Armory- Creates armors/shields for non-naval units!

* Naval Armory - Creates armors/shields for naval/seaplane/hovercraft units!

* Device Lab Ã¢â‚¬â€œ Creates devices for non-naval units! Much cheaper than an armory.

* Naval Device Lab Ã¢â‚¬â€œ Creates devices for naval/seaplane/hovercraft units!

* Vehicle Assembly - Has 4 techs. Adds created weapons/armor/shields/devices to corresponding or lower level tech non-naval units and can rearm weapons. Assemblies have a tractor beam which can land air units more quickly(naval assemblies have this too)

* Naval Assembly - Has 4 Techs. Adds created weapons/armor/shields/devices to corresponding or lower level tech naval/hovercraft/seaplane units and can rearm weapons. 

'''Offensive/Defensive buildings:'''
* Alpha Turret - Cheap turrets that after built can add weapons to them self's even if no weapons lab is built! In later games most likely used as an anti-air turret! Has three Techs:
** Tech 1 - Can have one Tech 1 weapon added! Not that tough(in HP).
** Tech 2 - Can have three Tech 1/2 weapons added! Pretty tough.
** Tech 3 - Can have five Tech 1/2/3 weapons added! Tough.

* Beta Turret - Pretty expensive turrets that after built can add weapons to them self's IF the corresponding weapons lab is built! '''Added weapons receive 20% boost in range(rockets and missiles not affected)'''!
** Tech 1 - Can have two Tech 1/2 weapons and one armor added! Pretty Tough(in HP).
** Tech 2 - Can have three Tech 1/2/3 weapons and two armors added! Tough
** Tech 3 - Can have four Tech 1/2/3 weapons and four armors added! A bit Tougher than Tech 2.

* Gamma Turret - Stronghold turrets that are very expensive, long to build with a wide range of weapons that may be added to themself's IF the corresponding weapons lab is built! '''Added weapons receive 30% boost in range(rockets and missiles not affected)'''! Has 3 Techs(2/3/4):
** Tech 2 - Can have four Tech 1/2/3 weapons and three armors added! Tough(in HP).
** Tech 3 - Can have six Tech 1/2/3 weapons and four armors added! Very Tough
** Tech 4 - Can have nine Tech 1/2/3 weapons and six armors added! Tough like an Titanium wall.

* Long Range Artillery Cannon (LRAC) - A cannon that can shoot at very long distances with almost any weapon. All weapons added receive 10x bonus in range and have their weapon doubled damage! Missiles, Rockets, Bombs, Torpedoes, and Flame Throwers cannot be added(EMP acts as a shoot able EMP bomb)! '''Only one Tech 3 weapon can be added!''' Can be built with a unit that has Tech 4 Building Pack Device!

* Support Tower Ã¢â‚¬â€œ This building can add shields and devices to itself if the associated factory is built (device lab/naval device lab...)! '''Cannot add nuke/anti-nuke devices! Upgrading removes added devices!''' Has three Techs:
** Tech 1 Ã¢â‚¬â€œ two devices can be added
** Tech 2 Ã¢â‚¬â€œ three devices can be added; tougher; a bit more expensive!
** Tech 3 Ã¢â‚¬â€œ four devices can be added; very tough hull (just like a factory); very expensive!

* Nuclear Missile Silo - Can create high density nuclear missiles and launch the nukes, that can only be stopped by anti-nukes!

* Anti-Nuclear Missile Silo - Can create cheap anti-nuke missiles that can be shot against incoming nukes in a wide range. The anti-nukes build up twice faster than a nuke! '''Can only shoot one Anti-Nuke at a time!''' 

'''Other buildings:'''
* Floating Support Tower - Same as the original ground support tower, just a bit more expensive!

* Convertible Metal/Energy Storage - which you would need more is up to yourself. The storages

* Ammunition Support Facility Ã¢â‚¬â€œ This facility creates ammunition for any weapons (expect nukes and anti-nukes) and creates small anti-gravity moving robots that take created ammunition from the Support Facility and rearms an unit that has less than 70% ammo! The robots can be destroyed by anti-air weaponry. Destroyed robots are recreated automatically by the facility. Has three Techs:
** Tech 1 - Cheap, weak in health, creates and supports 2 robots 
** Tech 2 - Cheap, medium health, creates and supports 3 robots
** Tech 3 - Expensive, tough, creates and supports 6 robots

* Motion Sensor Ã¢â‚¬â€œ At a size of an OTA sonar device. The motion sensor detects ground units including those that are underground in a cylinder type range. Detection range is 50% less than a radar, costs more than a radar tower and has two techs, which only differ in range(50% of tech 2 radar) and cost. Tech 1 can be upgraded to Tech 2.




----
----
'''Game production:Stopped'''

What was done for this game:
Some vehicle models done:
http://img168.imagevenue.com/loc865/th_84991_Tech1-2-3-4WheeledChassisSizecomparison_122_865lo.JPG
http://img161.imagevenue.com/loc699/th_47341_Tech1-2-3-4TreadedChassisSizecomparison_122_699lo.JPG

Very few weapon models:
http://img189.imagevenue.com/loc523/th_60776_WeaponTech1Minigun_122_523lo.JPG
http://img109.imagevenue.com/loc1143/th_60785_WeaponTech1MinigunaAttached_122_1143lo.JPG

Got one weapon a little textured:
http://img176.imagevenue.com/loc412/th_86416_Texturing1_122_412lo.jpg

----
Team: nil/null/N/A

Pendrokar - Was the initial developer of Kustorion but stopped when understanding that he should create mods for game types that he actually might be good at(FPS games).

See progress at this thread - [http://spring.clan-sy.com/phpbb/viewtopic.php?f=14&amp;t=14387]

[[Category:Mods]]</text>
      <sha1>8noj5gi7zoa755eoffxn0yv7vayibc6</sha1>
    </revision>
  </page>
  <page>
    <title>LAN</title>
    <ns>0</ns>
    <id>3810</id>
    <redirect title="Spring on a LAN" />
    <revision>
      <id>30395</id>
      <timestamp>2017-07-08T11:48:29Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>Redirected page to [[Spring on a LAN]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29">#REDIRECT [[Spring on a LAN]]</text>
      <sha1>jv6nkqbm350nthw7wo1u6o3cdkqy52g</sha1>
    </revision>
  </page>
  <page>
    <title>LINUX:SetupSpringie</title>
    <ns>0</ns>
    <id>2711</id>
    <revision>
      <id>26963</id>
      <parentid>18953</parentid>
      <timestamp>2013-04-02T02:46:59Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3761">= Basics =

Springie is a standalone windows/linux application written in C# by Licho. It is an alternative to the SPADS Autohost written by bibim. There is a [http://springrts.com/phpbb/viewtopic.php?f=1&amp;t=7921&amp;st=0&amp;sk=t&amp;sd=a forum-thread] dealing with springie. More information can be found in &quot;[[Hosting Spring/Autohost|How to use Springie]]&quot;.

In order to run the application on Linux, you need to have mono installed. 

It is possible to run Springie on a dedicated sever without graphical interface.

= Springie on Ubuntu =

The following steps have led to a successful installation of Springie on an Ubuntu 9.04 (Jaunty) server.

1. Install Spring as described [[Ubuntu_install|here]].

2. Install mono:

 sudo apt-get install mono-common libmono-winforms2.0-cil

3. Get Springie:
 wget http://springie.licho.eu/springie.zip

4. Extract &quot;springie.zip&quot; in a separate directory, e.g.:

In your home-directory:
 mkdir springie
 mv path/to/springie.zip springie
 cd springie
 unzip springie.zip

5. Read the readme.txt file.

6. Edit the main.xml file in your springie directory:

Replace:
 &lt;ExecutableName&gt;spring-dedicated.exe&lt;/ExecutableName&gt;
with:
 &lt;ExecutableName&gt;/usr/games/spring-dedicated&lt;/ExecutableName&gt;

7. Run Springie.

When running Springie for the first time, it creates a bunch of files in its  directory. 

Run Springie either with
 mono Springie.exe
or 
 mono Springie.exe -nogui
in case of a headless display.

8. Stop Springie.

Use Ctrl+C (Strg+C) to stop Springie.

9. Configure Springie as described below.

10. Run Springie as described in item number 7. 

= Configure Springie =

== Bot account ==
In order to be able to play Spring and to host games at the same time, you need a new spring account.The easiest way to register a new account is to use your Multiplayer Lobby client, e.g. SpringLobby. 

== Server Settings ==
In case you are hosting on a server with a display attached, you simply can use the Springie GUI for configuration.

If you set Springie up on a headless server, you have to manually edit autohost.xml to set the configuration options. Of course, you can use Springie on a host with a display, use the GUI for configuration and then copy over the autohost.xml file.

=== Add admin users ===
Between the closing &lt;/DefaultRectangles&gt;-tag and the opening &lt;AutoLockMinPlayers&gt;-tag insert:
  &lt;PrivilegedUsers&gt;
  &lt;/PrivilegedUsers&gt;

Then for each admin insert between these tags:
    &lt;PrivilegedUser&gt;
      &lt;Level&gt;LEVEL&lt;/Level&gt;
      &lt;Name&gt;ADMIN&lt;/Name&gt;
    &lt;/PrivilegedUser&gt;

where LEVEL is a number from 1 to 5 and ADMIN is a player's name who should be able to perform admin tasks.

The result could look like this:
  &lt;PrivilegedUsers&gt;
    &lt;PrivilegedUser&gt;
      &lt;Level&gt;5&lt;/Level&gt;
      &lt;Name&gt;YOUR-SPRING-PLAYER-ACCOUNT&lt;/Name&gt;
    &lt;/PrivilegedUser&gt;
    &lt;PrivilegedUser&gt;
      &lt;Level&gt;4&lt;/Level&gt;
      &lt;Name&gt;admin1&lt;/Name&gt;
    &lt;/PrivilegedUser&gt;
  &lt;/PrivilegedUsers&gt;

=== Set a password ===
To set a password replace
 &lt;Password&gt;*&lt;/Password&gt;
with
 &lt;Password&gt;YOUR-PASSWORD&lt;/Password&gt;
in autohost.xml.

=== Set default map and mod ===
The tags 
 &lt;DefaultMap&gt;&lt;/DefaultMap&gt;
enclose the default map, the tags
 &lt;DefaultMod&gt;&lt;/DefaultMod&gt;
the default mod.

An example for hosting a BA 6.95 mod with the SmallDivide map is:
 &lt;DefaultMap&gt;SmallDivide.smf&lt;/DefaultMap&gt;
 &lt;DefaultMod&gt;Balanced Annihilation V6.95&lt;/DefaultMod&gt;

=== Change the game title ===
Use the 
 &lt;GameTitle&gt;&lt;/GameTitle&gt;
tags to set the game title, e.g.:
 &lt;GameTitle&gt;MYCOOLSERVER!!!1!&lt;/GameTitle&gt;

=== Administer Springie ===
You can use the commands listed in the readme.txt to administer Springie by  &quot;talking&quot; to the bot user. The commands !help and !helpall provide lists of accepted commands.

== Add mods ==
''TO DO''
[[Category:Linux]]
[[Category: Autohosts]]</text>
      <sha1>28wgag24bkwhishpkrz8vjga3zlibbf</sha1>
    </revision>
  </page>
  <page>
    <title>LLT</title>
    <ns>0</ns>
    <id>1515</id>
    <revision>
      <id>26880</id>
      <parentid>25272</parentid>
      <timestamp>2013-03-23T23:11:40Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>remove Category:Units</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="880">{{Balanced_Annihilation_deprecated}}


[[category:Balanced Annihilation]]
These laser towers are the earliest you can build in game without advancing to Tech Level 1. They can briefly hold off an attacking enemy, and can be built by the [[Commander]], making them the only structural defense available early in the game. They are best used two or three at a time where they can concentrate their fire on bottlenecks, or points where the enemy can only move one or two units through at a time. Their range, however, is easily negated by amissile KBot or missile truck. These units can destroy LLT's without much damage to themselves. This makes it rather important to back them up with something heavier or with a larger range than itself, such as a [[Missile Tower|missile turret]], if you plan on keeping it as a permanent base defense.

[[Image:llt_pics.JPG|you need broadband]]</text>
      <sha1>j0f5p200jv1c6lp8rnld1id3vpjuj43</sha1>
    </revision>
  </page>
  <page>
    <title>LUA ComonPitfalls</title>
    <ns>0</ns>
    <id>3231</id>
    <revision>
      <id>26439</id>
      <parentid>25795</parentid>
      <timestamp>2013-03-09T21:27:50Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>[[Category:Lua]] despite its problems</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9605">This page mentions some common problems and their solutions, and should not be treated as a tutorial page. 

You can also visit #moddev or #lua channels on the spring lobby. You are advised to post the infolog and a code snippet describing your problem to www.pastebin.com or similar sites. 
These are some of the more common pitfalls:

'''1. Variable declaration instead of assignment:'''

In some cases you might make a typo in variable assignments in the form of:
myWariable = [ value ]
instead of the intended:
myVariable = [ value ]
which will create a new variable &quot;myWariable&quot; instead of the intended assignment to an existing variable &quot;myVariable&quot;.

A solution would be to print variable's value often with Spring.Echo(&quot;MyVariableName:&quot;, variableName) and to enforce properly spelled variable names.

'''2. Keep it simple!:'''

If its to big for you to understand (who built it), break it down. Do not copy and paste code. Doing that is wrong, wrong - and wrong. Get code out into special functions only dedicated to checking.

&lt;span style=&quot;color:#ff0000&quot;&gt;''if (boolOne == true and x &gt; 3.14) or (foo==bar) then''&lt;/span&gt;&lt;span style=&quot;color:#f0ffff&quot;&gt;''can be converted into''&lt;/span&gt;

&lt;span style=&quot;color:#00ff00&quot;&gt;''function checkThem(boolOne,x,foo,bar) 
return (boolOne == true and x &gt; 3.14) or (foo==bar)&lt;/span&gt;
&lt;span style=&quot;color:#00ff00&quot;&gt;''end''&lt;/span&gt;

Delete unnecessary stuff.Do not keep code in your work that has reached its exparation date. Plan ahead, it might sound stupid to draw a sketch of a program, but you will come into situation were you coded yourself into a corner, and 2 hours go to waste. So planning if you have a complex task is never wasted time.

'''3. Use existing tools:'''

There are tools available which may ease some of your development. Some examples are: Toolbox and springposer. These may take some time to setup but it will be worth it.

&lt;br/&gt;'''4. Use Includes:'''

Parts of your unitscript are used allover again? In different units? Have sort of a function toolkit, you want to reuse, without copy and pasting it?

'''include &quot;MyToolkit.lua&quot;''' will add all the functions of the MyToolkit.lua to the program(only used ones). Good way to separate complex programs into easier understandable pieces.

'''5. Locals:'''

It's advisable to use local variables (prefixed by the &quot;local&quot; keyword) instead of global variables (no prefix by default) where possible. Doing so may increase Lua performance as well as keep you from polluting the global namespace - which may be a problem as your project grows.


'''6. Variable scope:''' The scope of your variable is limited by the blocks of code (between then/do/else and end). Everything deeper down can see your variable, everything outside of this scope cant. Check them Twice- if you were the function.. could you see it at the point it is needed? If a function gets handed a value that has the same name then a global, this local &quot;copy&quot; hides the global variable till function end. What maybe obvious to the programmer, is invisible to the program.

'''7. Comments:''' Every time you have to return to work, and don't know what something does, and you read it again - write it down as a comment above. Comments are not only for other people, they can also help you. Even with a carefully worked out plan, you will lose the oversight with larger projects.

&lt;br/&gt;'''8. No wreckage Info/No such Unit''' If you get this message, spring might have finished parsing the unitdef and skipped it, so it won't show up to the party. Check for missing comma, typos, comment pieces out, until its loaded.&lt;nowiki&gt; [[Something|] &lt;/nowiki&gt;, is just a different way of writing &quot;something&quot;. So within double braces is just another string.

'''9.Object Orientated Thinking:'''

Its way more efficient to bundle data together with objects, then store it en mass in huge tables, getting it together on demand. For example:

&lt;span style=&quot;color:#ff0000&quot;&gt;for i=1, 9000,1 do&lt;/span&gt;

&lt;span style=&quot;color:#ff0000&quot;&gt;if unit[i] == weapon[i] then doSomething() end&lt;/span&gt;

&lt;span style=&quot;color:#ff0000&quot;&gt;end&lt;/span&gt;

is slow. Every time the first table is called the value is taken, then the second big value is called, rising the chance to push the first table out of memory. Thus a constant loading and writing occurs in the background.

&lt;span style=&quot;color:#00ff00&quot;&gt;ArmedUnits -- a table that contains the unit and the weapon bundled together&lt;/span&gt;

&lt;span style=&quot;color:#00ff00&quot;&gt;for i=1, 9000,1 do&lt;/span&gt;

&lt;br/&gt;&lt;span style=&quot;color:#00ff00&quot;&gt;ArmedUnits[i].unit&lt;/span&gt;

&lt;span style=&quot;color:#00ff00&quot;&gt;weapon=ArmedUnits[i].weapon&lt;/span&gt;

&lt;span style=&quot;color:#00ff00&quot;&gt;if unit== weapon then doSomething() end&lt;/span&gt;

&lt;span style=&quot;color:#00ff00&quot;&gt;end&lt;/span&gt;

This approach takes a little time to get used to, but especially for large tables its a big performance safer.

'''10. Use Text Replacement:'''

Many beginners use compares like if booleanDeBug ==true then Spring.Echo(&quot;Testvalue&quot;,blabla) end

Do not leave this useless compares in the code. Instead use the Spring.Echo alone.&amp;nbsp; Then if the release is closing in use Text Replacement to Replace Spring.Echo with --Spring.Echo.

'''11. Syntactical Insecuritys?'''

Spring has over time incorporated scripts from different languages (cob/bos/lua) and some of those calls are rather vague described in the wiki. So how does this COB Get/Set work? Best solution, google it. Really. Somewhere someone already has used it, and you can see it, working.

'''12.Forgotten Globals'''

Declared eons ago, forgotten by you and used in the assumption they never existed. And now you fill them with different values in a function, wondering at the strange sideeffects.

'''13. Nil'''

Nil is Nihilistic. It takes functions with it it, everything that touches it becomes unstable, antimatter. A Variable initialized with nil will resolve in a 0 no matter what you put in through other functions. You know the checks. Use them.

&lt;br/&gt;'''14. Backup'''

Not against data loss through hardware failure or viruses, but to have a safecopy should you screw up. There is stuff that will crawl into a overworked tired mind at 4 in the morning that you will find brilliant. And the next moment, you want to go back, all you find is a NeedMoreSleep() function with a lame pun in it. Use a Subversion control system, use a simple on for the start (like Mecurial). Advanced people will recommend you advanced tools. There is no shame in using the easier option if that one allows you to archieve your goals.

'''15. Don't Poison the Well''' Sometimes you need Information for a Unit, and you create a Sensor-Thread such as this.

 &lt;span style=&quot;color:#00ff00&quot;&gt;local function senSoricLoop()
 &lt;/span&gt;

 &lt;span style=&quot;color:#00ff00&quot;&gt;  while(true) do
 info=Spring.GetMyInfo(unitID)
   if info == true then
   --do this
      else 
      --do that
      end
 Sleep(150)
 end
 &lt;/span&gt;

 &lt;span style=&quot;color:#00ff00&quot;&gt;end
 &lt;/span&gt;

Poisoning the well means, instead of writting a second while loop to give in to the temptation to just falsify the sensoric data. In this case making the info global, and setting it to false every Sleep(20). This thing is nasty, it will result in unpredictable behaviour, a unit that seemingly at random sometimes spasms. Avoid at all cost.

&lt;br/&gt;'''16. SignalMasks for Threads (Thx to Tobi for this one)'''

'''SIG_ONE=1'''

'''SIG_SOMETHING=2'''

'''SIG_ANYTHING=4'''

Threads are Started and if you use SetSignalMask(SIG_SOMETHING) you assing them a unique Number, that must be the power of two(1,2,4,8,16,32...). To understand SignalMasks you need to understand the &lt;u&gt;'''binary'''&lt;/u&gt;representation of this numbers.

SIG_ONE = 1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; SIG_SOMETHING= 10&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; SIG_ANYTHING= 100

Notice the difference? Every one of this 1s represent a Switch, that can be either on, or off. If you Send a Signal Signal(SIG_ONE) this will find the thread (and its decendants) and pull the plug.&amp;nbsp; What happens if we would use a uneven number? Signal(3) for example?&amp;nbsp; It would result into Signal(11) (3 beeing 11 in binary) and pull the plugs of all threads marked by the SignalMasks 2 and 1. Now if you assign a threads decendant thread another number, it becomes independent from the father Thread. Handle with care.

'''17. Internal Language Changes:'''

Now that sounds like something made up to impress. But well, this occurs mainly if you do complicated math or call external functions. You write something down, which is in the language you are currenty thinking in quite accurate. But meanwhile you have forgotte all about the LUA-Syntax. Example?

&lt;span style=&quot;color:#00ff00&quot;&gt;x=32+ math.sin(phi) * x&lt;/span&gt;

&lt;span style=&quot;color:#00ff00&quot;&gt;y=64 + 12 *math.cos(phi)^x&lt;/span&gt;

If you write this.. its pure truth. Written down on paper its pure truth. If you calc it back, its still pure truth. Executed in Lua it will do strange things, you wont find easily without debugger. Thats because the x is allready changed when it goes into the second line. So a accurate Version of this would look like:

&lt;span style=&quot;color:#00ff00&quot;&gt;tempXofOld=x&lt;/span&gt;

&lt;span style=&quot;color: rgb(0, 255, 0)&quot;&gt;x=32+ math.sin(phi) * x&lt;/span&gt;

&lt;span style=&quot;color:#00ff00&quot;&gt;y=64 + 12 *math.cos(phi)^tempXofOld&lt;/span&gt;

And thats a hardone to find. Because if you read it up again, you will switch languages in your head.. its one of those things you do without thinking. Same stuff can happen if you are fluent with several languages, and translate your variables, because you are distracted for a moment.

[[Category:Lua]]</text>
      <sha1>joy141lgctshcqgm4kr0ilkudj2xrgl</sha1>
    </revision>
  </page>
  <page>
    <title>LUPS</title>
    <ns>0</ns>
    <id>3292</id>
    <revision>
      <id>29905</id>
      <parentid>29059</parentid>
      <timestamp>2016-02-28T15:58:10Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5529">
Lua Particle System (LUPS)

Licensed under the terms of the GNU GPL, v2 or later.

== github ==
https://github.com/jk3064/lups

== Download ==

Lups is available via [[rapid]] and can be downloaded via the usual tags, i.e. lups:stable.


== Implementation ==
First, you need to differ between synced and unsynced FX,
so there are 2 LUPS instances running:
one in LuaUI (widget) and
one in LuaRules (gadget).
(To start a new instance simply include lups/lups.lua)



== Why differ between synced and unsynced FX? ==
LuaUI has only a limited access to engine values, so it
could never determine the unittype of enemy units in airlos,
nor is it able to catch weapon explosion or to interact with
cob.



== Which files are used by LUPS? ==
the core uses the following:
lups/*
bitmaps/GPL/lups/*
LuaUI/Widgets/lups_wrapper.lua
LuaRules/Gadgets/lups_wrapper.lua (only if you want synced
FX like shockwaves/nanolasers)
and there are the managers:
LuaUI/Widgets/gfx_lups_manager.lua
LuaRules/Gadgets/gfx_lups_manager.lua
the shockwaves gadget:
LuaRules/Gadgets/lups_shockwaves.lua



== What are those managers? ==
LUPS itself doesn't start any FX. It needs other lua files
to tell LUPS when it should start a new FX.
There are many widgets and gadgets, which start LUPS FXs,
but the most interesting ones are the managers (and perhaps
the shockwaves gadget).
Also the manager in LuaRules differ from that one in LuaUI.
The manager in LuaUI starts FXs everytime an new unit gets
finished or an enemy unit enters the LOS, so those FX only
vanish if the unit dies or leaves the LOS again.
The LuaRules manager is much less customizable, it creates
very special FXs like cloaking and it also manage parts of
the LUPS nano particle handling.



== How do I implement my own FX? ==
Okay, in the case you use the LuaUI manager and you want to
create a per-unit FX (like a fusion FX, airjets, ...):

1. open LuaUI/Widgets/gfx_lups_manager.lua
(don't shock the file seems huge, but most is only config,
and yeah it needs a cleanup ... someday :x)
2. scroll down (~50% scrollbar)
you will find the following table/array:
&quot;local UnitEffects = {...}&quot;
It holds the FX per-unitdef.
3. create a new sub-table like the following:
[UnitDefNames[&quot;%UNITDEF_NAME%&quot;].id] = {
{class='%FXCLASS%',options=%MY_FXOPTIONS_TABLE%}
},



== What FXClasses exist and how do I know their options? ==
All FXClasses are located here:
/lups/ParticleClasses/*
If you open on of those files, you will see a function like this:

function ShieldSphereParticle.GetInfo()
return {
name      = &quot;ShieldSphere&quot;,
}
end

That returned name is what you fill in %FXCLASS% (uppercase
doesn't matter), also it is in most cases same as the filename.
To see possible options of the FXClass scroll a bit down, you
will find a table like this:

ShieldSphereParticle.Default = {
pos        = {0,0,0}, -- start pos
layer      = -23,
life       = 0, --in frames
size       = 0,
sizeGrowth = 0,
margin     = 1,
colormap1  = { {0, 0, 0, 0} },
colormap2  = { {0, 0, 0, 0} },
repeatEffect = false,
}

The table contains all options and their default values.
So an example fx placed in LuaUI/Widgets/gfx_lups_manager.lua
could look like this:
[UnitDefNames[&quot;armcom&quot;].id] = {
{class='ShieldSphere',options={ life=3000, repeatEffect=true, size=300, colormap1={1,0,0,0.5}, colormap2={0,1,0,0.5} } }
},



== How do I start my own FX from my widget/gadget? ==
First, you need a link to the interface, to do so you need
to access the global shared table of the widget-/gadgetHandler.
for LuaUI:
local LupsApi = WG.Lups
for LuaRules:
local LupsApi = GG.Lups
(nil check those, it is possible that Lups hasn't started yet!)

That Api contains the following functions:
LupsApi.GetStats()
LupsApi.GetErrorLog(minPriority)
-&gt;  LupsApi.AddParticles(class,options)   //returns a fxID
-&gt;  LupsApi.RemoveParticles(fxID)
LupsApi.AddParticlesArray({ {class=className, ..FX options..},{class=className, ..FX options..},.. } )
LupsApi.HasParticleClass(className)
and
LupsApi.Config = {...}  //contains the options of lups.cfg



== Example usage of AddParticles() ==
LupsApi.AddParticles('ShieldSphere', {
unit=unitID,
piece=&quot;head&quot;,
pos={0,100,0},
life=3000,
repeatEffect=true,
size=300,
colormap1={1,0,0,0.5},
colormap2={0,1,0,0.5}
})



== How do I bind a FX to an unit/unitpiece? ==
There are some special options tags, those are:
unit := binds fx to unitID
piece:= binds fx to pieceNAME
pos  := worldspace coord or offset coord from the unit/unitpiece center
onActive := only show FX if the unit is active (e.g. used for airjets - a plane is active, if it flies)



== Can I modify FX on runtime? ==
Sure you can. There is only one issue in 76b1 (it will
be fixed in the next spring release):
you can't modify widgets if they are in a .sdd, so you
have to copy it to your local widgets folder,
then you can run:
/luaui reload
each time you modified the file.



== I heard some options can contain Lua code? ==
Yeah, but only the SimpleParticles class support them and
_only_ in the &quot;partpos&quot; param:

LupsApi.AddParticles('SimpleParticles', {
...
partpos = &quot;r*cos(beta)*sin(alpha),r*cos(alpha),r*sin(beta)*sin(alpha) | r=random()*20, alpha=2*math.pi*random(), beta=2*math.pi*random()&quot;
...
})

The syntax is a bit extended so it looks similar to the
definitions of a mathical sets, but it can still contain
any lua code.

Valid examples are:
&quot;x,y,z | x=10,y=30,z=0&quot;
&quot;10,30,0&quot;
&quot;random(),random(),random()&quot;
&quot;x,y,z | r=random(), if (r&gt;10) then x=10; y=30; z=0; else x=-10; y=-30; z=-0; end&quot;

[[Category:Libraries]]</text>
      <sha1>tpodqdjrcwwiuvboiyblsi24h8orti0</sha1>
    </revision>
  </page>
  <page>
    <title>Lan</title>
    <ns>0</ns>
    <id>1160</id>
    <redirect title="Spring on a LAN" />
    <revision>
      <id>10988</id>
      <timestamp>2005-12-12T02:00:18Z</timestamp>
      <contributor>
        <username>FoeOfTheBee</username>
        <id>20</id>
      </contributor>
      <comment>Lan moved to Spring on a LAN</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30">#REDIRECT [[Spring on a LAN]]
</text>
      <sha1>or2hqkr393fk560kgpqsr0ap8ro5f5i</sha1>
    </revision>
  </page>
  <page>
    <title>Learning CPP</title>
    <ns>0</ns>
    <id>1182</id>
    <revision>
      <id>26700</id>
      <parentid>11009</parentid>
      <timestamp>2013-03-20T19:57:57Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>recat</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1170">If you're interested in learning C++, check out these links:
*[http://newdata.box.sk/bx/c/ Teach Yourself C++ in 21 Days] is an excellent introduction for anybody new to the language. It teaches you the bare minimum you can get away with.
*[http://mindview.net/Books/TICPP/ThinkingInCPP2e.html Thinking in C++] An excellent, thorough C++ book available free online as HTML. Also available in  [http://www.planetpdf.com/developer/article.asp?ContentID=6634 PDF format].
*[http://www.parashift.com/c++-faq-lite/ C++ FAQ] An excellent guide to the many problems encountered when writing C++ and how to avoid them.
*[http://www.amazon.com/exec/obidos/tg/detail/-/0130384747/002-6409742-5712035?v=glance C++ How to Program] Although it's a commercial volume, it is an excellent introduction to the language.

If the above aren't enough there are links to more free C++ books here: http://www.freeprogrammingresources.com/cppbooks.html.

For humour you might be interested in: [http://www.lysator.liu.se/c/ten-commandments.html The Ten Commandments for C Programmers] (C++ is based on C). However the advice given should be taken with a pinch of salt!

[[Category:Engine Dev]]</text>
      <sha1>srs33le578c2yh3n75020y0mhya3e0p</sha1>
    </revision>
  </page>
  <page>
    <title>Lego Spring</title>
    <ns>0</ns>
    <id>1917</id>
    <revision>
      <id>21276</id>
      <parentid>21194</parentid>
      <timestamp>2011-02-24T16:53:11Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="823">{{historical}}
The idea to create a Spring Game based on/around LEGO came up over 9000 times but all the projects died pretty quickly.

If you search the catacombs of the forum, you can find some threads with screenshots:

http://springrts.com/phpbb/viewtopic.php?f=14&amp;t=1775&amp;hilit=lego+mod

http://springrts.com/phpbb/viewtopic.php?f=14&amp;t=14118&amp;hilit=lego+mod

----

SO HELP ME IF I SEE MY PAGES ADVERT-EDITED AGAIN I WILL PERSONALLY MAKE SURE THAT YOU NEVER SEE THE LIGHT OF DAY AGAIN.

Ummm this mod was released....

I have the mod but the link is gone....

|[FLCL]rcdraco[CoTBT]| 

Umm I guess I can email it to you if you want...

Just message me if I'm on in Spring Multiplayer Battleroom if you want it....

Not a stable or public release, which is why we haven't listed it as such. - Neddiedrow


[[Category:Mods]]</text>
      <sha1>a7frve0r1r0xxhbwqd007p6z9xc43zh</sha1>
    </revision>
  </page>
  <page>
    <title>Lesson 1 : Hello World</title>
    <ns>0</ns>
    <id>3435</id>
    <redirect title="Chili:Tutorial Hello World" />
    <revision>
      <id>26100</id>
      <timestamp>2013-02-16T17:54:07Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>Flozi moved page [[Lesson 1 : Hello World]] to [[Chili:Tutorial Hello World]]: Page prefix ploz</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="40">#REDIRECT [[Chili:Tutorial Hello World]]</text>
      <sha1>3gji0ex6s7k02jmcamvibj5qez6i3f0</sha1>
    </revision>
  </page>
  <page>
    <title>Lesson 2 : Dynamicly change label content</title>
    <ns>0</ns>
    <id>3436</id>
    <redirect title="Chili:Tutorial Dynamic Label Content" />
    <revision>
      <id>26102</id>
      <timestamp>2013-02-16T17:55:06Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>Flozi moved page [[Lesson 2 : Dynamicly change label content]] to [[Chili:Tutorial Dynamic Label Content]]: Page prefix ploz</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="50">#REDIRECT [[Chili:Tutorial Dynamic Label Content]]</text>
      <sha1>02fjarx2xwv6f9oab100b0xtbk31mdl</sha1>
    </revision>
  </page>
  <page>
    <title>Lesson 3 : Command and Build commands in a chili window</title>
    <ns>0</ns>
    <id>3437</id>
    <redirect title="Chili:Tutorial Command and Build Commands" />
    <revision>
      <id>26104</id>
      <timestamp>2013-02-16T17:55:50Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>Flozi moved page [[Lesson 3 : Command and Build commands in a chili window]] to [[Chili:Tutorial Command and Build Commands]]: Page prefix ploz</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="55">#REDIRECT [[Chili:Tutorial Command and Build Commands]]</text>
      <sha1>sa68o8tb6os9ka4owo5kcwgxy9xrhhc</sha1>
    </revision>
  </page>
  <page>
    <title>Licenses Forking Mutators</title>
    <ns>0</ns>
    <id>3775</id>
    <revision>
      <id>30317</id>
      <parentid>30315</parentid>
      <timestamp>2016-12-16T08:22:50Z</timestamp>
      <contributor>
        <username>Silentwings</username>
        <id>2883</id>
      </contributor>
      <comment>/* FAQ: */  add note about https://springrts.com/phpbb/posting.php?mode=reply&amp;f=1&amp;t=35828#pr580531</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6328">[[Main_Page|Wiki]] &lt; [[Community_Docs|Community]] &lt; {{FULLPAGENAME}}

=Guidelines on licensing, forks and mutators within the Spring community=

==Licensing for content devs, in brief:==

We think a package of content for Spring (e.g. sdz, sd7) is not a &quot;single work&quot; derived of the engine in the terms of the GPL. A package of content may consist of multiple independent works, each of which may be covered by a different license.

We generally view '''code''' that is necessarily read/executed by the Spring engine, as linking to the engine. As a result, since the engine is licensed under GPL, we think that such code requires a GPL compatible license. This typically applies to widgets, gadgets, scripts, shaders, CEGs, unit defs, etc.

All other content that you create, such as '''artwork''', can be licensed however you wish. That said, we encourage you to use open source copyleft licenses, and make your content free for anyone to use and modify.

Details can be found in https://springrts.com/phpbb/viewtopic.php?f=1&amp;t=17847. Please remember that on our forums we require that discussion of specific projects licensing is &quot;in very good faith and a highly positive and productive manner&quot; ;)

==Forks and mutators:==

As a general rule, Spring encourages content sharing whilst also discouraging unwanted imitation of existing content.

A '''mutator''' (of map or mod type) built on game X should make it explicitly clear in its name that it will modify/augment content from X.

A '''fork''' of game X should have a clearly distinct name and versioning scheme, and a clearly visible difference to the content of the most recent release of X.

In both cases:
* The license(s) of game X should be respected;
* Names, version numbers and other branding should not attempt to imitate the original game X;
* Promotion (including promotion by players) should not take place within the infrastructure of game X;
* A non-technical description of the changes/mutations made from (a named version of) game X should be made publicly available on Springs forums - in a release post, change-log, or similar; 

Exceptions to these conditions may occur only if the developers of game X have given permission for them.

When these conditions are satisfied, mutators and forks of existing games may be used on Springs server. Where possible, the mutator/fork can initialize data (ingame times, TrueSkill scores, etc) within Springs infrastructure from a copy of similar data that Spring already holds related to game X.

In practice, within Spring:
* If you develop a game and feel that a mutator/fork of your project is not following these guidelines, contact Springs moderators.
* If you want to fork/mutate a game, we encourage you to contact its developers first.

=FAQ:=

(Q) &quot;What about '''procedurally generated art''', or artwork such as a story-line that happens to be stored within a lua file?&quot; &lt;br /&gt;
(A) This is a grey area, and in some cases there may not be a clear answer. A lua gadget that generates art is code and should be GPL compatible, but a file containing a lua table with one sentence of a story on each line could reasonably be viewed as artwork.

(Q) &quot;I want to make a '''commercial game'''. How can I protect my rights to license it?&quot; &lt;br /&gt;
(A) You may use a restrictive license for your artwork, although we'd prefer that you didn't! At the very least, if you stop making/selling your game we hope that you would re-license all your content freely.

(Q) &quot;I want to develop/distribute a '''game agnostic utility or library''', with game X included as an example, but I need to make modifications to X for this. Can I?&quot; &lt;br /&gt;
(A) Yes. As long as you respect the license of X and stick to modifying the technical stuff needed for your own work, we won't consider it to be affected by these guidelines.

(Q) &quot;I store some '''data related to game X''' on my own servers, do I have to share this data to a fork of game X?&quot; &lt;br /&gt;
(A) No, it's your data. But if you'd like your data/project to be viewed as &quot;within Spring's infrastructure&quot; for the purposes of these guidelines, then let us know.

(Q) &quot;I want to make a fork or mutator of X but the maintainers of X refuse to endorse it. Can I still do it?&quot; &lt;br /&gt;
(A) Yes, as long as the guidelines above are followed by both yourself and your players.

(Q) &quot;Should I make '''a fork or a mutator'''?&quot; &lt;br /&gt;
(A) In general, mutators should be used by projects that, as part of their own development, usually incorporate changes found in new releases of their parent game - such as an added-on &quot;King of the Hill&quot; or &quot;Tower Defence&quot; mode. Forks should be used by projects that tend not to incorporate innovations found in new releases of their parent game.

(Q) What is a &quot;clearly visible difference to the content of the most recent release of X&quot;? &lt;br /&gt;
(A) A difference that, if it was present in a typical game of the most recent release of X, would be noticed and reacted to by most (and ideally, all) of the players.

(Q) &quot;I want my game to share infrastructure from another game (hosts, content distribution, forum, etc). Can it?&quot; &lt;br /&gt;
(A) Not unless the developers of the other game want it to.

(Q) &quot;I am a developer, can I impose additional conditions on how people use my content within Spring?&quot; &lt;br /&gt;
(A) Yes, as long as they don't conflict with the guidelines above. We would prefer you to do it via your license. Note that, if you wish to use Springs content distribution systems (rapid, SpringFiles, etc), your license(s) must allow us to distribute your content!

(Q) &quot;What will happen if I, or other users of my content, break these guidelines?&quot; &lt;br /&gt;
(A) Typically, we may withhold use of Spring's infrastructure (such as the forum, lobby server, rapid, SpringFiles, botflags, etc) and may remove offending content. In serious cases we may issue warnings and bans.

(Q) &quot;What about games containing OTA content? What about different points of view of GPL, packages and linking?&quot; &lt;br /&gt;
(A) See https://springrts.com/phpbb/viewtopic.php?f=1&amp;t=17847 and https://springrts.com/wiki/Felony#11.

(Q) &quot;Who takes decisions to cover '''grey areas and disputes'''? Who updates/modifies these guidelines?&quot; &lt;br /&gt;
(A) Spring's moderators and administrators. Note that these are our community guidelines; this is NOT a legal document.

[[Category:Spring]]</text>
      <sha1>5am1sv6gfzs1bqvaxlfrzgcihc1gw8g</sha1>
    </revision>
  </page>
  <page>
    <title>Links</title>
    <ns>0</ns>
    <id>3243</id>
    <revision>
      <id>31620</id>
      <parentid>31619</parentid>
      <timestamp>2021-08-27T11:09:25Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>/* Statistics */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2543">[[Engine Development|Development]] &lt; {{FULLPAGENAME}}

= Community Links =
*[[Associated_Development_Groups|Associated Development Groups]] - various forums etc
*[http://springfiles.springrts.com/ SpringFiles] - download page for maps &amp; games
*[http://weblobby.springrts.com WebLobby]
*[[mumble|mumble server]]
*[http://feeds.feedburner.com/SpringCommunityHeadlines SpringInfo Community News]
*[http://replays.springrts.com/ Spring Replays]

= Development Links&lt;br/&gt; =

*[http://stacktranslate.springrts.com Stacktrace Translator]
*[http://springrts.com/mantis/ Mantis] - place to report engine bugs, problems &amp; (minor) feature requests
*[http://buildbot.springrts.com/waterfall?reload=30 buildbot waterfall]
*[http://springrts.com/dl/buildbot/default/ spring engine development builds]
*[[Rapid]] - the games download api

= Repo. Links =
== Engine &amp; Content ==
*[https://github.com/spring Spring github repo]
*[[Gamedev:PublicRepos | Game Repos]] - Publicly readable game repos
=== [https://github.com/jk3064/ jK's lua repos] ===
*[https://github.com/jk3064/Map-Blueprint Map Blueprint] - basic container to create new maps ([[MakingMapsWithBluePrintAndMapConv |see]])
*[https://github.com/jk3064/chiliui Chili] - a lua based gui framework
*[https://github.com/jk3064/chili_loadscreen Chili Loadscreen] - a chili based loadscreen
*[https://github.com/jk3064/Custom-Unit-Shader-Framework CustomUnitShaders] - a lua based per-unit shader framework (includes normalmap support)

== Lobby Server &amp; Clients ==
*[[uberserver]] - the lobby server
*[http://code.google.com/p/zero-k/ ZKLobby's google code page] - a .net lobby
*[[SpringLobby]] - a wxWidgets lobby
*[https://github.com/cleanrock/flobby flobby] - a FLTK based lobby (linux only)

== AutoHosts (dedicated servers) ==
*[[SPADS]]
*[[Springie]] - mainly used by ZK

== Content Downloaders == 
*[[pr-downloader]] - an unified download app &amp; lib (can dl from plasma, rapid, ...)
*[https://github.com/spring/RapidTools rapid server tools] - tools to create a rapid repository
*[[Plasma]] - a torrent based download system (mostly for maps, games should use rapid)

== Tools ==
*[[Upspring]]
*[[MapConv]]
*[[MapConvNG]]

= SpringFiles API =
*[https://springfiles.springrts.com/json.php json api]
*[https://github.com/springfiles/upq/blob/master/doc/exampleclient.py example client]

= Miscellaneous =

*[https://packages.springrts.com Rapid Upload Interface] - Mappers &amp; GameDevs can upload their files via it

= Statistics =

*[http://zero-k.info/stats/ lobby stats]

[[Category:Development]]</text>
      <sha1>5tdg4pclmv9smy4absmyzp9x1tr9mix</sha1>
    </revision>
  </page>
  <page>
    <title>Linux</title>
    <ns>0</ns>
    <id>949</id>
    <redirect title="SetupGuide" />
    <revision>
      <id>14351</id>
      <parentid>13474</parentid>
      <timestamp>2008-03-25T01:08:06Z</timestamp>
      <contributor>
        <username>Vadi</username>
        <id>2424</id>
      </contributor>
      <comment>The Linux port is complete; and the information was outdated. Better to lead people to the updated linux setup guide.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="24">#REDIRECT [[SetupGuide]]</text>
      <sha1>6e0pugiihh7u3hbq1ir04dlw32u2gaj</sha1>
    </revision>
  </page>
  <page>
    <title>Linux:Packaging</title>
    <ns>0</ns>
    <id>2919</id>
    <revision>
      <id>31721</id>
      <parentid>30701</parentid>
      <timestamp>2021-12-21T12:38:55Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>/* Gentoo */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4924">[[Linux|Linux Setup Guide]] &lt; {{FULLPAGENAME}}

= Linux Packaging =

== Notification ==

[http://springrts.com/phpbb/feed.php?mode=news RSS feed for upcoming releases] (''News'' forum feed)

Usually, releases get promoted one day before being set live on the server.

== Packagers ==

Nicknames and how to best contact them.


=== [[Ubuntu_install|Ubuntu]] ===
{{navimg|xsize=48|ysize=48|image=Distributions-ubuntu.png|link=Ubuntu_install}}

'''koshi''' - [http://springrts.com/phpbb/memberlist.php?mode=viewprofile&amp;u=5787 Forum: ''koshi''], Lobby: ''_koshi_''

'''det''' - [http://springrts.com/phpbb/memberlist.php?mode=viewprofile&amp;u=1213 Forum: ''det''], Lobby: ''det[THE]dave''

'''Tobi''' - [http://springrts.com/phpbb/memberlist.php?mode=viewprofile&amp;u=596 Forum: ''Tobi''], Lobby: ''[RoX]Tobi''

'''YokoZar''' - [http://springrts.com/phpbb/memberlist.php?mode=viewprofile&amp;u=5670 Forum: ''YokoZar''], Lobby: ''???''

=== [[Debian_install|Debian]] ===
{{navimg|xsize=48|ysize=48|image=Distributions-debian.png|link=Debian_install}}
'''mammadori''' - [http://springrts.com/phpbb/memberlist.php?mode=viewprofile&amp;u=9045 Forum:''mammadori''], Lobby:''*mammadori*??''

'''jandd''' - [http://springrts.com/phpbb/memberlist.php?mode=viewprofile&amp;u=9301 Forum:''jandd''] &amp; [http://springrts.com/phpbb/memberlist.php?mode=viewprofile&amp;u=9727 ''gilboa''], Lobby:''*jandd*??''

=== [[Slackware_install|Slackware]] ===
{{navimg|xsize=48|ysize=48|image=Distributions-slackware.png|link=Slackware_install}}

'''MelKor''' - [http://springrts.com/phpbb/memberlist.php?mode=viewprofile&amp;u=10340 Forum:''MelKor'' ], Lobby:''*MelKor*??''

'''1467''' - [http://springrts.com/phpbb/memberlist.php?mode=viewprofile&amp;u=10639 Forum:''1467'' ], Lobby:''*1467*??''

=== [[Mandriva_install|Mandriva]] ===
{{navimg|xsize=48|ysize=48|image=Distributions-mandriva_linux.png|link=Mandriva_install}}
&lt;font color=&quot;red&quot;&gt;(no one?)&lt;/font&gt;


=== [[OpenSUSE_install|OpenSUSE]] ===
{{navimg|xsize=48|ysize=48|image=Distributions-opensuse_linux.png|link=OpenSUSE_install}}

=== [http://projects.springlobby.info/projects/springlobby/wiki/Install#Fedora-10 Fedora] ===
{{navimgx|xsize=48|ysize=48|image=Distributions-fedora.png|link=http://projects.springlobby.info/projects/springlobby/wiki/Install#Fedora-10}}
'''gilboa''' - [http://springrts.com/phpbb/memberlist.php?mode=viewprofile&amp;u=9727 Forum:''gilboa'']

=== [[Gentoo_install|Gentoo]] ===
{{navimg|xsize=48|ysize=48|image=Distributions-gentoo.png|link=Gentoo_install}}

== Guidelines ==

''Note:'' This section is only of interest for Linux package maintainers.

Here we outline the packaging scheme currently recommended by the engine development team.

=== Binary Distros ===

We recommend using &lt;code&gt;CMAKE_BUILD_TYPE=RELWITHDEBINFO&lt;/code&gt;, and later splitting the debug symbols off into separate files with a command like this:

&lt;font color=&quot;#77DD00&quot;&gt;&lt;code&gt;&lt;pre&gt;
#!/bin/sh

MINGW_HOST=&quot;i586-mingw32msvc-&quot; # depends on your version of MinGW
if [ $(expr match &quot;${TARGET_OS}&quot; 'win') -gt 0 ]; then
	# when compiling for windows
	HOST_PREFIX=&quot;${MINGW_HOST}&quot;
	FILE_LIST=&quot;spring.exe spring-dedicated.exe spring-headless.exe unitsync.dll $(find AI/Skirmish -name SkirmishAI.dll | xargs echo)&quot;
else
	# when compiling for linux
	HOST_PREFIX=&quot;&quot;
	FILE_LIST=&quot;spring spring-dedicated spring-headless libunitsync.so $(find AI/Skirmish -name libSkirmishAI.so | xargs echo)&quot;
fi

for toStripFile in ${FILE_LIST}; do
	if [ -f &quot;${toStripFile}&quot; ]; then
		debugFile=${toStripFile}.dbg
		echo &quot;stripping debug-symbols from ${toStripFile} to ${debugFile} ...&quot;
		# create debugFile
		${HOST_PREFIX}objcopy --only-keep-debug ${toStripFile} ${debugFile}
		# strip toStripFile
		${HOST_PREFIX}strip --strip-debug --strip-unneeded ${toStripFile}
		# connect debugFile to toStripFile
		# This should only be done if you want to painlessly use GDB.
		# For getting a translated stack-trace in infolog.txt, this is not required.
		# It will slow down spring a lot at runtime, if you do this,
		# and keep the debug symbols around.
		#${HOST_PREFIX}objcopy --add-gnu-debuglink=${debugFile} ${toStripFile}
	fi
done
&lt;/pre&gt;&lt;/code&gt;&lt;/font&gt;

'''main packages (''package'' ~ ''deps''):'''
&lt;pre&gt;
springrts-gamedata
springrts-engine-default ~ springrts-gamedata
springrts-engine-default-dbg ~ springrts-engine
springrts-engine-dedicated
springrts-engine-dedicated-dbg ~ springrts-engine-dedicated
springrts-engine-headless ~ springrts-gamedata
springrts-engine-headless-dbg ~ springrts-engine-headless
springrts-unitsync ~ springrts-gamedata
springrts-unitsync-dbg ~ springrts-unitsync
&lt;/pre&gt;

'''meta packages:'''
&lt;pre&gt;springrts-engine ~ springrts-engine-default
springrts-engine-dbg ~ springrts-engine springrts-engine-default-dbg
springrts ~ springrts-engine unitsync
springrts-dbg ~ springrts springrts-engine-dbg unitsync-dbg
&lt;/pre&gt;

=== Source Distros ===

&lt;pre&gt;
springrts [default -dedicated -headless unitsync]
&lt;/pre&gt;

[[Category:Linux]]</text>
      <sha1>i46ybt2g384o20unu4ytxhks7t9apv1</sha1>
    </revision>
  </page>
  <page>
    <title>Lobby Bots</title>
    <ns>0</ns>
    <id>2392</id>
    <revision>
      <id>27695</id>
      <parentid>27689</parentid>
      <timestamp>2013-10-03T13:42:15Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3007">There are some bots on the springrts.com lobby server:

* [[ChanServ]] the lobby servers own bot for managing channels.
* [[MelBot]] A nub bot with a bit of relay and notification functionality.

=== uberbot ===

In various channels.


Channel founders will soon be able to request his presence in their channel, for now: ask one of his admins (only aegis at the moment).

In channels he has op status in: he auto-unmutes the founder, functions as a banbot (or allow bot, kicks users not on the whitelist), and more later.

Your channel config (banlist, oplist, founder) is completely separate from other channels (founder is automatically loaded by asking chanserv).

=== X_death23_X ===

tombom's bot... haven't seen it in a while &lt;_&lt;

in channels: #unknown, #ca, #s44

*'''!delaypm &lt;user&gt; &lt;message&gt;'''&lt;br&gt;Sends a PM with &lt;message&gt; to &lt;user&gt; as soon as he gets online.
*'''!help'''&lt;br&gt;Displays a list of all commands. Only useful ones are listed on this page (and they aren't even included in the !help).
*'''!viewpolls'''&lt;br&gt;Displays all the polls you can participate in.
*'''!viewpollopts &lt;pollnum&gt;'''&lt;br&gt;Displays the options (for example Yes/No) of poll &lt;pollnum&gt; (as displayed by !viewpolls).
*'''!votepoll &lt;pollnum&gt; &lt;optionnum&gt;'''&lt;br&gt;Participates in poll &lt;pollnum&gt; and votes for option &lt;optionnum&gt; (as displayed by !viewpollopts).
*'''!viewpollresults &lt;pollnum&gt;'''&lt;br&gt;Displays the current results of poll &lt;pollnum&gt;.

=== MessageBot ===

MidKnight's message-sending bot, in a variety of channels, including #main.
 
Ask MidKnight if you want it to join your channel. 

*'''!message &lt;receiver&gt; &lt;message&gt;'''&lt;br&gt;Relays your message to the designated receiver when they next come online. 
*'''!help'''&lt;br&gt;Displays some information about MessageBot.

== Information ==

There are also several bots that just login, post news and logoff:

=== CommitBot ===

*CommitBot posts details about each commit (change) to the [http://spring.clan-sy.com/fisheye/browse/Spring/ Spring source] in the channels  #commits and #news.

=== FileBot ===

*FileBot posts details about each file that is added to [http://spring.unknown-files.net/ Unknown Files] in #unknown and in #news.

=== Forum ===

*Forum posts a link to each new post in the [http://spring.clan-sy.com/phpbb/index.php Spring message board] in #forum and in #news.&lt;br&gt;It checks for new posts every 5 minutes.

=== IceUI ===

*IceUI posts details about each commit (change) to the [http://spring.clan-sy.com/phpbb/viewtopic.php?t=8779 IceUI] [https://meltrax.homeip.net/svn/IceUI/ source] in the channels #commits and #news.

=== League ===

*League posts details about each [http://www.spring-league.com/ ladder game] that took place to the channels #league and #news.&lt;br&gt;It checks the ladder site every 15 minutes for new game results.

=== RevisionNinja ===

*RevisionNinja posts details about each commit (change) to the [http://www.caspring.org/ Complete Annihilation] [http://www.caspring.org/browser source] in #ca and in #news.

[[Category: Lobby]]</text>
      <sha1>htql8gsytcv6ch6dqvf64vn3k2vpxem</sha1>
    </revision>
  </page>
  <page>
    <title>Lobby Comparison</title>
    <ns>0</ns>
    <id>3768</id>
    <revision>
      <id>30265</id>
      <parentid>30264</parentid>
      <timestamp>2016-10-11T00:36:59Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="699">WARNING: this is WIP and not correct for now!


(features which every lobby has aren't listed)

{| class=&quot;wikitable&quot;
| unique Features
| [[SpringLobby]]
| [[Lobby_Development#Zero-K_Lobby|Zero-K Lobby]]
| [[Lobby_Development#Weblobby|Weblobby]]
| [[Chobby]]
|-
| [[Uberserver|official spring lobby server]]
| ✓
|
| ✓
| ✓
|-
| Zero-K lobby server
|
| ✓
| ✓
| ✓
|-
| relayhost
| ✓
|
|
|
|-
| singleplayer (vs ai, offline)
| ✓
|
|
| ✓
|-
| offline watch replays
| ✓
|
|
|
|-
| missions (online)
|
| ✓
| ✓
|
|-
| host game
| ✓
|
|
|
|-
|}

Features which all lobbies have:

* automatic download of map/game/engine
* online multiplayer
* online singleplayer


[[Category:Lobby]]</text>
      <sha1>4hf3duu6p187sw3duskzvibbno4v5gk</sha1>
    </revision>
  </page>
  <page>
    <title>Lobby Development</title>
    <ns>0</ns>
    <id>2671</id>
    <revision>
      <id>31157</id>
      <parentid>31156</parentid>
      <timestamp>2019-12-24T17:03:14Z</timestamp>
      <contributor>
        <username>Silentwings</username>
        <id>2883</id>
      </contributor>
      <minor/>
      <comment>/* Protocol */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4690">[[Engine_Development|Development]] &lt; {{FULLPAGENAME}}

=Live systems=

===Protocol===
* [https://springrts.com/dl/LobbyProtocol/ProtocolDescription.html Spring Lobby Protocol Description] 
* [https://springrts.com/dl/LobbyProtocol/ProtocolDescription.html#Changelog changelog]
* [http://springrts.com/dl/LobbyProtocol/ Index of commands]
These are both updated once per day from [https://github.com/spring/LobbyProtocol/blob/master/ProtocolDescription.xml the raw xml docs]

===Server:===

===[[Uberserver]]===
&lt;font color=&quot;orange&quot;&gt;cross-platform&lt;/font&gt;,
&lt;font color=&quot;#00AAFF&quot;&gt;Python&lt;/font&gt;,
by &lt;font color=&quot;#00CC00&quot;&gt;aegis, abma, silentwings&lt;/font&gt;

* The primary lobby server currently running on springrts.com. See the dedicated page on [[uberserver]] for more info.

===[[Download_Systems]]===
Various systems exist to supply content, see the dedicated page [[Download_Systems]].


===Lobby clients:===

===[[SpringLobby]]===
&lt;font color=&quot;orange&quot;&gt;Linux, Windows, Mac &lt;/font&gt;,
&lt;font color=&quot;#00AAFF&quot;&gt;C++&lt;/font&gt;,
by &lt;font color=&quot;#00CC00&quot;&gt;Koshi, Braindamage, Abma and many others &lt;/font&gt;

[https://github.com/springlobby/springlobby github: repository + issues]

===[[Chobby]]===
&lt;font color=&quot;orange&quot;&gt;Windows&lt;/font&gt;,
&lt;font color=&quot;#00AAFF&quot;&gt;Lua&lt;/font&gt;,
by &lt;font color=&quot;#00CC00&quot;&gt;gajop, with major contributions from various game devs&lt;/font&gt;

[https://github.com/Spring-Chobby/Chobby github: repository + issues]



=Zero-K systems=

===ZeroK Server===
&lt;font color=&quot;orange&quot;&gt;cross-platform&lt;/font&gt;,
&lt;font color=&quot;#00AAFF&quot;&gt;C#&lt;/font&gt;,
by &lt;font color=&quot;#00CC00&quot;&gt;Licho&lt;/font&gt;

Zero-K lobby server. Uses a different protocol. Source can be found at
https://github.com/ZeroK-RTS/Zero-K-Infrastructure/tree/master/ZkLobbyServer

===Zero-K Lobby===

No longer uses the Spring lobby protocol

&lt;font color=&quot;orange&quot;&gt;Windows/Linux&lt;/font&gt;,
&lt;font color=&quot;#00AAFF&quot;&gt;C#&lt;/font&gt;,
by &lt;font color=&quot;#00CC00&quot;&gt;Licho&lt;/font&gt; &amp; &lt;font color=&quot;#00CC00&quot;&gt;quantum&lt;/font&gt; 

[https://github.com/ZeroK-RTS/Zero-K-Infrastructure/tree/master/ZeroKLobby Zero-K Lobby github]



=Legacy systems=

==Legacy lobby clients==

From mostly functional, to WIP, abandoned or unusable. Apparently, its much harder to make a lobby client than most people think.

===flobby===
&lt;font color=&quot;orange&quot;&gt;Linux&lt;/font&gt;,
&lt;font color=&quot;#00AAFF&quot;&gt;C++&lt;/font&gt;,
by &lt;font color=&quot;#00CC00&quot;&gt;cleanrock&lt;/font&gt;, only maintained actively for use with the Zero-K lobbyserver.

[https://github.com/cleanrock/flobby github page]

===Weblobby===
&lt;font color=&quot;orange&quot;&gt;cross-platform&lt;/font&gt;,
&lt;font color=&quot;#00AAFF&quot;&gt;C++&lt;/font&gt;,
&lt;font color=&quot;#FF0000&quot;&gt;unmaintained&lt;/font&gt; (superceeded by Chobby)

[http://weblobby.springrts.com project site]

===[[TASClient]]===
&lt;font color=&quot;orange&quot;&gt;Windows&lt;/font&gt;,
&lt;font color=&quot;#00AAFF&quot;&gt;Delphi&lt;/font&gt;,
by &lt;font color=&quot;#00CC00&quot;&gt;Satirik&lt;/font&gt;, &lt;font color=&quot;#FF0000&quot;&gt;unmaintained&lt;/font&gt;

===Alphalobby===
&lt;font color=&quot;orange&quot;&gt;Windows&lt;/font&gt;,
&lt;font color=&quot;#00AAFF&quot;&gt;C&lt;/font&gt;,
&lt;font color=&quot;#FF0000&quot;&gt;unmaintained&lt;/font&gt;

Alphalobby is still very much work in progress. If you still wish to use it, source available from the [http://code.google.com/p/alphalobby/source/checkout mercurial repository], binary available on the [http://springfiles.com/spring/lobby-clients/alphalobby springfiles page].

===CheeseLobby===
&lt;font color=&quot;orange&quot;&gt;cross-platform&lt;/font&gt;,
&lt;font color=&quot;#00AAFF&quot;&gt;Java&lt;/font&gt;,
by &lt;font color=&quot;#00CC00&quot;&gt;Cheesecan&lt;/font&gt;, &lt;font color=&quot;#FF0000&quot;&gt;unmaintained&lt;/font&gt;

[http://springrts.com/phpbb/viewtopic.php?f=64&amp;t=24905 forum thread]

[https://github.com/jahwag/OpenLobby binaries and code]

===QtLobby===
&lt;font color=&quot;orange&quot;&gt;cross-platform&lt;/font&gt;,
&lt;font color=&quot;#00AAFF&quot;&gt;C++&lt;/font&gt;,
&lt;font color=&quot;#FF0000&quot;&gt;unmaintained&lt;/font&gt;

[https://github.com/tizbac/qtlobby project page]

===Spring-PythonBotFramework===
&lt;font color=&quot;orange&quot;&gt;cross-platform&lt;/font&gt;,
&lt;font color=&quot;#00AAFF&quot;&gt;Python&lt;/font&gt;, by
&lt;font color=&quot;#00CC00&quot;&gt;BrainDamage&lt;/font&gt; &amp; &lt;font color=&quot;#00CC00&quot;&gt;koshi&lt;/font&gt;, &lt;font color=&quot;#FF0000&quot;&gt;unmaintained&lt;/font&gt;

A bot framework written in python. [https://github.com/renemilk/tasbot/wiki GitHub wiki]

===Go SpringLobbyClient===
&lt;font color=&quot;orange&quot;&gt;cross-platform&lt;/font&gt;,
&lt;font color=&quot;#00AAFF&quot;&gt;Go&lt;/font&gt;
&lt;font color=&quot;#FF0000&quot;&gt;unmaintained&lt;/font&gt;

A simple client implementation of the lobby protocol in Go.
[https://github.com/Agon/go-slc/ project page]

==Legacy lobbyservers==
===SpringLS===
&lt;font color=&quot;orange&quot;&gt;cross-platform&lt;/font&gt;,
&lt;font color=&quot;#00AAFF&quot;&gt;Java&lt;/font&gt;,
&lt;font color=&quot;#00CC00&quot;&gt;hoijui&lt;/font&gt;

Legacy lobby server, created by Betalord. Superceeded by uberserver in 2012. You can fetch the sources through ''git''. Details can be found on the [http://github.com/spring/SpringLS development site].


[[Category: Lobby]]</text>
      <sha1>2wim0uz3v2f6264eo55hiygnyq31pdl</sha1>
    </revision>
  </page>
  <page>
    <title>Lobby on MacOSX</title>
    <ns>0</ns>
    <id>2008</id>
    <revision>
      <id>21455</id>
      <parentid>19060</parentid>
      <timestamp>2011-03-03T16:16:03Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="523">{{deprecated}}
Someone please update this page with currently working lobbies, the infos here were obsolete and not true anymore. &lt;Brain Damage&gt;

== SpringLobby ==

''' Status '''

Unknown. Builds and runs on OSX but has not been tested properly. If you test it please tell the SpringLobby team about it. You find the information you need at [http://springlobby.info springlobby.info] or in #springlobby@freenode.

''' Known Bugs '''

None, needs more testing.


== AF Lobby ==

''' Status '''

Not in development any more.</text>
      <sha1>lmnmj722gown8bx7yx648sasajeke42</sha1>
    </revision>
  </page>
  <page>
    <title>Loop scripts</title>
    <ns>0</ns>
    <id>3489</id>
    <revision>
      <id>27025</id>
      <parentid>26655</parentid>
      <timestamp>2013-04-27T10:15:34Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>categorise</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1500">=loop scripts=
:this loop make thing repetably from a counter or a condition or forever with possible exit
:
==condition are checked by :==
&lt;code&gt;&lt;big&gt;
::== 
::&gt; 
::&lt; 
::=&gt; 
::&lt;= 
::~=
&lt;/big&gt;&lt;/code&gt;
:
:
==values can be :==
:&lt;big&gt;bool&lt;/big&gt;(booleans): 
&lt;code&gt;
::true 
::false
&lt;/code&gt;
:&lt;big&gt;empty&lt;/big&gt;(nothing):
&lt;code&gt;
:: nil
&lt;/code&gt;
:&lt;big&gt;string&lt;/big&gt;(text):
&lt;code&gt;
:: &quot;abc123&quot;
&lt;/code&gt;
:&lt;big&gt;INT&lt;/big&gt; (numders):
&lt;code&gt;
:: 123
&lt;/code&gt;
:&lt;big&gt;FLOAT&lt;/big&gt;(number with decimal):
&lt;code&gt;
:: 0.5555
&lt;/code&gt;
:&lt;big&gt;variables&lt;/big&gt;(data storage):
&lt;code&gt;
:: test1
&lt;/code&gt;
:
:
==condition are:==
*if then elseif then else end
&lt;code&gt;
:if condition_is_true then something elseif another_condition_is_true then anotherthing else default_thing end
&lt;/code&gt;
:exemple:
&lt;code&gt;
local a=0 b=10 c=100
if 
a=1
then 
a=a+1
elseif 
a&gt;0 and a~=1 and b&lt;c
then b=b+1
else 
a=0 b=0
end
&lt;/code&gt;
:
:
==the basic loop are :==
:
*repeat until
&lt;code&gt;
repetat something until condition_is_true 
&lt;/code&gt;
:exemple:
&lt;code&gt;
local a=0
repeat 
a=a+1 
Spring.Echo(a)
until a==10
&lt;/code&gt;
:

*while do end
&lt;code&gt;
:while condition_is_true do something end
&lt;/code&gt;
:exemple:
&lt;code&gt;
local a=0 b=1
while 
(a~=10 
and 
b&lt;999) 
or
a&lt;10
do
Spring.Echo(a)
a=a+1
end 
&lt;/code&gt;
:
:

==forever loop==
:just use a condition always true
:as:
&lt;code&gt;
local a=1
repeat 
a=a+1
until 
a==0
&lt;/code&gt;
&lt;code&gt;
local a=1
while 
true
do 
a=a+1 
end
&lt;/code&gt;

&lt;code&gt;

&lt;/code&gt;







*[[SpringRtsTutorialAnimDef]] return to the list of animDef exemples
[[Category:Emmanuel]]</text>
      <sha1>696gtl7vyz11hrej2uxmogmu8sh9ck0</sha1>
    </revision>
  </page>
  <page>
    <title>Lua-LuaCOB</title>
    <ns>0</ns>
    <id>2074</id>
    <revision>
      <id>27923</id>
      <parentid>19058</parentid>
      <timestamp>2013-10-29T18:19:38Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>Flozi moved page [[Units:LuaCOB]] to [[Lua-LuaCOB]] without leaving a redirect: standardise</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6366">{{deprecated}}
[[Engine_Development|Development]] &lt; [[Lua_Scripting|Lua Scripting]] &lt; {{FULLPAGENAME}}


'''&lt;font size=&quot;4&quot;&gt;&lt;font color=&quot;red&quot;&gt;NOTE&lt;/font&gt; LuaCob will merged with LuaRules in 76b2&lt;/font&gt;'''

=Introduction=
To use Lua code in your BOS/COB files, you can either include the gadgetHandler (include it in the mod, see the CA mod or include it from the springcontent.sdz) or you create your own enviroment:
*create a mod-level directory LuaCOB/,
*make a LuaCOB/main.lua file. (Note: it's LuaRules/main.lua now)
Any additional files need to be included with a

 include(&quot;LuaCOB/additional_file.lua&quot; [, fenvTable])

If you don't know what a fenvTable is, don't worry, you probably don't need it anyway.
More information can be found on [http://www.lua.org the Lua site]. It it highly recommended to read the manual and the tutorials found there. Note that Spring 76b1 used Lua version is 5.1.2, so please take note which version of the manual you're reading.

Also note that the usual Lua functions for executing code in other files (&lt;tt&gt;dofiles()&lt;/tt&gt;, &lt;tt&gt;require()&lt;/tt&gt;) are disabled for technical reasons.

=Interfacing COB-&gt;Lua=
All Lua functions that are called by COB are given three parameters:
*unitID - ID of the unit calling the function,
*unitDefID - ID of the unitDef,
*teamID - self-explanatory.
You can call scripts with any (enough for all practical purpouses) amount of additional arguments.

Example functions:

  function GetNearestEnemy(unitID, unitDefID, teamID, radius)
    local px, py, pz = Spring.GetUnitPosition(unitID)
    if (px == nil) then
      return
    end
       
    local nearDist = 1.0e20
    local nearUnit
    local units = Spring.GetUnitsInCylinder(px, pz, radius)
    for _,enemyID in ipairs(units) do
      if (not Sim.IsUnitAllied(enemyID)) then             
        local ex, ey, ez = Spring.GetUnitPosition(enemyID)
        if (ex ~= nil) then
          local dx, dy, dz = (px - ex), (py - ey), (pz - ez)
          local dist = (dx * dx) + (dy * dy) + (dz + dz)
          if (dist &lt; nearDist) then
            nearUnit = enemyID
            nearDist = dist
          end
        end 
      end   
    end   

    if (nearUnit == nil) then
      return -1
    else
      return nearUnit
    end
  end

Please note that returning tables doesn't currently work as one could expect. ''(Description what it does here)'' If you want to return multiple values from a table, you need to do it like this:

 function ReturnSomeValues(u, ud, t, ...)
     return arg[1], arg[2], arg[3]  -- instead of arg
 end

==Calling Lua from BOS==
To call a Lua function from BOS code, you need to declare it first:
 // BOS
 lua_MyFunction() { return 0; }
Then just call this script. The &lt;tt&gt;lua_&lt;/tt&gt; prefix does its magic and routes the call to Lua code instead of calling the usual BOS code. Note that arguments don't matter, they are passed anyway:
 call-script lua_MyFunction(arg1, arg2);
===Getting output===
If you wish to print out some debugging info, please note that &lt;tt&gt;print&lt;/tt&gt; and &lt;tt&gt;io.write&lt;/tt&gt; don't quite work in Windows versions of Spring, since stdout isn't availible (or is well-hidden.) Use &lt;tt&gt;Spring.Echo(&quot;a string&quot;)&lt;/tt&gt;, this will print a message to the Spring console and into the infolog.

===LUA0..9===
 // the GET/SET constants
 #define LUA0 110
 #define LUA1 111
 #define LUA2 112
 #define LUA3 113
 #define LUA4 114
 #define LUA5 115
 #define LUA6 116
 #define LUA7 117
 #define LUA8 118
 #define LUA9 119

&lt;tt&gt;get LUA0&lt;/tt&gt; is used to check whether call succeeded (1 if true, 0 otherwise.) LUA1..9 store return values, e.g. &lt;tt&gt;lua_ReturnSomeValues&lt;/tt&gt; above would put its first argument into &lt;tt&gt;get LUA1&lt;/tt&gt;, second into &lt;tt&gt;get LUA2&lt;/tt&gt;, and so on.

==Summary==
Steps needed to call a Lua function in a BOS call-script call:
*define a Lua function &lt;tt&gt;MyFunction(unitID, unitDefID, teamID, ...)&lt;/tt&gt; in LuaCOB/main.lua or a file included by it
*define a BOS/COB script &lt;tt&gt;lua_MyFunction() { return 0; }&lt;/tt&gt; so the compiler knows about it
*call your function with &lt;tt&gt;call-script lua_MyFunction()&lt;/tt&gt;
*return values can be found in &lt;tt&gt;get LUA1..9&lt;/tt&gt;
*&lt;tt&gt;get LUA0&lt;/tt&gt; returns 1 when call was successful (regardless of its return values) and 0 in case of failure.

===Examples of code===
*[http://neoteric.pl/~imbaczek/spring/messages_lua.zip Inter-unit communication]  &lt;small&gt;(shameless plug ;p)&lt;/small&gt; - a library that allows passing messages between units and reading/writing of public variables exposed by them.Included is a tech demo involving modified [[Nanoblobs]] 0.64. Patch, start the game, make a sheep and see for yourself.
* &lt;big&gt;Your own!&lt;/big&gt;

=Interfacing Lua-&gt;COB=

Lua:
 Spring.CallCOBScript(unitID, &quot;CustomScript&quot;, retArgCount, arg1, ..., argN)
 Spring.CallCOBScriptCB(unitID, &quot;CustomScript&quot;, retArgCount, callbackData, arg1, ..., argN)

 '''retArgCount:'''  the number of arguments expected to be returned'''
 '''callbackData:''' number passed to CobCallback() when the cob call completes

COB:
 CustomScript(arg1, ..., argN) { ... }

One particularly useful COB script, since Lua doesn't seem to have a way of making &lt;tt&gt;get SOMETHING(args)&lt;/tt&gt; requests (but it may provide other ways of getting the same information):
 LuaGet(r, cmd, p1, p2, p3, p4)
 {
  if (r == 0) { r = get cmd;                 return r }
  if (r == 1) { r = get cmd(p1,  0,  0,  0); return r }
  if (r == 2) { r = get cmd(p1, p2,  0,  0); return r }
  if (r == 3) { r = get cmd(p1, p2, p3,  0); return r }
  if (r == 4) { r = get cmd(p1, p2, p3, p4); return r }

  return 1234;
 }

=References=
#[http://spring.clan-sy.com/phpbb/viewforum.php?f=23 Spring Lua Scripts forum]
#[http://spring.clan-sy.com/phpbb/viewtopic.php?t=9329 trepan's description of Lua-COB interface] - a little bit outdated, but still worth a read

=Thanks=
trepan for doing the hard work of integrating Lua into Spring!


NOTE from trepan:
  Thanks, but there were lua startscripts before I started doing
  any Spring coding. The benefits of the new LuaCob, LuaGaia, and
  LuaRules scripts are that they can be loaded from map/mod archives,
  and that they all use the same base libraries (as does LuaUI).
  They also have significantly more features then the current
  startscript code (ex: more call-ins and call-outs, the ability to
  render graphics in several different modes, play sounds, etc...)
[[Category: Lua]]</text>
      <sha1>e7riyrv9yyf9t1mipao9i9zqzvevd0a</sha1>
    </revision>
  </page>
  <page>
    <title>Lua:Callins</title>
    <ns>0</ns>
    <id>3590</id>
    <revision>
      <id>31846</id>
      <parentid>31840</parentid>
      <timestamp>2022-10-12T14:10:04Z</timestamp>
      <contributor>
        <username>Beherith</username>
        <id>2441</id>
      </contributor>
      <minor/>
      <comment>/* Drawing */ newline</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="31355">= Lua Callins =
This page is future looking to unified widget/gadget (aka &quot;addon&quot;) handler, which may yet be some way off, c.f. the [https://github.com/spring/spring/blob/ebb704e008f6ea645947d07be1cfcc272af0428f/doc/changelog.txt#L71 changelog].

Related Sourcecode :
[https://github.com/spring/spring/blob/d9b3927a528a876b9ab4042771e82b050267572a/rts/Lua/LuaHandle.cpp https://github.com/spring/spring/rts/Lua/LuaHandle.cpp]

For now, to use these addons in a widget, replace addon with widget and, for a gadget, replace addon with gadget. For example,
&lt;code&gt;&lt;pre&gt;
    function widget:UnitCreated(unitID, unitDefID, unitTeam, builderID)
        ...  
    end
&lt;/pre&gt;&lt;/code&gt;

Some functions may differ between (synced) gadget and widgets; those are in the [[#Synced_-_Unsynced_Shared]] section. Essentially the reason is that all information should be available to synced (game logic controlling) gadgets, but restricted to unsynced gadget/widget (e.g. information about an enemy unit only detected via radar and not yet in LOS). In such cases the full (synced) param list is documented.

&lt;span style=&quot;color: maroon;&quot;&gt;'''Attention:'''&lt;/span&gt; some callins will only work on the unsynced portion of the gadget. Due to the type-unsafe nature of lua parsing, those callins not firing up might be hard to trace. This document will be continuously updated to properly alert about those situations.

== Common ==
{{LuaCallin
|name = Initialize
|info = Called when the addon is (re)loaded.
}}

{{LuaCallin
|name = Shutdown
|info = Called when the addon or the game is shutdown.
}}


== Unsynced Only ==

{{LuaCallin
|name = DefaultCommand
|args = type, id
|return = {{type|number}} cmdID
|info = Used to set the default command when a unit is selected. First parameter is the type of the object pointed at (either &quot;unit or &quot;feature&quot;) and the second is its {{var|unitID}} or {{var|featureID}} respectively. 
}}

{{LuaCallin
|name = CommandNotify
|args = cmdID, cmdParams, cmdOptions
|return = {{type|bool}} removeCmd
|info = Called when a command is issued. Returning {{value|true}} deletes the command and does not send it through the network.
}}

{{LuaCallin
|name = CommandsChanged
|args = None
|return = ?
|info = Called when the command descriptions changed, e.g. when selecting or deselecting a unit.
}}

{{LuaCallin
|name = WorldTooltip
|args = ttType, data1, data2, data3
|return = {{type|string}} newTooltip
|info = The parameters can be {{value|&quot;unit&quot;}}, {{var|unitID}}; {{value|&quot;feature&quot;}}, {{var|featureID}}; {{value|&quot;ground&quot;}}, {{var|posX}}, {{var|posY}}, {{var|posZ}} or {{value|&quot;selection&quot;}}.
}}

{{LuaCallin
|name = UnsyncedHeightMapUpdate
|args = ???
|info = Called when the unsynced copy of the height-map is altered.
}}

{{LuaCallin
|name = GameProgress
|args = serverFrameNum
|info = Called every 60 frames, calculating delta between GameFrame and GameProgress. Can give an ETA about catching up with simulation for mid-game join players.
}}

{{LuaCallin
|name = GameSetup
|args =  state, ready, playerStates
|return = {{type|bool}} success, {{type|bool}} newReady
|info = ???
}}

{{LuaCallin
|name = SunChanged
|args = ???
|info = ???
}}

{{LuaCallin
|name = AddConsoleLine
|args = msg, priority
|info = Called when text is entered into the console (e.g. Spring.Echo).
}}

{{LuaCallin
|name = RecvSkirmishAIMessage
|args = aiTeam, dataStr
|return = ???
|info = ???
}}

{{LuaCallin
|name = RecvFromSynced
|args = ...
|info = Receives data sent via [[Lua_System#Synced|SendToUnsynced]] callout.
}}

{{LuaCallin
|name = Save
|args = zip
|info = Called when a chat command '/save' or '/savegame' is received. The single argument is a userdatum representing the savegame zip file. See [[Lua_SaveLoad#Save_.28_zip_.29_-.3E_nil|Lua_SaveLoad]].
}}

{{LuaCallin
|name = LoadProgress
|args = message, replaceLastLine
|info = Only available to LuaIntro.
}}

{{LuaCallin
|name = GroupChanged
|args = groupID
|info = Called when a unit is added to or removed from a control group. Currently implemented for widgets only.
}}

{{LuaCallin
|name = ConfigureLayout
|args = ???
|return = ???
|info = ???
}}

=== Input ===
{{LuaCallin
|name = IsAbove
|args = x, y
|return = {{type|bool}} isAbove
|info = Called every Update. Must return {{value|true}} for {{name|Mouse*}} events and {{name|GetToolTip}} to be called.
}}

{{LuaCallin
|name = GetTooltip
|args = x, y
|return = {{type|string}} tooltip
|info = Called when {{name|IsAbove}} returns {{value|true}}.
}}

{{LuaCallin
|name = KeyPress
|args = key, mods, isRepeat
|return = {{type|bool}} becomeOwner
|info = Called repeatedly when a key is pressed down. If you want an action to occur only once check for {{var|1=isRepeat == {{value|false}}}}. The {{var|mods}} parameter is a {{type|table}}, with keys {{value|&quot;alt&quot;}}, {{value|&quot;ctrl&quot;}}, {{value|&quot;meta&quot;}} and {{value|&quot;shift&quot;}} each having a boolean value. Return {{value|true}} if you don't want other callins or the engine to also receive this keypress. A list of key codes can be seen at the [https://wiki.libsdl.org/SDLKeycodeLookup SDL wiki].
}}

{{LuaCallin
|name = KeyRelease
|args = key
|return = {{type|bool}}
|info = Called when the key is released.
}}


{{LuaCallin
|name = TextInput
|args = utf8char
|info = Called whenever a key press results in text input. Introduced in 97.0.
}}

{{LuaCallin
|name = JoystickEvent
|args = ???
|info = ???
}}

{{LuaCallin
|name = MousePress
|args = x, y, button
|return = {{type|bool}} becomeMouseOwner
|info = Called when a mouse button is pressed. The {{var|button}} parameter supports up to 7 buttons. Must return {{value|true}} for {{name|MouseRelease}} and other functions to be called.
}}

{{LuaCallin
|name = MouseRelease
|args = x, y, button
|return = bool becomeMouseOwner
|info = Called when a mouse button is released. Please note that in order to have Spring call {{name|MouseRelease}}, you need to have a {{name|MousePress}} call-in in the same addon that returns {{value|true}}.
}}

{{LuaCallin
|name = MouseWheel
|args = up, value
|info = Called when the mouse wheel is moved. The parameters indicate the direction and amount of travel.
}}

{{LuaCallin
|name = MouseMove
|args = x, y, dx, dy, button
|info = Called when the mouse is moved. The {{var|dx}} and {{var|dy}} parameters indicate the distance travelled, whereas the first two indicate the final position.
}}

=== Players ===
{{LuaCallin
|name = PlayerChanged
|args = playerID
|info = Called whenever a player's status changes e.g. becoming a spectator.
}}

{{LuaCallin
|name = PlayerAdded
|args = playerID
|info = Called whenever a new player joins the game.
}}

{{LuaCallin
|name = PlayerRemoved
|args = playerID, reason
|info = Called whenever a player is removed from the game.
}}

=== Downloads ===

{{LuaCallin
|name = DownloadStarted
|args = id
|info = Called when a [[Pr-downloader]] download is started via [[Lua_VFS#Archives|VFS.DownloadArchive]].
}}

{{LuaCallin
|name = DownloadFinished
|args = id
|info = Called when a [[Pr-downloader]] download finishes successfully.
}}

{{LuaCallin
|name = DownloadFailed
|args = id, errorID
|info = Called when a [[Pr-downloader]] download fails to complete.
}}

{{LuaCallin
|name = DownloadProgress
|args = id, downloaded, total
|info = Called incrementally during a [[Pr-downloader]] download.
}}

=== Drawing ===
{{LuaCallin
|name = ViewResize
|args = viewSizeX, viewSizeY
|info = Called whenever the window is resized.
}}

{{LuaCallin
|name = Update
|args = dt
|info = Called for every draw frame (including when the game is paused) and at least once per sim frame except when catching up. The parameter is the time since the last update. 
}}

=== Draw* Functions ===
Inside the Draw* functions, you can use the [[Lua_OpenGL_Api | Lua OpenGL Api]] to draw graphics.
&lt;br /&gt;
Avoid doing heavy calculations inside these callins; ideally, do the calculations elsewhere and use Draw callins only for drawing.

{{LuaCallin
|name = DrawGenesis
|info = Doesn't render to screen! Use this callin to update textures, shaders, etc. Also available to LuaMenu.
}}

{{LuaCallin
|name = DrawWorldPreParticles
|info = ??? {{new|104.0}}
}}

{{LuaCallin
|name = DrawWorldPreUnit
|info = Spring draws units, features, some water types, cloaked units, and the sun.
}}

{{LuaCallin
|name = DrawWorld
|info = Spring draws command queues, 'map stuff', and map marks.
}}

{{LuaCallin
|name = DrawWorldShadow
|info = ???
}}

{{LuaCallin
|name = DrawWorldReflection
|info = ???
}}

{{LuaCallin
|name = DrawWorldRefraction
|info = ???
}}

{{LuaCallin
|name = DrawGroundPreForward
|info = Runs at the start of the forward pass when a custom map shader has been assigned via [[Lua_UnsyncedCtrl#Map|{{name|Spring.SetMapShader}}]] (convenient for setting uniforms).
}}

{{LuaCallin
|name = DrawGroundPreDeferred
|info = Runs at the start of the deferred pass when a custom map shader has been assigned via [[Lua_UnsyncedCtrl#Map|{{name|Spring.SetMapShader}}]] (convenient for setting uniforms).
}}


{{LuaCallin
|name = DrawGroundPostDeferred
|info = This runs at the end of its respective deferred pass and allows proper frame compositing (with ground flashes/decals/foliage/etc, which are drawn between it and [[#API:DrawWorldPreUnit|{{name|DrawWorldPreUnit}}]]) via [[Lua_OpenGL_Api#Textures|{{name|gl.CopyToTexture}}]].
}}

{{LuaCallin
|name = DrawUnitsPostDeferred
|info = Runs at the end of the unit deferred pass to inform Lua code it should make use of the {{value|$model_gbuffer_*}} textures before another pass overwrites them (and to allow proper blending with e.g. cloaked objects which are drawn between these events and [[#API:DrawWorld|{{name|DrawWorld}}]] via [[Lua_OpenGL_Api#Textures|{{name|gl.CopyToTexture}}]]). N.B. The *PostDeferred events are only sent (and only have a real purpose) if forward drawing is disabled.
}}

{{LuaCallin
|name = DrawFeaturesPostDeferred
|info = Runs at the end of the feature deferred pass to inform Lua code it should make use of the {{value|$model_gbuffer_*}} textures before another pass overwrites them (and to allow proper blending with e.g. cloaked objects which are drawn between these events and [[#API:DrawWorld|{{name|DrawWorld}}]] via [[Lua_OpenGL_Api#Textures|{{name|gl.CopyToTexture}}]]). N.B. The *PostDeferred events are only sent (and only have a real purpose) if forward drawing is disabled.
}}

{{LuaCallin
|name = DrawScreen
|args = vsx, vsy
|info = ??? Also available to LuaMenu.
}}

{{LuaCallin
|name = DrawScreenEffects
|args = vsx, vsy
|info = Where {{var|vsx}}, {{var|vsy}} are screen coordinates.
}}

{{LuaCallin
|name = DrawScreenPost
|args = vsx, vsy
|info = {{new|104.0}} Similar to {{name|DrawScreenEffects}}, this can be used to alter the contents of a frame after it has been completely rendered (i.e. World, MiniMap, Menu, UI).
}}

{{LuaCallin
|name = DrawLoadScreen
|info = {{new|95.0}} Only available to LuaIntro, draws custom load screens.
}}

{{LuaCallin
|name = DrawInMinimap
|args = sx, sy
|info = Where {{var|sx}}, {{var|sy}} are values relative to the minimap's position and scale.
}}

{{LuaCallin
|name = DrawInMinimapBackground
|args = sx, sy
|info = Where {{var|sx}}, {{var|sy}} are values relative to the minimap's position and scale.
}}

=== Custom Object Rendering ===
For the following calls {{var|drawMode}} can be one of the following, {{var|1=notDrawing = {{value|0}}}}, {{var|1=normalDraw = {{value|1}}}}, {{var|1=shadowDraw = {{value|2}}}}, {{var|1=reflectionDraw = {{value|3}}}}, {{var|1=refractionDraw = {{value|4}}}}, and finally {{var|1=gameDeferredDraw = {{value|5}}}} which was added in 102.0.

{{LuaCallin
|name = DrawUnit
|args = unitID, drawMode
|return = {{type|bool}} suppressEngineDraw
|info = For custom rendering of units, [[Lua_UnitRendering#Lua.27s_DrawXYZ-Callin|enabled here]].	
}}

{{LuaCallin
|name = DrawFeature
|args = unitID, drawMode
|return = {{type|bool}} suppressEngineDraw
|info = For custom rendering of features, [[Lua_UnitRendering#Lua.27s_DrawXYZ-Callin|enabled here]].	
}}

{{LuaCallin
|name = DrawShield
|args = unitID, weaponID, drawMode
|return = {{type|bool}} suppressEngineDraw
|info = For custom rendering of [[Gamedev:WeaponDefs#Shield_(WeaponType)|shields]].
}}

{{LuaCallin
|name = DrawProjectile
|args = projectileID, drawMode
|return = {{type|bool}} suppressEngineDraw
|info = For custom rendering of weapon (&amp; other) projectiles, [[Lua_UnitRendering#Lua.27s_DrawXYZ-Callin|enabled here]].
}}

== Unsynced Menu Only ==

{{LuaCallin
|name = AllowDraw
|return = {{type|bool}} allowDraw
|info = Enables Draw{Genesis,Screen,ScreenPost} callins if {{value|true}} is returned, otherwise they are called once every 30 seconds. Only active when a game isn't running.
}}

{{LuaCallin
|name = ActivateMenu
|info = Called whenever LuaMenu is on with no game loaded.
}}

{{LuaCallin
|name = ActivateGame
|info = Called whenever LuaMenu is on with a game loaded.
}}

== Synced - Unsynced Shared ==

{{LuaCallin
|name = GotChatMsg
|args = msg, player
|info = Called when a player issues a UI command e.g. types {{var|/foo}} or {{var|/luarules foo}}.
}}

=== Game ===

{{LuaCallin
|name = GameID
|args = gameID
|info = Called once to deliver the {{var|gameID}}. As of 101.0+ the string is encoded in hex.
}}

{{LuaCallin
|name = GamePaused
|info = Called when the game is paused.
}}

{{LuaCallin
|name = GameOver
|args = winningAllyTeams
|info = The parameter is a {{type|table}} list of winning allyTeams, if empty the game result was undecided (like when dropping from an host).
}}

{{LuaCallin
|name = GameFrame
|args = frame
|info = Called for every game simulation frame (30 per second). Starts at frame {{value|0}} in 101.0+ and {{value|1}} in previous versions.
}}

{{LuaCallin
|name = GamePreload
|info = Called before the 0 gameframe. From 104.0 onwards, will not be called when a saved game is loaded.
}}

{{LuaCallin
|name = GameStart
|info = Called upon the start of the game. From 104.0 onwards, will not be called when a saved game is loaded.
}}

=== Teams ===
{{LuaCallin
|name = TeamChanged
|args = teamID
|info = ???
}}

{{LuaCallin
|name = TeamDied
|args = teamID
|info = Called when a team dies (see [[Lua_SyncedCtrl#Game_End|Spring.KillTeam]]).
}}

=== Units ===
{{LuaCallin
|name = UnitCreated
|args = unitID, unitDefID, unitTeam, builderID
|info = Called at the moment the unit is created.
}}

{{LuaCallin
|name = UnitFinished
|args = unitID, unitDefID, unitTeam
|info = Called at the moment the unit is completed.
}}

{{LuaCallin
|name = UnitFromFactory
|args = unitID, unitDefID, unitTeam, factID, factDefID, userOrders
|info = Called when a factory finishes construction of a unit.
}}

{{LuaCallin
|name = UnitReverseBuilt
|args = unitID, unitDefID, unitTeam
|info = Called when a living unit becomes a nanoframe again.
}}

{{LuaCallin
|name = UnitGiven
|args = unitID, unitDefID, newTeam, oldTeam
|info = Called when a unit is transferred between teams. This is called after {{name|UnitTaken}} and in that moment unit is assigned to the '''newTeam'''.
}}

{{LuaCallin
|name = UnitTaken
|args = unitID, unitDefID, oldTeam, newTeam
|info = Called when a unit is transferred between teams. This is called before {{name|UnitGiven}} and in that moment unit is still assigned to the '''oldTeam'''.
}}

{{LuaCallin
|name = UnitDamaged
|args =  unitID, unitDefID, unitTeam, damage, paralyzer, weaponDefID, projectileID, attackerID, attackerDefID, attackerTeam
|info = Called when a unit is damaged (after {{name|UnitPreDamaged}}).
}}

{{LuaCallin
|name = UnitDestroyed
|args = unitID, unitDefID, unitTeam, attackerID, attackerDefID, attackerTeam
|info = Called when a unit is destroyed.
}}

{{LuaCallin
|name = RenderUnitDestroyed
|args = unitID, unitDefID, unitTeam
|info = Called just before a unit is invalid, after it finishes its death animation. {{new|101.0}}
}}

{{LuaCallin
|name = UnitStunned
|args =  unitID, unitDefID, unitTeam, stunned
|info = Called when a unit changes its stun status. {{new|99.0}}
}}

{{LuaCallin
|name = UnitUnitCollision
|args = colliderID, collideeID
|info = Called when two units collide. Both units must be registered with [[Lua_System#Synced|Script.SetWatchUnit]].
}}

{{LuaCallin
|name = UnitFeatureCollision
|args = colliderID, collideeID
|info = Called when a unit collides with a feature. The unit must be registered with [[Lua_System#Synced|Script.SetWatchUnit]] and the feature registered with [[Lua_System#Synced|Script.SetWatchFeature]].
}}

{{LuaCallin
|name = UnitHarvestStorageFull
|args = unitID, unitDefID, unitTeam
|info = Called when a unit's harvestStorage is full (according to its unitDef's entry).
}}

{{LuaCallin
|name = UnitCommand
|args = unitID, unitDefID, unitTeam, cmdID, cmdParams, cmdOpts, cmdTag
|info = Called after when a unit accepts a command, after {{name|AllowCommand}} returns {{value|true}}.
}}

{{LuaCallin
|name = UnitCmdDone
|args = unitID, unitDefID, unitTeam, cmdID, cmdParams, cmdOpts, cmdTag
|info = Called when a unit completes a command.
}}

{{LuaCallin
|name = UnitLoaded
|args = unitID, unitDefID, unitTeam, transportID, transportTeam
|info = Called when a unit is loaded by a transport.
}}

{{LuaCallin
|name = UnitUnloaded
|args = unitID, unitDefID, unitTeam, transportID, transportTeam
|info = Called when a unit is unloaded by a transport.
}}

{{LuaCallin
|name = UnitExperience
|args = unitID, unitDefID, unitTeam, experience, oldExperience
|info = Called when a unit gains experience greater or equal to the minimum limit set by calling [[Lua_SyncedCtrl#Other|Spring.SetExperienceGrade]]. Should be called more reliably with small values of experience grade in 104.0+.
}}

{{LuaCallin
|name = UnitIdle
|args = unitID, unitDefID, unitTeam
|info = Called when a unit is idle (empty command queue).
}}

{{LuaCallin
|name = UnitCloaked
|args = unitID, unitDefID, unitTeam
|info = Called when a unit cloaks.
}}

{{LuaCallin
|name = UnitDecloaked
|args = unitID, unitDefID, unitTeam
|info = Called when a unit decloaks.
}}

{{LuaCallin
|name = UnitMoved
|args = ???
|info = ??? Not implemented in base handler
}}

{{LuaCallin
|name = UnitMoveFailed
|args = ???
|info = ??? Not implemented in base handler
}}

{{LuaCallin
|name = StockpileChanged
|args = unitID, unitDefID, unitTeam, weaponNum, oldCount, newCount
|info = Called when a units stockpile of weapons increases or decreases. See {{xtaglink|Gamedev:WeaponDefs|stockpile}}.
}}

{{LuaCallin
|name = UnitEnteredLos
|args = unitID, unitTeam, allyTeam, unitDefID
|info = Called when a unit enters LOS of an allyteam. Its called after the unit is in LOS, so you can query that unit. The allyTeam is who's LOS the unit entered.
}}

{{LuaCallin
|name = UnitLeftLos
|args = unitID, unitTeam, allyTeam, unitDefID
|info = Called when a unit leaves LOS of an allyteam. For widgets, this one is called just before the unit leaves los, so you can still get the position of a unit that left los. 
}}

{{LuaCallin
|name = UnitEnteredRadar
|args = unitID, unitTeam, allyTeam, unitDefID
|info = Called when a unit enters radar of an allyteam. Also called when a unit enters LOS without any radar coverage. 
}}

{{LuaCallin
|name = UnitLeftRadar
|args = unitID, unitTeam, allyTeam, unitDefID
|info = Called when a unit leaves radar of an allyteam. Also called when a unit leaves LOS without any radar coverage. For widgets, this is called just after a unit leaves radar coverage, so widgets cannot get the position of units that left their radar. 
}}

{{LuaCallin
|name = UnitEnteredAir
|args = ???
|info = ??? Not implemented by base handler
}}

{{LuaCallin
|name = UnitLeftAir
|args = ???
|info = ??? Not implemented by base handler
}}

{{LuaCallin
|name = UnitEnteredWater
|args = ???
|info = ??? Not implemented by base handler
}}

{{LuaCallin
|name = UnitLeftWater
|args = ???
|info = ??? Not implemented by base handler
}}

{{LuaCallin
|name = UnitSeismicPing
|args = x, y, z, strength, allyTeam, unitID, unitDefID
|info = Called when a unit emits a seismic ping. See {{xtaglink|Gamedev:UnitDefs|seismicSignature}}.
}}

=== Features ===
{{LuaCallin
|name = FeatureCreated
|args = featureID, allyTeamID
|info = Called when a feature is created.
}}

{{LuaCallin
|name = FeatureDamaged
|args =  featureID, featureDefID, featureTeam, damage, weaponDefID, projectileID, attackerID, attackerDefID, attackerTeam
|info = Called when a feature is damaged.
}}

{{LuaCallin
|name = FeatureDestroyed
|args = featureID, allyTeamID
|info = Called when a feature is destroyed.
}}

{{LuaCallin
|name = FeatureMoved
|args = ???
|info = ???
}}

=== Projectiles ===
The following Callins are only called for weaponDefIDs registered via [[Lua_System#Synced|Script.SetWatchWeapon]].

{{LuaCallin
|name = ProjectileCreated
|args = proID, proOwnerID, weaponDefID
|info = Called when the projectile is created. Note that {{var|weaponDefID}} is missing if the projectile is spawned as part of a burst, but [[Lua_SyncedRead#Projectiles|Spring.GetProjectileDefID]] and [[Lua_SyncedRead#Projectiles|Spring.GetProjectileName]] still work in callin scope using {{var|proID}}.
}}

{{LuaCallin
|name = ProjectileDestroyed
|args = proID
|info = Called when the projectile is destroyed.
}}

== Synced Only ==
{{LuaCallin
|name = CommandFallback
|args = unitID, unitDefID, unitTeam, cmdID, cmdParams, cmdOptions, cmdTag
|return = {{type|bool}} used, {{type|bool}} finished
|info = Called when the unit reaches an unknown command in its queue (i.e. one not handled by the engine). If no addon returns {{var|used}} as {{value|true}} the command is dropped, if an addon returns {{value|true}}, {{value|true}} the command is removed because it's done, with {{value|true}}, {{value|false}} it's kept in the queue and {{name|CommandFallback}} gets called again on the next slowupdate.
}}

{{LuaCallin
|name = AllowCommand
|args = unitID, unitDefID, unitTeam, cmdID, cmdParams, cmdOptions, cmdTag, synced
|return = {{type|bool}} allow
|info = Called when the command is given, before the unit's queue is altered. The return value is whether it should be let into the queue. The queue remains untouched when a command is blocked, whether it would be queued or replace the queue.
}}

{{LuaCallin
|name = AllowUnitCreation
|args = unitDefID, builderID, builderTeam, x, y, z, facing
|return = {{type|bool}} allow
|info = Called just before unit is created, the boolean return value determines whether or not the creation is permitted.
}}

{{LuaCallin
|name = AllowUnitTransfer
|args = unitID, unitDefID, oldTeam, newTeam, capture
|return = {{type|bool}} allow
|info = Called just before a unit is transferred to a different team, the boolean return value determines whether or not the transfer is permitted.
}}

{{LuaCallin
|name = AllowUnitBuildStep
|args = builderID, builderTeam, unitID, unitDefID, part
|return = {{type|bool}} allow
|info = Called just before a unit progresses its build percentage, the boolean return value determines whether or not the build makes progress.
}}

{{LuaCallin
|name = AllowFeatureCreation
|args = featureDefID, teamID, x, y, z
|return = {{type|bool}} allow
|info = Called just before feature is created, the boolean return value determines whether or not the creation is permitted.
}}

{{LuaCallin
|name = AllowFeatureBuildStep
|args = builderID, builderTeam, featureID, featureDefID, part
|return = {{type|bool}} allow
|info = Called just before a feature changes its build percentage, the boolean return value determines whether or not the change is permitted. Note that this is also called for resurrecting features, and for refilling features with resources before resurrection. On reclaim the part values are negative, and on refill and ressurect they are positive. Part is the percentage the feature be built or reclaimed per frame. Eg. for a 30 workertime builder, that's a build power of 1 per frame. For a 50 buildtime feature reclaimed by this builder, part will be 100/-50(/1) = -2%, or -0.02 numerically.
}}

{{LuaCallin
|name = AllowResourceLevel
|args = teamID, res, level
|return = {{type|bool}} allow
|info = Called when a team sets the sharing level of a resource, the boolean return value determines whether or not the sharing level is permitted.
}}

{{LuaCallin
|name = AllowResourceTransfer
|args = oldTeamID, newTeamID, res, amount
|return = {{type|bool}} allow
|info = Called just before resources are transferred between players, the boolean return value determines whether or not the transfer is permitted.
}}

{{LuaCallin
|name = AllowStartPosition
|args = playerID, teamID, readyState, clampedX, clampedY, clampedZ, rawX, rawY, rawZ
|return = {{type|bool}} allow
|info = {{var|clamped{X,Y,Z}}} are the coordinates clamped into start-boxes, {{var|raw}} is where player tried to place their marker. The {{var|readyState}} can be any one of 
* {{value|0}} - player picked a position, 
* {{value|1}} - player clicked ready, 
* {{value|2}} - player pressed ready OR  the game was force-started (player did not click ready, but is now forcibly readied) or 
* {{value|3}} - the player failed to load. 
* {{new|95.0}} the default 'failed to choose' start-position is the north-west point of their startbox, or (0,0,0) if they do not have a startbox. 
NB: The order of the parameters changed with the addition of {{var|teamID}} in 104.0. Previouly it was:
{{var|clampedX, clampedY, clampedZ, playerID, readyState, rawX, rawY, rawZ}}
}}

{{LuaCallin
|name = AllowDirectUnitControl
|args = unitID, unitDefID, unitTeam, playerID
|return = {{type|bool}} allow
|info = Determines if this unit can be controlled directly in FPS view.
}}

{{LuaCallin
|name = AllowWeaponTargetCheck
|args = attackerID, attackerWeaponNum, attackerWeaponDefID
|return = {{type|bool}} allowCheck, {{type|bool}} ignoreCheck
|info = Determines if this weapon can automatically generate targets itself. See also {{xtaglink|Gamedev:WeaponDefs|commandFire}} weaponDef tag. The {{var|ignoreCheck}} return value was added in 99.0 to allow ignoring the callin i.e. running normal engine check for this weapon.
}}

{{LuaCallin
|name = AllowWeaponTarget
|args = attackerID, targetID, attackerWeaponNum, attackerWeaponDefID, defPriority
|return = {{type|bool}} allowed, {{type|number}} newPriority
|info = Controls blocking of a specific target from being considered during a weapon's periodic auto-targeting sweep. The second return value is the new priority for this target (if you don't want to change it, return {{var|defPriority}}). Lower priority targets are targeted first.
}}

{{LuaCallin
|name = AllowWeaponInterceptTarget
|args = interceptorUnitID, interceptorWeaponID, targetProjectileID
|return = {{type|bool}} allowed
|info = Controls blocking of a specific intercept target from being considered during an {{xtaglink|Gamedev:WeaponDefs|interceptor}} weapon's periodic auto-targeting sweep. Only called for {{var|weaponDefIDs}} registered via [[Lua_System#Synced|Script.SetWatchWeapon]].
}}

{{LuaCallin
|name = AllowBuilderHoldFire
|args = unitID, unitDefID, action
|return = {{type|bool}} actionAllowed
|info = {{new|98.0}} {{Sourcelinkhash|5a82d750b89e72024bb0bb62cf05ea257737e0ac}}   Called when a construction unit wants to &quot;use his nano beams&quot;.&lt;br&gt;{{var|action}} is one of following:
* {{value|-1}} Build
* {{value|CMD.REPAIR}} Repair
* {{value|CMD.RECLAIM}} Reclaim
* {{value|CMD.RESTORE}} Restore
* {{value|CMD.RESURRECT}} Resurrect
* {{value|CMD.CAPTURE}} Capture
}}

{{LuaCallin
|name = Explosion
|args = weaponDefID, px, py, pz, AttackerID, ProjectileID
|return = {{type|bool}} noGfx
|info = Called when an explosion occurs. If it returns {{value|true}} then no graphical effects are drawn by the engine for this explosion.
}}

{{LuaCallin
|name = TerraformComplete
|args = unitID, unitDefID, unitTeam, buildUnitID, buildUnitDefID, buildUnitTeam
|return = {{type|bool}} stop
|info = Called when pre-building terrain levelling terraforms are completed (c.f. {{xtaglink|Gamedev:UnitDefs|levelGround}}). If the return value is {{value|true}} the current build order is terminated.
}}

{{LuaCallin
|name = MoveCtrlNotify
|args = unitID, unitDefID, unitTeam, data
|return = {{type|bool}} moveCtrlComplete
|info = Enable both [[Lua_MoveCtrl#Options|Spring.MoveCtrl.SetCollideStop]] and [[Lua_MoveCtrl#Options|Spring.MoveCtrl.SetTrackGround]] to enable this call-in, data was supposed to indicate the type of notification but currently never has a value other than {{value|1}} (&quot;unit hit the ground&quot;). The return value determines whether or not the unit should remain script-controlled ({{value|false}}) or return to engine controlled movement ({{value|true}}).
}}

{{LuaCallin
|name = RecvLuaMsg
|args = msg, playerID
|info = Receives messages from unsynced sent via [[Lua_UnsyncedCtrl#SendLuaMessage|Spring.SendLuaRulesMsg]] or [[Lua_UnsyncedCtrl#SendLuaMessage|Spring.SendLuaUIMsg]].
}}

{{LuaCallin
|name = Load
|args = zip
|info = Called after {{name|GamePreload}} and before {{name|GameStart}}. See [[Lua_SaveLoad#Load_.28_zip_.29_-.3E_nil|Lua_SaveLoad]].
}}

=== Damage Controllers ===
For the following callins, in addition to being a regular weapon, {{var|weaponDefID}} may be one of the following:
* {{value|-1}} - debris collision, also default of [[Lua_SyncedCtrl#Unit_Control|Spring.AddUnitDamage]]
* {{value|-2}} - ground collision
* {{value|-3}} - object collision
* {{value|-4}} - fire damage
* {{value|-5}} - water damage
* {{value|-6}} - kill damage
* {{value|-7}} - crush damage

{{LuaCallin
|name = UnitPreDamaged
|args = unitID, unitDefID, unitTeam, damage, paralyzer, weaponDefID, projectileID, attackerID, attackerDefID, attackerTeam
|return = {{type|number}} newDamage, {{type|number}} impulseMult
|info = Called before damage is applied to the unit, allows fine control over how much damage and [http://en.wikipedia.org/wiki/Impulse_(physics) impulse] is applied.
}}

{{LuaCallin
|name = ShieldPreDamaged
|I recommend looking up the CallIns in Sourcecode, because the Lua-Documentation, generated from the lua handle of them is seriously flawed and not regenerated.
|Lua-Handler documented from version
|args = proID, proOwnerID, shieldEmitterWeaponNum, shieldCarrierUnitID, bounceProjectile, beamEmitterWeaponNum, beamEmitterUnitID, startX, startY, startZ, hitX, hitY, hitZ
|https://github.com/spring/spring/blob/d085e297416bd963ec25eaa3dbf0796ba22a3582/rts/Lua/LuaHandleSynced.h#L106
|Actual CallIn: 
|args = proID, shieldCarrier, boolBounceProjectile, beamEmitterWeaponNum, beamEmitterUnitID, startX, startY, startZ, hitX, hitY, hitZ
|return = {{type|bool}} handleCollision
|info = Called before any engine shield-vs-projectile logic executes. If the return value is {{value|true}} the gadget handles the collision event and the engine does not remove the projectile. If the weapon is a hitscan type ([[Gamedev:WeaponDefs#Tag:weaponType|BeamLaser]] or [[Gamedev:WeaponDefs#Tag:weaponType|LightningCanon]]) then {{var|proID}} is {{value|nil}} and {{var|beamEmitterWeaponNum}} and {{var|beamEmitterUnitID}} are populated instead. The start and hit position arguments are provided from 104.0 onwards.
}}

{{LuaCallin
|name = FeaturePreDamaged
|args = featureID, featureDefID, featureTeam, damage, weaponDefID, projectileID, attackerID, attackerDefID, attackerTeam
|return = {{type|number}} newDamage, {{type|number}} impulseMult
|info = Called before damage is applied to the feature, allows fine control over how much damage and [http://en.wikipedia.org/wiki/Impulse_(physics) impulse] is applied.
}}

[[Category: Lua]]</text>
      <sha1>n7nx3ia1c8pj7zmcdy3hgu294d1qxth</sha1>
    </revision>
  </page>
  <page>
    <title>Lua:Environments</title>
    <ns>0</ns>
    <id>3820</id>
    <revision>
      <id>30592</id>
      <parentid>30585</parentid>
      <timestamp>2017-12-26T01:31:27Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>/* Environments */ underp links</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9245">== Environments ==
Here is an exhaustive list of the different lua environments within Spring, roughly in execution order as a game is loaded.
=== LuaMenu === 
Source: {{sourcelink|file=rts/Lua/LuaMenu.cpp}}

Introduced in 104.0, a stripped down environment that starts before the game is loaded and persists through reload.
=== LuaParser ===
Source: {{sourcelink|file=rts/Lua/LuaParser.cpp}}

Minimal environment used to parse and load definition files.
=== LuaIntro === 
Source: {{sourcelink|file=rts/Lua/LuaIntro.cpp}}

Introduced in 95.0, to allow visual customisation of the loading process.
=== LuaRules (synced) ===
Source: {{sourcelink|file=rts/Lua/LuaHandle.cpp}}

Source: {{sourcelink|file=rts/Lua/LuaHandleSynced.cpp#L305}}

The main environment for synced game-controlling mechanics (&quot;gadgets&quot;).
=== LuaRules (unsynced) ===
Source: {{sourcelink|file=rts/Lua/LuaHandle.cpp}}

Source: {{sourcelink|file=rts/Lua/LuaHandleSynced.cpp#L57}}

The main environment for unsynced game effects, rendering, UI etc. (&quot;gadgets&quot;)
=== LuaGaia (synced) ===
Source: {{sourcelink|file=rts/Lua/LuaGaia.cpp}}

As LuaRules (synced) but for maps.
=== LuaGaia (unsynced) ===
Source: {{sourcelink|file=rts/Lua/LuaGaia.cpp}}

As LuaRules (unsynced) but for maps.
=== LuaUI ===
The main environment for toggleable UI elements and controls (&quot;widgets&quot;).

== Interfaces == 
The following table demonstrates which interfaces are available to each environment.
{| border=&quot;2&quot; cellpadding=&quot;4&quot; cellspacing=&quot;0&quot; style=&quot;margin: 1em 1em 1em; border: 1px #aaa solid; border-collapse: collapse;&quot;
|
! align=&quot;center&quot; | LuaMenu
! align=&quot;center&quot; | LuaIntro
! align=&quot;center&quot; | LuaParser
! align=&quot;center&quot; | LuaRules/Gaia&lt;br&gt;&lt;font style=&quot;font-size:80%&quot;&gt;(synced)&lt;/font&gt;
! align=&quot;center&quot; | LuaRules/Gaia&lt;br&gt;&lt;font style=&quot;font-size:80%&quot;&gt;(unsynced)&lt;/font&gt;
! align=&quot;center&quot; | LuaUI
|-
| align=&quot;left&quot;  | [[Lua_ConstGame]]
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
|-
| align=&quot;left&quot;  | [[Lua_ConstEngine]]
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
|-
| align=&quot;left&quot;  | [[Lua_ConstPlatform]]
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
|-
| align=&quot;left&quot;  | [[Lua_UnitDefs]]
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
|-
| align=&quot;left&quot;  | [[Lua_WeaponDefs]]
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
|-
| align=&quot;left&quot;  | [[Lua_FeatureDefs]]
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +

|-
| align=&quot;left&quot;  | [[Lua_ConstCOB]]
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -

|-
| align=&quot;left&quot;  | [[Lua_CMDs]]
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +

|-
| align=&quot;left&quot;  | [[Lua_UnsyncedRead]]
| align=&quot;center&quot;  bgcolor=&quot;#888800&quot; | +***
| align=&quot;center&quot;  bgcolor=&quot;#888800&quot; | +***
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +

|-
| align=&quot;left&quot;  | [[Lua_UnsyncedCtrl]]
| align=&quot;center&quot;  bgcolor=&quot;#888800&quot; | +***
| align=&quot;center&quot;  bgcolor=&quot;#888800&quot; | +***
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
|-
| align=&quot;left&quot;  | [[Lua_SyncedRead]]
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#888800&quot; | +***
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
| align=&quot;center&quot;  bgcolor=&quot;#888800&quot; | +**

|-
| align=&quot;left&quot;  | [[Lua_SyncedCtrl]]
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
|-
| align=&quot;left&quot;  | [[Lua_MoveCtrl]]
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
|-
| align=&quot;left&quot;  | [[Lua_PathFinder]]
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
|-
| align=&quot;left&quot;  | [[Lua_OpenGL_Api]]
| align=&quot;center&quot;  bgcolor=&quot;#888800&quot; | +***
| align=&quot;center&quot;  bgcolor=&quot;#888800&quot; | +***
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
|-
| align=&quot;left&quot;  | [[Lua_GLSL_Api]]
| align=&quot;center&quot;  bgcolor=&quot;#888800&quot; | +***
| align=&quot;center&quot;  bgcolor=&quot;#888800&quot; | +***
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
|-
| align=&quot;left&quot;  | [[Lua_FBO_and_RBO]]
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
|-
| align=&quot;left&quot;  | [[Lua_UnitRendering ]]
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
|-
| align=&quot;left&quot;  | [[Lua_Fonts]]
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
|-
| align=&quot;left&quot;  | [[Lua_ConstGL]]
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
|-
| align=&quot;left&quot;  | [[Lua_VFS]]
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
| align=&quot;center&quot;  bgcolor=&quot;#888800&quot; | +*
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
|-
| align=&quot;left&quot;  | [[Lua_Scream]]
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
|-
| align=&quot;left&quot;  | [[Lua_BitOps]]
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
|-
| align=&quot;left&quot;  | [[Lua_MathExtra]]
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
|-
| align=&quot;left&quot;  | [[Lua_Socket]]
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#772222&quot; | -
| align=&quot;center&quot;  bgcolor=&quot;#227722&quot; | +
|}


{| border=&quot;2&quot; cellpadding=&quot;4&quot; cellspacing=&quot;0&quot; style=&quot;margin: 1em 1em 1em; border: 1px #aaa solid; border-collapse: collapse;&quot;
|-
| align=&quot;center&quot; | *
| align=&quot;left&quot;| only VFS.ZIP_ONLY
|-
| align=&quot;center&quot; | **
| align=&quot;left&quot;| with special LOS handling and decoy unit handling
|-
| align=&quot;center&quot; | ***
| align=&quot;left&quot;| stripped down environment with certain functions removed
|}

[[Category:Lua]]</text>
      <sha1>140vxcvzgfi036ggztvpomxvyb9m8q7</sha1>
    </revision>
  </page>
  <page>
    <title>Lua:Libarylinks</title>
    <ns>0</ns>
    <id>3693</id>
    <revision>
      <id>29647</id>
      <parentid>29646</parentid>
      <timestamp>2015-09-13T18:03:41Z</timestamp>
      <contributor>
        <username>Picassoct</username>
        <id>2854</id>
      </contributor>
      <minor/>
      <comment>/* Lua libraries */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1905">[[Category:Lua]] 

== Lua libraries ==

Many things you need for springs  lua scripting, have been allready implemented and tested by others. It is considered good practice in allmost every software project to not reinvent the wheel. This statement does in no way imply you are unable to code this, but that you rather invest your time into not fixing the same bugs others found before you.
Other Projects have created lua-Librarys, lua files which you can include after copying (or referencing them on GitHub) into your project:

To use them in lua Units-scripts, download them into the same folder the Unitscript resides in and add
 &lt;sub&gt;include &quot;LibraryFileName.lua&quot;&lt;/sub&gt;

The referenced functions are now available. Many Librarys also include a Headerfile of all Functions made available. 

If you want to include a Lua-Function into your gadget or widget

 &lt;sub&gt;VFS.Include(&quot;Gamefolder/Relative/Path/ToLibrary/Library.lua&lt;/sub&gt;

&lt;big&gt; Librarys&lt;/big&gt;

=Journeywar =
Quality: Average


Table and UnitScript Operations

https://bitbucket.org/PicassoCT/journeywar/src/8cbe713fe3e1027a88f40f9a70f87b788a448048/scripts/lib_TableOp.lua?at=master

Library for Procedural Units and Buildings from Pieces

https://bitbucket.org/PicassoCT/journeywar/src/8cbe713fe3e1027a88f40f9a70f87b788a448048/scripts/lib_Build.lua?at=master

Miniature Operatings Systems and Statemachines

https://bitbucket.org/PicassoCT/journeywar/src/scripts/lib_OS.lua?at=master

=Zero-K=
Quality: Unknown


https://github.com/ZeroK-RTS/Zero-K/blob/c4af9dc6043eb8d0a5d48b34bfe3ad55190b1e73/scripts/constants.lua
https://github.com/ZeroK-RTS/Zero-K/blob/c4af9dc6043eb8d0a5d48b34bfe3ad55190b1e73/scripts/pieceControl.lua

=S44=
Quality: Unknown

https://github.com/spring1944/spring1944/blob/master/LuaRules/Gadgets/api_vector.lua
https://github.com/spring1944/spring1944/blob/master/LuaRules/Includes/utilities.lua

=BAR=
Quality: Unknown</text>
      <sha1>sghugsz0ks8sstm1ttjqefcixwywt5g</sha1>
    </revision>
  </page>
  <page>
    <title>Lua:Main</title>
    <ns>0</ns>
    <id>2254</id>
    <revision>
      <id>30789</id>
      <parentid>30675</parentid>
      <timestamp>2018-10-13T09:56:35Z</timestamp>
      <contributor>
        <username>Gajop</username>
        <id>2804</id>
      </contributor>
      <comment>Remove  some not really useful links</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1254">[[Engine_Development|Development]] &lt; {{FULLPAGENAME}}

=Lua FAQ=
Lua scripting is the primary way for developers to customize their games and add new features. Most aspects of the Spring engine can be controlled and extensively modified through the Lua API.

[[Lua_Beginners_FAQ|Introduction to Lua in Spring]]&lt;br&gt;
[[Lua:Tutorial_GettingStarted|Easy widget examples]]

=Interfaces {{HeaderNotice|(last update: 104)}}=
[[Lua:Environments]] (Details the available environments and shows which interfaces are loaded by each)

[[Lua:Callins]] (Entry points to lua addons)
{{LuaInterfaces}}

=Tutorials=
* [[Lua:Tutorial_GettingStarted|Easy example widgets]]
* [[LuaTutorials::InterCommunications]] (i.e. synced &lt;-&gt; unsynced communications)

=Other useful information=
* [[Lua_Libraries | Lua libraries]]
* [[Lua_Performance | Lua performance tips]]
* [[UI_commands]]
* [[Animation-LuaScripting | Unit animation scripting with Lua]]
* [https://github.com/spring/spring/tree/develop/rts/Lua#Source_Code Source code for Lua API]

=Official Lua documentation=
[http://www.lua.org/pil/ 'Programming in Lua' book online]&lt;br&gt;
[http://www.lua.org/manual/5.1/ Lua 5.1 Reference manual]&lt;br&gt;
[http://lua-users.org/wiki/TutorialDirectory Lua tutorials]
[[Category: Lua]]</text>
      <sha1>dfijextgd71q7utr6qow76fmckayty0</sha1>
    </revision>
  </page>
  <page>
    <title>Lua:Tutorial GettingStarted</title>
    <ns>0</ns>
    <id>3634</id>
    <revision>
      <id>30042</id>
      <parentid>29492</parentid>
      <timestamp>2016-06-11T00:23:30Z</timestamp>
      <contributor>
        <username>Gajop</username>
        <id>2804</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3441">[[Engine_Development|Development]] &lt; [[Lua_Scripting|Lua Scripting]] &lt; {{FULLPAGENAME}}

Here are some examples of small widgets, with useful code to get you started! 

To play with each example, place the code into a &quot;my_new_widget_name.lua&quot; file in your Spring/LuaUI/widgets dir (create it if not already present) and run Spring with any game. Your widget should then appear ingame!

To see many more examples, check out the LuaUI/widgets directory of the games in [[Gamedev:PublicRepos|PublicRepos]]. 

Note that every widget (and gadget) must include a GetInfo() callin, but all other callins are optional.

==Example 1==
The &quot;hello world&quot; example, with a ticking clock.
&lt;syntaxhighlight lang=&quot;lua&quot;&gt;
function widget:GetInfo()
   return {
      name         = &quot;Name as shown in widget list&quot;,
      desc         = &quot;Description as normally shown in tooltip&quot;,
      author       = &quot;It could be you!&quot;,
      date         = &quot;now&quot;,
      license      = &quot;PD&quot;, -- should be compatible with Spring
      layer        = 0,
      enabled      = true
   }
end

local helloWorld = &quot;I STARTED LOOK AT ME JIM!&quot;
local toggle

function widget:Initialize()
   Spring.Echo(helloWorld)
end

function widget:Update()
   if (toggle == true) then
      Spring.Echo(&quot;TOCK&quot;)
      toggle = false
   else
      Spring.Echo(&quot;TICK&quot;)
      toggle = true
   end
end
&lt;/syntaxhighlight&gt;


==Example 2==
How to make stuff happen when units do stuff.
&lt;syntaxhighlight lang=&quot;lua&quot;&gt;
function widget:GetInfo()
   return {
      name         = &quot;Unit Announcer&quot;,
      desc         = &quot;Units are proud to be alive&quot;,
      author       = &quot;Some guy&quot;,
      date         = &quot;I don't know why we include dates&quot;,
      license      = &quot;GPLv2 or later&quot;,
      layer        = 0,
      enabled      = true
   }
end

local machoUnits = {}

function widget:UnitCreated(unitID, unitDefID, unitTeam, builderID)
  Spring.Echo(&quot;HELLO&quot;)

  local humanName = UnitDefs[unitDefID].humanName
  local numWeapons = #UnitDefs[unitDefID].weapons
  local plural = numWeapons~=1 and &quot;s&quot; or &quot;&quot;

  Spring.Echo(&quot;I am unit &quot; .. unitID .. &quot;. I am a &quot; .. humanName .. &quot;.&quot;)
  Spring.Echo(&quot;I have &quot; .. numWeapons .. &quot; weapon&quot; .. plural .. &quot;.&quot;)
  if numWeapons&gt;0 then
    machoUnits[unitID] = true
  end
end

function widget:UnitDestroyed(unitID, unitDefID, unitTeam, attackerID, attackerDefID, attackerTeam)
  machoUnits[unitID] = nil
end 

function widget:UnitDamaged(unitID, unitDefID, unitTeam, damage, paralyzer, weaponDefID, projectileID, attackerID, attackerDefID, attackerTeam)
  if machoUnits[unitID] then return end

  local n = math.random(3,10)
  local ow = &quot;O&quot;
  for i=1,n do
    ow = ow .. &quot;W&quot;
  end
  Spring.Echo(ow)
end
&lt;/syntaxhighlight&gt;

==Example 3==
Something actually useful.
&lt;syntaxhighlight lang=&quot;lua&quot;&gt;
function widget:GetInfo()
  return {
    name      = &quot;Stop means Stop&quot;,
    desc      = &quot;Cancels Self D orders when unit is given a stop command&quot;,
    author    = &quot;enotseulB&quot;,
    date      = &quot;GPL v2 or later&quot;,
    license   = &quot;Feb 2015&quot;,
    layer     = 0,
    enabled   = true  
  }
end

local CMD_STOP = CMD.STOP

function widget:UnitCommand(unitID, unitDefID, teamID, cmdID, cmdParams, cmdOptions)
    if cmdID ~= CMD_STOP then return end
    if not unitID then return end
    if teamID ~= Spring.GetMyTeamID() then return end

    if (Spring.GetUnitSelfDTime(unitID) &gt; 0) then
        Spring.GiveOrderToUnit(unitID, CMD.SELFD, {}, {})
    end 
end
&lt;/syntaxhighlight&gt;
[[category: Lua]]</text>
      <sha1>7ir7ydllc13hluxr8unah97tqa9woj2</sha1>
    </revision>
  </page>
  <page>
    <title>Lua:WidgetDirectory</title>
    <ns>0</ns>
    <id>2612</id>
    <revision>
      <id>28495</id>
      <parentid>21160</parentid>
      <timestamp>2014-04-15T09:48:23Z</timestamp>
      <contributor>
        <username>Malric</username>
        <id>539</id>
      </contributor>
      <comment>/* Click on the link below to find all the widgets in Spring */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="305">&lt;span style=&quot;text-align:center&quot;&gt;
= Click on the link below to find all the widgets in Spring = 
*[http://widgets.springrts.de/ Widget Database] (for more info about widget database check [[WidgetDatabaseFAQ]])
*[http://springfiles.com/spring/lua-scripts Lua Category on Springfiles.com]

[[Category: Lua]]</text>
      <sha1>gythms5aimqhwprh7xdnbf37lv4uh56</sha1>
    </revision>
  </page>
  <page>
    <title>LuaCallinReturn</title>
    <ns>0</ns>
    <id>2580</id>
    <revision>
      <id>31792</id>
      <parentid>31159</parentid>
      <timestamp>2022-05-24T19:52:46Z</timestamp>
      <contributor>
        <username>Maddox</username>
        <id>2934</id>
      </contributor>
      <minor/>
      <comment>Added params and description to AllowFeatureBuildStep</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="15541">[[Engine_Development|Development]] &lt; [[Lua_Scripting|Lua Scripting]] &lt; {{FULLPAGENAME}}

==Engine Source==
If you can understand Lua code well and wish to get the most up to date info, you can refer to:
{{sourcelink|file=cont/base/springcontent/LuaGadgets/actions.lua}}, 
{{sourcelink|file=cont/LuaUI/widgets.lua}} and &lt;br&gt;
{{sourcelink|file=cont/base/springcontent/LuaGadgets/gadgets.lua}} &lt;br&gt;
to see how widget/gadget call-ins are distributed, find call-in and widgetHandler function definitions, see how they are processed and what values should be returned from some call ins
(are these the only files?)

==What is a callin anyway?==
Call-ins are calls from the engine, into the gadget or widget script. In other words, these functions are called when a particular ''event'' happens.
Some call-in functions can return values to the engine.
===Blocking events with return values===
The call-in functions named '''''Allow'''''XXX can block their event by returning ''false''.&lt;br&gt;
For example ''AllowUnitTransfer()''&lt;br&gt;
&lt;code&gt;return true&lt;/code&gt; = allow transfer &lt;br&gt;
&lt;code&gt;return false&lt;/code&gt; = deny transfer

==Commands, general-purpose:==

&lt;font color=#55ee99&gt;Initialize()&lt;/font&gt; --&gt; none.&lt;br&gt;
called when widget/gadget gets (re-)loaded.

&lt;font color=#55ee99&gt;Shutdown()&lt;/font&gt; --&gt; none.

&lt;font color=#55ee99&gt;PlayerChanged&lt;/font&gt; --&gt; (playerID).
gadget/widget: Use this to check whether a player has become spectator for instance.

&lt;font color=#55ee99&gt;LayoutButtons()&lt;/font&gt; --&gt; unknown, please document.

&lt;font color=#55ee99&gt;ConfigureLayout()&lt;/font&gt; --&gt; &quot;command&quot;.

&lt;font color=#55ee99&gt;CommandNotify()&lt;/font&gt; --&gt; &quot;id, params, options&quot;, where id = the CommandID

&lt;font color=#55ee99&gt;KeyPress()&lt;/font&gt; --&gt; &quot;key, mods, isRepeat&quot;, where key = keymap, mods = SHIFT, etc.

&lt;font color=#55ee99&gt;KeyRelease()&lt;/font&gt; --&gt; &quot;key&quot;

&lt;font color=#55ee99&gt;MouseMove()&lt;/font&gt; --&gt; &quot;x, y, dx, dy, button&quot;

&lt;font color=#55ee99&gt;MousePress()&lt;/font&gt; --&gt; &quot;x, y, button&quot;&lt;br/&gt;
&lt;font color=#dd9944&gt;button parameter values: left - 1, middle - 2, right - 3&lt;/font&gt;

{{new|&gt;96.0}} buttom param removed  {{Sourcelinkhash|4c104344e92256e33d79820e9012c5e1178e212b}} 


&lt;font color=#55ee99&gt;MouseRelease()&lt;/font&gt; --&gt; &quot;x, y, button&quot;&lt;br/&gt;
&lt;font color=#dd9944&gt;Please note that in order to have Spring call MouseRelease, you need to have a MousePress call-in in the same widget that returns true.&lt;/font&gt;

&lt;font color=#55ee99&gt;MouseWheel()&lt;/font&gt; --&gt; &quot;up, value&quot;

&lt;font color=#55ee99&gt;IsAbove()&lt;/font&gt; --&gt; &quot;x, y&quot; where x,y = screen coordinates.

&lt;font color=#55ee99&gt;GetTooltip()&lt;/font&gt; --&gt; &quot;x, y&quot; where x,y = screen coordinates.  Returns WorldTooltip.

&lt;font color=#55ee99&gt;AddConsoleLine()&lt;/font&gt; --&gt; &quot;msg, priority&quot;

&lt;font color=#55ee99&gt;MapDrawCmd()&lt;/font&gt; --&gt; &quot;playerID, cmdType, px, py, pz, labeltext&quot;

&lt;font color=#55ee99&gt;AllowCommand()&lt;/font&gt; --&gt; &quot;unitID, unitDefID, unitTeam, cmdID, cmdParams, cmdOptions, cmdTag, synced&quot;&lt;br /&gt;
&lt;font color=#dd9944&gt;Synced only.&lt;/font&gt;

&lt;font color=#55ee99&gt;CommandFallback()&lt;/font&gt; --&gt; &quot;unitID, unitDefID, unitTeam, cmdID, cmdParams, cmdOptions, cmdTag&quot;

&lt;font color=#55ee99&gt;CommandsChanged()&lt;/font&gt; --&gt; unknown (none?)

&lt;font color=#55ee99&gt;AllowUnitCreation()&lt;/font&gt; --&gt; &quot;unitDefID, builderID, builderTeam, x, y, z, facing&quot;

&lt;font color=#55ee99&gt;AllowUnitTransfer()&lt;/font&gt; --&gt; &quot;unitID, unitDefID, oldTeam, newTeam, capture&quot;

&lt;font color=#55ee99&gt;AllowUnitBuildStep()&lt;/font&gt; --&gt; &quot;builderID, builderTeam, unitID, unitDefID, part&quot;

&lt;font color=#55ee99&gt;AllowFeatureCreation()&lt;/font&gt; --&gt; &quot;featureDefID, teamID, x, y, z&quot;

&lt;font color=#55ee99&gt;AllowFeatureBuildStep()&lt;/font&gt; --&gt; &quot;builderID, builderTeam, featureID, featureDefID, part&quot;&lt;/font&gt;&lt;br&gt;
&lt;font color=#dd9944&gt;Called just before a feature updates its build percentage. Returns a bool to allow the change.&lt;/font&gt;

&lt;font color=#55ee99&gt;AllowResourceLevel()&lt;/font&gt; --&gt; &quot;teamID, res, level&quot;

&lt;font color=#55ee99&gt;AllowResourceTransfer()&lt;/font&gt; --&gt; &quot;teamID, res, level&quot;&lt;/font&gt;

&lt;font color=#55ee99&gt;Update()&lt;/font&gt; --&gt; &quot;dt&quot;&lt;br&gt;
&lt;font color=#dd9944&gt;called every screenframe. dt is the time since the last screenframe&lt;/font&gt;

&lt;font color=#55ee99&gt;DefaultCommand()&lt;/font&gt; --&gt; &quot;type,id&quot;&lt;br&gt;
&lt;font color=#dd9944&gt;can return an [[Lua_CMDs|CMD]] to change cursor and command. {{forumlink|topic=26438|title=example usage}}&lt;/font&gt;

&lt;font color=#55ee99&gt;AllowDirectUnitControl(unitID, unitDefID, unitTeam, playerID)   &lt;/font&gt; -&gt; allowFpsControl&lt;br&gt;
''return true'' allows fps mode, ''return false'' blocks it.

==Unit-Specific:==

&lt;font color=#55ee99&gt;UnitPreDamaged()&lt;/font&gt; --&gt; &quot;unitID, unitDefID, unitTeam, damage, paralyzer, weaponDefID, attackerID, attackerDefID, attackerTeam&quot; &lt;span class=&quot;warning&quot;&gt;(prior to 94.0)&lt;/span&gt;

&lt;font color=#55ee99&gt;UnitPreDamaged()&lt;/font&gt; --&gt; &quot;unitID, unitDefID, unitTeam, damage, paralyzer, weaponDefID, projectileID, attackerID, attackerDefID, attackerTeam&quot; &lt;span class=&quot;warning&quot;&gt;(as of 94.0)&lt;/span&gt;

&lt;font color=#55ee99&gt;UnitDamaged()&lt;/font&gt; --&gt; &quot;unitID, unitDefID, unitTeam, damage, paralyzer, weaponDefID, projectileID, attackerID, attackerDefID, attackerTeam&quot; &lt;span class=&quot;warning&quot;&gt;(as of 95.0)&lt;/span&gt; &lt;br&gt;
&lt;font color=#dd9944&gt;Can overwrite the taken damage by returning a new number value.&lt;br&gt; 

As of 88.0 for both UnitDamaged and UnitPreDamaged:
     weaponDefID -1 --&gt; debris collision
     weaponDefID -2 --&gt; ground collision
     weaponDefID -3 --&gt; object collision
     weaponDefID -4 --&gt; fire damage
     weaponDefID -5 --&gt; water damage
     weaponDefID -6 --&gt; kill damage
     weaponDefID -7 --&gt; crush damage

As of 96.0 {Unit,Feature}{Pre}Damaged events receive the 'attacker' ID when object is crushed&lt;/font&gt;

&lt;font color=#55ee99&gt;UnitExperience()&lt;/font&gt; --&gt; &quot;unitID, unitDefID, unitTeam, experience, oldExperience&quot;&lt;br&gt;
&lt;font color=#dd9944&gt;Spring.SetExperienceGrade must be called first to determine how often it is called&lt;/font&gt;

&lt;font color=#55ee99&gt;UnitCreated()&lt;/font&gt; --&gt; &quot;unitID, unitDefID, teamID, builderID&quot;&lt;br&gt;
&lt;font color=#dd9944&gt;Unit started being built (it's in wireframe mode)&lt;/font&gt;

&lt;font color=#55ee99&gt;UnitFinished()&lt;/font&gt; --&gt; &quot;unitID, unitDefID, teamID&quot;

&lt;font color=#55ee99&gt;UnitFromFactory()&lt;/font&gt; --&gt; &quot;unitID, unitDefID, unitTeam, factID, factDefID, userOrders&quot;

&lt;font color=#55ee99&gt;UnitDestroyed()&lt;/font&gt; --&gt; &quot;unitID, unitDefID, teamID, attackerID, attackerDefID, attackerTeamID&quot;

&lt;font color=#55ee99&gt;UnitTaken()&lt;/font&gt; --&gt; &quot;unitID, unitDefID, unitTeam, newTeam&quot;&lt;br&gt;
&lt;font color=#dd9944&gt;Unit still belongs to old team&lt;/font&gt;

&lt;font color=#55ee99&gt;UnitGiven()&lt;/font&gt; --&gt; &quot;unitID, unitDefID, unitTeam, oldTeam&quot;&lt;br&gt;
&lt;font color=#dd9944&gt;Unit now belongs to new team&lt;/font&gt;

&lt;font color=#55ee99&gt;UnitIdle()&lt;/font&gt; --&gt; &quot;unitID, unitDefID, teamID&quot;&lt;br&gt;
&lt;font color=#dd9944&gt;No commands in this unit's queue. Beware, might be fired while 'guarding'.&lt;/font&gt;

&lt;font color=#55ee99&gt;UnitCommand()&lt;/font&gt; --&gt; &quot;unitID, unitDefID, unitTeam, cmdID, cmdOpts, cmdParams, cmdTag&quot; &lt;span class=&quot;warning&quot;&gt;(cmdTag only available from version 95.0)&lt;/span&gt;


&lt;font color=#55ee99&gt;UnitSeismicPing()&lt;/font&gt; --&gt; &quot;x, y, z, strength&quot;

&lt;font color=#55ee99&gt;UnitEnteredRadar()&lt;/font&gt; --&gt; &quot;unitID, unitTeam&quot;

&lt;font color=#55ee99&gt;UnitEnteredLos()&lt;/font&gt; --&gt; &quot;unitID, teamID&quot;

&lt;font color=#55ee99&gt;UnitLeftRadar()&lt;/font&gt; --&gt; &quot;unitID, unitTeam&quot;

&lt;font color=#55ee99&gt;UnitLeftLos()&lt;/font&gt; --&gt; &quot;unitID, unitDefID, teamID&quot;

&lt;font color=#55ee99&gt;UnitLoaded()&lt;/font&gt; --&gt; &quot;unitID, unitDefID, unitTeam, transportID, transportTeam&quot;

&lt;font color=#55ee99&gt;UnitUnloaded()&lt;/font&gt; --&gt; &quot;unitID, unitDefID, teamID, transportID&quot;

&lt;font color=#55ee99&gt;UnitCloaked()&lt;/font&gt; --&gt; &quot;unitID, unitDefID, teamID&quot;

&lt;font color=#55ee99&gt;UnitDecloaked)&lt;/font&gt;--&gt; &quot;unitID, unitDefID, teamID&quot;

&lt;font color=#55ee99&gt;UnitMoveFailed()&lt;/font&gt; --&gt; &quot;unitID, unitDefID, unitTeam&quot;
&lt;br&gt;&lt;font color=#dd9944&gt;Only called for unitDefIDs registered via [[Lua_System#Synced|Script.SetWatchUnit]] since 85.0&lt;/font&gt;

&lt;font color=#55ee99&gt;StockpileChanged()&lt;/font&gt; --&gt; &quot;unitID, unitDefID, unitTeam, weaponNum, oldCount, newCount&quot;

&lt;font color=#55ee99&gt;UnitEnteredWater()&lt;/font&gt; --&gt; &quot;unitID, unitDefID, teamID&quot;
&lt;span class=&quot;warning&quot;&gt;(as of 95.0)&lt;/span&gt;

&lt;font color=#55ee99&gt;UnitEnteredAir()&lt;/font&gt; --&gt; &quot;unitID, unitDefID, teamID&quot;
&lt;span class=&quot;warning&quot;&gt;(as of 95.0)&lt;/span&gt;

&lt;font color=#55ee99&gt;UnitLeftWater()&lt;/font&gt; --&gt; &quot;unitID, unitDefID, teamID&quot;
&lt;span class=&quot;warning&quot;&gt;(as of 95.0)&lt;/span&gt;

&lt;font color=#55ee99&gt;UnitLeftAir()&lt;/font&gt; --&gt; &quot;unitID, unitDefID, teamID&quot;
&lt;span class=&quot;warning&quot;&gt;(as of 95.0)&lt;/span&gt;

&lt;font color=#55ee99&gt;ShieldPreDamaged()&lt;/font&gt; --&gt; &quot;proID, shieldEmitterWeaponNum, shieldCarrierUnitID, boolBounceProjectile, beamEmitterWaponNumber, beamCarrierUnitID, startx, starty, startz, hitx, hity, hitz&quot;

&lt;font color=#55ee99&gt;UnitUnitCollision(colliderID, collideeID)&lt;/font&gt; -- needs SetWatchUnit enabled for both parties

&lt;font color=#55ee99&gt;AllowWeaponTargetCheck(attackerID, attackerWeaponNum, attackerWeaponDefID)&lt;/font&gt;&lt;br&gt;&lt;font color=#dd9944&gt;Only called for weaponDefIDs registered via [[Lua_System#Synced|Script.SetWatchWeapon]] since 92.0&lt;/font&gt;

&lt;font color=#55ee99&gt;AllowWeaponTarget(attackerID, targetID, attackerWeaponNum, attackerWeaponDefID, defaultPriority)&lt;/font&gt; 
 --&gt; &lt;code&gt;return &quot;targetAllowed, targetPriority&quot;&lt;/code&gt;
&lt;span class=&quot;warning&quot;&gt;defaultPriority new in 89.0&lt;/span&gt;&lt;br&gt;

&lt;font color=#dd9944&gt;Only called for weaponDefIDs registered via [[Lua_System#Synced|Script.SetWatchWeapon]] since 92.0&lt;/font&gt;

&lt;font color=#55ee99&gt;DrawShield(number unitID, number weaponID)&lt;/font&gt; --&gt; boolean

''true'' (&lt;-?) skips Spring's own drawing of shield &lt;weaponID&gt; owned by unit &lt;unitID&gt;

[https://github.com/spring/spring/commit/7bbfd9464d4f74c12163ea0740c8c60d1ba978f1 maybe new in 86.0+]

==Feature-Specific:==

&lt;font color=#55ee99&gt;FeatureCreated()&lt;/font&gt; --&gt; &quot;featureID, allyTeam&quot;

&lt;font color=#55ee99&gt;FeatureDestroyed()&lt;/font&gt; --&gt; &quot;featureID, allyTeam&quot;

&lt;font color=#55ee99&gt;TerraformComplete()&lt;/font&gt; --&gt; &quot;unitID, unitDefID, unitTeam, buildUnitID, buildUnitDefID, buildUnitTeam&quot;

&lt;font color=#55ee99&gt;UnitCmdDone()&lt;/font&gt; --&gt; &quot;unitID, unitDefID, unitTeam, cmdID, cmdTag, cmdParams, cmdOptions&quot; &lt;span class=&quot;warning&quot;&gt;cmdParams and cmdOptions are only available from version 95.0&lt;/span&gt;

&lt;font color=#55ee99&gt;UnitFeatureCollision(colliderID, collideeID, crushKilled)&lt;/font&gt; -- needs SetWatchUnit for first and SetWatchFeature for second party

{{new|95.0}} &lt;font color=#55ee99&gt;FeatureDamaged()&lt;/font&gt; --&gt; &quot;featureID, featureDefID, featureTeam, damage, weaponDefID, projectileID, attackerID, attackerDefID, attackerTeam&quot;

{{new|95.0}} &lt;font color=#55ee99&gt;FeaturePreDamaged()&lt;/font&gt; --&gt; &quot;featureID, featureDefID, featureTeam, damage, weaponDefID, projectileID, attackerID, attackerDefID, attackerTeam&quot;

&lt;code&gt;--&gt; return newDamage, impulseMult (=0)&lt;/code&gt;

==Drawing:==
Inside these functions, you can use the [[Lua_OpenGL_Api | Lua OpenGL Api]] to draw graphics.

* &lt;font color=#55ee99&gt;DrawGenesis()&lt;/font&gt; --&gt; none.  Don't render here.

 Spring draws the sky, the map, some water types, and unit selection.

* &lt;font color=#55ee99&gt;DrawWorldPreUnit()&lt;/font&gt; --&gt; none.

 Spring draws units, features, some water types, cloaked units, and the sun.

* &lt;font color=#55ee99&gt;DrawWorld()&lt;/font&gt; --&gt; none.

 Spring draws command queues, 'map stuff', and map marks.

Each unit might also have a DrawUnit call, [[Lua_UnitRendering|enabled here.]]

&lt;font color=#55ee99&gt;DrawUnit(unitID,DrawMode)&lt;/font&gt;&lt;br&gt;
With enum DrawMode {&lt;br&gt;
	notDrawing     = 0,&lt;br&gt;
	normalDraw     = 1,&lt;br&gt;
	shadowDraw     = 2,&lt;br&gt;
	reflectionDraw = 3,&lt;br&gt;
	refractionDraw = 4&lt;br&gt;
	};

&lt;font color=#55ee99&gt;DrawFeature(featureID, DrawMode)&lt;/font&gt;&lt;br&gt;

&lt;font color=#55ee99&gt;DrawShield(unitID, weaponID, DrawMode)&lt;/font&gt;&lt;br&gt;

&lt;font color=#55ee99&gt;DrawProjectile(projectileID, DrawMode)&lt;/font&gt;&lt;br&gt;

&lt;font color=#55ee99&gt;DrawScreenEffects()&lt;/font&gt; --&gt; &quot;vsx, vsy&quot; where vsx, vsy are screen coords.

&lt;font color=#55ee99&gt;DrawScreen()&lt;/font&gt; --&gt; none.
   
&lt;font color=#55ee99&gt;DrawInMiniMap()&lt;/font&gt; --&gt; &quot;sx, sy&quot; where sx,sy are values relative to the minimap's position and scale.

&lt;font color=#55ee99&gt;DrawWorldShadow()&lt;/font&gt; --&gt; none.

&lt;font color=#55ee99&gt;DrawWorldReflection()&lt;/font&gt; --&gt; none.

&lt;font color=#55ee99&gt;DrawWorldRefraction()&lt;/font&gt; --&gt; none.

&lt;font color=#55ee99&gt;DrawLoadScreen()&lt;/font&gt; --&gt; none. {{new|95.0}}

Only available to LuaIntro, draws custom load screens.

==Game Events:==

&lt;font color=#55ee99&gt;GameID()&lt;/font&gt; --&gt; &quot;gameID&quot; {{new|89.0}}

&lt;font color=#55ee99&gt;Explosion()&lt;/font&gt; --&gt; &quot;weaponID, px, py, pz, ownerID&quot;
&lt;br&gt;&lt;font color=#dd9944&gt;Only called for weaponDefIDs registered via Script.SetWatchWeapon&lt;/font&gt;
&lt;br&gt;return true to hide the weapon's CEG

&lt;font color=#55ee99&gt;ShockFront()&lt;/font&gt; --&gt; &quot;power, dx, dy, dz&quot; &lt;span class=&quot;warning&quot;&gt;Not yet implemented!&lt;/span&gt;

&lt;font color=#55ee99&gt;GameFrame()&lt;/font&gt; --&gt; &quot;frameNum&quot;

&lt;font color=#55ee99&gt;CobCallback()&lt;/font&gt; --&gt; unknown, marked FIXME.

&lt;font color=#55ee99&gt;GroupChanged()&lt;/font&gt; --&gt; &quot;groupID&quot; where groupID is the value of Group whose table value changed.

&lt;font color=#55ee99&gt;WorldTooltip()&lt;/font&gt; --&gt; &quot;ttType, data1, data2, data3&quot; special, should be documented in detail. &lt;span class=&quot;warning&quot;&gt;Not yet implemented!&lt;/span&gt;

&lt;font color=#55ee99&gt;GamePreload()&lt;/font&gt;  --&gt; none.

&lt;font color=#55ee99&gt;GameStart()&lt;/font&gt; --&gt; none.

&lt;font color=#55ee99&gt;GameProgress()&lt;/font&gt; --&gt; &quot;serverFrameNum&quot; ( called every 60 frames, calculating delta between GameFrame and GameProgress can give an ETA about catching up with simulation )&lt;span class=&quot;warning&quot;&gt; Not yet implemented!&lt;/span&gt;

&lt;font color=#55ee99&gt;GameOver()&lt;/font&gt; --&gt;  &quot;[ [1] = allyTeamID1, [2] = allyTeamID2, ... ]&quot;,  a list of winning allyteams, if empty the game result was undecided ( like when dropping from an host )&lt;span class=&quot;warning&quot;&gt;   Will return nil in pre 0.83.x&lt;/span&gt;

&lt;font color=#55ee99&gt;TeamDied()&lt;/font&gt; --&gt; &quot;TeamID&quot; where TeamID = the team that has been eliminated.

&lt;font color=#55ee99&gt;AllowStartPosition()&lt;/font&gt; --&gt; 
   number clampedPos.x, number clampedPos.y, number clampedPos.z,
   number playerID,
   number readyState,
   number rawPickPos.x, number rawPickPos.y, number rawPickPos.z

FIXME: apparently the above is incorrect and parameters are AllowStartPosition(playerID, teamID, readyState, cx, cy, cz, rx, ry, rz)

clampedPos = coordinates clamped into startbox, rawPickPos = where player tried to start

{{New|95.0}} the default 'failed to choose' start-position is now just (0,0,0), not (0,-500,0) 


readyState can be any one of:
    PLAYER_RDYSTATE_UPDATED = 0 -- player picked a position
    PLAYER_RDYSTATE_READIED = 1 -- player clicked ready
    PLAYER_RDYSTATE_FORCED = 2 -- game was force-started (player did not click ready)
    PLAYER_RDYSTATE_FAILED = 3


&lt;font color=#55ee99&gt;GameSetup()&lt;/font&gt; --&gt; string &quot;state&quot;, boolean &quot;ready&quot;, table &quot;playerStates&quot; 
&lt;br&gt;return success, newReady

&lt;font color=#55ee99&gt;GamePaused()&lt;/font&gt; --&gt; &quot;playerID, paused&quot; 

&lt;font color=#55ee99&gt;PlayerAdded()&lt;/font&gt; --&gt; &quot;playerID&quot; 

&lt;font color=#55ee99&gt;PlayerRemoved()&lt;/font&gt; --&gt; &quot;playerID, reason&quot;

==Projectiles:==

&lt;font color=#55ee99&gt;ProjectileCreated()&lt;/font&gt; --&gt; &quot;proID, proOwnerID, weaponDefID&quot;
&lt;br&gt;&lt;font color=#dd9944&gt;Only called for weaponDefIDs registered via Script.SetWatchWeapon&lt;/font&gt;

&lt;font color=#55ee99&gt;ProjectileDestroyed()&lt;/font&gt; --&gt; &quot;proID&quot;
&lt;br&gt;&lt;font color=#dd9944&gt;Only called for weaponDefIDs registered via Script.SetWatchWeapon&lt;/font&gt;

&lt;font color=#55ee99&gt;AllowWeaponInterceptTarget&lt;/font&gt; --&gt; &quot;number interceptorUnitID, number interceptorWeaponID, number targetProjectileID&quot;
returns boolean
&lt;br&gt;&lt;font color=#dd9944&gt;Only called for weaponDefIDs registered via Script.SetWatchWeapon&lt;/font&gt;

[[Category:Deprecated]]</text>
      <sha1>svjwj4xiodwi9gi9l4d2l2hosf8sh9v</sha1>
    </revision>
  </page>
  <page>
    <title>LuaLifecycle</title>
    <ns>0</ns>
    <id>3857</id>
    <revision>
      <id>31296</id>
      <parentid>31295</parentid>
      <timestamp>2020-11-08T20:09:00Z</timestamp>
      <contributor>
        <username>Picassoct</username>
        <id>2854</id>
      </contributor>
      <comment>/* On-Load */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2927">This is work in Progress: Its goal is to collect and present all that missing information in the other articles, that lead to look ups in the source code.


== Pre-Load ==

Spring takes your game either as a folder with the ending .sdd or as a zipped file distributed- either traditionally or via rapid, in a series of small files, stored in the rapid (/home/picasso/.spring/rapid/repos.springrts.com) folder in your spring installation. 
Spring will compute a hash over those files and folders. If they are altered in name, value or existence, spring will not sync these games up. You will not go to war today.
You can sync a .sdd folder with zipped games, by adding a springignore.txt which is similar to a .gitignore.

You can not add external widgets to a sdd folder and make it work. (TODO Validate)

The nature of this hash, enforces something else. With all content static, you can not store any values &quot;inside&quot; your game.
You can store values as config values within the spring installation. You can load textfiles from external folders reachable to spring.
But you cant change what makes the game.



== On-Load ==

Spring will load your game and then present the loaded files within the game-code as reachable via the VFS (Virtual File System).
Some files can be altered and reloaded for development purposes. This includes the synced lua (/luarules reload) - which is equivalent to starting a new game, synced script wise.
UI-Files can be altered and reloaded, and already existing files at the start can be re-used. (/luaui reload). You can not add new widgets to the folder.
Depending on wether the game allows userWidgets (ModOptions), all already existing widgets in the external /LuaUI/GAMENAME/folder will be reloaded.
In this folder, settings for the User-LuaUI can be stored persistently.

During engine development some mistakes were made, regarding naming during load.
Meaning, a map can have the same lua-rules and luaui folder, to implement map specific content and this content is loaded into the same namespace,
as regular widgets (/luaui) and and gadgets (/luarules).
This can lead to naming collisions and not working widgets / synced game parts, depending on the map.
The usual way to avoid this, is to rename your luaui and luarules (TODO Check) folder and assume that all gadgets /widgets loaded into the default folder are Map based or other external widgets.

For a example of such a architectural separation look at 

https://github.com/beyond-all-reason/Beyond-All-Reason/tree/master/luaui

other games have a exclude map lua function, that refuses to load non-game lua.

== On-LuaIntro ==

== On-LuaUI load ==

Depending on how the widgets are loaded and what framework they use, subtle different lua-sntax rules may apply. 
This means that lua functions in those widgets will have to be declared to be used in parsing order.

== On-LuaRules/Synced load ==

== On-Victory ==

== On-GameEnd ==</text>
      <sha1>tq6vm6aymfw96a25pabc5s7y4jynq1m</sha1>
    </revision>
  </page>
  <page>
    <title>LuaSocket</title>
    <ns>0</ns>
    <id>3545</id>
    <redirect title="Lua Socket" />
    <revision>
      <id>27522</id>
      <timestamp>2013-08-18T21:58:27Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>Abma moved page [[LuaSocket]] to [[Lua Socket]]: is an engine interface</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="24">#REDIRECT [[Lua Socket]]</text>
      <sha1>9ogqb7ax9hg1vwaxd90z6vgpzuc963k</sha1>
    </revision>
  </page>
  <page>
    <title>LuaTutorials::InterCommunications</title>
    <ns>0</ns>
    <id>3404</id>
    <revision>
      <id>30610</id>
      <parentid>27640</parentid>
      <timestamp>2018-02-02T16:03:32Z</timestamp>
      <contributor>
        <username>Gajop</username>
        <id>2804</id>
      </contributor>
      <comment>/* widgets -&gt; gadgets synced */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1190">[[Engine_Development|Development]] &lt; [[Lua_Scripting|Lua Scripting]] &lt; {{FULLPAGENAME}}


&lt;span class=note&gt; Note [[Animation-LuaScripting|LuaUnitScripts]] are `gadgets synced`.&lt;/span&gt;

=Inter Lua Communications=
==gadgets synced -&gt; gadgets unsynced==
* [[Lua_SyncedCtrl#RulesParams|RulesParams]] [[Lua_SyncedRead#RulesParams|(read funcs)]]
* [[Lua_System#Synced|SendToUnsynced]]
* [[Lua_sync_to_unsync|SYNCED]]

==gadgets synced -&gt; widgets==
* [[Lua_SyncedCtrl#RulesParams|RulesParams]] [[Lua_SyncedRead#RulesParams|(read funcs)]]

==gadgets unsynced -&gt; widgets==
* Script.LuaUI

==widgets, gadgets unsynced -&gt; gadgets synced==
* [[Lua_UnsyncedCtrl#SendLuaMessage|LuaMessages]]

=Intra Lua Communications=
==gadgets synced -&gt; gadgets synced==
* [[Lua_SyncedCtrl#RulesParams|RulesParams]] [[Lua_SyncedRead#RulesParams|(read funcs)]]
* GG
* Script.LuaRules / Script.LuaGaia

==gadgets unsynced -&gt; gadgets unsynced==
* GG
* Script.LuaRules / Script.LuaGaia

==widgets -&gt; widgets==
* WG

==widgets -&gt; widgets (other players)==
* [[Lua_UnsyncedCtrl#SendLuaMessage|LuaMessages]]

== Further Reading ==
{{forumlink|topic=11408|title=Communicating between Gadgets (forum thread)}}
[[category: Lua]]</text>
      <sha1>rxd4djbo7bofmkaotrj9zaiviafrf1n</sha1>
    </revision>
  </page>
  <page>
    <title>Lua Beginners FAQ</title>
    <ns>0</ns>
    <id>2400</id>
    <revision>
      <id>31672</id>
      <parentid>31671</parentid>
      <timestamp>2021-12-12T09:36:00Z</timestamp>
      <contributor>
        <username>Picassoct</username>
        <id>2854</id>
      </contributor>
      <comment>/* Complex Lifecycles */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5807">[[Engine_Development|Development]] &lt; [[Lua_Scripting|Lua Scripting]] &lt; {{FULLPAGENAME}}


This page is an introduction to using Lua in Spring - it only tries to answer general questions, for more specific Questions please ask in the forum.


==Where should I start?==

You can start by reading general Lua tutorials  [http://lua-users.org/wiki/LuaTutorial here]. 

After that, you could look at the example widget [[Lua:Tutorial_GettingStarted|here]], and try to add some functionality of your own!

Once you're a pro, have a look at the game repos [https://springrts.com/wiki/Gamedev:PublicRepos here], especially their /luaui/Widgets and /luarules/gadgets dirs.

==Where can I find help?==

You can find documentation of Springs Lua API on the [[Lua_Scripting|Lua_Scripting]] page. Discussion of lua coding takes place on the [https://springrts.com/wiki/Read_Me_First lobby] in #moddev and #lua, and there is also a [https://springrts.com/phpbb/viewforum.php?f=23 Lua sub-forum].


==How do I open &quot;.lua&quot; files?==

Any text editor is enough. On Windows i.e. use [http://notepad-plus.sourceforge.net/uk/site.htm Notepad++]. There are also IDEs able to work with Lua, such as Eclipse, if you look for them.

==What is a call-in? And a call-out?==

Call-ins are functions defined in your script that Spring calls when a determined event takes place. For example, the widget:Initialize() call-in is run by Spring when the widget is loaded.
Call-outs are functions defined in Spring you can run at whichever moment you desire. For example, when you call Spring.GetUnitTeam(unitID), the engine returns the teamID of the unit identified by &quot;unitID&quot;.


==What is the difference between unsynced and synced lua code?==

Synced code is code that runs, identically and at the same time, on every connected client. In practice, this means code which controls the game state. Unsynced code is code that will run differently (or maybe not at all) on each connected client. Typically, this means the user interface.

For example, lua code to make units explode if they fell down a cliff would need to be synced. But, code that warned a player when one of their own units was getting near a cliff edge, would need to be unsynced.


==What is the difference between LuaUI, LuaRules, widgets and gadgets?==

Spring allows various [[Lua:Environments|Lua Environments]], each with differing functionality. Inside each Lua environment, developers can write addons, which are self-contained pieces of code. There are:
* &lt;b&gt;LuaUI&lt;/b&gt;: Used for unsynced GUI related code. Addons in here are often called widgets. Clients can (if the game permits it) control which widgets are running. Widgets contain only unsynced code. They can be bundled inside the game, or loaded from the users &quot;Spring/LuaUI/Wigets&quot; directory.
* &lt;b&gt;LuaRules&lt;/b&gt;: Addons in here are often called gadgets. Clients cannot choose which gadgets run. Gadgets can include both synced and unsynced code, and must be bundled inside the game.

Intended for mappers, there is also LuaGaia, which behaves like LuaRules but is separated from it. To see which of the lua environoments has access to which data/functionality, see [[Lua:Environments#Interfaces]] and [[Lua:Callins]].

==What can't Lua do in the current version of Spring?==

Springs Lua interface is very powerful. To work out if some idea is possible you need to ask 
* When do I need the engine to tell me something has happened? Check against [[Lua:Callins|Callins]].
* What information will I need to know about the game state? Check against [[Lua_SyncedRead]] (synced) and [[Lua_UnsyncedRead]] (unsynced).
* What do I then need to do about it? Check against [[Lua_SyncedCtrl]] (synced) and[[Lua_UnsyncedCtrl]] (unsynced).
Sometimes you need special functionality, like disk access or OpenGL calls, in which case check against [[Lua_Scripting#Interfaces|Interfaces]].

For completeness, some examples of things you (currently) can't do:
*control the ground LOS - but you can set the los status of units!
*add custom parameters to CEG definitions.

==Complex Lifecycles==

Due to the complexity of the simulation, spring scripts are burdened with the curse of complex lifecyles very similar to https://en.wikipedia.org/wiki/Object_lifetime in programing.

This means, you can not rely on any information about the simulation being valid after as little as 1 frame has passed. Units may have been captured, destroyed or created in this time. Terrain may have been altered.

People usually combat this by creating large amounts of  protective boiler plate, checking if a unit still exists, is still on the same team, etc. every time a unitscript, gadget or widget wakes up.

==Where can I find/edit examples?==

You can find some easy example widgets [[Lua:Tutorial_GettingStarted|here]]. The best source of more complicated examples is inside games themselves, in the LuaUI/Widgets and Luarules/gadgets directories. See [[Gamedev:PublicRepos]] for a list of repositories. 

To make your own widgets, simply place individual .lua files into your Spring/LuaUI/Widgets dir (create the dir if it is not present. Case-sensitive!!!). Game repositories can be checked out into a folder named &quot;SomeAwesomeGame.sdd&quot;, placed in your &quot;/Spring/games&quot; dir; this shoudl give a local copy of the game, recognized by Spring, where you can edit files. Make sure to check the licenses before doing this!


==Can I reload a script without restarting Spring?==

Yes, you can type &quot;/luaui reload&quot; to reload widgets, and if you have &quot;cheats&quot; enabled you can also &quot;/luarules reload&quot; to reload gadgets.

==Why does the print function seem to do nothing?==

Its output is displayed in stdout. If you have no easy way to see it, you can Spring.Echo(&quot;some text&quot;) which prints to the ingame chat and infolog.txt.


[[Category: Lua]]</text>
      <sha1>lbfmzqduy8js6fehjvdb0a0ensmy6ed</sha1>
    </revision>
  </page>
  <page>
    <title>Lua BitOps</title>
    <ns>0</ns>
    <id>2476</id>
    <revision>
      <id>31838</id>
      <parentid>27386</parentid>
      <timestamp>2022-08-01T11:28:59Z</timestamp>
      <contributor>
        <username>Beherith</username>
        <id>2441</id>
      </contributor>
      <comment>/* Bit Operators */  move to luacallout format</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1951">[[Engine_Development|Development]] &lt; [[Lua_Scripting|Lua Scripting]] &lt; {{FULLPAGENAME}}

== Bit Operators ==

{{LuaCallout
|prefix = math.
|name = bit_and
|arg1 =  {{type|number}} a1
|arg2 =  {{type|number}} a2 , ...
|arg3 =  
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|number}} i
|info = Returns the bitwise AND of all arguments. Only use up to 24 bit integers. 
}}

{{LuaCallout
|prefix = math.
|name = bit_or
|arg1 =  {{type|number}} a1
|arg2 =  {{type|number}} a2 , ... 
|arg3 =  
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|number}} i
|info = Returns the bitwise OR of all arguments. Only use up to 24 bit integers. 
}}

{{LuaCallout
|prefix = math.
|name = bit_xor
|arg1 =  {{type|number}} a1
|arg2 =  {{type|number}} a2 , ... 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|number}} i
|info = Returns the bitwise XOR of all arguments. Only use up to 24 bit integers. 
}}

{{LuaCallout
|prefix = math.
|name = bit_inv
|arg1 =  {{type|number}} a1
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|number}} i
|info = Returns the bitwise NOT of the 24 bit integer argument. 
}}

{{LuaCallout
|prefix = math.
|name = bit_bits
|arg1 =  {{type|number}} a1
|arg2 =  {{type|number}} a2 , ... 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|number}} i
|info = Set each of the bits of a 24 bit integer. Returns result = result OR (1 &lt;&lt; a1) OR (1 &lt;&lt; a2) OR ...;) 
}}

 -- Note: there are no bit shift. Use those Lua functions instead for 24 bits bitshift
 -- 24 bits because only the 24 bits of the mantissa can be easily used in a 32 bit float
 -- bitshift functions (&lt;&lt;, &gt;&gt; equivalent)

 -- shift left
 local function lsh(value,shift)
     return (value*(2^shift)) % 2^24
 end

 -- shift right
 local function rsh(value,shift)
     return math.floor(value/2^shift) % 2^24
 end
[[category: Lua]]</text>
      <sha1>6bbm2ws2gqqwy0ci3otus95ky726fy5</sha1>
    </revision>
  </page>
  <page>
    <title>Lua CMDs</title>
    <ns>0</ns>
    <id>2431</id>
    <revision>
      <id>31051</id>
      <parentid>31021</parentid>
      <timestamp>2019-05-10T17:00:09Z</timestamp>
      <contributor>
        <username>Thinksome</username>
        <id>2929</id>
      </contributor>
      <comment>bad argument #2 to 'GetCommandQueue' (number expected, got no value)</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="12049">[[Engine_Development|Development]] &lt; [[Lua_Scripting|Lua Scripting]] &lt; {{FULLPAGENAME}}

== Options ==
&lt;b id=CMD.OPT_ALT&gt;CMD.OPT_ALT&lt;/b&gt;&lt;br&gt;
&lt;b id=CMD.OPT_CTRL&gt;CMD.OPT_CTRL&lt;/b&gt;&lt;br&gt;
&lt;b id=CMD.OPT_SHIFT&gt;CMD.OPT_SHIFT&lt;/b&gt;&lt;br&gt;
&lt;b id=CMD.OPT_RIGHT&gt;CMD.OPT_RIGHT&lt;/b&gt;&lt;br&gt;
&lt;b id=CMD.OPT_INTERNAL&gt;CMD.OPT_INTERNAL&lt;/b&gt;&lt;br&gt;
&lt;b id=CMD.OPT_META&gt;CMD.OPT_META&lt;/b&gt;

== Waitcodes ==
&lt;b id=CMD.WAITCODE_TIME&gt;CMD.WAITCODE_TIME&lt;/b&gt;&lt;br&gt;
&lt;b id=CMD.WAITCODE_DEATH&gt;CMD.WAITCODE_DEATH&lt;/b&gt;&lt;br&gt;
&lt;b id=CMD.WAITCODE_SQUAD&gt;CMD.WAITCODE_SQUAD&lt;/b&gt;&lt;br&gt;
&lt;b id=CMD.WAITCODE_GATHER&gt;CMD.WAITCODE_GATHER&lt;/b&gt;

== Insert/Remove Commands ==
To get the commandqueue use the following lua-call

=== CommandQueues ===
'''Spring.GetUnitCommands''' &lt;br/&gt;
'''Spring.GetCommandQueue''' &lt;span class=&quot;note&quot;&gt;(Alias)&lt;/span&gt;
  ( number unitID, number count ) -&gt; nil | number commandQueueSize {{new|96}}
  -&gt; nil | table commandQueueTable = {
     [1] = {
       &quot;id&quot;      = number,
       &quot;params&quot;  = { [1] = number, ...},
       &quot;options&quot; = {
         &quot;coded&quot;    = number,
         &quot;alt&quot;      = boolean,
         &quot;ctrl&quot;     = boolean,
         &quot;shift&quot;    = boolean,
         &quot;right&quot;    = boolean,
         &quot;internal&quot; = boolean,
         &quot;meta&quot;    = boolean
       }
     }, ...
   }

Use count = -1 to get all commands.

&lt;span class=note&gt;First, said &quot;tags&quot; aka &quot;id&quot; are unique command identifiers, so each command that gets inserted into a unit's command 
queue gets its unique &quot;tag&quot; number. (It is used to ''sync'' command queue operations, also it makes things much easier.)
Editors Note: I fucking hate it when open source devs use the word easy. It is a clear indicator that someone spends a whole day finding out about a well hidden simple concept. Well at least we are on this journey together :)
&lt;br&gt;
To look at those &quot;tags&quot; you can do the following:
   local cmdQueue = Spring.GetUnitCommands(unitID, 100);
   if (#cmdQueue&gt;0) then 
      local cmdTag = cmdQueue[1].tag
      Spring.Echo(cmdTag)
      ..
   end&lt;/span&gt;





&lt;b id=CMD.INSERT&gt;CMD.INSERT&lt;/b&gt;

  options.ALT     -&gt; treat param0 as a position instead of a tag 
  options.CONTROL -&gt; use the build queue for factories 
  params[0] = command tag or position (negative numbers to reference
  the back of the queue and 0 the first)
  params[1] = insertCmd id 
  params[2] = insertCmd options (shift,alt,right click,etc.)
  params[3 ... N+2] = insertCmd params[0 ... N-1]

  Example:
&lt;syntaxhighlight lang=&quot;lua&quot;&gt;
    Spring.GiveOrderToUnit(unitID,
      CMD.INSERT,
      {-1,CMD.ATTACK,''CMD.OPT_SHIFT'',''unitID2''},
      {&quot;alt&quot;}
    );
&lt;/syntaxhighlight&gt;

	Command structure dissection:

	'''What to do with the command - in our case insert:'''

		'CMD.INSERT'

	'''Place in the queue to insert:'''

		'-1'

	'''Type of command to insert:'''

		'CMD.ATTACK'

	'''Additional Information:'''

	If the unit is working down a shift queue, add it seemless into it

		'CMD.OPT_SHIFT'

	'''TargetID or Position:'''

		'unitID2'

	'''The '-1' is the queue position and not a tag:'''

		'{&quot;alt&quot;}'


  if you insert cmd in pos 2 for example the rest of commands starting
  from 2 will be pushed back. 
  Ilustration: {cmdA, cmdB, cmdC, cmdD} =&gt; {cmdA, cmdB, NewCmd, cmdC, cmdD}

  &lt;/font&gt;&lt;font color=&quot;red&quot;&gt;
  Note: If you didn't already notice, the command params and
        the command options are twisted in the array (compared to GiveOrder)!
  &lt;/font&gt;&lt;font color=&quot;red&quot;&gt;
  Note2: The command options in the array/table is a number value!
         You have to use CMD.OPT_* in this case.
  &lt;/font&gt;&lt;font color=&quot;red&quot;&gt;
  Note3: The inserted command doesn't go through allowcommand callins, only CMD.INSERT does.
  &lt;/font&gt;
&lt;b id=CMD.REMOVE&gt;CMD.REMOVE&lt;/b&gt;
  options.ALT     -&gt; use the parameters as commandIDs 
  options.CONTROL -&gt; use the build queue for factories 
  params[0 ... N-1] = tags or commandIDs to remove

No clues what the above mean translated, but here is a working example of how to delete a buildorder from a factory:  
&lt;syntaxhighlight lang=&quot;lua&quot;&gt;   
 local facCmds = Spring.GetFactoryCommands(factoryID)
 
 if facCmds then -- nil check
	local cmd = facCmds[1]
	Spring.GiveOrderToUnit(factoryID, CMD.REMOVE, {i,cmd.tag}, {&quot;ctrl&quot;})
 end
&lt;/syntaxhighlight&gt;

== Commands ==
&lt;font color=&quot;#55ee99&quot;&gt;Note, the CMD[] table is bidirectional. That means: CMD[CMD.STOP] := &quot;CMD_STOP&quot;&lt;/font&gt;

&lt;b id=CMD.STOP&gt;CMD.STOP&lt;/b&gt;
  type [[Lua_CMDs#CMDTYPE.ICON|CMDTYPE.ICON]]
&lt;b id=CMD.WAIT&gt;CMD.WAIT&lt;/b&gt;
  type [[Lua_CMDs#CMDTYPE.ICON|CMDTYPE.ICON]]
&lt;b id=CMD.TIMEWAIT&gt;CMD.TIMEWAIT&lt;/b&gt;
  type [[Lua_CMDs#CMDTYPE.NUMBER|CMDTYPE.NUMBER]]
&lt;b id=CMD.DEATHWAIT&gt;CMD.DEATHWAIT&lt;/b&gt;
  type [[Lua_CMDs#CMDTYPE.ICON_UNIT_OR_RECTANGLE|CMDTYPE.ICON_UNIT_OR_RECTANGLE]]
&lt;b id=CMD.SQUADWAIT&gt;CMD.SQUADWAIT&lt;/b&gt;
  type [[Lua_CMDs#CMDTYPE.NUMBER|CMDTYPE.NUMBER]]
&lt;b id=CMD.GATHERWAIT&gt;CMD.GATHERWAIT&lt;/b&gt;
  type [[Lua_CMDs#CMDTYPE.ICON|CMDTYPE.ICON]]
&lt;b id=CMD.MOVE&gt;CMD.MOVE&lt;/b&gt;
  type [[Lua_CMDs#CMDTYPE.ICON_MAP|CMDTYPE.ICON_MAP]]
&lt;b id=CMD.PATROL&gt;CMD.PATROL&lt;/b&gt;
  type [[Lua_CMDs#CMDTYPE.ICON_MAP|CMDTYPE.ICON_MAP]]
&lt;b id=CMD.FIGHT&gt;CMD.FIGHT&lt;/b&gt;
  type [[Lua_CMDs#CMDTYPE.ICON_MAP|CMDTYPE.ICON_MAP]]
&lt;b id=CMD.ATTACK&gt;CMD.ATTACK&lt;/b&gt;
  type [[Lua_CMDs#CMDTYPE.ICON_UNIT_OR_MAP|CMDTYPE.ICON_UNIT_OR_MAP]]
&lt;b id=CMD.AREA_ATTACK&gt;CMD.AREA_ATTACK&lt;/b&gt;
  type [[Lua_CMDs#CMDTYPE.ICON_AREA|CMDTYPE.ICON_AREA]]
&lt;b id=CMD.GUARD&gt;CMD.GUARD&lt;/b&gt;
  type [[Lua_CMDs#CMDTYPE.ICON_UNIT|CMDTYPE.ICON_UNIT]]
&lt;b id=CMD.AISELECT&gt;CMD.AISELECT&lt;/b&gt;
  type [[Lua_CMDs#CMDTYPE.COMBO_BOX|CMDTYPE.COMBO_BOX]]
&lt;b id=CMD.GROUPSELECT&gt;CMD.GROUPSELECT&lt;/b&gt;
  type [[Lua_CMDs#CMDTYPE.ICON|CMDTYPE.ICON]]
&lt;b id=CMD.GROUPADD&gt;CMD.GROUPADD&lt;/b&gt;
  type [[Lua_CMDs#CMDTYPE.ICON|CMDTYPE.ICON]]
&lt;b id=CMD.GROUPCLEAR&gt;CMD.GROUPCLEAR&lt;/b&gt;
  type [[Lua_CMDs#CMDTYPE.ICON|CMDTYPE.ICON]]
&lt;b id=CMD.REPAIR&gt;CMD.REPAIR&lt;/b&gt;
  type [[Lua_CMDs#CMDTYPE.ICON_UNIT_OR_AREA|CMDTYPE.ICON_UNIT_OR_AREA]]
&lt;b id=CMD.FIRE_STATE&gt;CMD.FIRE_STATE&lt;/b&gt;
  type [[Lua_CMDs#CMDTYPE.ICON_MODE|CMDTYPE.ICON_MODE]]
&lt;b id=CMD.MOVE_STATE&gt;CMD.MOVE_STATE&lt;/b&gt;
  type [[Lua_CMDs#CMDTYPE.ICON_MODE|CMDTYPE.ICON_MODE]]
&lt;b id=CMD.SELFD&gt;CMD.SELFD&lt;/b&gt;
  type [[Lua_CMDs#CMDTYPE.ICON|CMDTYPE.ICON]]
&lt;b id=CMD.LOAD_UNITS&gt;CMD.LOAD_UNITS&lt;/b&gt;
  type [[Lua_CMDs#CMDTYPE.ICON_UNIT_OR_AREA|CMDTYPE.ICON_UNIT_OR_AREA]]
&lt;b id=CMD.LOAD_ONTO&gt;CMD.LOAD_ONTO&lt;/b&gt;
  type [[Lua_CMDs#CMDTYPE.ICON_UNIT|CMDTYPE.ICON_UNIT]]
&lt;b id=CMD.UNLOAD_UNITS&gt;CMD.UNLOAD_UNITS&lt;/b&gt;
  type [[Lua_CMDs#CMDTYPE.ICON_UNIT_OR_AREA|CMDTYPE.ICON_UNIT_OR_AREA]]
&lt;b id=CMD.UNLOAD_UNIT&gt;CMD.UNLOAD_UNIT&lt;/b&gt;
  type [[Lua_CMDs#CMDTYPE.ICON_MAP|CMDTYPE.ICON_MAP]]
&lt;b id=CMD.ONOFF&gt;CMD.ONOFF&lt;/b&gt;
  type [[Lua_CMDs#CMDTYPE.ICON_MODE|CMDTYPE.ICON_MODE]]
&lt;b id=CMD.RECLAIM&gt;CMD.RECLAIM&lt;/b&gt;
  type [[Lua_CMDs#CMDTYPE.ICON_UNIT_FEATURE_OR_AREA|CMDTYPE.ICON_UNIT_FEATURE_OR_AREA]]
&lt;b id=CMD.CLOAK&gt;CMD.CLOAK&lt;/b&gt;
  type [[Lua_CMDs#CMDTYPE.ICON_MODE|CMDTYPE.ICON_MODE]]
&lt;b id=CMD.STOCKPILE&gt;CMD.STOCKPILE&lt;/b&gt;
  type [[Lua_CMDs#CMDTYPE.ICON|CMDTYPE.ICON]]
&lt;b id=CMD.DGUN&gt;CMD.DGUN&lt;/b&gt;
  type [[Lua_CMDs#CMDTYPE.ICON_MAP|CMDTYPE.ICON_MAP]]
&lt;b id=CMD.RESTORE&gt;CMD.RESTORE&lt;/b&gt;
  type [[Lua_CMDs#CMDTYPE.ICON_AREA|CMDTYPE.ICON_AREA]]
&lt;b id=CMD.REPEAT&gt;CMD.REPEAT&lt;/b&gt;
  type [[Lua_CMDs#CMDTYPE.ICON_MODE|CMDTYPE.ICON_MODE]]
&lt;b id=CMD.TRAJECTORY&gt;CMD.TRAJECTORY&lt;/b&gt;
  type [[Lua_CMDs#CMDTYPE.ICON_MODE|CMDTYPE.ICON_MODE]]
&lt;b id=CMD.RESURRECT&gt;CMD.RESURRECT&lt;/b&gt;
  type [[Lua_CMDs#CMDTYPE.ICON_UNIT_FEATURE_OR_AREA|CMDTYPE.ICON_UNIT_FEATURE_OR_AREA]]
&lt;b id=CMD.CAPTURE&gt;CMD.CAPTURE&lt;/b&gt;
  type [[Lua_CMDs#CMDTYPE.ICON_UNIT_OR_AREA|CMDTYPE.ICON_UNIT_OR_AREA]]
&lt;b id=CMD.AUTOREPAIRLEVEL&gt;CMD.AUTOREPAIRLEVEL&lt;/b&gt;
  type [[Lua_CMDs#CMDTYPE.ICON_MODE|CMDTYPE.ICON_MODE]]
&lt;b id=CMD.LOOPBACKATTACK&gt;CMD.LOOPBACKATTACK&lt;/b&gt;
  type [[Lua_CMDs#CMDTYPE.ICON_MODE|CMDTYPE.ICON_MODE]]
&lt;b id=CMD.IDLEMODE&gt;CMD.IDLEMODE&lt;/b&gt;
  type [[Lua_CMDs#CMDTYPE.ICON_MODE|CMDTYPE.ICON_MODE]]
&lt;b id=CMD.SET_WANTED_MAX_SPEED&gt;CMD.SET_WANTED_MAX_SPEED&lt;/b&gt;
  type [[Lua_CMDs#CMDTYPE.NUMBER|CMDTYPE.NUMBER]]
&lt;b id=CMD.SETBASE&gt;CMD.SETBASE&lt;/b&gt;

&lt;b id=CMD.INTERNAL&gt;CMD.INTERNAL&lt;/b&gt;
  used in different ways

&lt;b&gt;A negative number means build command&lt;/b&gt;&lt;br&gt;
The number is -unitDefID of the unittype that this command orders to be built.
   This means that build orders have no convenient CMD._____ string.
      The command id for build orders must always be a &quot;minus&quot; sign &lt;i&gt;appended to an integer value&lt;/i&gt;.
   &lt;font color=&quot;#55ee99&quot;&gt;Spring.GiveOrderToUnit(unitID, &lt;b&gt;-(unitDefID)&lt;/b&gt;, {x,y,z(,facing)}, {&quot;shift&quot;})&lt;/font&gt;
      alternatively:
   &lt;font color=&quot;#55ee99&quot;&gt;Spring.GiveOrderToUnit(unitID, &lt;b&gt;-UnitDefNames[&quot;unitname&quot;].id&lt;/b&gt;, {x,y,z(,facing)}, {&quot;shift&quot;})&lt;/font&gt;
     &lt;b&gt;'facing'&lt;/b&gt; is an optional integer parameter that controls unit's facing when placed.
      The values of (x,y,z) must &lt;i&gt;all&lt;/i&gt; be number values (like the number &quot;0&quot;), or the build order will break.

== CommandTypes ==
&lt;font color=&quot;#55ee99&quot;&gt;Note, the CMDTYPE[] table is bidirectional. That means: CMDTYPE[CMDTYPE.ICON] := &quot;CMDTYPE_ICON&quot;&lt;/font&gt;

&lt;b id=CMDTYPE.ICON&gt;CMDTYPE.ICON&lt;/b&gt;
  expect 0 parameters in return
&lt;b id=CMDTYPE.ICON_MODE&gt;CMDTYPE.ICON_MODE&lt;/b&gt;
  expect 1 parameter in return (number selected mode)
&lt;b id=CMDTYPE.ICON_MAP&gt;CMDTYPE.ICON_MAP&lt;/b&gt;
  expect 3 parameters in return (mappos)
&lt;b id=CMDTYPE.ICON_AREA&gt;CMDTYPE.ICON_AREA&lt;/b&gt;
  expect 4 parameters in return (mappos+radius)
&lt;b id=CMDTYPE.ICON_UNIT&gt;CMDTYPE.ICON_UNIT&lt;/b&gt;
  expect 1 parameters in return (unitid)
&lt;b id=CMDTYPE.ICON_UNIT_OR_MAP&gt;CMDTYPE.ICON_UNIT_OR_MAP&lt;/b&gt;
  expect 1 parameters in return (unitid) or 3 parameters in return (mappos)
&lt;b id=CMDTYPE.ICON_FRONT&gt;CMDTYPE.ICON_FRONT&lt;/b&gt;
  expect 3 or 6 parameters in return (middle and right side of front if a front was defined)
&lt;b id=CMDTYPE.COMBO_BOX&gt;CMDTYPE.COMBO_BOX&lt;/b&gt;
  expect 1 parameter in return (number selected option)
&lt;b id=CMDTYPE.ICON_UNIT_OR_AREA&gt;CMDTYPE.ICON_UNIT_OR_AREA&lt;/b&gt;
  expect 1 parameter in return (unitid) or 4 parameters in return (mappos+radius)
&lt;b id=CMDTYPE.ICON_UNIT_FEATURE_OR_AREA&gt;CMDTYPE.ICON_UNIT_FEATURE_OR_AREA&lt;/b&gt;
  expect 1 parameter in return (unitid or [[Lua_ConstGame#Engine|Game.maxUnits]]+featureid)
      or 4 parameters in return (mappos+radius)
&lt;b id=CMDTYPE.ICON_BUILDING&gt;CMDTYPE.ICON_BUILDING&lt;/b&gt;
  expect 3 parameters in return (mappos)
&lt;b id=CMDTYPE.ICON_UNIT_OR_RECTANGLE&gt;CMDTYPE.ICON_UNIT_OR_RECTANGLE&lt;/b&gt;
  expect 1 parameter in return (unitid)
      or 3 parameters in return (mappos)
      or 6 parameters in return (startpos+endpos)
&lt;b id=CMDTYPE.NUMBER&gt;CMDTYPE.NUMBER&lt;/b&gt;
  expect 1 parameter in return (number)

&lt;b id=CMDTYPE.CUSTOM&gt;CMDTYPE.CUSTOM&lt;/b&gt;
  used with CMD_INTERNAL
&lt;b id=CMDTYPE.NEXT&gt;CMDTYPE.NEXT&lt;/b&gt; &lt;font color=&quot;#55ee99&quot;&gt;next command page&lt;/font&gt;
  used with CMD_INTERNAL
&lt;b id=CMDTYPE.PREV&gt;CMDTYPE.PREV&lt;/b&gt; &lt;font color=&quot;#55ee99&quot;&gt;previous command page&lt;/font&gt;
  used with CMD_INTERNAL

== CmdIDs ==
Below is a table of all CMD table entries and their IDs:

{|class=&quot;wikitable sortable&quot;
!Command||ID
|-
|FIRESTATE_NONE||-1
|-
|MOVESTATE_NONE||-1
|-
|STOP||0
|-
|MOVESTATE_HOLDPOS||0
|-
|FIRESTATE_HOLDFIRE||0
|-
|INSERT||1
|-
|MOVESTATE_MANEUVER||1
|-
|FIRESTATE_RETURNFIRE||1
|-
|WAITCODE_TIME||1
|-
|WAITCODE_DEATH||2
|-
|MOVESTATE_ROAM||2
|-
|REMOVE||2
|-
|FIRESTATE_FIREATWILL||2
|-
|FIRESTATE_FIREATNEUTRAL||3
|-
|WAITCODE_SQUAD||3
|-
|OPT_META||4
|-
|WAITCODE_GATHER||4
|-
|WAIT||5
|-
|TIMEWAIT||6
|-
|DEATHWAIT||7
|-
|OPT_INTERNAL||8
|-
|SQUADWAIT||8
|-
|GATHERWAIT||9
|-
|MOVE||10
|-
|PATROL||15
|-
|FIGHT||16
|-
|OPT_RIGHT||16
|-
|LOOPBACKATTACK||20
|-
|ATTACK||20
|-
|AREA_ATTACK||21
|-
|GUARD||25
|-
|AISELECT||30
|-
|OPT_SHIFT||32
|-
|GROUPSELECT||35
|-
|GROUPADD||36
|-
|GROUPCLEAR||37
|-
|REPAIR||40
|-
|FIRE_STATE||45
|-
|MOVE_STATE||50
|-
|SETBASE||55
|-
|INTERNAL||60
|-
|OPT_CTRL||64
|-
|SELFD||65
|-
|SET_WANTED_MAX_SPEED||70
|-
|LOAD_UNITS||75
|-
|LOAD_ONTO||76
|-
|UNLOAD_UNITS||80
|-
|UNLOAD_UNIT||81
|-
|ONOFF||85
|-
|RECLAIM||90
|-
|CLOAK||95
|-
|STOCKPILE||100
|-
|MANUALFIRE||105
|-
|DGUN||105
|-
|RESTORE||110
|-
|REPEAT||115
|-
|TRAJECTORY||120
|-
|RESURRECT||125
|-
|OPT_ALT||128
|-
|CAPTURE||130
|-
|AUTOREPAIRLEVEL||135
|-
|IDLEMODE||145
|-
|}

[[category: Lua]]</text>
      <sha1>83lkjyq8szz61mkive5xmhxserrq7fg</sha1>
    </revision>
  </page>
  <page>
    <title>Lua ConstCOB</title>
    <ns>0</ns>
    <id>2864</id>
    <revision>
      <id>31482</id>
      <parentid>29363</parentid>
      <timestamp>2021-03-01T17:53:00Z</timestamp>
      <contributor>
        <username>Master-athmos</username>
        <id>2676</id>
      </contributor>
      <comment>Updated page with new anchorable templates, added SFX.GLOBAL</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6535">[[Engine_Development|Development]] &lt; [[Lua_Scripting|Lua Scripting]] &lt; {{FULLPAGENAME}}

Note:  At this time, this list is roughly equivalent to the supported COB instructions at spring / rts / Sim / Units / Scripts / CobDefines.h, but you don't need to use the proper constant values (see Git repo).

= Explode =

{{LuaConstant
|type = number
|name = SFX.SHATTER
|info =
}}
{{LuaConstant
|type = number
|name = SFX.EXPLODE
|info =
}}
{{LuaConstant
|type = number
|name = SFX.EXPLODE_ON_HIT
|info =
}}
{{LuaConstant
|type = number
|name = SFX.FALL
|info =
}}
{{LuaConstant
|type = number
|name = SFX.SMOKE
|info =
}}
{{LuaConstant
|type = number
|name = SFX.FIRE
|info =
}}
{{LuaConstant
|type = number
|name = SFX.NONE
|info =
}}
{{LuaConstant
|type = number
|name = SFX.NO_CEG_TRAIL
|info =
}}
{{LuaConstant
|type = number
|name = SFX.NO_HEATCLOUD
|info =
}}
{{LuaConstant
|type = number
|name = SFX.RECURSIVE
|info = {{new|99.0}}
}}

= EmitSfx =

{{LuaConstant
|type = number
|name = SFX.VTOL
|info =
}}
{{LuaConstant
|type = number
|name = SFX.WAKE
|info =
}}
{{LuaConstant
|type = number
|name = SFX.REVERSE_WAKE
|info =
}}
{{LuaConstant
|type = number
|name = SFX.WHITE_SMOKE
|info =
}}
{{LuaConstant
|type = number
|name = SFX.BLACK_SMOKE
|info =
}}
{{LuaConstant
|type = number
|name = SFX.BUBBLE
|info =
}}
{{LuaConstant
|type = number
|name = SFX.CEG
|info =
}}
{{LuaConstant
|type = number
|name = SFX.FIRE_WEAPON
|info =
}}
{{LuaConstant
|type = number
|name = SFX.DETONATE_WEAPON
|info =
}}
{{LuaConstant
|type = number
|name = SFX.GLOBAL
|info =
}}

= Get/Set =

{{LuaConstant
|type = number
|name = COB.ACTIVATION
|info =
}}
{{LuaConstant
|type = number
|name = COB.STANDINGMOVEORDERS
|info =
}}
{{LuaConstant
|type = number
|name = COB.STANDINGFIREORDERS
|info =
}}
{{LuaConstant
|type = number
|name = COB.HEALTH
|info =
}}
{{LuaConstant
|type = number
|name = COB.INBUILDSTANCE
|info =
}}
{{LuaConstant
|type = number
|name = COB.BUSY
|info =
}}
{{LuaConstant
|type = number
|name = COB.PIECE_XZ
|info =
}}
{{LuaConstant
|type = number
|name = COB.PIECE_Y
|info =
}}
{{LuaConstant
|type = number
|name = COB.UNIT_XZ
|info =
}}
{{LuaConstant
|type = number
|name = COB.UNIT_Y
|info =
}}
{{LuaConstant
|type = number
|name = COB.UNIT_HEIGHT
|info =
}}
{{LuaConstant
|type = number
|name = COB.XZ_ATAN
|info =
}}
{{LuaConstant
|type = number
|name = COB.XZ_HYPOT
|info =
}}
{{LuaConstant
|type = number
|name = COB.ATAN
|info =
}}
{{LuaConstant
|type = number
|name = COB.HYPOT
|info =
}}
{{LuaConstant
|type = number
|name = COB.GROUND_HEIGHT
|info =
}}
{{LuaConstant
|type = number
|name = COB.BUILD_PERCENT_LEFT
|info =
}}
{{LuaConstant
|type = number
|name = COB.YARD_OPEN
|info =
}}
{{LuaConstant
|type = number
|name = COB.BUGGER_OFF
|info =
}}
{{LuaConstant
|type = number
|name = COB.ARMORED
|info =
}}
{{LuaConstant
|type = number
|name = COB.IN_WATER
|info =
}}
{{LuaConstant
|type = number
|name = COB.CURRENT_SPEED
|info =
}}
{{LuaConstant
|type = number
|name = COB.VETERAN_LEVEL
|info =
}}
{{LuaConstant
|type = number
|name = COB.ON_ROAD
|info =
}}
{{LuaConstant
|type = number
|name = COB.MAX_ID
|info =
}}
{{LuaConstant
|type = number
|name = COB.MY_ID
|info =
}}
{{LuaConstant
|type = number
|name = COB.UNIT_TEAM
|info =
}}
{{LuaConstant
|type = number
|name = COB.UNIT_BUILD_PERCENT_LEFT
|info =
}}
{{LuaConstant
|type = number
|name = COB.UNIT_ALLIED
|info =
}}
{{LuaConstant
|type = number
|name = COB.MAX_SPEED
|info =
}}
{{LuaConstant
|type = number
|name = COB.CLOAKED
|info =
}}
{{LuaConstant
|type = number
|name = COB.WANT_CLOAK
|info =
}}
{{LuaConstant
|type = number
|name = COB.GROUND_WATER_HEIGHT
|info =
}}
{{LuaConstant
|type = number
|name = COB.UPRIGHT
|info =
}}
{{LuaConstant
|type = number
|name = COB.POW
|info =
}}
{{LuaConstant
|type = number
|name = COB.PRINT
|info =
}}
{{LuaConstant
|type = number
|name = COB.HEADING
|info =
}}
{{LuaConstant
|type = number
|name = COB.TARGET_ID
|info =
}}
{{LuaConstant
|type = number
|name = COB.LAST_ATTACKER_ID
|info =
}}
{{LuaConstant
|type = number
|name = COB.LOS_RADIUS
|info =
}}
{{LuaConstant
|type = number
|name = COB.AIR_LOS_RADIUS
|info =
}}
{{LuaConstant
|type = number
|name = COB.RADAR_RADIUS
|info =
}}
{{LuaConstant
|type = number
|name = COB.JAMMER_RADIUS
|info =
}}
{{LuaConstant
|type = number
|name = COB.SONAR_RADIUS
|info =
}}
{{LuaConstant
|type = number
|name = COB.SONAR_JAM_RADIUS
|info =
}}
{{LuaConstant
|type = number
|name = COB.SEISMIC_RADIUS
|info =
}}
{{LuaConstant
|type = number
|name = COB.DO_SEISMIC_PING
|info =
}}
{{LuaConstant
|type = number
|name = COB.CURRENT_FUEL
|info =
}}
{{LuaConstant
|type = number
|name = COB.TRANSPORT_ID
|info =
}}
{{LuaConstant
|type = number
|name = COB.SHIELD_POWER
|info =
}}
{{LuaConstant
|type = number
|name = COB.STEALTH
|info =
}}
{{LuaConstant
|type = number
|name = COB.CRASHING
|info =
}}
{{LuaConstant
|type = number
|name = COB.CHANGE_TARGET
|info =
}}
{{LuaConstant
|type = number
|name = COB.CEG_DAMAGE
|info =
}}
{{LuaConstant
|type = number
|name = COB.COB_ID
|info =
}}
{{LuaConstant
|type = number
|name = COB.PLAY_SOUND
|info =
}}
{{LuaConstant
|type = number
|name = COB.KILL_UNIT
|info =
}}
{{LuaConstant
|type = number
|name = COB.ALPHA_THRESHOLD
|info =
}}
{{LuaConstant
|type = number
|name = COB.SET_WEAPON_UNIT_TARGET
|info =
}}
{{LuaConstant
|type = number
|name = COB.SET_WEAPON_GROUND_TARGET
|info =
}}
{{LuaConstant
|type = number
|name = COB.SONAR_STEALTH
|info =
}}
{{LuaConstant
|type = number
|name = COB.REVERSING
|info =
}}
{{LuaConstant
|type = number
|name = COB.FLANK_B_MODE
|info =
}}
{{LuaConstant
|type = number
|name = COB.FLANK_B_DIR
|info =
}}
{{LuaConstant
|type = number
|name = COB.FLANK_B_MOBILITY_ADD
|info =
}}
{{LuaConstant
|type = number
|name = COB.FLANK_B_MAX_DAMAGE
|info =
}}
{{LuaConstant
|type = number
|name = COB.FLANK_B_MIN_DAMAGE
|info =
}}
{{LuaConstant
|type = number
|name = COB.WEAPON_RELOADSTATE
|info =
}}
{{LuaConstant
|type = number
|name = COB.WEAPON_RELOADTIME
|info =
}}
{{LuaConstant
|type = number
|name = COB.WEAPON_ACCURACY
|info =
}}
{{LuaConstant
|type = number
|name = COB.WEAPON_SPRAY
|info =
}}
{{LuaConstant
|type = number
|name = COB.WEAPON_RANGE
|info =
}}
{{LuaConstant
|type = number
|name = COB.WEAPON_PROJECTILE_SPEED
|info =
}}
{{LuaConstant
|type = number
|name = COB.MIN
|info =
}}
{{LuaConstant
|type = number
|name = COB.MAX
|info =
}}
{{LuaConstant
|type = number
|name = COB.ABS
|info =
}}
{{LuaConstant
|type = number
|name = COB.GAME_FRAME
|info =
}}

[[category: Lua]]</text>
      <sha1>8t3lsn4hmu0fnzjj17l03adllpl7k8c</sha1>
    </revision>
  </page>
  <page>
    <title>Lua ConstEngine</title>
    <ns>0</ns>
    <id>3818</id>
    <revision>
      <id>31480</id>
      <parentid>30511</parentid>
      <timestamp>2021-02-28T22:10:50Z</timestamp>
      <contributor>
        <username>Master-athmos</username>
        <id>2676</id>
      </contributor>
      <comment>Updated page with new anchorable templates</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="742">[[Engine_Development|Development]] &lt; [[Lua_Scripting|Lua Scripting]] &lt; {{FULLPAGENAME}}

= Engine =

{{LuaConstant
|type = string
|name = Engine.version
|info = &lt;span class=&quot;note&quot;&gt;Returns the same as `spring --sync-version`, e.g. &quot;92&quot;&lt;/span&gt;
}}


{{LuaConstant
|type = string
|name = Engine.versionFull
|info =
}}


{{LuaConstant
|type = string
|name = Engine.versionPatchSet
|info =
}}


{{LuaConstant
|type = string
|name = Engine.buildFlags
|info = &lt;span class=&quot;note&quot;&gt;(unsynced only) Gets additional engine buildflags, e.g. &quot;OMP&quot; or &quot;MT-Sim DEBUG&quot;&lt;/span&gt;
}}


{{LuaConstant
|type = number
|name = Engine.wordSize
|info = &lt;span class=&quot;note&quot;&gt;indicates the build type and is either 32 or 64 (or 0 in synced code)&lt;/span&gt;
}}


[[category: Lua]]</text>
      <sha1>e3gnvwvp6rjilvoiw0zwi5lf7nyum5u</sha1>
    </revision>
  </page>
  <page>
    <title>Lua ConstGL</title>
    <ns>0</ns>
    <id>2432</id>
    <revision>
      <id>30724</id>
      <parentid>30723</parentid>
      <timestamp>2018-08-13T18:04:33Z</timestamp>
      <contributor>
        <username>Ivand</username>
        <id>2933</id>
      </contributor>
      <comment>Added a few recent exposed OpenGL constants</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6179">[[Engine_Development|Development]] &lt; [[Lua_Scripting|Lua Scripting]] &lt; {{FULLPAGENAME}}

== Drawing Primitives ==
'''GL.POINTS'''&lt;br&gt;
'''GL.LINES'''&lt;br&gt;
'''GL.LINE_LOOP'''&lt;br&gt;
'''GL.LINE_STRIP'''&lt;br&gt;
'''GL.TRIANGLES'''&lt;br&gt;
'''GL.TRIANGLE_STRIP'''&lt;br&gt;
'''GL.TRIANGLE_FAN'''&lt;br&gt;
'''GL.QUADS'''&lt;br&gt;
'''GL.QUAD_STRIP'''&lt;br&gt;
'''GL.POLYGON'''&lt;br&gt;
'''GL.PATCHES''' &lt;font color=&quot;#0000ee&quot;&gt;Available for spring versions &gt;= 104.0.1-596 (maintenance).&lt;/font&gt;

== BlendingFactorDest ==
'''GL.ZERO'''&lt;br&gt;
'''GL.ONE'''&lt;br&gt;
'''GL.SRC_COLOR'''&lt;br&gt;
'''GL.ONE_MINUS_SRC_COLOR'''&lt;br&gt;
'''GL.SRC_ALPHA'''&lt;br&gt;
'''GL.ONE_MINUS_SRC_ALPHA'''&lt;br&gt;
'''GL.DST_ALPHA'''&lt;br&gt;
'''GL.ONE_MINUS_DST_ALPHA'''

== BlendingFactorSrc ==
'''GL.ZERO'''&lt;br&gt;
'''GL.ONE'''&lt;br&gt;
'''GL.SRC_COLOR'''&lt;br&gt;
'''GL.ONE_MINUS_SRC_COLOR'''&lt;br&gt;
'''GL.SRC_ALPHA'''&lt;br&gt;
'''GL.ONE_MINUS_SRC_ALPHA'''&lt;br&gt;
'''GL.DST_ALPHA'''&lt;br&gt;
'''GL.ONE_MINUS_DST_ALPHA'''&lt;br&gt;
'''GL.DST_COLOR'''&lt;br&gt;
'''GL.ONE_MINUS_DST_COLOR'''&lt;br&gt;
'''GL.SRC_ALPHA_SATURATE'''

== AlphaFunction and DepthFunction ==
'''GL.NEVER'''&lt;br&gt;
'''GL.LESS'''&lt;br&gt;
'''GL.EQUAL'''&lt;br&gt;
'''GL.LEQUAL'''&lt;br&gt;
'''GL.GREATER'''&lt;br&gt;
'''GL.NOTEQUAL'''&lt;br&gt;
'''GL.GEQUAL'''&lt;br&gt;
'''GL.ALWAYS'''

== LogicOp ==
'''GL.CLEAR'''&lt;br&gt;
'''GL.AND'''&lt;br&gt;
'''GL.AND_REVERSE'''&lt;br&gt;
'''GL.COPY'''&lt;br&gt;
'''GL.AND_INVERTED'''&lt;br&gt;
'''GL.NOOP'''&lt;br&gt;
'''GL.XOR'''&lt;br&gt;
'''GL.OR'''&lt;br&gt;
'''GL.NOR'''&lt;br&gt;
'''GL.EQUIV'''&lt;br&gt;
'''GL.INVERT'''&lt;br&gt;
'''GL.OR_REVERSE'''&lt;br&gt;
'''GL.COPY_INVERTED'''&lt;br&gt;
'''GL.OR_INVERTED'''&lt;br&gt;
'''GL.NAND'''&lt;br&gt;
'''GL.SET'''

== Culling ==
'''GL.BACK'''&lt;br&gt;
'''GL.FRONT'''&lt;br&gt;
'''GL.FRONT_AND_BACK'''

== PolygonMode ==
'''GL.POINT'''&lt;br&gt;
'''GL.LINE'''&lt;br&gt;
'''GL.FILL'''

== Clear Bits ==
'''GL.DEPTH_BUFFER_BIT'''&lt;br&gt;
'''GL.ACCUM_BUFFER_BIT'''&lt;br&gt;
'''GL.STENCIL_BUFFER_BIT'''&lt;br&gt;
'''GL.COLOR_BUFFER_BIT'''

== ShadeModel ==
'''GL.FLAT'''&lt;br&gt;
'''GL.SMOOTH'''

== MatrixMode ==
'''GL.MODELVIEW'''&lt;br&gt;
'''GL.PROJECTION'''&lt;br&gt;
'''GL.TEXTURE'''

== Texture Filtering ==
'''GL.NEAREST'''&lt;br&gt;
'''GL.LINEAR'''&lt;br&gt;
'''GL.NEAREST_MIPMAP_NEAREST'''&lt;br&gt;
'''GL.LINEAR_MIPMAP_NEAREST'''&lt;br&gt;
'''GL.NEAREST_MIPMAP_LINEAR'''&lt;br&gt;
'''GL.LINEAR_MIPMAP_LINEAR'''

== Texture Clamping ==
'''GL.REPEAT'''&lt;br&gt;
'''GL.MIRRORED_REPEAT'''&lt;br&gt;
'''GL.CLAMP'''&lt;br&gt;
'''GL.CLAMP_TO_EDGE'''&lt;br&gt;
'''GL.CLAMP_TO_BORDER'''

== Texture Environment ==
'''GL.TEXTURE_ENV'''&lt;br&gt;
'''GL.TEXTURE_ENV_MODE'''&lt;br&gt;
'''GL.TEXTURE_ENV_COLOR'''&lt;br&gt;
'''GL.MODULATE'''&lt;br&gt;
'''GL.DECAL'''&lt;br&gt;
'''GL.BLEND'''&lt;br&gt;
'''GL.REPLACE'''&lt;br&gt;

'''GL_TEXTURE_FILTER_CONTROL'''&lt;br&gt;
'''GL_TEXTURE_LOD_BIAS'''

== Texture Generation ==
'''GL.TEXTURE_GEN_MODE'''&lt;br&gt;
'''GL.EYE_PLANE'''&lt;br&gt;
'''GL.OBJECT_PLANE'''&lt;br&gt;
'''GL.EYE_LINEAR'''&lt;br&gt;
'''GL.OBJECT_LINEAR'''&lt;br&gt;
'''GL.SPHERE_MAP'''&lt;br&gt;
'''GL.NORMAL_MAP'''&lt;br&gt;
'''GL.REFLECTION_MAP'''&lt;br&gt;
'''GL.S'''&lt;br&gt;
'''GL.T'''&lt;br&gt;
'''GL.R'''&lt;br&gt;
'''GL.Q'''

== glPushAttrib() bits ==
'''GL.CURRENT_BIT'''&lt;br&gt;
'''GL.POINT_BIT'''&lt;br&gt;
'''GL.LINE_BIT'''&lt;br&gt;
'''GL.POLYGON_BIT'''&lt;br&gt;
'''GL.POLYGON_STIPPLE_BIT'''&lt;br&gt;
'''GL.PIXEL_MODE_BIT'''&lt;br&gt;
'''GL.LIGHTING_BIT'''&lt;br&gt;
'''GL.FOG_BIT'''&lt;br&gt;
'''GL.DEPTH_BUFFER_BIT'''&lt;br&gt;
'''GL.ACCUM_BUFFER_BIT'''&lt;br&gt;
'''GL.STENCIL_BUFFER_BIT'''&lt;br&gt;
'''GL.VIEWPORT_BIT'''&lt;br&gt;
'''GL.TRANSFORM_BIT'''&lt;br&gt;
'''GL.ENABLE_BIT'''&lt;br&gt;
'''GL.COLOR_BUFFER_BIT'''&lt;br&gt;
'''GL.HINT_BIT'''&lt;br&gt;
'''GL.EVAL_BIT'''&lt;br&gt;
'''GL.LIST_BIT'''&lt;br&gt;
'''GL.TEXTURE_BIT'''&lt;br&gt;
'''GL.SCISSOR_BIT'''&lt;br&gt;
'''GL.ALL_ATTRIB_BITS'''

== glHint() targets ==
'''GL.FOG_HINT'''&lt;br&gt;
'''GL.LINE_SMOOTH_HINT'''&lt;br&gt;
'''GL.POINT_SMOOTH_HINT'''&lt;br&gt;
'''GL.POLYGON_SMOOTH_HINT'''&lt;br&gt;
'''GL.PERSPECTIVE_CORRECTION_HINT'''

== glHint() modes ==
'''GL.DONT_CARE'''&lt;br&gt;
'''GL.FASTEST'''&lt;br&gt;
'''GL.NICEST'''

== Light Specification ==
'''GL.AMBIENT'''&lt;br&gt;
'''GL.DIFFUSE'''&lt;br&gt;
'''GL.SPECULAR'''&lt;br&gt;
'''GL.POSITION'''&lt;br&gt;
'''GL.SPOT_DIRECTION'''&lt;br&gt;
'''GL.SPOT_EXPONENT'''&lt;br&gt;
'''GL.SPOT_CUTOFF'''&lt;br&gt;
'''GL.CONSTANT_ATTENUATION'''&lt;br&gt;
'''GL.LINEAR_ATTENUATION'''&lt;br&gt;
'''GL.QUADRATIC_ATTENUATION'''

== Shader types ==
&lt;font color=&quot;#0000ee&quot;&gt;Available for spring versions &gt;= 104.0.1-596 (maintenance).&lt;/font&gt;&lt;br&gt;
'''GL.VERTEX_SHADER'''&lt;br&gt;
'''GL.TESS_CONTROL_SHADER'''&lt;br&gt;
'''GL.TESS_EVALUATION_SHADER'''&lt;br&gt;
'''GL.GEOMETRY_SHADER'''&lt;br&gt;
'''GL.FRAGMENT_SHADER'''&lt;br&gt;

== Geometry shader parameters ==
&lt;font color=&quot;#0000ee&quot;&gt;Available for spring versions &gt;= 104.0.1-596 (maintenance).&lt;/font&gt;&lt;br&gt;
'''GL.GEOMETRY_INPUT_TYPE'''&lt;br&gt;
'''GL.GEOMETRY_OUTPUT_TYPE'''&lt;br&gt;
'''GL.GEOMETRY_VERTICES_OUT'''&lt;br&gt;


== Tesselation control shader parameters ==
&lt;font color=&quot;#0000ee&quot;&gt;Available for spring versions &gt;= 104.0.1-596 (maintenance).&lt;/font&gt;&lt;br&gt;
'''GL.PATCH_VERTICES'''&lt;br&gt;
'''GL.PATCH_DEFAULT_OUTER_LEVEL'''&lt;br&gt;
'''GL.PATCH_DEFAULT_INNER_LEVEL'''&lt;br&gt;

==Usefull, but not included constants==
===Texture Formats===
  '''GL_RGBA16F_ARB''' = 0x881A
  '''GL_RGBA32F_ARB''' = 0x8814
  '''GL_DEPTH_COMPONENT'''   = 0x1902
  '''GL_DEPTH_COMPONENT16''' = 0x81A5
  '''GL_DEPTH_COMPONENT24''' = 0x81A6
  '''GL_DEPTH_COMPONENT32''' = 0x81A7

===RBO Formats===
  '''GL_RGB'''             = 0x1907
  '''GL_RGBA'''            = 0x1908
  '''GL_DEPTH_COMPONENT''' = 0x1902
  '''GL_STENCIL_INDEX'''   = 0x1901

===FBO Targets===
  '''GL_FRAMEBUFFER_EXT'''      = 0x8D40
  '''GL_READ_FRAMEBUFFER_EXT''' = 0x8CA8
  '''GL_DRAW_FRAMEBUFFER_EXT''' = 0x8CA9

===FBO Status===
  '''GL_FRAMEBUFFER_COMPLETE_EXT'''                        = 0x8CD5
  '''GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT'''           = 0x8CD6
  '''GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT'''   = 0x8CD7
  '''GL_FRAMEBUFFER_INCOMPLETE_DUPLICATE_ATTACHMENT_EXT''' = 0x8CD8
  '''GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT'''           = 0x8CD9
  '''GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT'''              = 0x8CDA
  '''GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT'''          = 0x8CDB
  '''GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT'''          = 0x8CDC
  '''GL_FRAMEBUFFER_UNSUPPORTED_EXT'''                     = 0x8CDD
  '''GL_FRAMEBUFFER_STATUS_ERROR_EXT'''                    = 0x8CDE

===FBO Attachments===
  '''GL_COLOR_ATTACHMENT0_EXT'''  = 0x8CE0
  ..
  '''GL_COLOR_ATTACHMENT15_EXT''' = 0x8CEF
  '''GL_DEPTH_ATTACHMENT_EXT'''   = 0x8D00
  '''GL_STENCIL_ATTACHMENT_EXT''' = 0x8D20

[[category: Lua]]</text>
      <sha1>06l3sukvqp6v3bfjh4v61vbq9o37t56</sha1>
    </revision>
  </page>
  <page>
    <title>Lua ConstGame</title>
    <ns>0</ns>
    <id>2433</id>
    <revision>
      <id>31639</id>
      <parentid>31479</parentid>
      <timestamp>2021-10-17T19:09:08Z</timestamp>
      <contributor>
        <username>Picassoct</username>
        <id>2854</id>
      </contributor>
      <comment>/* Engine */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9277">[[Engine_Development|Development]] &lt; [[Lua_Scripting|Lua Scripting]] &lt; {{FULLPAGENAME}}


= Engine =

Word of advice. Do not modify tables provided by the engine - like Game. Many of them are internally implemented as engine calls.  

{{LuaConstant
|type = string
|name = Game.version
|info = {{removed|104.0}} Now in [[Lua_ConstEngine]]
}}


{{LuaConstant
|type = string
|name = Game.buildFlags
|info = {{removed|104.0}} Now in [[Lua_ConstEngine]]
}}


{{LuaConstant
|type = number
|name = Game.gameID
|info = &lt;span class=&quot;warning&quot;&gt;Replaced in 89.0 with GameID(string gameID) synced callin&lt;/span&gt;
}}


{{LuaConstant
|type = number
|name = Game.maxUnits
|info =
}}


{{LuaConstant
|type = number
|name = Game.maxTeams
|info =
}}


{{LuaConstant
|type = number
|name = Game.maxPlayers
|info =
}}


{{LuaConstant
|type = number
|name = Game.squareSize
|info = &lt;span class=&quot;note&quot;&gt;Divide Game.mapSizeX or Game.mapSizeZ by this to get engine's &quot;mapDims&quot; coordinates&lt;/span&gt;
}}


{{LuaConstant
|type = number
|name = Game.gameSpeed
|info =
}}

= Host =

{{LuaConstant
|type = number
|name = Game.gameMode
|info = &lt;span class=&quot;warning&quot;&gt; Removed from version 83.x&lt;/span&gt;
}}


{{LuaConstant
|type = number
|name = Game.startPosType
|info =
}}


{{LuaConstant
|type = bool
|name = Game.commEnds
|info = &lt;span class=&quot;warning&quot;&gt; Removed from version 83.x&lt;/span&gt;
}}


{{LuaConstant
|type = bool
|name = Game.limitDGun
|info = &lt;span class=&quot;warning&quot;&gt; Removed from version 83.x&lt;/span&gt;
}}


{{LuaConstant
|type = bool
|name = Game.ghostedBuildings
|info =
}}

= Checksums =

{{LuaConstant
|type = string
|name = Game.mapChecksum
|info =
}}



{{LuaConstant
|type = string
|name = Game.modChecksum
|info =
}}

= Map =

{{LuaConstant
|type = bool
|name = Game.mapDamage
|info =
}}


{{LuaConstant
|type = string
|name = Game.mapName
|info =
}}


{{LuaConstant
|type = string
|name = Game.mapDescription
|info = = {{type|string}} '''Game.mapHumanName'''
}}


{{LuaConstant
|type = number
|name = Game.mapHardness
|info =
}}


{{LuaConstant
|type = number
|name = Game.mapX
|info =
}}


{{LuaConstant
|type = number
|name = Game.mapY
|info =
}}


{{LuaConstant
|type = number
|name = Game.mapSizeX
|info = &lt;font color=&quot;#55ee99&quot;&gt;  in worldspace/opengl coords. Divide by Game.squareSize to get engine's &quot;mapDims&quot; coordinates&lt;/font&gt;
}}


{{LuaConstant
|type = number
|name = Game.mapSizeZ
|info = &lt;font color=&quot;#55ee99&quot;&gt;  in worldspace/opengl coords. Divide by Game.squareSize to get engine's &quot;mapDims&quot; coordinates&lt;/font&gt;
}}



{{LuaConstant
|type = number
|name = Game.gravity
|info =
}}


{{LuaConstant
|type = number
|name = Game.tidal
|info =
}}



{{LuaConstant
|type = number
|name = Game.windMin
|info =
}}


{{LuaConstant
|type = number
|name = Game.windMax
|info =
}}


{{LuaConstant
|type = number
|name = Game.extractorRadius
|info =
}}


{{LuaConstant
|type = number
|name = Game.waterDamage
|info =
}}


{{LuaConstant
|type = table
|name = Game.envDamageTypes
|info = &lt;font color=&quot;#55ee99&quot;&gt;Containing {def}IDs of environmental-damage sources {{new|104.0}}.&lt;/font&gt;
}}

= Mod =

{{LuaConstant
|type = string
|name = Game.gameName
|info = {{new|95.0}}
}}


{{LuaConstant
|type = string
|name = Game.gameShortName
|info = {{new|95.0}}
}}


{{LuaConstant
|type = string
|name = Game.gameVersion
|info = {{new|95.0}}
}}


{{LuaConstant
|type = string
|name = Game.gameMutator
|info = {{new|95.0}}
}}


{{LuaConstant
|type = string
|name = Game.gameDesc
|info = {{new|95.0}}
}}


{{LuaConstant
|type = string
|name = Game.modName
|info = &lt;span class=warning&gt;deprecated (it is in contrast to gameName appended with gameVersion!)&lt;/span&gt;
}}


{{LuaConstant
|type = string
|name = Game.modShortName
|info = &lt;span class=warning&gt;deprecated&lt;/span&gt;&lt;br&gt;
}}


{{LuaConstant
|type = string
|name = Game.modVersion
|info = &lt;span class=warning&gt;deprecated&lt;/span&gt;&lt;br&gt;
}}



{{LuaConstant
|type = string
|name = Game.modMutator
|info = &lt;span class=warning&gt;deprecated&lt;/span&gt;&lt;br&gt;
}}


{{LuaConstant
|type = string
|name = Game.modDesc
|info = &lt;span class=warning&gt;deprecated&lt;/span&gt;&lt;br&gt;
}}


{{LuaConstant
|type = bool
|name = Game.allowTeamColors
|info =
}}



{{LuaConstant
|type = bool
|name = Game.requireSonarUnderWater
|info =
}}


{{LuaConstant
|type = number
|name = Game.transportAir
|info =
}}


{{LuaConstant
|type = number
|name = Game.transportShip
|info =
}}


{{LuaConstant
|type = number
|name = Game.transportHover
|info =
}}


{{LuaConstant
|type = number
|name = Game.transportGround
|info =
}}


{{LuaConstant
|type = number
|name = Game.fireAtKilled
|info =
}}


{{LuaConstant
|type = number
|name = Game.fireAtCrashing
|info =
}}

= Constructor =

{{LuaConstant
|type = bool
|name = Game.constructionDecay
|info =
}}


{{LuaConstant
|type = bool
|name = Game.reclaimAllowEnemies
|info =
}}


{{LuaConstant
|type = bool
|name = Game.reclaimAllowAllies
|info =
}}


{{LuaConstant
|type = number
|name = Game.constructionDecayTime
|info =
}}



{{LuaConstant
|type = number
|name = Game.constructionDecaySpeed
|info =
}}



{{LuaConstant
|type = number
|name = Game.multiReclaim
|info =
}}


{{LuaConstant
|type = number
|name = Game.reclaimMethod
|info =
}}


{{LuaConstant
|type = number
|name = Game.reclaimUnitMethod
|info =
}}


{{LuaConstant
|type = number
|name = Game.reclaimUnitEnergyCostFactor
|info =
}}


{{LuaConstant
|type = number
|name = Game.reclaimUnitEfficiency
|info =
}}


{{LuaConstant
|type = number
|name = Game.reclaimFeatureEnergyCostFactor
|info =
}}


{{LuaConstant
|type = number
|name = Game.repairEnergyCostFactor
|info =
}}


{{LuaConstant
|type = number
|name = Game.resurrectEnergyCostFactor
|info =
}}


{{LuaConstant
|type = number
|name = Game.captureEnergyCostFactor
|info =
}}

= Categories =

{{LuaConstant
|type = table
|name = Game.springCategories
|info = &lt;font color=&quot;#55ee99&quot;&gt;
  example: {
    [&quot;vtol&quot;]         = 0,  [&quot;special&quot;]      = 1,  [&quot;noweapon&quot;]     = 2,
    [&quot;notair&quot;]       = 3,  [&quot;notsub&quot;]       = 4,  [&quot;all&quot;]          = 5,
    [&quot;weapon&quot;]       = 6,  [&quot;notship&quot;]      = 7,  [&quot;notland&quot;]      = 8,
    [&quot;mobile&quot;]       = 9,  [&quot;kbot&quot;]         = 10, [&quot;antigator&quot;]    = 11,
    [&quot;tank&quot;]         = 12, [&quot;plant&quot;]        = 13, [&quot;ship&quot;]         = 14,
    [&quot;antiemg&quot;]      = 15, [&quot;antilaser&quot;]    = 16, [&quot;antiflame&quot;]    = 17,
    [&quot;underwater&quot;]   = 18, [&quot;hover&quot;]        = 19, [&quot;phib&quot;]         = 20,
    [&quot;constr&quot;]       = 21, [&quot;strategic&quot;]    = 22, [&quot;commander&quot;]    = 23,
    [&quot;paral&quot;]        = 24, [&quot;jam&quot;]          = 25, [&quot;mine&quot;]         = 26,
    [&quot;kamikaze&quot;]     = 27, [&quot;minelayer&quot;]    = 28, [&quot;notstructure&quot;] = 29,
    [&quot;air&quot;]          = 30
  }&lt;/font&gt;
}}


{{LuaConstant
|type = table
|name = Game.armorTypes
|info = &lt;font color=&quot;#55ee99&quot;&gt;(bidirectional)&lt;/font&gt;
&lt;font color=&quot;#55ee99&quot;&gt;
  example: {
    [1]  = amphibious,   [2] = anniddm,     [3] = antibomber,
    [4]  = antifighter,  [5] = antiraider,  [6] = atl,
    [7]  = blackhydra,   [8] = bombers,     [9] = commanders,
    [10] = crawlingbombs, ...

    [&quot;amphibious&quot;]   = 1, [&quot;anniddm&quot;]    = 2, [&quot;antibomber&quot;] = 3
    [&quot;antifighter&quot;]  = 4, [&quot;antiraider&quot;] = 5, [&quot;atl&quot;]        = 6
    [&quot;blackhydra&quot;]   = 7, [&quot;bombers&quot;]    = 8, [&quot;commanders&quot;] = 9
    [&quot;crawlingbombs&quot;]= 10, ...
  }&lt;/font&gt;
}}

= Water Visuals =
{{removed|104.0}} - No longer constant as are now runtime mutable (Use gl.GetWaterRendering(name) instead).

{{LuaConstant
|type = bool
|name = Game.waterVoid
|info =
}}


{{LuaConstant
|type = bool
|name = Game.waterPlane
|info =
}}



{{LuaConstant
|type = string
|name = Game.waterTexture
|info =
}}



{{LuaConstant
|type = string
|name = Game.waterFoamTexture
|info =
}}



{{LuaConstant
|type = string
|name = Game.waterNormalTexture
|info =
}}


{{LuaConstant
|type = number
|name = Game.waterRepeatX
|info =
}}



{{LuaConstant
|type = number
|name = Game.waterRepeatY
|info =
}}



{{LuaConstant
|type = number
|name = Game.waterSurfaceAlpha
|info =
}}


{{LuaConstant
|type = number
|name = Game.waterSpecularFactor
|info =
}}


{{LuaConstant
|type = number
|name = Game.waterFresnelMin
|info =
}}


{{LuaConstant
|type = number
|name = Game.waterFresnelMax
|info =
}}


{{LuaConstant
|type = number
|name = Game.waterFresnelPower
|info =
}}



{{LuaConstant
|type = table
|name = Game.waterCausticTextures
|info = &lt;font color=&quot;#55ee99&quot;&gt;= {&quot;tex1&quot;,&quot;tex2&quot;,..}&lt;/font&gt;
}}


{{LuaConstant
|type = color
|name = Game.waterAbsorb
|info = &lt;font color=&quot;#55ee99&quot;&gt;= { number r, number g, number b}&lt;/font&gt;
}}


{{LuaConstant
|type = color
|name = Game.waterBaseColor
|info = 
}}


{{LuaConstant
|type = color
|name = Game.waterMinColor
|info = 
}}


{{LuaConstant
|type = color
|name = Game.waterSurfaceColor
|info = 
}}



{{LuaConstant
|type = color
|name = Game.waterSpecularColor
|info = 
}}



{{LuaConstant
|type = color
|name = Game.waterPlaneColor
|info = 
}}


{{LuaConstant
|type = color
|name = Game.fogColor
|info = {{removed|101.0}} (Use gl.GetAtmosphere(&quot;fogColor&quot;) instead)
}}


{{LuaConstant
|type = color
|name = Game.groundAmbientColor
|info = {{removed|101.0}} (Use gl.GetSun(&quot;ambient&quot;) instead)
}}


{{LuaConstant
|type = color
|name = Game.groundSpecularColor
|info = {{removed|101.0}} (Use gl.GetSun(&quot;specular&quot;) instead)
}}


{{LuaConstant
|type = color
|name = Game.groundSunColor
|info = {{removed|101.0}} (Use gl.GetSun(&quot;diffuse&quot;) instead)
}}


[[category: Lua]]</text>
      <sha1>mjjh393gosd1dsum2gmywh3s20t69m4</sha1>
    </revision>
  </page>
  <page>
    <title>Lua ConstPlatform</title>
    <ns>0</ns>
    <id>3819</id>
    <revision>
      <id>31481</id>
      <parentid>30510</parentid>
      <timestamp>2021-03-01T17:19:06Z</timestamp>
      <contributor>
        <username>Master-athmos</username>
        <id>2676</id>
      </contributor>
      <comment>Updated page with new anchorable templates</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2234">[[Engine_Development|Development]] &lt; [[Lua_Scripting|Lua Scripting]] &lt; {{FULLPAGENAME}}

= Platform =

{{LuaConstant
|type = string
|name = Platform.gpu
|info = full GPU device name
}}


{{LuaConstant
|type = string
|name = Platform.gpuVendor
|info = one of &quot;Nvidia&quot;, &quot;Intel&quot;, &quot;ATI&quot;, &quot;Mesa&quot;, &quot;Unknown&quot;
}}


{{LuaConstant
|type = string
|name = Platform.glVersionShort
|info = major.minor.buildNumber
}}


{{LuaConstant
|type = string
|name = Platform.glslVersionShort
|info = major.minor
}}


{{LuaConstant
|type = string
|name = Platform.glVersion
|info = full version
}}


{{LuaConstant
|type = string
|name = Platform.glVendor
|info =
}}


{{LuaConstant
|type = string
|name = Platform.glRenderer
|info =
}}


{{LuaConstant
|type = string
|name = Platform.glslVersion
|info = full version
}}


{{LuaConstant
|type = string
|name = Platform.glewVersion
|info =
}}


{{LuaConstant
|type = string
|name = Platform.osName
|info = full name of the OS
}}


{{LuaConstant
|type = string
|name = Platform.osFamily
|info = one of &quot;Windows&quot;, &quot;Linux&quot;, &quot;MacOSX&quot;, &quot;FreeBSD&quot;, &quot;Unknown&quot;
}}


{{LuaConstant
|type = number
|name = Platform.gpuMemorySize
|info = size of total GPU memory in MBs; only available for &quot;Nvidia&quot;, (rest are 0)
}}


{{LuaConstant
|type = number
|name = Platform.sdlVersionCompiledMajor
|info =
}}



{{LuaConstant
|type = number
|name = Platform.sdlVersionCompiledMinor
|info =
}}


{{LuaConstant
|type = number
|name = Platform.sdlVersionCompiledPatch
|info =
}}


{{LuaConstant
|type = number
|name = Platform.sdlVersionLinkedMajor
|info =
}}


{{LuaConstant
|type = number
|name = Platform.sdlVersionLinkedMinor
|info =
}}


{{LuaConstant
|type = number
|name = Platform.sdlVersionLinkedPatch
|info =
}}


{{LuaConstant
|type = bool
|name = Platform.glSupportNonPowerOfTwoTex
|info =
}}


{{LuaConstant
|type = bool
|name = Platform.glSupportTextureQueryLOD
|info =
}}


{{LuaConstant
|type = bool
|name = Platform.glSupport24bitDepthBuffer
|info =
}}


{{LuaConstant
|type = bool
|name = Platform.glSupportRestartPrimitive
|info =
}}


{{LuaConstant
|type = bool
|name = Platform.glSupportClipSpaceControl
|info =
}}


{{LuaConstant
|type = bool
|name = Platform.glSupportFragDepthLayout
|info =
}}


[[category: Lua]]</text>
      <sha1>fzc14jdl5pdd83n0lrj3z3isbba8hif</sha1>
    </revision>
  </page>
  <page>
    <title>Lua FBO</title>
    <ns>0</ns>
    <id>2477</id>
    <revision>
      <id>30996</id>
      <parentid>30928</parentid>
      <timestamp>2019-02-25T11:58:35Z</timestamp>
      <contributor>
        <username>Ivand</username>
        <id>2933</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3452">== FBO ==
== FBO ==
'''gl.CreateFBO'''
  ( [ table initialization ] ) -&gt; userdata [[Lua_FBO#Userdata_FBO|fbo]]
&lt;font color=darkgreen&gt;
  initialization table can contain:

    attachment ::= luaTex or RBO or nil or { luaTex [, num [[Lua_ConstGL#FBO_Targets|target]] [, num level ] ] }

    {
      depth   = attachment,
      stencil = attachment,
      color0  = attachment,
      color1  = attachment,
      color2  = attachment,
      ..
      color15 = attachment,
      drawbuffers = { GL_COLOR_ATTACHMENT0_EXT, GL_COLOR_ATTACHMENT3_EXT, ..}
    }
&lt;/font&gt;

'''gl.DeleteFBO''' &lt;font color=darkgreen&gt;(This doesn't delete the attached objects!)&lt;/font&gt;
  ( fbo ) -&gt; nil

'''gl.IsValidFBO'''
  ( fbo [, number [[Lua_ConstGL#FBO_Targets|target]] ] ) -&gt; boolean valid [, number [[Lua_ConstGL#FBO_Status|status]] ]

'''gl.ActiveFBO'''
  ( fbo [, number [[Lua_ConstGL#FBO_Targets|target]] ] [, boolean identities ] , lua_function, arg1, arg2, ... ) -&gt; nil

'''gl.UnsafeSetFBO''' &lt;font color=darkgreen&gt;(Binds a FBO like gl.ActiveFBO() does, but you have to unbind it yourself!)&lt;/font&gt;
  ( nil [, number [[Lua_ConstGL#FBO_Targets|target]] = GL_FRAMEBUFFER_EXT ] ) -&gt; nil &lt;font color=darkgreen&gt;(Bind default screenbuffer)&lt;/font&gt;
  ( fbo [, number [[Lua_ConstGL#FBO_Targets|target]] = fbo.target ] ) -&gt; nil

'''gl.RawBindFBO''' &lt;font color=darkblue&gt; (Replaces UnsafeSetFBO starting from 104.0.1-1003-gb3e02a6 maintenance)&lt;/font&gt;
  ( nil [, number [[Lua_ConstGL#FBO_Targets|target]] = GL_FRAMEBUFFER_EXT ] [, number rawFboId = 0] ) -&gt; nil &lt;font color=darkgreen&gt;(Bind default or specified via rawFboId numeric id of FBO)&lt;/font&gt;
  ( fbo [, number [[Lua_ConstGL#FBO_Targets|target]] = fbo.target ] ) -&gt; number previouslyBoundRawFboId

'''gl.BlitFBO''' &lt;font color=red&gt;needs GLEW_EXT_framebuffer_blit&lt;/font&gt;
  ( int x0Src,y0Src,x1Src,y1Src,
    int x0Dst,y0Dst,x1Dst,y1Dst
    [, number mask = [[Lua_ConstGL#Clear_Bits|GL_COLOR_BUFFER_BIT]] [, number filter = GL_NEAREST ] ] ) -&gt; nil

  ( fboSrc , int x0Src,y0Src,x1Src,y1Src,
    fboDst , int x0Dst,y0Dst,x1Dst,y1Dst
    [, number mask = [[Lua_ConstGL#Clear_Bits|GL_COLOR_BUFFER_BIT]] [, number filter = GL_NEAREST ] ] ) -&gt; nil


===Userdata FBO===
   &lt;font color=darkgreen&gt;attachment ::= luaTex or RBO or nil or { luaTex or RBO [, num [[Lua_ConstGL#FBO_Targets|target]] [, num level ]] }&lt;/font&gt;

  write-only methods are:
    '''fbo.depth'''   = attachment
    '''fbo.stencil''' = attachment
    '''fbo.color0'''  = attachment
     ..
    '''fbo.color15''' = attachment
    '''fbo.drawbuffers''' = { GL_COLOR_ATTACHMENT0_EXT, GL_COLOR_ATTACHMENT3_EXT, ..}
    '''fbo.readbuffer'''  = GL_COLOR_ATTACHMENT0_EXT

==RBO==
'''gl.CreateRBO'''
  ( int xsize, int ysize,
    [ {
      target = GL_RENDERBUFFER_EXT,
      format = [[Lua_ConstGL#RBO_Formats|GL_RGBA]],
      [samples = number], &lt;font color=darkblue&gt; any number here will result in creation of multisampled RBO (Added in 104.0.1-1015-g8e36ef2 maintenance)&lt;/font&gt;
    } ]) -&gt; userdata [[Lua_FBO#Userdata_RBO|rbo]]

'''gl.DeleteRBO'''
  ( rbo ) -&gt; nil

===Userdata RBO===
  read-only methods are:
    '''rbo.target'''  = number
    '''rbo.format'''  = [[Lua_ConstGL#RBO_Formats|number]]
    '''rbo.xsize'''   = number
    '''rbo.ysize'''   = number
    '''rbo.valid'''   = boolean
    '''rbo.samples''' = number &lt;font color=darkblue&gt; will return globalRendering-&gt;msaaLevel for multisampled RBO or 0 otherwise (Added in 104.0.1-1015-g8e36ef2 maintenance)&lt;/font&gt;</text>
      <sha1>k7p7q6r8861v4kail7lm5s8ybvjrvs7</sha1>
    </revision>
  </page>
  <page>
    <title>Lua FBO and RBO</title>
    <ns>0</ns>
    <id>2478</id>
    <revision>
      <id>30945</id>
      <parentid>30941</parentid>
      <timestamp>2019-02-17T19:30:54Z</timestamp>
      <contributor>
        <username>Ivand</username>
        <id>2933</id>
      </contributor>
      <comment>/* RBO */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3548">[[Engine_Development|Development]] &lt; [[Lua_Scripting|Lua Scripting]] &lt; {{FULLPAGENAME}}
== FBO ==
'''gl.CreateFBO'''
  ( [ table initialization ] ) -&gt; userdata [[Lua_FBO#Userdata_FBO|fbo]]
&lt;font color=darkgreen&gt;
  initialization table can contain:

    attachment ::= luaTex or RBO or nil or { luaTex [, num [[Lua_ConstGL#FBO_Targets|target]] [, num level ] ] }

    {
      depth   = attachment,
      stencil = attachment,
      color0  = attachment,
      color1  = attachment,
      color2  = attachment,
      ..
      color15 = attachment,
      drawbuffers = { GL_COLOR_ATTACHMENT0_EXT, GL_COLOR_ATTACHMENT3_EXT, ..}
    }
&lt;/font&gt;

'''gl.DeleteFBO''' &lt;font color=darkgreen&gt;(This doesn't delete the attached objects!)&lt;/font&gt;
  ( fbo ) -&gt; nil

'''gl.IsValidFBO'''
  ( fbo [, number [[Lua_ConstGL#FBO_Targets|target]] ] ) -&gt; boolean valid [, number [[Lua_ConstGL#FBO_Status|status]] ]

'''gl.ActiveFBO'''
  ( fbo [, number [[Lua_ConstGL#FBO_Targets|target]] ] [, boolean identities ] , lua_function, arg1, arg2, ... ) -&gt; nil

'''gl.UnsafeSetFBO''' &lt;font color=darkgreen&gt;(Binds a FBO like gl.ActiveFBO() does, but you have to unbind it yourself!)&lt;/font&gt;
  ( nil [, number [[Lua_ConstGL#FBO_Targets|target]] = GL_FRAMEBUFFER_EXT ] ) -&gt; nil &lt;font color=darkgreen&gt;(Bind default screenbuffer)&lt;/font&gt;
  ( fbo [, number [[Lua_ConstGL#FBO_Targets|target]] = fbo.target ] ) -&gt; nil

'''gl.RawBindFBO''' &lt;font color=darkblue&gt; (Replaces UnsafeSetFBO starting from 104.0.1-1003-gb3e02a6 maintenance)&lt;/font&gt;
  ( nil [, number [[Lua_ConstGL#FBO_Targets|target]] = GL_FRAMEBUFFER_EXT ] [, number rawFboId = 0] ) -&gt; nil &lt;font color=darkgreen&gt;(Bind default or specified via rawFboId numeric id of FBO)&lt;/font&gt;
  ( fbo [, number [[Lua_ConstGL#FBO_Targets|target]] = fbo.target ] ) -&gt; number previouslyBoundRawFboId

'''gl.BlitFBO''' &lt;font color=red&gt;needs GLEW_EXT_framebuffer_blit&lt;/font&gt;
  ( int x0Src,y0Src,x1Src,y1Src,
    int x0Dst,y0Dst,x1Dst,y1Dst
    [, number mask = [[Lua_ConstGL#Clear_Bits|GL_COLOR_BUFFER_BIT]] [, number filter = GL_NEAREST ] ] ) -&gt; nil

  ( fboSrc , int x0Src,y0Src,x1Src,y1Src,
    fboDst , int x0Dst,y0Dst,x1Dst,y1Dst
    [, number mask = [[Lua_ConstGL#Clear_Bits|GL_COLOR_BUFFER_BIT]] [, number filter = GL_NEAREST ] ] ) -&gt; nil


===Userdata FBO===
   &lt;font color=darkgreen&gt;attachment ::= luaTex or RBO or nil or { luaTex or RBO [, num [[Lua_ConstGL#FBO_Targets|target]] [, num level ]] }&lt;/font&gt;

  write-only methods are:
    '''fbo.depth'''   = attachment
    '''fbo.stencil''' = attachment
    '''fbo.color0'''  = attachment
     ..
    '''fbo.color15''' = attachment
    '''fbo.drawbuffers''' = { GL_COLOR_ATTACHMENT0_EXT, GL_COLOR_ATTACHMENT3_EXT, ..}
    '''fbo.readbuffer'''  = GL_COLOR_ATTACHMENT0_EXT

==RBO==
'''gl.CreateRBO'''
  ( int xsize, int ysize,
    [ {
      target = GL_RENDERBUFFER_EXT,
      format = [[Lua_ConstGL#RBO_Formats|GL_RGBA]],
      [samples = number], &lt;font color=darkblue&gt; any number here will result in creation of multisampled RBO (Added in 104.0.1-1015-g8e36ef2 maintenance)&lt;/font&gt;
    } ]) -&gt; userdata [[Lua_FBO#Userdata_RBO|rbo]]

'''gl.DeleteRBO'''
  ( rbo ) -&gt; nil

===Userdata RBO===
  read-only methods are:
    '''rbo.target'''  = number
    '''rbo.format'''  = [[Lua_ConstGL#RBO_Formats|number]]
    '''rbo.xsize'''   = number
    '''rbo.ysize'''   = number
    '''rbo.valid'''   = boolean
    '''rbo.samples''' = number &lt;font color=darkblue&gt; will return globalRendering-&gt;msaaLevel for multisampled RBO or 0 otherwise (Added in 104.0.1-1015-g8e36ef2 maintenance)&lt;/font&gt;
[[Category: Lua]]</text>
      <sha1>slczqzb7muhaupc9z7lr0gz6epapb66</sha1>
    </revision>
  </page>
  <page>
    <title>Lua FeatureDefs</title>
    <ns>0</ns>
    <id>2436</id>
    <revision>
      <id>30804</id>
      <parentid>29456</parentid>
      <timestamp>2018-11-10T17:49:14Z</timestamp>
      <contributor>
        <username>Gajop</username>
        <id>2804</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1909">[[Engine_Development|Development]] &lt; [[Lua_Scripting|Lua Scripting]] &lt; {{FULLPAGENAME}}

The FeatureDefs[] table holds all information about the features used in a game.

Works the same way as [[Lua_UnitDefs]] except the tables are called '''FeatureDefs[]''' and '''FeatureDefNames[]'''

==Looping==
Note: Its entries are metatables, so you can't use the pairs() iterator on them, use this instead:
&lt;pre&gt;
  for id,featureDef in pairs(FeatureDefs) do
    for name,param in featureDef:pairs() do
      Spring.Echo(name,param)
    end
  end
&lt;/pre&gt;

==Example==
In key = value form, where FeatureDefs[featureDefID].key==value, with subtables at the end.
&lt;pre&gt;
    autoreclaim = true,
    blocking = true,
    burnable = false,
    deathFeatureID = 2,
    destructable = true,
    drawType = 0,
    drawTypeString = &quot;model&quot;,
    energy = 0,
    floating = false,
    geoThermal = false,
    height = 0,
    id = 1,
    mass = 4205.400390625,
    maxHealth = 16290,
    maxx = -10000,
    maxy = -10000,
    maxz = -10000,
    metal = 6441,
    midx = 0,
    midy = 0,
    midz = 0,
    minx = 10000,
    miny = 10000,
    minz = 10000,
    modelname = &quot;objects3d/AAFUS_DEAD.s3o&quot;,
    name = &quot;aafus_dead&quot;,
    noSelect = true,
    radius = 0,
    reclaimTime = 38646,
    reclaimable = true,
    resurrectable = -1,
    smokeTime = 300,
    tooltip = &quot;Advanced Fusion Reactor Wreckage&quot;,
    upright = false,
    xsize = 10,
    zsize = 8,
    collisionVolume = {
        boundingRadius = 5.8736290375751e-026,
        defaultToFootPrint = false,
        defaultToPieceTree = false,
        defaultToSphere = false,
        offsetX = 0,
        offsetY = 1,
        offsetZ = 6.3954851782821e-026,
        scaleX = 6.1349811206651e-026,
        scaleY = 1.9340968033141e-038,
        scaleZ = 6.3955048998047e-026,
        type = &quot;ellipsoid&quot;,
    },
    customParams = {
        ...
    },
&lt;/pre&gt;


[[category: Lua]]</text>
      <sha1>auoajqgzhpr9vt56xc0cz2qbg2zuik1</sha1>
    </revision>
  </page>
  <page>
    <title>Lua Fonts</title>
    <ns>0</ns>
    <id>2869</id>
    <revision>
      <id>31220</id>
      <parentid>31164</parentid>
      <timestamp>2020-04-12T01:00:18Z</timestamp>
      <contributor>
        <username>Gajop</username>
        <id>2804</id>
      </contributor>
      <comment>/* Inlined ColorCodes */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3014">[[Engine_Development|Development]] &lt; [[Lua_Scripting|Lua Scripting]] &lt; {{FULLPAGENAME}}

=Load/Delete=
'''gl.LoadFont'''
  ( string fontfilename, number size = 14,
    number outlineWidth = 2, number outlineWeight = 15 ) -&gt; userdata font
'''gl.DeleteFont'''
  ( userdata font ) -&gt; nil

=Userdata Functions=
'''font:Print'''
  (string &quot;text&quot;, number x, number y [, number size [, string &lt;span class=note&gt;&quot;options&quot;&lt;/span&gt;] ] ) -&gt; nil
&lt;span class=note&gt;
  options are:
    horizontal alignment:
       'c' = center
       'r' = right
    vertical alignment:
       'a' = ascender (is a font specific value)
       't' = top (depends on text)
       'v' = vertical center
       'x' = baseline
       'b' = bottom
       'd' = descender
    decorations:
       'o' = black outline
       'O' = white outline
       's' = shadow
    other:
       'n' = don't round vertex coords to nearest integer (font may get blurry)
&lt;/span&gt;
http://home.arcor.de/jkei/fontlines.png


'''font:SetTextColor'''
  ( number r, number g, number b [, number a ] ) -&gt; nil
  ( {r,g,b,a} ) -&gt; nil
'''font:SetOutlineColor'''
  ( number r, number g, number b [, number a ] ) -&gt; nil
  ( {r,g,b,a} ) -&gt; nil
'''font:SetAutoOutlineColor'''
  ( boolean enable ) -&gt; nil


'''font:GetTextWidth'''
  (string &quot;text&quot;) -&gt; number width  &lt;span class=note&gt;(in pixels, with a font size of 1.0)&lt;/span&gt;
'''font:GetTextHeight'''
  ( string &quot;text&quot; ) -&gt; nil | number height, number descender, number numlines
  &lt;span class=note&gt;(height &amp; descender in pixels, with a font size of 1.0)&lt;/span&gt;
  &lt;span class=note&gt;further descriptions here: [[GetTextHeight]]&lt;/span&gt;


'''font:WrapText'''
  ( string &quot;text&quot;, number max_width [, number max_height [, number size ] ])
    -&gt; nil | string wrappedText, number lines

'''font:BindTexture'''
  (  ) -&gt; nil



&lt;span class=note&gt;&lt;b&gt;If you have multiple font:Print calls, then you can bunch them between a font:Begin() and font:End() to speedup the rendering.&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
'''font:Begin'''
  (  ) -&gt; nil
'''font:End'''
  (  ) -&gt; nil

=Userdata Properties (ReadOnly)=
string '''font.path'''&lt;br&gt;
string '''font.family'''&lt;br&gt;
string '''font.style'''&lt;br&gt;
number '''font.size'''&lt;br&gt;
number '''font.height''' a.k.a. '''font.lineheight'''&lt;br&gt;
number '''font.descender'''&lt;br&gt;
number '''font.outlinewidth'''&lt;br&gt;
number '''font.outlineweight'''&lt;br&gt;
number '''font.texturewidth'''&lt;br&gt;
number '''font.textureheight'''

=Inlined ColorCodes=
&lt;span class=info&gt; Whole Spring FontRendering supports `inlined colorcodes`, there are 2 special chars to indicate those '&lt;code&gt;\255\$r\$g\$b&lt;/code&gt;' &amp; '&lt;code&gt;\b&lt;/code&gt;':&lt;/span&gt;
&lt;pre&gt;
local black = &quot;\255\001\001\001&quot;
local blue = &quot;\255\001\001\255&quot;
local reset = &quot;\b &quot; -- !space after &quot;\b &quot; is necessary if you put it at the end of the string you want to print, otherwise the parsing will break
font:Print(blue .. &quot;bluetext&quot; .. black .. &quot;blacktext&quot; .. reset .. blue .. &quot;bluetext again&quot; .. reset, 0, 0)
&lt;/pre&gt;

From 98.0 onwards inlined colorcodes reuse the currently set alpha value.

[[category: Lua]]</text>
      <sha1>6602mydjk9r8vcbs873nk9x3e0lpmyl</sha1>
    </revision>
  </page>
  <page>
    <title>Lua GLSL Api</title>
    <ns>0</ns>
    <id>2402</id>
    <revision>
      <id>31796</id>
      <parentid>31795</parentid>
      <timestamp>2022-06-03T11:15:24Z</timestamp>
      <contributor>
        <username>Beherith</username>
        <id>2441</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8633">[[Engine_Development|Development]] &lt; [[Lua_Scripting|Lua Scripting]] &lt; {{FULLPAGENAME}}

These functions are ONLY available if the graphics adapter supports GLSL.&lt;br&gt;&lt;br&gt; Please test in your scripts if one of them exists before you use them. In headless mode, the gl. callouts are nil.


{{LuaCallout
|prefix = gl.
|name = CreateShader
|arg1 = {{type|table}} shaderParams
|arg2 =
|arg3 =
|arg4 =
|arg5 =
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|number}} shaderID 
|info = Create a shader from shaderParams table:

  ({[ vertex   = &quot;glsl code&quot; ,]
    [ tcs      = &quot;glsl code&quot; ,]
    [ tes      = &quot;glsl code&quot; ,]
    [ geometry = &quot;glsl code&quot; ,]
    [ fragment = &quot;glsl code&quot; ,]
    [ uniform       = { uniformName = number value, ...} ,] &lt;span class=note&gt;(specify a Lua array as an argument to uniformName to initialize GLSL arrays)&lt;/span&gt;
    [ uniformInt    = { uniformName = number value, ...} ,] &lt;span class=note&gt;(specify a Lua array as an argument to uniformName to initialize GLSL arrays)&lt;/span&gt;
    [ uniformFloat  = { uniformName = number value, ...} ,] &lt;span class=note&gt;(specify a Lua array as an argument to uniformName to initialize GLSL arrays)&lt;/span&gt;
    [ uniformMatrix = { uniformName = number value, ...} ,]
    [ geoInputType = number inType,]
    [ geoOutputType = number outType,]
    [ geoOutputVerts = number maxVerts,]
    [ definitions = &quot;string of shader #defines&quot;, ]
  })

* The &quot;Vertex&quot; or vertex-shader is your GLSL-Code as string, its written in a C-Dialect. This shader is busy deforming the geometry of a unit but it can not create new polygons. Use it for waves, wobbling surfaces etc.
 
* The &quot;Geometry&quot; or Geometry-shader can create new vertices and vertice-stripes from points. 

* The &quot;TCS&quot; or Tesselation Control Shader controls how much tessellation a particular patch gets; it also defines the size of a patch, thus allowing it to augment data. It can also filter vertex data taken from the vertex shader. The main purpose of the TCS is to feed the tessellation levels to the Tessellation primitive generator stage, as well as to feed patch data (as its output values) to the Tessellation Evaluation Shader stage. TCS shader can be used with spring version &gt;= 104.0.1-596 (maintenance), it's also available in develop branch of spring.

* The &quot;TES&quot; or Tesselation Evaluation Shader takes the abstract patch generated by the tessellation primitive generation stage, as well as the actual vertex data for the entire patch, and generates a particular vertex from it. Each TES invocation generates a single vertex. It can also take per-patch data provided by the Tessellation Control Shader. TES shader can be used with spring version &gt;= 104.0.1-596 (maintenance), it's also available in develop branch of spring.

* The &quot;Fragment&quot; or Fragment-shader (sometimes called pixel-Shader) is post processing the allready rendered picture (for example drawing stars on the sky)- remember textures are not always 2 dimensional pictures. They can contain information about the depth, or the third value marks areas and the strength at which these are processed.

* The Uniforms are the values, you send along with the shader-program. To use them in the shader-program declare them like this: 
&lt;syntaxhighlight lang=&quot;c&quot;&gt;uniform float frame;&lt;/syntaxhighlight&gt;

* From 101.0 onwards, the engine will automatically fill in an appropriately named uniform for team colour if it is declared;
&lt;syntaxhighlight lang=&quot;c&quot;&gt;uniform vec4 teamColor;&lt;/syntaxhighlight&gt;
}}


{{LuaCallout
|prefix = gl.
|name = DeleteShader
|arg1 = {{type|number}} shaderID
|arg2 = 
|arg3 =
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = Deletes a shader identified by shaderID
}}


{{LuaCallout
|prefix = gl.
|name = ActiveShader
|arg1 = {{type|number}} shaderID
|arg2 = {{type|function}} func {{bracket}}
|arg3 = {{type|arg1}} {{bracket}}
|arg4 = {{type|arg2}} ... {{rbracket}}  {{rbracket}}
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = Binds a shader program identified by shaderID, and calls the Lua func with the specified arguments. Can be used in NON-drawing events (to update uniforms etc.)!
}}


{{LuaCallout
|prefix = gl.
|name = UseShader
|arg1 = {{type|number}} shaderID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|bool}} linked
|info = Binds a shader program identified by shaderID. Pass 0 to disable the shader. Returns wether the shader was successfully bound. 
}}


{{LuaCallout
|prefix = gl.
|name = GetShaderLog
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|string}} infoLog
|info = Returns the shader compilation error log. This is empty if the shader linking failed, in that case, check your in/out blocks and ensure they match. 
}}


{{LuaCallout
|prefix = gl.
|name = SetGeometryShaderParameter 
|arg1 = {{type|number}} shaderID
|arg2 = {{type|number}} param
|arg3 = {{type|number}} number
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = Sets the Geometry shader parameters for shaderID. Needed by geometry shader programs (check the opengl GL_ARB_geometry_shader4 extension for glProgramParameteri) &lt;br&gt; Was called SetShaderParameter before  104.0.1-596 (maintenance)
}}


{{LuaCallout
|prefix = gl.
|name = SetTesselationShaderParameter
|arg1 = {{type|number}} param
|arg2 = {{type|number}} number
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = Sets the tesselation shader parameters for shaderID. Needed by tesselation shader programs (check the opengl GL_ARB_tessellation_shader extension for glProgramParameteri) &lt;br&gt; Introduced in 104.0.1-596 (maintenance)
}}


{{LuaCallout
|prefix = gl.
|name = GetActiveUniforms
|arg1 = {{type|number}} shaderID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|table}} ActiveUniforms = { { name = &quot;name&quot;, type = &quot;type&quot;, length = number length, size = number size }, ...}
|info = Query the active (actually used) uniforms of a shader and identify their names, types (float, int, uint) and sizes (float, vec4, ...). 
}}


{{LuaCallout
|prefix = gl.
|name = GetUniformLocation
|arg1 = {{type|number}} shaderID
|arg2 = {{type|string}} &quot;name&quot;
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|number}} locationID
|info = Returns the locationID of a shaders uniform. Needed for changing uniform values with gl.Uniform.  
}}


{{LuaCallout
|prefix = gl.
|name = Uniform
|arg1 = {{type|number}} locationID 
|arg2 = {{type|number }} f1 {{bracket}}
|arg3 = {{type|number }} f2 {{bracket}}
|arg4 = {{type|number }} f3 {{bracket}}
|arg5 = {{type|number }} f4 {{rbracket}} {{rbracket}} {{rbracket}}
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} 
|info = Sets the uniform float value at the locationID for the currently active shader. Shader must be activated before setting uniforms.
}}


{{LuaCallout
|prefix = gl.
|name = UniformInt
|arg1 = {{type|number}} locationID 
|arg2 = {{type|number }} int1 {{bracket}}
|arg3 = {{type|number }} int2 {{bracket}}
|arg4 = {{type|number }} int3 {{bracket}}
|arg5 = {{type|number }} int4 {{rbracket}} {{rbracket}} {{rbracket}}
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} 
|info = Sets the uniform int value at the locationID for the currently active shader. Shader must be activated before setting uniforms.
}}


{{LuaCallout
|prefix = gl.
|name = UniformArray
|arg1 = {{type|number}} locationID 
|arg2 = {{type|number }} type
|arg3 = {{type|table }} uniforms 
|arg4 =
|arg5 =
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} 
|info = Sets the an array of uniform values at the locationID for the currently active shader. Shader must be activated before setting uniforms. Type can be one of {1 = int, 2 = float, 3 = float matrix}. In 104.0 the maximum length of the uniforms table increased from 32 entries to 1024.
}}


{{LuaCallout
|prefix = gl.
|name = UniformMatrix
|arg1 = {{type|number}} locationID 
|arg2 = {{type|string}} &quot;shadows&quot; {{pipe}} &quot;camera&quot; {{pipe}} &quot;caminv&quot; {{pipe}} &quot;camprj&quot; {{pipe}} {{type|number}} m1
|arg3 = {{type|number}} m2
|arg4 = {{type|number}} m3
|arg5 = {{type|number}} m4
|arg6 = {{type|number}} m5
|arg7 = {{type|number}} m6
|arg8 = {{type|number}} m7
|arg9 = {{type|number}} m8 ... , m16
|return = {{type|nil}} 
|info = Sets the a uniform mat4 locationID for the currently active shader. Shader must be activated before setting uniforms. Can set one one common matrix like shadow, or by passing 16 additional numbers for the matrix.
}}

[[category: Lua]]</text>
      <sha1>ccqtoaep6ra7szp3g0txnqzbpxjfebj</sha1>
    </revision>
  </page>
  <page>
    <title>Lua Libraries</title>
    <ns>0</ns>
    <id>3742</id>
    <revision>
      <id>30808</id>
      <parentid>30793</parentid>
      <timestamp>2018-11-11T04:21:23Z</timestamp>
      <contributor>
        <username>Gajop</username>
        <id>2804</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2423">=Lua libraries=
This page lists all common Lua libraries that can be used in Spring game and map archives.

Libraries:
* [https://github.com/gajop/analytics analytics]: Usage analytics reporting
* [https://github.com/jk3064/chiliui ChiliUI]: UI framework [[Chili | docs]]
* [https://github.com/gajop/chilifx ChiliFX]: Chili effects
* [https://github.com/gajop/chotify Chotify]: Notification library in Chili
* [https://github.com/jk3064/Custom-Unit-Shader-Framework Custom Unit Shader Framework]: Unit rendering with shaders
* [https://github.com/gajop/i18n i18n]: Translations library
* [https://github.com/gajop/liblobby LibLobby]: Spring Lobby protocol library
* [https://github.com/gajop/Lua-Class-System LCS]: OOP (classes) in Lua
* [https://github.com/jk3064/lups LUPS]: Lua Particle System for Spring [[LUPS | docs]]
* [https://github.com/gajop/springmon springmon]: Spring file monitor and autoreloader
* [https://github.com/gajop/spring-wrapper-connector spring-wrapper-connector]: Wrapper program communication provider


==Single file libraries==
There is also a number of single file libraries that don't have their own repository but can technically still be considered libraries.

Library files:
* [https://github.com/SpringMCLegacy/SpringMCLegacy/blob/master/LuaRules/Gadgets/api_vector.lua Vector]: Small utility for vector operations
* [https://github.com/Spring-SpringBoard/SpringBoard-Core/blob/master/libs_sb/json.lua JSON]: Serializing to the JSON format
* [https://github.com/spring1944/spring1944/blob/master/LuaRules/Gadgets/api_delay.lua Delay]: Delaying gadget calls
* [https://github.com/spring1944/spring1944/blob/master/LuaRules/Includes/network.lua Network]: Delta compression for binary strings
* [https://github.com/spring1944/spring1944/blob/master/LuaRules/Includes/camera.lua Camera]: Camera state serialization
* Deferred rendering [http://imolarpg.dyndns.org/svn/branches/BAR/shaders/deferred_lighting.glsl Shader] &amp; [http://imolarpg.dyndns.org/svn/branches/BAR/luaui/widgets/gfx_deferred_rendering.lua Widget]: Deferred rendering (projectile) based lights

===Misc===
* {{forumlink|topic=28341|title=ChangePiece}} - Switch piece geometry

=== Additional resources ===

Some additional libraries can be found using Github topics, such as [https://github.com/topics/springrts-lib springrts-lib] and [https://github.com/topics/springrts springrts]

[[Category:Lua]] [[Category:Libraries]]</text>
      <sha1>bc1xgb4wr6k2nuz4jgnrec2eprg9zyq</sha1>
    </revision>
  </page>
  <page>
    <title>Lua Lobby</title>
    <ns>0</ns>
    <id>2870</id>
    <revision>
      <id>28546</id>
      <parentid>25458</parentid>
      <timestamp>2014-05-11T14:55:42Z</timestamp>
      <contributor>
        <username>Gajop</username>
        <id>2804</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3717">&lt;span style=&quot;color:red&quot;&gt;'''Note: After discussion &lt;ref&gt;{{forumlink|topic=28935|title=anything against removal of lualobby?}}&lt;/ref&gt; LuaLobby was removed&lt;ref&gt;[https://github.com/spring/spring/commit/05f61e76f7522096faeef2eaa6aaa16bc2b55d71 github commit]&lt;/ref&gt; from engine &gt; 91.0''' &lt;/span&gt;

Instead [[LuaSocket]] can be used.
There's an existing LuaSocket implementation available at: https://github.com/gajop/liblobby with docs at: http://gajop.github.io/liblobby/.

[[Engine_Development|Development]] &lt; [[Lua_Scripting|Lua Scripting]] &lt; {{FULLPAGENAME}}

=Create=
'''Script.CreateLobby'''
  ( ) -&gt; userdata lobby

=Userdata Functions=
'''lobby:Connect'''
  ( string url, int port ) -&gt; nil
'''lobby:Disconnect'''
  ( ) -&gt; nil
'''lobby:Login'''
  ( string username, string password ) -&gt; nil
'''lobby:Rename'''
  ( string newname ) -&gt; nil
'''lobby:ChangePass'''
  ( string oldpassword, string newpassword ) -&gt; nil
'''lobby:Register'''
  ( string username, string password ) -&gt; nil
'''lobby:ConfirmAggreement'''
  ( ) -&gt; nil
'''lobby:JoinChannel'''
  ( string chan_name [,string password] ) -&gt; nil
'''lobby:LeaveChannel'''
  ( string chan_name ) -&gt; nil
'''lobby:Say'''
  ( string chan_name, string message ) -&gt; nil
'''lobby:SayEx'''
  ( string chan_name, string message ) -&gt; nil
'''lobby:SayPrivate'''
  ( string user_name, string message ) -&gt; nil
'''lobby:StatusUpdate'''
  ( bool ingame, bool away ) -&gt; nil
'''lobby:Channels'''
  ( ) -&gt; nil
'''lobby:KickChannelMember'''
  ( string chan_name, string user_name, string reason) -&gt; nil
'''lobby:ChangeTopic'''
  ( string chan_name, string topic) -&gt; nil
'''lobby:Poll'''
  ( ) -&gt; nil

=Userdata Events=
'''lobby.DoneConnecting''' = function(bool sucess, string error_message)&lt;br&gt;
'''lobby.ServerGreeting''' = function(string server_version, string spring_version, int udp_port, int mode)&lt;br&gt;
'''lobby.RegisterDenied''' = function(string reason)&lt;br&gt;
'''lobby.RegisterAccepted''' = function()&lt;br&gt;
'''lobby.LoginDenied''' = function(string reason)&lt;br&gt;
'''lobby.LoginEnd''' = function()&lt;br&gt;
'''lobby.Aggreement''' = function(string text)&lt;br&gt;
'''lobby.Motd''' = function(string text)&lt;br&gt;
'''lobby.ServerMessage''' = function(string text)&lt;br&gt;
'''lobby.ServerMessageBox''' = function(string text, string url)&lt;br&gt;
'''lobby.AddUser''' = function(string user_name, string country, number cpu)&lt;br&gt;
'''lobby.RemoveUser''' = function(string user_name)&lt;br&gt;
'''lobby.UserStatusUpdate''' = function(string user_name, bool away, bool bot, bool ingame, bool moderator, int rank)&lt;br&gt;
'''lobby.ChannelInfo''' = function(string chan_name, int num_users)&lt;br&gt;
'''lobby.ChannelInfoEnd''' = function()&lt;br&gt;
'''lobby.RequestMutelist''' = function(string chan_name)&lt;br&gt;
'''lobby.Mutelist''' = function(string chan_name, table {&quot;userABC&quot;,&quot;userXYZ&quot;,...})&lt;br&gt;
'''lobby.Joined''' = function(string chan_name)&lt;br&gt;
'''lobby.JoinFailed''' = function(string chan_name, string reason)&lt;br&gt;
'''lobby.ChannelMember''' = function(string chan_name, string user_name, bool joined)&lt;br&gt;
'''lobby.ChannelMemberLeft''' = function(string chan_name, string user_name, string reason)&lt;br&gt;
'''lobby.ChannelMemberKicked''' = function(string chan_name, string user_name, string reason)&lt;br&gt;
'''lobby.ChannelTopic''' = function(string chan_name, string author, int time, string topic)&lt;br&gt;
'''lobby.ChannelMessage''' = function(string chan_name, string text)&lt;br&gt;
'''lobby.Said''' = function(string chan_name, string user_name, string text)&lt;br&gt;
'''lobby.SaidEx''' = function(string chan_name, string user_name, string text)&lt;br&gt;
'''lobby.SaidPrivate''' = function(string user_name, string text)&lt;br&gt;
'''lobby.Disconnected''' = function()&lt;br&gt;
'''lobby.NetworkError''' = function(string message)&lt;br&gt;

[[category: Lua]]

&lt;references /&gt;</text>
      <sha1>m8w61u63l32cdxndlcgpprujzv3mn5m</sha1>
    </revision>
  </page>
  <page>
    <title>Lua MathExtra</title>
    <ns>0</ns>
    <id>3564</id>
    <revision>
      <id>31839</id>
      <parentid>29309</parentid>
      <timestamp>2022-08-01T11:42:27Z</timestamp>
      <contributor>
        <username>Beherith</username>
        <id>2441</id>
      </contributor>
      <comment>/* Additional math functions */  move to luacallout format</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2811">[[Engine_Development|Development]] &lt; [[Lua_Scripting|Lua Scripting]] &lt; {{FULLPAGENAME}}

= Additional math functions=

New in Engine Version 0.95 and up. 

{{LuaCallout
|prefix = math.
|name = clamp
|arg1 = {{type|number}} x
|arg2 = {{type|number}} min
|arg3 = {{type|number}} max
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 = 
|return = {{type|number}} clamped
|info = Returns x clamped to min and max boundaries.
}}

{{LuaCallout
|prefix = math.
|name = diag
|arg1 = {{type|number}} x1
|arg2 = {{type|number}} x2
|arg3 = {{type|number}} x3, ...
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 = 
|return = {{type|number}} diagonal
|info = Returns the length of the diagonal of an n-dimensional box (or the length of an n-component vector). Rather quick method that does not handle intermediate overflows/underflows nor is made for numerical stability.
}}

{{LuaCallout
|prefix = math.
|name = erf
|arg1 = {{type|number}} x
|arg2 =
|arg3 =
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 = 
|return = {{type|number}} erf
|info = Returns [http://en.wikipedia.org/wiki/Error_function erf](x).
}}

{{LuaCallout
|prefix = math.
|name = hypot
|arg1 = {{type|number}} x
|arg2 = {{type|number}} y
|arg3 =
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 = 
|return = {{type|number}} sqrt(x*x+y*y)
|info = Returns the length of hypotenuse of right angle triangle with sides x and y, equivalent to sqrt(x*x + y*y), but has better numerical stability and internally handles intermediate overflows/underflows, but is also slower.
}}

{{LuaCallout
|prefix = math.
|name = mix
|arg1 = {{type|number}} x
|arg2 = {{type|number}} y
|arg3 = {{type|number}} a
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 = 
|return = {{type|number}} (x+(y-x)*a)
|info = Returns linear interpolation between x and y with ratio a (x+(y-x)*a).
}}

{{LuaCallout
|prefix = math.
|name = round
|arg1 = {{type|number}} x
|arg2 = {{type|number}} decimals
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 = 
|return = {{type|number}} rounded
|info = Returns x rounded to n decimals, if n is omitted or &lt;=0, rounds to nearest integer. Note that Spring's Lua interpreter uses 32-bit floats for all numbers so max. precision is ~7 decimal digits.
}}

{{LuaCallout
|prefix = math.
|name = sgn
|arg1 = {{type|number}} x
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 = 
|return = {{type|number}} sign
|info = Returns 0 if x ==0, 1 if x &gt; 0, -1 if x &lt; 0 [http://en.wikipedia.org/wiki/Sign_function sgn](x).
}}

{{LuaCallout
|prefix = math.
|name = smoothstep
|arg1 = {{type|number}} edge0
|arg2 = {{type|number}} edge1
|arg3 = {{type|number}} x
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 = 
|return = {{type|number}} smoothstep
|info = Returns [http://en.wikipedia.org/wiki/Smoothstep smoothstep](edge0, edge1, v). 
}}

[[category: Lua]]</text>
      <sha1>gicxrkdsw287b2btyog7pvpm986glz4</sha1>
    </revision>
  </page>
  <page>
    <title>Lua MoveCtrl</title>
    <ns>0</ns>
    <id>2424</id>
    <revision>
      <id>31614</id>
      <parentid>31263</parentid>
      <timestamp>2021-08-16T23:34:24Z</timestamp>
      <contributor>
        <username>Pepeampere</username>
        <id>2871</id>
      </contributor>
      <comment>/* MoveType-Controlling */ adding the repeated values to be listed in all commands docu</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5598">[[Engine_Development|Development]] &lt; [[Lua_Scripting|Lua Scripting]] &lt; {{FULLPAGENAME}}

= ScriptMoveType =
== Enable/Disable ==
'''Spring.MoveCtrl.Enable'''
  ( number unitID ) -&gt; nil

'''Spring.MoveCtrl.Disable'''
  ( number unitID ) -&gt; nil

== Tags ==
'''Spring.MoveCtrl.SetTag'''
  ( number unitID, number tag ) -&gt; nil

'''Spring.MoveCtrl.GetTag'''
  ( number unitID ) -&gt; nil

'''Spring.MoveCtrl.SetProgressState'''
  ( number unitID, number state | &quot;done&quot; | &quot;active&quot; | &quot;failed&quot; ) -&gt; nil

== Physics ==
'''Spring.MoveCtrl.SetGravity''' 
  ( number unitID, number gravity ) -&gt; nil
&lt;span class=note&gt;N.B. gravity here is a multiplier to Game.gravity&lt;/span&gt;

'''Spring.MoveCtrl.SetDrag'''
  ( number unitID, number drag ) -&gt; nil

'''Spring.MoveCtrl.SetGroundOffset'''
  ( number unitID, number offset ) -&gt; nil

'''Spring.MoveCtrl.SetWindFactor'''
  ( number unitID, number windFactor ) -&gt; nil

'''Spring.MoveCtrl.SetPhysics'''
  ( number unitID,
    number posX, number posY, number posZ,
    number velX, number velY, number velZ,
    number rotX, number rotY, number rotZ ) -&gt; nil 

'''Spring.MoveCtrl.SetPosition'''
  ( number unitID,
    number posX, number posY, number posZ ) -&gt; nil

'''Spring.MoveCtrl.SetVelocity'''
  ( number unitID,
    number velX, number velY, number velZ ) -&gt; nil

'''Spring.MoveCtrl.SetRelativeVelocity'''
  ( number unitID,
    number relvelX, number relvelY, number relvelZ ) -&gt; nil

'''Spring.MoveCtrl.SetRotation'''
  ( number unitID,
    number rotX, number rotY, number rotZ ) -&gt; nil

'''Spring.MoveCtrl.SetRotationVelocity'''
  ( number unitID,
    number rotVelX, number rotVelY, number rotVelZ ) -&gt; nil

'''Spring.MoveCtrl.SetRotationOffset'''
  ( number unitID,
    number rotOffX, number rotOffY, number rotOffZ ) -&gt; nil

'''Spring.MoveCtrl.SetHeading'''
  ( number unitID, number heading ) -&gt; nil

== Options ==
'''Spring.MoveCtrl.SetNoBlocking'''
  ( number unitID, boolean noblock ) -&gt; nil

'''Spring.MoveCtrl.SetLimits'''
  ( number unitID,
    number minX, number minY, number minZ,
    number maxX, number maxY, number maxZ ) -&gt; nil 

'''Spring.MoveCtrl.SetTrackSlope'''
  ( number unitID, boolean trackslope ) -&gt; nil

'''Spring.MoveCtrl.SetTrackGround'''
  ( number unitID, boolean noblock ) -&gt; nil

'''Spring.MoveCtrl.SetExtrapolate'''
  ( number unitID, boolean on ) -&gt; nil

'''Spring.MoveCtrl.SetShotStop''' &lt;span class=&quot;warning&quot;&gt;Currently a no-op&lt;/span&gt;
  ( number unitID, boolean shotstop ) -&gt; nil

'''Spring.MoveCtrl.SetSlopeStop''' &lt;span class=&quot;warning&quot;&gt;Currently a no-op&lt;/span&gt;
  ( number unitID, boolean slopestop ) -&gt; nil

'''Spring.MoveCtrl.SetCollideStop'''
  ( number unitID, boolean collidestop ) -&gt; nil
&lt;span class=note&gt;Enable both SetCollideStop and SetTrackGround to enable MoveCtrlNotify(unitID, unitDefID, unitTeam, data) call-in, data was supposed to indicate the type of notification but currently never has a value other than 1 (where 1 means &quot;unit hit the ground&quot;)&lt;/span&gt;

= MoveType-Controlling =

'''Spring.MoveCtrl.SetMoveDef''' {{new|94.0}}
  ( number unitID, number moveDefID | string moveDefName ) -&gt; boolean success
&lt;span class=note&gt;NOTE: string moveDefName needs to be in '''lowercase''', notwithstanding the fact that it may be in another case in the movedef table.
&lt;/span&gt;
 &lt;span class=note&gt;NOTE: all Set*MoveTypeData functions support the following number keys:
 maxSpeed
 maxWantedSpeed
 repairBelowHealth
 &lt;/span&gt;

'''Spring.MoveCtrl.SetAirMoveTypeData''' {{new|0.81}}
  ( number unitID, string key, value  ) -&gt; nil
  ( number unitID, table values ) -&gt; nil
  &lt;span class=note&gt;supported keys:
  numbers:
    maxSpeed
    maxWantedSpeed
    repairBelowHealth
    wantedHeight
    myGravity
    maxBank
    maxPitch
    turnRadius
    maxAcc
    maxAileron
    maxElevator
    maxRudder
    waterline
    attackSafetyDistance       -- since 100.0 : fighters abort dive toward target if within attackSafetyDistance and try to climb back to normal altitude while still moving toward target  
    maneuverBlockTime          -- since 104.0.1+(FIXME) : number of frames aircraft will try to keep flying straight past the target after firing 
  booleans:
    collide
    useSmoothMesh
  NOTE: not all keys and not all values may work correctly.
  [[SetMoveTypeDataExample|Example usage]]&lt;/span&gt;

'''Spring.MoveCtrl.SetGroundMoveTypeData''' {{new|0.81}}
  ( number unitID, string key, value  ) -&gt; nil
  ( number unitID, table values ) -&gt; nil
  &lt;span class=note&gt;supported keys:
  numbers:
    baseTurnRate
    turnRate
    accRate
    decRate
    maxSpeed
    maxWantedSpeed
    repairBelowHealth
    maxReverseDist
    maxReverseSpeed
    minReverseAngle
    requestedSpeed
    requestedTurnRate
    sqSkidSpeedMult
    waterline
  booleans:
    floatOnWater
    pushResistant
  NOTE: not all keys and not all values may work correctly.
  [[SetMoveTypeDataExample|Example usage]]&lt;/span&gt;
{{new|101.0}} {{var|maxReverseDist}} &amp; {{var|minReverseAngle}} keys

{{new|104.0}} {{var|sqSkidSpeedMult}}, {{var|pushResistant}} &amp; {{var|waterline}} keys

'''Spring.MoveCtrl.SetGunshipMoveTypeData''' {{new|0.81}}
  ( number unitID, string key, value  ) -&gt; nil
  ( number unitID, table values ) -&gt; nil
  &lt;span class=note&gt;supported keys:
  numbers:
    maxSpeed
    maxWantedSpeed
    repairBelowHealth
    wantedHeight
    turnRate
    accRate
    decRate
    altitudeRate
    currentBank
    currentPitch
    waterline
  booleans:
    collide
    useSmoothMesh
    bankingAllowed
    dontLand
    airStrafe
  NOTE: not all keys and not all values may work correctly.
  [[SetMoveTypeDataExample|Example usage]]&lt;/span&gt;

[[category: Lua]]</text>
      <sha1>sw79o0ak3s7tkdq4hghgtz60wlfg5dc</sha1>
    </revision>
  </page>
  <page>
    <title>Lua OpenGL Api</title>
    <ns>0</ns>
    <id>2401</id>
    <revision>
      <id>31648</id>
      <parentid>31647</parentid>
      <timestamp>2021-11-30T15:26:26Z</timestamp>
      <contributor>
        <username>Beherith</username>
        <id>2441</id>
      </contributor>
      <minor/>
      <comment>/* Textures */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="55959">[[Engine_Development|Development]] &lt; [[Lua_Scripting|Lua Scripting]] &lt; {{FULLPAGENAME}}

= Spring =

{{LuaCallout
|prefix = gl.
|name = GetSun
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|number}} sunPosX, {{type|number}} sunPosY, {{type|number}} sunPosZ
|info = 
}}

or

{{LuaCallout
|prefix = gl.
|name = GetSun
|arg1 = {{type|string}} &quot;pos&quot;
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|number}} sunPosX, {{type|number}} sunPosY, {{type|number}} sunPosZ
|info = 
}}

or

{{LuaCallout
|prefix = gl.
|name = GetSun
|arg1 = {{type|string}} &quot;shadowDensity&quot; {{bracket}}
|arg2 = {{type|string}} &quot;unit&quot; {{rbracket}}
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|number}} shadowDensity
|info = 
}}

or

{{LuaCallout
|prefix = gl.
|name = GetSun
|arg1 = {{type|string}} &quot;diffuse&quot; {{bracket}}
|arg2 = {{type|string}} &quot;unit&quot; {{rbracket}}
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} r, {{type|number}} g, {{type|number}} b
|info = 
}}

or

{{LuaCallout
|prefix = gl.
|name = GetSun
|arg1 = {{type|string}} &quot;ambient&quot; {{bracket}}
|arg2 = {{type|string}} &quot;unit&quot; {{rbracket}}
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} r, {{type|number}} g, {{type|number}} b
|info = 
}}

or

{{LuaCallout
|prefix = gl.
|name = GetSun
|arg1 = {{type|string}} &quot;specular&quot; {{bracket}}
|arg2 = {{type|string}} &quot;unit&quot; {{rbracket}}
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} r, {{type|number}} g, {{type|number}} b
|info = 
}}



{{LuaCallout
|prefix = gl.
|name = GetAtmosphere
|arg1 = {{type|string}} name 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|number}} r, {{type|number}} g, {{type|number}} b
|info = {{new|101.0}}&lt;br&gt;See [[Lua_UnsyncedCtrl#Sun|Spring.SetAtmosphere]] for details.
}}


{{LuaCallout
|prefix = gl.
|name = GetWaterRendering
|arg1 = {{type|string}} name 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} r, {{type|number}} g, {{type|number}} b {{pipe}} {{type|string}} texName {{pipe}} {{type|bool}} active 
|info = {{new|104.0}}&lt;br&gt;See [[Lua_UnsyncedCtrl#Developers|Spring.SetWaterParams]] for details.
}}



{{LuaCallout
|prefix = gl.
|name = GetMapRendering
|arg1 = {{type|string}} name 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} r, {{type|number}} g, {{type|number}} b {{pipe}} {{type|bool}} active 
|info = {{new|104.0}}&lt;br&gt;See [[Lua_UnsyncedCtrl#Developers|Spring.SetMapRenderingParams]] for details.
}}


{{LuaCallout
|prefix = gl.
|name = ConfigScreen
|arg1 = {{type|number}} screenWidth
|arg2 = {{type|number}} screenDistance
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} 
|info = Used for Unit LODs.
}}



{{LuaCallout
|prefix = gl.
|name = DrawMiniMap
|arg1 = {{type|bool}} transform = true
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} 
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = SlaveMiniMap
|arg1 = {{type|bool}} mode
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} 
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = ConfigMiniMap
|arg1 = {{type|number}} intPX
|arg2 = {{type|number}} intPY
|arg3 = {{type|number}} intSX
|arg4 = {{type|number}} intSY
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} 
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = GetViewSizes
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|number}} x, {{type|number}} y
|info = 
}}

= Matrices &amp; Viewport =

{{LuaCallout
|prefix = gl.
|name = Viewport
|arg1 = {{type|number}} x
|arg2 = {{type|number}} y
|arg3 = {{type|number}} w
|arg4 = {{type|number}} h
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = PushMatrix
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = PopMatrix
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = Translate
|arg1 = {{type|number}} x
|arg2 = {{type|number}} y
|arg3 = {{type|number}} z
|arg4 = 
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = Scale
|arg1 = {{type|number}} x
|arg2 = {{type|number}} y
|arg3 = {{type|number}} z
|arg4 = 
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = Scale
|arg1 = {{type|number}} angle
|arg2 = {{type|number}} x
|arg3 = {{type|number}} y
|arg4 = {{type|number}} z
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = 
}}
	

{{LuaCallout
|prefix = gl.
|name = Billboard
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = Use this to draw 2d primitives in DrawWorld().
}}
&lt;pre&gt;To render a 2D billboarded quad in the gameworld at world position x,y,z, you do the following (at a minimum; I am skipping blending / depthtesting) here:
  gl.PushMatrix()
  gl.Texture(read what you need here)
  gl.Translate(x,y,z)
  gl.Billboard()			
  gl.TexRect(x1,y1,x2,y2)
  gl.PopMatrix()&lt;/pre&gt;


{{LuaCallout
|prefix = gl.
|name = MatrixMode
|arg1 = {{type|number}} [[Lua_ConstGL#MatrixMode|mode]]
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = LoadIdentity
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = LoadMatrix
|arg1 = 16 {{type|numbers}} or a [https://github.com/spring/spring/blob/develop/rts/Lua/LuaOpenGLUtils.cpp#L60 matrix name]
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = MultMatrix
|arg1 = ???
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = ???
|info = 
}}



{{LuaCallout
|prefix = gl.
|name = Ortho
|arg1 = {{type|number}} left
|arg2 = {{type|number}} right
|arg3 = {{type|number}} bottom
|arg4 = {{type|number}} top
|arg5 = {{type|number}} near
|arg6 = {{type|number}} far 
|arg7 = 
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = Frustum
|arg1 = {{type|number}} left
|arg2 = {{type|number}} right
|arg3 = {{type|number}} bottom
|arg4 = {{type|number}} top
|arg5 = {{type|number}} near
|arg6 = {{type|number}} far 
|arg7 = 
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = PushPopMatrix
|arg1 = ???
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 =
|arg9 =
|return = ???
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = ClipPlane
|arg1 = {{type|number}} intPlane
|arg2 = {{type|bool}} enable {{pipe}} {{type|number}} A, {{type|number}} B, {{type|number}} C, {{type|number}} D
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = Note: intPlane can only be 1 or 2.
}}

= Clear =

{{LuaCallout
|prefix = gl.
|name = Clear
|arg1 = {{type|GL.DEPTH_BUFFER_BIT}} {{bracket}}
|arg2 = {{type|number}} cleardepth {{rbracket}}
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = 
}}

or

{{LuaCallout
|prefix = gl.
|name = Clear
|arg1 = {{type|GL.STENCIL_BUFFER_BIT}} {{bracket}}
|arg2 = {{type|number}} intClearStencil {{rbracket}}
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = 
}}

or

{{LuaCallout
|prefix = gl.
|name = Clear
|arg1 = {{type|GL.COLOR_BUFFER_BIT}} {{pipe}} {{type|GL.ACCUM_BUFFER_BIT}} {{bracket}}
|arg2 = {{type|number}} r
|arg3 = {{type|number}} g
|arg4 = {{type|number}} b
|arg5 = {{type|number}} a {{rbracket}}
|arg6 = 
|arg7 = 
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = SwapBuffers
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = {{new|104.0}}&lt;br&gt;Available only in LuaMenu, meant for frame-limited LuaMenu's that want identical content in both buffers.
}}

= ResetState/Matrices =

{{LuaCallout
|prefix = gl.
|name = ResetState
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = DON'T USE IT UNLESS YOU KNOW WHAT YOU ARE DOING! Each call-in has different default states, but this function resets all states to the states below no matter what!
}}
&lt;pre&gt;  ShadeModel = GL.SMOOTH
  Scissor    = false
  Texture    = false
  Lighting    = false,
  ColorMask  = true, true, true, true
  DepthMask  = false
  DepthTest  = false  (GL.LEQUAL)
  Culling    = false  (GL.BACK)
  LogicOp    = false  (GL.INVERT)
  AlphaTest  = false  (GL.GREATER, 0.5f)
  Blending   = true (GL.SRC_ALPHA, GL.ONE_MINUS_SRC_ALPHA)&lt;/pre&gt;


{{LuaCallout
|prefix = gl.
|name = ResetMatrices
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = 
}}
&lt;pre&gt;  Resets GL.TEXTURE matrix stack
  Resets GL.MODELVIEW matrix stack
  Resets GL.PROJECTION matrix stack&lt;/pre&gt;

= Draw Basics =

{{LuaCallout
|prefix = gl.
|name = BeginEnd
|arg1 = {{type|number}} [[Lua_ConstGL#Drawing_Primitives|GLType]]
|arg2 = {{type|function}} {{bracket}}
|arg3 = arg1
|arg4 = ... {{rbracket}}
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = Color
|arg1 = {{type|number}} r,  {{type|number}} g,  {{type|number}} b {{bracket}},  {{type|number}} a {{rbracket}} {{pipe}} {{type|table}} colors = { {{type|number}} r,  {{type|number}} g,  {{type|number}} b {{bracket}},  {{type|number}} a {{rbracket}} }
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = Vertex
|arg1 = {{type|table}} vertex = { {{type|number}} x,  {{type|number}} y,  {{bracket}},  {{type|number}} z {{bracket}}, {{type|number}} w {{rbracket}}{{rbracket}} }
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = 
}}

or

{{LuaCallout
|prefix = gl.
|name = Vertex
|arg1 = {{type|number}} x,  {{type|number}} y
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = 
}}

or

{{LuaCallout
|prefix = gl.
|name = Vertex
|arg1 = {{type|number}} x,  {{type|number}} y,  {{type|number}} z
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = 
}}

or

{{LuaCallout
|prefix = gl.
|name = Vertex
|arg1 = {{type|number}} x,  {{type|number}} y,  {{type|number}} z, {{type|number}} w
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = Normal
|arg1 = {{type|table}} normal = { {{type|number}} x,  {{type|number}} y,  {{type|number}} z } {{pipe}} {{type|number}} x,  {{type|number}} y,  {{type|number}} z
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = EdgeFlag
|arg1 = {{type|bool}} enable
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = Rect
|arg1 = {{type|number}} x1
|arg2 = {{type|number}} y1
|arg3 = {{type|number}} x2
|arg4 = {{type|number}} y2
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = TexRect
|arg1 = {{type|number}} x1
|arg2 = {{type|number}} y1
|arg3 = {{type|number}} x2
|arg4 = {{type|number}} y2 {{bracket}}
|arg5 = {{type|bool}} flip_s, {{type|bool}} flip_t {{pipe}} {{type|number}} s1, {{type|number}} t1, {{type|number}} s2, {{type|number}} t2 {{rbracket}}
|arg6 = 
|arg7 = 
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = Texture rect.
}}


{{LuaCallout
|prefix = gl.
|name = Shape
|arg1 = {{type|number}} [[Lua_ConstGL#Drawing_Primitives|GLtype]]
|arg2 = {{type|table}} elements
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = Elements contains:
}}
&lt;pre&gt;   elements = {
     [1] = { v | vertex   = { number x, number y, number z },           &lt;font color=&quot;#55ee99&quot;&gt;required&lt;/font&gt;
             n | normal   = { number x, number y, number z },           &lt;font color=&quot;#55ee99&quot;&gt;optional&lt;/font&gt;
             t | texcoord = { number x, number y },                     &lt;font color=&quot;#55ee99&quot;&gt;optional&lt;/font&gt;
             c | color    = { number r, number g, number b, number a }  &lt;font color=&quot;#55ee99&quot;&gt;optional&lt;/font&gt;
     },
     etc ...
   }&lt;/pre&gt;



{{LuaCallout
|prefix = gl.
|name = SecondaryColor
|arg1 = {{type|table}} color = { {{type|number}} r, {{type|number}} g, {{type|number}} b } {{pipe}} {{type|number}} r, {{type|number}} g, {{type|number}} b
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = FogCoord
|arg1 = {{type|number}} value 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = 
}}

= Display Lists =
&lt;span class=note&gt;Display Lists save given vertex attributes in a static buffer, so the GPU can directly read them (without the CPU). Display Lists are a lot faster (10-60x) than standard drawing with glShape/glBeginEnd, so try to use them when ever you can. If you want to learn more about them, g00gle is your friend ;)&lt;/span&gt;

{{LuaCallout
|prefix = gl.
|name = CreateList
|arg1 = {{type|function}} {{bracket}}
|arg2 = arg1 {{bracket}}
|arg3 = arg2 ... {{rbracket}}{{rbracket}}
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 =
|arg9 =
|return = {{type|number}} listID
|info = 
}}



{{LuaCallout
|prefix = gl.
|name = CallList
|arg1 = {{type|number}} listID 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = DeleteList
|arg1 = {{type|number}} listID 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = 
}}

= Vertex Array Objects =
&lt;span class=note&gt; &lt;font color=darkblue&gt; Only available in &quot;develop&quot; branch of spring (the future 105.0+). This is conceptually similar and serve as modern OpenGL replacement to deprecated Display Lists. &lt;/font&gt; &lt;/span&gt;

{{LuaCallout
|prefix = gl.
|name = CreateVertexArray
|arg1 = {{type|number}} numElements
|arg2 = {{type|number}} numIndices {{bracket}}
|arg3 = {{type|bool}} persistentBuffer = false {{rbracket}}
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 =
|arg9 =
|return = {{type|number}} bufferID
|info = 
}}
&lt;pre&gt;See what elements and indices are here: http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-9-vbo-indexing/ 
numElements and numIndices define the size of for elements and indices respectively. if indices are not going to be used, then set numIndices to 0
Persistent buffers (persistentBuffer = true) are more efficient for dynamically/often updated geometry.&lt;/pre&gt;


{{LuaCallout
|prefix = gl.
|name = UpdateVertexArray
|arg1 = {{type|number}} bufferID
|arg2 = {{type|number}} elementPos
|arg3 = {{type|number}} indexPos
|arg4 = {{type|table}} tbl {{pipe}} {{type|function}} func 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 =
|arg9 =
|return = {{type|bool}} success
|info = 
}}
&lt;pre&gt;{elementPos, indexPos} define starting element in {element, index} VBO corresponding to 1st element of the supplied vertex data
4 elements table example:
  local verts = {
    p  = {0,0,0,1,  4,0,0,1,  4,4,0,1,  0,4,0,1},
    n  = {0,1,0  ,  0,1,0  ,  0,1,0  ,  0,1,0  },
    uv = {0,0,0,0,  1,0,0,0,  1,1,0,0,  0,1,0,0},
    c0 = {1,0,0,1,  0,1,0,1,  0,0,1,1,  1,1,1,0},
    i = {0, 1, 2, 2, 1, 3},            optional, use in case of indexed VBO
    c1 = {...} }

Alternatively Lua func can use gl.Vertex/gl.Color/gl.Normal/gl.TexCoord to define vertices, similarly how it used to be done in gl.BeginEnd.Note there is no function yet to define indices.&lt;/pre&gt;


{{LuaCallout
|prefix = gl.
|name = RenderVertexArray
|arg1 = {{type|number}} bufferID
|arg2 = {{type|number}} primType {{bracket}}
|arg3 = {{type|number}} firstIndex = 0
|arg4 = {{type|number}} count = numElements {{rbracket}}
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 =
|arg9 =
|return = {{type|bool}} success
|info = 
}}
&lt;pre&gt;primType can be GL.POINTS, GL.LINE_STRIP, GL.LINE_LOOP, GL.LINES, GL.LINE_STRIP_ADJACENCY, GL.LINES_ADJACENCY, GL.TRIANGLE_STRIP, GL.TRIANGLE_FAN, GL.TRIANGLES, GL.TRIANGLE_STRIP_ADJACENCY, GL.TRIANGLES_ADJACENCY and GL.PATCHES
firstIndex specifies the starting index in the enabled arrays.
count specifies the number of indices to be rendered.&lt;/pre&gt;


{{LuaCallout
|prefix = gl.
|name = DeleteVertexArray
|arg1 = {{type|number}} bufferID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 =
|arg9 =
|return = {{type|bool}} success
|info = Releases previously allocated VAO
}}

= Text =

{{LuaCallout
|prefix = gl.
|name = Text
|arg1 = {{type|string}} &quot;text&quot;
|arg2 = {{type|number}} x
|arg3 = {{type|number}} y
|arg4 = {{type|number}} size {{bracket}}
|arg5 = {{type|string}} &quot;options&quot; {{rbracket}}
|arg6 = 
|arg7 = 
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = 
}}
&lt;pre&gt;  options are:
    horizontal alignment:
       'c' = center
       'r' = right
    vertical alignment:
       'a' = ascender
       't' = top
       'v' = vertical center
       'x' = baseline
       'b' = bottom
       'd' = descender
    decorations:
       'o' = black outline
       'O' = white outline
       's' = shadow
    other:
       'n' = don't round vertex coords to nearest integer (font may get blurry)&lt;/pre&gt;


{{LuaCallout
|prefix = gl.
|name = GetTextWidth
|arg1 = {{type|string}} &quot;text&quot;
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 =
|arg9 =
|return = {{type|number}} width  
|info = Width in pixels, with a font size of 1.0.
}}


{{LuaCallout
|prefix = gl.
|name = GetTextHeight
|arg1 = {{type|string}} &quot;text&quot;
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} height, {{type|number}} descender, {{type|number}} numlines
|info = Height in pixels, with a font size of 1.0. Further descriptions here: [[GetTextHeight]]
}}


{{LuaCallout
|prefix = gl.
|name = BeginText
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = If you have multiple gl.Text calls, then you can bunch them between a gl.BeginText and gl.EndText to speedup the rendering.
}}


{{LuaCallout
|prefix = gl.
|name = EndText
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = 
}}

= Unit/Feature Draw Functions =

{{LuaCallout
|prefix = gl.
|name = Unit
|arg1 = {{type|number}} unitID {{bracket}}
|arg2 = {{type|bool}} rawdraw
|arg3 = {{type|number}} intLOD {{rbracket}}
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = Draws a unit - on default it uses LOD, with lod&lt;0 it is turned off, else it defines a specific level.
}}


{{LuaCallout
|prefix = gl.
|name = UnitRaw
|arg1 = {{type|number}} unitID {{bracket}}
|arg2 = {{type|bool}} rawdraw
|arg3 = {{type|number}} intLOD {{rbracket}}
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = Doesn't apply worldspace-&gt;unit transformation! only works if &lt;i&gt;rawdraw&lt;/i&gt; is true.
}}


{{LuaCallout
|prefix = gl.
|name = UnitShape
|arg1 = {{type|number}} unitDefID
|arg2 = {{type|number}} teamID
|arg3 = {{type|bool}} rawState
|arg4 = {{type|bool}} toScreen
|arg5 = {{type|bool}} opaque 
|arg6 = 
|arg7 = 
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = {{new|101.0}}&lt;br&gt;The three extra boolean arguments make it so that calling only these functions is enough to get correctly rendered models; pass in 'false' for the THIRD argument to get the fixed behavior, omit it or pass in 'true' [default] to render with your own custom state instead. The FOURTH argument should be 'true' if in DrawScreen and 'false' (default) if in DrawWorld; any transforms for these two functions *MUST* include a gl.LoadIdentity call when argument #3 is false (whether they are used in DrawWorld or in DrawScreen) the FIFTH argument determines whether the model is drawn opaque ('true' [default]) or with translucency ('false'); only has an effect when argument #3 is false.
}}


{{LuaCallout
|prefix = gl.
|name = UnitMultMatrix
|arg1 = {{type|number}} unitID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = world space -&gt; unit space
}}


{{LuaCallout
|prefix = gl.
|name = UnitPieceMultMatrix
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} intPiece
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = unit space -&gt; piece space
}}


{{LuaCallout
|prefix = gl.
|name = UnitPiece
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} intPiece
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = Draws the unit piece.
}}


{{LuaCallout
|prefix = gl.
|name = UnitPieceMatrix
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} intPiece
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = Use gl.UnitPieceMultMatrix instead!
}}


{{LuaCallout
|prefix = gl.
|name = Feature
|arg1 = {{type|number}} featureID 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = FeatureRaw
|arg1 = {{type|number}} featureID {{bracket}}
|arg2 = {{type|bool}} rawdraw
|arg3 = {{type|number}} intLOD {{rbracket}}
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = {{new|101.0}}
}}


{{LuaCallout
|prefix = gl.
|name = FeatureShape
|arg1 = {{type|number}} featureDefID
|arg2 = {{type|number}} teamID
|arg3 = {{type|bool}} custom
|arg4 = {{type|bool}} drawScreen
|arg5 = {{type|bool}} opaque  
|arg6 = 
|arg7 = 
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = FeatureMultMatrix
|arg1 = {{type|number}} featureID 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = {{new|101.0}}&lt;br&gt;world space -&gt; feature space
}}


{{LuaCallout
|prefix = gl.
|name = FeaturePieceMultMatrix
|arg1 = {{type|number}} featureID 
|arg2 = {{type|number}} intPiece
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = {{new|101.0}}&lt;br&gt;feature space -&gt; piece space
}}


{{LuaCallout
|prefix = gl.
|name = FeaturePiece
|arg1 = {{type|number}} featureID 
|arg2 = {{type|number}} intPiece
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = {{new|101.0}}&lt;br&gt;Draws the Feature piece.
}}


{{LuaCallout
|prefix = gl.
|name = FeaturePieceMatrix
|arg1 = {{type|number}} featureID 
|arg2 = {{type|number}} intPiece
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = {{new|101.0}}&lt;br&gt;Use gl.FeaturePieceMultMatrix instead!
}}


{{LuaCallout
|prefix = gl.
|name = DrawListAtUnit
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} listID {{bracket}}
|arg3 = {{type|bool}} midPos
|arg4 = {{type|number}} scaleX, {{type|number}} scaleY, {{type|number}} scaleZ
|arg5 = {{type|number}} degrees
|arg6 = {{type|number}} rotX, {{type|number}} rotY, {{type|number}} rotZ {{rbracket}}
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = DrawFuncAtUnit
|arg1 = {{type|number}} unitID
|arg2 = {{type|bool}} midPos
|arg3 = {{type|function}} {{bracket}}, arg1, ... {{rbracket}}
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}}
|info = 
}}

= States (Blending,AlphaTest...) =

{{LuaCallout
|prefix = gl.
|name = Blending
|arg1 = {{type|bool}} enable {{pipe}} {{type|number}} [[Lua_ConstGL#BlendingFactorSrc|srcmode]]
|arg2 = {{type|number}} [[Lua_ConstGL#BlendingFactorDest|dstmode]]
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}}
|info = 
}}

or

{{LuaCallout
|prefix = gl.
|name = Blending
|arg1 = {{type|string}} mode
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}}
|info = Mode can be set to:
}}
&lt;pre&gt;&quot;add&quot;
 = GL.ONE, GL.ONE

 &quot;alpha_add&quot;
 = GL.SRC_ALPHA, GL.ONE

 &quot;alpha&quot;
 = GL.SRC_ALPHA, GL.ONE_MINUS_SRC_ALPHA

 &quot;reset&quot;
 = GL.SRC_ALPHA, GL.ONE_MINUS_SRC_ALPHA

 &quot;color&quot;
 = GL.SRC_COLOR, GL.ONE_MINUS_SRC_ALPHA

 &quot;modulate&quot;
 = GL.DST_COLOR, GL.ZERO

 &quot;disable&quot;
 = GL.SRC_ALPHA, GL.ONE_MINUS_SRC_ALPHA&lt;/pre&gt;


{{LuaCallout
|prefix = gl.
|name = BlendEquation
|arg1 = {{type|number}} mode
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = BlendFunc
|arg1 = {{type|number}} [[Lua_ConstGL#BlendingFactorSrc|srcmode]]
|arg2 = {{type|number}} [[Lua_ConstGL#BlendingFactorDest|dstmode]]
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = BlendEquationSeparate
|arg1 = {{type|number}} modeRGB
|arg2 = {{type|number}} modeAlpha 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}}
|info = Needs openGL2.0!
}}


{{LuaCallout
|prefix = gl.
|name = BlendFuncSeparate
|arg1 = {{type|number}} [[Lua_ConstGL#BlendingFactorSrc|srcRGB]]
|arg2 = {{type|number}} [Lua_ConstGL#BlendingFactorDest|dstRGB]]
|arg3 = {{type|number}} [[Lua_ConstGL#BlendingFactorSrc|srcAlpha]]
|arg4 = {{type|number}} [[Lua_ConstGL#BlendingFactorDest|dstAlpha]]
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}}
|info = Needs openGL2.0!
}}


{{LuaCallout
|prefix = gl.
|name = AlphaTest
|arg1 = {{type|bool}} enable {{pipe}} {{type|number}} [[Lua_ConstGL#AlphaFunction and  DepthFunction|func]]
|arg2 = {{type|number}} threshold 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = DepthTest
|arg1 = {{type|bool}} enable {{pipe}} {{type|number}} [[Lua_ConstGL#AlphaFunction and  DepthFunction|func]]
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = Culling
|arg1 = {{type|bool}} enable {{pipe}} {{type|number}} [[Lua_ConstGL#Culling|face]]
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = DepthClamp
|arg1 = {{type|bool}} enable
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}}
|info = Not always available, needs GL.NV_depth_clamp!
}}


{{LuaCallout
|prefix = gl.
|name = DepthMask
|arg1 = {{type|bool}} enable
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = ColorMask
|arg1 = {{type|bool}} masked 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}}
|info = 
}}

or

{{LuaCallout
|prefix = gl.
|name = ColorMask
|arg1 = {{type|bool}} r, {{type|bool}} g, {{type|bool}} b, {{type|bool}} a
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}}
|info = 
}}

{{LuaCallout
|prefix = gl.
|name = LogicOp
|arg1 = {{type|bool}} enable {{pipe}} {{type|number}} [[Lua_ConstGL#LogicOp|func]]
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = Fog
|arg1 = {{type|bool}} enable 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = Smoothing
|arg1 = {{type|bool}} enable {{pipe}} {{type|number}} point
|arg2 = {{type|bool}} enable {{pipe}} {{type|number}} line
|arg3 = {{type|bool}} enable {{pipe}} {{type|number}} polygon
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}}
|info = {{removed|104.0}}
}}


{{LuaCallout
|prefix = gl.
|name = EdgeFlag
|arg1 = {{type|bool}} enable 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = Scissor
|arg1 = {{type|bool}} enable 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}}
|info = 
}}

or

{{LuaCallout
|prefix = gl.
|name = Scissor
|arg1 = {{type|number}} intX, {{type|number}} intY, {{type|number}} intW, {{type|number}} intH
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = LineStipple
|arg1 = {{type|string}} any
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}}
|info = Use springs default line stipple.
}}

or

{{LuaCallout
|prefix = gl.
|name = LineStipple
|arg1 = {{type|bool}} enable 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}}
|info = 
}}

or

{{LuaCallout
|prefix = gl.
|name = LineStipple
|arg1 = {{type|number}} intFactor
|arg2 = {{type|number}} pattern
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = PolygonMode
|arg1 = {{type|number}} [[Lua_ConstGL#Culling|face]]
|arg2 = {{type|number}} [[Lua_ConstGL#PolygonMode|mode]]
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = PolygonOffset
|arg1 = {{type|bool}} enable {{pipe}} {{type|number}} factor
|arg2 = {{type|number}} units 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = PushAttrib
|arg1 = {{bracket}} {{type|number}} [[Lua_ConstGL#glPushAttrib.28.29_bits|attrib]] {{rbracket}}
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = PopAttrib
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}}
|info = 
}}

= Stencil =

{{LuaCallout
|prefix = gl.
|name = StencilTest
|arg1 = {{type|bool}} enable 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = StencilMask
|arg1 = {{type|number}} mask 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = StencilFunc
|arg1 = {{type|number}} func
|arg2 = {{type|number}} ref
|arg3 = {{type|number}} mask 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = StencilOp
|arg1 = {{type|number}} fail
|arg2 = {{type|number}} zfail
|arg3 = {{type|number}} zpass 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = StencilMaskSeparate
|arg1 = {{type|number}} [[Lua_ConstGL#Culling|face]]
|arg2 = {{type|number}} mask 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}}
|info = Needs OpenGL2.0!
}}


{{LuaCallout
|prefix = gl.
|name = StencilFuncSeparate
|arg1 = {{type|number}} [[Lua_ConstGL#Culling|face]]
|arg2 = {{type|number}} func
|arg3 = {{type|number}} ref
|arg4 = {{type|number}} mask 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}}
|info = Needs OpenGL2.0!
}}


{{LuaCallout
|prefix = gl.
|name = StencilOpSeparate
|arg1 = {{type|number}} [[Lua_ConstGL#Culling|face]]
|arg2 = {{type|number}} fail
|arg3 = {{type|number}} zfail
|arg4 = {{type|number}} zpass 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}}
|info = Needs OpenGL2.0!
}}

= LineWidth &amp; PointSize =

{{LuaCallout
|prefix = gl.
|name = LineWidth
|arg1 = {{type|number}} width 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = PointSize
|arg1 = {{type|number}} size 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}}
|info = Values != 1 can break severely on ATI cards, see http://springrts.com/mantis/view.php?id=2390
}}


{{LuaCallout
|prefix = gl.
|name = PointSprite
|arg1 = {{type|bool}} enable {{bracket}}
|arg2 = {{type|bool}} coord_replace
|arg3 = {{type|bool}} coord_origin_upper {{rbracket}}
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}}
|info = Needs OpenGL2.0!
}}


{{LuaCallout
|prefix = gl.
|name = PointParameter
|arg1 = {{type|number}} v1, {{type|number}} v2, {{type|number}} v3 {{bracket}}
|arg2 = {{type|number}} sizeMin
|arg3 = {{type|number}} sizeMax
|arg4 = {{type|number}} sizeFade {{rbracket}}
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}}
|info = Needs OpenGL2.0!
}}

= Textures =

{{LuaCallout
|prefix = gl.
|name = Texture
|arg1 = {{bracket}} {{type|number}} texNum, {{rbracket}} {{type|bool}} enable {{pipe}} {{type|string}} name
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|bool}} loaded
|info = This is the only call-out that is needed to load and draw any texture in a Lua script. All you have to do is pass it a valid path to a valid png and it will use that image for drawing any subsequent textured rectangles. This is shown in the last line of the following list of valid strings for the name parameter.
}}
&lt;span&gt;name may be:

#12
= unitDef 12 buildpic

%34:1
= unitDef 34 s3o tex2 (:0-&gt;tex1,:1-&gt;tex2)

%-102:0
= featureDef 102 s3o tex1

!56
= lua generated texture 56 (= return value of gl.CreateTexture)

$units
= 3do textureatlas tex1

$units1
= 3do textureatlas tex1

$units2
= 3do textureatlas tex2

$shadow
= shadowmap

$specular
= specular cube map &lt;font color=&quot;red&quot;&gt;(removed in the latest develop)&lt;/font&gt;

$reflection 
= reflection cube map &lt;font color=&quot;red&quot;&gt;(can be mipmaped starting from 104.0.1-714-ga29177f. Set CubeTexGenerateMipMaps=1 in settings)&lt;/font&gt;

$shading
= ground shading texture

$grass
= grass shading texture

$heightmap
= heightmap, the height in elmos is in the R channel (needs HeightMapTexture=1 set in spring config)

$minimap
= minimap texture

$map_reflection
= same as &quot;$reflection&quot; {{new|101.0}}

$sky_reflection
= defined for SSMF maps that have a skyReflectModTex {{new|101.0}}

$detail
= detail texture {{new|101.0}}

$normals
= auto generated normals texture, X normal component is in r,g and b channels, Z normal component is in the A channel. If you need Y you'll need to reconstruct it form X and Z. {{new|101.0}}

$ssmf_normals
= SSMF normals texture {{new|101.0}}

$ssmf_specular
= SSMF specular texture {{new|101.0}}

$ssmf_splat_distr
= SSMF splat distribution texture {{new|101.0}}

$ssmf_splat_detail
= SSMF splat detail texture {{new|101.0}}

$ssmf_splat_normals
= SSMF splat normals texture {{new|101.0}}, used as &quot;$ssmf_splat_normals&quot; or &quot;$ssmf_splat_normals:X&quot;, 'X' can be a value between 0 and 3, defaults to 0 if &quot;:X&quot; is omitted

$ssmf_emission
= SSMF emission texture {{new|101.0}}

$ssmf_parallax
= SSMF parallax texture {{new|101.0}}

$info
= currently active info texture (los, airlos, radar, jammer)&lt;br/&gt; Note that textures contain no data until user switches to their respective modes and non-active textures are not updated in the background, so will go stale

$info_losmap
= los texture (L-view)

$info_mtlmap
= metal map texture (F4-view)

$info_hgtmap
= height map texture (F1-view)

$info_blkmap
= blocking map texture (F2-view)

$map_gbuffer_normtex
= contains the smoothed normals buffer of the map in view in world space coordinates (note that to get true normal vectors from it, you must multiply the vector by 2 and subtract 1) {{new|95}}

$map_gbuffer_difftex
= contains the diffuse texture buffer of the map in view {{new|95}}

$map_gbuffer_spectex
= contains the specular textures of the map in view {{new|95}}

$map_gbuffer_emittex
= for emissive materials (bloom would be the canonical use) {{new|95}}

$map_gbuffer_misctex
= for arbitrary shader data {{new|95}}

$map_gbuffer_zvaltex
= contains the depth values (z-buffer) of the map in view. {{new|95}} &lt;br/&gt;To translate this to world position coordinates, use:

  '''No clip control / clipspace for depth is [-1,1]'''
  vec4 worldpos= viewProjectionInv * vec4(vec3(gl_TexCoord[0].st, 
  texture2D( map_gbuffer_zvaltex,gl_TexCoord[0].st ).x) * 2.0 - 1.0, 1.0);

  '''Default if clip control is supported / clipspace for depth is [0,1].'''
  vec4 worldpos= viewProjectionInv * vec4(gl_TexCoord[0].st * 2.0 - 1.0, 
  texture2D( map_gbuffer_zvaltex,gl_TexCoord[0].st ).x, 1.0);

  worldpos.xyz = worldpos.xyz / worldpos.w; 

$model_gbuffer_normtex
= contains the smoothed normals buffer of the models in view in world space coordinates (note that to get true normal vectors from it, you must multiply the vector by 2 and subtract 1)  {{new|95}}

$model_gbuffer_difftex
= contains the diffuse texture buffer of the models in view  {{new|95}}

$model_gbuffer_spectex
= contains the specular textures of the models in view  {{new|95}}

$model_gbuffer_emittex
= for emissive materials (bloom would be the canonical use)  {{new|95}}

$model_gbuffer_misctex
= for arbitrary shader data  {{new|95}}

$model_gbuffer_zvaltex
= contains the depth values (z-buffer) of the models in view.  {{new|95}}

${opt}:/LuaUI/images/image.png 
= load a texture from the VFS


   possible ${opt}'s are:
      'n' = nearest
      'l' = linear
      'a' = aniso
      'i' = invert
      'g' = greyed
      'c' = clamped
      'b' = border
      't%r,%g,%b' = tint
      'r%width,%height' = resize
   The above ${opt}'s are NOT available for .DDS textures! .dds will load faster than other image formats.

    example: &quot;:iac:/LuaUI/images/image.png&quot;
    example: &quot;:cr16,16:/LuaUI/images/image.png&quot;
    example2: &quot;:t1.0,0.5,0:/LuaUI/images/image.png&quot;  (orange tint)
&lt;/span&gt;


{{LuaCallout
|prefix = gl.
|name = CreateTexture
|arg1 = {{type|number}} intXSize
|arg2 = {{type|number}} intYSize {{bracket}}
|arg3 = {{type|table}} texProps {{rbracket}}
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|string}} texture
|info = texProps contains:
}}
&lt;pre&gt;texProps = {
    [target     = number,](like GL.TEXTURE_1D,GL.TEXTURE_2D,...)(Added support for GL_TEXTURE_2D_MULTISAMPLE in 104.0.1-1015-g8e36ef2 maintenance)
    [format     = number,]
    [min_filter = [[Lua_ConstGL#Texture_Filtering|number]],]
    [mag_filter = [[Lua_ConstGL#Texture_Filtering|number]],]
    [wrap_s     = [[Lua_ConstGL#Texture_Clamping|number]],]
    [wrap_t     = [[Lua_ConstGL#Texture_Clamping|number]],]
    [wrap_r     = [[Lua_ConstGL#Texture_Clamping|number]],]
    [aniso      = number,]
    [border     = boolean,]
    [fbo        = boolean,] (needs GLEW_EXT_framebuffer_object!)
    [fboDepth   = boolean,] (needs GLEW_EXT_framebuffer_object!)
    [samples    = number,] specify any number here and target = GL_TEXTURE_2D_MULTISAMPLE to create multisample texture (Added in 104.0.1-1015-g8e36ef2 maintenance)
  }&lt;/pre&gt;


{{LuaCallout
|prefix = gl.
|name = DeleteTexture
|arg1 = {{type|string}} texture
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|bool}} deleted
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = DeleteTextureFBO
|arg1 = {{type|string}} texture
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|bool}} deleted
|info = Needs GLEW_EXT_framebuffer_object!
}}


{{LuaCallout
|prefix = gl.
|name = TextureInfo
|arg1 = {{type|string}} texture
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|table}} texInfo
|info = texInfo contains:
}}
&lt;pre&gt; texInfo = {
      xsize = number,
      ysize = number,
      alpha = boolean, //not used yet
      type  = number,  //not used yet
    }

The format of the texture string is the same as in gl.Texture().&lt;/pre&gt;


{{LuaCallout
|prefix = gl.
|name = MultiTexCoord
|arg1 = {{type|number}} x {{bracket}}, {{type|number}} y {{bracket}}, {{type|number}} z {{bracket}}, {{type|number}} w {{rbracket}}{{rbracket}}{{rbracket}} {{pipe}} {{type|table}} texCoords = { {{type|number}} x {{bracket}}, {{type|number}} y {{bracket}}, {{type|number}} z {{bracket}}, {{type|number}} w {{rbracket}}{{rbracket}}{{rbracket}} }
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = TexEnv
|arg1 = {{type|number}} [[Lua_ConstGL#Texture_Environment|target]] 
|arg2 = {{type|number}} [[Lua_ConstGL#Texture_Environment|pname]]
|arg3 = {{type|number}} [[Lua_ConstGL#Texture_Environment|value]]
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}}
|info = 
}}

or

{{LuaCallout
|prefix = gl.
|name = TexEnv
|arg1 = {{type|number}} [[Lua_ConstGL#Texture_Environment|target]] 
|arg2 = {{type|number}} [[Lua_ConstGL#Texture_Environment|pname]]
|arg3 = {{type|number}} var1
|arg4 = {{type|number}} var2
|arg5 = {{type|number}} var3
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = MultiTexEnv
|arg1 = {{type|number}} texNum
|arg2 = {{type|number}} [[Lua_ConstGL#Texture_Environment|target]] 
|arg3 = {{type|number}} [[Lua_ConstGL#Texture_Environment|pname]]
|arg4 = {{type|number}} [[Lua_ConstGL#Texture_Environment|value]]
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}}
|info = 
}}

or

{{LuaCallout
|prefix = gl.
|name = MultiTexEnv
|arg1 = {{type|number}} texNum
|arg2 = {{type|number}} [[Lua_ConstGL#Texture_Environment|target]] 
|arg3 = {{type|number}} [[Lua_ConstGL#Texture_Environment|pname]]
|arg4 = {{type|number}} var1
|arg5 = {{type|number}} var2
|arg6 = {{type|number}} var3
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = TexGen
|arg1 = {{type|number}} [[Lua_ConstGL#Texture_Generation|target]]
|arg2 = {{type|bool}} state 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}}
|info = 
}}

or

{{LuaCallout
|prefix = gl.
|name = TexGen
|arg1 = {{type|number}} [[Lua_ConstGL#Texture_Generation|target]]
|arg2 = {{type|number}} [[Lua_ConstGL#Texture_Environment|pname]]
|arg3 = {{type|number}} [[Lua_ConstGL#Texture_Environment|value]]
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}}
|info = 
}}

or

{{LuaCallout
|prefix = gl.
|name = TexGen
|arg1 = {{type|number}} [[Lua_ConstGL#Texture_Generation|target]]
|arg2 = {{type|bool}} [[Lua_ConstGL#Texture_Environment|pname]]
|arg3 = {{type|number}} var1
|arg4 = {{type|number}} var2
|arg5 = {{type|number}} var3
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = MultiTexGen
|arg1 = {{type|number}} intTexNum
|arg2 = {{type|number}} [[Lua_ConstGL#Texture_Generation|target]]
|arg3 = {{type|bool}} state
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}}
|info = 
}}

or

{{LuaCallout
|prefix = gl.
|name = MultiTexGen
|arg1 = {{type|number}} intTexNum
|arg2 = {{type|number}} [[Lua_ConstGL#Texture_Generation|target]]
|arg3 = {{type|number}} [[Lua_ConstGL#Texture_Environment|pname]]
|arg4 = {{type|number}} [[Lua_ConstGL#Texture_Environment|value]]
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}}
|info = 
}}

or

{{LuaCallout
|prefix = gl.
|name = MultiTexGen
|arg1 = {{type|number}} intTexNum
|arg2 = {{type|number}} [[Lua_ConstGL#Texture_Generation|target]]
|arg3 = {{type|number}} [[Lua_ConstGL#Texture_Environment|pname]]
|arg4 = {{type|number}} var1
|arg5 = {{type|number}} var2
|arg6 = {{type|number}} var3
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = CopyToTexture
|arg1 = {{type|string}} texture
|arg2 = {{type|number}} intXOff
|arg3 = {{type|number}} intYOff
|arg4 = {{type|number}} intX
|arg5 = {{type|number}} intY
|arg6 = {{type|number}} intW
|arg7 = {{type|number}} intH {{bracket}}
|arg8 = {{type|number}} target
|arg9 = {{type|number}} level {{rbracket}}
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = RenderToTexture
|arg1 = {{type|string}} fbotexture
|arg2 = {{type|function}} lua_func 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = Needs GLEW_EXT_framebuffer_object!
}}

     
{{LuaCallout
|prefix = gl.
|name = GenerateMipmap
|arg1 = {{type|string}} texture 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|bool}} created
|info = Needs glGenerateMipmapEXT!
}}
&lt;pre&gt;The following are primarily intended to be used in conjunction with
     gl.{Unit,Feature}(objID, ..., raw=true)
     gl.{Unit,Feature}Shape(defID, ..., raw=true)
and apply a model's default textures; easier than gl.Texture(&quot;$%...&quot;)&lt;/pre&gt;


{{LuaCallout
|prefix = gl.
|name = UnitTextures
|arg1 = {{type|number}} unitID
|arg2 = {{type|bool}} enable
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|bool}} enabled
|info =
}}


{{LuaCallout
|prefix = gl.
|name = UnitShapeTextures
|arg1 = {{type|number}} unitDefID
|arg2 = {{type|bool}} enable
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|bool}} enabled
|info =
}}


{{LuaCallout
|prefix = gl.
|name = FeatureTextures
|arg1 = {{type|number}} featureID
|arg2 = {{type|bool}} enable
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|bool}} enabled
|info =
}}


{{LuaCallout
|prefix = gl.
|name = FeatureShapeTextures
|arg1 = {{type|number}} featureDefID
|arg2 = {{type|bool}} enable
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|bool}} enabled
|info =
}}

= PixelReadback =

{{LuaCallout
|prefix = gl.
|name = SaveImage
|arg1 = {{type|number}} x
|arg2 = {{type|number}} y
|arg3 = {{type|number}} w
|arg4 = {{type|number}} h
|arg5 = {{type|string}} filename {{bracket}}
|arg6 = {{type|table}} imgProps = { alpha={{type|bool}}, yflip={{type|bool}}, grayscale16bit={{type|bool}}, readbuffer={{type|number}} } {{rbracket}}
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} {{pipe}} {{type|bool}} success
|info = grayscale16bit is {{new|99.0}} and allows to save single color 16bit PNG&lt;br&gt;
readbuffer is {{new|104+}} and allows to choose the attachment of MRT FBO, use GL_COLOR_ATTACHMENT0_EXT and further as index
}}


{{LuaCallout
|prefix = gl.
|name = ReadPixels
|arg1 = {{type|number}} x
|arg2 = {{type|number}} y
|arg3 = {{type|number}} w
|arg4 = {{type|number}} h {{bracket}}
|arg5 = {{type|number}} format = GL.RGBA {{rbracket}}
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} {{pipe}} {{type|number}} r {{bracket}}, g {{bracket}}, b {{bracket}}, a {rbracket}}{rbracket}}{rbracket}} {{pipe}} {{type|table}} readPixels = { { { 1 = {{type|number}} r, 2 = {{type|number}} g, 3 = {{type|number}} b, 4 = {{type|number}} a}, ... }, ... }
|info = This reads back pixels from the final rendered screen. E.g. you can make a screenshot by grabbing the whole view.
}}

= Lights =

{{LuaCallout
|prefix = gl.
|name = Lighting
|arg1 = {{type|bool}} enable 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} 
|info =
}}


{{LuaCallout
|prefix = gl.
|name = ShadeModel
|arg1 = {{type|number}} [[Lua_ConstGL#ShadeModel|mode]]
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} 
|info =
}}


{{LuaCallout
|prefix = gl.
|name = Light
|arg1 = {{type|number}} intLight
|arg2 = {{type|bool}} enable 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} 
|info =
}}

or

{{LuaCallout
|prefix = gl.
|name = Light
|arg1 = {{type|number}} intLight
|arg2 = {{type|number}} [[Lua_ConstGL#Light_Specification|pname]]
|arg3 = {{type|number}} param 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} 
|info =
}}

or

{{LuaCallout
|prefix = gl.
|name = Light
|arg1 = {{type|number}} intLight
|arg2 = {{type|number}} [[Lua_ConstGL#Light_Specification|pname]]
|arg3 = {{type|number}} param1
|arg4 = {{type|number}} param2
|arg5 = {{type|number}} param3
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} 
|info =
}}


{{LuaCallout
|prefix = gl.
|name = Material
|arg1 = {{type|table}} material
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} 
|info = material contains:
}}
&lt;pre&gt;material = {
    ambient   = {number r, number g, number b[, number a]},
    diffuse   = {number r, number g, number b[, number a]},
    ambidiff  = {number r, number g, number b[, number a]},
    emission  = {number r, number g, number b[, number a]},
    specular  = {number r, number g, number b[, number a]},
    shininess = number specularExponent
  }&lt;/pre&gt;

= Hardware relevant =

{{LuaCallout
|prefix = gl.
|name = HasExtension
|arg1 = {{type|string}} extname 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|bool}} hasExtension
|info =
}}



{{LuaCallout
|prefix = gl.
|name = GetNumber
|arg1 = {{type|number}} ext
|arg2 = {{type|number}} intCount
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|number}} number1 {{bracket}}, {{type|number}} number2, {{type|number}} number3, ... #count {{rbracket}}
|info =
}}


{{LuaCallout
|prefix = gl.
|name = GetString
|arg1 = {{type|number}} ext
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|string}} extString
|info =
}}

= DrawGroundPrimitives =

{{LuaCallout
|prefix = gl.
|name = DrawGroundCircle
|arg1 = {{type|number}} x
|arg2 = {{type|number}} y
|arg3 = {{type|number}} z
|arg4 = {{type|number}} radius
|arg5 = {{type|number}} divs {{bracket}}
|arg6 = {{type|number}} slope {{rbracket}}
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = Note: Number divs is the number of sides the circle will have. The higher the smoother the circle (and more GPU intensive).
}}


{{LuaCallout
|prefix = gl.
|name = DrawGroundQuad
|arg1 = {{type|number}} x1
|arg2 = {{type|number}} z1
|arg3 = {{type|number}} x2
|arg4 = {{type|number}} z2 {{bracket}}
|arg5 = {{type|bool}} useNorm {{bracket}}
|arg6 = {{type|number}} tu1, {{type|number}} tv1
|arg7 = {{type|number}} tu2, {{type|number}} tv2 {{rbracket}} {{pipe}} {{bracket}} {{type|bool}} useTextureCoord {{rbracket}} {{rbracket}}
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = Note: x1, z1, x2 &amp; z2 are rounded, so don't use it for very small or moving objects. x and z correspond to the coordinates displayed by the tooltip.&lt;br&gt;Also note: useNorm does nothing!
}}

= Queries =

{{LuaCallout
|prefix = gl.
|name = CreateQuery
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} {{pipe}} {{type|userdata}} query
|info = Needs &gt;=OpengGL2.0!
}}


{{LuaCallout
|prefix = gl.
|name = DeleteQuery
|arg1 = {{type|userdata}} query
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = Needs &gt;=OpengGL2.0!
}}


{{LuaCallout
|prefix = gl.
|name = RunQuery
|arg1 = {{type|userdata}} query
|arg2 = {{type|function}} func
|arg3 = {{type|arg1}}
|arg4 = {{type|arg2}}
|arg5 = ...
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = Needs &gt;=OpengGL2.0!
}}


{{LuaCallout
|prefix = gl.
|name = GetQuery
|arg1 = {{type|userdata}} query
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} {{pipe}} {{type|number}} renderedFragments
|info = 
}}

= Extended =

{{LuaCallout
|prefix = gl.
|name = ActiveTexture
|arg1 = {{type|number}} intTexNum
|arg2 = {{type|function}} func {{bracket}}
|arg3 = {{type|arg1}}
|arg4 = ... {{rbracket}}
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = GetGlobalTexNames
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|table}} texNames = { {{bracket|1}} = {{type|string}} texture, etc ...  }
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = GetGlobalTexCoords
|arg1 = {{type|string}} 3doTextureName 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|number}} xstart, {{type|number}} ystart, {{type|number}} xend, {{type|number}} yend
|info = Gets the texcoord of a 3do texture in the 3do texture atlas.
}}


{{LuaCallout
|prefix = gl.
|name = UnsafeState
|arg1 = {{type|number}} state  {{bracket}}
|arg2 = {{type|bool}} disable_state {{rbracket}}
|arg3 = {{type|bool}} func
|arg4 = {{type|arg1}}
|arg5 = {{type|arg2}}
|arg6 = ...
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = Calls glEnable(state) or glDisable(state) (if disable_state==true) and&lt;br&gt;then calls the lua_function and afterwards reverts the state.
}}


{{LuaCallout
|prefix = gl.
|name = GetShadowMapParams
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|number}} xmid, {{type|number}} ymid, {{type|number}} p17, {{type|number}} p18
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = GetMatrixData
|arg1 = GL.PROJECTION {{bracket}}
|arg2 = {{type|number}} intI
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} {{pipe}} {{type|number}} number1, etc... {{pipe}} {{type|number}} Matrix{{bracket|i}}
|info = 
}}

or

{{LuaCallout
|prefix = gl.
|name = GetMatrixData
|arg1 = GL.MODELVIEW {{bracket}}
|arg2 = {{type|number}} intI
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} {{pipe}} {{type|number}} number1, etc... {{pipe}} {{type|number}} Matrix{{bracket|i}}
|info = 
}}

or

{{LuaCallout
|prefix = gl.
|name = GetMatrixData
|arg1 = GL.TEXTURE {{bracket}}
|arg2 = {{type|number}} intI
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} {{pipe}} {{type|number}} number1, etc... {{pipe}} {{type|number}} Matrix{{bracket|i}}
|info = 
}}

or

{{LuaCallout
|prefix = gl.
|name = GetMatrixData
|arg1 = {{type|string}} &quot;shadow&quot;
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} {{pipe}} {{type|number}} number1, etc...
|info = 
}}

or

{{LuaCallout
|prefix = gl.
|name = GetMatrixData
|arg1 = {{type|string}} &quot;camera&quot;
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} {{pipe}} {{type|number}} number1, etc...
|info = 
}}
{{LuaCallout
|prefix = gl.
|name = GetMatrixData
|arg1 = {{type|string}} &quot;caminv&quot;
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} {{pipe}} {{type|number}} number1, etc...
|info = 
}}

or

{{LuaCallout
|prefix = gl.
|name = GetMatrixData
|arg1 = {{type|string}} &quot;camprj&quot;
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} {{pipe}} {{type|number}} number1, etc...
|info = 
}}

or

{{LuaCallout
|prefix = gl.
|name = GetMatrixData
|arg1 = {{type|string}} &quot;billboard&quot;
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} {{pipe}} {{type|number}} number1, etc...
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = Flush
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} 
|info = 
}}


{{LuaCallout
|prefix = gl.
|name = Finish
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} 
|info = 
}}

= Shaders (GLSL) =
  [[Lua_GLSL_Api]]

[[category: Lua]]</text>
      <sha1>hufahd9ff4lx65ov9tm2w2rp828rno1</sha1>
    </revision>
  </page>
  <page>
    <title>Lua PathFinder</title>
    <ns>0</ns>
    <id>2469</id>
    <revision>
      <id>30557</id>
      <parentid>24396</parentid>
      <timestamp>2017-12-22T11:46:25Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>/* PathNodeCosts */ 104.0 - implement Path.GetPathNodeCosts</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2863">[[Engine_Development|Development]] &lt; [[Lua_Scripting|Lua Scripting]] &lt; {{FULLPAGENAME}}

== PathFinder ==
'''Path.RequestPath'''
  ( string &quot;MoveTypeName&quot; | number moveID,
    number start_x, number start_y, number start_z,
    number end_x,   number end_y,   number end_z
    [, number radius = 8 ]
  ) -&gt; nil | pathObject path &lt;font color=&quot;#55ee99&quot;&gt;(see below)&lt;/font&gt;

== Path UserData Object ==
'''Path:GetPathWayPoints'''
  ( ) -&gt; nil | {
     [1] = { x,y,z }, ...
   },{
     [1] = startIdxOfDetailedPath,
     [2] = startIdxOfDetailedEstimatedPath1,
     [3] = startIdxOfDetailedEstimatedPath2,
   }
&lt;font color=&quot;#55ee99&quot;&gt;GetPathWayPoints() returns 2 tables:  1 table with the waypoints and 1 table with 3 indices (in the waypoint table) when a new (more lazy) pathfinding algorithm  begins.  So the waypoint table contains 3 different levels of details.&lt;/font&gt;

'''Path:Next'''
  ( number pos_x, number pos_y, number pos_z,
    [, number radius = 0 ]
  ) -&gt; nil | number x, number y, number z
&lt;font color=&quot;#55ee99&quot;&gt;Path:Next() returns the next waypoint in the path.  Unlike GetPathWayPoints() in which the resolution of the waypoints decreases, Next updates the path so the resolution will increase as it approaches the target.&lt;/font&gt;

Note that ''Path'' in ''Path:GetPathWayPoints'' and ''Path:Next'' is not part of the command, but rather a reference to the path Object created by ''Spring.RequestPath''.  It must match the path Object (case sensitive).


==Further Reading==

{{forumlink|topic=22953&amp;start=2|title=a forum thread}}


=PathNodeCosts=

The following functions allow manipulating the cost of nodes visited by the pathfinding algorithm through numbered additive overlays (arrays). Only one overlay can be active at once, but as many as desired may be created with '''InitPathNodeCostsArray'''. The active layer is set by '''SetPathNodeCosts'''.&lt;br/&gt;

&lt;span class=&quot;note&quot;&gt;NOTE: There are separate arrays for synced &amp; unsynced! - don't ask when the unsynced one is used ... -&lt;/span&gt;

&lt;span class=&quot;warning&quot;&gt;IMPORTANT: the size of a newly created layer can be arbitrary, but ideally should match the heightmap dimensions. '''GetPathNodeCost''' ALWAYS takes heightmap coordinates as arguments, which are internally converted to the resolution of the active node-overlay (if any).&lt;/span&gt;

'''Path.InitPathNodeCostsArray'''
  (number arrayID, number numNodesX, number numNodesZ) -&gt; boolean success
'''Path.FreePathNodeCostsArray'''
  (number arrayID) -&gt; boolean success

'''Path.SetPathNodeCosts'''
  (number arrayID) -&gt; boolean success
'''Path.GetPathNodeCosts''' {{new|104.0}}
  (number arrayID) -&gt; nil | table overlayCosts

'''Path.SetPathNodeCost'''
  (number arrayID, number nodeArrayIndex, number cost) -&gt; boolean success
'''Path.GetPathNodeCost'''
  (number arrayID, number heightMapX, number heightMapZ) -&gt; number nodeCost

[[category: Lua]]</text>
      <sha1>sc27xivygrcecxhl8wr9m148mztemtx</sha1>
    </revision>
  </page>
  <page>
    <title>Lua Performance</title>
    <ns>0</ns>
    <id>3092</id>
    <revision>
      <id>30790</id>
      <parentid>30408</parentid>
      <timestamp>2018-10-13T09:59:52Z</timestamp>
      <contributor>
        <username>Gajop</username>
        <id>2804</id>
      </contributor>
      <comment>remove ugly code blocks</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9349">=Overview=

This page is copied from the [http://trac.caspring.org/wiki/LuaPerformance CA wiki]. The widget used in the performance tests is available from the [http://trac.caspring.org/browser/trunk/mods/ca-sandbox/LuaUI/Widgets/performance.lua CA SVN].

=Other Considerations=

It is a well known axiom in computing that

&lt;blockquote&gt;&quot;We should forget about small efficiencies, say about 97% of the time: '''premature optimization is the root of all evil'''&quot;&lt;/blockquote&gt;

 - [http://en.wikipedia.org/wiki/Donald_Knuth Donald Knuth]

Lua coders should keep that in mind, and especially when visiting this page. Readability and maintainability are in most cases just as important, and optimizing code for every last ounce of performance can severely impact those qualities. On the other hand, some of the optimizations suggested have little bearing on readability and should generally always be applied, e.g. localization of API functions, or actually make for neater code e.g. the use of &lt;code&gt;or&lt;/code&gt; rather than a nil-check. Generally speaking, optimize only once you are sure that there is or will be a performance bottleneck.

=Performance Tests=

==TEST 1: Localize==

'''Code:'''

&lt;pre&gt;  local min = math.min&lt;/pre&gt;


'''Results:'''

:&lt;span class=warning&gt;Non-local: 0.719 (158%)&lt;/span&gt;
:&lt;span class=note&gt;Localized: 0.453 (100%)&lt;/span&gt;

'''Conclusion:'''

:Yes, we should localize all standard Lua and Spring API functions.


==TEST 2: Localized Class-Methods (with only 3 accesses!)==

'''Code 1:'''

&lt;pre&gt;  for i=1,1000000 do
    local x = class.test()
    local y = class.test()
    local z = class.test()
  end&lt;/pre&gt;


'''Code 2:'''

&lt;pre&gt;  for i=1,1000000 do
    local test = class.test
    local x = test()
    local y = test()
    local z = test()
  end&lt;/pre&gt;


'''Results:'''

:Normal way: 1.203 (102%)
:Localized: 1.172 (100%)

'''Conclusion:'''

:No, it isn't faster to localize a class method IN the function call.


==TEST 3: Unpack A Table==

'''Code 1:'''
&lt;pre&gt;  for i=1,1000000 do
    local x = min( a[1],a[2],a[3],a[4] )
  end&lt;/pre&gt;


'''Code 2:'''
&lt;pre&gt;  local unpack = unpack
  for i=1,1000000 do
    local x = min( unpack(a) )
  end&lt;/pre&gt;


'''Code 3:'''
&lt;pre&gt;  local function unpack4(a)
    return a[1],a[2],a[3],a[4]
  end
  for i=1,1000000 do
    local x = min( unpack4(a) )
  end&lt;/pre&gt;


'''Results:'''

:&lt;span class=note&gt;with [ ]: 0.485 (100%)&lt;/span&gt;
:&lt;span class=warning&gt;unpack(): 1.093 (225%)&lt;/span&gt;
:custom unpack4: 0.641 (131%) 

'''Conclusion:'''

:Don't use &lt;code&gt;unpack()&lt;/code&gt; in time critical code!


==TEST 4: Determine Maximum And Set It ('&gt;' vs. max)==

'''Code 1:'''
&lt;pre&gt;  local max = math.max
  for i=1,1000000 do
     x = max(random(cnt),x)
  end&lt;/pre&gt;


'''Code 2:'''
&lt;pre&gt;  for i=1,1000000 do
    local r = random(cnt)
    if (r&gt;x) then x = r end
  end&lt;/pre&gt;


'''Results:'''

:&lt;span class=warning&gt;math.max: 0.437 (156%)&lt;/span&gt;
:&lt;span class=note&gt;'if &gt; then': 0.282 (100%)&lt;/span&gt;

'''Conclusion:'''

:Don't use &lt;code&gt;math.[max|min]()&lt;/code&gt; in time critical code!


==TEST 5: Nil Checks ('if' vs. 'or')==

'''Code 1:'''
&lt;pre&gt;  for i=1,1000000 do
    local y,x
    if (random()&gt;0.5) then y=1 end 
    if (y==nil) then x=1 else x=y end
  end&lt;/pre&gt;


'''Code 2:'''
&lt;pre&gt;  for i=1,1000000 do
    local y
    if (random()&gt;0.5) then y=1 end 
    local x=y or 1
  end&lt;/pre&gt;


'''Results:'''

:&lt;span class=warning&gt;nil-check: 0.297 (106%)&lt;/span&gt;
:&lt;span class=note&gt;a=x or y: 0.281 (100%)&lt;/span&gt;

'''Conclusion:'''

:The &lt;code&gt;or&lt;/code&gt;-operator is faster than a nil-check. Use it!


==TEST 6: 'x^2' vs. 'x*x'==

'''Code 1:'''
&lt;pre&gt;  for i=1,1000000 do
     local y = x^2
  end&lt;/pre&gt;


'''Code 2:'''
&lt;pre&gt;  for i=1,1000000 do
     local y = x*x
  end&lt;/pre&gt;


'''Results:'''

:&lt;span class=warning&gt;x^2: 1.422 (110%)&lt;/span&gt;
:&lt;span class=note&gt;x*x: 1.297 (100%) &lt;/span&gt;

'''Conclusion:'''

:The second syntax is marginally faster


==TEST 7: Modulus Operators (math.mod vs. %)==

'''Code 1:'''
&lt;pre&gt;  local fmod = math.fmod
  for i=1,1000000 do
    if (fmod(i,30)&lt;1) then
      local x = 1
    end
  end&lt;/pre&gt;


'''Code 2:'''
&lt;pre&gt;  for i=1,1000000 do
    if ((i%30)&lt;1) then
      local x = 1
    end
  end&lt;/pre&gt;


'''Results:'''

:&lt;span class=warning&gt;math.mod: 0.281 (355%)&lt;/span&gt;
:&lt;span class=note&gt;%: 0.079 (100%) &lt;/span&gt;

'''Conclusion:'''

:Don't use &lt;code&gt;math.fmod()&lt;/code&gt; for positive numbers (for negative ones &lt;code&gt;%&lt;/code&gt; and &lt;code&gt;fmod()&lt;/code&gt; have different results!)


==TEST 8: Functions As Param For Other Functions==

'''Code 1:''' 
&lt;pre&gt;  local func1 = function(a,b,func) 
    return func(a+b) 
  end

  for i=1,1000000 do
    local x = func1(1,2,function(a) return a*2 end)
  end&lt;/pre&gt;


'''Code 2:'''
&lt;pre&gt;  local func1 = function(a,b,func) 
    return func(a+b) 
  end
  local func2 = function(a) 
    return a*2 
  end

  for i=1,1000000 do
    local x = func1(1,2,func2)
  end&lt;/pre&gt;


'''Results:'''

:&lt;span class=warning&gt;defined in function param: 3.890 (1144%)&lt;/span&gt;
:&lt;span class=note&gt;defined as local: 0.344 (100%) &lt;/span&gt;

'''Conclusion:'''

:REALLY, LOCALIZE YOUR FUNCTIONS ALWAYS BEFORE SENDING THEM INTO ANOTHER FUNCTION!!! i.e if you use gl.BeginEnd(), gl.CreateList(), ...!!!


==TEST 9: for-loops==

'''Code 1:'''
&lt;pre&gt;  for i=1,1000000 do
    for j,v in pairs(a) do
      x=v
    end
  end&lt;/pre&gt;


'''Code 2:'''
&lt;pre&gt;  for i=1,1000000 do
    for j,v in ipairs(a) do
      x=v
    end
  end&lt;/pre&gt;


'''Code 3:'''
&lt;pre&gt;  for i=1,1000000 do
    for i=1,100 do
      x=a[i]
    end
  end&lt;/pre&gt;


'''Code 4:'''
&lt;pre&gt;  for i=1,1000000 do
    for i=1,#a do
      x=a[i]
    end
  end&lt;/pre&gt;


'''Code 5:'''
&lt;pre&gt;  for i=1,1000000 do
    local length = #a
    for i=1,length do
      x=a[i]
    end
  end&lt;/pre&gt;


'''Results:'''

:pairs: 3.078 (217%)
:&lt;span class=warning&gt;ipairs: 3.344 (236%)&lt;/span&gt;
:&lt;span class=note&gt;for i=1,x do: 1.422 (100%)&lt;/span&gt;
:for i=1,#atable do 1.422 (100%)
:for i=1,atable_length do: 1.562 (110%) 

'''Conclusion:'''

:Don't use &lt;code&gt;pairs()&lt;/code&gt; or &lt;code&gt;ipairs()&lt;/code&gt; in critical code! Try to save the table-size somewhere and use &lt;code&gt;for i=1,x do&lt;/code&gt;!


==TEST 10: Array Access (with [ ]) vs. Object Access (with .method)==

'''Code 1:'''
&lt;pre&gt;  for i=1,1000000 do
    x = a[&quot;foo&quot;]
  end&lt;/pre&gt;


'''Code 2:'''
&lt;pre&gt;  for i=1,1000000 do
    x = a.foo
  end&lt;/pre&gt;


'''Results:'''

:atable[&quot;foo&quot;]: 1.125 (100%)
:atable.foo: 1.141 (101%) 

'''Conclusion:'''

:No difference.


==TEST 11: Buffered Table Item Access==

'''Code 1:'''
&lt;pre&gt;  for i=1,1000000 do
    for n=1,100 do
      a[n].x=a[n].x+1
    end
  end&lt;/pre&gt;


'''Code 2:'''
&lt;pre&gt;  for i=1,1000000 do
    for n=1,100 do
      local y = a[n]
      y.x=y.x+1
    end
  end&lt;/pre&gt;


'''Results:'''

:&lt;span class=warning&gt;'a[n].x=a[n].x+1': 1.453 (127%)&lt;/span&gt;
:&lt;span class=note&gt;'local y=a[n]; y.x=y.x+1': 1.140 (100%) &lt;/span&gt;

'''Conclusion:'''

:Buffering can speed up table item access.


==TEST 12: Adding Table Items (table.insert vs. [ ])==

'''Code 1:'''
&lt;pre&gt;  local tinsert = table.insert
  for i=1,1000000 do
    tinsert(a,i)
  end&lt;/pre&gt;


'''Code 2:'''
&lt;pre&gt;  for i=1,1000000 do
    a[i]=i
  end&lt;/pre&gt;


'''Code 3:'''
&lt;pre&gt;  for i=1,1000000 do
    a[#a+1]=i
  end&lt;/pre&gt;


'''Code 4:'''
&lt;pre&gt;  local count = 1
  for i=1,1000000 do
    d[count]=i
    count=count+1
  end&lt;/pre&gt;


'''Results:'''

:&lt;span class=warning&gt;table.insert: 1.250 (727%)&lt;/span&gt;
:&lt;span class=note&gt;a[i]: 0.172 (100%)&lt;/span&gt;
:a[#a+1]=x: 0.453 (263%)
:a[count++]=x: 0.203 (118%) 

'''Conclusion:'''
:Don't use &lt;code&gt;table.insert&lt;/code&gt;!!! Try to save the table-size somewhere and use &lt;code&gt;a[count+1]=x&lt;/code&gt;!



==TEST 12: Adding Table Items (mytable ={} vs. mytable={...})==

When you write {true, true, true} , Lua knows beforehand that the table will need three slots in its array part, so Lua creates the table with that size. Similarly, if you write
{x = 1, y = 2, z = 3}, Lua will create a table with four slots in its hash part.

As an example, the next loop runs in 2.0 seconds:


&lt;code&gt;for i = 1, 1000000 do

local a = {}

a[1] = 1; a[2] = 2; a[3] = 3

end
&lt;/code&gt;

If we create the tables with the right size, we reduce the run t
ime to 0.7 seconds:

&lt;code&gt;
for i = 1, 1000000 do

local a = {true, true, true}

a[1] = 1; a[2] = 2; a[3] = 3

end
&lt;/code&gt;

If you write something like {[1] = true, [2] = true, [3] = true}, however, Lua is not smart enough to detect that the given expressions (literal numbers, in this case) describe array indices, so it creates a table with four slots in its hash part, wasting memory and CPU time

[http://www.lua.org/gems/sample.pdf]

=Test 13=
Table initialisation with local members and static intialisation. 
&lt;pre&gt;
local x = os.clock()
T={}
print(string.format(&quot;start time: %.2f\n&quot;, os.clock() - x))
local CachedTable= {&quot;abc&quot;,&quot;def&quot;,&quot;ghk&quot;}
for i=1 , 10000000, 1 do
T[i] = CachedTable
end
print(string.format(&quot;elapsed time: %.2f\n&quot;, os.clock() - x))
&lt;/pre&gt;
&lt;pre&gt;
local x = os.clock()
A={}
print(string.format(&quot;start time: %.2f\n&quot;, os.clock() - x))
for i=1 , 10000000, 1 do
A[i] = {&quot;abc&quot;,&quot;def&quot;,&quot;ghk&quot;}
end
print(string.format(&quot;elapsed time: %.2f\n&quot;, os.clock() - x))
&lt;/pre&gt;
Result:
local table initializer = 100 %
static intializer = 500 %

Analysis: Lua sucks at identifying static initializers, do not use them, use local initalizations instead.

=Lua Garbage Collection=
Forum thread about {{forumlink|topic=31049|title= Lua Garbage collection info}} 

[[Category: Lua]]</text>
      <sha1>p4r1vr21xbigwscwoma1yoph1xxfp2c</sha1>
    </revision>
  </page>
  <page>
    <title>Lua SaveLoad</title>
    <ns>0</ns>
    <id>2844</id>
    <revision>
      <id>30330</id>
      <parentid>28675</parentid>
      <timestamp>2017-01-13T07:19:50Z</timestamp>
      <contributor>
        <username>Kingraptor</username>
        <id>2558</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5642">[[Engine_Development|Development]] &lt; [[Lua_Scripting|Lua Scripting]] &lt; {{FULLPAGENAME}}

= Lua Save/Load support =

== Motivation ==

Engine save/load has been broken/unstable for a very long time. I believe the major reasons for this were:

* In particular for loading too much special code paths were traversed, that were not used for anything else (e.g. creg_Serialize and creg_PostLoad functions in many classes);
* Each class was responsible for it's own saving and loading;
* The code for loading was spread out over many classes;
* Save/load using CREG was extremely slow.
* Savegames created using CREG were bound to be incompatible between different Spring versions because they relied inherently on the implementation details of every single class involved;
* The save/load system strived to be 100% perfect, saving every single detail.
* No clear way to save Lua states (without making Lua aware of it)

I realised we have a pretty decent and reasonably stable Lua interface. So why use this for save/load:

* The code has been tested in practice (it's used in widgets and gadgets);
* The interface is reasonably stable, so savegames can be compatible between different Spring versions;
* Not a single class needs special support for save/load, as save/load uses existing APIs.
* By simply using the standard call-in mechanism any gadgets can save some state if that is desired. The save/load gadget does not need to get special treatment at all.

[http://springrts.com/phpbb/viewtopic.php?f=23&amp;t=21805 Argh] and [http://springrts.com/phpbb/viewtopic.php?f=23&amp;t=21836 zwzsg] had this idea too and implement save/load using Lua only. This is a little bit hacky and it is slow when saving large amounts of data such as e.g. the modified terrain heightmap.

Hence Lua save/load brings engine support for Lua save/load :-)

== Idea ==

Instead of having the engine be responsible for serializing every bit of gamestate to disk, Lua save/load transfers most of the responsibility to the game (developer). The game developer can decide what objects and what properties are important to save, and ultimately a gadget could be created that could be drag 'n dropped in nearly any game. (Argh's and zwzsg's code would be useful for this.)

There are two new call-ins: Load and Save, that allow a Lua save/load system to seamlessly integrate with other interfaces of the engine (e.g. commandline, lobby). Load is called by the engine if it has been instructed to load a game. Save is called by the engine whenever the chat command '/save &lt;filename&gt;' or '/savegame' is given. Both get a userdatum as argument. Using the methods open, read and write on this userdatum the Lua code can read/write chunks of data.

At this moment existing code for reading and writing zip files has been re-used for Lua save/load, so savegames are simply renamed zip files (.ssf)

== Chat commands ==

* &lt;code&gt;/save [-y] &lt;filename&gt;&lt;/code&gt;: Write a savegame to &lt;filename&gt;. The file is placed in the 'Saves' folder and the '.ssf' extension is automatically added. If -y is given the file is overwritten if it already exists. Filename cannot have spaces.
* &lt;code&gt;/savegame&lt;/code&gt;: Write a savegame to 'Saves/QuickSave.ssf'.
* &lt;code&gt;/reloadgame&lt;/code&gt;: Reload the savegame that was loaded when the engine was started. Useful for testing. Note that no cleanup is performed by the engine; i.e. Lua code should erase all units from the battlefield.

== Lua API documentation ==

Lua save/load brings two new call-ins:

=== &lt;code&gt;'''Load''' ( zip ) -&gt; nil&lt;/code&gt; ===

This '''SYNCED''' call-in is called after GamePreload and before GameStart. The single argument is a userdatum respresenting a zip file from which the game is being loaded.

On this userdatum the following methods are defined:

* &lt;code&gt;zip:open(filename)&lt;/code&gt;: Opens a file within the zip file. Next calls to &lt;code&gt;zip:read&lt;/code&gt; will read from this file.
* &lt;code&gt;zip:read(...)&lt;/code&gt;: Reads data from the file that is currently open. Arguments and return values are similar to [http://www.lua.org/pil/21.1.html io.read], although only &quot;*all&quot; and ''num'' are supported. The special case io.read(0) should work.

Note that currently loading multiplayer games is not supported: the Load call-in is only called on the client loading the game.

=== &lt;code&gt;'''Save''' ( zip ) -&gt; nil&lt;/code&gt; ===

This '''UNSYNCED''' call-in is called when a chat command '/save' or '/savegame' is received. The single argument is a userdatum representing the savegame zip file.

On this userdatum the following methods are defined:

* &lt;code&gt;zip:open(filename)&lt;/code&gt;: Opens a new file within the zip file. Next calls to &lt;code&gt;zip:write&lt;/code&gt; will write to this file.
* &lt;code&gt;zip:write(...)&lt;/code&gt;: Writes data to the file that is currently open. Arguments are same as [http://www.lua.org/pil/21.1.html io.write].

Usually when this call-in is called you'd do something like this (pseudocode) in one savegame gadget:

  function gadget:Save(zip)
    zip:open(&quot;units.lua&quot;)
    for each unit do
      write some properties about the unit in zip, e.g. position, heading, health
    end
  end

Note that Spring writes files into this zip file too. Any files in the directory 'Spring' are reserved for use by the engine.

== Example gadgets ==
* Zero-K: [https://github.com/ZeroK-RTS/Zero-K/blob/master/LuaRules/Gadgets/api_saveload.lua api_saveload.lua]
** For an example of a gadget that interacts with this API gadget, see [https://github.com/ZeroK-RTS/Zero-K/blob/master/LuaRules/Gadgets/start_unit_setup.lua start_unit_setup.lua]
If you have made a gadget that implements this interface, please add a link.
[[Category: Lua]]</text>
      <sha1>f504g01g388od0uqq3siz7glcmvbnuz</sha1>
    </revision>
  </page>
  <page>
    <title>Lua Scream</title>
    <ns>0</ns>
    <id>2474</id>
    <revision>
      <id>18753</id>
      <parentid>17510</parentid>
      <timestamp>2010-03-13T10:50:59Z</timestamp>
      <contributor>
        <username>Koshi</username>
        <id>2371</id>
      </contributor>
      <comment>fix category</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="496">[[Engine_Development|Development]] &lt; [[Lua_Scripting|Lua Scripting]] &lt; {{FULLPAGENAME}}

== Scream UserData Object ==
'''Script.CreateScream'''
  ( ) -&gt; userdata scream

  &lt;font color=&quot;#55ee99&quot;&gt;This creates an userdata object, which calls a special
  user-defined function, when the object gets destroyed
  (-&gt;garbage collector).
  You use it like the follow:&lt;/font&gt;

  '''local myScream = Script.CreateScream()'''
  '''myScream.func  = function() Spring.Echo(&quot;AHHHHHH&quot;) end'''

[[category: Lua]]</text>
      <sha1>q25l8lt1f3put1pe5h2eoxhttzk2b7l</sha1>
    </revision>
  </page>
  <page>
    <title>Lua Scripting</title>
    <ns>0</ns>
    <id>3821</id>
    <redirect title="Lua:Main" />
    <revision>
      <id>30589</id>
      <timestamp>2017-12-26T00:21:05Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>Flozi moved page [[Lua Scripting]] to [[Lua:Main]]: consistency with Gamedev:Main and MapDev:Main and leaving redirect anyway</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="22">#REDIRECT [[Lua:Main]]</text>
      <sha1>la3hzfayft5ozj9lnxjvfqgok9cd2h1</sha1>
    </revision>
  </page>
  <page>
    <title>Lua Socket</title>
    <ns>0</ns>
    <id>3181</id>
    <revision>
      <id>28858</id>
      <parentid>28557</parentid>
      <timestamp>2014-10-11T16:50:53Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>/* config */ 98.0 - allow tcp connections by luasocket as default (udp is still restricted)</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3485">LuaSockets allow a widget to use tcp/udp sockets. With luasockets you can create a client or a server connecting to a server and transfering some data.

There are many possibilties what could be done with luasockets in spring, some ideas:

* webserver that shows all files in VFS
* telnet console, that allows control of spring
* statistics webpage
* ingame widget updater
* ingame news pages
* ...

==config==

All LuaSocket related config is readonly for LuaWidgets. They can be only changed through unitsync.

As default, socket access is restricted, as default no connections are allowed. To allow a connection / sending a packet, the destination has to the corresponding allow rule. For example, if a lua widget wants to connect to springrts.com at port 80, 
&lt;code&gt;&lt;pre&gt;TCPAllowConnect springrts.com:80&lt;/pre&gt;&lt;/code&gt;
has to be set.

Since spring 97.0 lobby.springrts.com:8200 is allowed as default.

Since Spring 98.0 all tcp connections are allowed by default (udp is still restricted).

Creating a server socket needs no config value to be set.


===possible config values===

{|
|-
|LuaSocketEnabled = 1
|Default is 1 means, all Socket functions are enabled, 0 disables access to sockets.
|-
|TCPAllowConnect
|allow TCP-connections to the listed hosts, for example: &quot;springrts.com:80 springfiles.com:80&quot; which allows luasockets to connect to springrts.com at port 80 and springfiles.com at port 80.
|-
|UDPAllowConnect
|see TCPAllowConnect
|-
|}

==example code==

* [https://github.com/spring/spring/blob/develop/cont/examples/Widgets/luasocket.lua luasocket.lua]
* [https://github.com/spring/spring/blob/develop/cont/examples/Widgets/luasocket_console.lua luasocket_console.lua]

==Notes / known issues / TODO ==

* only ipv4 is supported (could be solved by using unstable luasocket2: http://code.matthewwild.co.uk/luasocket2-hg/) or https://github.com/diegonehab/luasocket (seems to be the more official)
* dns resolving is blocking, solutions: worker thread or some lib:
** adns http://www.chiark.greenend.org.uk/~ian/adns/
** dns.c http://25thandclement.com/~william/projects/dns.c.html
** tadns http://adns.sourceforge.net/
** or a lua implementation? biggest problem would be to [http://stackoverflow.com/questions/2916675/programmatically-obtain-dns-servers-of-host find the local dns-server]
* most lua scripts from luasocket won't work as they are blocking! rewriting them non-blocking is required! (should be in most cases few work, as parsing stuff can be reused)
* config file should be better protected, see https://github.com/spring/spring/blob/develop/rts/System/Config/ConfigHandler.cpp#L289 + https://github.com/spring/spring/commit/948d6fb9d1c95b99b5cc7929cf3e0de0f9d6d93e maybe just locking the file is best?! see also http://springrts.com/mantis/view.php?id=2891 (private report)
* access to autohost interface / game host is denied
* If you get this error:
&lt;code&gt;&lt;pre&gt;
Error in Initialize(): [string &quot;LuaUI/Widgets/luasocket.lua&quot;]:65:
attempt to index upvalue 'socket' (a nil value)&lt;/pre&gt;&lt;/code&gt;
you maybe need to add to system.lua: socket = socket,

==documentation==

*http://w3.impa.br/~diego/software/luasocket/socket.html
*http://w3.impa.br/~diego/software/luasocket/tcp.html
*http://w3.impa.br/~diego/software/luasocket/udp.html

==links==
{{forumlink|topic=27526|title=lua sockets in spring}} - original thread
{{forumlink|topic=28071|title=Lua Lobby / Socket}} - some code pieces for connecting to spring lobby server &amp; protocol

[[Category: Lua]]</text>
      <sha1>tuohbn8yfl16v89cm843rg8n33s9fik</sha1>
    </revision>
  </page>
  <page>
    <title>Lua SyncedCtrl</title>
    <ns>0</ns>
    <id>2403</id>
    <revision>
      <id>31844</id>
      <parentid>31753</parentid>
      <timestamp>2022-09-17T14:15:58Z</timestamp>
      <contributor>
        <username>Beherith</username>
        <id>2441</id>
      </contributor>
      <comment>/* Unit Control */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="63654">[[Engine_Development|Development]] &lt; [[Lua_Scripting|Lua Scripting]] &lt; {{FULLPAGENAME}}

= Game End =

{{LuaCallout
|prefix = Spring.
|name = KillTeam
|arg1 = {{type|number}} teamID
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = {{new|83.0}}&lt;br&gt; Will declare a team to be dead ( no further orders can be assigned to such teams's units ), Gaia team cannot be killed.
}}


{{LuaCallout
|prefix = Spring.
|name = GameOver
|arg1 = {{type|number}} allyTeamID1
|arg2 = {{type|number}} allyTeamID2
|arg3 = ...
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = {{new|83.0}}&lt;br&gt; Will declare game over, a list of winning allyteams can be passed, if undecided ( like when dropped from the host ) it should be empty ( no winner ), in the case of a draw with multiple winners, all should be listed.
}}

= RulesParams =
&lt;span class=warning&gt;String values are new since 95.0. Attention: Numeric paramValues in quotes will be converted to number.&lt;/span&gt;

{{LuaCallout
|prefix = Spring.
|name = SetUnitRulesParam
|arg1 = {{type|number}} unitID
|arg2 = {{type|string}} paramName
|arg3 = {{type|number{{pipe}}string}} paramValue {{bracket}} 
|arg4 = {{type|table}} losAccess {{rbracket}}
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = &lt;span class=note&gt;Possible keys for the losAccess table are:
    `private` : only readable by the ally (default)
    `allied`  : readable by ally + ingame allied
    `inlos`   : readable if the unit is in LOS
    `inradar` : readable if the unit is in AirLOS
    `public`  : readable by all
   note: if one condition is fulfilled all beneath it are too (e.g. if an unit is in LOS it&lt;br/&gt;     can read params with `inradar=true` even if the param has `inlos=false`)
   note2: all GameRulesParam are public, TeamRulesParams can just be `private`,`allied`&lt;br/&gt;     and/or `public`
   note3: You can read RulesParams from '''any''' Lua enviroments! With those losAccess&lt;br/&gt;     policies you can limit their access.&lt;/span&gt;
}}


{{LuaCallout
|prefix = Spring.
|name = SetFeatureRulesParam
|arg1 = {{type|number}} featureID
|arg2 = {{type|string}} paramName
|arg3 = {{type|number{{pipe}}string}} paramValue {{bracket}} 
|arg4 = {{type|table}} losAccess {{rbracket}}
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = &lt;span class=warning&gt;New since 102.0.&lt;/span&gt;&lt;br&gt;See above for further documentation of losAccess.
}}


{{LuaCallout
|prefix = Spring.
|name = SetTeamRulesParam
|arg1 = {{type|number}} teamID
|arg2 = {{type|string}} paramName
|arg3 = {{type|number{{pipe}}string}} paramValue {{bracket}} 
|arg4 = {{type|table}} losAccess {{rbracket}}
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = See above for further documentation of losAccess.
}}



{{LuaCallout
|prefix = Spring.
|name = SetGameRulesParam
|arg1 = {{type|string}} paramName
|arg2 = {{type|number{{pipe}}string}} paramValue {{bracket}} 
|arg3 = {{type|table}} losAccess {{rbracket}}
|arg4 = 
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = See above for further documentation of losAccess.
}}

= Resources =

{{LuaCallout
|prefix = Spring.
|name = AddTeamResource
|arg1 = {{type|number}} teamID
|arg2 = {{type|string}} &quot;metal&quot; {{pipe}} &quot;energy&quot;
|arg3 = {{type|number}} amount
|arg4 = 
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = Adds metal or energy resources to the specified team.
}}


{{LuaCallout
|prefix = Spring.
|name = UseTeamResource
|arg1 = {{type|number}} teamID
|arg2 = {{type|string}} &quot;metal&quot; {{pipe}} &quot;energy&quot;
|arg3 = {{type|number}} amount {{pipe}} { metal = {{type|number}} amount, energy = {{type|number}} amount }
|arg4 = 
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|bool}} hadEnough
|info = Consumes metal and/or energy resources of the specified team.
}}


{{LuaCallout
|prefix = Spring.
|name = SetTeamResource
|arg1 = {{type|number}} teamID
|arg2 = {{type|string}} res
|arg3 = {{type|number}} amount
|arg4 = 
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = Possible values for res are:&lt;br&gt;&quot;m&quot;  = metal&lt;br&gt;&quot;e&quot;  = energy&lt;br&gt;&quot;ms&quot;  = metal storage&lt;br&gt;&quot;es&quot;  = energy storage&lt;br&gt;
}}


{{LuaCallout
|prefix = Spring.
|name = SetTeamShareLevel
|arg1 = {{type|number}} teamID
|arg2 = {{type|string}} &quot;metal&quot; {{pipe}} &quot;energy&quot;
|arg3 = {{type|number}} amount
|arg4 = 
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = Changes the resource amount for a team beyond which resources aren't stored but transferred to other allied teams if possible.
}}


{{LuaCallout
|prefix = Spring.
|name = ShareTeamResource
|arg1 = {{type|number}} teamID_src
|arg2 = {{type|number}} teamID_recv
|arg3 = {{type|string}} &quot;metal&quot; {{pipe}} &quot;energy&quot;
|arg4 = {{type|number}} amount
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = Transfers resources between two teams.
}}

= Teams =


{{LuaCallout
|prefix = Spring.
|name = SetAlly
|arg1 = {{type|number}} firstAllyTeamID
|arg2 = {{type|number}} secondAllyTeamID
|arg3 = {{type|bool}} ally
|arg4 = 
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = {{new|98.0}}&lt;br&gt;Changes the value of the (one-sided) alliance between: firstAllyTeamID -&gt; secondAllyTeamID.
}}


{{LuaCallout
|prefix = Spring.
|name = AssignPlayerToTeam
|arg1 = {{type|number}} playerID
|arg2 = {{type|number}} teamID
|arg3 = 
|arg4 = 
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = {{new|98.0}}&lt;br&gt;Assigns a player to a team.
}}



{{LuaCallout
|prefix = Spring.
|name = SetGlobalLos
|arg1 = {{type|number}} allyTeamID
|arg2 = {{type|bool}} globallos 
|arg3 = 
|arg4 = 
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = {{new|101.0}}&lt;br&gt;Changes access to global line of sight for a team and its allies.
}}

= Unit Handling =

{{LuaCallout
|prefix = Spring.
|name = CreateUnit
|arg1 = {{type|string}} &quot;defName&quot; {{pipe}} {{type|number }} unitDefID
|arg2 = {{type|number}} x
|arg3 = {{type|number}} y
|arg4 = {{type|number}} z
|arg5 = {{type|string}} &quot;facing&quot; {{pipe}} {{type|number }} facing 
|arg6 = {{type|number}} teamID {{bracket}}
|arg7 = {{type|bool}} build = false {{bracket}} 
|arg8 = {{type|bool}} flattenGround = true {{bracket}} 
|arg9 = {{type|number}} builderID {{rbracket}}{{rbracket}}{{rbracket}} 
|return = {{type|number}} unitID {{pipe}} {{type|nil}} (meaning unit was not created)
|info = Offmap positions are clamped! Use MoveCtrl to move to such positions.&lt;br&gt;Possible values for facing are:&lt;br&gt;&quot;south&quot; {{pipe}} &quot;s&quot; {{pipe}} 0&lt;br&gt;&quot;east&quot;  {{pipe}} &quot;e&quot; {{pipe}} 1&lt;br&gt;&quot;north&quot; {{pipe}} &quot;n&quot; {{pipe}} 2&lt;br&gt;&quot;west&quot;  {{pipe}} &quot;w&quot; {{pipe}} 3&lt;br&gt;&lt;br&gt;If build is true, the unit is created in &quot;being built&quot; state with buildProgress = 0&lt;br&gt;unitID and builderID are {{new|92.0}}, the former allowing to spawn a unit with a specific ID.
}}


{{LuaCallout
|prefix = Spring.
|name = DestroyUnit
|arg1 = {{type|number}} unitID {{bracket}} 
|arg2 = {{type|bool}} selfd = false {{bracket}} 
|arg3 = {{type|bool}} reclaimed = false {{bracket}} 
|arg4 = {{type|number}} attackerID {{rbracket}}{{rbracket}}{{rbracket}} 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = selfd := Makes the unit act like it self-destructed.&lt;br&gt;reclaimed := Don't show any DeathSequences, don't leave a wreckage. This does not give back the resources to the team!
}}



{{LuaCallout
|prefix = Spring.
|name = TransferUnit
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} newTeamID {{bracket}} 
|arg3 = {{type|bool}} given = true {{rbracket}}
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = If given=false, the unit is captured.
}}

== Unit Control ==

{{LuaCallout
|prefix = Spring.
|name = SetUnitCosts
|arg1 = {{type|number}} unitID 
|arg2 = { {{bracket}} buildTime = {{type|number}} amount {{rbracket}}
|arg3 = {{bracket}} metalCost = {{type|number}} amount  {{rbracket}}
|arg4 = {{bracket}} energyCost = {{type|number}} amount {{rbracket}} }
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = SetUnitTooltip
|arg1 = {{type|number}} unitID 
|arg2 = {{type|string}} &quot;tooltip&quot;
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}



{{LuaCallout
|prefix = Spring.
|name = SetUnitHealth
|arg1 = {{type|number}} unitID 
|arg2 = {{type|number}} health {{pipe}} { {{bracket}} health = {{type|number}} health {{rbracket}}
|arg3 = {{bracket}} capture  = {{type|number}} capture  {{rbracket}}
|arg4 = {{bracket}} paralyze = {{type|number}} paralyze {{rbracket}}
|arg5 = {{bracket}} build    = {{type|number}} build {{rbracket}} }
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = SetUnitMaxHealth
|arg1 = {{type|number}} unitID 
|arg2 = {{type|number}} maxHealth 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = AddUnitDamage
|arg1 = {{type|number}} unitID 
|arg2 = {{type|number}} damage {{bracket}}
|arg3 = {{type|number}} paralyze = 0 {{bracket}}
|arg4 = {{type|number}} attackerID = -1 {{bracket}}
|arg5 = {{type|number}} weaponID = -1 {{bracket}}
|arg6 = {{type|number}} impulse_x {{bracket}}
|arg7 = {{type|number}} impulse_y {{bracket}}
|arg8 = {{type|number}} impulse_z {{rbracket}}{{rbracket}}{{rbracket}}{{rbracket}}{{rbracket}}{{rbracket}}
|arg9 = 
|return = {{type|nil}}
|info = The number in the paralyze parameter equals to the paralyzetime in the WeaponDef.
}}


{{LuaCallout
|prefix = Spring.
|name = SetUnitStockpile
|arg1 = {{type|number}} unitID {{bracket}}
|arg2 = {{type|number}} stockpile {{bracket}}
|arg3 = {{type|number}} buildPercent {{rbracket}}{{rbracket}}
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = SetUnitExperience
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} experience 
|arg3 = {{type|number}} buildPercent
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = SetUnitFuel
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} fuel 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = {{removed|101.0}}
}}



{{LuaCallout
|prefix = Spring.
|name = SetUnitCrashing
|arg1 = {{type|number}} unitID
|arg2 = {{type|bool}} crashing 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|bool}} success
|info = {{new|83.0}}
}}


{{LuaCallout
|prefix = Spring.
|name = SetUnitLineage
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} teamID {{bracket}}
|arg3 = {{type|bool}} isRoot {{rbracket}}
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = {{removed|83.0}}
}}


{{LuaCallout
|prefix = Spring.
|name = SetUnitNeutral
|arg1 = {{type|number}} unitID
|arg2 = {{type|bool}} neutral
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = {{removed|83.0}}
}}


{{LuaCallout
|prefix = Spring.
|name = SetUnitTarget
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} x {{pipe}} {{type|nil}} 
|arg3 = {{type|number}} y 
|arg4 = {{type|number}} z {{bracket}}
|arg5 = {{type|bool}} dgun = false {{bracket}}
|arg6 = {{type|bool}} userTarget = false {{bracket}}
|arg7 = {{type|number}} weaponNum = -1 {{rbracket}}{{rbracket}}{{rbracket}}
|arg8 = 
|arg9 = 
|return = {{type|bool}} success
|info =
}}

or

{{LuaCallout
|prefix = Spring.
|name = SetUnitTarget
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} enemyUnitID {{pipe}} {{type|nil}} {{bracket}}
|arg3 = {{type|bool}} dgun = false {{bracket}}
|arg4 = {{type|bool}} userTarget = false {{bracket}}
|arg5 = {{type|number}} weaponNum = -1 {{rbracket}}{{rbracket}}{{rbracket}}
|arg6 =
|arg7 =
|arg8 = 
|arg9 = 
|return = {{type|bool}} success
|info = Defines a unit's target. Nil as 2nd argument drops the unit's current target.&lt;br&gt;&lt;span class=&quot;warning&quot;&gt;UserTarget &amp; success new in version 95.0, setting nil target new in version 99.0, weaponNum new in version 102.0.&lt;/span&gt;
}}


{{LuaCallout
|prefix = Spring.
|name = SetUnitMaxRange
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} maxRange
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = SetUnitMass
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} mass 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = {{new|101.0}}
}}


{{LuaCallout
|prefix = Spring.
|name = SetUnitBlocking
|arg1 = {{type|number}} unitID
|arg2 = {{type|bool}} isblocking
|arg3 = {{type|bool}} isSolidObjectCollidable
|arg4 = {{type|bool}} isProjectileCollidable
|arg5 = {{type|bool}} isRaySegmentCollidable
|arg6 = {{type|bool}} crushable
|arg7 = {{type|bool}} blockEnemyPushing
|arg8 = {{type|bool}} blockHeightChanges
|arg9 = 
|return = {{type|nil}}
|info = {{new|95.0}}&lt;br&gt;Changed parameters.
}}


{{LuaCallout
|prefix = Spring.
|name = SetUnitMetalExtraction
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} depth {{bracket}}
|arg3 = {{type|number}} range {{rbracket}}
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = Parameter &quot;depth&quot; corresponds to metal extraction rate. Range value is similar to &quot;extractsMetal&quot; in unitDefs.
}}


{{LuaCallout
|prefix = Spring.
|name = SetUnitBuildSpeed
|arg1 = {{type|number}} builderID
|arg2 = {{type|number}} buildSpeed {{bracket}}
|arg3 = {{type|number}} repairSpeed {{bracket}}
|arg4 = {{type|number}} reclaimSpeed{{bracket}}
|arg5 = {{type|number}} resurrectSpeed {{bracket}}
|arg6 = {{type|number}} captureSpeed {{bracket}}
|arg7 = {{type|number}} terraformSpeed {{rbracket}}{{rbracket}}{{rbracket}}{{rbracket}}{{rbracket}}
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = SetUnitNanoPieces
|arg1 = {{type|number}} builderID
|arg2 = {{type|table}} pieces
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = {{new|92.0}}&lt;br&gt;This saves a lot of engine calls, by replacing: function script.QueryNanoPiece() return currentpiece end&lt;br&gt;Use it!
}}



{{LuaCallout
|prefix = Spring.
|name = UnitAttach
|arg1 = {{type|number}} transporterID
|arg2 = {{type|number}} passengerID
|arg3 = {{type|number}} pieceNum 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = {{new|101.0}}
}}


{{LuaCallout
|prefix = Spring.
|name = UnitDetach
|arg1 = {{type|number}} passengerID 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = {{new|101.0}}
}}


{{LuaCallout
|prefix = Spring.
|name = UnitDetachFromAir
|arg1 = {{type|number}} passengerID 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = {{new|101.0}}
}}


{{LuaCallout
|prefix = Spring.
|name = SetUnitLoadingTransport
|arg1 = {{type|number}} passengerID 
|arg2 = {{type|number}} transportID 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = {{new|101.0}}&lt;br&gt;Disables collisions between the two units to allow colvol intersection during the approach.
}}


{{LuaCallout
|prefix = Spring.
|name = SetUnitPieceParent
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} AlteredPiece
|arg3 = {{type|number}} ParentPiece 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = {{new|101.0}}&lt;br&gt;Changes the pieces hierarchy of a unit by attaching a piece to a new parent.
}}


{{LuaCallout
|prefix = Spring.
|name = SetUnitPieceMatrix
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} pieceNum
|arg3 = {{type|table }} matrix 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = {{new|104.0}}&lt;br&gt;Sets the local (i.e. parent-relative) matrix of the given piece if any of the first three elements are non-zero, and also blocks all script animations from modifying it until {0, 0, 0} is passed (matrix should be an array of 16 floats, but is not otherwise sanity-checked).
}}


{{LuaCallout
|prefix = Spring.
|name = SetUnitArmored
|arg1 = {{type|number}} unitID
|arg2 = {{type|bool}} armored {{bracket}}
|arg3 = {{type|number}} armorMultiple {{rbracket}}
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = &lt;span class=&quot;warning&quot;&gt;armorMultiple new in version 0.83.x&lt;/span&gt;
}}


{{LuaCallout
|prefix = Spring.
|name = SetUnitShieldState
|arg1 = {{type|number}} unitID {{bracket}}
|arg2 = {{type|number}} weaponID = -1 {{bracket}}
|arg3 = {{type|bool}} enabled {{bracket}}
|arg4 = {{type|number}} power {{rbracket}}{{rbracket}}{{rbracket}}
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = SetUnitFlanking
|arg1 = {{type|number}} unitID
|arg2 = {{type|string}} &quot;mode&quot;
|arg3 = {{type|number }} mode 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}

or

{{LuaCallout
|prefix = Spring.
|name = SetUnitFlanking
|arg1 = {{type|number}} unitID
|arg2 = {{type|string}} &quot;moveFactor&quot;
|arg3 = {{type|number }} factor
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}

or

{{LuaCallout
|prefix = Spring.
|name = SetUnitFlanking
|arg1 = {{type|number}} unitID
|arg2 = {{type|string}} &quot;minDamage&quot;
|arg3 = {{type|number }} minDamage 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}

or

{{LuaCallout
|prefix = Spring.
|name = SetUnitFlanking
|arg1 = {{type|number}} unitID
|arg2 = {{type|string}} &quot;maxDamage&quot;
|arg3 = {{type|number }} maxDamage 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}

or

{{LuaCallout
|prefix = Spring.
|name = SetUnitFlanking
|arg1 = {{type|number}} unitID
|arg2 = {{type|string}} &quot;dir&quot;
|arg3 = {{type|number }} x
|arg4 = {{type|number }} y
|arg5 = {{type|number }} z
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = SetUnitWeaponState
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} weaponNum
|arg3 = {{type|table }} states 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}

or

{{LuaCallout
|prefix = Spring.
|name = SetUnitWeaponState
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} weaponNum
|arg3 = {{type|string }} key
|arg4 = {{type|number}} value
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}
&lt;span class=&quot;note&quot;&gt;Format of the states table:
    {
      [&quot;reloadState&quot;     = number value,]
      [&quot;reloadFrame&quot;     = number value,] (synonym for reloadState!)
      [&quot;reloadTime&quot;      = number value,]
      [&quot;accuracy&quot;        = number value,]
      [&quot;sprayAngle&quot;      = number value,]
      [&quot;range&quot;           = number value,] (*)
      [&quot;projectileSpeed&quot; = number value,]
      [&quot;burst&quot;           = number value,]
      [&quot;burstRate&quot;       = number value,]
      [&quot;projectiles&quot;     = number value,]
      [&quot;salvoLeft&quot;       = number value,]
      [&quot;nextSalvo&quot;       = number value,]
      [&quot;aimReady&quot;        = number value,] (&lt;&gt;0.0f := true)
    }
  (*) if you change the range of a weapon with dynamic damage
  make sure you use SetUnitWeaponDamages to change dynDamageRange as well.
  &lt;/span&gt;


{{LuaCallout
|prefix = Spring.
|name = SetUnitWeaponDamages
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} weaponNum {{pipe}} {{type|string}} &quot;selfDestruct&quot; {{pipe}} {{type|string}} &quot;explode&quot;
|arg3 = {{type|table}} damages 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}

or

{{LuaCallout
|prefix = Spring.
|name = SetUnitWeaponDamages
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} weaponNum {{pipe}} {{type|string}} &quot;selfDestruct&quot; {{pipe}} {{type|string}} &quot;explode&quot;
|arg3 = {{type|string}} key
|arg4 = {{type|number}} value
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = {{new|101.0}}
}}
&lt;span class=&quot;note&quot;&gt;Format of the damages table:
   {
      [&quot;paralyzeDamageTime&quot; = number value,]  
      [&quot;impulseFactor&quot;      = number value,]
      [&quot;impulseBoost&quot;       = number value,]
      [&quot;craterMult&quot;         = number value,]
      [&quot;craterBoost&quot;        = number value,]
      [&quot;dynDamageExp&quot;       = number value,]
      [&quot;dynDamageMin&quot;       = number value,]
      [&quot;dynDamageRange&quot;     = number value,]
      [&quot;dynDamageInverted&quot;  = number value,] (&lt;&gt;0.0f := true)
      [&quot;craterAreaOfEffect&quot; = number value,]
      [&quot;damageAreaOfEffect&quot; = number value,]
      [&quot;edgeEffectiveness&quot;  = number value,]
      [&quot;explosionSpeed&quot;     = number value,]
      [number armorType     = number value,] (changes the damage against this armor type)
    }
  &lt;/span&gt;


{{LuaCallout
|prefix = Spring.
|name = SetUnitCollisionVolumeData
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} scaleX, {{type|number}} scaleY, {{type|number}} scaleZ
|arg3 = {{type|number}} offsetX, {{type|number}} offsetY, {{type|number}} offsetZ
|arg4 = {{type|number}} vType
|arg5 = {{type|number}} tType
|arg6 = {{type|number}} Axis
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}
  &lt;span class=&quot;note&quot;&gt;enum COLVOL_TYPES {
      COLVOL_TYPE_DISABLED = -1,
      COLVOL_TYPE_ELLIPSOID = 0,
      COLVOL_TYPE_CYLINDER,
      COLVOL_TYPE_BOX,
      COLVOL_TYPE_SPHERE,
      COLVOL_NUM_TYPES       // number of non-disabled collision volume types
    };
    enum COLVOL_TESTS {
      COLVOL_TEST_DISC = 0,
      COLVOL_TEST_CONT = 1,
      COLVOL_NUM_TESTS = 2   // number of tests
    };
    enum COLVOL_AXES {
      COLVOL_AXIS_X   = 0,
      COLVOL_AXIS_Y   = 1,
      COLVOL_AXIS_Z   = 2,
      COLVOL_NUM_AXES = 3    // number of collision volume axes
    };
  &lt;/span&gt;


{{LuaCallout
|prefix = Spring.
|name = SetUnitPieceCollisionVolumeData
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} pieceIndex
|arg3 = {{type|bool}} enable
|arg4 = {{type|number}} scaleX, {{type|number}} scaleY, {{type|number}} scaleZ
|arg5 = {{type|number}} offsetX, {{type|number}} offsetY, {{type|number}} offsetZ {{bracket}}
|arg6 = {{type|number}} volumeType {{bracket}}
|arg7 = {{type|number}} primaryAxis {{rbracket}}{{rbracket}}
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = As of 101.0 this is 1-based piece index argument (was 0-based).
}}


{{LuaCallout
|prefix = Spring.
|name = SetUnitTravel
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} travel {{bracket}}
|arg3 = {{type|number}} travelPeriod {{rbracket}}
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = SetUnitMoveGoal
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} goalX, {{type|number}} goalY, {{type|number}} goalZ {{bracket}}
|arg3 = {{type|number}} goalRadius {{bracket}}
|arg4 = {{type|number}} moveSpeed {{bracket}}
|arg5 = {{type|bool}} moveRaw {{rbracket}}{{rbracket}}{{rbracket}}
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = &lt;span class=&quot;note&quot;&gt;Used by default commands to get in build-, attackrange etc.&lt;/span&gt;&lt;br&gt;{{new|98.0}} &lt;span class=&quot;note&quot;&gt;moveRaw: [http://springrts.com/mantis/view.php?id=4412 allow unit to dumbly move to a coordinate without calculating path.]&lt;/span&gt;
}}


{{LuaCallout
|prefix = Spring.
|name = SetUnitLandGoal
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} goalX, {{type|number}} goalY, {{type|number}} goalZ {{bracket}}
|arg3 = {{type|number}} goalRadius {{rbracket}}
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = {{new|101.0}}&lt;br&gt;Used in conjunction with {{name|Spring.UnitAttach}} et al. to re-implement old airbase &amp; fuel system in Lua.
}}


{{LuaCallout
|prefix = Spring.
|name = ClearUnitGoal
|arg1 = {{type|number}} unitID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = {{new|102.0}}
}}



{{LuaCallout
|prefix = Spring.
|name = SetUnitPhysics
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} posX, {{type|number}} posY, {{type|number}} posZ
|arg3 = {{type|number}} velX, {{type|number}} velY, {{type|number}} velZ
|arg4 = {{type|number}} rotX, {{type|number}} rotY, {{type|number}} rotZ
|arg5 = {{type|number}} dragX, {{type|number}} dragY, {{type|number}} dragZ
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = &lt;span class=&quot;warning&quot;&gt;Drag new in version 95.0&lt;/span&gt;
}}


{{LuaCallout
|prefix = Spring.
|name = SetUnitPosition
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} x
|arg3 = {{type|number}} z {{bracket}}
|arg4 = {{type|bool}} alwaysAboveSea {{rbracket}}
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = SetUnitDirection
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} x
|arg3 = {{type|number}} y
|arg4 = {{type|number}} z
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = {{new|90.0}}
}}


{{LuaCallout
|prefix = Spring.
|name = SetUnitVelocity
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} velX
|arg3 = {{type|number}} velY
|arg4 = {{type|number}} velZ
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}



{{LuaCallout
|prefix = Spring.
|name = SetUnitRotation
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} yaw
|arg3 = {{type|number}} pitch
|arg4 = {{type|number}} roll
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = AddUnitImpulse
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} x
|arg3 = {{type|number}} y
|arg4 = {{type|number}} z {{bracket}}
|arg5 = {{type|number}} decayRate {{rbracket}}
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = AddUnitSeismicPing
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} pingSize 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = RemoveBuildingDecal
|arg1 = {{type|number}} unitID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}



{{LuaCallout
|prefix = Spring.
|name = SetUnitMidAndAimPos
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} mpX, {{type|number}} mpY, {{type|number}} mpZ
|arg3 = {{type|number}} apX, {{type|number}} apY, {{type|number}} apZ {{bracket}}
|arg4 = {{type|bool}} relative {{rbracket}}
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|bool}} success
|info = {{new|89.0}}&lt;br&gt;mpx, mpy, mpz: New middle position of unit&lt;br&gt;apx, apy, apz: New position that enemies aim at on this unit&lt;br&gt;relative: Are the new coordinates relative to world (false) or unit (true) coordinates? Also, note that apy is inverted!
}}


{{LuaCallout
|prefix = Spring.
|name = SetUnitRadiusAndHeight
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} radius
|arg3 = {{type|number}} height
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|bool}} success
|info = {{new|89.0}}
}}


{{LuaCallout
|prefix = Spring.
|name = UnitWeaponFire
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} weaponID 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = UnitWeaponHoldFire
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} weaponID 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}

== Unit LOS ==

{{LuaCallout
|prefix = Spring.
|name = SetUnitCloak
|arg1 = {{type|number}} unitID
|arg2 = {{type|bool}} cloaked {{pipe}} {{type|number}} scriptCloak {{bracket}}
|arg3 = {{type|bool}} decloakAbs {{pipe}} {{type|number}} decloakDistance {{rbracket}}
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = If the 2nd argument is a number, the value works like this:&lt;br&gt;1:=normal cloak&lt;br&gt;2:=for free cloak (cost no E)&lt;br&gt;3:=for free + no decloaking (except the unit is stunned)&lt;br&gt;4:=ultimative cloak (no ecost, no decloaking, no stunned decloak)&lt;br&gt;&lt;br&gt;The decloak distance is only changed:&lt;br&gt;- if the 3th argument is a number or a boolean.&lt;br&gt;- if the boolean is false it takes the default decloak distance for that unitdef,&lt;br&gt;- if the boolean is true it takes the absolute value of it.
}}


{{LuaCallout
|prefix = Spring.
|name = SetUnitSonarStealth
|arg1 = {{type|number}} unitID
|arg2 = {{type|bool}} sonarStealth 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = SetUnitStealth
|arg1 = {{type|number}} unitID
|arg2 = {{type|bool}} stealth 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = SetUnitAlwaysVisible
|arg1 = {{type|number}} unitID
|arg2 = {{type|bool}} alwaysVisible 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = SetUnitLosMask
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} allyTeam
|arg3 = {{type|number}} los  {{pipe}} {{type|table }} losTypes 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = The 3rd argument is either the bit-and combination of the following numbers:&lt;br&gt;LOS_INLOS     = 1&lt;br&gt;LOS_INRADAR   = 2&lt;br&gt;LOS_PREVLOS   = 4&lt;br&gt;LOS_CONTRADAR = 8&lt;br&gt;&lt;br&gt;or a table of the following form:&lt;br&gt;losTypes = {&lt;br&gt;[los = boolean,]&lt;br&gt;[radar = boolean,]&lt;br&gt;[prevLos = boolean,]&lt;br&gt;[contRadar = boolean]&lt;br&gt;}
}}


{{LuaCallout
|prefix = Spring.
|name = SetUnitLosState
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} allyTeam
|arg3 = {{type|number}} los  {{pipe}} {{type|table }} losTypes 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = See above for more info on the arguments.
}}


{{LuaCallout
|prefix = Spring.
|name = SetUnitSensorRadius
|arg1 = {{type|number}} unitID
|arg2 = {{type|string }} type
|arg3 = {{type|number}} radius
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} {{pipe}} {{type|number}} newRadius
|info = Type can be:&lt;br&gt;&quot;los&quot;, &quot;airLos&quot;, &quot;radar&quot;, &quot;sonar&quot;, &quot;seismic&quot;, &quot;radarJammer&quot;, &quot;sonarJammer&quot;
}}


{{LuaCallout
|prefix = Spring.
|name = SetRadarErrorParams
|arg1 = {{type|number}} allyTeamID
|arg2 = {{type|number }} allyteamErrorSize {{bracket}}
|arg3 = {{type|number}} baseErrorSize {{bracket}}
|arg4 = {{type|number}} baseErrorMult {{rbracket}}{{rbracket}}
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = {{new|95.0}}
}}


{{LuaCallout
|prefix = Spring.
|name = SetUnitPosErrorParams
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} posErrorVector.x, {{type|number}} posErrorVector.y, {{type|number}} posErrorVector.z,
|arg3 = {{type|number}} posErrorDelta.x, {{type|number}} number posErrorDelta.y, {{type|number}} posErrorDelta.z {{bracket}}
|arg4 = {{type|number}} nextPosErrorUpdate {{rbracket}}
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = {{new|95.0}}
}}

== Unit Resourcing ==


{{LuaCallout
|prefix = Spring.
|name = SetUnitResourcing
|arg1 = {{type|number}} unitID
|arg2 = {{type|string }} res
|arg3 = {{type|number}} amount
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}

or

{{LuaCallout
|prefix = Spring.
|name = SetUnitResourcing
|arg1 = {{type|number}} unitID
|arg2 = { res = {{type|number}} amount, ... }
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info =  Possible values for res are: &quot;[u{{pipe}}c][u{{pipe}}m][m{{pipe}}e]&quot;&lt;br&gt;unconditional {{pipe}} conditional&lt;br&gt;use {{pipe}} make&lt;br&gt;metal {{pipe}} energy
}}


{{LuaCallout
|prefix = Spring.
|name = AddUnitResource
|arg1 = {{type|number}} unitID
|arg2 = {{type|string }} &quot;m&quot; {{pipe}} &quot;e&quot;
|arg3 = {{type|number}} amount 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info =  
}}



{{LuaCallout
|prefix = Spring.
|name = UseUnitResource
|arg1 = {{type|number}} unitID
|arg2 = {{type|string }} &quot;m&quot; {{pipe}} &quot;e&quot;
|arg3 = {{type|number}} amount 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} {{pipe}} {{type|bool}} okay
|info =  
}}

or

{{LuaCallout
|prefix = Spring.
|name = UseUnitResource
|arg1 = {{type|number}} unitID
|arg2 = { {{bracket}} &quot;m&quot; {{pipe}} &quot;metal&quot; {{pipe}} &quot;e&quot; {{pipe}} &quot;energy&quot; {{rbracket}} = amount, ... }
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} {{pipe}} {{type|bool}} okay
|info =  
}}



{{LuaCallout
|prefix = Spring.
|name = SetUnitHarvestStorage
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} metal
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info =  {{new|97.0}}&lt;br&gt;See also {{xtaglink|Gamedev:UnitDefs|harvestStorage}} UnitDef tag.
}}

= Feature Handling =

{{LuaCallout
|prefix = Spring.
|name = CreateFeature
|arg1 = {{type|string}} &quot;defName&quot; {{pipe}} {{type|number}} featureDefID
|arg2 = {{type|number}} x, {{type|number}} y, {{type|number}} z {{bracket}}
|arg3 = {{type|number}} heading {{bracket}}
|arg4 = {{type|number}} AllyTeamID {{bracket}}
|arg5 = {{type|number}} featureID {{rbracket}}{{rbracket}}{{rbracket}}
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|number}} featureID
|info =  
}}


{{LuaCallout
|prefix = Spring.
|name = DestroyFeature
|arg1 = {{type|number}} featureDefID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info =  
}}



{{LuaCallout
|prefix = Spring.
|name = TransferFeature
|arg1 = {{type|number}} featureDefID
|arg2 = {{type|number}} teamID 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info =  
}}

== Feature Control ==

{{LuaCallout
|prefix = Spring.
|name = SetFeatureHealth
|arg1 = {{type|number}} featureID
|arg2 = {{type|number}} health
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info =  
}}


{{LuaCallout
|prefix = Spring.
|name = SetFeatureResources
|arg1 = {{type|number}} featureID
|arg2 = {{type|number}} metal
|arg3 = {{type|number}} energy {{bracket}}
|arg4 = {{type|number}} reclaimTime {{bracket}}
|arg5 = {{type|number}} reclaimLeft {{rbracket}}{rbracket}}
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info =  {{new|104.0}}
}}


{{LuaCallout
|prefix = Spring.
|name = SetFeatureReclaim
|arg1 = {{type|number}} featureID
|arg2 = {{type|number}} reclaimLeft
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info =
}}


{{LuaCallout
|prefix = Spring.
|name = SetFeatureResurrect
|arg1 = {{type|number}} featureID
|arg2 = {{type|number}} unitDefID {{pipe}} {{type|string}} unitDefName {{bracket}}
|arg3 = {{type|number}} facing {{pipe}} {{type|string}} &quot;facing&quot; {{bracket}}
|arg4 = {{type|number}} progress {{rbracket}}{{rbracket}}
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = {{new|104.0}} Second param can now be a number id instead of a string name, this also allows cancelling ressurection by passing {{value|-1}}. The level of progress can now be set via the additional 4th param.&lt;br&gt;Possible values for facing are:&lt;br&gt;&quot;south&quot; {{pipe}} &quot;s&quot; {{pipe}} 0&lt;br&gt;&quot;east&quot;  {{pipe}} &quot;e&quot; {{pipe}} 1&lt;br&gt;&quot;north&quot; {{pipe}} &quot;n&quot; {{pipe}} 2&lt;br&gt;&quot;west&quot;  {{pipe}} &quot;w&quot; {{pipe}} 3
}}


{{LuaCallout
|prefix = Spring.
|name = SetFeaturePosition
|arg1 = {{type|number}} featureID
|arg2 = {{type|number}} x, {{type|number}} y, {{type|number}} z {{bracket}}
|arg3 = {{type|bool}} snapToGround {{rbracket}}
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info =
}}


{{LuaCallout
|prefix = Spring.
|name = SetFeatureDirection
|arg1 = {{type|number}} featureID
|arg2 = {{type|number}} dirX, {{type|number}} dirY, {{type|number}} dirZ
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info =
}}


{{LuaCallout
|prefix = Spring.
|name = SetFeatureRotation
|arg1 = {{type|number}} featureID
|arg2 = {{type|number}} rotX, {{type|number}} rotY, {{type|number}} rotZ
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = {{new|101.0}}
}}


{{LuaCallout
|prefix = Spring.
|name = SetFeatureVelocity
|arg1 = {{type|number}} featureID
|arg2 = {{type|number}} velX, {{type|number}} velY, {{type|number}} velZ
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = {{New|95.0}}
}}


{{LuaCallout
|prefix = Spring.
|name = SetUnitPhysics
|arg1 = {{type|number}} featureID
|arg2 = {{type|number}} posX, {{type|number}} posY, {{type|number}} posZ
|arg3 = {{type|number}} velX, {{type|number}} velY, {{type|number}} velZ
|arg4 = {{type|number}} rotX, {{type|number}} rotY, {{type|number}} rotZ
|arg5 = {{type|number}} dragX, {{type|number}} dragY, {{type|number}} dragZ
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = {{New|95.0}}
}}



{{LuaCallout
|prefix = Spring.
|name = SetFeatureMoveCtrl
|arg1 = {{type|number}} featureID {{bracket}}
|arg2 = {{type|bool}} enable {{bracket}}
|arg3 = {{type|number*}} args {{rbracket}}{{rbracket}}
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = Use this callout to control feature movement. The number* arguments are parsed as follows and all optional:&lt;br&gt;&lt;br&gt;If enable is true:&lt;br&gt;{{bracket}}, velVector(x,y,z) -- initial velocity for feature&lt;br&gt;{{bracket}}, accVector(x,y,z) -- acceleration added every frame{{rbracket}}{{rbracket}}&lt;br&gt;&lt;br&gt;If enable is false:&lt;br&gt;{{bracket}}, velocityMask(x,y,z) -- dimensions in which velocity is allowed to build when not using MoveCtrl&lt;br&gt;{{bracket}},  impulseMask(x,y,z) -- dimensions in which impulse is allowed to apply when not using MoveCtrl&lt;br&gt;{{bracket}}, movementMask(x,y,z) -- dimensions in which feature is allowed to move when not using MoveCtrl{{rbracket}}{{rbracket}}{{rbracket}}&lt;br&gt;&lt;br&gt;As of spring 103.0 it is necessary to unlock feature movement on x,z axis before changing feature physics. For example use &quot;Spring.SetFeatureMoveCtrl(featureID,false,1,1,1,1,1,1,1,1,1)&quot; to unlock all movement prior to making SetFeatureVelocity calls.
}}


{{LuaCallout
|prefix = Spring.
|name = SetFeatureNoSelect
|arg1 = {{type|number}} featureID
|arg2 = {{type|bool}} noSelect 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = SetFeatureAlwaysVisible
|arg1 = {{type|number}} featureID
|arg2 = {{type|bool}} enable
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = SetFeatureCollisionVolumeData
|arg1 = {{type|number}} featureID
|arg2 = {{type|number}} scaleX, {{type|number}} scaleY, {{type|number}} scaleZ
|arg3 = {{type|number}} offsetX, {{type|number}} offsetY, {{type|number}} offsetZ
|arg4 = {{type|number}} vType
|arg5 = {{type|number}} tType
|arg6 = {{type|number}} Axis
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = Check Spring.SetUnitCollisionVolumeData for further explanation of the arguments.
}}


{{LuaCallout
|prefix = Spring.
|name = SetFeaturePieceCollisionVolumeData
|arg1 = {{type|number}} featureID
|arg2 = {{type|number}} pieceIndex
|arg3 = {{type|bool}} enable
|arg4 = {{type|number}} scaleX, {{type|number}} scaleY, {{type|number}} scaleZ
|arg5 = {{type|number}} offsetX, {{type|number}} offsetY, {{type|number}} offsetZ
|arg6 = {{type|number}} Axis
|arg7 = {{type|number}} volumeType {{bracket}}
|arg8 = {{type|number}} primaryAxis {{rbracket}}
|arg9 = 
|return = {{type|nil}}
|info = {{new|101.0}}
}}



{{LuaCallout
|prefix = Spring.
|name = SetFeatureMidAndAimPos
|arg1 = {{type|number}} featureID
|arg2 = {{type|number}} mpX, {{type|number}} mpY, {{type|number}} mpZ
|arg3 = {{type|number}} apX, {{type|number}} apY, {{type|number}} apZ {{bracket}} 
|arg4 = {{type|bool}} relative
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|bool}} success
|info = {{new|89.0}}&lt;br&gt;Check Spring.SetUnitMidAndAimPos for further explanation of the arguments.
}}


{{LuaCallout
|prefix = Spring.
|name = SetFeatureRadiusAndHeight
|arg1 = {{type|number}} featureID
|arg2 = {{type|number}} radius
|arg3 = {{type|number}} height
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|bool}} success
|info = {{new|89.0}}
}}


{{LuaCallout
|prefix = Spring.
|name = SetFeatureMass
|arg1 = {{type|number}} featureID
|arg2 = {{type|number}} mass
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = {{new|101.0}}
}}


{{LuaCallout
|prefix = Spring.
|name = SetFeatureBlocking
|arg1 = {{type|number}} featureID
|arg2 = {{type|boolean}} isBlocking
|arg3 = {{type|boolean}} isSolidObjectCollidable
|arg4 = {{type|boolean}} isProjectileCollidable
|arg5 = {{type|boolean}} isRaySegmentCollidable
|arg6 = {{type|boolean}} crushable
|arg7 = {{type|boolean}} blockEnemyPushing
|arg8 = {{type|boolean}} blockHeightChanges
|arg9 =
|return = {{type|nil}}
|info = {{new|95.0}}&lt;br&gt; Changed parameters.
}}

= Lua to COB =

{{LuaCallout
|prefix = Spring.
|name = CallCOBScript
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} funcID {{pipe}} {{type|string}} funcName
|arg3 = {{type|number}} retArgs
|arg4 = COBArg1
|arg5 = COBArg2
|arg6 = ...
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} {{pipe}} {{type|number}} returnValue, {{type|number}} retArg1, {{type|number}} retArg2, ...
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetCOBScriptID
|arg1 = {{type|number}} unitID
|arg2 = {{type|string}} funcName
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} {{pipe}} {{type|number}} funcID
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitCOBValue
|arg1 = {{type|number}} unitID {{bracket}}
|arg2 = {{type|bool}} splitData=false {{rbracket}}
|arg3 = {{type|number}} COBValue {{bracket}}
|arg4 = {{type|number}} param1 {{bracket}}
|arg5 = {{type|number}} param2 {{bracket}}
|arg6 = {{type|number}} param3 {{bracket}}
|arg7 =  {{type|number}} param4 {{rbracket}}{{rbracket}}{{rbracket}}{{rbracket}}
|arg8 = 
|arg9 = 
|return = {{type|number}} result {{pipe}} {{type|number}} result1, {{type|number}} result2
|info = Note: Don't use Spring.{{bracket}}Get{{pipe}}Set{{rbracket}}UnitCOBValue in LUS just because you are familar with it since bos/cob, use the LuaSpringAPI instead!&lt;br&gt;You can find the possible values for `COBValue` in [[Lua_ConstCOB#Get.2FSet|Lua_ConstCOB]]. Also see [[Animation-CobConstants#Custom_Variables|Custom_Variables]].
}}


{{LuaCallout
|prefix = Spring.
|name = SetUnitCOBValue
|arg1 = {{type|number}} unitID 
|arg2 = {{type|number}} COBValue
|arg3 = {{type|number}} param1 {{bracket}}
|arg4 = {{type|number}} param2 {{rbracket}}
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = Note: Don't use Spring.{{bracket}}Get{{pipe}}Set{{rbracket}}UnitCOBValue in LUS just because you are familar with it since bos/cob, use the LuaSpringAPI instead!&lt;br&gt;You can find the possible values for `COBValue` in [[Lua_ConstCOB#Get.2FSet|Lua_ConstCOB]]. Also see [[Animation-CobConstants#Custom_Variables|Custom_Variables]].
}}

= Give Order =

Options can also be a bitmask; e.g. 0 instead of an empty table (can avoid performance hit on table creation)&lt;br&gt;
See [[Lua CMDs]] for relevant constants.


{{LuaCallout
|prefix = Spring.
|name = GiveOrderToUnit
|arg1 = {{type|number}} unitID 
|arg2 = {{type|number}} cmdID
|arg3 = params = { number, etc...}
|arg4 = options = {&quot;alt&quot;, &quot;ctrl&quot;, &quot;shift&quot;, &quot;right&quot;}
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GiveOrderToUnitMap
|arg1 = unitMap = { {{bracket}}unitID{{rbracket}} = example, etc... }
|arg2 = {{type|number}} cmdID
|arg3 = params = { number, etc...}
|arg4 = options = {&quot;alt&quot;, &quot;ctrl&quot;, &quot;shift&quot;, &quot;right&quot;}
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GiveOrderToUnitArray
|arg1 = unitArray = { {{bracket}}1{{rbracket}} = unitID, etc... }
|arg2 = {{type|number}} cmdID
|arg3 = params = { number, etc...}
|arg4 = options = {&quot;alt&quot;, &quot;ctrl&quot;, &quot;shift&quot;, &quot;right&quot;}
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GiveOrderArrayToUnitMap
|arg1 = unitMap = { {{bracket}}{{type|number}} unitID{{rbracket}} = example, etc... }
|arg2 = orderArray = { { {{type|number}} cmdID, params = { number, etc...}, options = {&quot;alt&quot;, &quot;ctrl&quot;, &quot;shift&quot;, &quot;right&quot;} } }
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GiveOrderArrayToUnitArray
|arg1 = unitArray = { {{bracket}}1{{rbracket}} = {{type|number}} unitID, etc... }
|arg2 = orderArray = { { {{type|number}} cmdID, params = { number, etc...}, options = {&quot;alt&quot;, &quot;ctrl&quot;, &quot;shift&quot;, &quot;right&quot;} } }
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}

=Ground=
== Grass ==

{{LuaCallout
|prefix = Spring.
|name = AddGrass
|arg1 = {{type|number}} x
|arg2 = {{type|number}} z
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = RemoveGrass
|arg1 = {{type|number}} x
|arg2 = {{type|number}} z
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}

== Heightmap ==
&lt;span class=&quot;note&quot;&gt;Note that x &amp; z coords are in worldspace (Game.mapSizeX/Z), still the heightmap resolution is [[Lua_ConstGame|Game.squareSize]].&lt;/span&gt;

{{LuaCallout
|prefix = Spring.
|name = LevelHeightMap
|arg1 = {{type|number}} x1
|arg2 = {{type|number}} z1 {{bracket}}
|arg3 = {{type|number}} x2 
|arg4 = {{type|number}} z2 {{rbracket}}
|arg5 = {{type|number}} height
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = AdjustHeightMap
|arg1 = {{type|number}} x1
|arg2 = {{type|number}} z1 {{bracket}}
|arg3 = {{type|number}} x2 
|arg4 = {{type|number}} z2 {{rbracket}}
|arg5 = {{type|number}} height
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = (heightmap[x][z] += height;)
}}


{{LuaCallout
|prefix = Spring.
|name = RevertHeightMap
|arg1 = {{type|number}} x1
|arg2 = {{type|number}} z1 {{bracket}}
|arg3 = {{type|number}} x2 
|arg4 = {{type|number}} z2 {{rbracket}}
|arg5 = {{type|number}} origFactor 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = SetHeightMapFunc
|arg1 = lua_function {{bracket}}
|arg2 = arg1 {{bracket}}
|arg3 = arg2 {{bracket}}
|arg4 = ... {{rbracket}}{{rbracket}}{{rbracket}}
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} {{pipe}} {{type|number}} absTotalHeightMapAmountChanged
|info = 
}}
Example code:&lt;pre&gt;
Spring.SetHeightMapFunc(function()
	for z=0,Game.mapSizeZ, Game.squareSize do
		for x=0,Game.mapSizeX, Game.squareSize do
			Spring.SetHeightMap( x, z, 200 + 20 * math.cos((x + z) / 90) )
		end
	end
end)&lt;/pre&gt;


{{LuaCallout
|prefix = Spring.
|name = AddHeightMap
|arg1 = {{type|number}} x
|arg2 = {{type|number}} z
|arg3 = {{type|number}} height
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} {{pipe}} {{type|number}} newHeight
|info = Can only be called in SetHeightMapFunc()
}}


{{LuaCallout
|prefix = Spring.
|name = SetHeightMap
|arg1 = {{type|number}} x
|arg2 = {{type|number}} z
|arg3 = {{type|number}} height {{bracket}}
|arg4 = {{type|number}} terraform = 1 {{rbracket}}
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} {{pipe}} {{type|number}} absHeightDiff
|info = Can only be called in SetHeightMapFunc(). The terraform argument is a scaling factor:&lt;br&gt;
If =0 nothing will be changed (the terraform starts) and if =1 the terraform will be finished.
}}


{{LuaCallout
|prefix = Spring.
|name = LevelSmoothMesh
|arg1 = {{type|number}} x1
|arg2 = {{type|number}} z1 {{bracket}}
|arg3 = {{type|number}} x2 
|arg4 = {{type|number}} z2 {{rbracket}}
|arg5 = {{type|number}} height 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = AdjustSmoothMesh
|arg1 = {{type|number}} x1
|arg2 = {{type|number}} z1 {{bracket}}
|arg3 = {{type|number}} x2 
|arg4 = {{type|number}} z2 {{rbracket}}
|arg5 = {{type|number}} height 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = RevertSmoothMesh
|arg1 = {{type|number}} x1
|arg2 = {{type|number}} z1 {{bracket}}
|arg3 = {{type|number}} x2 
|arg4 = {{type|number}} z2 {{rbracket}}
|arg5 = {{type|number}} origFactor 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}



{{LuaCallout
|prefix = Spring.
|name = SetSmoothMeshFunc
|arg1 = lua_function {{bracket}}
|arg2 = arg1 {{bracket}}
|arg3 = arg2 {{bracket}}
|arg4 = ... {{rbracket}}{{rbracket}}{{rbracket}}
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} {{pipe}} {{type|number}} absTotalHeightMapAmountChanged
|info = 
}}



{{LuaCallout
|prefix = Spring.
|name = AddSmoothMesh
|arg1 = {{type|number}} x
|arg2 = {{type|number}} z
|arg3 = {{type|number}} height
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} {{pipe}} {{type|number}} newHeight
|info = Can only be called in SetSmoothMeshFunc().
}}


{{LuaCallout
|prefix = Spring.
|name = SetSmoothMesh
|arg1 = {{type|number}} x
|arg2 = {{type|number}} z
|arg3 = {{type|number}} height {{bracket}}
|arg4 = {{type|number}} terraform = 1 {{rbracket}}
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} {{pipe}} {{type|number}} absHeightDiff
|info = Can only be called in SetSmoothMeshFunc().
}}

== TerrainTypes ==

{{LuaCallout
|prefix = Spring.
|name = SetMapSquareTerrainType
|arg1 = {{type|number}} x
|arg2 = {{type|number}} z
|arg3 = {{type|number}} newType
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} {{pipe}} {{type|number}} oldType
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = SetTerrainTypeData
|arg1 = {{type|number}} typeIndex {{bracket}}
|arg2 = {{type|number}} speedTanks = nil {{bracket}}
|arg3 = {{type|number}} speedKBOts = nil {{bracket}}
|arg4 = {{type|number}} speedHovers = nil {{bracket}}
|arg5 = {{type|number}} speedShips = nil {{rbracket}}{{rbracket}}{{rbracket}}{{rbracket}}
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} {{pipe}} {{type|bool}} true
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = SetSquareBuildingMask
|arg1 = {{type|number}} x
|arg2 = {{type|number}} z
|arg3 = {{type|number}} mask 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = {{new|103.0}}
}}

See also {{xtaglink|Gamedev:UnitDefs|buildingMask}} unitdef tag.

== MetalAmount ==

{{LuaCallout
|prefix = Spring.
|name = SetMetalAmount
|arg1 = {{type|number}} x
|arg2 = {{type|number}} z
|arg3 = {{type|number}} metalAmount
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = {{new|83.0}}&lt;br&gt;x &amp; z coords are in worldspace/16. metalAmount must be between 0 and 255*maxMetal (with maxMetal from the .smd or mapinfo.lua).
}}

= Command Descriptions =
&lt;font color=&quot;red&quot; style=&quot;font-size:120%; font-weight:600&quot;&gt;Doesn't work in unsynced code!&lt;/font&gt;&lt;br&gt;&lt;br&gt;

{{LuaCallout
|prefix = Spring.
|name = EditUnitCmdDesc
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} cmdDescID
|arg3 = {{type|table}} cmdArray 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}
&lt;pre&gt;structure of cmdArray:
  {
    [ id          = int ],
    [ type        = int ],
    [ name        = string ],
    [ action      = string ],
    [ tooltip     = string ],
    [ texture     = string ],
    [ cursor      = string ],
    [ queueing    = boolean ],
    [ hidden      = boolean ],
    [ disabled    = boolean ],
    [ showUnique  = boolean ],
    [ onlyTexture = boolean ],
    [ params      = { string = string, ... } ]
  }&lt;/pre&gt;
{{var|queueing}} is {{new|101.0}} and allows custom commands to be non-queueing (handy for state toggles).


{{LuaCallout
|prefix = Spring.
|name = InsertUnitCmdDesc
|arg1 = {{type|number}} unitID {{bracket}}
|arg2 = {{type|number}} cmdDescID {{rbracket}}
|arg3 = {{type|table}} cmdArray 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = RemoveUnitCmdDesc
|arg1 = {{type|number}} unitID {{bracket}}
|arg2 = {{type|number}} cmdDescID {{rbracket}}
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}

= Other =

{{LuaCallout
|prefix = Spring.
|name = SetNoPause
|arg1 = {{type|bool}} noPause 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = SetUnitToFeature
|arg1 = {{type|bool}} tofeature 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = An ugly global switch that can be used to block units turning into features when they finish being built (like *A DT's do, which have the isFeature tag) [http://springrts.com/phpbb/viewtopic.php?f=14&amp;p=481521 thread]
}}



{{LuaCallout
|prefix = Spring.
|name = SetExperienceGrade
|arg1 = {{type|number}} expGrade {{bracket}}
|arg2 = {{type|number}} ExpPowerScale {{bracket}}
|arg3 = {{type|number}} ExpHealthScale {{bracket}}
|arg4 = {{type|number}} ExpReloadScale {{rbracket}}{{rbracket}}{{rbracket}}
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = expGrade defines how often UnitExperience() will be called.&lt;br&gt;Prior to 104.0 it is based on the following equation:&lt;br&gt;(int) {{bracket}}exp/(exp+1){{rbracket}} / expGrade&lt;br&gt;&lt;br&gt;Post 104.0 it is the raw change.
}}


{{LuaCallout
|prefix = Spring.
|name = SpawnExplosion
|arg1 = {{type|number}} posX = 0, {{type|number}} posY = 0, {{type|number}} posZ = 0
|arg2 = {{type|number}} dirX = 0, {{type|number}} dirY = 0, {{type|number}} dirZ = 0
|arg3 = {{type|table}} explosionParams
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = {{new|104.0}}
}}
  &lt;pre&gt;Possible keys of explosionParams are:
    weaponDef = number,
    owner = number,
    hitUnit = number,
    hitFeature = number,
    craterAreaOfEffect = number,
    damageAreaOfEffect = number,
    edgeEffectiveness = number,
    explosionSpeed = number,
    gfxMod = number,
    impactOnly = boolean,
    ignoreOwner = boolean,
    damageGround = boolean

Please note the explosion defaults to 1 damage regardless of what it's defined in the weaponDef.
The weapondefID is only used for visuals and for passing into callins like UnitDamaged.&lt;/pre&gt;


{{LuaCallout
|prefix = Spring.
|name = SpawnCEG
|arg1 = {{type|string}} &quot;cegname&quot; | {{type|number}} cegID
|arg2 = {{type|number}} posX = 0, {{type|number}} posY = 0, {{type|number}} posZ = 0
|arg3 = {{type|number}} dirX = 0, {{type|number}} dirY = 0, {{type|number}} dirZ = 0
|arg4 = {{type|number}} radius = 0
|arg5 = {{type|number}} damage = 0
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} {{pipe}} {{type|bool}} success, {{type|number}} cegID
|info = cegID new in 95.0.
}}


{{LuaCallout
|prefix = Spring.
|name = SpawnSFX
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} sfxID
|arg3 = {{type|number}} posX = 0, {{type|number}} posY = 0, {{type|number}} posZ = 0
|arg4 = {{type|number}} dirX = 0, {{type|number}} dirY = 0, {{type|number}} dirZ = 0
|arg5 = {{type|number}} radius = 0
|arg6 = {{type|number}} damage = 0 {{bracket}}
|arg7 = {{type|bool}} absolute {{rbracket}}
|arg8 = 
|arg9 = 
|return = {{type|nil}} {{pipe}} {{type|bool}} success
|info = {{new|104.0}}
}}

Equal to the [[Animation-LuaCallouts#Effects|UnitScript versions of EmitSFX]], but takes position and direction arguments (in either unit- or piece-space) instead of a piece index.

= Projectiles =

{{LuaCallout
|prefix = Spring.
|name = SpawnProjectile
|arg1 = {{type|number}} weaponDefID
|arg2 = {{type|table}} projectileParams 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} {{pipe}} {{type|number}} projectileID
|info = 
}}
  &lt;pre&gt;Possible keys of projectileParams are:
    pos = {number x, number y, number z},
    end = {number x, number y, number z},
    speed = {number x, number y, number z},
    spread = {number x, number y, number z},
    error = {number x, number y, number z},
    owner = number,
    team = number,
    ttl = number,
    gravity = number,
    tracking = number,
    maxRange = number,
    startAlpha = number,
    endAlpha = number,
    model = string,
    cegTag = string&lt;/pre&gt;

{{LuaCallout
|prefix = Spring.
|name = DeleteProjectile
|arg1 = {{type|number}} projectileID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = {{new|101.0}}&lt;br&gt;Silently removes projectiles (no explosion).
}}


&lt;span class = &quot;warning&quot;&gt;Pre 95.0:&lt;/span&gt;
{{LuaCallout
|prefix = Spring.
|name = SetProjectileTarget
|arg1 = {{type|number}} projectileID 
|arg2 = {{bracket}} {{type|number}} targetID, {{type|string}} targetTypeStr {{rbracket}} {{pipe}} {{bracket}} {{type|number}} posX = 0, {{type|number}} posY = 0, {{type|number}} posZ = 0 {{rbracket}}
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} {{pipe}} {{type|bool}} validTarget
|info = 
}}

&lt;span class = &quot;warning&quot;&gt;Post 95.0:&lt;/span&gt;
{{LuaCallout
|prefix = Spring.
|name = SetProjectileTarget
|arg1 = {{type|number}} projectileID 
|arg2 = {{bracket}} {{type|number}} targetID, {{type|number}} targetType {{rbracket}} {{pipe}} {{bracket}} {{type|number}} posX = 0, {{type|number}} posY = 0, {{type|number}} posZ = 0 {{rbracket}}
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} {{pipe}} {{type|bool}} validTarget
|info = 
}}
  &lt;pre&gt;targetTypeStr can be one of: 
    'u' - unit
    'f' - feature
    'p' - projectile
  while targetTypeInt is one of:
    string.byte('g') := GROUND
    string.byte('u') := UNIT
    string.byte('f') := FEATURE
    string.byte('p') := PROJECTILE&lt;/pre&gt;


{{LuaCallout
|prefix = Spring.
|name = SetProjectileIgnoreTrackingError
|arg1 = {{type|number}} projectileID 
|arg2 = {{type|bool}} ignore 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = {{new|101.0}}
}}


{{LuaCallout
|prefix = Spring.
|name = SetProjectileIsIntercepted
|arg1 = {{type|number}} projectileID 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = {{new|99.0}}
}}


{{LuaCallout
|prefix = Spring.
|name = SetProjectileMoveControl
|arg1 = {{type|number}} projectileID 
|arg2 = {{type|bool}} enable
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = Disables engine movecontrol, so lua can fully control the physics.
}}


{{LuaCallout
|prefix = Spring.
|name = SetProjectilePosition
|arg1 = {{type|number}} projectileID {{bracket}}
|arg2 = {{type|number}} posX = 0 {{bracket}}
|arg3 = {{type|number}} posY = 0 {{bracket}}
|arg4 = {{type|number}} posZ = 0 {{rbracket}}{{rbracket}}{{rbracket}}
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = SetProjectileVelocity
|arg1 = {{type|number}} projectileID {{bracket}}
|arg2 = {{type|number}} velX = 0 {{bracket}}
|arg3 = {{type|number}} velY = 0 {{bracket}}
|arg4 = {{type|number}} velZ = 0 {{rbracket}}{{rbracket}}{{rbracket}}
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}



{{LuaCallout
|prefix = Spring.
|name = SetProjectileCollision
|arg1 = {{type|number}} projectileID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = SetProjectileGravity
|arg1 = {{type|number}} projectileID {{bracket}}
|arg2 = {{type|number}} grav = 0 {{rbracket}}
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = SetProjectileSpinAngle
|arg1 = {{type|number}} projectileID {{bracket}}
|arg2 = {{type|number}} spinAngle = 0 {{rbracket}}
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = {{removed|95.0}}
}}


{{LuaCallout
|prefix = Spring.
|name = SetProjectileSpinSpeed
|arg1 = {{type|number}} projectileID {{bracket}}
|arg2 = {{type|number}} speed = 0 {{rbracket}}
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = {{removed|95.0}}
}}


{{LuaCallout
|prefix = Spring.
|name = SetProjectileSpinVec
|arg1 = {{type|number}} projectileID {{bracket}}
|arg2 = {{type|number}} spinX = 0 {{bracket}}
|arg3 = {{type|number}} spinY = 0 {{bracket}}
|arg4 = {{type|number}} spinZ = 0 {{rbracket}}{{rbracket}}{{rbracket}}
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = {{removed|95.0}}
}}


{{LuaCallout
|prefix = Spring.
|name = SetProjectileCEG
|arg1 = {{type|number}} projectileID
|arg2 = {{type|string}} ceg_name 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info =
}}



{{LuaCallout
|prefix = Spring.
|name = SetPieceProjectileParams
|arg1 = {{type|number}} projectileID {{bracket}}
|arg2 = {{type|number}} explosionFlags {{bracket}}
|arg3 = {{type|number}} spinAngle {{bracket}}
|arg4 = {{type|number}} spinSpeed {{bracket}}
|arg5 = {{type|number}} spinVector.x {{bracket}}
|arg6 = {{type|number}} spinVector.y {{bracket}}
|arg7 = {{type|number}} spinVector.z {{rbracket}}{{rbracket}}{{rbracket}}{{rbracket}}{{rbracket}}{{rbracket}}
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = {{new|95.0}} 
}}


{{LuaCallout
|prefix = Spring.
|name = SetProjectileAlwaysVisible
|arg1 = {{type|number}} projectileID
|arg2 = {{type|bool}} alwaysVisible
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = {{new|95.0}} 
}}


{{LuaCallout
|prefix = Spring.
|name = SetProjectileDamages
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} weaponNum
|arg3 = {{type|table}} damages 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}

or

{{LuaCallout
|prefix = Spring.
|name = SetProjectileDamages
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} weaponNum
|arg3 = {{type|string}} key
|arg4 = {{type|number}} value 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = {{new|101.0}}
}}
&lt;pre&gt;Format of the damages table:
   {
      [&quot;paralyzeDamageTime&quot; = number value,]  
      [&quot;impulseFactor&quot;      = number value,]
      [&quot;impulseBoost&quot;       = number value,]
      [&quot;craterMult&quot;         = number value,]
      [&quot;craterBoost&quot;        = number value,]
      [&quot;dynDamageExp&quot;       = number value,]
      [&quot;dynDamageMin&quot;       = number value,]
      [&quot;dynDamageRange&quot;     = number value,]
      [&quot;dynDamageInverted&quot;  = number value,] (&lt;&gt;0.0f := true)
      [&quot;craterAreaOfEffect&quot; = number value,]
      [&quot;damageAreaOfEffect&quot; = number value,]
      [&quot;edgeEffectiveness&quot;  = number value,]
      [&quot;explosionSpeed&quot;     = number value,]
      [number armorType     = number value,] (changes the damage against this armor type)
    }&lt;/pre&gt;

[[category: Lua]]</text>
      <sha1>4nobwpi6ksgvqqw2ezb2jupswxekrty</sha1>
    </revision>
  </page>
  <page>
    <title>Lua SyncedRead</title>
    <ns>0</ns>
    <id>2425</id>
    <revision>
      <id>31824</id>
      <parentid>31823</parentid>
      <timestamp>2022-06-23T00:03:24Z</timestamp>
      <contributor>
        <username>Masterbel</username>
        <id>2937</id>
      </contributor>
      <minor/>
      <comment>typo: Possilbe changed to Possible</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="82427">[[Engine_Development|Development]] &lt; [[Lua_Scripting|Lua Scripting]] &lt; {{FULLPAGENAME}}

== Game ==

=== Special TeamID Variables ===
&lt;font color=&quot;red&quot; style=&quot;font-weight:600&quot;&gt;The following special TeamIDs are not supported by all functions. For Widgets, instead of Spring.MY_UNITS, use Spring.GetLocalTeamID().&lt;/font&gt;&lt;br&gt;


{{LuaConstant
|type = number
|name = Spring.ALL_UNITS
|info = 
}}


{{LuaConstant
|type = number
|name = Spring.MY_UNITS
|info = 
}}


{{LuaConstant
|type = number
|name = Spring.ALLY_UNITS
|info = 
}}


{{LuaConstant
|type = number
|name = Spring.ENEMY_UNITS
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetGaiaTeamID
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|number}} teamID
|info = 
}}

=== GameStates ===

{{LuaCallout
|prefix = Spring.
|name = IsGodModeEnabled
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|bool}} enabled
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = IsCheatingEnabled
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|bool}} enabled
|info = 
}}



{{LuaCallout
|prefix = Spring.
|name = IsDevLuaEnabled
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|bool}} enabled
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = IsEditDefsEnabled
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|bool}} enabled
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = AreHelperAIsEnabled
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|bool}} enabled
|info = 
}}



{{LuaCallout
|prefix = Spring.
|name = FixedAllies
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|bool}} enabled
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = IsGameOver
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|bool}} enabled
|info = 
}}

=== RulesParams ===
&lt;span class=note&gt;The following functions allow to save data per game, team and unit. The advantage of it is that it can be read from anywhere (even from LuaUI and AIs!)&lt;/span&gt;&lt;br&gt;
&lt;span class=warning&gt;String values are new since 95.0.&lt;/span&gt;


{{LuaCallout
|prefix = Spring.
|name = GetGameRulesParam
|arg1 = {{type|number}} ruleIndex {{pipe}} {{type|string}} ruleName 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} value {{pipe}} {{type|string}} value
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetGameRulesParams
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} { {{bracket|ruleName1}} = {{type|number}} value1 {{pipe}} {{type|string}} value1, ... }
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetTeamRulesParam
|arg1 = {{type|number}} teamID
|arg2 = {{type|number}} index {{pipe}} {{type|string}} ruleName
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} value {{pipe}} {{type|string}} value
|info = 
}}



{{LuaCallout
|prefix = Spring.
|name = GetTeamRulesParams
|arg1 = {{type|number}} teamID
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} { {{bracket|ruleName1}} = {{type|number}} value1 {{pipe}} {{type|string}} value1, ... }
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitRulesParam
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} index {{pipe}} {{type|string}} ruleName 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} value {{pipe}} {{type|string}} value 
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitRulesParams
|arg1 = {{type|number}} unitID
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} { {{bracket|ruleName1}} = {{type|number}} value1 {{pipe}} {{type|string}} value1, ... }
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetFeatureRulesParam
|arg1 = {{type|number}} featureID
|arg2 = {{type|number}} index {{pipe}} {{type|string}} ruleName 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} value {{pipe}} {{type|string}} value 
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetFeatureRulesParams
|arg1 = {{type|number}} featureID
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} { {{bracket|ruleName1}} = {{type|number}} value1 {{pipe}} {{type|string}} value1, ... }
|info = 
}}

=== Mod-/Map-Options ===

{{LuaCallout
|prefix = Spring.
|name = GetModOptions
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = { } {{pipe}} { &quot;keyName1&quot; = {{type|string}} &quot;value&quot;, &quot;keyName2&quot; = {{type|string}} &quot;value&quot;, ... }
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetMapOptions
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = { } {{pipe}} { &quot;keyName1&quot; = {{type|string}} &quot;value&quot;, &quot;keyName2&quot; = {{type|string}} &quot;value&quot;, ... }
|info = 
}}


&lt;span class=&quot;warning&quot;&gt;Warning:&lt;/span&gt; boolean values are not transfered from C to Lua correctly. For this reason the respective option has to be converted to a number and checked accordingly via an IF statement as shown below:&lt;br&gt;
&lt;pre&gt;if (tonumber(Spring.GetModOptions.exampleOption) == 1) then...end&lt;/pre&gt;
The following check therefore is insufficient!
&lt;pre&gt;if (Spring.GetModOptions.exampleOption) then...end&lt;/pre&gt;

=== Speed/Time ===

{{LuaCallout
|prefix = Spring.
|name = GetGameSpeed
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|number}} userSpeedFactor, {{type|number}} speedFactor, {{type|bool}} paused
|info = &lt;span class=&quot;warning&quot;&gt;As of 98.0 moved to [[Lua_UnsyncedRead]] due to desyncs in replays/demos&lt;/span&gt;
}}


{{LuaCallout
|prefix = Spring.
|name = GetGameFrame
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|number}} frameNum%dayFrames, {{type|number}} frameNum/dayFrames
|info = 
}}



{{LuaCallout
|prefix = Spring.
|name = GetGameSeconds
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|number}} seconds
|info = 
}}

=== Vectors ===

{{LuaCallout
|prefix = Spring.
|name = GetWind
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|number}} dirX, {{type|number}} dirY, {{type|number}} dirZ, {{type|number}} strength, {{type|number}} normDirX, {{type|number}} normDirY, {{type|number}} normDirZ
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetHeadingFromVector
|arg1 = {{type|number}} x
|arg2 = {{type|number}} z
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|number}} heading
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetVectorFromHeading
|arg1 = {{type|number}} heading 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|number}} x, {{type|number}} z
|info = 
}}

== Sides/Factions ==

{{LuaCallout
|prefix = Spring.
|name = GetSideData
|arg1 = {{type|string}} sideName 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|string}} startUnit, {{type|string}} caseSensitiveSideName
|info = 
}}

or

{{LuaCallout
|prefix = Spring.
|name = GetSideData
|arg1 = {{type|number}} sideID
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|string}} sideName, {{type|string}} startUnit, {{type|string}} caseSensitiveSideName
|info = 
}}

or

{{LuaCallout
|prefix = Spring.
|name = GetSideData
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = { {{bracket|1}} = { sideName = {{type|string}}, caseName = {{type|string}}, startUnit = {{type|string}}} }, {{bracket|2}} = { ..., ..., ... }, ... }
|info = 
}}

== Teams ==
=== StartBoxes/StartPositions ===

{{LuaCallout
|prefix = Spring.
|name = GetAllyTeamStartBox
|arg1 = {{type|number}} allyID
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} xMin, {{type|number}} zMin, {{type|number}} xMax, {{type|number}} zMax
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetTeamStartPosition
|arg1 = {{type|number}} teamID
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} x, {{type|number}} y, {{type|number}} z
|info = 
}}

=== Player,Team,Ally Lists/Info ===

Note: AIs are associated to teamIDs (and do not have playerIDs). Code to cycle through AI teamIDs can be found [https://springrts.com/phpbb/viewtopic.php?f=21&amp;t=36873#p586026 here] 


{{LuaCallout
|prefix = Spring.
|name = GetPlayerList
|arg1 = {{bracket}} {{type|number}} teamID = -1 {{pipe}} {{type|bool}} onlyActive = false {{bracket}}
|arg2 = {{type|number}} teamID {{pipe}} {{type|bool}} onlyActive {{rbracket}} {{rbracket}}
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} { {{bracket|1}} = {{type|number}} playerID, etc... }
|info = From 104.0 onwards spectators will be ignored if a valid (&gt;=0) teamID is given.
}}


{{LuaCallout
|prefix = Spring.
|name = GetTeamList
|arg1 = {{bracket}} {{type|number}} allyTeamID = -1  {{rbracket}}
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} { {{bracket|1}} = {{type|number}} teamID, etc... }
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetAllyTeamList
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = { {{bracket|1}} = {{type|number}} teamID, etc... }
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetPlayerInfo
|arg1 = {{type|number}} playerID 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|string}} &quot;name&quot;, {{type|bool}} active, {{type|bool}} spectator, {{type|number}} teamID, {{type|number}} allyTeamID, {{type|number}} pingTime, {{type|number}} cpuUsage, {{type|string}} &quot;country&quot;, {{type|number}} rank, {{type|table}} customPlayerKeys
|info = PRE-83.0: in synced code &quot;name&quot; is &quot;SYNCED_NONAME&quot;!
}}


{{LuaCallout
|prefix = Spring.
|name = GetPlayerControlledUnit
|arg1 = {{type|number}} playerID 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} unitID
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetAIInfo
|arg1 = {{type|number}} teamID 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 =
|arg9 =
|return = {{type|number}} skirmishAIID, {{type|string}} &quot;name&quot;, {{type|number}} hostingPlayerID, {{type|string}} &quot;shortName&quot;, {{type|string}} &quot;version&quot;, {{type|table}} options
|info = Note: Before 0.82, the first argument was teamID, and then every other argument with a shifted position.&lt;br&gt;&lt;br&gt;shortName, &lt;span class=&quot;note&quot;&gt;(synced =&gt; &quot;SYNCED_NOSHORTNAME&quot;; non-local =&gt; &quot;UNKNOWN&quot;)&lt;/span&gt;&lt;br&gt;version,   &lt;span class=&quot;note&quot;&gt;(synced =&gt; &quot;SYNCED_NOVERSION&quot;;   non-local =&gt; &quot;UNKNOWN&quot;)&lt;/span&gt;&lt;br&gt;options    &lt;span class=&quot;note&quot;&gt;(synced &amp; non-local =&gt; empty-table)&lt;/span&gt;
}}


{{LuaCallout
|prefix = Spring.
|name = GetAllyTeamInfo
|arg1 = {{type|number}} allyteamID
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|table}} customTeamKeys
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetTeamInfo
|arg1 = {{type|number}} teamID 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} teamID, {{type|number}} leader, {{type|bool}} isDead, {{type|bool}} isAiTeam, {{type|string}} &quot;side&quot;, {{type|number}} allyTeam, {{type|number}} incomeMultiplier, {{type|table}} customTeamKeys
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetTeamResources
|arg1 = {{type|number}} teamID
|arg2 = {{type|string}} &quot;metal&quot; {{pipe}} &quot;energy&quot; 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} currentLevel, {{type|number}} storage, {{type|number}} pull, {{type|number}} income, {{type|number}} expense, {{type|number}} share, {{type|number}} sent, {{type|number}} received
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetTeamUnitStats
|arg1 = {{type|number}} teamID
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} killed, {{type|number}} died, {{type|number}} capturedBy, {{type|number}} capturedFrom, {{type|number}} received, {{type|number}} sent
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetTeamUnitStats
|arg1 = {{type|number}} teamID
|arg2 = {{type|string}} &quot;metal&quot; {{pipe}} &quot;energy&quot; 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} used, {{type|number}} produced, {{type|number}} excessed, {{type|number}} received, {{type|number}} sent
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetTeamUnitStats
|arg1 = {{type|number}} teamID 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} cur_max_index
|info = cur_max_index is possible range for startIndex/endIndex :={1..cur_max_index}
}}

or

{{LuaCallout
|prefix = Spring.
|name = GetTeamUnitStats
|arg1 = {{type|number}} teamID
|arg2 = {{type|number}} startIndex {{bracket}}
|arg3 = {{type|number}} endIndex = startIndex {{rbracket}}
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|table}} stats (see below for table content description)
|info = 
}}
&lt;pre&gt; table stats = {
      [1] = {
        &quot;time&quot;             = number,
        &quot;frame&quot;            = number,
        &quot;metalUsed&quot;        = number,
        &quot;metalProduced&quot;    = number,
        &quot;metalExcess&quot;      = number,
        &quot;metalReceived&quot;    = number,
        &quot;metalSent&quot;        = number,
        &quot;energyUsed&quot;       = number,
        &quot;energyProduced&quot;   = number,
        &quot;energyExcess&quot;     = number,
        &quot;energyReceived&quot;   = number,
        &quot;energySent&quot;       = number,
        &quot;damageDealt&quot;      = number,
        &quot;damageReceived&quot;   = number,
        &quot;unitsProduced&quot;    = number,
        &quot;unitsDied&quot;        = number,
        &quot;unitsReceived&quot;    = number,
        &quot;unitsSent&quot;        = number,
        &quot;unitsCaptured&quot;    = number,
        &quot;unitsOutCaptured&quot; = number,
        &quot;unitsKilled&quot;      = number
      }, ...
   }&lt;/pre&gt;


{{LuaCallout
|prefix = Spring.
|name = GetTeamLuaAI
|arg1 = {{type|number}} teamID 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|string}} &quot;luaAI&quot;
|info = Returns string containing name of AI defined in file LuaAI.lua as name=&quot;&lt;AI name&gt;&quot;. Maybe it returns whole table with all values there, but in my LuaAI.lua name is on first position...
}}

=== Teams/PlayersAllied ===

{{LuaCallout
|prefix = Spring.
|name = AreTeamsAllied
|arg1 = {{type|number}} teamID1
|arg2 = {{type|number}} teamID2
|arg3 = ...
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|bool}} isAllied
|info = 
}}



{{LuaCallout
|prefix = Spring.
|name = ArePlayersAllied
|arg1 = {{type|number}} playerID1
|arg2 = {{type|number}} playerID2 
|arg3 = ...
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|bool}} isAllied
|info = 
}}

== Units ==
=== GetUnits ===

{{LuaCallout
|prefix = Spring.
|name = GetAllUnits
|arg1 =
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|table}} unitTable = { {{bracket|1}} = {{type|number}} unitID, ... }
|info = Note that when called from a widget, this also returns units that are only radar blips. For units that are radar blips, you may want to check if they are in los, as GetUnitDefID() will still return true if they have previously been seen. See the UnsyncedRead GetVisibleUnits() call. 
}}


{{LuaCallout
|prefix = Spring.
|name = GetTeamUnits
|arg1 = {{type|number}} teamID 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|table}} unitTable = { {{bracket|1}} = {{type|number}} unitID, ... }
|info = 
}}



{{LuaCallout
|prefix = Spring.
|name = GetTeamUnitsSorted
|arg1 = {{type|number}} teamID 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|table}} unitDefTable = { {{bracket}}{{type|number}} unitDefID{{rbracket}} = { {{bracket|1}} = {{type|number}} unitID, ... }, ... }
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetTeamUnitsCounts
|arg1 = {{type|number}} teamID 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|table}} countTable = { {{bracket}}{{type|number}} unitDefID{{rbracket}} = count, ... }
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetTeamUnitsByDefs
|arg1 = {{type|number}} teamID 
|arg2 = {{type|number}} unitDefID {{pipe}} tableUnitDefs = { {{type|number}} unitDefID1, ... }
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|table}} unitTable = { {{bracket|1}} = {{type|number}} unitID, ... }
|info = 
}}



{{LuaCallout
|prefix = Spring.
|name = GetTeamUnitDefCount
|arg1 = {{type|number}} teamID 
|arg2 = {{type|number}} unitDefID
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} count
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetTeamUnitCount
|arg1 = {{type|number}} teamID 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} count
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitsInRectangle
|arg1 = {{type|number}} xmin
|arg2 = {{type|number}} zmin
|arg3 = {{type|number}} xmax
|arg4 = {{type|number}} zmax {{bracket}}
|arg5 = {{type|number}} teamID {{rbracket}}
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|table}} unitTable = { {{bracket|1}} = {{type|number}} unitID, etc... }
|info = 
}}



{{LuaCallout
|prefix = Spring.
|name = GetUnitsInBox
|arg1 = {{type|number}} xmin, {{type|number}} ymin, {{type|number}} zmin
|arg2 = {{type|number}} xmax, {{type|number}} ymax, {{type|number}} zmax {{bracket}}
|arg3 = {{type|number}} teamID {{rbracket}}
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|table}} unitTable = { {{bracket|1}} = {{type|number}} unitID, etc... }
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitsInSphere
|arg1 = {{type|number}} x, {{type|number}} y, {{type|number}} z
|arg2 = {{type|number}} radius {{bracket}}
|arg3 = {{type|number}} teamID {{rbracket}}
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|table}} unitTable = { {{bracket|1}} = {{type|number}} unitID, etc... }
|info = 
}}



{{LuaCallout
|prefix = Spring.
|name = GetUnitsInCylinder
|arg1 = {{type|number}} x, {{type|number}} z
|arg2 = {{type|number}} radius {{bracket}}
|arg3 = {{type|number}} teamID {{rbracket}}
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|table}} unitTable = { {{bracket|1}} = {{type|number}} unitID, etc... }
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitsInPlanes
|arg1 = {{type|table}} planes = { {{bracket|1}} = {{type|number}} normalVecX, {{type|number}} normalVecY, {{type|number}} normalVecZ, {{type|number}} d }, etc... }
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|table}} unitTable = { {{bracket|1}} = {{type|number}} unitID, etc... }
|info = Plane normals point towards accepted space, so the acceptance criteria for each plane is:
}}
&lt;pre&gt;    radius     = unit radius
    px, py, pz = unit position
    [(nx * px) + (ny * py) + (nz * pz) + (d - radius)]  &lt;=  0&lt;/pre&gt;



{{LuaCallout
|prefix = Spring.
|name = GetUnitNearestAlly
|arg1 = {{type|number}} unitID {{bracket}}
|arg2 = {{type|number}} range {{rbracket}}
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} unitID
|info = 
}}



{{LuaCallout
|prefix = Spring.
|name = GetUnitNearestEnemy
|arg1 = {{type|number}} unitID {{bracket}}
|arg2 = {{type|number}} range {{bracket}}
|arg3 = {{type|bool}} useLOS {{rbracket}}{{rbracket}}
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} unitID
|info = Post 95.0 this no longer returns neutral units.
}}

=== Unit Informations ===

{{LuaCallout
|prefix = Spring.
|name = ValidUnitID
|arg1 = {{type|number}} unitID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|bool}} valid
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitIsDead
|arg1 = {{type|number}} unitID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|bool}} isDead
|info = Returns false if unit exists and is alive, true for a brief period of time after unit dies, nil otherwise. Keep this in mind when using (not Spring.GetUnitIsDead() ). Also very important to note, that you can receive units that are 'already dead', when you do a Spring.GetAllUnits() call. These 'dead' units have already had their unitdestroyed callins called, and that will not get called again, and even more interestingly, these units are also valid, as in the above ValidUnitID callin will return true. The GetUnitIsDead howerver, will return true for these units, that are already dead but still valid units.
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitTooltip
|arg1 = {{type|number}} unitID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|string}} tooltip
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitDefID
|arg1 = {{type|number}} unitID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} unitDefID
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitTeam
|arg1 = {{type|number}} unitID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} teamID
|info = Gets which team a unit belongs to. Note that this still returns the old team when called from the UnitTaken / UnitGiven callins.
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitAllyTeam
|arg1 = {{type|number}} unitID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} allyID
|info = 
}}



{{LuaCallout
|prefix = Spring.
|name = GetUnitLineage
|arg1 = {{type|number}} unitID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} lineage {{pipe}} {{type|number}} lineage, {{type|bool}} lineageIsRoot
|info = {{Removed|83.0}}
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitNeutral
|arg1 = {{type|number}} unitID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|bool}} neutral
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitHealth
|arg1 = {{type|number}} unitID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} health, {{type|number}} maxHealth, {{type|number}} paralyzeDamage, {{type|number}} captureProgress, {{type|number}} buildProgress
|info = Build progress is returned as floating point number between 0.0 and 1.0.
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitArmored
|arg1 = {{type|number}} unitID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|bool}} armored, {{type|number}} armorMultiple
|info = armorMultiple new in version 0.83.x.
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitIsStunned
|arg1 = {{type|number}} unitID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|bool}} stunned_or_inbuild, {{type|bool}} stunned, {{type|bool}} inbuild
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitMaxRange
|arg1 = {{type|number}} unitID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} maxEngagementRange
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitResources
|arg1 = {{type|number}} unitID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} metalMake, {{type|number}} metalUse, {{type|number}} energyMake, {{type|number}} energyUse
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitHarvestStorage
|arg1 = {{type|number}} unitID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} metal
|info = See also {{xtaglink|Gamedev:UnitDefs|harvestStorage}} UnitDef tag.
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitMetalExtraction
|arg1 = {{type|number}} unitID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} metalExtraction
|info = 0.82+ and later
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitExperience
|arg1 = {{type|number}} unitID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} experience
|info = 0.82+ and later
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitStates
|arg1 = {{type|number}} unitID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|table}} unitStates
|info = The unitStates table arguments are:
}}
&lt;pre&gt;unitStates = {
    &quot;firestate&quot; = number,
    &quot;movestate&quot; = number,
    &quot;repeat&quot; = boolean,
    &quot;cloak&quot; = boolean,
    &quot;active&quot; = boolean,
    &quot;trajectory&quot; = boolean,
    [&quot;autoland&quot; = boolean,]
    [&quot;autorepairlevel&quot; = number,]
    [&quot;loopbackattack&quot; = boolean]
  } &lt;/pre&gt;


{{LuaCallout
|prefix = Spring.
|name = GetUnitIsActive
|arg1 = {{type|number}} unitID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|bool}} active
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitIsCloaked
|arg1 = {{type|number}} unitID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|bool}} isCloaked
|info = 
}}



{{LuaCallout
|prefix = Spring.
|name = GetUnitSelfDTime
|arg1 = {{type|number}} unitID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} time
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitStockpile
|arg1 = {{type|number}} unitID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} numStockpiled, {{type|number}} numStockpileQued, {{type|number}} buildPercent
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitHeight
|arg1 = {{type|number}} unitID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} height
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitRadius
|arg1 = {{type|number}} unitID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} radius
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitMass
|arg1 = {{type|number}} unitID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} mass
|info = {{new|101.0}}
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitBlocking
|arg1 = {{type|number}} unitID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|bool}} isBlocking, {{type|bool}} isSolidObjectCollidable, {{type|bool}} isProjectileCollidable, {{type|bool}} isRaySegmentCollidable, {{type|bool}} crushable, {{type|bool}} blockEnemyPushing, {{type|bool}} blockHeightChanges
|info = {{new|95.0}}&lt;br&gt;Additional output arguments.
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitPosition
|arg1 = {{type|number}} unitID {{bracket}}
|arg2 = {{type|bool}} midPos {{bracket}}
|arg3 = {{type|bool}} aimPos {{rbracket}}{{rbracket}}
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} basePointX, {{type|number}} basePointY, {{type|number}} basePointZ {{bracket}}, {{type|number}} midPointX, {{type|number}} midPointY, {{type|number}} midPointZ {{bracket}}, {{type|number}} aimPointX, {{type|number}} aimPointY, {{type|number}} aimPointZ {{rbracket}}{{rbracket}}
|info = Since 89.0, returns the base (default), middle or aim position of the unit.
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitBasePosition
|arg1 = {{type|number}} unitID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} posX, {{type|number}} posY, {{type|number}} posZ
|info = {{Removed|89.0}} Use GetUnitPosition instead. Returned the bottom of the unit.
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitDirection
|arg1 = {{type|number}} unitID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} dirX, {{type|number}} dirY, {{type|number}} dirZ
|info = Returns the direction vector.
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitHeading
|arg1 = {{type|number}} unitID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} heading
|info = Returns heading directions used in COB scripts.
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitRotation
|arg1 = {{type|number}} unitID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} pitch, {{type|number}} yaw, {{type|number}} roll
|info = {{New|95.0}}
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitVelocity
|arg1 = {{type|number}} unitID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} velX, {{type|number}} velY, {{type|number}} velZ, {{type|number}} velLength
|info = VelLength new in 95.0, it returns the velocity length in one frame. Multiply by 30 (game frames/s) to get an equivalent to unitDef.speed.
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitBuildFacing
|arg1 = {{type|number}} unitID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} facing
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitIsBuilding
|arg1 = {{type|number}} unitID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} unitID
|info = Returns what unit a constructor/factory is currently building.
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitCurrentBuildPower
|arg1 = {{type|number}} unitID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} buildPower
|info = {{new|92.0}}
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitNanoPieces
|arg1 = {{type|number}} unitID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} { {{bracket|1}} = {{type|number}} piece1, etc ... }
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitTransporter
|arg1 = {{type|number}} unitID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} unitID
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitIsTransporting
|arg1 = {{type|number}} unitID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} { {{bracket|1}} = {{type|number}} unitID, etc ... }
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitShieldState
|arg1 = {{type|number}} unitID {{bracket}}
|arg2 = {{type|number}} weaponID = -1 {{rbracket}}
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} isEnabled, {{type|number}} curPower
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitTravel
|arg1 = {{type|number}} unitID 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} travel, {{type|number}} travelPeriod
|info = Marked as deprecated.
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitFuel
|arg1 = {{type|number}} unitID 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} fuel
|info = Marked as deprecated.
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitFlanking
|arg1 = {{type|number}} unitID 
|arg2 = {{type|string}} &quot;dir&quot;
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} x, {{type|number}} y, {{type|number}} z
|info = 
}}

or

{{LuaCallout
|prefix = Spring.
|name = GetUnitFlanking
|arg1 = {{type|number}} unitID 
|arg2 = {{type|string}} &quot;mode&quot; {{pipe}} {{type|string}} &quot;dir&quot; {{pipe}} {{type|string}} &quot;moveFactor&quot; {{pipe}} {{type|string}} &quot;minDamage&quot; {{pipe}} {{type|string}} &quot;maxDamage&quot;
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} flankingBonusMode {{pipe}} {{type|number}} flankingBonusDir.x, {{type|number}} flankingBonusDir.y, {{type|number}} flankingBonusDir.z {{pipe}} {{type|number}} flankingBonusMobilityAdd {{pipe}} {{type|number}} minDamage {{pipe}} {{type|number}} maxDamage
|info = 
}}

or

{{LuaCallout
|prefix = Spring.
|name = GetUnitFlanking
|arg1 = {{type|number}} unitID 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} mode, {{type|number}} modilityAdd, {{type|number}} minDamage, {{type|number}} maxDamage, {{type|number}} dirX, {{type|number}} dirY, {{type|number}} dirZ
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitSensorRadius
|arg1 = {{type|number}} unitID
|arg2 = {{type|string}} type
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} radius
|info = Possible types are:&lt;br&gt;los, airLos, radar, sonar, seismic, radarJammer, sonarJammer
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitLosState
|arg1 = {{type|number}} unitID {{bracket}}
|arg2 = {{type|number}} allyTeamID {{bracket}}
|arg3 = {{type|bool}} raw {{rbracket}}{{rbracket}}
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} raw {{pipe}} {{bracket}} {{type|string}} &quot;los&quot; = true {{bracket}}, {{type|string}} &quot;radar&quot; = true {{bracket}}, {{type|string}} &quot;typed&quot; = true {{rbracket}}{{rbracket}}{{rbracket}}
|info = Raw is only available in gadgets. And RAW returns an bitmask integer, where the bits are: &lt;br&gt; 1: LOS_INLOS,  the unit is currently in the los of the allyteam, &lt;br&gt; 2: LOS_INRADAR the unit is currently in radar from the allyteam, &lt;br&gt; 4: LOS_PREVLOS  the unit has previously been in los from the allyteam, &lt;br&gt; 8: LOS_CONTRADAR  the unit has continuously been in radar since it was last inlos by the allyteam
}}



{{LuaCallout
|prefix = Spring.
|name = GetUnitSeparation
|arg1 = {{type|number}} unitID1 
|arg2 = {{type|number}} unitID2 {{bracket}} 
|arg3 = {{type|bool}} 2D {{bracket}}
|arg4 = {{type|bool}} surfaceDist {{rbracket}}{{rbracket}}
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} distance
|info = SurfaceDist new in 95.0. Returns the distance of two units. SurfaceDist calculates the distance between the unitsphere surfaces instead of their midpos.
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitFeatureSeparation
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} featureID {{bracket}} 
|arg3 = {{type|bool}} 2D {{rbracket}}
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} distance
|info = {{new|101.0}}
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitDefDimensions
|arg1 = {{type|number}} unitDefID 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|table}} defDimensions
|info = DefDimensions table arguments are:
}}
&lt;pre&gt;defDimensions =    {
      &quot;height&quot; = number,
      &quot;radius&quot; = number,
      &quot;midx&quot;   = number,
      &quot;minx&quot;   = number,
      &quot;maxx&quot;   = number,
      &quot;midy&quot;   = number,
      &quot;miny&quot;   = number,
      &quot;maxy&quot;   = number,
      &quot;midz&quot;   = number,
      &quot;minz&quot;   = number,
      &quot;maxz&quot;   = number
    }&lt;/pre&gt;


{{LuaCallout
|prefix = Spring.
|name = GetUnitLastAttacker
|arg1 = {{type|number}} unitID 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} unitID
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitLastAttackedPiece
|arg1 = {{type|number}} unitID 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|string}} pieceName, {{type|number}} gameframe
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitMoveTypeData
|arg1 = {{type|number}} unitID 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|table}} movetypeData
|info = 
}}



{{LuaCallout
|prefix = Spring.
|name = GetUnitCollisionVolumeData
|arg1 = {{type|number}} unitID 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} scaleX, {{type|number}} scaleY, {{type|number}} scaleZ, {{type|number}} offsetX, {{type|number}} offsetY, {{type|number}} offsetZ, {{type|number}} volumeType, {{type|number}} testType, {{type|number}} primaryAxis, {{type|bool}} disabled
|info = 
}}

==== Unit Weapon Informations ====

{{LuaCallout
|prefix = Spring.
|name = GetUnitWeaponState
|arg1 = {{type|number}} unitID 
|arg2 = {{type|number}} weaponNum
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|bool}} angleGood, {{type|bool}} loaded, {{type|number}} reloadFrame, {{type|number}} salvoLeft, {{type|number}} numStockpiled
|info = 
}}

or

{{LuaCallout
|prefix = Spring.
|name = GetUnitWeaponState
|arg1 = {{type|number}} unitID 
|arg2 = {{type|number}} weaponNum
|arg3 = {{type|string}} tag
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} tagVariable
|info = String argument &quot;tag&quot; can return a specific variable. Possible tags are:
}}
&lt;pre&gt;  &quot;reloadState&quot; == &quot;reloadFrame&quot;
  &quot;reloadTime&quot;
  &quot;accuracy&quot;
  &quot;sprayAngle&quot;
  &quot;range&quot;
  &quot;projectileSpeed&quot;
  &quot;burst&quot;
  &quot;burstRate&quot;
  &quot;projectiles&quot;

  The following 4 tags were added in 104.0:
  &quot;salvoError&quot;
  &quot;salvoLeft&quot;
  &quot;nextSalvo&quot;
  &quot;targetMoveError&quot;&lt;/pre&gt;


{{LuaCallout
|prefix = Spring.
|name = GetUnitWeaponDamages
|arg1 = {{type|number}} unitID 
|arg2 = {{type|number}} weaponNum {{pipe}} {{type|string}} &quot;selfDestruct&quot; {{pipe}} {{type|string}} &quot;explode&quot;
|arg3 = {{type|string}} tag
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} tagVariable
|info = String argument &quot;tag&quot; can return a specific variable. Possible tags are:
}}
&lt;pre&gt;  &quot;paralyzeDamageTime&quot;
  &quot;impulseFactor&quot;
  &quot;impulseBoost&quot;
  &quot;craterMult&quot;
  &quot;craterBoost&quot;
  &quot;dynDamageExp&quot;
  &quot;dynDamageMin&quot;
  &quot;dynDamageRange&quot;
  &quot;dynDamageInverted&quot;
  &quot;craterAreaOfEffect&quot;
  &quot;damageAreaOfEffect&quot;
  &quot;edgeEffectiveness&quot;
  &quot;explosionSpeed&quot;
  - or -
  an armor type index to get the damage against it.&lt;/pre&gt;


{{LuaCallout
|prefix = Spring.
|name = GetUnitWeaponVectors
|arg1 = {{type|number}} unitID 
|arg2 = {{type|number}} weaponNum 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} posX, {{type|number}} posY, {{type|number}} posZ, {{type|number}} dirX, {{type|number}} dirY, {{type|number}} dirZ
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitWeaponTryTarget
|arg1 = {{type|number}} unitID 
|arg2 = {{type|number}} weaponNum 
|arg3 = {{type|number}} targetID {{pipe}} {{type|number}} posX, {{type|number}} posY, {{type|number}} posZ
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|bool}} success
|info = {{new|94.0}}&lt;br&gt;For a position it just checks if the weapon can attackGround. For a unit existance, category, death status, crashing status, LOS status, neutral status, ally status and transport status are checked.
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitWeaponTestTarget
|arg1 = {{type|number}} unitID 
|arg2 = {{type|number}} weaponNum 
|arg3 = {{type|number}} targetID {{pipe}} {{type|number}} posX, {{type|number}} posY, {{type|number}} posZ
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|bool}} success
|info = {{new|94.0}}&lt;br&gt;Checks TryTarget, TestRange, and that weapon emit point is not below ground, then checks FreeLineOfFire.
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitWeaponTestRange
|arg1 = {{type|number}} unitID 
|arg2 = {{type|number}} weaponNum 
|arg3 = {{type|number}} targetID {{pipe}} {{type|number}} posX, {{type|number}} posY, {{type|number}} posZ
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|bool}} success
|info = {{new|94.0}}&lt;br&gt;Checks if target is in range including height modifiers and cylinder targeting if set.
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitWeaponHaveFreeLineOfFire
|arg1 = {{type|number}} unitID 
|arg2 = {{type|number}} weaponNum 
|arg3 = {{type|number}} targetID {{pipe}} {{type|number}} posX, {{type|number}} posY, {{type|number}} posZ
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|bool}} success
|info = {{new|94.0}}&lt;br&gt;Runs a raytrace from unit aimpoint respecting collision flags.
}}

or

{{LuaCallout
|prefix = Spring.
|name = GetUnitWeaponHaveFreeLineOfFire
|arg1 = {{type|number}} unitID 
|arg2 = {{type|number}} weaponNum 
|arg3 = {{type|number}} targetID {{pipe}} {{bracket}} {{type|number}} srcPosX {{bracket}}
|arg4 = {{type|number}} srcPosY {{bracket}}
|arg5 = {{type|number}} srcPosZ {{bracket}}
|arg6 = {{type|number}} tgtPosX {{bracket}}
|arg7 = {{type|number}} tgtPosY {{bracket}}
|arg8 = {{type|number}} tgtPosZ {{rbracket}}{{rbracket}}{{rbracket}}{{rbracket}}{{rbracket}}{{rbracket}}
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|bool}} success
|info = {{new|104.0}}&lt;br&gt;The param list was changed so that the source firing position can also be passed.
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitWeaponCanFire
|arg1 = {{type|number}} unitID 
|arg2 = {{type|number}} weaponNum 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|bool}} canFire
|info = {{new|95.0}}
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitWeaponTarget
|arg1 = {{type|number}} unitID 
|arg2 = {{type|number}} weaponNum 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} 0 {{pipe}} {{type|number}} 1, {{type|bool}} isUserTarget, {{type|number}} unitID {{pipe}} {{type|number}} 2, {{type|bool}} isUserTarget, { {{type|number}} posX, {{type|number}} posY, {{type|number}} posZ } {{pipe}} {{type|number}} 3, {{type|bool}} isUserTarget, {{type|number}} projectileID
|info = {{new|95.0}}&lt;br&gt;Returned number of args is always 3 if targetType != None.
}}


{{LuaCallout
|prefix = Spring.
|name = GetRadarErrorParams
|arg1 = {{type|number}} allyTeamID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} allyteamErrorSize, {{type|number}} baseErrorSize, {{type|number}} baseErrorMult
|info = {{new|95.0}}
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitPosErrorParams
|arg1 = {{type|number}} unitID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} posErrorVector.x, {{type|number}} posErrorVector.y, {{type|number}} posErrorVector.z, {{type|number}} posErrorDelta.x, {{type|number}} posErrorDelta.y, {{type|number}} posErrorDelta.z, {{type|number}} nextPosErrorUpdatebaseErrorMult
|info = {{new|95.0}}
}}

==== Unit LOS ====

{{LuaCallout
|prefix = Spring.
|name = IsUnitInLos
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} allyID 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|bool}} inLOS
|info = {{new|101.0}}
}}


{{LuaCallout
|prefix = Spring.
|name = IsUnitInAirLos
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} allyID 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|bool}} inAirLOS
|info = {{new|101.0}}
}}


{{LuaCallout
|prefix = Spring.
|name = IsUnitInRadar
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} allyID 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|bool}} inRadar
|info = {{new|101.0}}
}}


{{LuaCallout
|prefix = Spring.
|name = IsUnitInJammer
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} allyID 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|bool}} inJammer
|info = {{new|101.0}}
}}

=== Unit Pieces ===

{{LuaCallout
|prefix = Spring.
|name = GetUnitVectors
|arg1 = {{type|number}} unitID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} { {{type|number}} frontX, {{type|number}} frontY, {{type|number}} frontZ } , { {{type|number}} upX, {{type|number}} upY, {{type|number}} upZ } , { {{type|number}} rightX, {{type|number}} rightY, {{type|number}} rightZ }
|info = {{new|101.0}}
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitPiecePosition
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} piece 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|number}} posX, {{type|number}} posY, {{type|number}} posZ
|info = Returns piece position in unit space. Also remember to multiply the x-axis value with -1 if you want to move a piece to another piece.
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitPieceDirection
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} piece 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|number}} dirX, {{type|number}} dirY, {{type|number}} dirZ
|info = Fixed since 101. Now returns the same direction as Spring.GetUnitPiecePosDir.
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitPiecePosDir
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} pieceNum 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} posX, {{type|number}} posY, {{type|number}} posZ, {{type|number}} dirX, {{type|number}} dirY, {{type|number}} dirZ
|info = Returns piece position and direction in world space. The direction (dirX, dirY, dirZ) is not necessarily normalized. The position is defined as the position of the first vertex of the piece and it defines direction as the direction in which the line from the first vertex to the second vertex points.
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitPieceMatrix
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} piece
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = { {{bracket|1}} = {{type|number}}, ... , {{bracket|16}} = {{type|number}} }
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitPieceList
|arg1 = {{type|number}} unitID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = { {{bracket|1}} = {{type|string}} &quot;piecename&quot;, ... , {{bracket|pieceNumN}} = {{type|string}} &quot;piecename&quot; }
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitPieceMap
|arg1 = {{type|number}} unitID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = { {{type|string}} &quot;piecename1&quot; = {{type|number}} pieceNum1, ... , {{type|string}} &quot;piecenameN&quot; = {{type|number}} pieceNumN }
|info = 
}}



{{LuaCallout
|prefix = Spring.
|name = GetUnitPieceInfo
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} piece 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|table}} pieceInfo
|info = {{new|95.0}} &quot;parent&quot; field&lt;br&gt;{{new|101.0}} parent for root pieces is now &quot;[null]&quot; instead of &quot;&quot;&lt;br&gt; table pieceInfo contains:
}}
&lt;pre&gt;pieceInfo = {
    &quot;name&quot;     = string &quot;piecename&quot;,
    &quot;isEmpty&quot;  = boolean,
    &quot;children&quot; = { [1] = string &quot;piecename&quot;, ... },
    &quot;min&quot;      = { [1] = number x, [2] = number y, [3] = number z },
    &quot;max&quot;      = { [1] = number x, [2] = number y, [3] = number z },
    &quot;offset&quot;   = { [1] = number x, [2] = number y, [3] = number z }, 
    &quot;parent&quot; = string &quot;parentpiecename&quot;,   
  }&lt;/pre&gt;



{{LuaCallout
|prefix = Spring.
|name = GetUnitScriptPiece
|arg1 = {{type|number}} unitID {{bracket}}
|arg2 = {{type|number}} scriptPiece {{rbracket}}
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{bracket}} {{type|number}} scriptPieceNum = {{type|number}} modelPieceNum {{rbracket}} {{pipe}} {{type|number}} modelPieceNum
|info = This functions translate the COB ScriptPiece numbers into the ModelPiece numbers (the set of ScriptPieces is a subset of the ModelPieces, means #ScriptPieces &lt;= #ModelPieces), which is used in all other functions (the &quot;number piece&quot; means always the modelpiece). So if you get a pieceID via Cob2Lua you have to translate it with this function. Btw. the COB ScriptPiece number is equal with the piece position in the &lt;i&gt;piece&lt;/i&gt; definition in your cob/bos.
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitScriptNames
|arg1 = {{type|number}} unitID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = { {{type|string}} &quot;cobpiecename1&quot; = {{type|number}} ScriptPieceNum1, ... , {{type|string}} &quot;cobpiecenameN&quot; = {{type|number}} ScriptPieceNumN }
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitPieceCollisionVolumeData
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} pieceID
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|number}} scaleX,{{type|number}} scaleY, {{type|number}} scaleZ, {{type|number}} offsetX, {{type|number}} offsetY, {{type|number}} offsetZ, {{type|number}} volumeType, {{type|number}} testType, {{type|number}} primaryAxis, {{type|bool}} disabled
|info = As of 101.0 this is 1-based piece index argument (was 0-based).
}}

=== CommandQueues ===

Spring.GetCommandQueue function is identical to Spring.GetUnitCommands function. Here only Spring.GetUnitCommands will be listed:

{{LuaCallout
|prefix = Spring.
|name = GetUnitCommands
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} count = 0
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} commandQueueSize 
|info = 
}}

or

{{LuaCallout
|prefix = Spring.
|name = GetUnitCommands
|arg1 = {{type|number}} unitID {{bracket}}
|arg2 = {{type|number}} count = -1 {{rbracket}}
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|table}} commandQueueTable 
|info = This function can trigger an error if called too often without passing a second parameter. Refer to [https://github.com/spring/spring/blob/92c54d5b15775c39a8c67b203c28fe9b9db51cea/rts/Lua/LuaSyncedRead.cpp#L3983-L3996 LuaSyncedRead.cpp#L3983-L3996].&lt;br&gt;CommandQueueTable table arguments are:
}}
&lt;pre&gt;commandQueueTable = {
     [1] = {
       &quot;id&quot;      = number,
       &quot;params&quot;  = { [1] = number, ...},
       &quot;options&quot; = {
         &quot;coded&quot;    = number,
         &quot;alt&quot;      = boolean,
         &quot;ctrl&quot;     = boolean,
         &quot;shift&quot;    = boolean,
         &quot;right&quot;    = boolean,
         &quot;internal&quot; = boolean,
         &quot;meta&quot;    = boolean
       }
     }, ...
   }&lt;/pre&gt;


{{LuaCallout
|prefix = Spring.
|name = GetFullBuildQueue
|arg1 = {{type|number}} unitID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|table}} buildOrders = { {{bracket|1}} = { {{bracket}}{{type|number}} unitDefID{{rbracket}} = {{type|number}} count },  etc... }
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetRealBuildQueue
|arg1 = {{type|number}} unitID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|table}} buildOrders = { {{bracket|1}} = { {{bracket}}{{type|number}} unitDefID{{rbracket}} = {{type|number}} count },  etc... }
|info = Cleans the buildqueue of things the unit can't build itself.
}}



{{LuaCallout
|prefix = Spring.
|name = GetFactoryCommands
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} count = 0 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} commandQueueSize 
|info =
}}

or

{{LuaCallout
|prefix = Spring.
|name = GetFactoryCommands
|arg1 = {{type|number}} unitID {{bracket}}
|arg2 = {{type|number}} count = -1 {{rbracket}}
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|table}} commandQueueTable 
|info = CommandQueueTable table arguments are:
}}
&lt;pre&gt;commandQueueTable = {
     [1] = {
       &quot;id&quot;      = number,
       &quot;params&quot;  = { [1] = number, ...},
       &quot;options&quot; = {
         &quot;coded&quot;    = number,
         &quot;alt&quot;      = boolean,
         &quot;ctrl&quot;     = boolean,
         &quot;shift&quot;    = boolean,
         &quot;right&quot;    = boolean,
         &quot;internal&quot; = boolean,
         &quot;meta&quot;    = boolean
       }
     }, ...
   }&lt;/pre&gt;


{{LuaCallout
|prefix = Spring.
|name = GetFactoryCounts
|arg1 = {{type|number}} unitID {{bracket}}
|arg2 = {{type|number}} count {{bracket}}
|arg3 = {{type|bool}} addCMDs {{rbracket}}{{rbracket}}
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|table}} commandQueueTable = { {{bracket|2}} = { {{bracket}}{{type|number}} unitDefID {{pipe}} {{type|number}} -cmdID{{rbracket}} = {{type|number}} count }, ...   }
|info = Gets the buildqueue of a factory.
}}

=== Command Descriptions/Buttons ===

{{LuaCallout
|prefix = Spring.
|name = GetUnitCmdDescs
|arg1 = {{type|number}} unitID {{bracket}}
|arg2 = {{type|number}} startIndex {{bracket}}
|arg3 = {{type|number}} endIndex {{rbracket}}{{rbracket}}
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|table}} commandDescTable
|info = CommandDescTable arguments are:
}}
&lt;pre&gt;commandDescTable = {
      [1] = {
        &quot;id&quot;          = number,
        &quot;type&quot;        = number,
        &quot;name&quot;        = string,
        &quot;action&quot;      = string,
        &quot;tooltip&quot;     = string,
        &quot;texture&quot;     = string,
        &quot;cursor&quot;      = string,
        &quot;hidden&quot;      = boolean,
        &quot;disabled&quot;    = boolean,
        &quot;showUnique&quot;  = boolean,
        &quot;onlyTexture&quot; = boolean,

        &quot;params&quot;      = { [1] = string, ... }
     }, ...
   }&lt;/pre&gt;


{{LuaCallout
|prefix = Spring.
|name = FindUnitCmdDesc
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} cmdID 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} index
|info = 
}}

== Features ==
=== GetFeatures ===

{{LuaCallout
|prefix = Spring.
|name = GetFeaturesInRectangle
|arg1 = {{type|number}} xMin
|arg2 = {{type|number}} zMin
|arg3 = {{type|number}} xMax
|arg4 = {{type|number}} zMax 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|table}} featureTable = { {{bracket|1}} = {{type|number}} featureID, etc... }
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetFeaturesInSphere
|arg1 = {{type|number}} x
|arg2 = {{type|number}} y
|arg3 = {{type|number}} z
|arg4 = {{type|number}} radius
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|table}} featureTable = { {{bracket|1}} = {{type|number}} featureID, etc... }
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetFeaturesInCylinder
|arg1 = {{type|number}} x
|arg2 = {{type|number}} z
|arg3 = {{type|number}} radius
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|table}} featureTable = { {{bracket|1}} = {{type|number}} featureID, etc... }
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetAllFeatures
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|table}} featureTable = { {{bracket|1}} = {{type|number}} featureID, etc... }
|info = 
}}

=== Feature Informations ===

{{LuaCallout
|prefix = Spring.
|name = ValidFeatureID
|arg1 = {{type|number}} featureID 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|bool}} isValid
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetFeatureDefID
|arg1 = {{type|number}} featureID 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} featureDefID
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetFeatureTeam
|arg1 = {{type|number}} featureID 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} teamID
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetFeatureAllyTeam
|arg1 = {{type|number}} featureID 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} allyID
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetFeatureHealth
|arg1 = {{type|number}} featureID 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} health, {{type|number}} maxHealth, {{type|number}} resurrectProgress
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetFeatureHeight
|arg1 = {{type|number}} featureID 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} height
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetFeatureRadius
|arg1 = {{type|number}} featureID 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} radius
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetFeatureMass
|arg1 = {{type|number}} featureID 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} mass
|info = {{new|101.0}}
}}



{{LuaCallout
|prefix = Spring.
|name = GetFeatureSeparation
|arg1 = {{type|number}} featureID1
|arg2 = {{type|number}} featureID2 {{bracket}}
|arg3 = {{type|bool}} 2D {{rbracket}}
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} distance
|info = {{new|101.0}}
}}


{{LuaCallout
|prefix = Spring.
|name = GetFeaturePosition
|arg1 = {{type|number}} featureID {{bracket}}
|arg2 = {{type|bool}} midPos {{bracket}}
|arg3 = {{type|bool}} aimPos {{rbracket}}{{rbracket}}
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} bpX, {{type|number}} bpY, {{type|number}} bpZ {{bracket}}, {{type|number}} mpX, {{type|number}} mpY, {{type|number}} mpZ {{bracket}}, {{type|number}} apX, {{type|number}} apY, {{type|number}} apZ {{rbracket}}{{rbracket}}
|info = Since 89.0, returns the base (default), middle or aim position of the feature.
}}


{{LuaCallout
|prefix = Spring.
|name = GetFeatureVelocity
|arg1 = {{type|number}} featureID {{bracket}}
|arg2 = {{type|bool}} norm {{rbracket}}
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} velX, {{type|number}} velY, {{type|number}} velZ, {{type|number}} velLength
|info = {{new|95.0}}
}}



{{LuaCallout
|prefix = Spring.
|name = GetFeatureDirection
|arg1 = {{type|number}} featureID 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} dirX, {{type|number}} dirY, {{type|number}} dirZ
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetFeatureRotation
|arg1 = {{type|number}} featureID 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} pitch, {{type|number}} yaw, {{type|number}} roll
|info = {{New|101.0}}
}}


{{LuaCallout
|prefix = Spring.
|name = GetFeatureHeading
|arg1 = {{type|number}} featureID 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} heading
|info = 
}}



{{LuaCallout
|prefix = Spring.
|name = GetFeatureResources
|arg1 = {{type|number}} featureID 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} RemainingMetal, {{type|number}} maxMetal, {{type|number}} RemainingEnergy, {{type|number}} maxEnergy, {{type|number}} reclaimLeft, {{type|number}} reclaimTime
|info = reclaimTime {{new|105.0}}
}}


{{LuaCallout
|prefix = Spring.
|name = GetFeatureNoSelect
|arg1 = {{type|number}} featureID 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|bool}} noSelect
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetFeatureResurrect
|arg1 = {{type|number}} featureID 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|string}} UnitDefName, {{type|number}} buildFacing
|info = 
}}



{{LuaCallout
|prefix = Spring.
|name = GetFeatureCollisionVolumeData
|arg1 = {{type|number}} featureID 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} scaleX, {{type|number}} scaleY, {{type|number}} scaleZ, {{type|number}} offsetX, {{type|number}} offsetY, {{type|number}} offsetZ, {{type|number}} volumeType, {{type|number}} testType, {{type|number}} primaryAxis, {{type|bool}} disabled
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetFeaturePieceCollisionVolumeData
|arg1 = {{type|number}} featureID 
|arg2 = {{type|number}} pieceID
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} scaleX, {{type|number}} scaleY, {{type|number}} scaleZ, {{type|number}} offsetX, {{type|number}} offsetY, {{type|number}} offsetZ, {{type|number}} volumeType, {{type|number}} testType, {{type|number}} primaryAxis, {{type|bool}} disabled
|info = {{new|101.0}}
}}


{{LuaCallout
|prefix = Spring.
|name = GetFeatureBlocking
|arg1 = {{type|number}} featureID 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|bool}} isBlocking, {{type|bool}} isSolidObjectCollidable, {{type|bool}} isProjectileCollidable, {{type|bool}} isRaySegmentCollidable, {{type|bool}} crushable, {{type|bool}} blockEnemyPushing, {{type|bool}} blockHeightChanges
|info = {{new|95.0}}
}}

=== Feature Pieces ===

Works analogue to #Unit_Pieces

{{LuaCallout
|prefix = Spring.
|name = GetFeatureLastAttackedPiece
|arg1 = {{type|number}} featureID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|string}} pieceName, {{type|number}} gameframe
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetFeaturePieceMap
|arg1 = {{type|number}} featureID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = { {{type|string}} &quot;piecename1&quot; = {{type|number}} pieceNum1, ... , {{type|string}} &quot;piecenameN&quot; = {{type|number}} pieceNumN }
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetFeaturePieceList
|arg1 = {{type|number}} featureID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = { {{bracket|1}} = {{type|string}} &quot;piecename&quot;, ... , {{bracket|pieceNumN}} = {{type|string}} &quot;piecename&quot; }
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetFeaturePieceInfo
|arg1 = {{type|number}} featureID
|arg2 = {{type|number}} piece 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|table}} pieceInfo
|info = {{new|95.0}} &quot;parent&quot; field&lt;br&gt;{{new|101.0}} parent for root pieces is now &quot;[null]&quot; instead of &quot;&quot;&lt;br&gt; table pieceInfo contains:
}}
&lt;pre&gt;pieceInfo = {
    &quot;name&quot;     = string &quot;piecename&quot;,
    &quot;isEmpty&quot;  = boolean,
    &quot;children&quot; = { [1] = string &quot;piecename&quot;, ... },
    &quot;min&quot;      = { [1] = number x, [2] = number y, [3] = number z },
    &quot;max&quot;      = { [1] = number x, [2] = number y, [3] = number z },
    &quot;offset&quot;   = { [1] = number x, [2] = number y, [3] = number z }, 
    &quot;parent&quot; = string &quot;parentpiecename&quot;,   
  }&lt;/pre&gt;


{{LuaCallout
|prefix = Spring.
|name = GetFeaturePiecePosition
|arg1 = {{type|number}} featureID
|arg2 = {{type|number}} piece 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|number}} posX, {{type|number}} posY, {{type|number}} posZ
|info = Returns piece position in unit space. Also remember to multiply the x-axis value with -1 if you want to move a piece to another piece.
}}


{{LuaCallout
|prefix = Spring.
|name = GetFeaturePieceDirection
|arg1 = {{type|number}} featureID
|arg2 = {{type|number}} piece 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|number}} dirX, {{type|number}} dirY, {{type|number}} dirZ
|info = Fixed since 101. Now returns the same direction as Spring.GetUnitPiecePosDir.
}}


{{LuaCallout
|prefix = Spring.
|name = GetFeaturePiecePosDir
|arg1 = {{type|number}} featureID
|arg2 = {{type|number}} pieceNum 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} posX, {{type|number}} posY, {{type|number}} posZ, {{type|number}} dirX, {{type|number}} dirY, {{type|number}} dirZ
|info = Returns piece position and direction in world space. The direction (dirX, dirY, dirZ) is not necessarily normalized. The position is defined as the position of the first vertex of the piece and it defines direction as the direction in which the line from the first vertex to the second vertex points.
}}


{{LuaCallout
|prefix = Spring.
|name = GetFeaturePieceMatrix
|arg1 = {{type|number}} featureID
|arg2 = {{type|number}} piece
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = { {{bracket|1}} = {{type|number}}, ... , {{bracket|16}} = {{type|number}} }
|info = 
}}

== COB ==

{{LuaCallout
|prefix = Spring.
|name = GetCOBUnitVar
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} varID {{bracket}}
|arg3 = {{type|bool}} unpack = false {{rbracket}}
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} value {{pipe}} {{type|number}} unpackedX, {{type|number}} unpackedY
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetCOBTeamVar
|arg1 = {{type|number}} teamID
|arg2 = {{type|number}} varID {{bracket}}
|arg3 = {{type|bool}} unpack = false {{rbracket}}
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} value {{pipe}} {{type|number}} unpackedX, {{type|number}} unpackedY
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetCOBAllyTeamVar
|arg1 = {{type|number}} allyID
|arg2 = {{type|number}} varID {{bracket}}
|arg3 = {{type|bool}} unpack = false {{rbracket}}
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} value {{pipe}} {{type|number}} unpackedX, {{type|number}} unpackedY
|info = 
}}



{{LuaCallout
|prefix = Spring.
|name = GetCOBGlobalVar
|arg1 = {{type|number}} varID {{bracket}}
|arg2 = {{type|bool}} unpack = false {{rbracket}}
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} value {{pipe}} {{type|number}} unpackedX, {{type|number}} unpackedY
|info = 
}}

== Ground ==
&lt;font color=&quot;#55ee99&quot;&gt;Elevation is y. Water level is always at y=0. Ground height can be changed during play (terraform or deformation).&lt;/font&gt;

{{LuaCallout
|prefix = Spring.
|name = GetGroundHeight
|arg1 = {{type|number}} x
|arg2 = {{type|number}} z
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|number}} y
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetGroundOrigHeight
|arg1 = {{type|number}} x
|arg2 = {{type|number}} z
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|number}} y
|info = This returns the ground's original height (i.e. before terraforming) at a given x,z position.
}}


{{LuaCallout
|prefix = Spring.
|name = GetGroundNormal
|arg1 = {{type|number}} x
|arg2 = {{type|number}} z {{bracket}}
|arg3 = {{type|bool}} smoothedNormal = false {{rbracket}}
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|number}} x, {{type|number}} y, {{type|number}} z, {{type|number}} slope
|info = {{new|100.0}}: smoothedNormal and slope
}}


{{LuaCallout
|prefix = Spring.
|name = GetGroundInfo
|arg1 = {{type|number}} x
|arg2 = {{type|number}} z
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|string}} &quot;Type&quot;, {{type|number}} metal, {{type|number}} hardness, {{type|number}} tankSpeed, {{type|number}} kbotSpeed, {{type|number}} hoverSpeed, {{type|number}} shipSpeed, {{type|bool}} receiveTracks
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetGroundBlocked
|arg1 = {{type|number}} x
|arg2 = {{type|number}} z
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|string}} &quot;feature&quot;, {{type|number}} featureID {{pipe}} {{type|string}} &quot;unit&quot;, {{type|number}} unitID
|info = 
}}

or

{{LuaCallout
|prefix = Spring.
|name = GetGroundBlocked
|arg1 = {{type|number}} x1
|arg2 = {{type|number}} z1
|arg3 = {{type|number}} x2
|arg4 = {{type|number}} z2
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|string}} &quot;feature&quot;, {{type|number}} featureID {{pipe}} {{type|string}} &quot;unit&quot;, {{type|number}} unitID
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetGroundExtremes
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} minHeight, {{type|number}} maxHeight
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetSmoothMeshHeight
|arg1 = {{type|number}} x
|arg2 = {{type|number}} z
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|number}} y
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetMetalMapSize
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|number}} sizeX, {{type|number}} sizeY
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetMetalAmount
|arg1 = {{type|number}} x
|arg2 = {{type|number}} z
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|number}} metalAmount 
|info = With x &amp; z in metal map coordinates (worldspace/16)
}}



{{LuaCallout
|prefix = Spring.
|name = GetMetalExtraction
|arg1 = {{type|number}} x
|arg2 = {{type|number}} z
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|number}} extractionAmount 
|info = With x &amp; z in metal map coordinates (worldspace/16)
}}


{{LuaCallout
|prefix = Spring.
|name = GetTerrainTypeData
|arg1 = {{type|number}} i
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|string}} &quot;name&quot;, {{type|number}} hardness, {{type|number}} tankSpeed, {{type|number}} kbotSpeed, {{type|number}} hoverSpeed, {{type|number}} shipSpeed, {{type|bool}} receiveTracks
|info = {{new|92.0}}
}}


{{LuaCallout
|prefix = Spring.
|name = GetGrass
|arg1 = {{type|number}} x
|arg2 = {{type|number}} z
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|number}} 0 {{pipe}} {{type|number}} 1 {{pipe}} {{type|number}} 255
|info = With x &amp; z in worldspace coordinates. Returns 255 if grass is disabled in settings, or if map does not have a grassmap specified.
}}

=== Test Orders ===

{{LuaCallout
|prefix = Spring.
|name = TestMoveOrder
|arg1 = {{type|number}} unitDefID
|arg2 = {{type|number}} pos.x {{bracket}}, {{type|number}} pos.y {{bracket}}, {{type|number}} pos.z {{bracket}}
|arg3 = {{type|number}} dir.x {{bracket}}, {{type|number}} dir.y {{bracket}}, {{type|number}} dir.z {{bracket}}
|arg4 = {{type|bool}} testTerrain {{bracket}}
|arg5 = {{type|bool}} testObjects {{bracket}}
|arg6 = {{type|bool}} centerOnly {{rbracket}}{{rbracket}}{{rbracket}}{{rbracket}}{{rbracket}}{{rbracket}}{{rbracket}}{{rbracket}}
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|bool}} validMove
|info = {{New|95.0}}
}}


{{LuaCallout
|prefix = Spring.
|name = TestBuildOrder
|arg1 = {{type|number}} unitDefID
|arg2 = {{type|number}} x
|arg3 = {{type|number}} y
|arg4 = {{type|number}} z
|arg5 = {{type|number}} facing
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|number}} blocking {{bracket}}, {{type|number}} featureID {{rbracket}}
|info = 
}}
&lt;pre&gt;blocking can be:
    0 - blocked
    1 - mobile unit in the way
    2 - free  (or if featureID is != nil then with a blocking feature that can be reclaimed)

  facing can be:
    0, &quot;s&quot;, &quot;south&quot;
    1, &quot;e&quot;, &quot;east&quot;
    2, &quot;n&quot;, &quot;north&quot;
    3, &quot;w&quot;, &quot;west&quot;&lt;/pre&gt;


{{LuaCallout
|prefix = Spring.
|name = Pos2BuildPos
|arg1 = {{type|number}} unitDefID
|arg2 = {{type|number}} x
|arg3 = {{type|number}} y
|arg4 = {{type|number}} z {{bracket}}
|arg5 = {{type|number}} facing {{rbracket}}
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} x, {{type|number}} y, {{type|number}} z
|info = 
}}

=== PathFinding ===

{{LuaCallout
|prefix = Spring.
|name = GetUnitEstimatedPath
|arg1 = {{type|number}} unitID 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|table}} waypoints, {{type|table}} waypointIndices
|info =  The table arguments are:
}}
&lt;pre&gt;table waypoints = {
   [1] = { x,y,z }, ...
   }

table waypointIndices= {
     [1] = startIdxOfDetailedPath,
     [2] = startIdxOfDetailedEstimatedPath1,
     [3] = startIdxOfDetailedEstimatedPath2,
   }

  GetUnitEstimatedPath() returns 2 tables:
    1 table the waypoints and 1 table with indices (in the waypoint table)
    when a new (more lazy) pathfinding algorithm  begins.
    So the waypoint table contains 3 different levels of details.&lt;/pre&gt;

=== LOS ===

{{LuaCallout
|prefix = Spring.
|name = IsPosInLos
|arg1 = {{type|number}} x
|arg2 = {{type|number}} y
|arg3 = {{type|number}} z
|arg4 = {{type|number}} allyID 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|bool}} isInLos
|info =
}}


{{LuaCallout
|prefix = Spring.
|name = IsPosInRadar
|arg1 = {{type|number}} x
|arg2 = {{type|number}} y
|arg3 = {{type|number}} z
|arg4 = {{type|number}} allyID 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|bool}} isInRadar
|info =
}}




{{LuaCallout
|prefix = Spring.
|name = IsPosInAirLos
|arg1 = {{type|number}} x
|arg2 = {{type|number}} y
|arg3 = {{type|number}} z
|arg4 = {{type|number}} allyID 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|bool}} isInAirLos
|info =
}}


{{LuaCallout
|prefix = Spring.
|name = GetPositionLosState
|arg1 = {{type|number}} x
|arg2 = {{type|number}} y
|arg3 = {{type|number}} z {{bracket}}
|arg4 = {{type|number}} allyID {{rbracket}}
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|bool}} LosOrRadar, {{type|bool}} inLos, {{type|bool}} inRadar, {{type|bool}} jammed
|info = Jammed new in 95.0, indicates if a position is actively being radar- or sonar-jammed by ANY allyteam.
}}


{{LuaCallout
|prefix = Spring.
|name = GetClosestValidPosition
|arg1 = {{type|number}} unitDefID
|arg2 = {{type|number}} x
|arg3 = {{type|number}} y
|arg4 = {{type|number}} z
|arg5 = {{type|number}} r
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}}
|info = CURRENTLY UNFINISHED! Always returns nil!
}}

== Projectiles ==

{{LuaCallout
|prefix = Spring.
|name = GetProjectilesInRectangle
|arg1 = {{type|number}} xmin
|arg2 = {{type|number}} zmin
|arg3 = {{type|number}} xmax
|arg4 = {{type|number}} zmax {{bracket}}
|arg5 = {{type|bool}} excludeWeaponProjectiles {{bracket}}
|arg6 = {{type|bool}} excludePieceProjectiles {{rbracket}}{{rbracket}}
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|table}} projectileTable = { {{bracket|1}} = {{type|number}} projectileID, etc... }
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetProjectileOwnerID
|arg1 = {{type|number}} projectileID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} unitID
|info = {{new|99.0}}
}}




{{LuaCallout
|prefix = Spring.
|name = GetProjectileTeamID
|arg1 = {{type|number}} projectileID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} teamID
|info = {{new|99.0}}
}}


{{LuaCallout
|prefix = Spring.
|name = GetProjectileDefID
|arg1 = {{type|number}} projectileID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} weaponDefID
|info = Using this to get a weaponDefID is HIGHLY preferred to indexing WeaponDefNames via GetProjectileName.
}}


{{LuaCallout
|prefix = Spring.
|name = GetProjectileName
|arg1 = {{type|number}} projectileID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|string}} name
|info = It is recommended to rather use GetProjectileDefID for indexing purposes.
}}


{{LuaCallout
|prefix = Spring.
|name = GetProjectileType
|arg1 = {{type|number}} projectileID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|bool}} weapon, {{type|bool}} piece
|info =
}}


{{LuaCallout
|prefix = Spring.
|name = GetProjectileTarget
|arg1 = {{type|number}} projectileID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} targetTypeInt, {{type|number}} targetID {{pipe}} {{type|table}} targetPos = {x, y, z}
|info =
}}
&lt;pre&gt;Pre version 95.0 return arguments: -&gt; nil | number targetID, string targetTypeStr

  targetTypeStr could be one of: 
    'u' - unit
    'f' - feature
    'p' - projectile

  while targetTypeInt was one of:
    string.byte('g') := GROUND
    string.byte('u') := UNIT
    string.byte('f') := FEATURE
    string.byte('p') := PROJECTILE&lt;/pre&gt;


{{LuaCallout
|prefix = Spring.
|name = GetProjectileIntercepted
|arg1 = {{type|number}} projectileID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|bool}} isBeingIntercepted
|info = {{new|99.0}}
}}


{{LuaCallout
|prefix = Spring.
|name = GetProjectilePosition
|arg1 = {{type|number}} projectileID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} posX, {{type|number}} posY, {{type|number}} posZ
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetProjectileVelocity
|arg1 = {{type|number}} projectileID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} velX, {{type|number}} velY, {{type|number}} velZ
|info = {{new|95.0}}: returns (targetPos - startPos) for Beamlasers and similar weapons
}}


{{LuaCallout
|prefix = Spring.
|name = GetProjectileGravity
|arg1 = {{type|number}} projectileID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} gravity
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetPieceProjectileParams
|arg1 = {{type|number}} projectileID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} explosionFlags, {{type|number}} spinAngle, {{type|number}} spinSpeed, {{type|number}} spinVectorX, {{type|number}} spinVectorY, {{type|number}} spinVectorZ
|info = {{new|95.0}}&lt;br&gt;ExplosionFlags use binary flags with the following integer equivalents (more info [http://springrts.com/wiki/Animation-CobConstants#explode here] ):&lt;br&gt;SHATTER = 1,  EXPLODE = 2, EXPLODE_ON_HIT = 2, FALL = 4, SMOKE = 8, FIRE = 16, NONE = 32, NO_CEG_TRAIL = 64, NO_HEATCLOUD = 128
}}


{{LuaCallout
|prefix = Spring.
|name = GetProjectileTimeToLive
|arg1 = {{type|number}} projectileID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} ttl
|info = {{new|99.0}}
}}


{{LuaCallout
|prefix = Spring.
|name = GetProjectileDirection
|arg1 = {{type|number}} projectileID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} dirX, {{type|number}} dirY, {{type|number}} dirZ
|info = {{new|95.0}}
}}



{{LuaCallout
|prefix = Spring.
|name = GetProjectileSpinAngle
|arg1 = {{type|number}} projectileID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} angle
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;Deprecated in 95.0 - use GetPieceProjectileParams instead!&lt;/font&gt;
}}


{{LuaCallout
|prefix = Spring.
|name = GetProjectileSpinSpeed
|arg1 = {{type|number}} projectileID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} spinSpeed
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;Deprecated in 95.0 - use GetPieceProjectileParams instead!&lt;/font&gt;
}}


{{LuaCallout
|prefix = Spring.
|name = GetProjectileSpinVec
|arg1 = {{type|number}} projectileID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} x, {{type|number}} y, {{type|number}} z
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;Deprecated in 95.0 - use GetPieceProjectileParams instead!&lt;/font&gt;
}}


{{LuaCallout
|prefix = Spring.
|name = GetProjectileDamages
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} weaponNum
|arg3 = {{type|string}} tag 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} damage
|info = {{new|101.0}}
}}
&lt;pre&gt;The string tag can be:
  &quot;paralyzeDamageTime&quot;
  &quot;impulseFactor&quot;
  &quot;impulseBoost&quot;
  &quot;craterMult&quot;
  &quot;craterBoost&quot;
  &quot;dynDamageExp&quot;
  &quot;dynDamageMin&quot;
  &quot;dynDamageRange&quot;
  &quot;dynDamageInverted&quot;
  &quot;craterAreaOfEffect&quot;
  &quot;damageAreaOfEffect&quot;
  &quot;edgeEffectiveness&quot;
  &quot;explosionSpeed&quot;
  - or -
  an armor type index to get the damage against it.&lt;/pre&gt;


[[category: Lua]]</text>
      <sha1>llxuhkou05xcgxercqhcur8yqou0z3m</sha1>
    </revision>
  </page>
  <page>
    <title>Lua System</title>
    <ns>0</ns>
    <id>3012</id>
    <revision>
      <id>31474</id>
      <parentid>31469</parentid>
      <timestamp>2021-02-28T21:17:02Z</timestamp>
      <contributor>
        <username>Master-athmos</username>
        <id>2676</id>
      </contributor>
      <comment>Applied LuaConstant template to constant numbers.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10181">[[Engine_Development|Development]] &lt; [[Lua_Scripting|Lua Scripting]] &lt; {{FULLPAGENAME}}

=All Lua Contexts=
{{LuaCallout
|prefix = Script.
|name = Kill
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;No description available&lt;/font&gt;
}}


{{LuaCallout
|prefix = Script.
|name = GetName
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|string}} luaInstanceName 
|info = Returns the luaInstanceName (e.g. &quot;LuaUI&quot;, &quot;LuaRules&quot;, &quot;LuaGaia&quot;, ...).
}}


{{LuaCallout
|prefix = Script.
|name = GetSynced
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|bool}} is_synced
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;No description available&lt;/font&gt;
}}


{{LuaCallout
|prefix = Script.
|name = GetFullCtrl
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|bool}} has_fullctrl
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;No description available&lt;/font&gt;
}}


{{LuaCallout
|prefix = Script.
|name = GetFullRead
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|bool}} has_fullread
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;No description available&lt;/font&gt;
}}


{{LuaCallout
|prefix = Script.
|name = GetCtrlTeam
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|number}} ctrl_teamID
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;No description available&lt;/font&gt;
}}


{{LuaCallout
|prefix = Script.
|name = GetReadTeam
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|number}} read_teamID
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;No description available&lt;/font&gt;
}}


{{LuaCallout
|prefix = Script.
|name = GetReadAllyTeam
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|number}} read_allyTeamID
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;No description available&lt;/font&gt;
}}


{{LuaCallout
|prefix = Script.
|name = GetSelectTeam
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|number}} select_teamID
|info = Defines which teamunits can be selected via Spring.SelectUnitMap/Spring.SelectUnitArray.
}}


{{LuaCallout
|prefix = Script.
|name = GetGlobal
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|table}} globalEnv
|info = Returns nil if not in dev-mode.
}}


{{LuaCallout
|prefix = Script.
|name = GetRegistry
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|table}} registryEnv
|info = Returns nil if not in dev-mode.
}}


{{LuaCallout
|prefix = Script.
|name = GetCallInList
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|table}} known_callins
|info = Known CallIns are:
}}
  &lt;span class=note&gt;known_callins = {
    [&quot;CallInName&quot;] = { unsynced = boolean, controller = boolean }, (`controller` is true for&lt;br&gt;      all CallIns which's return values are used by the engine for synced code,&lt;br&gt;       e.g. &quot;AllowUnitCreation&quot; is a controller)
    ...
  }


{{LuaCallout
|prefix = Script.
|name = IsEngineMinVersion
|arg1 = major {{bracket}}, minor {{bracket}}, commits {{rbracket}}{{rbracket}}
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|boolean}} isMinVersion
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;No description available&lt;/font&gt;
}}

==Special team constants==

{{LuaConstant
|type = number
|name = NO_ACCESS_TEAM
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;No description available&lt;/font&gt;
}}


{{LuaConstant
|type = number
|name = ALL_ACCESS_TEAM
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;No description available&lt;/font&gt;
}}

=LuaUI only=

{{LuaCallout
|prefix = Spring.
|name = SetShockFrontFactors
|arg1 = {{type|number}} minArea
|arg2 = {{type|number}} minPower
|arg3 = {{type|number}} distAdj
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;No description available&lt;/font&gt;
}}


{{LuaCallout
|prefix = Spring.
|name = UpdateCallIn
|arg1 = {{type|string}} callin_name
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;No description available&lt;/font&gt;
}}

=LuaGadgets only=
==Synced==

{{LuaConstant
|type = number
|name = COBSCALE
|info =Number containing the cobscale factor, which is applied to transform the variables assigned via unit cob animation scripts for use inside the engine (default: 65536).
}}


{{LuaCallout
|prefix = Script.
|name = AddActionFallback
|arg1 = {{type|string}} command
|arg2 = {{type|string}} help
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|boolean}} ???
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;No description available&lt;/font&gt;
}}


{{LuaCallout
|prefix = Script.
|name = RemoveActionFallback
|arg1 = {{type|string}} command
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|boolean}} ???
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;No description available&lt;/font&gt;
}}


{{LuaCallout
|prefix = Script.
|name = UpdateCallIn
|arg1 = {{type|string}} callin_name
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;No description available&lt;/font&gt;
}}


{{LuaCallout
|prefix = Script.
|name = SetWatchFeature
|arg1 = {{type|number}} featureDefID
|arg2 = {{type|boolean}} enable
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = Enables the `UnitFeatureCollision` callin for a specific [[Gamedev:FeatureDefs|FeatureDef]].
}}


{{LuaCallout
|prefix = Script.
|name = GetWatchFeature
|arg1 = {{type|number}} featureDefID
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|boolean}} enabled
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;No description available&lt;/font&gt;
}}


{{LuaCallout
|prefix = Script.
|name = SetWatchUnit
|arg1 = {{type|number}} unitDefID
|arg2 = {{type|boolean}} enable
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = Enables the `UnitUnitCollision`, `UnitFeatureCollision` and `UnitMoveFailed` callins for a specific [[Gamedev:UnitDefs|UnitDef]].
}}


{{LuaCallout
|prefix = Script.
|name = GetWatchUnit
|arg1 = {{type|number}} unitDefID 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|boolean}} enabled
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;No description available&lt;/font&gt;
}}


{{LuaCallout
|prefix = Script.
|name = SetWatchWeapon
|arg1 = {{type|number}} weaponDefID
|arg2 = {{type|boolean}} enable
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = Enables the `Explosion` and (as of 0.83+) `ProjectileCreated` and `ProjectileDestroyed` callins for a specific WeaponDef.
}}


{{LuaCallout
|prefix = Script.
|name = GetWatchWeapon
|arg1 = {{type|number}} weaponDefID 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|boolean}} enabled
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;No description available&lt;/font&gt;
}}


{{LuaCallout
|prefix = Script.
|name = GetWatchWeapon
|arg1 = {{type|number}} weaponDefID 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|boolean}} enabled
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;No description available&lt;/font&gt;
}}


{{LuaCallout
|prefix =
|name = SendToUnsynced
|arg1 = arg1
|arg2 = arg2
|arg3 = ...
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = Just nil, number, string and boolean datatypes are allowed as arguments! NO tables, userdatas, ...
}}


{{LuaCallout
|prefix =
|name = CallAsTeam
|arg1 = {{type|number}} teamID
|arg2 = lua_function f
|arg3 = arg1
|arg4 = arg2
|arg5 = ...
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}}
|info =
}}
or &lt;br&gt;
{{LuaCallout
|prefix =
|name = CallAsTeam
|arg1 = {{type|table}} access
|arg2 = lua_function f
|arg3 = arg1
|arg4 = arg2
|arg5 = ...
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = LOS checking depends on the `selected` team, this functions allows to select another one.
}}
  &lt;span class=note&gt;access = {
    [ctrl = number teamID,]
    [read = number teamID,]
    [select = number teamID,]
  }&lt;/span&gt;

==Unsynced==

{{LuaCallout
|prefix = Script.
|name = UpdateCallIn
|arg1 = {{type|string}} callin_name
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;No description available&lt;/font&gt;
}}


{{LuaCallout
|prefix =
|name = CallAsTeam
|arg1 = {{type|number}} teamID
|arg2 = lua_function f
|arg3 = arg1
|arg4 = arg2
|arg5 = ...
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = 
}}
or &lt;br&gt;
{{LuaCallout
|prefix =
|name = CallAsTeam
|arg1 = {{type|table}} access
|arg2 = lua_function f
|arg3 = arg1
|arg4 = arg2
|arg5 = ...
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = LOS checking depends on the `selected` team, this functions allows to select another one.
}}

  &lt;span class=note&gt;access = {
    [ctrl = number teamID,]    (limits Spring.GiveOrderXYZ)
    [read = number teamID,]    (limits reading of unit params, e.g. Spring.GetUnitLosState)
    [select = number teamID,]    (limits Spring.SelectUnitXYZ)
  }&lt;/span&gt;

=LuaRules only=
==Synced==

{{LuaCallout
|prefix = Script.
|name = PermitHelperAIs
|arg1 = {{type|boolean}} permit
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;No description available&lt;/font&gt;
}}


[[category: Lua]]

[[category: Lua]]</text>
      <sha1>eg2pccxsyjpg7ohxsscvib3hhw72588</sha1>
    </revision>
  </page>
  <page>
    <title>Lua UnitDefs</title>
    <ns>0</ns>
    <id>2434</id>
    <revision>
      <id>31178</id>
      <parentid>30805</parentid>
      <timestamp>2020-02-14T02:57:44Z</timestamp>
      <contributor>
        <username>Forboding angel</username>
        <id>2578</id>
      </contributor>
      <minor/>
      <comment>Add helpful &quot;are you lost?&quot; to page so that perhaps people who end up on the wrong page will figure it out sooner rather than later.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11311">[[Engine_Development|Development]] &lt; [[Lua_Scripting|Lua Scripting]] &lt; {{FULLPAGENAME}}

'''Were you looking for the unitDefs page for Game Developers?''' ([[Gamedev:UnitDefs]])

==What is this==
The '''UnitDefs[]''' table holds information about the unit'''types''' used in the game. It is indexed by a number, and normally refered to as unitDefID. It is read-only. To access its tags you write, for example,
&lt;pre&gt;
    UnitDefs[unitDefID].name
&lt;/pre&gt;

'''Note:'''&lt;br&gt;
The name of the keys often vary from the ones in the [[Gamedev:UnitDefs]] files.
For example ''maxDamage'' is named ''health''.

==UnitDefs reverse lookup: UnitDefNames==
The '''UnitDefNames[]''' table holds the unitdefs and can be used to get the unitdef table for a known unitname:
&lt;pre&gt;
    local unitDef = UnitDefNames[&quot;supertank&quot;]
&lt;/pre&gt;

==Print all unitDefs==
This example code prints all unitdefs, with all keys and their values (but not their subtables).
&lt;pre&gt;
  for id,unitDef in pairs(UnitDefs) do
    for name,param in unitDef:pairs() do
      Spring.Echo(name,param)
    end
  end
&lt;/pre&gt;
Note that unitDef is a metatable, and requires the special iterator unitDef:pairs()

==Useful keys/snippets==
&lt;code&gt; UnitDefs[unitDefID].id &lt;/code&gt; - gives back the unitDefID 

&lt;code&gt; UnitDefs[unitDefID].name &lt;/code&gt; - the internal unit name

&lt;code&gt; UnitDefs[unitDefID].humanName &lt;/code&gt; - the displayed unit name

&lt;code&gt;UnitDefs[unitDefID].weapons&lt;/code&gt; - See [[Lua_WeaponDefs]], &lt;code&gt;UnitDefs[unitDefID].weapons[1].weaponDef&lt;/code&gt; returns the weaponDefID of the units first weapon, which apppears in the WeaponsDef table as &lt;code&gt;WeaponDefs[weaponDefID]&lt;/code&gt;.

To read [[Gamedev:UnitDefs#customParams|custom parameters]] use:
&lt;pre&gt;
    local myCustomParameters = UnitDefs[unitDefID].customParams
    if (myCustomParameters) then
      blub = myCustomParameters.blubfactor
    end
&lt;/pre&gt;
Key-names of the customParams table written must be lowercase and their values can only be strings.

===Types of Units===
Sometimes one wants to check type of unit. Like is it a factory, is it a transport and so on.
Complete list: &lt;ref&gt;''Spring 95, commit message'',{{Sourcelinkhash|4e58b8b0f7af04065878d34e5e17523246739b0c}}&lt;/ref&gt;

*isTransport
*isImmobile
*isBuilding
*isBuilder
*isMobileBuilder
*isStaticBuilder
*isFactory
*isExtractor
*isGroundUnit
*isAirUnit
*isStrafingAirUnit
*isHoveringAirUnit
*isFighterAirUnit
*isBomberAirUnit

==Example UnitDef table==
In the form of key = value, where UnitDefs[unitDefID].key = value, with subtables at the bottom.

&lt;pre&gt;
    activateWhenBuilt = true,
    airLosRadius = 5.2734375,
    airStrafe = true,
    armorType = 3,
    armoredMultiple = 1,
    autoHeal = 2.5,
    bankingAllowed = true,
    buildDistance = 112,
    buildRange3D = false,
    buildSpeed = 300,
    buildTime = 75000,
    builder = false,
    buildingDecalDecaySpeed = 0.10000000149012,
    buildingDecalSizeX = 4,
    buildingDecalSizeY = 4,
    buildingDecalType = -1,
    buildpicname = &quot;CORCOM.DDS&quot;,
    canAssist = true,
    canAttack = true,
    canAttackWater = true,
    canBeAssisted = true,
    canCapture = true,
    canCloak = true,
    canCrash = false,
    canDGun = false,
    canDropFlare = false,
    canFight = true,
    canFireControl = true,
    canFly = false,
    canGuard = true,
    canKamikaze = false,
    canLoopbackAttack = false,
    canManualFire = true,
    canMove = true,
    canParalyze = false,
    canPatrol = true,
    canReclaim = true,
    canRepair = true,
    canRepeat = true,
    canRestore = true,
    canResurrect = false,
    canSelfD = true,
    canSelfRepair = false,
    canStockpile = false,
    canSubmerge = false,
    cantBeTransported = false,
    capturable = true,
    captureSpeed = 900,
    cloakCost = 100,
    cloakCostMoving = 1000,
    cloakTimeout = 128,
    cobID = -1,
    collide = true,
    cost = 3111.4499511719,
    crashDrag = 0.0049999998882413,
    deathExplosion = &quot;commander_blast&quot;,
    decloakDistance = 50,
    decloakOnFire = true,
    decloakSpherical = true,
    dlHoverFactor = -1,
    energyCost = 26667,
    energyMake = 25,
    energyStorage = 0,
    energyUpkeep = 0,
    extractRange = 0,
    extractsMetal = 0,
    factoryHeadingTakeoff = true,
    fallSpeed = 0.20000000298023,
    fireState = -1,
    flankingBonusDirX = 0,
    flankingBonusDirY = 0,
    flankingBonusDirZ = 1,
    flankingBonusMax = 1.8999999761581,
    flankingBonusMin = 0.89999997615814,
    flankingBonusMobilityAdd = 0.0099999997764826,
    flankingBonusMode = 1,
    flareDelay = 0.30000001192093,
    flareDropVectorX = 0,
    flareDropVectorY = 0,
    flareDropVectorZ = 0,
    flareEfficiency = 0.5,
    flareReloadTime = 5,
    flareSalvoDelay = 0,
    flareSalvoSize = 4,
    flareTime = 90,
    floatOnWater = false,
    floater = false,
    frontToSpeed = 0.10000000149012,
    fullHealthFactory = false,
    hasShield = false,
    health = 3000,
    height = 50,
    hideDamage = true,
    highTrajectoryType = 0,
    holdSteady = false,
    hoverAttack = false,
    humanName = &quot;Commander&quot;,
    iconType = &quot;corcom.user&quot;,
    id = 261,
    idleAutoHeal = 2.5,
    idleTime = 1800,
    isAirBase = false,
    isAirUnit = false,
    isBomberAirUnit = false,
    isBuilder = true,
    isBuilding = false,
    isCommander = false,
    isExtractor = false,
    isFactory = false,
    isFeature = false,
    isFighterAirUnit = false,
    isFirePlatform = false,
    isGroundUnit = true,
    isHoveringAirUnit = false,
    isImmobile = false,
    isMobileBuilder = true,
    isStaticBuilder = false,
    isStrafingAirUnit = false,
    isTransport = false,
    jammerRadius = 0,
    kamikazeDist = 0,
    kamikazeUseLOS = false,
    leaveTracks = false,
    levelGround = true,
    loadingRadius = 220,
    losHeight = 40,
    losRadius = 14.0625,
    makesMetal = 0,
    mass = 5000,
    maxAcc = 0.18000000715256,
    maxAileron = 0.014999999664724,
    maxBank = 0.80000001192093,
    maxCoverage = 0,
    maxDec = 1.125,
    maxElevator = 0.0099999997764826,
    maxFuel = 0,
    maxHeightDif = 14.558809280396,
    maxPitch = 0.44999998807907,
    maxRepairSpeed = 300,
    maxRudder = 0.0040000001899898,
    maxSlope = -1,
    maxThisUnit = 32000,
    maxWaterDepth = 35,
    maxWeaponRange = 300,
    maxx = 17.423709869385,
    maxy = 48.386325836182,
    maxz = 14.10532283783,
    metalCost = 2667,
    metalMake = 1.5,
    metalStorage = 0,
    metalUpkeep = 0,
    midx = 0.66120779514313,
    midy = 19,
    midz = 1.7122877836227,
    minAirBasePower = 0,
    minCollisionSpeed = 1,
    minWaterDepth = -10000000,
    minx = -16.537784576416,
    miny = 0.058725833892822,
    minz = -9.709508895874,
    moveState = -1,
    myGravity = 0.40000000596046,
    name = &quot;corcom&quot;,
    nanoColorB = 0.20000000298023,
    nanoColorG = 0.69999998807907,
    nanoColorR = 0.20000000298023,
    needGeo = false,
    onOffable = false,
    power = 3111.4499511719,
    primaryWeapon = 2,
    rSpeed = 0,
    radarRadius = 700,
    radius = 22,
    reclaimSpeed = 300,
    reclaimable = false,
    refuelTime = 5,
    releaseHeld = false,
    reloadTime = 1,
    repairSpeed = 300,
    repairable = true,
    resurrectSpeed = 300,
    scriptName = &quot;corcom.cob&quot;,
    scriptPath = &quot;corcom.cob&quot;,
    seismicRadius = 0,
    seismicSignature = 0,
    selfDCountdown = 5,
    selfDExplosion = &quot;commander_blast&quot;,
    shieldPower = -1,
    showNanoFrame = true,
    showNanoSpray = true,
    showPlayerName = true,
    slideTolerance = 0,
    sonarJamRadius = 0,
    sonarRadius = 300,
    sonarStealth = false,
    speed = 37.5,
    speedToFront = 0.070000000298023,
    startCloaked = false,
    stealth = false,
    strafeToAttack = false,
    targfac = false,
    techLevel = 0,
    terraformSpeed = 1500,
    tidalGenerator = 0,
    tooltip = &quot;Commander&quot;,
    totalEnergyOut = 25,
    trackOffset = 0,
    trackStrength = 0,
    trackStretch = 1,
    trackType = -1,
    trackWidth = 32,
    transportByEnemy = false,
    transportCapacity = 0,
    transportMass = 100000,
    transportSize = 0,
    transportUnloadMethod = 0,
    turnInPlace = true,
    turnInPlaceSpeedLimit = 0.82499998807907,
    turnRadius = 500,
    turnRate = 1133,
    type = &quot;&quot;,
    unitFallSpeed = 0,
    upright = true,
    useBuildingGroundDecal = false,
    useSmoothMesh = true,
    verticalSpeed = 3,
    wantedHeight = 0,
    waterline = 0,
    windGenerator = 0,
    wingAngle = 0.079999998211861,
    wingDrag = 0.070000000298023,
    wreckName = &quot;corcom_dead&quot;,
    xsize = 4,
    zsize = 4,

    buildOptions = {
        [1] = unitDefID1,
        [2] = unitDefID2,
        ...
    },
    collisionVolume = {
        boundingRadius = 1.0893974967364e-026,
        defaultToFootPrint = false,
        defaultToPieceTree = false,
        defaultToSphere = false,
        offsetX = 0,
        offsetY = 1,
        offsetZ = 1.089395031546e-026,
        scaleX = 6.4911419586111e-027,
        scaleY = 1.9340968033141e-038,
        scaleZ = 1.0894122878784e-026,
        type = &quot;ellipsoid&quot;,
    },
    customParams = {
        ...
    },
    modCategories = {
        all = true,
        commander = true,
        notair = true,
        ...
    },
    model = {
        name = &quot;CORCOM.s3o&quot;,
        path = &quot;objects3d/CORCOM.s3o&quot;,
        type = &quot;s3o&quot;,
        textures = {
            tex1 = &quot;Core_color.dds&quot;,
            tex2 = &quot;Core_other.dds&quot;,
        },
    },
    moveDef = {
        crushStrength = 50,
        depth = 5000,
        depthMod = 0,
        family = &quot;kbot&quot;,
        heatMapping = false,
        heatMod = 0.0041666668839753,
        heatProduced = 60,
        id = 6,
        maxSlope = 0.41221469640732,
        name = &quot;akbot2&quot;,
        slopeMod = 9.6801977157593,
        type = &quot;ground&quot;,
        xsize = 3,
        zsize = 3,
    },
    noChaseCategories = {
        all = true,
        ...
    },
    sounds = {
        activate = {},
        arrived = {},
        build = {
            [1] = {
                id = 208,
                name = &quot;nanlath2&quot;,
                volume = 1,
            },
            ...
        },
        ...
    },
    weapons = {
        [1] = {
            fuelUsage = 0,
            mainDirX = 0,
            mainDirY = 0,
            mainDirZ = 0.99999564886093,
            maxAngleDif = -1,
            slavedTo = 0,
            weaponDef = 221,
            badTargets = {
                vtol = true,
            },
            onlyTargets = {
                all = true,
                antiemg = true,
                ...
            },
        },
        ...
    },
&lt;/pre&gt;

==Unit/Weapon damages and armor classes==

For details on how to extract which units/weapons target/damage which units, see https://springrts.com/phpbb/viewtopic.php?f=44&amp;t=34382&amp;p=575738#p575738 (TODO: migrate info to wiki).

==How to save unitDef tables to file==
To save all unitDefs to a file, including all tables, you can use
&lt;pre&gt;
    local unitDef = UnitDefs[unitDefID]
    local t = {}
    for k,v in unitDef:pairs() do
        t[k] = v
    end
    table.save(t, &quot;lua_unitDef_&quot; .. unitDef.name .. &quot;.lua&quot;, &quot;-- generated by table.save&quot;)
&lt;/pre&gt;
The special iterator is needed because metatables. See https://springrts.com/phpbb/viewtopic.php?f=67&amp;t=33778 for a widget to regenerate the example defs.



[[category: Lua]]

----
&lt;references/&gt;</text>
      <sha1>ipijtgs5i2j9f28qn1w2jfgnmlq3d7e</sha1>
    </revision>
  </page>
  <page>
    <title>Lua UnitRendering</title>
    <ns>0</ns>
    <id>2479</id>
    <revision>
      <id>31622</id>
      <parentid>31621</parentid>
      <timestamp>2021-09-17T01:11:00Z</timestamp>
      <contributor>
        <username>Rafal99</username>
        <id>598</id>
      </contributor>
      <comment>Add Spring.UnitRendering.SetProjectileLuaDraw</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5528">[[Engine_Development|Development]] &lt; [[Lua_Scripting|Lua Scripting]] &lt; {{FULLPAGENAME}}

==Unit &amp; Feature Rendering==
{{new|101.0}} These functions are now also duplicated for features i.e. {{name|Spring.FeatureRendering.X}}

'''Spring.UnitRendering.SetLODCount'''
  ( number unitID, int lodCount ) -&gt; nil

'''Spring.UnitRendering.SetLODLength''' &lt;font color=#55ee99&gt;(`lod` is 1-indexed)&lt;/font&gt;
  ( number unitID, int lod, number lodLength ) -&gt; nil

'''Spring.UnitRendering.SetLODDistance''' &lt;font color=#55ee99&gt;(same as SetLODLength(), but adjusted for 45deg FOV + 1024x768)&lt;/font&gt;
  (number unitID,  int lod, number lodDistance ) -&gt; nil

'''Spring.UnitRendering.SetPieceList''' &lt;font color=#55ee99&gt;(displayList=nil reset to default)&lt;/font&gt;
  ( number unitID, int lod, int piece [, number displayList = nil ] ) -&gt; nil

'''Spring.UnitRendering.GetMaterial''' &lt;font color=#55ee99&gt;(creates a material userdata)&lt;/font&gt;
  ( [[Lua_UnitRendering#MaterialTypes|string MaterialType]], [[Lua_UnitRendering#Material_Table|table Material]] ) -&gt; [[Lua_UnitRendering#Material_UserData|userdata Material]]

'''Spring.UnitRendering.SetMaterial'''
  ( number unitID, int lod, [[Lua_UnitRendering#MaterialTypes|string MaterialType]], [[Lua_UnitRendering#Material_UserData|userdata Material]] | [[Lua_UnitRendering#Material_Table|table Material]] ) -&gt; nil

'''Spring.UnitRendering.SetMaterialLastLOD'''
  ( number unitID, [[Lua_UnitRendering#MaterialTypes|string MaterialType]], int lastLOD ) -&gt; nil

'''Spring.UnitRendering.SetMaterialDisplayLists'''
  ( number unitID, int lod, [[Lua_UnitRendering#MaterialTypes|string MaterialType]], [[Lua_OpenGL_Api#Display_Lists|preDisplayList]], [[Lua_OpenGL_Api#Display_Lists|postDisplayList]] ) -&gt; nil

'''Spring.UnitRendering.SetUnitUniform''' &lt;font color=red&gt;(unfinished)&lt;/font&gt;
  ( number unitID, [[Lua_UnitRendering#MaterialTypes|string MaterialType]], int lod, arg1, arg2, ... ) -&gt; nil

==Debug==
'''Spring.UnitRendering.Debug''' &lt;span class=&quot;note&quot;&gt;(prints some usefull debug informations)&lt;/span&gt;
  ( [ number unitID ] ) -&gt; nil

==Lua's DrawXYZ-Callin==
'''Spring.UnitRendering.SetUnitLuaDraw''' &lt;span class=&quot;note&quot;&gt;(enables the LuaRules' DrawUnit callin)&lt;/span&gt;
  ( number unitID, boolean enabled ) -&gt; nil

'''Spring.FeatureRendering.SetFeatureLuaDraw''' &lt;span class=&quot;note&quot;&gt;(enables the LuaRules' DrawFeature callin)&lt;/span&gt;
  ( number featureID, boolean enabled ) -&gt; nil

'''Spring.UnitRendering.SetProjectileLuaDraw''' &lt;span class=&quot;note&quot;&gt;(enables the LuaRules' DrawProjectile callin)&lt;/span&gt;
  ( number projectileID, boolean enabled ) -&gt; nil

==MaterialTypes==
 &quot;alpha&quot;
 &quot;opaque&quot;
 &quot;alpha_reflect&quot;
 &quot;opaque_reflect&quot;
 &quot;shadow&quot;

==Material UserData==
&lt;font color=red&gt;none user accessible methods (yet)&lt;/font&gt;

==Material Table==
Prior to 102.0:

  material = {
    [&quot;order&quot;  = number ,]
    [&quot;culling&quot; = [[Lua_ConstGL#Culling|number face]] ,]
    [&quot;shader&quot; = [[Lua_GLSL_Api|lua_shader]] | string &quot;3do&quot; | string &quot;s3o&quot; ,]
    &lt;span class=note&gt;(95.0: alias standard_shader)&lt;/span&gt;
    [&quot;deferred_shader&quot; = { vertex = ..., ... } ,]
    &lt;span class=note&gt;(new in 95.0, alias deferred. Deferred fragment shaders must *ONLY* write to gl_FragData[i] where
      i = {0 = normals, 1 = diffuse, 2 = specular, 3 = emissive, 4 = misc})&lt;/span&gt;

    [&quot;texunits&quot; = {
        [ [0] = { [&quot;tex&quot; = &lt;font color=#55ee99&gt;[[Lua_OpenGL_Api#Textures|see gl.Texture]]&lt;/font&gt; ,]
                  [&quot;enable&quot; = boolean true ] }, ]
        [ [3] = &lt;font color=#55ee99&gt;[[Lua_OpenGL_Api#Textures|see gl.Texture]]&lt;/font&gt;, ]
        &lt;span class=note&gt;(upto [15] and supports holes in it)&lt;/span&gt;
      } ,]

    [&quot;texunit0&quot; = &lt;font color=#55ee99&gt;[[Lua_OpenGL_Api#Textures|see gl.Texture]]&lt;/font&gt; ,]
     ...
    [&quot;texunit7&quot; = &lt;font color=#55ee99&gt;[[Lua_OpenGL_Api#Textures|see gl.Texture]]&lt;/font&gt; ,]

    [&quot;prelist&quot;   = [[Lua_OpenGL_Api#Display_Lists|lua_displaylist]] ,]
    [&quot;postlist&quot;  = [[Lua_OpenGL_Api#Display_Lists|lua_displaylist]] ,]
    [&quot;usecamera&quot; = boolean ,]
    [&quot;cameraloc&quot; = number uniformLocation,]
    [&quot;cameraposloc&quot; = number uniformLocation,]
    [&quot;camerainvloc&quot;  = number uniformLocation,]
    [&quot;sunposloc&quot;     = number uniformLocation,] &lt;span class=note&gt;(new in 0.83)&lt;/span&gt;
    [&quot;shadowloc&quot;       = number uniformLocation,]
    [&quot;shadowparamsloc&quot; = number uniformLocation,]
  }

Post 102.0:

Material tables are now expected to contain subtables defining the uniforms; instead of
   material = {shader = ..., cameraposloc = 123, texunits = ..., ...}
say
   material = {shader = ..., uniforms = {cameraposloc = 123, ...}, texunits = ..., ...}

For a material that has both types of shader, supply &quot;standardshader&quot;, &quot;deferredshader&quot;, &quot;standarduniforms&quot;, and &quot;deferreduniforms&quot; as keys i.e:
   material = {standardshader = ..., standarduniforms = {...}, deferredshader = ..., deferredunifroms = { ... }, texunits = ..., ...}

New keys for these uniform subtables can be
     &quot;viewmatrixloc&quot;    // synonym for &quot;cameraloc&quot;
     &quot;projmatrixloc&quot;    // camera projection
     &quot;viprmatrixloc&quot;    // camera view-projection
     &quot;viewmatrixinvloc&quot; // synonym for &quot;camerainvloc&quot;
     &quot;projmatrixinvloc&quot; // camera inverse projection
     &quot;viprmatrixinvloc&quot; // camera inverse view-projection
     &quot;shadowmatrixloc&quot;  // synonym for &quot;shadowloc&quot;
     &quot;cameradirloc&quot;     // camera forward direction
     &quot;sundirloc&quot;        // synonym for &quot;sunposloc&quot;
     &quot;rndvecloc&quot;        // random 3-vector with length in [0, 1)
     &quot;simframeloc&quot;      // current simulation frame
     &quot;visframeloc&quot;      // current renderer frame
[[category: Lua]]</text>
      <sha1>gubpcy91bcl0xi4ml6wjmo330atmhle</sha1>
    </revision>
  </page>
  <page>
    <title>Lua Unit Scripting</title>
    <ns>0</ns>
    <id>2752</id>
    <redirect title="Animation-LuaScripting" />
    <revision>
      <id>17304</id>
      <timestamp>2009-08-23T21:18:00Z</timestamp>
      <contributor>
        <username>Seanheron</username>
        <id>2595</id>
      </contributor>
      <comment>[[Lua Unit Scripting]] moved to [[Animation-LuaScripting]]: moved as per [[Spring:PageNamingConventions|naming convention]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="36">#REDIRECT [[Animation-LuaScripting]]</text>
      <sha1>9yc6m7yyjyg6zl7akdjgi8bo1lt2z3o</sha1>
    </revision>
  </page>
  <page>
    <title>Lua UnsyncedCtrl</title>
    <ns>0</ns>
    <id>2426</id>
    <revision>
      <id>31793</id>
      <parentid>31536</parentid>
      <timestamp>2022-06-02T15:22:03Z</timestamp>
      <contributor>
        <username>Beherith</username>
        <id>2441</id>
      </contributor>
      <comment>/* Unit Selection */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="41979">[[Engine_Development|Development]] &lt; [[Lua_Scripting|Lua Scripting]] &lt; {{FULLPAGENAME}}



&lt;div class=&quot;note&quot;&gt;
NOTE: Prior to 102.0, entries below marked &lt;font color=&quot;red&quot; style=&quot;font-weight:600&quot;&gt;(needs ModUICtrl)&lt;/font&gt; require the setting ModUICtrl to be enabled in the users [[springrc]], if you want to use them in unsynced LuaRules/LuaGaia. It is enabled by default in previous versions and removed in 102.0 so you generally don't need to care.&lt;/div&gt;

= UI =

{{LuaCallout
|prefix = Spring.
|name = SetLastMessagePosition
|arg1 = {{type|number}} x
|arg2 = {{type|number}} y
|arg3 = {{type|number}} z
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = 
}}

= Ingame Console =

{{LuaCallout
|prefix = Spring.
|name = Echo
|arg1 = {{type|arg1}} {{bracket}}
|arg2 = {{type|arg2}} {{bracket}}
|arg3 = {{type|...}} {{rbracket}}{{rbracket}}
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = Useful for debugging.&lt;br&gt; Prints values in the spring chat console.&lt;br&gt; Hint: the default print() writes to STDOUT.
}}


{{LuaCallout
|prefix = Spring.
|name = Log
|arg1 = {{type|string}} section
|arg2 = {{type|number}} logLevel {{pipe}} {{type|string}} logLevel 
|arg3 = {{type|string}} LogMessage1 {{bracket}}
|arg4 = {{type|string}} LogMessage2{{bracket}}
|arg5 = ... {{rbracket}}{{rbracket}}
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}}
|info =
}}
&lt;pre&gt;Possible values for logLevel are:
    &quot;debug&quot;   | LOG.DEBUG
    &quot;info&quot;    | LOG.INFO
    &quot;notice&quot;  | LOG.NOTICE (engine default) (new in Version 97)
    &quot;warning&quot; | LOG.WARNING
    &quot;error&quot;   | LOG.ERROR
    &quot;fatal&quot;   | LOG.FATAL&lt;/pre&gt;



{{LuaCallout
|prefix = Spring.
|name = SendCommands
|arg1 = {{type|string}} command1 {{bracket}}
|arg2 = {{type|string}} command2 {{bracket}}
|arg3 = {{type|...}} {{rbracket}}{{rbracket}}
|arg4 = 
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;Needs ModUICtrl.&lt;/font&gt;
}}

or

{{LuaCallout
|prefix = Spring.
|name = SendCommands
|arg1 = { {{type|string}} command1, {{type|string}} command2, ... }
|arg2 =
|arg3 = 
|arg4 = 
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}}
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;Needs ModUICtrl.&lt;/font&gt;
}}

== GUI ==

{{LuaCallout
|prefix = Spring.
|name = SetActiveCommand
|arg1 = {{type|string}} action {{bracket}}
|arg2 = {{type|string}} actionExtra {{rbracket}}
|arg3 = 
|arg4 = 
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|bool}} commandSet
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;Needs ModUICtrl.&lt;/font&gt;
}}

or

{{LuaCallout
|prefix = Spring.
|name = SetActiveCommand
|arg1 = {{type|number}} cmdIndex {{bracket}}
|arg2 = {{type|number}} button = 1 {{bracket}}
|arg3 = {{type|bool}} leftClick {{bracket}}
|arg4 = {{type|bool}} rightClick {{bracket}}
|arg5 = {{type|bool}} alt {{bracket}}
|arg6 = {{type|bool}} ctrl {{bracket}}
|arg7 = {{type|bool}} meta {{bracket}}
|arg8 = {{type|bool}} shift {{rbracket}}{{rbracket}}{{rbracket}}{{rbracket}}{{rbracket}}{{rbracket}}{{rbracket}}
|arg9 = 
|return = {{type|nil}} {{pipe}} {{type|bool}} commandSet
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;Needs ModUICtrl.&lt;/font&gt;
}}


{{LuaCallout
|prefix = Spring.
|name = LoadCmdColorsConfig
|arg1 = {{type|string}} config 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;Needs ModUICtrl.&lt;/font&gt;
}}


{{LuaCallout
|prefix = Spring.
|name = LoadCtrlPanelConfig
|arg1 = {{type|string}} config 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;Needs ModUICtrl.&lt;/font&gt;
}}



{{LuaCallout
|prefix = Spring.
|name = ForceLayoutUpdate
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;Needs ModUICtrl.&lt;/font&gt;
}}


{{LuaCallout
|prefix = Spring.
|name = SetDrawSelectionInfo
|arg1 = {{type|bool}} enable
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;Needs ModUICtrl.&lt;/font&gt;&lt;br&gt;Disables the &quot;Selected Units x&quot; box in the GUI.
}}

== Mouse ==

{{LuaCallout
|prefix = Spring.
|name = SetMouseCursor
|arg1 = {{type|string}} cursorName {{bracket}}
|arg2 = {{type|number}} scale {{rbracket}}
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;Needs ModUICtrl.&lt;/font&gt;
}}


{{LuaCallout
|prefix = Spring.
|name = WarpMouse
|arg1 = {{type|number}} x
|arg2 = {{type|number}} y
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;Needs ModUICtrl.&lt;/font&gt;
}}

== LOS Colors ==

{{LuaCallout
|prefix = Spring.
|name = SetLosViewColors
|arg1 = {{type|table}} always = {r,g,b}
|arg2 = {{type|table}} LOS = {r,g,b}
|arg3 = {{type|table}} radar = {r,g,b}
|arg4 = {{type|table}} jam = {r,g,b}
|arg5 = {{type|table}} radar2 = {r,g,b}
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;Needs ModUICtrl.&lt;/font&gt;&lt;br&gt;New arguments since 100.0 (radar2 is the inside of radar edge). Arguments for 99.0 and before:&lt;br&gt;
}}
&lt;pre&gt;( table reds = { number always, number LOS, number radar, number jam }, 
    table greens = { number always, number LOS, number radar, number jam },
    table blues = { number always, number LOS, number radar, number jam } ) -&gt; nil&lt;/pre&gt;

== SendMessage ==

{{LuaCallout
|prefix = Spring.
|name = SendMessage
|arg1 = {{type|string}} message
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = SendMessageToPlayer
|arg1 = {{type|number}} playerID
|arg2 = {{type|string}} message
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = SendMessageToTeam
|arg1 = {{type|number}} teamID
|arg2 = {{type|string}} message
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}



{{LuaCallout
|prefix = Spring.
|name = SendMessageToAllyTeam
|arg1 = {{type|number}} allyID
|arg2 = {{type|string}} message
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = SendMessageToSpectators
|arg1 = {{type|string}} message
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = &lt;PLAYER#&gt; (with # being a playerid) inside the string will be replaced with the players name - i.e. :&lt;br&gt;Spring.SendMessage (&quot;&lt;PLAYER1&gt; did something&quot;)&lt;br&gt;might display as &quot;ProRusher did something&quot;
}}

== Markers ==


{{LuaCallout
|prefix = Spring.
|name = MarkerAddPoint
|arg1 = {{type|number}} x
|arg2 = {{type|number}} y
|arg3 = {{type|number}} z {{bracket}}
|arg4 = {{type|string}} text = &quot;&quot; {{bracket}}
|arg5 = {{type|bool}} localOnly {{rbracket}}{{rbracket}}
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;Needs ModUICtrl.&lt;/font&gt;
}}


{{LuaCallout
|prefix = Spring.
|name = MarkerAddLine
|arg1 = {{type|number}} x1
|arg2 = {{type|number}} y1
|arg3 = {{type|number}} z1
|arg4 = {{type|number}} x2
|arg5 = {{type|number}} y2
|arg6 = {{type|number}} z2
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;Needs ModUICtrl.&lt;/font&gt;
}}


{{LuaCallout
|prefix = Spring.
|name = MarkerErasePosition
|arg1 = {{type|number}} x
|arg2 = {{type|number}} y
|arg3 = {{type|number}} z
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;Needs ModUICtrl.&lt;/font&gt;
}}

= Sounds =

{{LuaCallout
|prefix = Spring.
|name = LoadSoundDef
|arg1 = {{type|string}} soundfile
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} {{pipe}} {{type|bool}} success
|info = Loads a SoundDefs file, the format is the same as in `gamedata/sounds.lua`.
}}


{{LuaCallout
|prefix = Spring.
|name = PlaySoundFile
|arg1 = {{type|string}} soundfile {{bracket}}
|arg2 = {{type|number}} volume = 1.0 {{bracket}}
|arg3 = {{type|number}} posx {{bracket}}
|arg4 = {{type|number}} posy {{bracket}}
|arg5 = {{type|number}} posz {{bracket}}
|arg6 = {{type|number}} speedx{{bracket}}
|arg7 = {{type|number}} speedy{{bracket}}
|arg8 = {{type|number}} speedz{{bracket}}
|arg9 = {{type|number}} {{pipe}} {{type|string}} channel {{rbracket}}{{rbracket}}{{rbracket}}{{rbracket}}{{rbracket}}{{rbracket}}{{rbracket}}{{rbracket}}
|return = {{type|nil}} {{pipe}} {{type|bool}} playSound
|info = Possible arguments for channel argument:
}}
&lt;pre&gt;    &quot;general&quot; || 0 || nil (default)
    &quot;battle&quot; || &quot;sfx&quot; | 1
    &quot;unitreply&quot; || &quot;voice&quot; || 2
    &quot;userinterface&quot; || &quot;ui&quot; || 3&lt;/pre&gt;


{{LuaCallout
|prefix = Spring.
|name = PlaySoundStream
|arg1 = {{type|string}} oggfile {{bracket}}
|arg2 = {{type|number}} volume = 1.0 {{bracket}}
|arg3 = {{type|bool}} enqueue {{rbracket}}{{rbracket}}
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} {{pipe}} {{type|bool}} true
|info = Allows to play an Ogg Vorbis (.OGG) compressed sound file.&lt;br&gt; In 83.0 and up multiple sound streams may be played at once.
}}


{{LuaCallout
|prefix = Spring.
|name = StopSoundStream
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} 
|info = Terminates any SoundStream currently running.
}}


{{LuaCallout
|prefix = Spring.
|name = PauseSoundStream
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} 
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = SetSoundStreamVolume
|arg1 = {{type|number}} volume
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} 
|info = 
}}

= SendLuaMessage =
&lt;font color=&quot;#55ee99&quot;&gt;Very important! (allows synced inter-lua-enviroment communications)&lt;/font&gt;

{{LuaCallout
|prefix = Spring.
|name = SendLuaUIMsg
|arg1 = {{type|string}} message
|arg2 = {{type|string}} mode 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} 
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;Needs ModUICtrl.&lt;/font&gt;&lt;br&gt;Possible modes are:&lt;br&gt;&quot;s&quot;/&quot;specs&quot; &amp; &quot;a&quot;/&quot;allies&quot;
}}


{{LuaCallout
|prefix = Spring.
|name = SendLuaGaiaMsg
|arg1 = {{type|string}} message
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} 
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;Needs ModUICtrl.&lt;/font&gt;
}}


{{LuaCallout
|prefix = Spring.
|name = SendLuaRulesMsg
|arg1 = {{type|string}} message
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} 
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;Needs ModUICtrl.&lt;/font&gt;
}}

= AI =

{{LuaCallout
|prefix = Spring.
|name = SendSkirmishAIMessage
|arg1 = {{type|number}} aiTeam
|arg2 = {{type|string}} message
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} {{pipe}} {{type|bool}} ai_processed, { {{bracket|1}} = {{type|string}} response1, ... }
|info = {{new|83.0}}&lt;br&gt;Note there is nothing in this table due to &quot;limitations&quot; of the AI interface.
}}

= Units =

{{LuaCallout
|prefix = Spring.
|name = SetUnitLeaveTracks
|arg1 = {{type|number}} unitID
|arg2 = {{type|bool}} leavetracks 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = {{new|83.0}}
}}


{{LuaCallout
|prefix = Spring.
|name = SetUnitSelectionVolumeData
|arg1 = {{type|number}} featureID
|arg2 = {{type|number}} scaleX, {{type|number}} scaleY, {{type|number}} scaleZ
|arg3 = {{type|number}} offsetX, {{type|number}} offsetY, {{type|number}} offsetZ
|arg4 = {{type|number}} vType
|arg5 = {{type|number}} tType
|arg6 = {{type|number}} Axis
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = {{new|104.0}}
}}

== Unit Selection ==

{{LuaCallout
|prefix = Spring.
|name = SelectUnitMap
|arg1 = { {{bracket|unitID}} = anything, ... } {{bracket}}
|arg2 = {{type|bool}} append {{rbracket}}
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = SelectUnitArray
|arg1 = { {{bracket|1}} = unitID1, {{bracket|2}} = unitID2, ... } {{bracket}}
|arg2 = {{type|bool}} append {{rbracket}}
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}



{{LuaCallout
|prefix = Spring.
|name = SetDrawSelectionInfo
|arg1 = {{type|bool}} drawSelectionInfo
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}

== Unit Group ==

{{LuaCallout
|prefix = Spring.
|name = SetUnitGroup
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} groupID 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;Needs ModUICtrl.&lt;/font&gt;
}}

== Give Order ==

{{LuaCallout
|prefix = Spring.
|name = GiveOrder
|arg1 = {{type|number}} cmdID
|arg2 = {{type|table}} params = {number, etc...}
|arg3 = {{type|table}} options = {&quot;alt&quot;, &quot;ctrl&quot;, &quot;shift&quot;, &quot;right&quot;}
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} {{pipe}} {{type|bool}} true
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;Needs ModUICtrl.&lt;/font&gt;&lt;br&gt;Gives order to all selected units.
}}


{{LuaCallout
|prefix = Spring.
|name = GiveOrderToUnit
|arg1 = {{type|number}} unitID
|arg2 = {{type|number}} cmdID
|arg3 = {{type|table}} params = {number, etc...}
|arg4 = {{type|table}} options = {&quot;alt&quot;, &quot;ctrl&quot;, &quot;shift&quot;, &quot;right&quot;}
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} {{pipe}} {{type|bool}} true
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;Needs ModUICtrl.&lt;/font&gt;
}}


{{LuaCallout
|prefix = Spring.
|name = GiveOrderToUnitMap
|arg1 = {{type|table}} unitMap = { {{bracket|unitID}} = arg1, etc... }
|arg2 = {{type|number}} cmdID
|arg3 = {{type|table}} params = {number, etc...}
|arg4 = {{type|table}} options = {&quot;alt&quot;, &quot;ctrl&quot;, &quot;shift&quot;, &quot;right&quot;}
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} {{pipe}} {{type|bool}} true
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;Needs ModUICtrl.&lt;/font&gt;
}}


{{LuaCallout
|prefix = Spring.
|name = GiveOrderToUnitArray
|arg1 = {{type|table}} unitArray = { {{bracket|1}} = {{type|number}} unitID, etc... }
|arg2 = {{type|number}} cmdID
|arg3 = {{type|table}} params = {number, etc...}
|arg4 = {{type|table}} options = {&quot;alt&quot;, &quot;ctrl&quot;, &quot;shift&quot;, &quot;right&quot;}
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} {{pipe}} {{type|bool}} true
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;Needs ModUICtrl.&lt;/font&gt;
}}


{{LuaCallout
|prefix = Spring.
|name = GiveOrderArrayToUnitMap
|arg1 = {{type|table}} unitMap = { {{bracket|unitID}} = arg1, etc... }
|arg2 = {{type|table}} orderArray = { {{type|number}} cmdID, {{type|table}} params = {number, etc...}, {{type|table}} options = {&quot;alt&quot;, &quot;ctrl&quot;, &quot;shift&quot;, &quot;right&quot;} }
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} {{pipe}} {{type|bool}} true
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;Needs ModUICtrl.&lt;/font&gt;
}}


{{LuaCallout
|prefix = Spring.
|name = GiveOrderArrayToUnitArray
|arg1 = {{type|table}} unitArray = { {{bracket|11}} = {{type|number}} unitID, etc... }
|arg2 = {{type|table}} orderArray = { {{type|number}} cmdID, {{type|table}} params = {number, etc...}, {{type|table}} options = {&quot;alt&quot;, &quot;ctrl&quot;, &quot;shift&quot;, &quot;right&quot;} } {{bracket}}
|arg3 = {{type|bool}} pairwise {{rbracket}}
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} {{pipe}} {{type|bool}} true
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;Needs ModUICtrl.&lt;/font&gt;&lt;br&gt;&quot;pairwise&quot; paramater ({{new|89.0}}) is used to send multiple units a single individual command.
}}



{{LuaCallout
|prefix = Spring.
|name = SetBuildFacing
|arg1 = {{type|number}} facing 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = SetBuildSpacing
|arg1 = {{type|number}} spacing 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}

== Unit NoDraw,NoSelect,NoMinimap ==


{{LuaCallout
|prefix = Spring.
|name = SetUnitNoDraw
|arg1 = {{type|number}} unitID
|arg2 = {{type|bool}} noDraw
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;LuaGadgets only!&lt;/font&gt;
}}


{{LuaCallout
|prefix = Spring.
|name = SetUnitNoSelect
|arg1 = {{type|number}} unitID
|arg2 = {{type|bool}} noSelect
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;LuaGadgets only!&lt;/font&gt;
}}


{{LuaCallout
|prefix = Spring.
|name = SetUnitNoMinimap
|arg1 = {{type|number}} unitID
|arg2 = {{type|bool}} noMinimap
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;LuaGadgets only!&lt;/font&gt;
}}

= Features =

{{LuaCallout
|prefix = Spring.
|name = SetFeatureFade
|arg1 = {{type|number}} featureID
|arg2 = {{type|bool}} allow
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = {{new|101.0}}&lt;br&gt;Control whether a feature will fade or not when zoomed out.
}}


{{LuaCallout
|prefix = Spring.
|name = SetFeatureNoDraw
|arg1 = {{type|number}} featureID
|arg2 = {{type|bool}} noDraw
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;LuaGadgets only!&lt;/font&gt;
}}


{{LuaCallout
|prefix = Spring.
|name = SetFeatureSelectionVolumeData
|arg1 = {{type|number}} featureID
|arg2 = {{type|number}} scaleX, {{type|number}} scaleY, {{type|number}} scaleZ
|arg3 = {{type|number}} offsetX, {{type|number}} offsetY, {{type|number}} offsetZ
|arg4 = {{type|number}} vType
|arg5 = {{type|number}} tType
|arg6 = {{type|number}} Axis
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = {{new|104.0}}
}}

= Developers =

{{LuaCallout
|prefix = Spring.
|name = SetDrawSky
|arg1 = {{type|bool}} drawSky 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = SetDrawWater
|arg1 = {{type|bool}} drawWater
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = SetDrawGround
|arg1 = {{type|bool}} drawGround 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = SetWaterParams
|arg1 = {{type|table}} params
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = As of 104.0 no longer needs cheating enabled.&lt;br&gt;Allows to change water params (mostly BumpWater ones) at runtime. You may want to set BumpWaterUseUniforms in your [[springrc]] to 1, then you don't even need to restart BumpWater via `/water 4`. &quot;Params&quot; table contains:
}}
&lt;pre&gt;  params = {
    absorb = {number r, number g, number b},
    baseColor = {number r, number g, number b},
    minColor = {number r, number g, number b},
    surfaceColor = {number r, number g, number b},
    diffuseColor = {number r, number g, number b},
    specularColor = {number r, number g, number b},
    planeColor = {number r, number g, number b},
    texture = string file,
    foamTexture = string file,
    normalTexture = string file,
    damage = number value,
    repeatX = number value,
    repeatY = number value,
    surfaceAlpha = number value,
    ambientFactor = number value,
    diffuseFactor = number value,
    specularFactor = number value,
    specularPower = number value,
    fresnelMin = number value,
    fresnelMax = number value,
    fresnelPower = number value,
    reflectionDistortion = number value,
    blurBase = number value,
    blurExponent = number value,
    perlinStartFreq = number value,
    perlinLacunarity = number value,
    perlinAmplitude = number value,
    numTiles = number value,
    shoreWaves = boolean value,
    forceRendering = boolean value,
    hasWaterPlane = boolean value,
  }&lt;/pre&gt;


{{LuaCallout
|prefix = Spring.
|name = SetMapRenderingParams
|arg1 = {{type|table}} params
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = {{new|104.0}}&lt;br&gt;Allows to change map rendering params at runtime.&lt;br&gt;&quot;Params&quot; table contains:
}}
&lt;pre&gt;  params = {
    splatTexMults = {number r, number g, number b, number a},
    splatTexScales = {number r, number g, number b, number a},
    voidWater = boolean value,
    voidGround = boolean value,
    splatDetailNormalDiffuseAlpha = boolean value,
  }&lt;/pre&gt;



{{LuaCallout
|prefix = Spring.
|name = SetLogSectionFilterLevel
|arg1 = {{type|string}} sectionName
|arg2 = {{type|string}} {{pipe}} {{type|number}} logLevel 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = {{New|95.0}}&lt;br&gt;See [[infolog.txt]] for possible log sections.
}}


{{LuaCallout
|prefix = Spring.
|name = SetDrawGroundDeferred
|arg1 = {{type|bool}} drawGroundDeferred {{bracket}}
|arg2 = {{type|bool}} drawGroundForward {{rbracket}}
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = {{new|101.0}} {{var|drawGroundForward}} allows disabling of the forward pass
}}




{{LuaCallout
|prefix = Spring.
|name = SetDrawModelsDeferred
|arg1 = {{type|bool}} drawUnitsDeferred 
|arg2 = {{type|bool}} drawFeaturesDeferred {{bracket}}
|arg3 = {{type|bool}} drawUnitsForward {{bracket}}
|arg4 = {{type|bool}} drawFeaturesForward  {{rbracket}}{{rbracket}}
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = {{new|101.0}} {{var|drawFeaturesForward}}, {{var|drawUnitsForward}} allows disabling of the respective forward passes
}}


{{LuaCallout
|prefix = Spring.
|name = SetVideoCapturingMode
|arg1 = {{type|bool}} allowCaptureMode 
|arg2 = 
|arg3 =
|arg4 =
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = {{new|104.0}}&lt;br&gt;This doesn't actually record the game in any way, it just regulates the framerate and interpolations.
}}


{{LuaCallout
|prefix = Spring.
|name = SetVideoCapturingTimeOffset
|arg1 = {{type|bool}} timeOffset
|arg2 = 
|arg3 =
|arg4 =
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = {{new|104.0}}
}}

= GUI =

{{LuaCallout
|prefix = Spring.
|name = DrawUnitCommands
|arg1 = {{type|number}} unitID
|arg2 = 
|arg3 =
|arg4 =
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = {{new|104.0}}
}}

or

{{LuaCallout
|prefix = Spring.
|name = DrawUnitCommands
|arg1 = {{type|table}} units = { {{bracket|1}} = unitID, ... } {{bracket}}
|arg2 = {{type|bool}} false
|arg3 =
|arg4 =
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}

or

{{LuaCallout
|prefix = Spring.
|name = DrawUnitCommands
|arg1 = {{type|table}} units = { {{bracket|unitID}} = arg1, ... } 
|arg2 = {{type|bool}} true
|arg3 =
|arg4 =
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = SetTeamColor
|arg1 = {{type|number}} teamID
|arg2 = {{type|number}} r
|arg3 = {{type|number}} g
|arg4 = {{type|number}} b
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = 
}}



{{LuaCallout
|prefix = Spring.
|name = AssignMouseCursor
|arg1 = {{type|string}} cmdName
|arg2 = {{type|string}} iconFileName {{bracket}}
|arg3 = {{type|bool}} overwrite = true {{bracket}}
|arg4 = {{type|bool}} hotSpotTopLeft = false {{rbracket}}{rbracket}}
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} {{pipe}} {{type|bool}} assigned
|info = Changes/creates the cursor of a single CursorCmd. Note, that iconFileName is not the full filename instead it is like this:&lt;br/&gt;Wanted filename: Anims/cursorattack_0.bmp&lt;br/&gt;=&gt; iconFileName: cursorattack
}}


{{LuaCallout
|prefix = Spring.
|name = ReplaceMouseCursor
|arg1 = {{type|string}} oldFileName
|arg2 = {{type|string}} newFileName {{bracket}}
|arg3 = {{type|bool}} hotSpotTopLeft = false {{rbracket}}
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} {{pipe}} {{type|bool}} assigned
|info = Mass replace all occurrence of the cursor in all CursorCmds.
}}


{{LuaCallout
|prefix = Spring.
|name = SetCustomCommandDrawData
|arg1 = {{type|number}} cmdID
|arg2 = {{type|number}} cmdID_cloneIcon {{pipe}} {{type|string}} iconname
|arg3 = {{type|table}} RGBA = { {{type|number}} r, {{type|number}} g, {{type|number}} b, {{type|number}} a } {{bracket}}
|arg4 = {{type|bool}} showArea {{rbracket}}
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} {{pipe}} {{type|bool}} assigned
|info = Register your custom cmd so it gets visible in the unit's cmd queue
}}

or

{{LuaCallout
|prefix = Spring.
|name = SetCustomCommandDrawData
|arg1 = {{type|number}} cmdID
|arg2 = {{type|nil}}
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} {{pipe}} {{type|bool}} assigned
|info = Register your custom cmd so it gets visible in the unit's cmd queue
}}

= Sharing =

{{LuaCallout
|prefix = Spring.
|name = SetShareLevel
|arg1 = {{type|string}} metal {{pipe}} {{type|string}} energy
|arg2 = {{type|number}} shareLevel 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;LuaGadgets only!&lt;/font&gt;&lt;br&gt;Note: shareLevel is 0&lt;= x &lt;= 1 .
}}


{{LuaCallout
|prefix = Spring.
|name = ShareResources
|arg1 = {{type|number}} teamID
|arg2 = {{type|string}} units
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;LuaGadgets only!&lt;/font&gt;
}}

or


{{LuaCallout
|prefix = Spring.
|name = ShareResources
|arg1 = {{type|number}} teamID
|arg2 = {{type|string}} metal {{pipe}} {{type|string}} energy
|arg3 = {{type|number}} amount 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;LuaGadgets only!&lt;/font&gt;
}}

= UnitDef RadarIcons &amp; BuildPics =

{{LuaCallout
|prefix = Spring.
|name = AddUnitIcon
|arg1 = {{type|string}} iconName
|arg2 = {{type|string}} texFile {{bracket}}
|arg3 = {{type|number}} size {{bracket}}
|arg4 = {{type|number}} dist {{bracket}}
|arg5 = {{type|bool}} radAdjust {{rbracket}}{{rbracket}}{{rbracket}}
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} {{pipe}} {{type|bool}} added
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = FreeUnitIcon
|arg1 = {{type|string}} iconName
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} {{pipe}} {{type|bool}} freed
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = SetUnitDefIcon
|arg1 = {{type|number}} unitDefID
|arg2 = {{type|string}} iconName
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;Needs ModUICtrl.&lt;/font&gt;&lt;br&gt;Sets radar icon.
}}


{{LuaCallout
|prefix = Spring.
|name = SetUnitDefImage
|arg1 = {{type|number}} unitDefID
|arg2 = {{type|string}} luaTexture {{pipe}} {{type|string}} texFile 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;Needs ModUICtrl.&lt;/font&gt;&lt;br&gt;Sets buildpic.
}}

= Camera =

{{LuaCallout
|prefix = Spring.
|name = SetCameraState
|arg1 = {{type|table}} camState
|arg2 = {{type|number}} camTime
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} {{pipe}} {{type|bool}} stateSet
|info = camState has the same format as the output of Spring.GetCameraState(). See [[Lua_camState]] for details about camState.&lt;br&gt;The camState's mode/name must fit the rest of the state. Getting a state, changing its mode/name and then passing it to SetCameraState will have undesired results. [https://springrts.com/mantis/view.php?id=5028#c15491] Also see #5028]
}}


{{LuaCallout
|prefix = Spring.
|name = SetCameraTarget
|arg1 = {{type|number}} x, {{type|number}} y, {{type|number}} z {{bracket}}
|arg2 = {{type|number}} transTime {{rbracket}}
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = For Spring Engine XZ represents horizontal, from north west corner of map and Y vertical, from water level and rising.
}}


{{LuaCallout
|prefix = Spring.
|name = SetCameraOffset
|arg1 = {{type|number}} px = 0 {{bracket}}
|arg2 = {{type|number}} py = 0 {{bracket}}
|arg3 = {{type|number}} pz = 0 {{bracket}}
|arg4 = {{type|number}} tx = 0 {{bracket}}
|arg5 = {{type|number}} ty = 0 {{bracket}}
|arg6 = {{type|number}} tz = 0 {{rbracket}}{{rbracket}}{{rbracket}}{{rbracket}}{{rbracket}}
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;Needs ModUICtrl.&lt;/font&gt;
}}

= (Virtual-)FileSystem =

{{LuaCallout
|prefix = Spring.
|name = ExtractModArchiveFile
|arg1 = {{type|string}} modfile
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|bool}} extracted
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = CreateDir
|arg1 = {{type|string}} path
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} {{pipe}} {{type|bool}} dirCreated
|info = &lt;font color=&quot;maroon&quot; style=&quot;font-weight:600&quot;&gt;Needs ModUICtrl.&lt;/font&gt;
}}

The full VFS API is available at [[Lua_VFS|link]].

= Engine Config =

The following functions read the engine configs saved in [[Springsettings.cfg]], a version-ed instance of these or a custom file supplied on the command line.
If ''*Overlay'' is ''true'', the value will only be set in memory, and not be restored for the next game.

{{LuaCallout
|prefix = Spring.
|name = SetConfigInt
|arg1 = {{type|string}} name
|arg2 = {{type|number}} value {{bracket}}
|arg3 = {{type|bool}} useOverlay = false {{rbracket}}
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} 
|info = 
}}



{{LuaCallout
|prefix = Spring.
|name = SetConfigFloat
|arg1 = {{type|string}} name
|arg2 = {{type|number}} value {{bracket}}
|arg3 = {{type|bool}} useOverlay = false {{rbracket}}
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} 
|info = {{new|104.0}}
}}


{{LuaCallout
|prefix = Spring.
|name = SetConfigString
|arg1 = {{type|string}} name
|arg2 = {{type|number}} value {{bracket}}
|arg3 = {{type|bool}} useOverlay = false {{rbracket}}
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} 
|info = {{new|104.0}}
}}

= World Primitives =
&lt;font color=&quot;red&quot; style=&quot;font-weight:600&quot;&gt;outdated! use opengl api instead!&lt;/font&gt;

{{LuaCallout
|prefix = Spring.
|name = AddWorldIcon
|arg1 = {{type|number}} cmdID
|arg2 = {{type|number}} x, {{type|number}} y, {{type|number}} z
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} 
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = AddWorldText
|arg1 = {{type|string}} text
|arg2 = {{type|number}} x, {{type|number}} y, {{type|number}} z
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} 
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = AddWorldUnit
|arg1 = {{type|number}} unitDefID
|arg2 = {{type|number}} x, {{type|number}} y, {{type|number}} z
|arg3 = {{type|number}} team
|arg4 = {{type|number}} facing
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} 
|info = 
}}

= Sun  =
The dynamic Sun must be invoked via /dynamicsun (Dynamic sun was removed in 104.0, use SetSunDirection, SetSunLighting &amp; SetAtmosphere instead).

{{LuaCallout
|prefix = Spring.
|name = SetSunManualControl
|arg1 = {{type|bool}} setManualControl 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} 
|info = {{removed|104.0}}
}}



{{LuaCallout
|prefix = Spring.
|name = SetSunParameters
|arg1 = {{type|number}} dirX
|arg2 = {{type|number}} dirY
|arg3 = {{type|number}} dirZ
|arg4 = {{type|number}} dist
|arg5 = {{type|number}} startTime
|arg6 = {{type|number}} orbitTime 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} 
|info = {{removed|104.0}}
}}


{{LuaCallout
|prefix = Spring.
|name = SetSunDirection
|arg1 = {{type|number}} dirX
|arg2 = {{type|number}} dirY
|arg3 = {{type|number}} dirZ
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} 
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = SetSunLighting
|arg1 = {{type|table}} params
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} 
|info = {{new|101.0}}&lt;br&gt;It can be used to modify the following sun lighting parameters: 
}}
&lt;pre&gt;     {ground,unit}{Ambient,Diffuse,Specular}Color and specularExponent
     All Colourvalues have to in the Range from 0.0 to 1.0 for all colors and the alpha
     Example usage: Spring.SetSunLighting({groundAmbientColor = {1, 0.1, 1}, groundDiffuseColor = {1, 0.1, 1} })&lt;/pre&gt;


{{LuaCallout
|prefix = Spring.
|name = SetAtmosphere
|arg1 = {{type|table}} params
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} 
|info = {{new|101.0}}&lt;br&gt;It can be used to modify the following atmosphere parameters: 
}}
&lt;pre&gt;     fog{Start,End}, {sun,sky,cloud}Color
     Example usage: Spring.SetAtmosphere({ fogStart = 0, fogEnd   = 0.5, fogColor = { 0.7, 0.2, 0.2, 1 }})&lt;/pre&gt;

= Misc =

{{LuaCallout
|prefix = Spring.
|name = Reload
|arg1 = {{type|string}} startscript
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = -
|info = {{new|99.0}}&lt;br&gt;start-script is the CONTENT of the [[script.txt]] spring should use to start.
}}



{{LuaCallout
|prefix = Spring.
|name = Restart
|arg1 = {{type|string}} commandline_args
|arg2 = {{type|string}} startscript
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = -
|info = {{new|0.79}}&lt;br&gt;If this call returns, something went wrong.&lt;br&gt;''commandline_args'' are commandline arguments passed to spring executable.
}}


{{LuaCallout
|prefix = Spring.
|name = Start
|arg1 = {{type|string}} commandline_args
|arg2 = {{type|string}} startscript
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = -
|info = {{new|102.0}}&lt;br&gt;If this call returns, something went wrong.&lt;br&gt;Launches a new Spring instance without terminating the existing one.&lt;br&gt;start-script is the CONTENT of the [[script.txt]] spring should use to start (if empty, no start-script is added, you can still point spring to your custom script.txt when you add the file-path to ''commandline_args''.
}}


{{LuaCallout
|prefix = Spring.
|name = SetWMIcon
|arg1 = {{type|string}} iconFileName 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} 
|info = {{new|83.0}}&lt;br&gt;Sets the icon for the process which is seen in the OS task-bar and other places (default: spring-logo).&lt;br/&gt;Note: has to be 24bit or 32bit.&lt;br/&gt;Note: on windows, it has to be 32x32 pixels in size (recommended for cross-platform)&lt;br/&gt;Note: ''*.bmp'' images have to be in BGR format (default for m$ ones).&lt;br/&gt;Note: ''*.ico'' images are not supported.
}}


{{LuaCallout
|prefix = Spring.
|name = SetWMCaption
|arg1 = {{type|string}} title {{bracket}}
|arg2 = {{type|string}} titleShort = title {{rbracket}}
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} 
|info = {{new|83.0}}&lt;br&gt;Sets the window ''title'' for the process (default: &quot;Spring &lt;version&gt;&quot;).&lt;br&gt;The ''shortTitle'' is displayed in the OS task-bar (default: &quot;Spring &lt;version&gt;&quot;).&lt;br&gt;'''NOTE:''' ''shortTitle'' is only ever possibly used under X11 (Linux &amp; OS X), but not with QT (KDE) and never under Windows. See [http://www.gpwiki.org/index.php/SDL:Tutorials:Initializing_SDL_Libraries#About_the_icon_.28.22Icon_Title.22.29_parameter_on_different_window-managers this site] for more details.
}}


{{LuaCallout
|prefix = Spring.
|name = ClearWatchDogTimer
|arg1 = {{bracket}} {{type|string}} threadName = main {{rbracket}}
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} 
|info = {{new|83.0}}
}}


{{LuaCallout
|prefix = Spring.
|name = SetClipboard
|arg1 = {{type|string}} text
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} 
|info = {{new|98.0}}
}}

= Rendering =
== Preload ==
Allow the engine to load the unit's model (and texture) in a background thread. Wreckages and buildOptions of a unit are automatically preloaded.

{{LuaCallout
|prefix = Spring.
|name = PreloadUnitDefModel
|arg1 = {{type|number}} unitDefID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} 
|info = {{{new|101.0}}
}}


{{LuaCallout
|prefix = Spring.
|name = PreloadFetureDefModel
|arg1 = {{type|number}} featureDefID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}} 
|info = {{{new|101.0}}
}}

== Lighting ==
&lt;font color=&quot;red&quot; style=&quot;font-weight:600&quot;&gt;NOTE: these (0.83+) lighting callouts only work when called from unsynced gadgets!&lt;/font&gt;

{{LuaCallout
|prefix = Spring.
|name = AddMapLight
|arg1 = {{type|table}} lightParams
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|number}} lightHandle
|info = (requires MaxDynamicMapLights &amp;gt; 0)
}}


{{LuaCallout
|prefix = Spring.
|name = AddModelLight
|arg1 = {{type|table}} lightParams
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|number}} lightHandle
|info = (requires MaxDynamicMapLights &amp;gt; 0)
}}


{{LuaCallout
|prefix = Spring.
|name = UpdateMapLight
|arg1 = {{type|number}} lightHandle
|arg2 = {{type|table}} lightParams
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|bool}} success
|info =
}}


{{LuaCallout
|prefix = Spring.
|name = UpdateModelLight
|arg1 = {{type|number}} lightHandle
|arg2 = {{type|table}} lightParams
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|bool}} success
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = SetMapLightTrackingState
|arg1 = {{type|number}} lightHandle
|arg2 = {{type|number}} unitOrProjectileID
|arg3 = {{type|bool}} enableTracking
|arg4 = {{type|bool}} unitOrProjectile
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|bool}} success
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = SetModelLightTrackingState
|arg1 = {{type|number}} lightHandle
|arg2 = {{type|number}} unitOrProjectileID
|arg3 = {{type|bool}} enableTracking
|arg4 = {{type|bool}} unitOrProjectile
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|bool}} success
|info = 
}}


'''lightParams''' is a table that should contain at least one of the following recognized key/value pairs:

    lightParams = {
        position = {px, py, pz},
        direction = {dx, dy, dz},
        ambientColor = {red, green, blue},
        diffuseColor = {red, green, blue},
        specularColor = {red, green, blue},
        intensityWeight = {ambientWeight, diffuseWeight, specularWeight},

        -- per-frame decay of ambientColor (spread over TTL frames)
        ambientDecayRate = {ambientRedDecay, ambientGreenDecay, ambientBlueDecay},
        -- per-frame decay of diffuseColor (spread over TTL frames)
        diffuseDecayRate = {diffuseRedDecay, diffuseGreenDecay, diffuseBlueDecay},
        -- per-frame decay of specularColor (spread over TTL frames)
        specularDecayRate = {specularRedDecay, specularGreenDecay, specularBlueDecay},
        -- *DecayType = 0.0 -&gt; interpret *DecayRate values as linear, else as exponential
        decayFunctionType = {ambientDecayType, diffuseDecayType, specularDecayType},

        radius = number elmos,
        fov = number degrees,
        ttl = number frames,
        priority = number,
        ignoreLOS = boolean,
    }

= Map =

{{LuaCallout
|prefix = Spring.
|name = SetSkyBoxTexture
|arg1 = {{type|string}} texName
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = {{new|101.0}}
}}


{{LuaCallout
|prefix = Spring.
|name = SetMapShadingTexture
|arg1 = {{type|string}} texType
|arg2 = {{type|string}} texName 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|bool}} success
|info = {{new|101.0}}
}}

&lt;div class=&quot;note&quot;&gt;Example usage: Spring.SetMapShadingTexture(&quot;$ssmf_specular&quot;, &quot;name_of_my_shiny_texture&quot;)&lt;/div&gt;

{{LuaCallout
|prefix = Spring.
|name = SetMapSquareTexture
|arg1 = {{type|number}} texSqrX
|arg2 = {{type|number}} texSqrY
|arg3 = {{type|string}} luaTexName
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|bool}} success
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = SetMapShader
|arg1 = {{type|number}} standardShaderID
|arg2 = {{type|number}} deferredShaderID 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 = 
|arg7 = 
|arg8 = 
|arg9 = 
|return = {{type|nil}}
|info = {{new|101.0}}
}}

&lt;div class=&quot;note&quot;&gt;The ID's must refer to valid programs returned by gl.CreateShader. Passing in a value of 0 will cause the respective shader to revert back to its engine default. Custom map shaders that declare a uniform ivec2 named &quot;texSquare&quot; can sample from the default diffuse texture(s), which are always bound to TU 0.&lt;/div&gt;

[[category: Lua]]</text>
      <sha1>23rvz3jxrvosmqm7f6uooeqor4sxcg2</sha1>
    </revision>
  </page>
  <page>
    <title>Lua UnsyncedRead</title>
    <ns>0</ns>
    <id>2428</id>
    <revision>
      <id>31783</id>
      <parentid>31782</parentid>
      <timestamp>2022-05-01T09:38:29Z</timestamp>
      <contributor>
        <username>Beherith</username>
        <id>2441</id>
      </contributor>
      <comment>/* Time */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="35206">[[Engine_Development|Development]] &lt; [[Lua_Scripting|Lua Scripting]] &lt; {{FULLPAGENAME}}
=Unsynced Read=

== Replay/Spectating ==

{{LuaCallout
|prefix = Spring.
|name = IsReplay
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|bool}} isReplay
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetReplayLength
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} timeInSeconds
|info = {{new|92.0}}
}}



{{LuaCallout
|prefix = Spring.
|name = GetSpectatingState
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|bool}} spectating, {{type|bool}} fullView, {{type|bool}} fullSelect
|info = 
}}

== Game/Menu Name ==

{{LuaCallout
|prefix = Spring.
|name = GetGameName
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|string}} name
|info = {{new|104.0}}&lt;br&gt;Apparently returns {{xtaglink|Modinfo.lua|name}} .. {{xtaglink|Modinfo.lua|version}} from [[Modinfo.lua]]. E.g. &quot;Spring: 1944 test-5640-ac2d15b&quot;.
}}



{{LuaCallout
|prefix = Spring.
|name = GetMenuName
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|string}} name
|info = {{new|104.0}}
}}

== ModUI ==

{{LuaCallout
|prefix = Spring.
|name = GetModUICtrl
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|bool}} ModUICtrl
|info = 
}}

== MyInfo ==

{{LuaCallout
|prefix = Spring.
|name = GetMyAllyTeamID
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|number}} allyTeamID
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetMyTeamID
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|number}} teamID
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetMyPlayerID
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|number}} playerID
|info = 
}}

== Local Player,Team,Ally ==
&lt;span class=&quot;note&quot;&gt;Redundant same as the GetMyXYZ functions!&lt;/span&gt;

{{LuaCallout
|prefix = Spring.
|name = GetLocalPlayerID
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|number}} playerID
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetLocalTeamID
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|number}} teamID
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetLocalAllyTeamID
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|number}} allyID
|info = 
}}

== Team/Player Info ==

{{LuaCallout
|prefix = Spring.
|name = GetPlayerRoster
|arg1 = {{bracket}}{{type|number}} sortType{{rbracket}} {{pipe}} {{bracket}}{{type|number}} sortType{{rbracket}}, {{bracket}}{{type|bool}} showPathingPlayers{{rbracket}}
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|table}} playerTable 
|info = &quot;playerTable&quot; contains:
}}
&lt;pre&gt;playerTable = {
            [1] = {
              string  name,
              number  playerID,
              number  teamID,
              number  allyTeamID,
              boolean spectator,
              number  cpuUsage,
              number  pingTime
            },
            etc...
          }

   if pingTime == -1, the player is pathfinding, in order to find the progress, use:
   cpuUsage&amp;0x1 if it's PC or BO, cpuUsage&amp; 0xFE to get path res, (cpuUsage&gt;&gt;8)*1000
   for the progress
  Sort codes:
     1 = Sort by allies  (the default)
     2 = Sort by teamID
     3 = Sort by playerName
     4 = Sort by CPU usage
     5 = Sort by ping time&lt;/pre&gt;


{{LuaCallout
|prefix = Spring.
|name = GetTeamColor
|arg1 = {{type|number}} teamID
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} r, {{type|number}} g, {{type|number}} b, {{type|number}} a
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetTeamOrigColor
|arg1 = {{type|number}} teamID
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} r, {{type|number}} g, {{type|number}} b, {{type|number}} a
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetPlayerTraffic
|arg1 = {{type|number}} playerID {{bracket}}
|arg2 = {{type|number}} packetID {{rbracket}}
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|number}} traffic
|info = 
}}

== Sound ==

{{LuaCallout
|prefix = Spring.
|name = GetSoundStreamTime
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|number}} playedTime, {{type|number}} totalTime,
|info = 
}}

== Camera ==

{{LuaCallout
|prefix = Spring.
|name = GetCameraNames
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = { {{bracket|camName}} = {{type|number}} camNum, ... }
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetCameraState
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = { &quot;name&quot; = string, &quot;mode&quot; = number camIdx, state1 = number, state2 = number, ... }
|info = See [[Lua_camState]] for details about Spring.GetCameraState output.
}}


{{LuaCallout
|prefix = Spring.
|name = GetCameraPosition
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|number}} x, {{type|number}} y, {{type|number}} z
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetCameraDirection
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|number}} forward_x, {{type|number}} forward_y, {{type|number}} forward_z
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetCameraFOV
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|number}} vFov, {{type|number}} hFov
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetCameraVectors
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|table}} vectorTable
|info = vectorTable contains:
}}
&lt;pre&gt;vectorTable = {
    forward   = { [1] = number x, [2] = number y, [3] = number z },
    up        = { [1] = number x, [2] = number y, [3] = number z },
    right     = { [1] = number x, [2] = number y, [3] = number z },
    top       = { [1] = number x, [2] = number y, [3] = number z },
    bottom    = { [1] = number x, [2] = number y, [3] = number z },
    leftside  = { [1] = number x, [2] = number y, [3] = number z },
    rightside = { [1] = number x, [2] = number y, [3] = number z }
  }&lt;/pre&gt;

=== Inview ===

{{LuaCallout
|prefix = Spring.
|name = GetVisibleUnits
|arg1 = {{bracket}}{{type|number}} teamID = -1 {{bracket}}
|arg2 = {{type|number}} radius = 30 {{bracket}}
|arg3 = {{type|bool}} Icons = true {{rbracket}}{{rbracket}}{{rbracket}}
|arg4 =
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|table}} unitTable = { {{bracket|1}} = {{type|number}} unitID, ... }
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetVisibleFeatures
|arg1 = {{bracket}}{{type|number}} allyTeamID = -1 {{bracket}}
|arg2 = {{type|number}} radius = 30 {{bracket}}
|arg3 = {{type|bool}} Icons = true {{bracket}}
|arg4 = {{type|bool}} geos = true {{rbracket}}{{rbracket}}{{rbracket}}{{rbracket}}
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|table}} featureTable = { {{bracket|1}} = {{type|number}} featureID, ... }
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = IsAABBInView
|arg1 = {{type|number}} minX, {{type|number}} minY, {{type|number}} minZ
|arg2 = {{type|number}} maxX, {{type|number}} maxY, {{type|number}} maxZ
|arg3 = 
|arg4 = 
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|bool}} isInView
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = IsSphereInView
|arg1 = {{type|number}} x, {{type|number}} y, {{type|number}} z {{bracket}}
|arg2 = {{type|number}} radius {{rbracket}}
|arg3 = 
|arg4 = 
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|bool}} isInView
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = IsUnitIcon
|arg1 = {{type|number}} unitID 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|bool}} isUnitIcon
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = IsUnitInView
|arg1 = {{type|number}} unitID 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|bool}} isUnitInView
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = IsUnitVisible
|arg1 = {{type|number}} unitID {{bracket}}
|arg2 = {{type|number}} radius {{bracket}}
|arg3 = {{type|bool}} checkIcons {{rbracket}}{{rbracket}}
|arg4 = 
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|bool}} isVisible
|info = 
}}

=== Screen Trace ===


{{LuaCallout
|prefix = Spring.
|name = WorldToScreenCoords
|arg1 = {{type|number}} x, {{type|number}} y, {{type|number}} z
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 =
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|number}} x, {{type|number}} y, {{type|number}} z
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = TraceScreenRay
|arg1 = {{type|number}} mouseX, {{type|number}} mouseY,  {{bracket}}
|arg2 = {{type|bool}} onlyCoords {{bracket}}
|arg3 = {{type|bool}} useMinimap {{bracket}}
|arg4 = {{type|bool}} includeSky {{bracket}}
|arg5 = {{type|bool}} ignoreWater {{bracket}}
|arg6 ={{type|number}} D {{rbracket}}{{rbracket}}{{rbracket}}{{rbracket}}{{rbracket}}
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|string}} unit, {{type|number}} unitID {{pipe}} {{type|string}} feature, {{type|number}} featureID {{pipe}} {{type|string}} ground, {{type|table}} coords = { {{bracket|1}} = {{type|number}} x, {{bracket|2}} = {{type|number}} y, {{bracket|3}} = {{type|number}} z }
|info = {{new|101.0}}
}}
&lt;pre&gt;Extended to allow a custom plane, parameters are (0, 1, 0, D=0) where D is the offset D can be specified in the third argument (if all the bools are false) or in the seventh (as shown). Intersection coordinates are returned in t[4],t[5],t[6] when the ray goes offmap and includeSky is true), or when no unit or feature is hit (or onlyCoords is true). This will only work for units &amp; objects with the default collission sphere. Per Piece collission and custom collission objects are not supported. The unit must be selectable, to appear to a screen trace ray.

To get map coordinates under mouse cursor: input mouse coordinates obtained via GetMouseState() and pass true for the onlyCoords parameter. Be careful as going off map will result in nil:
   local mouseX, mouseY = Spring.GetMouseState()
   print (&quot;Mouse coordinates: (&quot; .. mouseX .. &quot;, &quot; .. mouseY .. &quot;)&quot;)
   local desc, args = Spring.TraceScreenRay(mouseX, mouseY, true)
   if nil == desc then return end -- off map
   local x = args[1]
   local y = args[2]
   local z = args[3]
   print (&quot;World coordinates: (&quot; .. x .. &quot;, &quot; .. y .. &quot;, &quot; .. z .. &quot;)&quot;)&lt;/pre&gt;


{{LuaCallout
|prefix = Spring.
|name = GetPixelDir
|arg1 = {{type|number}} x
|arg2 = {{type|number}} y
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|number}} dirX, {{type|number}} dirY, {{type|number}} dirZ
|info = {{New|95.0}}
}}

=== Screen &amp; Window Geometry ===


{{LuaCallout
|prefix = Spring.
|name = GetViewGeometry
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|number}} viewSizeX, {{type|number}} viewSizeY, {{type|number}} viewPosX, {{type|number}} viewPosY
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetWindowGeometry
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|number}} winSizeX, {{type|number}} winSizeY, {{type|number}} winPosX, {{type|number}} winPosY
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetScreenGeometry
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|number}} screenSizeX, {{type|number}} screenSizeY, {{type|number}} ZERO, {{type|number}} ZERO
|info = Is missing multiscreen support!
}}

== Unit ==

{{LuaCallout
|prefix = Spring.
|name = IsUnitAllied
|arg1 = {{type|number}} unitID 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|bool}} isAllied
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitViewPosition
|arg1 = {{type|number}} unitID {{bracket}}
|arg2 = {{type|bool}} midPos = false {{rbracket}}
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} x, {{type|number}} y, {{type|number}} z
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitTransformMatrix
|arg1 = {{type|number}} unitID {{bracket}}
|arg2 = {{type|bool}} invert = false {{rbracket}}
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} a11, {{type|number}} a12 ..., {{type|number}} a44 (4x4 matrix)
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitSelectionVolumeData
|arg1 = {{type|number}} unitID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|number}} scaleX, {{type|number}} scaleY, {{type|number}} scaleZ, {{type|number}} offsetX, {{type|number}} offsetY, {{type|number}} offsetZ, {{type|number}} volumeType, {{type|number}} testType, {{type|number}} primaryAxis, {{type|bool}} disabled
|info = 
}}

=== Selected Units ===

{{LuaCallout
|prefix = Spring.
|name = GetSelectedUnits
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = { {{bracket|1}} = {{type|number}} unitID, ... }
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetSelectedUnitsSorted
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = { {{bracket}}{{type|number}} unitDefID{{rbracket}} = { {{bracket|1}} = {{bracket}}{{type|number}} unitID{{rbracket}}, etc... }, ... }
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetSelectedUnitsCounts
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = { {{bracket}}{{type|number}} unitDefID{{rbracket}} = {{type|number}} count, etc... }
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetSelectedUnitsCount
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|number}} count
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = IsUnitSelected
|arg1 = {{type|number}} unitID 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|bool}} isSelected
|info = 
}}

=== Unit Groups ===

{{LuaCallout
|prefix = Spring.
|name = GetUnitGroup
|arg1 = {{type|number}} unitID 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} groupNumber
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetGroupList
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} { {{bracket|number}} = {{type|number}} unitCount, ... }
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetSelectedGroup
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|number}} groupNumber
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetGroupAIName
|arg1 = {{type|number}} groupID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|string}} aiName
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetGroupAIList
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = { {{bracket|1}} = {{type|string}} aiName, ... }
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetGroupUnits
|arg1 = {{type|number}} groupID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} { {{bracket|1}} = {{type|number}} unitID, ... }
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetGroupUnitsSorted
|arg1 = {{type|number}} groupID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} { {{bracket}}{{type|number}} unitDefID{{rbracket}} = { {{type|number}} unitID, ... }, ... }
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetGroupUnitsCounts
|arg1 = {{type|number}} groupID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} { {{bracket}}{{type|number}} unitDefID{{rbracket}} = {{type|number}} count, ... }
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetGroupUnitsCount
|arg1 = {{type|number}} groupID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} count
|info = 
}}

== Feature ==

{{LuaCallout
|prefix = Spring.
|name = GetFeatureSelectionVolumeData
|arg1 = {{type|number}} unitID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|number}} scaleX, {{type|number}} scaleY, {{type|number}} scaleZ, {{type|number}} offsetX, {{type|number}} offsetY, {{type|number}} offsetZ, {{type|number}} volumeType, {{type|number}} testType, {{type|number}} primaryAxis, {{type|bool}} disabled
|info = 
}}

== Projectiles ==

{{LuaCallout
|prefix = Spring.
|name = GetVisibleProjectiles
|arg1 = {{bracket}} {{type|number}} allyTeamID = -1 {{bracket}}
|arg2 = {{type|bool}} addSyncedProjectiles = true {{bracket}}
|arg3 = {{type|bool}} addWeaponProjectiles = true {{bracket}}
|arg4 = {{type|bool}} addPieceProjectiles = true {{rbracket}}{{rbracket}}{{rbracket}}{{rbracket}}
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} { {{bracket|1}} = {{type|number}} projectileID, ... }
|info = 
}}

== UI ==

{{LuaCallout
|prefix = Spring.
|name = GetUICommands
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} { {{bracket|1}} = { command={{type|string}}, description={{type|string}}, synced={{type|bool}}, cheat={{type|bool}}}, ... }
|info = {{new|101.0}}&lt;br&gt;Returns a list of available [[UI commands]].
}}

=== GUI Settings ===

{{LuaCallout
|prefix = Spring.
|name = IsGUIHidden
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}}  {{type|bool}} isHidden
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = HaveShadows
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}}  {{type|bool}} haveShadows
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = HaveAdvShading
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|bool}} haveShading
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetWaterMode
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} mode, {{type|string}} mode
|info = 
}}
&lt;pre&gt;  mode numbers:
      0 - basic
      1 - reflective
      2 - dynamic
      3 - refractive
      4 - bumpwater
      default - unknown&lt;/pre&gt;



{{LuaCallout
|prefix = Spring.
|name = GetMapDrawMode
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|string}} &quot;normal&quot; {{pipe}} {{type|string}} &quot;height&quot; {{pipe}} {{type|string}} &quot;metal&quot; {{pipe}} {{type|string}} &quot;pathTraversability&quot; {{pipe}} {{type|string}} &quot;los&quot;
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetDrawSelectionInfo
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|bool}} drawSelectInfo
|info = Returns whether &amp;quot;Selected units&amp;quot; text is displayed.
}}

=== Unit &amp; Feature GUI States ===


{{LuaCallout
|prefix = Spring.
|name = GetUnitLuaDraw
|arg1 = {{type|number}} unitID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|bool}} unitDraw
|info = 
}}



{{LuaCallout
|prefix = Spring.
|name = GetUnitNoDraw
|arg1 = {{type|number}} unitID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|bool}} noDraw
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitNoMinimap
|arg1 = {{type|number}} unitID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|bool}} noMinimap
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetUnitNoSelect
|arg1 = {{type|number}} unitID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|bool}} noSelect
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetFeatureLuaDraw
|arg1 = {{type|number}} featureID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|bool}} featureDraw
|info = 
}}



{{LuaCallout
|prefix = Spring.
|name = GetFeatureNoDraw
|arg1 = {{type|number}} featureID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|bool}} noDraw
|info = 
}}

=== Minimap ===

{{LuaCallout
|prefix = Spring.
|name = GetMiniMapGeometry
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|number}} posX, {{type|number}} posY, {{type|number}} sizeX, {{type|number}} sizeY, {{type|bool}} minimized, {{type|bool}} maximized
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetMiniMapDualScreen
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|bool}} false {{pipe}} {{type|string}} &quot;left&quot; {{pipe}} {{type|string}} &quot;right&quot;
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = IsAboveMiniMap
|arg1 = {{type|number}} x
|arg2 = {{type|number}} y
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|bool}} isAbove
|info = 
}}

=== (Build-)Menu ===

{{LuaCallout
|prefix = Spring.
|name = GetActiveCommand
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} index {{bracket}}, {{type|number}} cmd_id, {{type|number}} cmd_type, {{type|string}} cmd_name {{rbracket}}
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetDefaultCommand
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} index {{bracket}}, {{type|number}} cmd_id, {{type|number}} cmd_type, {{type|string}} cmd_name {{rbracket}}
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetActiveCmdDescs
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|table}} cmdDesc
|info = cmdDesc contains:
}}
&lt;pre&gt;cmdDesc = {
    [1] = {
      id=number,
      type=number,
      name=string,
      action=string,
      tooltip=string,
      texture=string,
      cursor=string,
      hidden=boolean,
      disabled=boolean,
      showUnique=boolean,
      onlyTexture=boolean,
      params = { [1] = string, .. }
    }, ...
  }&lt;/pre&gt;


{{LuaCallout
|prefix = Spring.
|name = GetActiveCmdDesc
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|table}} cmdDesc
|info = cmdDesc contains:
}}
&lt;pre&gt;cmdDesc = {
      id=number,
      type=number,
      name=string,
      action=string,
      tooltip=string,
      texture=string,
      cursor=string,
      hidden=boolean,
      disabled=boolean,
      showUnique=boolean,
      onlyTexture=boolean,
      params = { [1] = string, .. }
  }&lt;/pre&gt;


{{LuaCallout
|prefix = Spring.
|name = GetCmdDescIndex
|arg1 = {{type|number}} cmdID
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} index
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetActivePage
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} pageNum, {{type|number}} maxPages
|info = 
}}

=== Build Facing ===

{{LuaCallout
|prefix = Spring.
|name = GetBuildFacing
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} facing
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetBuildSpacing
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} spacing
|info = 
}}

=== GatherMode &amp; InvertQueueKey ===

{{LuaCallout
|prefix = Spring.
|name = GetGatherMode
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} gatherMode
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetInvertQueueKey
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} queueKey
|info = 
}}

=== Mouse States ===

{{LuaCallout
|prefix = Spring.
|name = GetMouseState
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|number}} x, {{type|number}} y, {{type|bool}} leftPressed, {{type|bool}} middlePressed, {{type|bool}} rightPressed, {{type|bool}} offscreen
|info = {{new|104.0}} Sixth return value offscreen.&lt;br&gt;X, Y are the screen coordinates, not world ones. This coordinate system starts in the lower left corner. For world coordinates see Spring.TraceScreenRay.
}}


{{LuaCallout
|prefix = Spring.
|name = GetMouseCursor
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|string }} name, {{type|number}} scale
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetMouseStartPosition
|arg1 = {{type|number}} mouseButton 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} pressedX, {{type|number}} pressedY, {{type|number}} camPosX, {{type|number}} camPosY, {{type|number}} camPosZ, {{type|number}} dirX, {{type|number}} dirY, {{type|number}} dirZ
|info = 
}}

=== (Hot-)Keys ===

{{LuaCallout
|prefix = Spring.
|name = GetKeyState
|arg1 = {{type|number}} key
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|bool}} keyState
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetModKeyState
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|bool}} alt, {{type|bool}} ctrl, {{type|bool}} meta, {{type|bool}} shift
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetPressedKeys
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = { {{bracket}}{{type|number}} code{{rbracket}} = {{type|bool}}, {{bracket}}{{type|string}} name{{rbracket}} = {{type|bool}}, ... }
|info = {{new|99.0}}: {{type|string}} name&lt;br&gt;Returns the SDL1 codes for the pressed keys, first as an integer, a string containing the hex representation.&lt;br&gt;Use Spring.[[Lua_UnsyncedRead#GetKeySymbol|GetKeySymbol]] to convert to an SDL2 symbol.
}}



{{LuaCallout
|prefix = Spring.
|name = GetKeyCode
|arg1 = {{type|string}} keysym
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|number}} keyCode
|info = Returns the SDL1 code for the SDL2 symbol
}}


{{LuaCallout
|prefix = Spring.
|name = GetKeySymbol
|arg1 = {{type|number}} key
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|string}} &quot;keysym1&quot;, {{type|string}} &quot;keysym2&quot;
|info = Converts an SDL1 keycode into an SDL2 keycode, represented as a hexadecimal string. For most cases, these values will be the same.
}}


{{LuaCallout
|prefix = Spring.
|name = GetKeyBindings
|arg1 = {{type|string}} keyset 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|table}} keyBindings
|info = keyBindings contains:
}}
&lt;pre&gt;keyBindings = {
    [1] = {
      [string actionCmd] = string actionExtra,
      command   = string actionCmd,    {{new|97}}
      boundWith = string boundWith,    {{new|97}}
      extra     = string actionExtra,  {{new|97}}
    }, ...
  }&lt;/pre&gt;


{{LuaCallout
|prefix = Spring.
|name = GetActionHotKeys
|arg1 = {{type|string}} action
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} { {{bracket|1}} = {{type|string}} hotKey, ... }
|info = 
}}

=== Console ===


{{LuaCallout
|prefix = Spring.
|name = GetLastMessagePositions
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} { {{bracket|1}} = { {{type|number}} x, {{type|number}} y, {{type|number}} z }, ... }
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetConsoleBuffer
|arg1 = {{bracket}}{{type|number}} maxLines{{rbracket}}
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} { {{bracket|1}} = { text = {{type|string}}, priority = {{type|number}} }, ... }
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetCurrentTooltip
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|string}} tooltip
|info = 
}}

=== LOS Colors ===

{{LuaCallout
|prefix = Spring.
|name = GetLosViewColors
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|table}} always = {r,g,b}, {{type|table}} LOS = {r,g,b}, {{type|table}} radar = {r,g,b}, {{type|table}} jam = {r,g,b}, {{type|table}} radar2 = {r,g,b}
|info = {{new|100}}
}}

== Config ==

{{LuaCallout
|prefix = Spring.
|name = GetConfigParams
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|table}} configParams
|info = Same information as &lt;code&gt;spring --list-config-vars&lt;/code&gt;&lt;br&gt;configParams contains:
}}
&lt;pre&gt;configParams = {
    {
      name = string,
      type = string,
      [ description = string, ]
      [ defaultValue = string, ]
      [ minimumValue = string, ]
      [ maximumValue = string, ]
      [ safemodeValue = string, ]
      [ declarationFile = string, ]
      [ declarationLine = number, ]
      [ readOnly = bool, ]
    },
    ...
  }&lt;/pre&gt;


{{LuaCallout
|prefix = Spring.
|name = GetConfigInt
|arg1 = {{type|string}} name {{bracket}}
|arg2 = {{type|number}} default {{rbracket}}
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} configInt
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetConfigFloat
|arg1 = {{type|string}} name {{bracket}}
|arg2 = {{type|number}} default {{rbracket}}
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} configFloat
|info = {{new|104.0}}
}}


{{LuaCallout
|prefix = Spring.
|name = GetConfigString
|arg1 = {{type|string}} name {{bracket}}
|arg2 = {{type|number}} default {{rbracket}}
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|string}} configString
|info = 
}}

== FPS &amp; GetDrawFrame ==


{{LuaCallout
|prefix = Spring.
|name = GetFPS
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|number}} fps
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetDrawFrame
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|number}} low_16bit, {{type|number}} high_16bit
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetVideoCapturingMode
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|bool}} videoCaptureAllowed
|info = {{new|104.0}}
}}

== Time ==

{{LuaCallout
|prefix = Spring.
|name = GetGameSpeed
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|number}} userSpeedFactor, {{type|number}} speedFactor, {{type|bool}} paused
|info = Speed factors are by default 1.0, (the default simulation gamespeed) but are not 0 when the game is paused. Factor at 10x gamespeed is 10.0. {{new|98.0}}
}}


{{LuaCallout
|prefix = Spring.
|name = GetGameState
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|bool}} finishedLoading, {{type|bool}} loadedFromSave, {{type|bool}} locallyPaused, {{type|bool}} laggingWrtExpectedFromSimtime
|info = {{new|105.0}}
}}


{{LuaCallout
|prefix = Spring.
|name = GetFrameTimeOffset
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} offset
|info = Gets globalRendering-&gt;timeOffset, which contains the offset of the current draw frame from the last sim frame, expressed in fractions of a frame. Ideally, when running 30hz sim, and 60hz rendering, the draw frames should have and offset of either 0.0 frames, or 0.5 frames. When draw frames are not integer multiples of sim frames, some interpolation happens, and this timeoffset shows how far along it is. 
}}


{{LuaCallout
|prefix = Spring.
|name = GetLastUpdateSeconds
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|nil}} {{pipe}} {{type|number}} lastUpdateSeconds
|info = 
}}


{{LuaCallout
|prefix = Spring.
|name = GetHasLag
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|bool}} hasLag
|info = 
}}



{{LuaCallout
|prefix = Spring.
|name = GetTimer
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|timer}}
|info = This function returns a timer type object, which we can use a pair of to calculate the time difference between two timer objects with DiffTimers. However, this time is at best millisecond resolution. 
}}


{{LuaCallout
|prefix = Spring.
|name = GetFrameTimer
|arg1 = {{bracket}} {{type|bool}} lastFrameTime {{rbracket}}
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|timer}}
|info = {{new|102.0}}&lt;br&gt;Get a timer for the start of the frame, this should give better results for camera interpolations. If given an optional boolean true, then it returns the game-&gt;lastFrameTime instead of the lastFrameStart
}}


{{LuaCallout
|prefix = Spring.
|name = DiffTimers
|arg1 = {{type|timer}} cur
|arg2 = {{type|timer}} ago {{bracket}}
|arg3 = {{type|bool}} inMilliseconds {{rbracket}}
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|number}} seconds
|info = {{New|95.0}}&lt;br&gt;Optional third argument (boolean) to return dt in milliseconds.
}}

== Rendering ==

{{LuaCallout
|prefix = Spring.
|name = GetMapSquareTexture
|arg1 = {{type|number}} texSqrX, {{type|number}} texSqrY
|arg2 = {{type|number}} texMipLvl
|arg3 = {{type|string}} luaTexName
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|bool}} success
|info = 
}}

== Logging ==

{{LuaCallout
|prefix = Spring.
|name = GetLogSections
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|table}} logSections = { &quot;KeyBindings&quot; = LOG.INFO, &quot;Font&quot; = LOG.INFO, &quot;Sound&quot; = LOG.WARNING, ... }
|info = 
}}

== Misc ==

{{LuaCallout
|prefix = Spring.
|name = GetClipboard
|arg1 = 
|arg2 = 
|arg3 = 
|arg4 = 
|arg5 = 
|arg6 =
|arg7 =
|arg8 =
|arg9 =
|return = {{type|string}} text
|info = {{new|98.0}}
}}

[[category: Lua]]</text>
      <sha1>1lmgmvlvbzhrziaaxopyzpltflkmb8t</sha1>
    </revision>
  </page>
  <page>
    <title>Lua VFS</title>
    <ns>0</ns>
    <id>2429</id>
    <revision>
      <id>31842</id>
      <parentid>31747</parentid>
      <timestamp>2022-08-08T09:53:38Z</timestamp>
      <contributor>
        <username>Beherith</username>
        <id>2441</id>
      </contributor>
      <comment>/* Files */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9772">[[Engine_Development|Development]] &lt; [[Lua_Scripting|Lua Scripting]] &lt; {{FULLPAGENAME}}

= Overview =

Although Spring can access the filesystem directly (via os module) it is more common that you
would want to access files included with your game or Spring. Trouble is, most of these files are
compressed into archives (.sdz/.sd7) so random access would generally be a difficult procedure.
Fortunately, the Spring Lua system automatically provides access to mod and base files via the VFS module.

The VFS module doesn't simply open archives though. What it does is map your game files, game 
dependencies and Spring content onto a virtual file tree. All archives start from the 'roots' of the tree
and share the same virtual space, meaning that if two or more archives contain the same resource
file name the resources overlap and only one of the files will be retrieved. Overlapping directories
on the other hand are merged so the resulting virtual directory contains the contents of both. Here is
an example of how this works:

'''Archive 1 (games/mygame.sd7)'''

textures&lt;br&gt;
|__ texture1.png&lt;br&gt;
models&lt;br&gt;
|__ model1.mdl&lt;br&gt;

'''Archive 2 (base/springcontent.sdz'''

textures&lt;br&gt;
|__ texture1.png&lt;br&gt;
|__ texture2.png&lt;br&gt;
|__ texture3.png&lt;br&gt;

'''VFS'''

textures&lt;br&gt;
|__ texture1.png&lt;br&gt;
|__ texture2.png&lt;br&gt;
|__ texture3.png&lt;br&gt;
models&lt;br&gt;
|__ model1.mdl&lt;br&gt;

This raises the question: If both archives have a texture1.png then which texture1.png is retreived
via the VFS? The answer depends on the order the archives are loaded and the VFS mode (more on
modes below). Generally however, each archive loaded overrides any archives loaded
before it. The standard order of loading (from first to last) is:

#  The main Spring/ game directory.
#  The automatic dependencies springcontent.sdz and maphelper.sdz.
#  Dependencies listed in your modinfo.lua (or modinfo.tdf), in the order listed.
#  Your mod archive.

= Modes =

These modes are constants passed to VFS.Include() and friends to control the order that archives are
searched for a given file. They are case-sensitive.

'''VFS.RAW''' Only select uncompressed files.

'''VFS.MOD''' {{new|104.0}}

'''VFS.MAP'''  {{new|104.0}}

'''VFS.BASE'''  {{new|104.0}}

'''VFS.MENU'''  {{new|104.0}}

'''VFS.ZIP'''   Only select compressed files (.sdz,.sd7).

'''VFS.RAW_FIRST'''  Try uncompressed files first, then compressed.

'''VFS.ZIP_FIRST'''  Try compressed files first, then uncompressed.

'''VFS.RAW_ONLY''' &lt;font color=#55ee99&gt;(Deprecated. Same as VFS.RAW)&lt;/font&gt;

'''VFS.ZIP_ONLY''' &lt;font color=#55ee99&gt;(Deprecated. Same as VFS.ZIP.)&lt;/font&gt;

See also: https://github.com/spring/spring/blob/develop/rts/System/FileSystem/VFSModes.h

= Files =
'''VFS.Include''' &lt;span class=note&gt;(if enviroment=nil then use current one)&lt;/span&gt;
  ( string &quot;filename&quot; [, table enviroment = nil [, number mode ] ] ) -&gt;
&lt;span class=note&gt;The environment arg sets the global environment (see generic lua refs). In almost all cases, this should be left nil to preserve Springs default.  

If nil then the env will be _G (global environment) If the optional env argument is provided any non-local variables and functions defined in
filename.lua are then accessable via env or _G. Vise-versa, any variables defined in env prior to
passing to VFS.Include are available to code in the included file. Code running in filename.lua will
see the contents of env in place of the normal _G environment. &lt;/span&gt;

&lt;span class=note&gt;This loads and compiles the lua code from a file in the VFS. The path is relative to the main Spring directory, e.g. VFS.Include('LuaUI/includes/filename.lua', nil, [vfsmode]) &lt;/span&gt;

&lt;span class=note&gt;VFS modes are single char strings and can be concatenated; doing specifies an order of preference for the mode (=location) from which to include files.&lt;/span&gt;

'''VFS.LoadFile'''
  ( string &quot;filename&quot; [, number mode ] ) -&gt; nil | string data

This is used for loading raw text data, as it will not execute the file, like VFS.Include does, just returns a string of the file contents. 

'''VFS.FileExists'''
  ( string &quot;filename&quot; [, number mode ] ) -&gt; boolean
&lt;span class=note&gt;example usage: if VFS.FileExists(&quot;maps/Castles.sdz&quot;) then ... end &lt;/span&gt;

'''VFS.DirList'''
  ( string &quot;directory&quot; [, string &quot;pattern&quot; = &quot;*&quot;  [, number mode ] ] )
    -&gt; { [1] = string filename, ... }
'''VFS.SubDirs'''
  ( string &quot;directory&quot;, [, string &quot;pattern&quot; = &quot;*&quot;  [, number mode ] ] )
    -&gt; { [1] = string subdir1, ... }

'''VFS.GetAvailableAIs'''
  ( [ string gameName] [, string mapName ] )
    -&gt; { ai1, ai2, ... }
&lt;span class=&quot;note&quot;&gt;Gets a list of all Spring AIs. The optional gameName and mapName parameters can be used to include game/map specific LuaAIs in the list.&lt;/span&gt;

'''VFS.UseArchive''' &lt;span class=warning&gt;unsynced only!&lt;/span&gt;
  ( string &quot;filename&quot; [, number mode ], lua_function [, arg1 [,arg2 ]] )
    -&gt; result1,result2,... of the given lua_function
&lt;span class=note&gt;Loads an archive '''temporarely''' in the VFS and then runs the given lua_function,&lt;br&gt;which can make usage of the files in the archive.&lt;/span&gt;

'''VFS.MapArchive''' &lt;span class=warning&gt;unsynced only!&lt;/span&gt;
  ( string &quot;filename/modname of archive&quot;, [string checksum of archive] )
    -&gt; bool
&lt;span class=note&gt;Permanently loads an archive into the VFS (to load zipped music collections etc.). &lt;br&gt; Does nothing if the archive is already loaded in the VFS (won't reload even if there are &lt;br&gt; changes made to the archive). If checksum is given it checks if the to be loaded file is correct,&lt;br&gt;if not then it won't load it and return false.&lt;/span&gt;

'''VFS.UnmapArchive''' &lt;span class=warning&gt;unsynced only! available in 98.0&lt;/span&gt;
  ( string &quot;filename/modname of archive&quot;)
    -&gt; bool
&lt;span class=note&gt;Removes an already loaded archive (see VFS.MapArchive)&lt;/span&gt;

'''VFS.CompressFolder''' &lt;span class=warning&gt;unsynced only!&lt;/span&gt;
  ( string &quot;folderPath&quot; [, string &quot;archiveType&quot; ] [, string &quot;compressedFilePath&quot; ] &lt;br&gt; [, bool includeFolder ] [, number mode ] ) -&gt; nil

&lt;span class=note&gt;Compresses the specified folder. &lt;br&gt;archiveType defines the compression type which can currently be only &quot;zip&quot; &lt;br&gt;includeFolder specifies whether the archive should have the specified folder as root (defaults to false) &lt;/span&gt;

'''VFS.GetFileAbsolutePath''' &lt;span class=warning&gt;unsynced only! available in 105.0&lt;/span&gt;
  ( string &quot;filename&quot; [, number mode ] ) -&gt; absPath | nil

'''VFS.GetArchiveContainingFile''' &lt;span class=warning&gt;unsynced only! available in 105.0&lt;/span&gt;
  ( string &quot;filename&quot; [, number mode ] ) -&gt; archiveNameWithVersion | nil

= Generic hash =
'''VFS.CalculateHash''' {{new|101.0}}
  ( string input, number hashType)
    -&gt; string md5hash

Calculates hash (in base64 form) of a given string (with md5 support initially). Note supplying 0 (MD5) as hashType is mandatory

= Archives =

'''VFS.GetMaps''' {{new|98.0}}
  ( ) -&gt; {
   [1] = string mapName, ...
 }

'''VFS.GetGames''' {{new|98.0}}
  ( ) -&gt; {
   [1] = string gameName, ...
 }

'''VFS.GetAllArchives''' {{new|98.0}}
  ( ) -&gt; {
   [1] = string archiveName, ...
 }

'''VFS.GetLoadedArchives''' {{new|105.0}}
  ( ) -&gt; {
   [1] = string archiveName, ...
 }

'''VFS.GetArchivePath''' {{new|105.0}}
  ( string archiveName ) -&gt; string archivePathOnDisk

'''VFS.GetNameFromRapidTag''' {{new|105.0}}
  ( string rapidTag ) -&gt; string archiveName

'''VFS.HasArchive''' {{new|98.0}}
  ( string archiveName ) -&gt; boolean

'''VFS.GetArchiveInfo''' {{new|98.0}}
  ( string archiveName ) - &gt;
     {        
          name = string,
          shortname = string,
          version = string,
          mutator = string,
          game = string,
          shortgame = string,
          description = string,
          mapfile = string,
          modtype = number,     
      }
&lt;span class=&quot;note&quot;&gt;modtype values:1=primary, 0=hidden, 3=map&lt;/span&gt;

'''VFS.GetArchiveChecksum''' {{new|98.0}}
  ( string archiveName ) -&gt; string singleArchiveChecksum, string completeArchiveChecksum

'''VFS.GetArchiveDependencies''' {{new|98.0}}
  ( string archiveName ) -&gt; { 
    [1] = string archiveName, ... 
  }

'''VFS.GetArchiveReplaces''' {{new|98.0}}
  ( string archiveName ) -&gt; { 
    [1] = string archiveName, ... 
  }

'''VFS.DownloadArchive''' {{new|101.0}}
  ( name, category ) -&gt; nil

Category must be one of: map, game, engine.

'''VFS.AbortDownload''' {{new|104.0}}
  ( id ) -&gt; boolean foundAndRemoved

Additional functions are available as part of the [[Lua_UnsyncedCtrl#.28Virtual-.29FileSystem|unsynced ctrl]].

= Packing =
&lt;span class=&quot;note&quot; style=&quot;font-size:110%&quot;&gt;The Pack- and Unpack-functions are used to convert numbers-&gt;strings and strings-&gt;numbers.
So you can read a binary file and then convert the received strings back to numbers and the other way around. Also you can use it in combination with the SendLuaXYZMsg-functions.&lt;/span&gt;


'''VFS.PackU8'''

'''VFS.PackU16'''

'''VFS.PackU32'''

'''VFS.PackS8'''

'''VFS.PackS16'''

'''VFS.PackS32'''

'''VFS.PackF32'''

&lt;span class=note&gt;arguments are:&lt;/span&gt;

'''VFS.PackX( number arg1, number arg2, number arg3, ... )''' -&gt; string

'''VFS.PackX( {[1]=number,[2]=number,..} )''' -&gt; string


'''VFS.UnpackU8'''

'''VFS.UnpackU16'''

'''VFS.UnpackU32'''

'''VFS.UnpackS8'''

'''VFS.UnpackS16'''

'''VFS.UnpackS32'''

'''VFS.UnpackF32'''

&lt;span class=note&gt;arguments are:&lt;/span&gt;

'''VFS.UnpackX( string &quot;binary&quot; [, number position = 1] [, number count] )'''
  -&gt; number | table { [1]=number,[2]=number,.. }

= Zlib =
'''VFS.ZlibCompress''' &lt;span class=warning&gt;unsynced only!&lt;/span&gt;
  ( string &quot;uncompressedStr&quot; )
    -&gt; nil | string &quot;compressedStr&quot;

'''VFS.ZlibDecompress''' &lt;span class=note&gt;available in synced, too!&lt;/span&gt;
  ( string &quot;compressedStr&quot; [, number uncompressed size = 65500] )
    -&gt; nil | string &quot;uncompressedStr&quot;

[[category: Lua]]</text>
      <sha1>od4dmkv6go26j41zvnbkhxwl3a0v41m</sha1>
    </revision>
  </page>
  <page>
    <title>Lua WeaponDefs</title>
    <ns>0</ns>
    <id>2435</id>
    <revision>
      <id>30806</id>
      <parentid>30033</parentid>
      <timestamp>2018-11-10T17:51:33Z</timestamp>
      <contributor>
        <username>Gajop</username>
        <id>2804</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5014">[[Engine_Development|Development]] &lt; [[Lua_Scripting|Lua Scripting]] &lt; {{FULLPAGENAME}}

The '''WeaponDefs[]''' table holds all information about the weapons used in a game.

Works the same way as [[Lua_UnitDefs]] except the tables are called '''WeaponDefs[]''' and '''WeaponDefNames[]'''

Note: Its entries are metatables, so you can't use the pairs() iterator on them, use this instead:
&lt;pre&gt;
  for id,weaponDef in pairs(WeaponDefs) do
    for name,param in weaponDef:pairs() do
      Spring.Echo(name,param)
    end
  end
&lt;/pre&gt;

==Naming==
If a unit named &quot;tank&quot; has a weapon named &quot;gun&quot;, the resulting &lt;code&gt;name&lt;/code&gt; will be &quot;tank_gun&quot; and you can get this weaponDefID like:

&lt;code&gt;local gunID = WeaponDefNames[&quot;tank_gun&quot;].id&lt;/code&gt;

==Example==
For a more detailed overview of tag definitions look at 
[[Gamedev:WeaponDefs]] or look directly at the source at 
https://github.com/spring/spring/blob/5f08624585852b8c8dfd1a16d020ae530269dc09/rts/Sim/Weapons/WeaponLoader.cpp

In key = value format, where WeaponDefs[weaponDefID].key==value, with subtables at the end.
&lt;pre&gt;
    accuracy = 0,
    avoidFeature = false,
    avoidFriendly = true,
    avoidNeutral = false,
    beamTTL = 0,
    beamburst = false,
    beamtime = 0.10000000149012,
    bouncerebound = 1,
    canAttackGround = true,
    cegTag = &quot;&quot;,
    collisionSize = 0.050000000745058,
    coverageRange = 0,
    craterAreaOfEffect = 0,
    cylinderTargeting = 1,
    cylinderTargetting = 1,
    damageAreaOfEffect = 6,
    dance = 0,
    description = &quot;J7Laser&quot;,
    duration = 0.050000000745058,
    dynDamageExp = 0,
    dynDamageInverted = false,
    dynDamageMin = 0,
    dynDamageRange = 0,
    edgeEffectiveness = 0.99000000953674,
    energyCost = 0,
    explosionSpeed = 3.233583688736,
    exteriorShield = false,
    fireStarter = 0.69999998807907,
    flightTime = 0,
    gravityAffected = false,
    groundbounce = false,
    groundslip = 1,
    heightBoostFactor = -1,
    heightMod = 1,
    highTrajectory = 2,
    id = 220,
    impactOnly = true,
    intensity = 0.89999997615814,
    interceptSolo = true,
    interceptedByShieldType = 2,
    interceptor = 0,
    isShield = false,
    largeBeamLaser = false,
    laserHardStop = false,
    leadBonus = 0,
    leadLimit = -1,
    manualFire = false,
    maxAngle = 0.95873802900314,
    metalCost = 0,
    minIntensity = 0,
    movingAccuracy = 0,
    myGravity = 0,
    name = &quot;corcom_armcomlaser&quot;,
    noAutoTarget = false,
    noEnemyCollide = false,
    noExplode = false,
    noFeatureCollide = false,
    noFriendlyCollide = false,
    noGroundCollide = false,
    noNeutralCollide = false,
    noSelfDamage = true,
    numbounce = -1,
    onlyForward = false,
    paralyzer = false,
    predictBoost = 0,
    projectiles = 1,
    projectilespeed = 30.000001907349,
    proximityPriority = 1,
    range = 300,
    reload = 0.40000000596046,
    salvoDelay = 0.10000000149012,
    salvoSize = 1,
    selfExplode = false,
    shieldAlpha = 0.20000000298023,
    shieldBadColorB = 0.5,
    shieldBadColorG = 0.5,
    shieldBadColorR = 1,
    shieldEnergyUse = 0,
    shieldForce = 0,
    shieldGoodColorB = 1,
    shieldGoodColorG = 0.5,
    shieldGoodColorR = 0.5,
    shieldInterceptType = 0,
    shieldMaxSpeed = 0,
    shieldPower = 0,
    shieldPowerRegen = 0,
    shieldPowerRegenEnergy = 0,
    shieldRadius = 0,
    shieldRechargeDelay = 0,
    shieldRepulser = false,
    size = 2.1875,
    sizeGrowth = 0.5,
    smartShield = false,
    soundTrigger = true,
    sprayAngle = 0,
    startvelocity = 0.0099999997764826,
    stockpile = false,
    stockpileTime = 30,
    sweepFire = false,
    targetBorder = 0,
    targetMoveError = 0.050000000745058,
    targetable = 0,
    tdfId = 0,
    tracks = false,
    trajectoryHeight = 0,
    turnRate = 0,
    turret = true,
    type = &quot;BeamLaser&quot;,
    uptime = 0,
    visibleShield = false,
    visibleShieldHitFrames = 0,
    visibleShieldRepulse = false,
    waterWeapon = false,
    waterbounce = false,
    weaponAcceleration = 0,
    wobble = 0,
    customParams = {},
    damages = {
        craterBoost = 0,
        ...
    },
    fireSound = {
        [1] = {
            id = 36,
            name = &quot;lasrfir1&quot;,
            volume = 6.1237244606018,
        },
        ...
    },
    hitSound = {
        [1] = {
            id = -1,
            name = &quot;&quot;,
            volume = 6.1237244606018,
        },
        ...
    },
    visuals = {
        alphaDecay = 1,
        alwaysVisible = false,
        beamDecay = 1,
        beamWeapon = false,
        color2B = 1,
        color2G = 1,
        color2R = 1,
        colorB = 0,
        colorG = 0,
        colorR = 1,
        coreThickness = 0.10000000149012,
        laserFlareSize = 7,
        modelName = &quot;&quot;,
        noGap = true,
        pulseSpeed = 1,
        scrollSpeed = 5,
        separation = 1,
        sizeDecay = 0,
        smokeTrail = false,
        stages = 5,
        thickness = 2,
        tileLength = 200,
    },
&lt;/pre&gt;

[[category: Lua]]</text>
      <sha1>ta5ei794d61pdvjix2lkh5gh9eazsv1</sha1>
    </revision>
  </page>
  <page>
    <title>Lua Widgets</title>
    <ns>0</ns>
    <id>2611</id>
    <revision>
      <id>30357</id>
      <parentid>29441</parentid>
      <timestamp>2017-05-21T17:49:53Z</timestamp>
      <contributor>
        <username>Hox</username>
        <id>2931</id>
      </contributor>
      <comment>/* Installing Widgets */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3078">===General===
'''[[Lua:WidgetDirectory|LuaUI Widget Directory]]''' -  A list of LuaUI widgets&lt;br&gt;&lt;br&gt;
'''[[Lua_Scripting|Lua Scripting and Development]]''' -  Look here to get started with making your own Lua widgets and gadgets&lt;br&gt;&lt;br&gt;
'''[http://springrts.com/phpbb/viewforum.php?f=23 Spring Lua Forum]''' -  Browse and discuss published widgets, or publish your own&lt;br&gt;&lt;br&gt;

===Introduction:  What's a &quot;Widget&quot;?===
LuaUI widgets are files containing Lua code that you can run while playing a Spring game in order to assist you with unit management, provide you with valuable information, or otherwise supplement the basic Spring user interface.  They are easy to install, easy to run and manage ingame, and relatively easy to write should you choose to learn how to do so.
|}


===Getting Widgets===
Widget code and files are quite often released as posts in the '''[http://springrts.com/phpbb/viewforum.php?f=23&amp;sid=83343bd3a47bc826fc973e4bd6a15f04 Spring Lua Forum]'''.

It is also highly recommended that you visit the wiki's '''[[Lua:WidgetDirectory|LuaUI Widget Directory]]''', which contains a list of many widgets, along with mod compatibility information and possible additional installation instructions.


===Installing Widgets===
Widget files have the extension .lua, but only contain plain text.  To install widgets you've downloaded, just move the .lua file to the LuaUI\Widgets folder in your Spring installation directory.  '''Mods like BA ver&gt;9.47 or Evolution RTS explicitly disable widgets from this path.''' Please refer to the mod's manual for details. Sometimes, a widget file may come in a zip archive, or be bundled with other dependent files.  These files will need to be unarchived, then moved to their proper respective folders in the LuaUI folder.  Look for a help or readme file included in the package, or read any installation instructions listed with the widget at the '''[[Lua:WidgetDirectory|LuaUI Widget Directory]]'''.

===Using Widgets===
'''NOTE:''' Before you can use widgets, you MUST make sure that you have checked the &quot;Enable LuaUI widgets&quot; box in [[SpringSettings]].

To list/manage all available widgets, press F11 while ingame.  Each widget is listed by name and sorted alphabetically, and mod included widgets appear first on the list with their names surrounded by asterisks.  You may click on each widget name to enable/disable that widget.  &lt;font color=&quot;green&quot;&gt;'''Green'''&lt;/font&gt; widgets are currently running, &lt;font color=&quot;red&quot;&gt;'''red'''&lt;/font&gt; widgets are currently disabled and &lt;font color=&quot;orange&quot;&gt;'''orange'''&lt;/font&gt; widgets have malfunctioned or turned themselves off.

To rearrange the Lua widgets, press Ctrl-F11 while ingame. To escape Lua tweaking mode, just hit Esc.

In the case that you begin to see Lua errors and/or your user interface inexplicably crashes or becomes &quot;messed up&quot;, you can use the command '''/luaui reload''' in order to restart the Lua user interface.  If for any reason you wish to shutdown the Lua user interface while ingame, you may issue the command '''/luaui disable'''.
[[Category: Lua]]</text>
      <sha1>gqohhbzzbdhhbvcpfu6pmr7xmkcud3i</sha1>
    </revision>
  </page>
  <page>
    <title>Lua camState</title>
    <ns>0</ns>
    <id>2629</id>
    <revision>
      <id>30775</id>
      <parentid>30774</parentid>
      <timestamp>2018-09-18T20:09:03Z</timestamp>
      <contributor>
        <username>Picassoct</username>
        <id>2854</id>
      </contributor>
      <comment>/* The raw info */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5410">== TL;DR ==
'''px''', '''py''' and '''pz''' are camera position in world coords.

=== Free camera ===
'''rx''' and '''ry''' are camera rotation in radians about the X and Y axes respectively, where an rx of 0 is horizontal and an ry of 0 is facing south, positive values running anticlockwise. '''rz''' currently (91.0) does nothing.

'''dx''', '''dy''' and '''dz''' have ''nothing'' to do with camera rotation.

== The raw info ==
&lt;pre&gt;
I wanted to use Spring.SetCameraState( table camState, number camTime) -&gt; nil | boolean

The wiki said: camState has the same format as the output of Spring.GetCameraState().

So I ran Spring.Echo(Spring.GetCameraState())
All I got was:
&lt;table&gt;
TABLE: 

So, I ran, for every kind of camera:
for index,value in pairs(Spring.GetCameraState()) do
	Spring.Echo(index,value)
end

This is what I got:

Switching to Overhead (TA) style camera
name : &quot;ta&quot;
mode : 1
px,py,pz : Position of the ground point in screen center (not camera position)
dx,dy,dz : Camera direction vector?
zscale: how tilted is the camera, from 10 (near horizontal) to 0.05 (near vertical). We have y/z = 1.0/zscale (with a -1 thrown in if flipped)
height : how much above the ground is the camera, cannot be negative -- '' it's absolute height of the camera, ie the camera positions y value, actually (so no difference if cam is above mountain or valley)~~~~''
flipped : -1 for when south is down, 1 for when north is down

exemple:
px, 2000
py, 70
pz, 1800
flipped, -1
dy, 0
name, ta
zscale, 0.5
height, 500
mode, 1
dx, 0
dz, 0


Switching to Total War style camera
rz, 0
rx, -0.9727737903595
name, tw
ry, 3.1415927410126
px, 477.53298950195
py, 100
pz, 447.54751586914
mode, 2


Switching to Rotatable overhead camera
name : &quot;rot&quot;
mode : 3
px,py,pz : Position of the ground point in screen center (not camera position) -- '' actually it seems to be the camera position to me (I set the height with py, not so sure about the others...) ~~~~''
dx,dy,dz : Camera direction vector?
rx,ry,rz : Camera rotation?
oldHeight : how much above the ground is the camera, cannot be negative, cannot be changed (I guess it's just in for when switching to a view that requires it next)


exemple:
px, 522.32415771484
py, 600
pz, 441.25302124023
rz, 0
dx, -4.9136563262664e-008
dy, -0.82505232095718
name, rot
ry, 3.1415927410126
rx, -0.9727737903595
mode, 3
dz, -0.56205677986145
oldHeight, 500


Switching to Free style camera
avx, 0
px, 522.32415771484
gravity, -500
pz, 873.39385986328
autoTilt, 2.6179938316345
dx, -0.011240424588323
dy, -0.82505232095718
dz, -0.5619443655014
py, 964.28167724609
gndOffset, 16
gndLock, -1
goForward, -1
mode, 4
tiltSpeed, 2.6179938316345
velTime, 1.5
slide, 0.5
avz, 0
rx, -0.9727737903595
invertAlt, -1
rz, 0
ry, 3.1615927219391
avy, 0
scrollSpeed, 100
name, free
fov, 45
vz, 0
avelTime, 1
vx, 0
vy, 0


Switching to Smooth style camera
px, 522.32415771484
py, 109.49719238281
pz, 873.39385986328
flipped, -1
dy, -0.89428168535233
name, sm
zscale, 0.5
height, 500
mode, 5
dx, 0
dz, -0.44714084267616


Switching to Orbit style camera
tx, 522.32415771484
ty, 241.19664001465
name, OrbitController
tz, 644.45776367188
px, 522.32415771484
py, 556.63806152344
pz, 873.39385986328
mode, 6


Switching to FPS style camera
px, 1233.4810791016
py, 554.39453125
pz, 873.39385986328
rz, 0
dx, -0.011240424588323
dy, -0.82505232095718
name, fps
ry, 3.1615927219391
rx, -0.9727737903595
mode, 0
dz, -0.5619443655014
oldHeight, 300


Switching to Overhead (TA) style camera
px, 1324.8835449219
py, 254.39453125
pz, 871.56591796875
flipped, -1
dy, -0.89428168535233
name, ta
zscale, 0.5
height, 713.52716064453
mode, 1
dx, 0
dz, -0.44714084267616

Now someone go comment that.

It appears that mod eis simply a number containing the same information as name, but while name is a string, mode is an integer between 0 and 6.

I guess px,py,pz could be the postion, while dx,dy,dz could be the direction?
px,py,pz is the position.
https://github.com/spring/spring/blob/30862626214bd263b1c4489bb197ef1c3dbc0738/rts/Game/Camera/CameraController.cpp#L75
dx,dy,dz is the directional vector, this determinates where the camera points towards.
fov is the field of view.

These values are part of the inherited base class, thus apply to all camera controllers.
rx,ry,rz - are part of a derived class and thus can not be found in all cameras.
https://github.com/spring/spring/blob/30862626214bd263b1c4489bb197ef1c3dbc0738/rts/Game/Camera.cpp#L383
It denotes the rotation of the camera, found in some camera controllers- theroretically these cameras could tilt and tumble around the viewing direction. In practice, setting the direction - always overrides the rotation.

All the other values are also part of the derived classes. Found here:
https://github.com/spring/spring/blob/30862626214bd263b1c4489bb197ef1c3dbc0738/rts/Game/Camera/FreeController.cpp#L380


But what is height? What is zscale? What is flipped? What is oldHeigh? What are rx,ry,rz? Why has orbit no dx,dy,dz but some tx,ty,tz? What about all the free style camera settings? If you know edit that page please!

From testing, I found out flipped invert north/south depending on whether it's negative or positive.

From testing, I found out zscale is how horizontal/vertical are some camera, 10 for almost horizontal TA overhead, 0.05 for almost vertical TA overhead.
&lt;/pre&gt;
[[Category: Lua]]

Camtime is optional, and currently not used</text>
      <sha1>s8ocha3f1ocluz2ipjo3gnam9km88bx</sha1>
    </revision>
  </page>
  <page>
    <title>Lua sync to unsync</title>
    <ns>0</ns>
    <id>2933</id>
    <revision>
      <id>31762</id>
      <parentid>31673</parentid>
      <timestamp>2022-03-05T04:37:33Z</timestamp>
      <contributor>
        <username>Maddox</username>
        <id>2934</id>
      </contributor>
      <comment>Added link to jK's thread with further info on the matter</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4700">= Synced -&gt; Unsynced Communication =

==Using SendToUnsynced==
Currently, the recommended way is to use the SendToUnsynced call-in to send an event to the unsynced portion of a gadget. It's also possible to send an event from a gadget to a Widget. First, you send an 'internal event' from synced to unsynced space, within the gadget, then you can create an event which may be subscribed to by any widget. Follows an image showcasing that flow and working/tested code:

[[File:Sync unsync comm.png|670px]]
&lt;br /&gt;
https://pastebin.com/b1eVWn1d


&lt;br /&gt;Bear in mind that only one widget can hook to one LuaUI event at once, trying to listen to it in multiple widgets will lead to erratic behavior. Workaround here would be firing multiple LuaUI events, one for each consuming widget.
&lt;br /&gt;&lt;br /&gt;The first parameter in the event handler (in the example, it's named 'cmd' in HandleCommCountEvent) is rarely used. It holds the name of the synced event, so you know what synced event fired the function, as in the following example:

&lt;syntaxhighlight lang=&quot;lua&quot;&gt;local function func(str)
    if str == &quot;abcd&quot; then
        -- do something
    elseif str == &quot;efgh&quot;
        -- do another thing
    end
end

gadgetHandler:AddSyncAction(&quot;abcd&quot;, func)
gadgetHandler:AddSyncAction(&quot;efgh&quot;, func)

SendToUnsynced(&quot;abcd&quot;)
&lt;/syntaxhighlight&gt;

Futher reading in the following forum thread: 
https://springrts.com/phpbb/viewtopic.php?t&amp;t=11408

==Using globals (96.0 and previous) ==
When making a gadget you will sometimes want to combine synced and unsynced code.

For example if you do some things with units, that code will need to be synced.

The UnitDestroyed, UnitFinished etc. callins can only be called in synced code. Using them inside unsynced code is not going to work.

If you want to draw on the screen (for example to mark units) then the drawing will have to happen in unsynced code.

The following example demonstrates how to change the value inside the synced block of code and read the value in the unsynced block of code:

&lt;syntaxhighlight lang=&quot;lua&quot;&gt;
if (gadgetHandler:IsSyncedCode()) then
   --SYNCED CODE
   local number = 10               -- declaring local variable 'number'
   function gadget:SomeSyncedCallin(...)
      number=number+1              -- increment variable's value by one
      _G.number=number             -- save the new value into a global variable
   end
else
   --UNSYNCED CODE
   function gadget:SomeUnsyncedCallin(...)
      Spring.Echo(SYNCED.number)   -- print the global variable's value on screen
   end
end
&lt;/syntaxhighlight&gt;

== 97.0+ ==
As of 97.0 unsynced gets most of the [[Lua:Callins|callins]] available to synced (excepting those which control synced actions e.g. AllowUnitCreation etc) which means that forwarding data from synced to unsynced is now not always required. Additionally in 97.0 there were changes to the behaviour of the &lt;code&gt;SYNCED&lt;/code&gt; table described above.

Change 1: &lt;code&gt;SYNCED&lt;/code&gt; does a copy on access now and so is slow:&lt;br /&gt;&lt;br /&gt;
'''Bad:    
&lt;syntaxhighlight lang=&quot;lua&quot;&gt;for i=1,100 do ... SYNCED.foo[i] ... end&lt;/syntaxhighlight&gt;
'''Good:   
&lt;syntaxhighlight lang=&quot;lua&quot;&gt;local foo = SYNCED.foo; for i=1,100 do ... foo[i] ... end&lt;/syntaxhighlight&gt;
Change 2: &lt;code&gt;SYNCED.&lt;/code&gt; can't be localized in global scope anymore:&lt;br /&gt;&lt;br /&gt;
'''Bad:    
&lt;syntaxhighlight lang=&quot;lua&quot;&gt;local foo = SYNCED.foo;    function gadget:DrawWorld() ... foo ... end&lt;/syntaxhighlight&gt;
'''Good:   
&lt;syntaxhighlight lang=&quot;lua&quot;&gt;function gadget:DrawWorld() local foo = SYNCED.foo; ... foo ... end&lt;/syntaxhighlight&gt;

&lt;br /&gt;&lt;br /&gt;
Here is a (older) description by quantum:

&lt;pre&gt;[LCC]quantum[0K] every time there  is a new target, i send &quot;addTarget&quot; and its number to unsynced
[LCC]quantum[0K] when a target is removed from the list, i send &quot;removeTarget&quot; and its number
[LCC]quantum[0K] this wierd stuff:
[LCC]quantum[0K]   _G.laserEventArgs = eventArgs
[LCC]quantum[0K]   SendToUnsynced(&quot;LaserEvent&quot;)
[LCC]quantum[0K]   _G.laserEventArgs = nil
[LCC]quantum[0K] puts the eventArgs table somewhere were unsynced can find it
[LCC]quantum[0K] sends a signal to unsynced called &quot;LaserEvent&quot;
[LCC]quantum[0K] and removes the table
[LCC]quantum[0K] on the unsynced side, _G.laserEventArgs becomes SYNCED.laserEventArgs
[LCC]quantum[0K] this copies it to another table, ready for reuse:   for k, v in spairs(SYNCED.laserEventArgs) do
[LCC]quantum[0K]     eventArgs[k] = v
[LCC]quantum[0K]   end
[LCC]quantum[0K] also, this: gadgetHandler:AddSyncAction(&quot;LaserEvent&quot;, HandleLaserEvent)
[LCC]quantum[0K] means that i want the HandleLaserEvent function to be called every time i do SendToUnsynced(&quot;LaserEvent&quot;)
&lt;/pre&gt;

http://pastebin.com/hMHv3Lrf

[[Category: Lua]]</text>
      <sha1>8g785ygaa39wj82mtnuo7ji6kwvwlof</sha1>
    </revision>
  </page>
  <page>
    <title>MADNESS!</title>
    <ns>0</ns>
    <id>2011</id>
    <redirect title="Kernel Panic" />
    <revision>
      <id>11824</id>
      <timestamp>2007-02-14T12:41:34Z</timestamp>
      <contributor>
        <username>Boirunner</username>
        <id>791</id>
      </contributor>
      <comment>MADNESS! moved to Kernel Panic</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">#REDIRECT [[Kernel Panic]]
</text>
      <sha1>rmhv1a6to239sp5wq5xgg0tk4szjwj2</sha1>
    </revision>
  </page>
  <page>
    <title>MTR</title>
    <ns>0</ns>
    <id>2621</id>
    <revision>
      <id>26652</id>
      <parentid>23258</parentid>
      <timestamp>2013-03-20T14:25:37Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>deprecated -&gt; remove other categories</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1528">{{deprecated}}

=The New Monthly Topic Rotation=

===Class I and II Etiquette/Rules===
When someone asks a question that has been answered before post a link to this page to the specific sub-section.  Sub-sections will be formatted similar to any other FAQ with the title being the actual question and the answer being the body of the section with links at the end to further reading.  In addition, there should be a &quot;Should have looked in&quot; section with a description on how the information should have been found.

===Class III Etiquette/Rules===

When someone posts in the forum about something that has been posted before, they will be linked to the relevant section and their post will be added to the body, the sections name will be a witty description of the question, the body of the section will be a list of topics on the subject in question.

==Class I: Really Frequently Asked Questions(Living FAQ)==
(Questions that have been asked and answered a lot)


==Class II: How I X==
(Questions about how to do specific things like model, make maps, make mods and games)

==Class III: Monthly Topic Rotation==
(Regularly posted topics, requests for features, discussions that are repeated)

==Class IV: Graduates==
(Things that went from Monthly Topic Rotation to actual game features or repeated issues that were resolved by improvements to the engine. Basically move stuff here from other sections when they are no longer MTRs... continue linking people here when they ask for a feature that has already been implemented.)</text>
      <sha1>e1vdl6sazuet7qkijzcorgqjivgv4oe</sha1>
    </revision>
  </page>
  <page>
    <title>Mac</title>
    <ns>0</ns>
    <id>1064</id>
    <redirect title="Spring on MacOSX" />
    <revision>
      <id>18719</id>
      <parentid>17782</parentid>
      <timestamp>2010-03-13T09:33:46Z</timestamp>
      <contributor>
        <username>Koshi</username>
        <id>2371</id>
      </contributor>
      <comment>redirect to correct page</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30">#REDIRECT [[Spring_on_MacOSX]]</text>
      <sha1>754o647lq8ffm9mqq53apnjn171r7at</sha1>
    </revision>
  </page>
  <page>
    <title>Main Page</title>
    <ns>0</ns>
    <id>1</id>
    <revision>
      <id>30309</id>
      <parentid>30022</parentid>
      <timestamp>2016-12-13T07:09:38Z</timestamp>
      <contributor>
        <username>Silentwings</username>
        <id>2883</id>
      </contributor>
      <comment>add community section</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3195">&lt;!--
--&gt;{|border=&quot;0&quot; cellpadding=&quot;4&quot; cellspacing=&quot;1&quot;
| width=&quot;50%&quot; valign=&quot;top&quot;  |
== For Players ==

=== Content ===
'''[[Games]]''' Games that use the Spring engine.

'''[[Maps]]''' All about maps for the Spring engine and where to get them.

'''[[Getting Spring Content and Links]]''' Sites from which you can download spring Games, Maps, and more.

'''[[AI:Skirmish]]''' Skirmish AIs for Singleplayer.

'''[[Lua Widgets]]''' All about installing and using LuaUI widgets.

'''[[Spring_Replays |Replays]]''' Watching recordings of previously played matches.

'''[[Community_Docs| Community]]''' Documents that shape our online community.

=== Help ===
'''[[Read Me First]]''' Answers to questions often asked - Everyone should read this first.

'''[[FAQ]]''' Has it been asked before?

'''[[Keyboard]]''' Default Keyboard Layout in the Engine.

'''[[Hosting Spring]]''' Autohosting and related topics.

'''[[Spring_on_MacOSX |Mac OS]]''' Mac OSX information.

'''[[SetupGuide |Linux]]''' NetBSD / Solaris / Linux / Cross-platform information.

| width=&quot;50%&quot; valign=&quot;top&quot; |
== For Developers ==

=== Content Development ===

'''[[Gamedev:Main|Game Development]]''' Lots of links to valuable Articles and forum threads regarding Game/Unit Development.

'''[[Mapdev:Main|Map Development]]''' Tutorials and other useful information for creating maps.

'''[[Lua Scripting]]''' Information regarding the use of the supplementary Lua scripting language for Widgets and beyond.

'''[[Chili|Chili UI framework]]''' Framework for creating GUIs in Lua.

'''[[Map, Mod, And Unit Development Programs|Content Development Programs]]''' Links to all kind of useful programs.

'''[[General Resources]]''' Usable textures, sounds and code snippets by the community, for the community.

'''[[Associated Development Groups]]''' Teams, Forums and Groups associated with Spring content and code development.

=== Engine and Native Development ===

'''[[Development:Getting_Started|Engine Development]]''' Starting point for engine development.

'''[[Building spring|Compiling Engine]]''' How to build the Spring engine from source.

'''[[Lobby_Development|Lobby Development (Clients and Servers)]]''' Information regarding contributing to the source code of the different lobby clients and servers available for Spring.

'''[[AI:Development|AI Development]]''' Lots of information about developing Skirmish, and Unit AIs for Spring.

|}


{| 
|
=Unable to log in?=
The login data for the wiki is the same as on the forum.
If you get the message &quot;You have not specified a valid user name.&quot; that is due a [http://springrts.com/mantis/view.php?id=1592 bug] with special characters in account names. 
At the moment the only thing you can do, is create a new/second account that consists of letters only.
|}

 __NOTOC__
__NOEDITSECTION__
[[Category:Spring]]</text>
      <sha1>cbkm8zzi1ygo1h0voyj0x34r9840haa</sha1>
    </revision>
  </page>
  <page>
    <title>MakingMapsWithBluePrintAndMapConv</title>
    <ns>0</ns>
    <id>3312</id>
    <revision>
      <id>28897</id>
      <parentid>25247</parentid>
      <timestamp>2014-10-18T20:14:11Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>tag for delete, a Forb-Knorke bawww history partial dupe of Forbs tutorial</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9119">{{delete}}
[[Engine Development|Development]] &lt; {{FULLPAGENAME}}

= Getting Started (Tools) =

'''Blueprint:&amp;nbsp;'''[https://github.com/jk3064/Map-Blueprint https://github.com/jk3064/Map-Blueprint]&amp;nbsp;

The only other tool really needed is &quot;Mapconv&quot;. The other tools available are there simply to make your life easier. A list of common mapping tools are as follows:

Mapconv

SMFED '''(Deprecated, no longer useful)'''

Grout '''(Deprecated, no longer useful unless texture was generated with L3dt utilizing tiles)'''

SMD Creator '''(Deprecated, no longer useful)'''

Start Position Editor

Das Bruce's Mapconv frontend

These tools have been compiled into a zip available here:&amp;nbsp;[http://springfiles.com/spring/tools/mapping-tools http://springfiles.com/spring/tools/mapping-tools]

Keep in mind that mapconv is still being developed, so it may be necessary to update the included Mapconv to a later version, located here:&amp;nbsp;[http://springrts.com/phpbb/viewtopic.php?f=56&amp;t=21458 http://springrts.com/phpbb/viewtopic.php?f=56&amp;t=21458]

= The Components of a Map =

* [[Mapcomponents: texture|Texture Map]]

* [[Mapcomponents: heightmap|Heightmap]]

* [[Mapcomponents: metal map|Metal Map]]

* [[Mapcomponents: feature map|Feature Map]]

= Compiling a Map (MapConv) =

== Texture Specifications ==

Texture map size is related in pixels and in spring map size. 2x2 MapSquares in spring are equal to 1024x1024 Pixels. Texture maps must be in multiples of 2. I.E. 2x2, 6x10, 12x16, 16x16, etc. No odd sizes are allowed (Example: 15x10).



Height Map dimensions are Texture Map size / 8 + 1 pixel. In other words, if your texture map is 8192x8192 (16x16), 8192 / 8 + 1 = 1025x1025



Metal Map dimensions are Texture Map size / 8 + 1 pixel. In other words, if your texture map is 8192x8192 (16x16), 8192 / 8 + 1 = 1025x1025



Feature Map dimensions are Texture Map size / 8. In other words, if your texture map is 8192x8192 (16x16), 8192 / 8 = 1024x1024

== Using MapConv ==

[[MapConv]] is a command line program that is generally started via a batch file .

Below is an example set of parameters given to mapconv:

&lt;code&gt;'''MapConv -i -l -c 0 -x 101 -n 100 -o EvoRTS-Craggy_Creek-v01.smf -t terrain.png -a height6.png -m metal.png -f feature.png -z &quot;nvdxt.exe -dxt1a -nmips 4 -Sinc -quality_highest -file&quot;'''&lt;/code&gt;

Once compiled, you will get 2 new files: &amp;lt;mapname.smt&amp;gt; and &amp;lt;mapname.smf&amp;gt;

= Utilizing Blueprint =

Unzip the blueprint archive into your Spring Maps folder.

http://www.evolutionrts.info/random/mapcontainer.jpg

You will notice a new folder called &quot;mapcontainer.sdd&quot;. The .sdd ending on the folder name is very important for testing as &amp;lt;foldername&amp;gt;.sdd tells spring to load map files from that folder. This way you can work on your maps without having to zip them up over and over again.

== mapcontainer.sdd ==

Inside the map container folder you have the following file/folder structure.


&lt;div&gt;'''&lt;code&gt;LuaGaia&lt;/code&gt;'''&lt;/div&gt;&lt;div&gt;'''&lt;code&gt;mapconfig&lt;/code&gt;'''&lt;/div&gt;&lt;div&gt;'''&lt;code&gt;maphelper&lt;/code&gt;'''&lt;/div&gt;&lt;div&gt;'''&lt;code&gt;maps&lt;/code&gt;'''&lt;/div&gt;&lt;div&gt;'''&lt;code&gt;mapinfo.lua&lt;/code&gt;'''&lt;/div&gt;&lt;div&gt;'''&lt;code&gt;mapoptions.lua&lt;/code&gt;'''&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
Now, copy your compiled map files (the &lt;code&gt;.smt&lt;/code&gt; and &lt;code&gt;.smf&lt;/code&gt; files) into the &quot;maps&quot; folder.

= Texture Splatting using SSMF =

SSMF mapping is adding detail textures all over the map based upon specified distribution areas. This will make your map infinitely more detailed and beautiful.

Adding SSMF to a map consists of the following steps:

* [[SSMF:_Distribution_Map|Distribution Map]]

* [[SSMF:_Detail_Textures|Detail Textures]]

* [[SSMF:_Specular_Map|Specular Map]]

* [[SSMF:_Grass_Shading_Map|Grass Shading Map]]

* [[SSMF:_Normal_Map|Normal Map]]

= Placing Features =

As previously mentioned, features can now be placed via LUA based upon a coordinate system that looks similar to this:
&lt;div&gt;&lt;code&gt;local features = {&amp;nbsp;&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;unitlist = {&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;},&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;buildinglist = {&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;},&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;objectlist = {&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;{ name = 'btreeclo_4', x = 7760, z = 112, rot = &quot;0&quot; },&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;{ name = 'btreea_3', x = 2520, z = 6904, rot = &quot;0&quot; },&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;{ name = 'btreeblo_5', x = 7736, z = 536, rot = &quot;0&quot; },&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;{ name = 'btreeclo_1', x = 2504, z = 7112, rot = &quot;0&quot; },&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;{ name = 'geovent', x = 177, z = 192, rot = &quot;0&quot; },&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;},&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;}&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;code&gt;return features&lt;/code&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;Of course, features can be placed by editing the set.lua file in a text editor, but that would take an extremely long time. Enter FeaturePlacer.&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
== Feature Placer ==

* [[Map Making: Feature Placer|Feature Placer]]

= Configuring Map Parameters (Mapinfo.lua) =

Admittedly, the default values used in blueprint mapinfo are awful. It may be wise for you to download another map that has used blueprint and copy and paste it's mapinfo contents into yours. However, you are also free to use the default or use the provided example.

In time, the mapinfo tags will be documented and this will like to that page. As it is the tags and values are pretty easy to figure out for the most part.

== MapInfo.lua ==
* [[Map_Making:mapinfo.lua|MapInfo.lua]]

= Skyboxes =

*[[Skyboxcreation|Notes about skyboxes]] notes on a prerendered sky box or cube map.



= Mutators =

Mutators are files that add new content to exiting game files. &quot;[http://springfiles.com/spring/tools/spring-features Spring Features]&quot; is an example of a mutator.

This section needs a proper description.

[http://springrts.com/phpbb/viewtopic.php?f=13&amp;t=21808 http://springrts.com/phpbb/viewtopic.php?f=13&amp;t=21808]

= Archiving a Map =

&lt;div&gt;Spring reads two different archive formats, 7zip and zip. Both archives are named sd7 and sdz, respectively. 7zip files are made by The 7zip archive program, available at&amp;nbsp;[http://www.7-zip.org/ http://www.7-zip.org/]&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;Navigate to your mapcontainer.sdd folder and zip it's contents into either a .7z file or .zip (7zip format is '''HIGHLY RECOMMENDED'''!), usually naming schemes follow the actual mapname (&amp;lt;mapname.sd7&amp;gt;, such as&amp;nbsp;EvoRTS-Craggy_Creek-v08.sd7&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;http://www.evolutionrts.info/random/examplearchivewith7zip.jpg&lt;br/&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;Once completed, copy the sd7/sdz file to your maps folder. At this point, be sure to remove the .sdd ending from your mapcontainer.sdd folder (or change the map name/version contained withing), otherwise you might get sync errors because spring is reading from the wrong archive source.&lt;/div&gt;
&lt;br/&gt;

= Tools =

*[[Maps:SpringMapEdit|Frostregen's SpringMapEdit]]. 3D editing, Compiles and import SM2 directly. Beginner friendly but still powerful.
*[[MapConv]] Map converter program, compiles maps.
*[[MapConvNG]] Rewrite of MapConv that works on linux / 64 bit.
*[[Maps:Map Designer]]&amp;nbsp;'''(Outdated, Deprecated)''' Hugh's 3D map designer. Splatting, heightmap editing, splat painting, SM3
*[http://www.springfiles.com/show_file.php?id=1679 Starting position creator]: Or you can always find out the hard way which x/y coordinates are good by starting spring and having a look at the mouse cursor coordinates.
*[http://code.google.com/p/conflictterra/source/browse/games/CT/luaui/widgets/tp_coordinate_help.lua Coordinate Helper widget] A small widget that helps you with finding coordinates ie for start positions. Every time you put down a marker it will log its position in [[Infolog.txt]] and also in MAPNAME_coordinates.txt Helpfull if you need to get lots of map coordinates and do not want to write them down by hand. (it writes SpawnResource in front of the coordinates but you can ignore or edit the widget)

= SSMF Mapmaking Tutorial (Using JK's Blueprint) =

'''*A Note to wiki Editors*'''

&lt;code&gt;The below listed tutorial needs to be pulled apart and separated into proper pages following an outline, making it much easier for future addition and proper documentation separation.&lt;/code&gt;

[[Creating a map using blueprint|Creating a Map using Blueprint]]

= Minimal template =
While JK's Blueprint is very useful for advanced map architects it can be bit confusing if one wants a minimal barebone template with defaults.

JK's template is still useful starting point. Extract it, then delete everything except mapinfo.lua and everything in maps folder (except your .smf and .smt files). Next copy paste following to mapinfo.lua (not the most minimal but minimal enough):
&lt;pre&gt;
local mapinfo = {
   name        = &quot;MyMap&quot;,
   shortname   = &quot;&quot;,
   description = &quot;&quot;,
   author      = &quot;&quot;,
   version     = &quot;&quot;,
   modtype     = 3, --// 3=map

   teams = {
      [0] = {startPos = {x = 8, z = 8}},
      [1] = {startPos = {x = 16, z = 16}},   
   },
}
return mapinfo
&lt;/pre&gt;
In summary: maps folder with .smf.and .smt files and single mapinfo.lua file. You should be now able to test your map immediately (if files are placed to mapcontainer.sdd).</text>
      <sha1>350pmhtvnelp0w3z4emonn2bvrcp4ps</sha1>
    </revision>
  </page>
  <page>
    <title>Mandriva install</title>
    <ns>0</ns>
    <id>2492</id>
    <revision>
      <id>28631</id>
      <parentid>20965</parentid>
      <timestamp>2014-06-14T12:21:27Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="821">[[Linux|Linux Setup Guide]] &lt; {{FULLPAGENAME}}

{{deprecated}}

For packaging &lt;font color=&quot;#00DD00&quot;&gt;requests&lt;/font&gt; or &lt;font color=&quot;#FF0000&quot;&gt;complaints&lt;/font&gt;, please contact [[Linux:Packaging#Mandriva | the packagers]].

=Mandriva=

This is for version 0.76b1.

Mandriva has Spring in the official Contrib  repositories, follow the instructions at [http://easyurpmi.zarb.org Easy Urpmi] to add contrib mirrors

after being done, to install enter the following command in a console:

&lt;code&gt;su root -C &quot;urpmi spring&quot;&lt;/code&gt;

and select yes to the confirmation question

For configuring the lobbies, you can note that the package installs the Spring executable at /usr/games/spring and read-only data in /usr/share/games/spring.

= See Also: =
* [[Finalizing_linux_install]]
* [[Troubleshooting_linux]]

[[Category: Linux]]</text>
      <sha1>3o2bber1mcnyhz19ckslyburikz54c6</sha1>
    </revision>
  </page>
  <page>
    <title>Manored's Guide about BA units</title>
    <ns>0</ns>
    <id>2260</id>
    <revision>
      <id>24356</id>
      <parentid>21820</parentid>
      <timestamp>2012-05-02T08:41:04Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="17634">{{Balanced_Annihilation_deprecated}}

Feel free to edit this if you wish, but make sure to experiments with the units to make sure what you are saying is correct. The reason I am making this &quot;Upside down&quot; is Because the higher in the tech tree a unit is, less likely you are to know it.

Ba 5.4 units guide:

#General Knowlegde:

Radar detection: Units or buildings equipped with radar can detect units inside the radar range, but cannot say exactly what unit it is, only what type (Squares are buildings, circles are units, half moons are ships and little robots are commanders) The radar cannot detect things underwater, some units (Those units are most times called stealth or radar-invisible units) or units inside the range of a radar jammer.

Radar jamming: Radar doesn't detect units inside the range of a building or unit equipped with a radar jammer, even if it's a allied jammer.

Sonar detection: Sonar is like radar, but only detects units underwater or on the surface of water.

Cloaking: When a unit cloaks it becomes invisible, requiring radar to be detected. Cloaked units will become visible if they attack, come too close to a enemy unit, building or something similar. Once visible, the unit will only be able to become invisible again (or for the first time) After leaving the enemy's vision range. Units generally waste some energy then they cloak.

Stealth or radar invisible: This means that the unit/building in question cannot be detected by radar (Doesn't need jamming).

Reclaim: Builders (With the exception of minelayers) can reclaim features or units to gain its metal/energy back. If it is a feature the reclamation will happen bit by bit, but if it is a unit it will happen in form of damage until the unit is killed, then all metal/energy from it will be added to your reserves and the unit will vanish without leaving a trace.

Wreckage: Most units become wreckage then they die (Unless they self-destruct). Depending of how tough they were and how much damage they took in their last shot before death, they will either become a solid wreck, shattered wreck or vanish completely. Solid wreck blocks passages and some shots, and if no one reclaimed anything from it it can be resurrected. Shattered wreckage cannot be resurrected and doesn't blocks anything. If necessary you can make wreckage &quot;Downgrade&quot; (Solid &gt; Shattered &gt; Vanished) by damaging it, but the shot must be strong enough for the blast to touch its center.

#Tech 6 units: (Level 3 kbots)

Arm:

Bantha (tech 3 assault kbot): The Bantha is a large, powerful kbot. It is meant for assault, but is less efficient than the large amount of tech 2 assault units you can make with the metal you spend on it. Its attack range allows it to be used as artillery, but far away from the enemy its attack power is not very high for his price. The main reason you will want to use a Bantha is that it occupies a much smaller space than a group of lv2 units.

Razorback (tech 3 battle kbot): A big, fast and powerful kbot. It is meant for attacking other units, although large swarms of lv2 units can be more efficient at this. It can also be used for assault but again other units are more efficient at this. It is quite good at raiding but by the time you manage to make one your enemy will already have good defenses so it's pointless. The main reason you will want to use this kbot is that it occupies a much smaller space than a group of lv2 units.

Marauder (tech 3 light amphibious kbot): I believe this is the smaller and cheaper lv3 unit around, but it's a nice one. It performs pretty well on assault, battle and raiding, although not as well as lv2 units you can make with his metal. It is amphibious and although it's defenseless underwater the smaller space occupied by groups of this kbot compared to other amphibious units makes beach invasions easier.

Vangurad (tech 3 heavy artillery kbot): The most useful and slow lv3 unit from arm in my opinion. It is meant for artillery, and does very well on it, having a higher range that most other artillery units and enormous firepower. It is vulnerable at close range combat, but not completely defenseless.

Core:

Krogoth (tech 3 experimental assault kbot): A kbot with immense size and power. It is very efficient at both assault and battle. Its use is very recommendable if you have a strong enough economy to make it.

Karganeth (tech 3 all terrain assault mech): A big, fast and powerful kbot. It is meant for battle, but swarms of them can be quite good against very heavy defenses (slow shooting high power ones). It is also able to attack air with its rockets. Be careful since this kbot explodes violently and this may cause severe damage to other units near it. It can climb to any height.

Juggernaut (tech 3 heavy mobile turret): A very big and resistant but very slow kbot. It is meant for defense. Its shots aren't strong (compared to other tech 3 kbots) but they can hit various units, which makes it good against large swarms of small units and bad against small groups of big units.

Shiva (tech 3 amphibious siege mech): An amphibious artillery kbot. Although its attack range is not that high for artillery, it shoots fast and strong, making it acceptable for close range combat too. It is defenseless while underwater.

Catapult (tech 3 heavy rocket kbot): An artillery kbot. It has a high attack range and power, but its attack is composed of various rockets that spread around. Good against big groups of weak units/buildings. Bad against small groups of units/buildings.

#Tech 5 units: (Level 2 buildings)

Both teams:

Fusion reactor (produces energy/storage): Generates energy. It's more efficient than lv1 energy generators, but takes a long time and costs a lot to build, which is compensated for by its great output. Warning: This will be a great target for bombers and its explosion can damage/destroy nearby units.

Advanced fusion reactor (Enhanced energy output/storage): This building costs around 2x more than a normal fusion reactor, but produces 3x more. Be aware that the explosion is a lot bigger too, almost as big as a com explosion.

Experimental Gantry (produces tech3 units): Produces tech 6 (3) Kbots. It's expensive and timely to build, and a priority target for your enemies, so watch out.

Moho Geothermal Powerplant (Harzardous energy source): Generates energy. Its much more cost-efficient than a fusion reactor, but it must be built over a geovent and explodes like a nuke, so make sure to guard it against air attacks.

Moho Mine (Advanced metal extractor/storage): Extracts metal from the ground. Its less cost-efficient than its tech 1 brothers, but it extracts metal faster and since the amount of metal spots is limited on most maps you will want to make it anyway.

Moho Metal Maker (converts energy to metal): This converts energy into metal. It's 20% more efficient than its tech 1 brothers. Beware since this building has ridiculous hp and its explosion can cause some damage. (enough to kill other Moho Metal Makers causing a chain if you pack them together)

Metal Generator (produces free metal): This produces metal without the need of energy. They are more efficient than making fusions and then metal makers, but they take up a lot of space to generate considerable metal and are fragile, so packing em together is not a good idea.

Advanced Energy Storage (increases energy storage): This increases the max amount of energy you can have stored. It's less efficient than its tech 1 brothers, but has more resistance to attacks. Its explosion can kill nearby units or buildings. It can be built underwater.

Advanced Metal Storage (increases metal storage): This increases the max amount of metal you can have stored. It's less efficient than its tech 1 brothers, but resists more damage. It can be built underwater.

Advanced Radar Tower (Long-range radar): This building allows you to detect enemy units inside its range. It's extremely fragile, but fast to build and cheap. It has longer detection range than its tech 1 brother.

Long-range jamming tower: This building allows you to hide your units from enemy radars and sonars. It's fragile, but has a good range. Note that it will work for the enemy too.

Fortification Wall (perimeter defense): This building is used to form barriers by making a lot of it on a line. It's extremely cheap, though more expensive than its tech 1 brother dragon teeth, but is consequently harder to reclaim. It blocks the fire of most units and defenses (mostly missiles, lasers and machine-guns) and cannot be crushed, although its reclaimed easily and can be destroyed by some kinds of shots (mostly cannon shots).

Air repair pad (automatically repairs aircraft): Air units will automatically come to this building and be repaired if they get their health under a certain percentage (this is defined by you on the orders menu of the aircraft). It can hold 4 aircraft by time and repairs then pretty fast, while not very expensive.

Targeting facility (enhanced radar targeting): This is not a very expensive building and will increase the accuracy of your units then shooting guided by radar. Its especially useful then you got Long range artillery units like the BB (Big Bertha). Building more of them will increase accuracy, although there is probably a point where it will stop making effect due to perfect accuracy.

Underwater fusion plant (produces energy/storage): Similar to the fusion reactor, but adapted to be built underwater.

Underwater moho mine (Advanced metal extractor/storage): Similar to the moho mine, but adapted to be built underwater.

Underwater moho metal maker (Converts energy into metal): Similar to the moho metal maker, but adapted to be built on the surface of water.

Floating targeting facility (Enhanced radar targeting): Similar to the targeting facility, but adapted to be built on the surface of water.

Advanced sonar station (Extended sonar): This sonar station is pretty cheap and has a great detection range and is pretty tough for a detection device. 

Arm:

Cloakable Fusion reactor (produces energy/storage): Similar to the Fusion reactor, except that it is more expensive but possesses the ability to cloak. Wastes 200 energy when cloaked.

Prude (Safe Geothermal Powerplant): Similar to the Moho Geothermal Powerplant, except that it generates less energy, is a lot more resistant to attacks, and has a much smaller explosion.

Tracer (intrusion countermeasure system): This device detects moving ground enemy units inside its detection range, even if they are stealthy or cloaked, but it can only keep track of then while they are moving, won't show them on radar, and your units wont react automatically. Not very expensive (or useful :) ).

Keeper (Plasma deflector): This device deflects plasma cannon shots withing its range. Note that this device also offers some protection to stuff behind since shots low enough to hit that stuff must pass through the shield. BB or Intimidator shots may get through the shield occasionally, so make 2 for a completely impenetrable anti-plasma defense. Its pretty expensive so make it on key points.

Arm Juno (anti radar/jammer weapon): This weapon jams radar detection around itself and can produce missiles that cause temporary radar jamming where you shot them. Not very expensive.

Ambusher (Cloackable heavy plasma cannon): This artillery weapon costs a bit, but its worth the price. Its range is not so much for a tech 2 artillery unit, but it's shots are very powerful. It has 2 firing modes: In high trajectory it causes a lot more damage but shots are too slow to hit moving units. In low trajectory shots it can damage moving units but doesn't pack that much power. Can be cloaked. Keep it away from direct combat.

Pit Bull (Pop-up gauss cannon): This defensive weapon is not very expensive but works well against all sizes of ground units, except for units that out-range it, which are rare. Can cloak.

Annihilator (tachyon accelerator): This big weapon is considerably expensive, but if used correctly it is worth the price. As defense its only good against heavy units, but its range allows it to be used to hold your enemy's front back. Its not very resistant, so keep it behind other defenses.

Flakker (Anti-air flak gun): This weapon is expensive, but works well against all kinds of aircraft. It cannot shoot something other than flying units. Don't forget that its health is not that good, so players might try to bomb them to destroy them. Keep them away from each other to increase effect range and make bombing them harder.

Mercury (Long-range missile tower): This expensive weapon works somewhat like a sniper: It has high attack power and range, but a very slow fire rate. Shots may hit various units since they have a big blast. If you have at least 1 of this for each incoming aircraft, it will work greatly, but if you dont it wont work all that well because the slow fire rate will let you open to attacks. Because of that its not recommendable that you have those as the only AA defense of your base.

Detonator (EMP missile launcher): This is like a nuke, but of EMP and less expensive. Missiles must be made before being shot. It takes around 100 seconds to make one missile. Impact area is not that big, but the enormous range can make it useful anyway. (You can use it on a anti-nuke for example)

Protector (Anti-nuke system): This device protects the area inside its range from being nuked. It needs to have at least 1 missile in store to work. Missiles take around 50 seconds to be made.

Retaliator (Nuclear ICBM launcher): This powerful weapon launches nuclear missiles. Missiles must be made before use and take around 140 seconds to be made. Its range is virtually infinite and the blast and power of its missile is very high. It can be countered by anti-nukes.

Big Bertha (Long-range plasma cannon): It is an expensive but powerful weapon and has enormous range and firepower, although it's not very precise and has a slow rate of fire. Nice to bombard the economy or front line of your enemy, but be aware that nearly any other way is more cost-efficient if it can be accomplished. Needs 3000 E for each shot.

Vulcan (Rapid-fire long-range plasma cannon): Like the name says, this weapon is very similar to a long-range plasma cannon, except that it has a little more range and a much higher fire rate. It's insanely expensive, but for a reason: Whoever succeeds in making this is almost surely the winner of the battle.

Decoy fusion reactor (Decoy fusion reactor): This building is exactly equal to a fusion reactor, except that it is very cheap and produces nothing at all. It merely serves to call your enemys bombers attention away from the real fusion reactors.

Flakker NS (anti-air flak gun - naval series): Similar to the flakker, but adapted to be built on the surface of water.

Moray (Advanced torpedo launcher): This expensive weapon has considerable range and firepower. It can only attack units underwater or on its surface (hovers excluded). Its weakness lies on its resistance: It's quite low, allowing it to be killed easily.

Core:

Behemoth (Geothermal plasma battery): This geothermal powerplant is not nearly cost-efficient on its energy production, but the fact that it doesn't explode like a nuke and can not only defend itself but attack other units with its great range might be worth it.

Moho exploiter (Convertible metal extractor): This is more expensive to build than a standard moho metal extractor, but it can defend itself with a set of powerful weapons and is pretty tough. It only reveals that its not a common moho metal extractor then it transforms itself to attack.

Nemesis (Intrusion countermeasure system): Similar to the &quot;tracer&quot; from arm.

Overseer (Plasma deflector): Similar to the &quot;Keeper&quot; from arm.

Core juno (Anti-radar/jammer weapon): Similar to the &quot;Arm juno&quot;.

Toaster (Heavy plasma cannon): Similar to the &quot;Ambusher&quot; from arm, except that it can't cloak.

Viper (Pop-up sabot battery): Similar to the &quot;Pit bull&quot; from arm, except that it cant cloak.

Doomsday machine (Energy weapon): This weapon holds great endurance and range, and is equipped to battle all sizes of ground units, although its only efficient against heavy ones. Its range allows it to push the enemy front line back.

Cobra (Anti-air flak gun): Similar to the &quot;Flakker&quot; from arm.

Screamer (Long-range missile tower): Similar to the &quot;Mercury&quot; from arm.

Catalyst (Tactical nuke launcher): This silo launches small nukes anywhere inside a big range. Its a little expensive but can be worth it. Missiles take 100 seconds to be made. Missiles cause around 2500 damage each and have a small blast (for a nuke), so you should aim for strong targets instead of swarms.

Fortitude (Anti-nuke system): Similar to the &quot;Protector&quot; from arm.

Silencer (Nuclear ICBM launcher): Similar to the &quot;Retaliator&quot; from arm.

Intimidator (Long-range plasma cannon): Similar to the &quot;Big Bertha&quot; from arm.

Buzzsaw (Rapid-fire long-range plasma cannon): Similar to the &quot;Vulcan&quot; from arm.

Cobra NS (anti-air flak gun - naval series): Similar to the Cobra, but adapted to be built on the surface of water.

Lamprey (Advanced torpedo launcher): Similar to the &quot;Moray&quot; from arm.

#Tech 4 units (Level 2 units)(Hovercraft and seaplanes included):

Kbots:

Both Teams:

Advanced Construction kbot (Tech level 2): Construction Kbot that can build tech 2 buildings and all kbot labs. Its not fast or tough and has no weapons, so keep it away from combat. Its build power is decent and it is not very expensive.

Arm:
[[Category: Balanced Annihilation]]</text>
      <sha1>354i66xxufxhu5maa1s8viaminqcl2q</sha1>
    </revision>
  </page>
  <page>
    <title>Map, Game, And Unit Development Programs</title>
    <ns>0</ns>
    <id>1154</id>
    <revision>
      <id>30349</id>
      <parentid>30347</parentid>
      <timestamp>2017-04-22T23:16:59Z</timestamp>
      <contributor>
        <username>Picassoct</username>
        <id>2854</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8999">[[Engine_Development|Development]] &lt; {{FULLPAGENAME}}

A Comprehensive list of tools to make Spring content.

*Those that are Open Source are marked with a &lt;font color=&quot;red&quot;&gt;*&lt;/font&gt;
*Those that are Free are marked with a &lt;font color=&quot;blue&quot;&gt;*&lt;/font&gt;
*Those that Cost are marked with a &lt;font color=&quot;green&quot;&gt;*&lt;/font&gt;'''

=== Image Editing ===
# '''[http://krita.org/ Krita]'''&lt;font color=&quot;red&quot;&gt;*&lt;/font&gt;&lt;font color=&quot;blue&quot;&gt;*&lt;/font&gt; digital painting application, cross platform, with 16bit image support.
# '''[http://www.gimp.org Gimp]'''&lt;font color=&quot;red&quot;&gt;*&lt;/font&gt;&lt;font color=&quot;blue&quot;&gt;*&lt;/font&gt;
# '''[http://www.adobe.com/products/photoshop/main.html Adobe Photoshop]'''&lt;font color=&quot;green&quot;&gt;*&lt;/font&gt;&lt;br&gt;-&gt; The most widely used image editing program ever.
# '''[http://www.getpaint.net Paint.NET]'''&lt;font color=&quot;red&quot;&gt;*&lt;/font&gt;&lt;br&gt;-&gt; Basically an expanded version of Paint. Contains many functions such as layers, and is much easier to use then The Gimp.

=== 3d Modeling ===

# '''[http://blender.org Blender]'''&lt;font color=&quot;red&quot;&gt;*&lt;/font&gt;&lt;font color=&quot;blue&quot;&gt;*&lt;/font&gt;&lt;br&gt;FREE-&gt; The most used open-source modeller that has its own way of doing things.
Now features animation export for dae and s3o.
# '''[http://www.wings3d.com/ Wings 3D]'''&lt;font color=&quot;blue&quot;&gt;*&lt;/font&gt;&lt;font color=&quot;red&quot;&gt;*&lt;/font&gt;&lt;br&gt;FREE-&gt; Probably the most popular modeller for Spring.&lt;br&gt;-&gt; Easy to learn modelling and UV mapping environments.&lt;br&gt;-&gt; Excellent introduction to using it can be found [http://www.wings3d.com/doghouse.php here]. &lt;br&gt;-&gt; For help on how to UV map with it just ask around.low poly
# '''[http://www.anim8or.com/main/index.html Anim8or]'''&lt;font color=&quot;blue&quot;&gt;*&lt;/font&gt;'''
# '''[http://www.autodesk.com/products/autodesk-3ds-max/overview 3DS MAX]'''&lt;font color=&quot;green&quot;&gt;*&lt;/font&gt;&lt;br&gt;-&gt; The most widely used and acclaimed modelling program ever. Used in creation of many games and movies (The Matrix). One of the three major modelling programs used by professionals.&lt;br&gt;-&gt; The s3o plugin for 3DS MAX can be found here. NOTE: This is not backwards compatible with versions prior to 7. Also this only exports: '''[http://taspring.clan-sy.com/temp/s3oexport.dle broken link fix if possible]'''
# '''[https://www.lightwave3d.com Lightwave]'''&lt;font color=&quot;green&quot;&gt;*&lt;/font&gt;&lt;br&gt;-&gt; A popular modelling program that's been around a long time. One of the three major modelling programs used by professionals.
# '''[http://www.rhino3d.com/ Rhinoceros]'''&lt;font color=&quot;green&quot;&gt;*&lt;/font&gt;&lt;br&gt;-&gt; Uses a lot of nurbs surfaces. 
# '''[http://www.turbosquid.com/gmax GMAX]'''&lt;font color=&quot;blue&quot;&gt;*&lt;/font&gt;&lt;br&gt;-&gt; Great for learning as it is 3DS MAX v4 without rendering and has game packs for a fair amount of games. It is locked in exporting however there are a few workarounds.
# '''[http://www.autodesk.com/products/autodesk-maya/overview MAYA]'''&lt;font color=&quot;green&quot;&gt;*&lt;/font&gt;&lt;br&gt;-&gt; The other most widely used and acclaimed modeling program. Used in creation of many games and movies. One of the three major model programs used by professionals.

===3d Model converters/Assemblers===

# '''[[upspring|UpSpring]]'''&lt;font color=&quot;blue&quot;&gt;*&lt;/font&gt;&lt;font color=&quot;red&quot;&gt;*&lt;/font&gt;&lt;br&gt;-&gt; Help, information, manual and tips can be found here: '''[http://taspring.clan-sy.com/phpbb/viewtopic.php?t=2839&amp;start=0 Forum]&lt;br&gt;-&gt; This is the only other way to get files into the [[About_s3o|s3o]] file format for Spring other then the [[About_s3o|s3o]] plugin for 3DS MAX.
# '''[http://springrts.com/phpbb/viewtopic.php?f=9&amp;t=28156 S3O &lt;-&gt; OBJ Converter]'''

===Sound/Audio Editors and Recorders===

# '''[http://audacity.sourceforge.net/ Audacity]'''&lt;font color=&quot;blue&quot;&gt;*&lt;/font&gt;&lt;font color=&quot;red&quot;&gt;*&lt;/font&gt;&lt;br&gt;-&gt; Audacity is a free, easy-to-use audio editor and recorder for Windows, Mac OS X, GNU/Linux, and other operating systems.
# '''[http://www.goldwave.com/ GoldWave]'''&lt;font color=&quot;green&quot;&gt;*&lt;/font&gt;&lt;br&gt;-&gt; GoldWave is a commercial digital audio editing software developed by GoldWave Inc for Windows. It was first released to public in April 1993, and is similar to applications like the open source Audacity.
# '''[http://www.sonycreativesoftware.com/products/soundforgefamily.asp Sound Forge]'''&lt;font color=&quot;green&quot;&gt;*&lt;/font&gt;&lt;br&gt;-&gt; The Sound Forge is an digital audio production suite includes everything you need to quickly get from raw audio to finished master. Use this suite to create and edit stereo and multichannel audio files with speed and precision. Efficiently analyze, record and edit audio, digitize and restore old recordings, model acoustic environments, design sound for multimedia, and master replication-ready CDs.
# '''[http://www.speech.kth.se/wavesurfer/ WaveSurfer]'''&lt;font color=&quot;blue&quot;&gt;*&lt;/font&gt;&lt;br&gt;-&gt; Wavesurfer is an audio editor widely used for studies of acoustic phonetics. Wavesurfer provides basic audio editing operations, such as excision, copying, pasting, zero-crossing adjustment, and effects such as fading, normalization, echo, inversion, reversal, replacement with silence, and DC-removal, but, in view of its scientific orientation, does not offer effects of interest to musicians such as flange.

=== Scripting And Unit Stats files ===
# '''[http://springfiles.com/spring/tools/scriptor-v1 Scriptor]'''&lt;font color=&quot;blue&quot;&gt;*&lt;/font&gt;&lt;font color=&quot;red&quot;&gt;*&lt;/font&gt;&lt;br&gt;-&gt; The by far best compiler for your handmade .bos scripts into endless lines of letters and numbers that the TA engine reads. The program is large, easy to operate and with broad error tracing (well, better than the other two alternatives). While other versions of this program sometimes refuse to compile on-off functions, this download is guaranteed to work in every condition.
# '''[http://springfiles.com/spring/tools/cobbler-v4 Cobbler]'''&lt;font color=&quot;blue&quot;&gt;*&lt;/font&gt;&lt;br&gt;-&gt; This is a very simple script compiler that converts your newly written .bos files understood by humans into a hexadecimal .cob gibberish used by the TA engine. Beware, however, that this program may fail to compile some perfectly valid scripts and it doesn't always tell where the alleged error lies either. Parts of the program are in French.
# '''[http://springrts.com/phpbb/viewtopic.php?f=9&amp;t=24702&amp;p=460639 Servo]'''&lt;font color=&quot;blue&quot;&gt;*&lt;/font&gt;&lt;br&gt;-&gt; Rhad's awesome but somewhat buggy animation scripting program. It features keyframed animation script generation from a 3D positioner.
# '''[https://github.com/Anarchid/blender2lus blender2lus]'''&lt;font color=&quot;blue&quot;&gt;*&lt;/font&gt;&lt;font color=&quot;red&quot;&gt;*&lt;/font&gt;&lt;br&gt;-&gt; A Blender addon that allows Spring lua unitscripts (for assimp models only) to be authored in Blender, with (almost) all the goodies involved therein.
# '''[http://springrts.com/phpbb/viewtopic.php?f=14&amp;t=25104 Spring Poser by knorke]'''  A not-yet-so-usefull gadget-widget-unitscript brewage that allows you to &quot;pose&quot; units by moving &amp; rotating their pieces. It can then save the posed position as a list of Move &amp; Turn commands.
# '''[http://springrts.com/phpbb/viewtopic.php?f=23&amp;t=24499 CEG Browser/Spawn by CarRepairer]''' Spawn particle effects from a menu, ie if you want to reuse effects from another game.
# '''[http://springrts.com/phpbb/viewtopic.php?f=23&amp;t=25847 piece tree widget]''' Print an ascii view of a units piece hierachy. Might be usefull to create notes for scripting.
# '''[http://springrts.com/phpbb/viewtopic.php?f=67&amp;t=23391 bos2lua converter page by CarRepairer]''' Converts .bos scripts to .lua scripts.
# '''[[ToolBox]]''' A game-mutator with some tools for modding. Contains newest version of some of the above scripts plus others.

=== Map Creation ===

# '''[[Maps:SpringMapEdit|SpringMapEdit]]'''&lt;font color=&quot;blue&quot;&gt;*&lt;/font&gt;&lt;font color=&quot;red&quot;&gt;*&lt;/font&gt;&lt;br&gt;-&gt; Our very own complete map making solution, created by Frostregen.
# '''[http://www.springfiles.com/show_file.php?id=2441 Beherith's mapconv]'''&lt;font color=&quot;blue&quot;&gt;*&lt;/font&gt;&lt;font color=&quot;red&quot;&gt;*&lt;/font&gt;&lt;br&gt;-&gt; The latest map compiler, supports all features of maps while still retaining backwards compatibility with previous scripts. 
# '''[http://taspring.clan-sy.com/phpbb/viewtopic.php?t=2420 SMD Creator]'''&lt;font color=&quot;blue&quot;&gt;*&lt;/font&gt;&lt;font color=&quot;red&quot;&gt;*&lt;/font&gt;&lt;br&gt;-&gt; Maelstroms SMD creator
# '''[http://www.bundysoft.com/L3DT/ L3DT Large 3D Terrain Generator]'''&lt;font color=&quot;blue&quot;&gt;*&lt;/font&gt;&lt;font color=&quot;green&quot;&gt;*&lt;/font&gt;&lt;br&gt;-&gt; Commercial Map Maker, standard version is free, but pro version requires payment but includes all the tools required to make an SD7 Spring map from scratch.
#  '''[http://code.google.com/p/conflictterra/wiki/MapsAndRocks#Coordinate_Helper_Widget Coordinate helper widget]''' Need to find lots of coordinates, for example to position units? Log the coordinates into a file just by placing markers, no more pen&amp;paper!
#  '''[http://www.world-machine.com/ World Machine]''' Commercial terrain generation software, can output height and diffuse textures.
#  '''[http://en.wikipedia.org/wiki/Bryce_(software) Bryce3D]''' Shareware terrain generation software.
#  '''[http://en.wikipedia.org/wiki/Carrara_(software) Carrara]''' Shareware 3D software.

[[Category:Development]]</text>
      <sha1>nj20prj387vxim6jlf6rs3s2v8pedac</sha1>
    </revision>
  </page>
  <page>
    <title>Map, Mod, And Unit Development Programs</title>
    <ns>0</ns>
    <id>3008</id>
    <redirect title="Map, Game, And Unit Development Programs" />
    <revision>
      <id>20737</id>
      <timestamp>2010-12-05T01:12:06Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>moved [[Map, Mod, And Unit Development Programs]] to [[Map, Game, And Unit Development Programs]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="54">#REDIRECT [[Map, Game, And Unit Development Programs]]</text>
      <sha1>h3yj5dstzeesejn6mrci2ofcmm0wmpf</sha1>
    </revision>
  </page>
  <page>
    <title>MapConv</title>
    <ns>0</ns>
    <id>2893</id>
    <revision>
      <id>31462</id>
      <parentid>26871</parentid>
      <timestamp>2021-02-11T20:37:27Z</timestamp>
      <contributor>
        <username>Beherith</username>
        <id>2441</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7343">'''Linux users, use:''' [[MapConvNG]]

Some Mapconv Information [http://springrts.com/phpbb/viewtopic.php?f=13&amp;t=20849 1],[http://springrts.com/phpbb/viewtopic.php?f=13&amp;t=13655 2]

map decompiler [http://springrts.com/phpbb/viewtopic.php?f=13&amp;t=18562 1]

= Mapconv =
A cross platform map compiler for spring
* [http://springrts.com/phpbb/viewtopic.php?f=56&amp;t=21458 Forum thread] for news and releases

= Windows download =
* In 2021, on windows, use the GUI version here: [https://github.com/Beherith/springrts_smf_compiler PyMapConv]
- Beherith
= Source Code =
'''[http://github.com/spring/MapConv &lt;span style=&quot;color:#bbf;&quot;&gt;MapConv&lt;/span&gt;] at github'''
== Getting the Source ==
&lt;code&gt;&lt;pre&gt;git clone git://github.com/spring/MapConv.git&lt;/pre&gt;&lt;/code&gt;

= Documentation =
== Example Usage ==
'''Fastest compile, lowest quality:'''

MapConv -i -c 0 -x 250 -n 25 -o Zion_v1.smf -t t.bmp -a h.raw -m m.bmp -f f.bmp -z &quot;nvdxt.exe -dxt1a -nmips 4 -quick -file&quot;


'''Medium speed, good quality:''' (CUDA version, requires nvidia 8 or higher series gfx card)

MapConv -i -c 0 -x 250 -n 25 -o Zion_v1.smf -t t.bmp -a h.raw -m m.bmp -f f.bmp -q


'''Slow, great quality:'''

MapConv -i -c 0 -x 250 -n 25 -o Zion_v1.smf -t t.bmp -a h.raw -m m.bmp -f f.bmp


'''Slower, best possible quality:'''

MapConv -i -c 0 -x 250 -n 25 -o Zion_v1.smf -t t.bmp -a h.raw -m m.bmp -f f.bmp -z &quot;nvdxt.exe -dxt1a -nmips 4 -Sinc -quality_highest -file&quot;


== --help output ==
&lt;code&gt;&lt;pre&gt;
$ mapconv -h

USAGE: 

   mapconv  [-j &lt;feature list file&gt;] [-f &lt;featuremap image&gt;] [-l] [-i] [-z
            &lt;texcompress program&gt;] [-c &lt;compression&gt;] -x &lt;max height&gt; -n
            &lt;min height&gt; [-o &lt;output .smf&gt;] [-e &lt;tile file&gt;] [-g &lt;Geovent
            image&gt;] [-y &lt;typemap image&gt;] -m &lt;metalmap image&gt; -a &lt;heightmap
            file&gt; -t &lt;texturemap file&gt; [--] [-v] [-h]


Where: 

   -j &lt;feature list file&gt;,  --featurelist &lt;feature list file&gt;
     (value required)  A file with the name of one feature on each line.
     (Default: fs.txt). See README.txt for details.

   -f &lt;featuremap image&gt;,  --featuremap &lt;featuremap image&gt;
     (value required)  Feature placement file, xsize by ysize. See
     README.txt for details.

   -l,  --lowpass
     Lowpass filters the heightmap

   -i,  --invert
     Flip the height map image upside-down on reading.

   -z &lt;texcompress program&gt;,  --texcompress &lt;texcompress program&gt;
     (value required)  Name of companion program texcompress from current
     working directory.

   -c &lt;compression&gt;,  --compress &lt;compression&gt;
     (value required)  How much we should try to compress the texture map.
     Default 0.8, lower -&gt; higher quality, larger files.

   -x &lt;max height&gt;,  --maxheight &lt;max height&gt;
     (required)  (value required)  What altitude in spring the max(0xff or
     0xffff) level of the height map represents.

   -n &lt;min height&gt;,  --minheight &lt;min height&gt;
     (required)  (value required)  What altitude in spring the min(0) level
     of the height map represents.

   -o &lt;output .smf&gt;,  --outfile &lt;output .smf&gt;
     (value required)  The name of the created map file. Should end in
     .smf. A tilefile (extension .smt) is also created.

   -e &lt;tile file&gt;,  --externaltilefile &lt;tile file&gt;
     (value required)  External tile file that will be used for finding
     tiles. Tiles not found in this will be saved in a new tile file.

   -g &lt;Geovent image&gt;,  --geoventfile &lt;Geovent image&gt;
     (value required)  The decal for geothermal vents; appears on the
     compiled map at each vent. (Default: geovent.bmp).

   -y &lt;typemap image&gt;,  --typemap &lt;typemap image&gt;
     (value required)  Type map to use, uses the red channel to decide
     type. types are defined in the .smd, if this argument is skipped the
     map will be all type 0

   -m &lt;metalmap image&gt;,  --metalmap &lt;metalmap image&gt;
     (required)  (value required)  Metal map to use, red channel is amount
     of metal. Resized to xsize / 2 by ysize / 2.

   -a &lt;heightmap file&gt;,  --heightmap &lt;heightmap file&gt;
     (required)  (value required)  Input heightmap to use for the map, this
     should be in 16 bit raw format (.raw extension) or an image file. Must
     be xsize*64+1 by ysize*64+1.

   -t &lt;texturemap file&gt;,  --intex &lt;texturemap file&gt;
     (required)  (value required)  Input bitmap to use for the map. Sides
     must be multiple of 1024 long. xsize, ysize determined from this file:
     xsize = intex width / 8, ysize = height / 8.

   --,  --ignore_rest
     Ignores the rest of the labeled arguments following this flag.

   -v,  --version
     Displays version information and exits.

   -h,  --help
     Displays usage information and exits.


   Converts a series of image files to a Spring map. This just creates the
   .smf and .smt files. You also need to write a .smd file using a text
   editor.
&lt;/pre&gt;&lt;/code&gt;

= Links =
* http://code.google.com/p/mapc/
* http://springrts.com/phpbb/viewtopic.php?f=13&amp;t=18533

=== MapConv Parameters Explained ===

&lt;code&gt;'''MapConv'''&lt;/code&gt; - Invoking the MapConv program (MapConv.exe)



&lt;code&gt;'''-i'''&lt;/code&gt; - Inverts the heightmap (Always use -i, otherwise your heightmap will be flipped producing undesierable results)



&lt;code&gt;'''-l'''&lt;/code&gt;&amp;nbsp;- Lowpass option. Lowpass applies a blurring to the heightmap to smooth out rough edges and make pathing easier. If you are using a 16bit heightmap you will probably not want to use lowpass, however, many experienced mappers still use lowpass even on 16bit heightmaps due to the fact that lowpass smoothing will, in most cases, make it easier for the pathfinder to do it's job.



&lt;code&gt;'''-c # (-c 0)'''&lt;/code&gt;&amp;nbsp;- Compression level. '''Deprecated, never use any other value than 0.'''

&lt;br/&gt;&lt;code&gt;'''-x # (-x 101)'''&lt;/code&gt; - Map maximum height.&amp;nbsp;'''Deprecated. Map levels can be set in the map's parameters via LUA which is a much better method.'''

&lt;br/&gt;&lt;code&gt;'''-n # (-n 100)'''&lt;/code&gt; - Map minimum height.&amp;nbsp;'''Deprecated. Map levels can be set in the map's parameters via LUA which is a much better method.'''

&lt;br/&gt;'''&lt;code&gt;-o &amp;lt;Mapname&amp;gt; (-o EvoRTS-Craggy_Creek-v01.smf&lt;/code&gt;''&lt;code&gt;)&lt;/code&gt;&amp;nbsp;'''''- -o stands for &quot;Output Filename&quot;. Generally this is the name of your map, but realistically it can be anything as you can change the name of the map via the Map's LUA parameters.&amp;nbsp;'''Once compiled, NEVER rename the .smt file!'''

&lt;br/&gt;'''&lt;code&gt;-t&amp;nbsp;&amp;lt;Filename&amp;gt; (t terrain.png)&lt;/code&gt;&amp;nbsp;'''- Name of the Texture map file.&amp;nbsp;'''Must be in the same directory as MapConv!'''



&lt;code&gt;'''-a &amp;lt;Filename&amp;gt; (-a height6.png)'''&lt;/code&gt; - Name of the Height map file.&amp;nbsp;'''Must be in the same directory as MapConv!'''



&lt;code&gt;'''-m &amp;lt;Filename&amp;gt; (-m metal.png)'''&lt;/code&gt; - Name of the Metal map file.&amp;nbsp;'''Must be in the same directory as MapConv!'''



&lt;code&gt;'''-f &amp;lt;Filename&amp;gt; (-f feature.png)'''&lt;/code&gt;&amp;nbsp;- Name of the Feature map file.&amp;nbsp;'''Must be in the same directory as MapConv!'''



&lt;code&gt;'''-z &amp;lt;Parameters&amp;gt; (-z &quot;nvdxt.exe -dxt1a -nmips 4 -Sinc -quality_highest -file&quot;)'''&lt;/code&gt;- -z invokes nvdxt.exe which is a helper program that breaks the texture map into DDS tiles. The parameters listed tell nvdxt.exe how much to compress the tiles or how high of quality to strive for. There is never any reason to change the parameters from the example.

[[Category:Map Tools]]</text>
      <sha1>muzbi8ia3j3np01xn1tg84cbdr31s32</sha1>
    </revision>
  </page>
  <page>
    <title>MapConvNG</title>
    <ns>0</ns>
    <id>3151</id>
    <revision>
      <id>31071</id>
      <parentid>31070</parentid>
      <timestamp>2019-10-04T12:08:23Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4225">MapConvNG is a complete rewrite of [[MapConv]] to work flawlessly on linux and on windows. It also contains smfdecompiler.
==Download==
Since 2019.10.01 it is part of the official spring build:

fetch it from https://springrts.com/dl/buildbot/default/develop/

== Sources ==
&lt;code&gt;
git clone git://github.com/spring/SpringMapConvNG.git
&lt;/code&gt;

https://github.com/spring/SpringMapConvNG

== Bugs ==

Please report bugs at https://springrts.com/mantis/

== Reformatted Help Output ==
&lt;code&gt;&lt;pre&gt;
Usage: 

springMapConvNG [options] -t &lt;texturemap&gt; -o &lt;output filename&gt;

General Options:
-h			help
-o &lt;string&gt;		output file name

Map Options:
-features &lt;string&gt;	features file
-minimap &lt;string&gt;	minimap image [1024x1024]
-maxh &lt;float&gt;		white height value
-minh &lt;float&gt;		black height value
-noclamp		Disables height map clamping, explained below.
-smooth			Smooth

Texture Map Inputs:
-h &lt;string&gt;		height map, [texture_x / 8 + 1, texture_y / 8 + 1]
-m &lt;string&gt;		metal map, [texture_x / 16, texture_y / 16]
-t &lt;string&gt;		texture map, Dimensions must be divisible by 1024
-v &lt;string&gt;		vegetation map, [texture_x / 32, texture_y / 32]
-z &lt;string&gt;		type map, [texture_x / 16, texture_y / 16]

Compilation Options:
-ct &lt;integer&gt;		compression type 1,2,3 or 4 explained below.
-ccount &lt;integer&gt;	compare_tilecount
-th &lt;float&gt;		compression level

Feature file:
Each line is a feature instance and has the fields in the following order
[tdfname] [xpos] [ypos] [zpos] [rotation yaxis]
Please do not leave whitespaces at the end or it will give errors.
If you specify less than -490000 as ypos , it will calculate ypos
depending on terrain height

noclamp:
disables heightmap clamping to max-min values , you should avoid using that,
cause you lose precision, if you want less high landscape use maxh and minh

Compression Type:
1: No compression 
2: Fast compression , compare tile with last -ccount tiles , take first
   which difference is below -th
3: Insane Compression: compare each tile with whole map , it is very SLOW,
   not recomended
4: High quality Fast compression: Slightly slower than 2 , it searchs for
   less different tile in last -ccount tiles
&lt;/pre&gt;&lt;/code&gt;

== Important information ==

* Althought the color / diffuse texture resolution must be a multiple of 1024, bear in mind that in Spring each map unit corresponds to 512px. So an 8k image equals to a 16x16 map in game.
* Texture (diffuse), minimap, height and metal maps should be flipped vertically in an image editing program, there's no -i option in MapConvNG (as in the older and much slower MapConv)
* HDR and EXR images may also be used, ideal to keep the 16-bit quality of height maps. If you use Photoshop, check this free HDR input/output plugin: https://www.exr-io.com/
* In case you add a custom minimap of a non-square map, notice that the image is stretched out to fit the map proportion - so don't add black borders, just stretch it to 1024x1024 in your image editing program.

== Suggested Parameters ==

-ct 2 : Compression Type , 1 is no compression at all , 2 - Compresses but comparing with limited set of tiles , 3 - Compares with ALL tiles , it can take ages to compile , you've been warned!

-th 0.03 : Compression Level , Higher compresses more , but adds more artifacts, 0.03 is a good compromise

* If you use -ct 1 and your texture doesn't show up, try -ct 2 with -th 0.01

-smooth : Does a bit of gaussian blur on HDR heightmap , it is especially useful when loading 8 bit images

* after applying reduction to your heightmap in an image editing program, filtering artifacts might lead to spikes in your map in-game. Using -smooth usually works out this kind of issue

== Features [featurefile] parameter ==
Feature file is a simple text file, each line defines a feature with the space-separated fields: Name XPos YPos ZPos Orientation(Degrees)&lt;br /&gt;
Follows an example:

&lt;code&gt;Rock1 6000 -500000 3000 0&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;Rock2 4000 200 1000 180&lt;/code&gt;

* Result:
** Rock1 will be placed on terrain surface (numbers below -490000 are interpreted as &quot;place on ground&quot;)
** Rock2 will be placed precisely at 4000x200x1000
&lt;br /&gt;
* To place a thermal vent, simply use 'GeoVent' as the feature name in a feature file.

[[Category:Map Tools]]</text>
      <sha1>pgzpbj67g9stjr02cuhkst1p87t39xw</sha1>
    </revision>
  </page>
  <page>
    <title>MapDev:SMF format</title>
    <ns>0</ns>
    <id>3372</id>
    <redirect title="Mapdev:SMF format" />
    <revision>
      <id>25606</id>
      <timestamp>2012-12-15T01:06:58Z</timestamp>
      <contributor>
        <username>Enetheru</username>
        <id>2783</id>
      </contributor>
      <comment>Enetheru moved page [[MapDev:SMF format]] to [[Mapdev:SMF format]]: incorrect naming scheme, stupid capital letters.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="31">#REDIRECT [[Mapdev:SMF format]]</text>
      <sha1>lflzpfq88as2z63o3um9mbcfqm0p9eu</sha1>
    </revision>
  </page>
  <page>
    <title>MapKeywords</title>
    <ns>0</ns>
    <id>3872</id>
    <revision>
      <id>31826</id>
      <parentid>31825</parentid>
      <timestamp>2022-06-26T03:20:23Z</timestamp>
      <contributor>
        <username>Raaar</username>
        <id>2848</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1710">This page has information about map names and category-related keywords.

'''format:'''

&lt;mapName1&gt;;&lt;word1&gt;;&lt;word2&gt;,...&lt;br&gt;
&lt;mapName2&gt;;&lt;word1&gt;;&lt;word2&gt;,...&lt;br&gt;


(csv with map name on each line followed by the corresponding keywords)


The list of map names available on springfiles at the moment, sorted alphabetically and with the keywords (if any) can be found [https://springfiles.springrts.com/json.php?printMapKeywordList=1 HERE].
Use it to get a fresh list of maps and keywords to use as a base for updates to the mapKeywords.txt file that's part of the [https://github.com/spring/upq spring upq project].

After deploying the new file on the server, run &quot;/usr/bin/python3 processMapKeywords.py&quot; from /home/springfiles/upq/ to load the new keywords.

Use only [a-z0-9] characters on the keywords.

Only maps on the list get their keywords updated.

'''current keywords:'''
&lt;pre&gt;
// size 
	small: &quot;Map area &lt;= 12x12&quot;, 
	medium: &quot;12x12 &lt; map area &lt;= 18x18&quot;,
	large: &quot;Map area &gt; 18x18&quot;,
// land / water
	land: &quot;Mostly land&quot;,
	amphibious: &quot;Mixed land and water areas, land-only or water-only units may not be viable&quot;,
	water: &quot;Mostly water&quot;,
// traversability
	open: &quot;Mostly open, few or easily crossable terrain features&quot;,
	obstructed: &quot;Many steep hills, chasms, land/water transitions or other choke points&quot;,
	lava: &quot;Has lava instead of water&quot;,
	acid: &quot;Has damage-dealing acid instead of water&quot;,
	&quot;void&quot;: &quot;Has void instead of water&quot;,
	air: &quot;Key areas only reachable by air units&quot;,
// other
	metal: &quot;Continuous metal yield across the surface instead of discrete metal spots&quot;,
	ffa: &quot;Map suitable for free-for-all battles&quot;
&lt;/pre&gt;

The size-related keywords are added automatically when new maps are uploaded.</text>
      <sha1>6dint4difja7ehdflep0kivw53jjdhi</sha1>
    </revision>
  </page>
  <page>
    <title>MapSizes</title>
    <ns>0</ns>
    <id>2064</id>
    <revision>
      <id>28963</id>
      <parentid>28962</parentid>
      <timestamp>2014-10-22T19:53:44Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>Reverted edits by [[Special:Contributions/Flozi|Flozi]] ([[User talk:Flozi|talk]]) to last revision by [[User:Koshi|Koshi]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4153">[[Engine_Development|Development]] &lt; [[Map_development|Map Development]] &lt; {{FULLPAGENAME}}



This table shows you how big the map is in pixels. And some other useless information.
&lt;br&gt;&lt;br&gt;
&lt;hr&gt;
&lt;br&gt;
&lt;table border=1&gt;
&lt;tr&gt;
	&lt;td&gt;TASpring&lt;br&gt;Map size&lt;/td&gt;
	&lt;td&gt;Size&lt;br&gt;in pixels&lt;/td&gt;
	&lt;td&gt;1/8 size&lt;br&gt;in pixels&lt;/td&gt;
	&lt;td&gt;(Square)&lt;br&gt;Mem usage&lt;br&gt;in MB (24bit)&lt;/td&gt;
	&lt;td&gt;(Square)&lt;br&gt;Mem usage&lt;br&gt;in MB (32bit)&lt;/td&gt;
	&lt;td&gt;(Square)&lt;br&gt;Saved&lt;br&gt;blocks&lt;/td&gt;
	&lt;td&gt;(Square)&lt;br&gt;Max&lt;br&gt;tile size&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;2&lt;/td&gt;
	&lt;td&gt;1024&lt;/td&gt;
	&lt;td&gt;128&lt;/td&gt;
	&lt;td&gt;3&lt;/td&gt;
	&lt;td&gt;4&lt;/td&gt;
	&lt;td&gt;1&lt;/td&gt;
	&lt;td&gt;1024&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;4&lt;/td&gt;
	&lt;td&gt;2048&lt;/td&gt;
	&lt;td&gt;256&lt;/td&gt;
	&lt;td&gt;12&lt;/td&gt;
	&lt;td&gt;16&lt;/td&gt;
	&lt;td&gt;4&lt;/td&gt;
	&lt;td&gt;4096&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;6&lt;/td&gt;
	&lt;td&gt;3072&lt;/td&gt;
	&lt;td&gt;384&lt;/td&gt;
	&lt;td&gt;27&lt;/td&gt;
	&lt;td&gt;36&lt;/td&gt;
	&lt;td&gt;9&lt;/td&gt;
	&lt;td&gt;9216&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;8&lt;/td&gt;
	&lt;td&gt;4096&lt;/td&gt;
	&lt;td&gt;512&lt;/td&gt;
	&lt;td&gt;48&lt;/td&gt;
	&lt;td&gt;64&lt;/td&gt;
	&lt;td&gt;16&lt;/td&gt;
	&lt;td&gt;16384&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;10&lt;/td&gt;
	&lt;td&gt;5120&lt;/td&gt;
	&lt;td&gt;640&lt;/td&gt;
	&lt;td&gt;75&lt;/td&gt;
	&lt;td&gt;100&lt;/td&gt;
	&lt;td&gt;25&lt;/td&gt;
	&lt;td&gt;25600&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;12&lt;/td&gt;
	&lt;td&gt;6144&lt;/td&gt;
	&lt;td&gt;768&lt;/td&gt;
	&lt;td&gt;108&lt;/td&gt;
	&lt;td&gt;144&lt;/td&gt;
	&lt;td&gt;36&lt;/td&gt;
	&lt;td&gt;36864&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;14&lt;/td&gt;
	&lt;td&gt;7168&lt;/td&gt;
	&lt;td&gt;896&lt;/td&gt;
	&lt;td&gt;147&lt;/td&gt;
	&lt;td&gt;196&lt;/td&gt;
	&lt;td&gt;49&lt;/td&gt;
	&lt;td&gt;50176&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;16&lt;/td&gt;
	&lt;td&gt;8192&lt;/td&gt;
	&lt;td&gt;1024&lt;/td&gt;
	&lt;td&gt;192&lt;/td&gt;
	&lt;td&gt;256&lt;/td&gt;
	&lt;td&gt;64&lt;/td&gt;
	&lt;td&gt;65536&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;18&lt;/td&gt;
	&lt;td&gt;9216&lt;/td&gt;
	&lt;td&gt;1152&lt;/td&gt;
	&lt;td&gt;243&lt;/td&gt;
	&lt;td&gt;324&lt;/td&gt;
	&lt;td&gt;81&lt;/td&gt;
	&lt;td&gt;82944&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;20&lt;/td&gt;
	&lt;td&gt;10240&lt;/td&gt;
	&lt;td&gt;1280&lt;/td&gt;
	&lt;td&gt;300&lt;/td&gt;
	&lt;td&gt;400&lt;/td&gt;
	&lt;td&gt;100&lt;/td&gt;
	&lt;td&gt;102400&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;22&lt;/td&gt;
	&lt;td&gt;11264&lt;/td&gt;
	&lt;td&gt;1408&lt;/td&gt;
	&lt;td&gt;363&lt;/td&gt;
	&lt;td&gt;484&lt;/td&gt;
	&lt;td&gt;121&lt;/td&gt;
	&lt;td&gt;123904&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;24&lt;/td&gt;
	&lt;td&gt;12288&lt;/td&gt;
	&lt;td&gt;1536&lt;/td&gt;
	&lt;td&gt;432&lt;/td&gt;
	&lt;td&gt;576&lt;/td&gt;
	&lt;td&gt;144&lt;/td&gt;
	&lt;td&gt;147456&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;26&lt;/td&gt;
	&lt;td&gt;13312&lt;/td&gt;
	&lt;td&gt;1664&lt;/td&gt;
	&lt;td&gt;507&lt;/td&gt;
	&lt;td&gt;676&lt;/td&gt;
	&lt;td&gt;169&lt;/td&gt;
	&lt;td&gt;173056&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;28&lt;/td&gt;
	&lt;td&gt;14336&lt;/td&gt;
	&lt;td&gt;1792&lt;/td&gt;
	&lt;td&gt;588&lt;/td&gt;
	&lt;td&gt;784&lt;/td&gt;
	&lt;td&gt;196&lt;/td&gt;
	&lt;td&gt;200704&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;30&lt;/td&gt;
	&lt;td&gt;15360&lt;/td&gt;
	&lt;td&gt;1920&lt;/td&gt;
	&lt;td&gt;675&lt;/td&gt;
	&lt;td&gt;900&lt;/td&gt;
	&lt;td&gt;225&lt;/td&gt;
	&lt;td&gt;230400&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;32&lt;/td&gt;
	&lt;td&gt;16384&lt;/td&gt;
	&lt;td&gt;2048&lt;/td&gt;
	&lt;td&gt;768&lt;/td&gt;
	&lt;td&gt;1024&lt;/td&gt;
	&lt;td&gt;256&lt;/td&gt;
	&lt;td&gt;262144&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;34&lt;/td&gt;
	&lt;td&gt;17408&lt;/td&gt;
	&lt;td&gt;2176&lt;/td&gt;
	&lt;td&gt;867&lt;/td&gt;
	&lt;td&gt;1156&lt;/td&gt;
	&lt;td&gt;289&lt;/td&gt;
	&lt;td&gt;295936&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;36&lt;/td&gt;
	&lt;td&gt;18432&lt;/td&gt;
	&lt;td&gt;2304&lt;/td&gt;
	&lt;td&gt;972&lt;/td&gt;
	&lt;td&gt;1296&lt;/td&gt;
	&lt;td&gt;324&lt;/td&gt;
	&lt;td&gt;331776&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;38&lt;/td&gt;
	&lt;td&gt;19456&lt;/td&gt;
	&lt;td&gt;2432&lt;/td&gt;
	&lt;td&gt;1083&lt;/td&gt;
	&lt;td&gt;1444&lt;/td&gt;
	&lt;td&gt;361&lt;/td&gt;
	&lt;td&gt;369664&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;40&lt;/td&gt;
	&lt;td&gt;20480&lt;/td&gt;
	&lt;td&gt;2560&lt;/td&gt;
	&lt;td&gt;1200&lt;/td&gt;
	&lt;td&gt;1600&lt;/td&gt;
	&lt;td&gt;400&lt;/td&gt;
	&lt;td&gt;409600&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;42&lt;/td&gt;
	&lt;td&gt;21504&lt;/td&gt;
	&lt;td&gt;2688&lt;/td&gt;
	&lt;td&gt;1323&lt;/td&gt;
	&lt;td&gt;1764&lt;/td&gt;
	&lt;td&gt;441&lt;/td&gt;
	&lt;td&gt;451584&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;44&lt;/td&gt;
	&lt;td&gt;22528&lt;/td&gt;
	&lt;td&gt;2816&lt;/td&gt;
	&lt;td&gt;1452&lt;/td&gt;
	&lt;td&gt;1936&lt;/td&gt;
	&lt;td&gt;484&lt;/td&gt;
	&lt;td&gt;495616&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;46&lt;/td&gt;
	&lt;td&gt;23552&lt;/td&gt;
	&lt;td&gt;2944&lt;/td&gt;
	&lt;td&gt;1587&lt;/td&gt;
	&lt;td&gt;2116&lt;/td&gt;
	&lt;td&gt;529&lt;/td&gt;
	&lt;td&gt;541696&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;48&lt;/td&gt;
	&lt;td&gt;24576&lt;/td&gt;
	&lt;td&gt;3072&lt;/td&gt;
	&lt;td&gt;1728&lt;/td&gt;
	&lt;td&gt;2304&lt;/td&gt;
	&lt;td&gt;576&lt;/td&gt;
	&lt;td&gt;589824&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;50&lt;/td&gt;
	&lt;td&gt;25600&lt;/td&gt;
	&lt;td&gt;3200&lt;/td&gt;
	&lt;td&gt;1875&lt;/td&gt;
	&lt;td&gt;2500&lt;/td&gt;
	&lt;td&gt;625&lt;/td&gt;
	&lt;td&gt;640000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;52&lt;/td&gt;
	&lt;td&gt;26624&lt;/td&gt;
	&lt;td&gt;3328&lt;/td&gt;
	&lt;td&gt;2028&lt;/td&gt;
	&lt;td&gt;2704&lt;/td&gt;
	&lt;td&gt;676&lt;/td&gt;
	&lt;td&gt;692224&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;54&lt;/td&gt;
	&lt;td&gt;27648&lt;/td&gt;
	&lt;td&gt;3456&lt;/td&gt;
	&lt;td&gt;2187&lt;/td&gt;
	&lt;td&gt;2916&lt;/td&gt;
	&lt;td&gt;729&lt;/td&gt;
	&lt;td&gt;746496&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;56&lt;/td&gt;
	&lt;td&gt;28672&lt;/td&gt;
	&lt;td&gt;3584&lt;/td&gt;
	&lt;td&gt;2352&lt;/td&gt;
	&lt;td&gt;3136&lt;/td&gt;
	&lt;td&gt;784&lt;/td&gt;
	&lt;td&gt;802816&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;58&lt;/td&gt;
	&lt;td&gt;29696&lt;/td&gt;
	&lt;td&gt;3712&lt;/td&gt;
	&lt;td&gt;2523&lt;/td&gt;
	&lt;td&gt;3364&lt;/td&gt;
	&lt;td&gt;841&lt;/td&gt;
	&lt;td&gt;861184&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;60&lt;/td&gt;
	&lt;td&gt;30720&lt;/td&gt;
	&lt;td&gt;3840&lt;/td&gt;
	&lt;td&gt;2700&lt;/td&gt;
	&lt;td&gt;3600&lt;/td&gt;
	&lt;td&gt;900&lt;/td&gt;
	&lt;td&gt;921600&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;62&lt;/td&gt;
	&lt;td&gt;31744&lt;/td&gt;
	&lt;td&gt;3968&lt;/td&gt;
	&lt;td&gt;2883&lt;/td&gt;
	&lt;td&gt;3844&lt;/td&gt;
	&lt;td&gt;961&lt;/td&gt;
	&lt;td&gt;984064&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;64&lt;/td&gt;
	&lt;td&gt;32768&lt;/td&gt;
	&lt;td&gt;4096&lt;/td&gt;
	&lt;td&gt;3072&lt;/td&gt;
	&lt;td&gt;4096&lt;/td&gt;
	&lt;td&gt;1024&lt;/td&gt;
	&lt;td&gt;1048576&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
[[Category:Map_making]]</text>
      <sha1>kohl9mrqcx0urs4w143587kdwti771u</sha1>
    </revision>
  </page>
  <page>
    <title>Map Control</title>
    <ns>0</ns>
    <id>1422</id>
    <revision>
      <id>11238</id>
      <parentid>6158</parentid>
      <timestamp>2006-09-22T17:33:07Z</timestamp>
      <contributor>
        <username>Redstar</username>
        <id>6</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2047">Always a part of well-balanced RTS games, Map Control (commonly referred to as MC) is the amount of control you exert on the map. At the simplest level this can refer to the amount of map that you have expanded to cover, to access a greater resource base. However, there can also exist &quot;controlled&quot; territory that has not yet been expanded into - an area covered by an air force, for example. Converting Controlled territory to Expansion territory effectively is one of the cornerstones of effective play.

Map Control is '''ESSENTIAL''' in almost all maps/mods, however it cannot be the sole method of achieving victory, considering the economic infeasibility of maintaining it inviolate of assault.

The conundrum is this- if left unchallenged, economic growth is exponential with territory acquisition. The more you expand, the more resource points you control, and the more room you have to build up your on resource or logistics points. However, the more you expand, the more thinly your defenses are spread to protect against raiding. Your opponent also has more choices for targets to mobilize an assault against, making the &quot;guessing game&quot; elements of this strategy more difficult for the expanding player. Expansion alone is not a winning strategy - you must combine expansion with good use of the additional resources, flexible force control that can react quickly and effectively to widespread attacks, and plenty of scouting so you can keep up with where and when your opponent is planning an attack.

A common mistake of the beginner player is to expand too slowly, and be crushed by the superior military machine of his opponent. A common mistake of the intermediate player is to expand too quickly and leave a vital hole in his defenses that the enemy can exploit. Mastering the rate of expansion, which varies from map to map and mod to mod, is quite possibly the most difficult and most rewarding strategic problem a player has to face.


''' [[Strategy_and_Tactics|&lt;- Back to Strategy and Tactics page]]'''

[[Category:Strategy]]</text>
      <sha1>7xwub6waj66kuskh00thrgicfiqjt2l</sha1>
    </revision>
  </page>
  <page>
    <title>Map Making:SMD</title>
    <ns>0</ns>
    <id>3664</id>
    <redirect title="Mapdev:SMD" />
    <revision>
      <id>28919</id>
      <timestamp>2014-10-19T08:57:56Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>Flozi moved page [[Map Making:SMD]] to [[Mapdev:SMD]]: already an Enetheru page using templates</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="24">#REDIRECT [[Mapdev:SMD]]</text>
      <sha1>tud2nxmzzcb9a4gf52q4c7eo9s4m9ec</sha1>
    </revision>
  </page>
  <page>
    <title>Map Making: Feature Placer</title>
    <ns>0</ns>
    <id>3228</id>
    <revision>
      <id>27055</id>
      <parentid>27054</parentid>
      <timestamp>2013-05-08T13:10:17Z</timestamp>
      <contributor>
        <username>Forboding angel</username>
        <id>2578</id>
      </contributor>
      <comment>/* Feature Placer */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1736">{{FIXME}} needs updating to use the information in [http://springrts.com/phpbb/viewtopic.php?f=13&amp;t=29559 thread] about seperation of feature placer
= Feature Placer =

At this point, it is very strongly recommended that you grab Spring Features. Spring features is an archive that contains all the map features ever made for spring mapping. The total number is somewhere around 500 features, so it will give you quite a bit of power when it comes time to spice up your map.

Spring Features is available via the rapid tag: spring-features:stable

Feature placer is available for use via the rapid tag: feature-placer:test

You can use pr-downloader to get the latest version, either by using pr-downlaoder in the command line, or using Forboding Angel's pr-downloader menu ( http://goo.gl/kGJBx - Extract to spring folder, next to pr-downloader.exe (Windows only) ).

= Using Feature Placer =

When the spring starts up you will be presented with a tree that is sparkling green. Select it and you will have the option to build an entire host of features. There are also placement options on the menu such as &quot;Jitter&quot; and &quot;Clustering&quot;, etc. Set these as desired.

== Exporting the Feature List ==

Simple click the &quot;export set.lua&quot; button. Then, look in your spring folder, under maps, and look for the file &lt;yourmapname.lua&gt;. Once you have verified that the file was written, you may go ahead and close the game.

= Adding the Feature List to your map =

Open &lt;yourmapname.lua&gt; in a text editor and copy the entire contents. Then navigate to

mapcontainer.sdd/mapconfig/featureplacer/set.lua

Open up set.lua in a text editor, and paste the contents of &lt;yourmapname.lua&gt;t into it. 

&lt;br/&gt;&lt;br/&gt;

[[Category:Map making|Map_making]] &lt;br/&gt;</text>
      <sha1>fzwk3k1f2uxhhopkda5f48o1yh6yw6w</sha1>
    </revision>
  </page>
  <page>
    <title>Map Making:mapinfo.lua</title>
    <ns>0</ns>
    <id>3364</id>
    <redirect title="Mapdev:mapinfo.lua" />
    <revision>
      <id>25576</id>
      <timestamp>2012-12-14T05:17:25Z</timestamp>
      <contributor>
        <username>Enetheru</username>
        <id>2783</id>
      </contributor>
      <comment>Enetheru moved page [[Map Making:mapinfo.lua]] to [[Mapdev:mapinfo.lua]]: bring it in line with map wiki naming scheme :D</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="32">#REDIRECT [[Mapdev:mapinfo.lua]]</text>
      <sha1>iusqup0q1y9kcl4j4g7wqv0d64lbh9v</sha1>
    </revision>
  </page>
  <page>
    <title>Map Making Guide</title>
    <ns>0</ns>
    <id>3663</id>
    <redirect title="Tutorial:MapMakingGuide(aGorm)" />
    <revision>
      <id>28916</id>
      <timestamp>2014-10-19T08:33:10Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>Flozi moved page [[Map Making Guide]] to [[Tutorial:MapMakingGuide(aGorm)]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="44">#REDIRECT [[Tutorial:MapMakingGuide(aGorm)]]</text>
      <sha1>5fregkey3xjwv1v84swpmmqkgg7iv1p</sha1>
    </revision>
  </page>
  <page>
    <title>Map Making Guild</title>
    <ns>0</ns>
    <id>1068</id>
    <revision>
      <id>24003</id>
      <parentid>18944</parentid>
      <timestamp>2012-03-13T04:20:31Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>remove from map development category because of inactivity / clans deprecated</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1078">[[Engine_Development|Development]] &lt; [[Map_development|Map Development]] &lt; {{FULLPAGENAME}}

== The Map Making Guild! ==




After a Typo on aGorm's &quot;Map Making Guide&quot; (guess the typo), he decided that all mappers that are unfortunate enough not to have a clan should surly have one. And maybe he wanted his own...

So it was made, and there was much rejoicing! In aGorms room anyway!

Currently I havn't got of my backside and got anyone to join, but feel free to. The only requirment is that you must have made 1 (one) half decent map! (And if you add yourself to teh list I'll be sure to check you out and take you off if your not a mapper... beside's I'll knock up a homepage soon and then you'll have to go through me! Ha ha ha ha... coff)



== Current members: ==
===aGorm===
*Acid Bridge
*Acid Quadratic
*Desert Dunes
*Core Pyramid
*Volcano ISland
*Tree Screenshot (this surely counts?)

===Weaver===
*Death Valley 
*PCB 
*Ashaf Plateau
*Little Brook
*Hell's Teeth
*Green Fields

===WiREd===
*2 VaLLeys
*Rush Hour (OTA Port)
*more new maps in progress
[[Category:Clans]]</text>
      <sha1>mmgcmhp4o1cn5yh72fbzjytebxedg31</sha1>
    </revision>
  </page>
  <page>
    <title>Map Reviews</title>
    <ns>0</ns>
    <id>953</id>
    <revision>
      <id>19022</id>
      <parentid>16348</parentid>
      <timestamp>2010-03-13T18:10:29Z</timestamp>
      <contributor>
        <username>Koshi</username>
        <id>2371</id>
      </contributor>
      <comment>fix category</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="13495">If anyone else wants to do more work on this, it might be useful to have the maps sorted by size.

==Normal Maps==

===2 Lakes===

Peter: a nice 1v1 map.  3 mex spots near each start location give a total of ~5 metal.  The underwater pair gives another ~5, and the peninsula spots also total ~5.  

The main asymmetry is that there is land above the water at the north end, and some kbots can walk through.  (as opposed to the south end, where the water goes all the way to the edge of the map.)  The water is deep and steep, so there are no spots to ford the river with non-amphibious units.  A transport will be important.  Some of the hills might be too steep for hovercraft, but they could come up the river.  Definitely an interesting map.

stats:
  size: 10x10;  Description=Made by CW83, Wind:1-25;
  Gravity=130; TidalStrength=10;  MaxMetal=0.8;  ExtractorRadius=60;

===2 Valleys===

Deci: Mostly an air map, as not even kbots can climb the plateus, mex radius is also too small for the metal layout.

===4 skulls===

Deci: Simply too much metal, otherwise a solid map. Try lowering the metal income on the hills to around 1.5 or lower.

FizWizz: Interesting map, funny metal but fun to play. However, the metalmap is really bright.

===Absolute Zero===

===Alaska===

AF: Needs stuff on the corner bits, preferrably custom snowy tree like features and other assortments, and a small open space, otherwise looks nice but a bit plain. 

===Altored Divide===
Diesel: One of my all-time favorites. This map is an absolute classic and provides excellent teamplay opportunities thanks to its clever design. Furthermore it is relatively fast-paced while not excessive with the metal. The texture isn't the best but who cares when it just plays so good!

BDCoolio: This map can get very porcy with all the steep ridges, but you only need to break through one entrance...

===Altored Earth===

Sehk: Big, brawny, with some interesting metal placement. Not very pretty, but often fun to play on. A more advanced version with more metal, better texture and better terrain could be an award winning map.

Snoob: Has to be played with shadows off, but it's good...though the textures are kind of lacking.

===Ancient Arena===

Deci: I have heard that this is an excellent FFA map, though I myself do not normally play FFA

Sehk: Very good for FFA and small but numerous team games (5 teams of 2 comes to mind) if completely dependent on the center. Height map issues may arise, and the water in the corners offers another viable few strategies most players shouldn't need to deal with.

===Anglo-Saxon Starfish===

Deci: Too much metal, otherwise a good combo of land and sea.

===Ashap Plateau===

--[[User:Egarwaen|Egarwaen]] 00:55, 16 Apr 2006 (W. Europe Daylight Time): Apparently an old favourite for 1v1s and 2v2s. The ground is covered with spires that really muck up most units' pathfinding and firing.


Pintle: Classic map for quick 2v2 or 1v1. Often boils down to a plasma duel or a commander face off over the centre. There is one spot south of the middle where a lab can be built

===Ashpen===

Gnome: Good, not too big and not too much metal. Wouldn't mind a slightly larger one with more topography, but it's still good. 

===Atlantic===

Deci: A strange map, as amphibious units are near useless due to mountainous shorelines and air and naval power rule the day. This is another map that would benefit from a larger mex radius.

===Azure Rampart===

Deci: Probably the most played FFA map, not much to say about this one.

Sehk: Not pretty, not very varied, but functional. Good for FFA, but with limited enjoyment and flexibility.

===battle range 36Mo===

2 to 8 or 16 players?
one of the bigest map ever relesead,
its an huge plain with little woods 
and accesibles moutains with rare big slopes ,
top are very strategic and really buildables,
its great map(without water)

===BlackStar===

Sehk: A rather fun five person FFA map, based around stars and pentagrams. It is pretty, but as it supports an odd number of players, it may never achieve widespread play. The water is viable, but unnecessary. Sharp mountains make effective static defenses difficult to implement in many areas, actually discouraging porcing until late game.

===Blue Planet===

Sehk: Water map, with central metal in the water and lesser metal on land. Once you have the center, it becomes far too easy, and the map doesn't have an incredible amount of replay value. Smaller than I would like.

===Brazilian Battlefield===

AF: Too many trees in one corner makes AI testing on this map unfair. Make a bigger version though, it's somewhat smaller than I would have liked.

--[[User:Egarwaen|Egarwaen]] 00:55, 16 Apr 2006 (W. Europe Daylight Time): Good for quick games.

--[[User:Erom|Erom]] The many mountains make this an easy map to porc heavily on. However, it is one of the few small maps, so if you are looking for a quick game, it is a good option.

===Bypass v1===

Peter: 6 player north vs. south map.  Each player gets 6 mex spots that each give ~2.6, and there's more metal in the middle.  So too much metal for many fewer players.  4 geo vents, two near the north and two right next to each other in the southeast.  mostly flat (and no chokepoints or hills that you could really hide behind).  The highways are a nice feature:  kbots especially get a big speedup from it (movespeed is T/K/H/S = 1.9/1.6/1.4/1.4).  You should see a flea fly on it!  Strangely (since the tank multiplier is higher than the kbot multiplier) a peewee will outrun a flash on the road, but not on the normal ground everywhere else (1/1/1/1/).  Large kbots move well, too, esp. the big spider kbots.  The road is much harder (less deformable) than all the other terrain.  No water.

stats:
  size: 16x16;  Description=2 Highways through hilly terrain;
  MinWind=10; MaxWind=22;   MaxMetal=0.87; ExtractorRadius=44;
  Gravity=100;         MapHardness=1000;  (road: *2,  ground: *0.09, hill: *0.2)

===Caldera===

Deci: Basically a larger version of Ashpen

===Castles===

Deci: the ultimate seige map, I don't play this one much anymore, but it is still fun sometimes when the game doesn't slow down.

--[[User:Egarwaen|Egarwaen]] 00:55, 16 Apr 2006 (W. Europe Daylight Time): Massive porcfest.

2k4: HUGE metal in water

Targ Collective: Excellent siege map, although the 'Lake of Gold' has less tactical value than it could. Placing an even moderate metal distribution over most of the map, including the grassy areas, allows players to expand resource operations over most of the map, where it could play better confined to the castles and lake solely to force confrontations.

===Cathralda V10===

--[[User:Egarwaen|Egarwaen]] 00:10, 25 Apr 2006 (W. Europe Daylight Time): A fun map. Wind is good but very unpredictable. Medium level of metal, quite spread-out. Easily-accessible geothermals, mostly near the center of the map. Rolling hills with some chokepoints, but too open to porc effectively. Vehicles seem to be able to climb all of the hills. The one problem is that it's a little hard to gauge hill heights in the default TA view.

===Cliff Down===

Deci: A good FFA map if the players start at the entrances to the canyon, the starts should probably be changed to reflect this

Gnome: Good metal layout, but it's so big that there's too much available. Also very easy to porc out on (secure your two chokepoints, dot the rest of your base with AA). The game I played on this one became a drawn out stalemate that lasted over three hours because it's simply too damn big. 

===Cliff Run===

Deci: too small to really play on.

Gnome: I disagree. It's good for a quick game, the action is quick and it really keeps you on your toes. The hills really add to the map. The trees are somewhat annoying, but area reclaim works.

--[[User:Egarwaen|Egarwaen]] 00:55, 16 Apr 2006 (W. Europe Daylight Time): Great fun for 1v1, though watch the water.

===Coast to Coast Remake===

BDCoolio: A fairly faithful reproduction of the OTA classic, CtC Remake is a rather small 1v1 at only 8 x 4 and doesn't have quite enough metal for a sea battle. Still, it is a fun map for tiny sea engagements. Might be better with some metal in the water, but then it wouldn't be a remake, now would it?

===CometCatcher and Green Comet===

Deci: one of the much-loved maps, it isn't my personal favorite, but it's a solid map.

Min3mat: Godlike! accept no substitutues!

Forboding Angel: Too damn flat. Heightmap needs to be redone badly.

--[[User:Egarwaen|Egarwaen]] 00:55, 16 Apr 2006 (W. Europe Daylight Time): Great maps, if a little flat. I prefer Green Comet for its left-vs-right setup, but the original's still great.

Sehk: Popular, but not a group I enjoy much.

===Core Pyramid===

Deci: A map with actual low metal, these are rare goodies

===CorrosivePits===

Deci: apparently there is a version 4 out for this map that I haven't played yet.

===Crossings_v4===

--[[User:Egarwaen|Egarwaen]] 20:09, 25 Apr 2006 (W. Europe Daylight Time): Fun &quot;push the middle&quot; map. Low metal near start locations, lots in the middle. Assaulting up the ramps is a little annoying at the end, but once you push the enemy out of the middle, you're practically guaranteed a win.

===Crystal-Harbor===

Targ Collective - A fun water map with perhaps just a bit too much metal. Metal spots are used throughout and the centre has a very high metal spot, which in itself accounts for at least half the metal on the map. South has an advantage in land (slight) and Geo spots (two extra), so the choice is a balanced if cramped East vs West, or an unbalanced yet easier teamwise North vs South.

If one team can consistently hold the centre, that team will gain a huge tactical advantage. Therefore, pummelling the centre with artillery if you lose it is advised.

All teams start on land, so the more durable aircraft are available. Specialist seaplanes, esp. torpedo launchers, should see plenty of use.

2k4: you might as well quit if you dont have the center on start

===Crystal-World===

Deci: Mex radius is far too small, it should be doubled or tripled at least.

===Desert Dunes===

Deci: too much metal, otherwise good

FizWizz: This map is Ace. The metal is much higher than a typical map, but I still wuvs it =)

===Dig Site===

===Egypt===

Sehk: Fairly realistic and fun to play, but rather imbalanced due to the placement of water. Metal is plentiful and gameplay is quick.

Diesel: Although not very fair this is a solid and enjoyable map that deserves more attention. It's all about quick expansion baby.

Pintle: &quot;Unfair&quot; comments don't seem to recognise the hilarity that can ensue on this map in a large FFA. One of my all time faves

===Epic===

===EuroGreen===

Forboding Angel: Honestly, it's ugly and a comm swapfest imo. Small maps are good if the are done correcty. Unfortunately this map does not have enough real chokepoints to be viable.

===EvergreenHaven===

--[[User:Egarwaen|Egarwaen]] 00:55, 16 Apr 2006 (W. Europe Daylight Time): Nice hilly map. Good balance between chokepoints and openness. Similar gameplay to GreenHaven.

===Greenhaven===

Deci: One of the popular maps of spring, somewhat rough terrain, while still allowing vehicles.

Peter: OTA-style metal spots each give 1.3.  No water, ground covered by bumps.
Start spots for 10 players.  There's metal and geo vents for each player.  Too resource-rich for small games.
stats:
  size: 16x16; Description=GreenHaven-V3 Classic TA Map Converted for TA Spring by GenBlood;
  Gravity=150;    MapHardness=200; MaxMetal=.32; ExtractorRadius=140; MinWind=8.3; MaxWind=17.4;

===Greenriver===

Min3mat: awesome. IMO the best water map out there

===Hamburger Hill===

Deci: Open-area tank warfare, barely deserves to be called a hill

===Hell's Pass===

Diesel: An excellent map that unfortunately does not get the attention it deserves. This map offers a good teamplay experience and excellent opportunity to strike behind enemy lines in most games. The importance of the middle is often overrated. Metal placement is fair.

===Hill Haven===

FizWizz: My favorite map of the River Dale set. It looks absolutely beautiful, it is simple, but it is not a plain map. It is balanced too, which is a little bit harder to say about the other maps in this series.

===Hills and Valleys===

Deci: a good vehicle and kbot map, I really don't know why this one isn't played more.

Diesel: A most excellent map that has all the elements of a good map and none of a bad one.

===Island in the Sun===

FizWizz: A good naval map, the only island-hopper besides Gods of War II remake, I wish I could see more maps like this on FU.

===Island Alpha===

Deci- decent 1v1 map

===Lava Highground===

Deci: extremely focused on the center, not sure if that's a good thing or a bad thing for this map

===Lava Rivers===

Deci: Only one land route is generally bad for gameplay

===Lowland Crossing===

BDCoolio: This 1v1 map has a good look to it - I like the mix of land/hills/water. Unfortunately, it's set up to be a major porc-fest with the sections of deep water in the middle. Of course, porcers will love it. I highly recommend it for new players due to its small size (6 x 8) and clearly defined chokepoints.

===Mars===

===Martian Desert===

Gnome: Decent for 1v1, probably a little too much metal for that a lot of the time though. Probably very good for 2v2. Not too big either. 

===Monopoly===
Snoob: Funny until you see the metal.

===MoonQ10
[[Category: Maps]]</text>
      <sha1>1wrewduhjq0izkpq4d9qhcpv93i59js</sha1>
    </revision>
  </page>
  <page>
    <title>Map development</title>
    <ns>0</ns>
    <id>1456</id>
    <redirect title="Mapdev:Main" />
    <revision>
      <id>28315</id>
      <parentid>26055</parentid>
      <timestamp>2014-02-24T23:34:39Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>replace with Mapdev:Main,  for old content see User:Forboding_angel</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="25">#REDIRECT [[Mapdev:Main]]</text>
      <sha1>cqw4nrytd5qmuev9q86uv9qdacphw53</sha1>
    </revision>
  </page>
  <page>
    <title>Map reviews</title>
    <ns>0</ns>
    <id>954</id>
    <redirect title="Map Reviews" />
    <revision>
      <id>10791</id>
      <parentid>870</parentid>
      <timestamp>2005-09-07T03:56:09Z</timestamp>
      <contributor>
        <username>Sinbadev</username>
        <id>7</id>
      </contributor>
      <minor/>
      <comment>redirecting redirects</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="25">#REDIRECT [[Map_Reviews]]</text>
      <sha1>fcg6my5n8zva59fns7porhudmmk8fwg</sha1>
    </revision>
  </page>
  <page>
    <title>Mapcomponents: feature map</title>
    <ns>0</ns>
    <id>3223</id>
    <revision>
      <id>28980</id>
      <parentid>26033</parentid>
      <timestamp>2014-10-27T23:00:47Z</timestamp>
      <contributor>
        <username>Enetheru</username>
        <id>2783</id>
      </contributor>
      <minor/>
      <comment>delete due to duplicate info.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1224">{{delete}}
&lt;big&gt;&lt;span class=&quot;warning&quot;&gt;Thankfully, features can now be placed via LUA, ingame and in realtime using [[Map_Making:_Feature_Placer|FeaturePlacer]].&lt;/span&gt;&lt;/big&gt;

= Feature Map =

&lt;code&gt;'''Feature Map dimensions are Texture Map size / 8. In other words, if your texture map is 8192x8192 (16x16), 8192 / 8 = 1024x1024'''&lt;/code&gt;

Feature maps used to be quite complicated, but all that changed with the advent of Smoth's FeaturePlacer (short featuremap history below).

Now featuremaps are use simply for the purpose of placing grass. Grass coverage is defined by blue pixels on the feature map. The more blue the pixel is (the closer to blue 255 it is), the thicker grass will be at that location. Grass is entirely optional, but can be customized via map parameters and adds a nice touch to your map.



Example Feature Map:

[[File:examplefeature.jpg]]

== A brief history of featuremaps ==

Feature maps were (and still are) a single RGB image where features such as grass, geothermal vents and trees, as well as structures, etc were &quot;placed&quot; using pixels on the image. This method was extremely imprecise and involved recompiling the map many times in order to simply move a tree from one location to another.</text>
      <sha1>9qe363b96dlup6dpwfucfmqaf8oya2e</sha1>
    </revision>
  </page>
  <page>
    <title>Mapcomponents: heightmap</title>
    <ns>0</ns>
    <id>3221</id>
    <revision>
      <id>28979</id>
      <parentid>26529</parentid>
      <timestamp>2014-10-27T23:00:12Z</timestamp>
      <contributor>
        <username>Enetheru</username>
        <id>2783</id>
      </contributor>
      <minor/>
      <comment>delete due to duplicate info</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1118">{{delete}}
= Heightmap =

&lt;code&gt;'''Height Maps are Texture Map size / 8 + 1 pixel. In other words, if your texture map is 8192x8192 (16x16), 8192 / 8 + 1 = 1025x1025'''&lt;/code&gt;

You will need a good image editing program to make heightmaps. Many of the aforementioned terrain generation programs will also generate heightmaps as well, but you can draw them by hand. They can be either 8bit or 16bit greyscale PNG. If you have photoshop or the gimp, you can use these programs to help you create your heightmap.



Here is an example of a 16bit heightmap:

[[File:Heightmapexample.png]]

Heightmaps work upon the idea of height according to color values. Black is the lowest, white is the heighest. In spring mapping, the waterline is defined by a negative height value. In other words, you define the heights of the map, &amp;nbsp;anything below 0 is under water. So on this heightmap, you might use -50 for the lowest value and 300 for the highest height value. The aforementioned tool &quot;Mapconv Gui (a.k.a Das Bruce's MapConv Gui) has a waterline calculator that will help you calculate the correct waterline for your map.</text>
      <sha1>c07z5n8k2l5v4mye76wqs5upvov4xn9</sha1>
    </revision>
  </page>
  <page>
    <title>Mapcomponents: metal map</title>
    <ns>0</ns>
    <id>3222</id>
    <revision>
      <id>28978</id>
      <parentid>26530</parentid>
      <timestamp>2014-10-27T22:59:30Z</timestamp>
      <contributor>
        <username>Enetheru</username>
        <id>2783</id>
      </contributor>
      <minor/>
      <comment>delete due to duplicate info</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1747">{{delete}}
= Metal Map =

&lt;code&gt;'''Metal Map dimensions are Texture Map size / 8 + 1 pixel. In other words, if your texture map is 8192x8192 (16x16), 8192 / 8 + 1 = 1025x1025'''&lt;/code&gt;


In Spring, metal maps are used for the built in resourcing scheme (Metal/Energy). You do not have to use this scheme. In fact, there are several games for Spring who use their own resourcing systems added on using Lua. If you are creating this map for one of those games, a metal map is not strictly necessary (in other words you can just us a black image), however, it is always nice if you can make your maps as compatible with other games as possible, but this is a choice left entirely up to you.


Metalmaps show metal areas on a map based upon the amount of red on the image (make sure red is the only color used!). On this map you can see that the &quot;Patch Technique&quot; is used, which is pretty common among spring maps, but you are not limited to using this scheme.


If you do want perfect metal patches, use a 6x6 pixel pencil in your image editor with a red value of 255. This combined with setting the &quot;MaxMetal&quot; tag in the definitions to 1, will result in a perfect 2.0 metal generation per patch (using Balanaced Annihilation values). The game use isn't the point however. The fact is that if you can predict how much each spot will output (typically), using the &quot;MaxMetal&quot; parameter, you can easily scale the values up and down. As an example of another extreme, Evolution RTS dictates that all metal patches will output 0.5 metal regardless of the map settings. So whether you need to put a lot of thought into your metal map values depends entirely upon the game for which you are creating the map.



Example Metal Map:

[[File:Examplemetal.jpg]]</text>
      <sha1>5p4asxiazc3t5n5hij335juwqzfq9ea</sha1>
    </revision>
  </page>
  <page>
    <title>Mapcomponents: texture</title>
    <ns>0</ns>
    <id>3220</id>
    <revision>
      <id>28977</id>
      <parentid>25417</parentid>
      <timestamp>2014-10-27T22:58:53Z</timestamp>
      <contributor>
        <username>Enetheru</username>
        <id>2783</id>
      </contributor>
      <minor/>
      <comment>delete due to duplicate info</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="637">{{delete}}
= Texture Map =

&lt;code&gt;'''Texture map size is related in pixels and in spring map size. 2x2 MapSquares in spring are equal to 1024x1024 Pixels. Texture maps mus be in multiples of 2. I.E. 2x2, 6x10, 12x16, 16x16, etc. No odd sizes are allowed (Example: 15x10).'''&lt;/code&gt;

This guide assumes that you understand how to make a texture map and it also assumes that you know how to use terrain generation software.

Commonly used terrain generation programs are:

Spring Map Edit (Does not work on 64bit machines)

L3DT

WorldMachine

Bryce3D

Carrara



Example Texture Map (generated by Carrara):

[[File:exampletexturemap.jpg]]</text>
      <sha1>od4ku61s4sdzu8puewpunhwyywxlhhx</sha1>
    </revision>
  </page>
  <page>
    <title>Mapdeconv</title>
    <ns>0</ns>
    <id>3193</id>
    <revision>
      <id>29736</id>
      <parentid>29735</parentid>
      <timestamp>2015-11-10T20:12:04Z</timestamp>
      <contributor>
        <username>Beherith</username>
        <id>2441</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="568">mapdeconv is a decompiler for SMF/SMT maps.

To use it, unzip the sd7 spring map file. For example:
Code:
7z e SmallDivide.sd7
mapdeconv.exe SmallDivide.smf

If all goes well, it will output three files:

heightmap16bit.raw
metalmap.bmp
texture.bmp

{{Caution|This decompiler will not output all information needed to recompile the map!}}

Download: http://mapc.googlecode.com/files/mapdeconv.zip

Source Code: http://code.google.com/p/mapc/source/browse/#svn/trunk/mapdeconv

Forum Thread: http://springrts.com/phpbb/viewtopic.php?f=13&amp;t=18562

[[Category:Map Tools]]</text>
      <sha1>846y0ikd3cw80lo6mlxyvv11aij68h0</sha1>
    </revision>
  </page>
  <page>
    <title>Mapdev:Howto skybox</title>
    <ns>0</ns>
    <id>2116</id>
    <revision>
      <id>26711</id>
      <parentid>25991</parentid>
      <timestamp>2013-03-20T20:13:38Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>1cat</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3859">= Skybox Information =
Skyboxes are created with a series of 6 separate images which form what we call a cube map. Below is an example of the skybox images.
&lt;center&gt;
{| class=&quot;wikitable&quot;
| [[Image:Skyboxsimple.gif|center|this is what we call a cube cross]]
|-
! Cube Cross Example
|}&lt;/center&gt;

You will be using six individual images. Each image represents a different face on an imaginary cube. Each face is applied to the cube that surrounds the map. 
&lt;center&gt;
{| class=&quot;wikitable&quot; 
| [[Image:Sky1.gif|center|see how each side of the cube is it's own image]]
|-
! Each side of the cube is a separate image
|}&lt;/center&gt;

= Skybox creation =
== Creating your 6 textures ==
You will need six images representing each side of your skybox. I will not go into any specific method of construction. There are tutorials out there for that. Just remember you will need 6 textures, front, back, left side, right side, top and bottom.

== Creating your dds using the nvidia dds utilities ==
=== Linux Instructions ===
Compile the six images with this command:
&lt;code&gt;&lt;pre&gt;nvassemmble  -cube left.png right.png up.png down.png front.png back.png&lt;/pre&gt;&lt;/code&gt;

=== Windows Instructions ===
You will need these utilities from Nvidia's website: [http://developer.nvidia.com/object/dds_utilities_legacy.html NVIDIA Texture Tools]

Once you have downloaded and installed the tools you will need to created 2 files:
* '''Compiledds.bat''', and
* '''cubemapfile.lst'''

Inside of '''compiledds.bat''' type in:
&lt;code&gt;&lt;pre&gt;nvdxt -cubeMap -list cubemapfile.lst  -output cubemap.dds
pause&lt;/pre&gt;&lt;/code&gt;

This will compile your skybox to the name '''cubemap.dds''', feel free to change the name. Also, the pause command will stop the the batch file and force it to wait before it closes, this will allow you to see any errors that may or may not occur.

Inside of '''cubemapfile.lst''' type in:
&lt;code&gt;&lt;pre&gt;left.jpg
right.jpg
top.jpg
bottom.jpg
front.jpg
back.jpg
&lt;/pre&gt;&lt;/code&gt;

The .dds file created should be put in the '''maps/''' directory with your maps .smd, .smf and .smt files.

= Skybox notes =

Do not do these:

Sizes that are not to the power of two. ATI cards have problems with sizes that are not a power of two. Recommended sizes are: '''256X256''', '''512X512''' or '''1024x1024'''.

Note: the batch will export a DXT5 or something like that and spring has an issue with the newest dds stuff. I will update the command for you gents soon. I thought I already had... my bad.

--[[User:Smoth|Smoth]] 09:24, 25 Apr 2007 (CEST)

If you have problems with nvdxt:

You can also create dds textures using the Texture Tool found in the Microsoft DirectX SDK.

Although it is quite a large download it is worth while if you are serioues about making decent maps.

These instruction may not be the best however they have been proven to work with some success.

To create your cube map first open the DirectX Texture Tool. Go to File and select New Texture. Select Cubemap texture. Set the Width and Height as a power of two and leave the MipMap Levels at 1.

The Surface format should be 32bit X8R8G8B8. It may be possible to use other formats for example 24Bit and use less space. If you want to try that you will have to experiment. You can now press OK.

Go to file and select Open Onto This Cubemap Face. Select the image file you want to use for that face. You can select most common image formats such as jpg, bmp, png, etc. The image that you open should be the same width and height as you entered when creating the cubemap.

Now you have done one face and can do the next. To change face go to the View menu, the Cube Map View submenu and select the next face in the list. Open the image you want onto this face as you did before.

Keep doing this until you have opened an image onto every face, then save the file.

You now have a sky-box.

-Orakio

[[Category:Map Dev]]</text>
      <sha1>tg2oo0aldaabk0nfi13111ixb51sx9m</sha1>
    </revision>
  </page>
  <page>
    <title>Mapdev:Main</title>
    <ns>0</ns>
    <id>3365</id>
    <revision>
      <id>30428</id>
      <parentid>29952</parentid>
      <timestamp>2017-09-12T20:32:57Z</timestamp>
      <contributor>
        <username>The yak</username>
        <id>2888</id>
      </contributor>
      <comment>Added beherith DNTS pack to mapping add ons, removed outdated Toolbox</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6489">= Map Development =
Maps are the fields on which the battles are fought, made with the implicit contract that they shall not alter game mechanics. They are made up of images and text files which describe the environment and its features, such as height, colour, background, details features, atmosphere and lighting etc. These images and text files are then compressed into a 7zip archive for distribution.



&lt;center&gt;
{| class=&quot;wikitable&quot;
|+In-Game Screenshot
|[[File:Screen00364.jpg|640px]]
|}&lt;/center&gt;

= Beginners Tutorial =
This beginners tutorial is split into three parts, the basic stuff, the more advanced basic stuff, and how to compile and create a map archive for distribution. It is intended to get you started, when you are comfortable with the concepts, please look over the technical documentation to further your knowledge.
* [[Mapdev:Tutorial_Simple|Stage 1]]
* [[Mapdev:Tutorial_Intermediate|Stage 2]]
* [[Mapdev:Tutorial_Finalizing|Finalizing]]

= Blueprint =
Due to the amount of boiler plate files needed to create a fairly feature complete map, [[User:Jk|Jk]] has created a blueprint map to get things started
* [https://github.com/jk3064/Map-Blueprint/archive/master.zip Link to blueprint zip]

= Technical Documentation =
; '''General'''
* [[Mapdev:mapinfo.lua|mapinfo.lua]]
* [[Mapdev:set.lua|set.lua]] - feature set
* [[Mapdev:SMT format|SMT format]]
* [[Mapdev:SMF format|SMF format]]
* [[Gamedev:Archives]]
* [[Mapdev:sounds]]
* [[Mapdev:performance]]
* [[springignore.txt]]


; '''Terrain Shading'''
* [[Mapdev:diffuse]]
* [[Mapdev:detail]]
* [[Mapdev:splatdetail]]
* [[Mapdev:splatdetailnormals]]
* [[Mapdev:specular]]
* [[Mapdev:normal]]
* [[Mapdev:parallax]]
* [[Mapdev:skyreflectmod]]
* [[Mapdev:lightemission]]

; '''Terrain Features'''
* [[Mapdev:height]]
* [[Mapdev:metal]]
* [[Mapdev:terraintype]]
* [[Mapdev:grass]]
* [[Mapdev:features]]
* [[Mapdev:water]]
* [[Mapdev:borders]]
* [[Mapdev:minimap]]

; '''Environment'''
* [[Mapdev:skybox]]
* [[Mapdev:lighting]]
* [[Mapdev:atmosphere]]

= Scripting =
* [[Mapdev:MapOptions]]
* [[Mapdev:LuaShaders]]
* [[Mapdev:Mutators]] [http://springrts.com/phpbb/viewtopic.php?f=13&amp;t=21808 forum discussion]

= Howto's =
* [[Mapdev:Howto_voidwater/space]]
* [[Mapdev:Howto_spring_features_v1]]
* [[Mapdev:Howto_skybox]]
* [[Mapdev:howto_height_blender|Making a height map with Blender]]

= Tools =
A big list of tools used in developing spring games and assets:
* [[Map,_Game,_And_Unit_Development_Programs]]

= Resources =
* [https://github.com/eronoobos/spring-metal-spot-resources Metal Spot Resources]

== Specific to Map Development ==
{| class=&quot;wikitable&quot; 
|+ Tools vs Platform
! Tool !! Windows !! Linux !! MacOS
|-
| [[MapConv]]
| style=&quot;background:green;text-align:center&quot;|  Yes
|-
| [[MapConvNG]]
| style=&quot;background:green;text-align:center&quot;|  Yes
| style=&quot;background:green;text-align:center&quot;|  Yes
|-
| [[Mapdeconv]]
| style=&quot;background:green;text-align:center&quot;|  Yes
|-
| [[smf_decompiler]]
| style=&quot;background:green;text-align:center&quot;|  Yes
| style=&quot;background:green;text-align:center&quot;|  Yes
| style=&quot;background:green;text-align:center&quot;|  Yes
|-
| Start Position Editor
| style=&quot;background:green;text-align:center&quot;|  [http://springfiles.com/spring/tools/mapping-tools Yes]
|-
| Das Bruce's Mapconv Frontend
| style=&quot;background:green;text-align:center&quot;|  [http://springfiles.com/spring/tools/mapping-tools Yes]
|-
| FrostRegen's [[Maps:SpringMapEdit|SpringMapEdit]]
| style=&quot;background:green;text-align:center&quot;|  yes
| style=&quot;background:green;text-align:center&quot;|  yes
| style=&quot;background:green;text-align:center&quot;|  yes
|-
| [https://github.com/enetheru/smf_tools/releases Enetheru's smf_tools]
| style=&quot;text-align:center&quot; |
| style=&quot;background:green;text-align:center&quot; | yes
|}

== Spring Add-Ons ==
* [[Map_Making:_Feature_Placer|FeaturePlacer]]
* [http://springfiles.com/spring/tools/spring-features Spring Features V1.0]
* [http://imolarpg.dyndns.org/stuff/nobiax_spring_dnts/nobiax_spring_dnts.7z Nobiax DNTS pack for Spring]

= Common Problems =
== Pink Map ==
Renaming the SMT file and not defining the new name in mapinfo.lua will result in a map with a pink texture. Also don't put any spaces in the name.

== Map doesn't show in spring after compressing with 7zip==
The most likely cause is that it was compressed using the solid archive option.

{{FIXME}}Add windows and MacOS solutions.

For linux the option &lt;code&gt;-ms=off&lt;/code&gt; needs to be given on the command line. eg.
: &lt;code&gt; 7z a -ms=off myarchivename.sd7 dem files I want to archive&lt;/code&gt;

== Flipped Images ==
Heightmap images compiled into map files are inverted. It is necessary to use the -i parameter of Mapconv to vertically flip the image so that it matches the texture.

== smt name defined in smf ==
The SMT file name is hardcoded in the SMF, and renaming the SMT used to cause pink map issues, but the SMT can now be manually defined in mapinfo.lua thereby bypassing the entire issue altogether.

= Map Development Wiki =
* [[Mapdev:WikiGuide|Mapdev Wiki Guide]]

= Deprecated but not Deleted =
We plan on integrating any and all useful knowledge from these pages into the rest of the wiki, they are kept here so that they are not hidden away.
== Full Guides For Map Making (Outdated) ==
The guides listed below are outdated and scheduled for archival.
*[[Create maps|aGorm's map creating Guide]]
*[[Map Making Guide|aGorms Ultimate Map Making Guide(unfinished)]]
*[[IceXuick Map Design Help|IceXuicks Map creating Guide]]
*[http://springrts.com/phpbb/viewtopic.php?t=3941 Forboding Angel's map creating Tutorial]
*[[Maps:Tutorial|Another tutorial from a designing point of view]]
*[[A Complete Map Making Tutorial|A Complete Map Making Tutorial (under construction)]]
*[[Runecrafter|Runecrafter's Map Tutorial]]
*[http://springrts.com/phpbb/viewtopic.php?f=13&amp;t=15390 Beherith's map creating tutorial using the World in Conflict map editor]

== Specific Guides (Extremely Outdated!) ==
The linked pages below are scheduled for archival.
*[[Maps:SMD|Spring Map Definition(smd) reference]]
*[[Maps:Compiling|Everything about Compiling your map]]
*[[MapsBalance|Some things about map balance]]
*[[MapSizes|Map sizes in pixels]] and memory information about map sizes
*[[Height Map Tutorial|RogerN's height map tutorial]]
*[[Create map texture with povray|Basic howto: create map texture with Povray]]

[[Spring_Features]] is an Archive which contains Stones, rocks, trees, and can be used for your map.

[[Category:Map Dev]]</text>
      <sha1>drtvz9a3p0vmt7ugn4zn0we5ckhggbd</sha1>
    </revision>
  </page>
  <page>
    <title>Mapdev:SMD</title>
    <ns>0</ns>
    <id>1049</id>
    <revision>
      <id>28918</id>
      <parentid>28917</parentid>
      <timestamp>2014-10-19T08:57:56Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>Flozi moved page [[Map Making:SMD]] to [[Mapdev:SMD]]: already an Enetheru page using templates</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="16999">{{deprecated|Use of SMD is deprecated, use [[Map_Making:mapinfo.lua|mapinfo.lua]] instead!}}
This page should only be used when dealing with old maps. new maps use
[[Map_Making:mapinfo.lua|mapinfo.lua]]
= Spring Map Definition (smd) Reference =
variables are organised as such:
{{tag|range=[valid range]|special=Required}}

==Source==
The engine source code which reads this file from the map is viewable here:

* {{sourcelink|file=rts/Map/MapInfo.cpp}} 
* {{sourcelink|file=rts/Map/MapParser.cpp}}

= General Formatting =
* All lines must end in a semicolon.
* Sections begin with a keyword wrapped in square brackets, and are wrapped in curly brackets
* Blank lines are allowed
* Comments are preceded by // anything following a comment marker is ignored
* Whitespace is ignored so you can tabulate your SMD to help the overall readability, and to show where sections begin and end.
* The names are not case sensitive

&lt;code&gt;&lt;pre&gt;// Example (this is a comment)
[MAP]
{
   ...
   // this is a comment
   [subsection]
   {
      ...
      ThisIsAValue = something;
      AnotherValue = somethingelse; // another comment
      ...
   }
   ...
}&lt;/pre&gt;&lt;/code&gt;

= Sections =
== MAP ==
The map section describes the basic options of the map.
&lt;code&gt;&lt;pre&gt;[MAP]
{
   // properties
   Description = &quot;mountainous whatever&quot;;
   AutoShowMetal = 1;
   DefaultOptions = 1;
   DetailTex = detailtex.bmp;
   ExtractorRadius = 400;
   Gravity = 130;
   MapHardness = 100;
   MaxMetal = 0.03;
   TidalStrength = 20;
   voidwater = 0;
   notdeformable = 0;
   SpecularTex = speculartex.tga;
   SplatDistrTex = splatdist.tga;
   SplatDetailTex = splattex.tga;
   GrassBladeTex = grassbladetex.tga;
   GrassShadingTex = grassshading.bmp;

   // subsections
   [SMF]
   {
      ...
   }
   [ATMOSPHERE]
   {
      ...
   }
   [WATER]
   {
      ...
   }
   [LIGHT]
   {
      ...
   }
   [TEAMx]
   {
      ...
   }
   [TERRAINTYPEx]
   {
      ...
   }
   [GRASS]
   {
      ...
   }
   [SPLATS]
   {
      ...
   }
}&lt;/pre&gt;&lt;/code&gt;

{{tag|name=Description|type=string|special=Required
|description=The description of the map that shows in the multiplayer battleroom}}

{{tag|name=AutoShowMetal|type=bool|range=[0|1]|default=1
|description=Defines wether the metal map (F4 mode) is shown automatically when a mex is queued for placement}}

{{tag|name=DefaultOptions|type=bool|range=[0|1]}}

{{tag|name=DetailTex|type=string|
|description=Specifies the detail texture for the map, for examples and a library, see this sticky thread: [[http://springrts.com/phpbb/viewtopic.php?f=56&amp;t=21565]]}}

{{tag|name=ExtractorRadius|type=float|range=[0-max]|default=500
|description=The radius of effect that a single extractor will extract from. If two radii intersect, both extractors will suffer from reduced output}}

{{tag|name=Gravity|type=float|range=[0.0-max]|default=130
|description=The force of gravity in units/sec^2}}

{{tag|name=MapHardness|type=float|default=100
|description=Defines how much a map will deform from impacts. Higher values mean less deformation, negative values will result in negative deformation (really funny looking)}}

{{tag|name=MaxMetal|type=float|range=[0.0-max]|default=0.02
|description=How much metal a map square with the maximum metal value gives}}

{{tag|name=TidalStrength|type=float|range=[0,max]|default=0
|description=The amount of energy which will be given by tidal generators}}

{{tag|name=voidwater|type=bool|range=[0|1]|default=0
|description=Voidwater means there will be no water plane, and all parts of the map under water will be completely transparent, to show the skybox through the map. For example, check Apophis_v2 : http://springrts.com/phpbb/viewtopic.php?f=13&amp;t=20684&amp;hilit=apophis}}

{{tag|name=notdeformable|type=bool|range=[0|1]|default=0
|description=Setting it to 1 means that no explosions can deform the map}}

{{tag|name=SpecularTex|type=string}}

{{tag|name=SplatDistrTex|type=string}}

{{tag|name=SplatDetailTex|type=string}}

{{tag|name=GrassBladeTex|type=string
|description=Specifies the texture to be used on the grass blades themselves. Green-yellow gradients make for some interesting effects. Defaults to the internally generated blade texture}}

{{tag|name=GrassShadingTex|type=string
|description=Specifies the color variation of the grass across the map. This defaults to the minimap, so the grass color can match the map color}}

== SMF ==
&lt;code&gt;&lt;pre&gt;[MAP]
{
   ...
   [SMF]
   {
      MinHeight = -100;
      MaxHeight = 100;
   }
   ...
}&lt;/pre&gt;&lt;/code&gt;
{{tag|name=MinHeight|type=float|default=0
|description=Overrides the minimum map height specified while compiling. Compile time height used if undefined}}

{{tag|name=MaxHeight|type=float|default=0
|description=Overrides the maximum map height specified while compiling. Compile time height used if undefined}}


== ATMOSPHERE ==
&lt;code&gt;&lt;pre&gt;[MAP]
{
   ...
   [ATMOSPHERE]
   {
      CloudColor = 0.9 0.9 0.9;
      CloudDensity = 0.25;
      FogColor = 0.7 0.7 0.8;
      FogStart = 0.48;
      MinWind = 1;
      MaxWind = 25;
      SkyBox = nebulus.dds;
      SkyColor = 0.1 0.15 0.7;
      SunColor = 1.0 1.0 1.0;
   }
   ...
}&lt;/pre&gt;&lt;/code&gt;
{{tag|name=CloudColor|type=rgb|default=1.0 1.0 1.0
|description=The color of the clouds. The values are in the order Red, Green, Blue}}

{{tag|name=CloudDensity|type=float|range=[0.0-max]|default=0.5
|description=The number of clouds in the sky. A percentage in decimal form, 0.0 to 1.0.}}

{{tag|name=FogColor|type=rgb|default=0.7 0.7 0.8
|description=The color of the fog and the infinite plane below the world. The values are in the order Red, Green, Blue. However, giving values higher than 1.0 will give brighter fog and less than 0.0 will give darker}}

{{tag|name=FogStart|type=float|default=0.1
|description=The distance from the camera at which the fog will start}}

{{tag|name=MinWind|type=float|range=[0.0-max]|default=5.0
|description=The minimum amount of energy the wind on the map will give}}

{{tag|name=MaxWind|type=float|range=[0.0-max]|default=25.0
|description=The maximum amount of energy the wind on the map will give}}

{{tag|name=SkyBox|type=string
|description=Specify a .dds skybox (also called skycube) for examples and resources see: [[http://springrts.com/phpbb/viewtopic.php?f=56&amp;t=11009]]}}

{{tag|name=SkyColor|type=rgb|default=0.1 0.15 0.7
|description=The color of the sky itself. The values are in the order Red, Green, Blue}}

{{tag|name=SunColor|type=rgb|default=1 1 1
|description=The color of the sun in the sky. The values are in the order Red, Green, Blue. This will also effect the size of the star. As the values increase (including over 1.0), the disc will get bigger; the inverse is also true}}

== LIGHT ==
&lt;code&gt;&lt;pre&gt;[MAP]
{
   ...
   [LIGHT]
   {
      GroundAmbientColor=0.6 0.6 0.6;
      GroundSunColor=0.9 0.9 0.9;
      GroundShadowDensity=0.6;
      GroundSpecularColor=0 0 0;
      UnitAmbientColor=0.6 0.6 0.6;
      UnitSunColor=0.93 0.93 0.93;
      UnitShadowDensity=0.8;
      UnitSpecularColor=0 0 0;
      SunDir=2 1 1;
   }
   ...
}&lt;/pre&gt;&lt;/code&gt;
{{tag|name=GroundAmbientColor|type=rgb|default=0.5 0.5 0.5
|description=The ambient (non-sun-lit) color of ground, grass, trees and other features. The values are in the order Red, Green, Blue}}

{{tag|name=GroundSunColor|type=rgb|default=0.5 0.5 0.5
|description=The color of ground where it is fully sun lit (added to GroundAmbientColor). The values are in the order Red, Green, Blue}}

{{tag|name=GroundShadowDensity|type=float|default=0.8
|description=How far from the non shadowed to the ambient color stuff in shadow will go}}

{{tag|name=GroundSpecularColor|type=rgb|default=0.1 0.1 0.1}}

{{tag|name=UnitAmbientColor|type=rgb|default=0.4 0.4 0.4
|description=The ambient (non-sun-lit) color of units and corpses. The values are in the order Red, Green, Blue}}

{{tag|name=UnitSunColor|type=rgb
|description=The color of units where they is fully sun lit (added to UnitAmbientColor). The color of units where they is fully sun lit (added to UnitAmbientColor). The values are in the order Red, Green, Blue}}

{{tag|name=UnitShadowDensity|type=float|default=0.8
|description=How far from the non shadowed to the ambient color stuff in shadow will go}}

{{tag|name=UnitSpecularColor|type=rgb|default=0.7 0.7 0.7}}

{{tag|name=SunDir|type=float[3]||default=0.0 1.0 2.0
|description=The direction of the sun, which is normalized by Spring. The Y-axis is up}}

== WATER ==
&lt;code&gt;&lt;pre&gt;[MAP]
{
   ...
   [WATER]
   {
      // basic options
      WaterSurfaceColor=0.3 0.3 0.4;
      WaterBaseColor=0.4 0.6 0.8;
      WaterAbsorb=0.004 0.004 0.002;
      WaterMinColor=0.1 0.1 0.3;
      WaterPlaneColor= 0.1 0.1 0.3;
      WaterDamage=0;

      // bump mapped Water Settings
      WaterSurfaceAlpha = 0.55;
      WaterDiffuseColor = 0.55 0.4 0.3;
      WaterSpecularColor = 0.55 0.4 0.3;
      WaterSpecularPower = 2.0;
      WaterSpecularFactor = 0.3;
      WaterAmbientFactor = 1.3;
      WaterDiffuseFactor = 0.3;
      WaterFresnelMin = 0.3;
      WaterFresnelMax = 0.8;
      WaterFresnelPower = 4;
      WaterReflectionDistortion = 0.1;
      WaterBlurBase = 2;
      WaterBlurExponent = 2;
      WaterPerlinStartFreq = 8;
      WaterPerlinLacunarity = 3;
      WaterPerlinAmplitude= 0.9
   }
   ...
}&lt;/pre&gt;&lt;/code&gt;
{{tag|name=WaterSurfaceColor|type=rgb|default=0.75 0.8 0.85
|description=The color of the water surface. The values are in the order Red, Green, Blue. Mostly affects the colors of the reflections off the top of the water. Has no effect on bump mapped water!}}

{{tag|name=WaterBaseColor|type=rgb|default=0.0 0.0 0.0
|description=The color of the water just beneath the surface plane. This is the starting color from which deeper waters will absorb more color. The values are in the order Red, Green, Blue}}

{{tag|name=WaterAbsorb|type=rgb|default=0.0 0.0 0.0
|description=How fast different colors (RGB in order) are absorbed by the water. Can be used to make the water look murky at deeper sections and so on. How this works: the waterabsorb value for the color channel gets multiplied by the depth of the water at a point, and this product gets subtracted from WaterBaseColor, until WaterMinColor is reached. Example: WaterAbsorb is 0.01, for the red channel, and we want to know how much red will be left in the water at a Spring elevation of -100, since 0.01*100= 1 , at this depth, there will be no more red component in the water, unless WaterMinColor is higher than 0 on the red channel}}

{{tag|name=WaterMinColor|type=rgb|default=0.0 0.0 0.0
|description=The smallest values the water will go down to due to WaterAbsorb}}

{{tag|name=WaterPlaneColor|type=rgb|default=0.0 0.4 0.0
|description=This set the color of the groundplane under the water outside the map boundaries}}

{{tag|name=WaterDamage|type=float|default=0.0
|description=Number of hit points per game frame (30 frames per second) a unit will be damaged if it is in the water}}

{{tag|name=WaterSurfaceAlpha|type=float|default=0.55
|description=Transparency of the water surface. 0 meaning almost fully transparent water plane(low amount of reflections visible), and 1 being nearly opaque (massive amount of reflections)}}

{{tag|name=WaterDiffuseColor|type=rgb
|description=This specifies the diffuse color of the water body. WARNING: use of this tag disables the effect of WaterAbsorb , in fact, this tag does nothing but disable WaterAbsorb. Avoid}}

{{tag|name=WaterSpecularColor|type=rgb|default=0.5 0.5 0.5}}

{{tag|name=WaterSpecularPower|type=float|default=20
|description=use of this tag disables the effect of WaterAbsorb}}

{{tag|name=WaterSpecularFactor|type=float|default=1.0}}

{{tag|name=WaterAmbientFactor|type=float|default=1.0}}

{{tag|name=WaterDiffuseFactor|type=float|default=1.0}}

{{tag|name=WaterFresnelMin|type=float|default=0.2}}

{{tag|name=WaterFresnelMax|type=float|default=0.3}}

{{tag|name=WaterFresnelPower|type=float|default=4.0}}

{{tag|name=WaterReflectionDistortion|type=float|default=1.0
|description=How much the surface should distort reflections that are cause by waves not being level: ergo it adds more choppyness to your reflections sensible from 0 to 20}}

{{tag|name=WaterBlurBase|type=float|default=2.0
|description=Something to do with blur, but it just seems to cause banding with values under 2 and corruption with values above 10}}

{{tag|name=WaterBlurExponent|type=float|default=1.5
|description=How much reflections on water surface should be blurred together with the water surface, lower values meaning clearer reflections, (0.2-5) Warning: above 5 seems to cause water corruption}}

{{tag|name=WaterPerlinStartFreq|type=float|default=8
|description=Wave sizes, smaller = big waves, sensible: [1,20] (influence the wave sizes)}}

{{tag|name=WaterPerlinLacunarity|type=float||default:3.0
|description=Defines the size of the perlin waves, small values being big waves ([0.2,5] is sensible)}}

{{tag|name=WaterPerlinAmplitude|type=float|default:0.9
|description=Base stillness of water surface, 0 is dead still, 1 is 'windy' .This doesnt affect the bump texture depth, besides the fact that this disables the bump texture when set to 0}}

== TEAMx ==
Is used to describe the starting positions of the players.
&lt;code&gt;&lt;pre&gt;[MAP]
{
   ...
   [TEAM0]
   {
      StartPosX=730;
      StartPosZ=821;
   }
   [TEAM1]
   {
      ...
   }
   [TEAMn]
   {
       ...
   }
   ...
}&lt;/pre&gt;&lt;/code&gt;
{{tag|name=StartPosX|type=int|range=[0-map width]|
|description=The X (east-west in the TA camera) coordinates on the map where the player will start}}

{{tag|name=StartPosZ|type=int|range=[0-map length]
|description=The Z (north-south in the TA camera) coordinates on the map where the player will start}}

== TERRAINTYPEx ==
Used to define different terrain types that exist on the map. The value starts at 0 and goes on for as many terrain types as you have, where X is the type number. Which terrain type goes where on the map is determined by the typemap when compiling the map. For example, if the typemap has an area of red 128, then the corresponding terraintype tag is [TERRAINTYPE128]
&lt;code&gt;&lt;pre&gt;[MAP]
{
   ...
   [TERRAINTYPE0]
   {
      name = my terrain type;
      hardness = 1;
      recievetracks = 0;
      tankmovespeed = 1;
      kbotmovespeed = 1;
      hovermovespeed = 1;
      shipmovespeed = 1;
   }
   [TERRAINTYPE1]
   {
      ...
   }
   [TERRAINTYPEn]
   {
      ...
   }
   ...
}&lt;/pre&gt;&lt;/code&gt;
{{tag|name=name|type=string
|description=A label for the terrain type}}

{{tag|name=hardness|type=float|range=[0.001-max]|default=1.0
|description=Used as a multiplier against the [MAP].MapHardness value. Can be used to make a particular terrain type softer or harder. A value of '1' will make it as hard as MapHardness, and 0.5 will make it half as hard}}

{{tag|name=recievetracks|type=bool|range=[0|1]|default=1
|description=Effects whether track decals will be placed on the ground from moving vehicles}}

{{tag|name=tankmovespeed|type=float|default=1.0
|description=Speed multiplier for tanks when travelling on the parent terrain type. A value of '1' is normal speed, 0.5 will make them travel at half speed on the parent terrain type. '''All move speeds are clamped to [0,2]'''}}

{{tag|name=kbotmovespeed|type=float|default=1.0
|description=Speed multiplier for Kbots when travelling on the parent terrain type. A value of '1' is normal speed, 0.5 will make them travel at half speed on the parent terrain type}}

{{tag|name=hovermovespeed|type=float|default=1.0
|description=Speed multiplier for hovercraft when travelling on the parent terrain type. A value of '1' is normal speed, 0.5 will make them travel at half speed on the parent terrain type}}

{{tag|name=shipmovespeed|type=float|default=1.0
|description=Speed multiplier for Ship when travelling on the parent terrain type. A value of '1' is normal speed, 0.5 will make them travel at half speed on the parent terrain type}}

== GRASS ==
&lt;code&gt;&lt;pre&gt;[MAP]
{
   ...
   [GRASS]
   {
      GrassBladeWaveScale = 1.0;
      GrassBladeWidth = 0.32;
      GrassBladeHeight = 4;
      GrassBladeAngle = 1.57;
   }
   ...
}&lt;/pre&gt;&lt;/code&gt;
{{tag|name=GrassBladeWaveScale|type=float|default=1.0
|description=Specifies how much the wind should effect grass blade movement, as well as the amplitude of the grass motion. Setting it to 0 will stop grass animation}}

{{tag|name=GrassBladeWidth|type=float|default=0.32
|description=Specifies the width of each blade of grass}}

{{tag|name=GrassBladeHeight|type=float|default=4.0
|description=Specifies the length of each blade of grass}}

{{tag|name=GrassBladeAngle|type=float|default=1.57
|description=Unit is radians. Specifies the curvature of each blade of grass. Zero means a completely straight blades of grass}}

== SPLATS ==
&lt;code&gt;&lt;pre&gt;[MAP]
{
   ...
   [SPLATS]
   {
      SplatTexScales = 1.0 1.0 1.0 1.0;
      SplatTexMults = 1.0 1.0 1.0 1.0;
   }
   ...
}&lt;/pre&gt;&lt;/code&gt;
{{tag|name=SplatTexScales|type=float[3]}} 

{{tag|name=SplatTexMults|type=float[3]}}
[[Category:Map Dev]]</text>
      <sha1>nieuifvus4biun2xbutwf4ns2yvjnge</sha1>
    </revision>
  </page>
  <page>
    <title>Mapdev:SMF format</title>
    <ns>0</ns>
    <id>3370</id>
    <revision>
      <id>28765</id>
      <parentid>28658</parentid>
      <timestamp>2014-10-03T06:53:58Z</timestamp>
      <contributor>
        <username>Funkencool</username>
        <id>2872</id>
      </contributor>
      <minor/>
      <comment>to match source code</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5007">= SMF(Spring Map File) Reference =
SMF is a binary format
* [https://github.com/spring/spring/blob/2e5bc43dc464ec27d6b880d105f0c618e07c4ff8/rts/Map/SMF/mapfile.h mapfile.h]
* [https://github.com/spring/spring/blob/2e5bc43dc464ec27d6b880d105f0c618e07c4ff8/rts/Map/SMF/SmfMapFile.cpp SmfMapFile.cpp]

== File location ==
maparchive.sd7/maps/mymapname.smf

== Data Map ==
* smu = spring map unit, the size you see when in the lobby. roughly between 2 and 64.
{| class=&quot;wikitable&quot; width=&quot;100%&quot;
|+ align=&quot;left&quot; | Header
! style=&quot;width: 20%&quot; | Bytes
! style=&quot;width: 20%&quot; | Type !! Description
|-
| 16 || &lt;code&gt;char[]&lt;/code&gt; || Magic number; &quot;spring map file\0&quot;
|-
| 4 || &lt;code&gt;int&lt;/code&gt; || Version number; &quot;1&quot;
|-
| 4 || &lt;code&gt;unsigned int&lt;/code&gt; || ID, should be as unique as possible.
|-
| 4 || &lt;code&gt;int&lt;/code&gt; || Width; smu * 64
|-
| 4 || &lt;code&gt;int&lt;/code&gt; || Length; smu * 64
|-
| 4 || &lt;code&gt;int&lt;/code&gt; || Square size; 8
|-
| 4 || &lt;code&gt;int&lt;/code&gt; || Texels per square size; 8
|-
| 4 || &lt;code&gt;int&lt;/code&gt; || Tile size; 32
|-
| 4 || &lt;code&gt;float&lt;/code&gt; || Depth/min height; 512 = 1*smu
|-
| 4 || &lt;code&gt;float&lt;/code&gt; || Height/max height; 512 = 1*smu
|-
| 4 || &lt;code&gt;int&lt;/code&gt; || Byte offset to start of height map
|-
| 4 || &lt;code&gt;int&lt;/code&gt; || Byte offset to start of type map
|-
| 4 || &lt;code&gt;int&lt;/code&gt; || Byte offset to start of tile index
|-
| 4 || &lt;code&gt;int&lt;/code&gt; || Byte offset to start of mini map
|-
| 4 || &lt;code&gt;int&lt;/code&gt; || Byte offset to start of metal map
|-
| 4 || &lt;code&gt;int&lt;/code&gt; || Byte offset to start of features map
|-
| 4 || &lt;code&gt;int&lt;/code&gt; || No of extra headers
|}

{| class=&quot;wikitable&quot; width=&quot;100%&quot;
|+ align=&quot;left&quot; | + Extra Headers
! style=&quot;width: 20%&quot; | Bytes
! style=&quot;width: 20%&quot; | Type !! Description
|-
| 4 || &lt;code&gt;int&lt;/code&gt; || Size of the header
|-
| 4 || &lt;code&gt;int&lt;/code&gt; || Type of header
|-
| * || * || Data of header
|}
* 
* 
* 
{| class=&quot;wikitable&quot; width=&quot;100%&quot;
|+ align=&quot;left&quot; | + Height Map
! style=&quot;width: 20%&quot; | Bytes
! style=&quot;width: 20%&quot; | Type !! Description
|-
| (width+1)*(length+1) || &lt;code&gt;unsigned short[]&lt;/code&gt; || Data for height map.
|}

{| class=&quot;wikitable&quot; width=&quot;100%&quot;
|+ align=&quot;left&quot; | + Type Map
! style=&quot;width: 20%&quot; | Bytes
! style=&quot;width: 20%&quot; | Type !! Description
|-
| (width/2)*(length/2) || &lt;code&gt;char[]&lt;/code&gt; || Data for type map.
|}

{| class=&quot;wikitable&quot; width=&quot;100%&quot;
|+ align=&quot;left&quot; | + Mini Map
! style=&quot;width: 20%&quot; | Bytes
! style=&quot;width: 20%&quot; | Type !! Description
|-
| 699048 || &lt;code&gt;char[]&lt;/code&gt; || raw DXT1 compressed 1024x1024 image.
|}

{| class=&quot;wikitable&quot; width=&quot;100%&quot;
|+ align=&quot;left&quot; | + Tile Index Header
! style=&quot;width: 20%&quot; | Bytes
! style=&quot;width: 20%&quot; | Type !! Description
|-
| 4 || &lt;code&gt;int&lt;/code&gt; || Number of tile files
|-
| 4 || &lt;code&gt;int&lt;/code&gt; || Total number of tiles in all files.
|}

{| class=&quot;wikitable&quot; width=&quot;100%&quot;
|+ align=&quot;left&quot; | + SMT File Infos
! style=&quot;width: 20%&quot; | Bytes
! style=&quot;width: 20%&quot; | Type !! Description
|-
| 4 || &lt;code&gt;int&lt;/code&gt; || Number of tiles in this file
|-
| size of filename || &lt;code&gt;char[]&lt;/code&gt; || The filename of the smt.
|}
* 
* 
*
{| class=&quot;wikitable&quot; width=&quot;100%&quot;
|+ align=&quot;left&quot; | + Tile Index
! style=&quot;width: 20%&quot; | Bytes
! style=&quot;width: 20%&quot; | Type !! Description
|-
| (width / 4) * (length / 4) || &lt;code&gt;int[]&lt;/code&gt; || Index numbers of tiles in SMT's
|}

{| class=&quot;wikitable&quot; width=&quot;100%&quot;
|+ align=&quot;left&quot; | + Metal Map
! style=&quot;width: 20%&quot; | Bytes
! style=&quot;width: 20%&quot; | Type !! Description
|-
| (width / 2) * (length / 2) || &lt;code&gt;char[]&lt;/code&gt; || Metal Density
|}

{| class=&quot;wikitable&quot; width=&quot;100%&quot;
|+ align=&quot;left&quot; | + Features Header
! style=&quot;width: 20%&quot; | Bytes
! style=&quot;width: 20%&quot; | Type !! Description
|-
| 4 || &lt;code&gt;int&lt;/code&gt; || Number of features
|-
| 4 || &lt;code&gt;int&lt;/code&gt; || Number of feature types
|-
| * || &lt;code&gt;char[]&lt;/code&gt; || List of feature names delimited by null
|}

{| class=&quot;wikitable&quot; width=&quot;100%&quot;
|+ align=&quot;left&quot; | + Features
! style=&quot;width: 20%&quot; | Bytes
! style=&quot;width: 20%&quot; | Type !! Description
|-
| 4 || &lt;code&gt;int&lt;/code&gt; || Type of feature, corresponds with feature name list.
|-
| 4 || &lt;code&gt;float&lt;/code&gt; || X Position (along the width of the map)
|-
| 4 || &lt;code&gt;float&lt;/code&gt; || Y Position (Up into the sky)
|-
| 4 || &lt;code&gt;float&lt;/code&gt; || Z Position (along the length of the map)
|-
| 4 || &lt;code&gt;float&lt;/code&gt; || rotation, not sure of scale
|-
| 4 || &lt;code&gt;float&lt;/code&gt; || relative size (not implemented); 1
|}
* 
* 
*

== Optional Extra Headers &amp; data ==
{| class=&quot;wikitable&quot; width=&quot;100%&quot;
|+ align=&quot;left&quot; | + Grass Extra header
! style=&quot;width: 20%&quot; | Bytes
! style=&quot;width: 20%&quot; | Type !! Description
|-
| 4 || &lt;code&gt;int&lt;/code&gt; || Size of the header; 12
|-
| 4 || &lt;code&gt;int&lt;/code&gt; || Type of header; 1
|-
| 4 || &lt;code&gt;int&lt;/code&gt; || Byte offset to beginning of grass map
|}

{| class=&quot;wikitable&quot; width=&quot;100%&quot;
|+ align=&quot;left&quot; | + Grass Data
| style=&quot;width: 20%&quot; | (width / 4) * (length / 4)
| style=&quot;width: 20%&quot; | &lt;code&gt;unsigned char&lt;/code&gt;
| Map defining the grass on the map. not sure what 256 available values mean.
|}


[[Category:Map Dev]]</text>
      <sha1>jgkrhme7y91fsga9ddxgxgg52j8kd9k</sha1>
    </revision>
  </page>
  <page>
    <title>Mapdev:SMT format</title>
    <ns>0</ns>
    <id>3563</id>
    <revision>
      <id>27780</id>
      <parentid>27727</parentid>
      <timestamp>2013-10-26T21:16:17Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>categorise</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1015">= SMT(Spring Tile File) Reference =
SMT is a binary format
* [https://github.com/spring/spring/tree/master/rts/Map/SMF Relevant code]

== File location ==
maparchive.sd7/maps/filename.smt

== Data Map ==
{| class=&quot;wikitable&quot; width=&quot;100%&quot;
|+ align=&quot;left&quot; | Header
! style=&quot;width: 20%&quot; | Bytes
! style=&quot;width: 20%&quot; | Type !! Description
|-
| 16 || &lt;code&gt;char[]&lt;/code&gt; || Magic number; &quot;spring tilefile\0&quot;
|-
| 4 || &lt;code&gt;int&lt;/code&gt; || Version; 1
|-
| 4 || &lt;code&gt;int&lt;/code&gt; || Number of tiles
|-
| 4 || &lt;code&gt;int&lt;/code&gt; || Size of the tiles; 32
|-
| 4 || &lt;code&gt;int&lt;/code&gt; || Compression Type; 1(DXT1)
|}

{| class=&quot;wikitable&quot; width=&quot;100%&quot;
|+ align=&quot;left&quot; | + Tiles
! style=&quot;width: 20%&quot; | Bytes
! style=&quot;width: 20%&quot; | Type !! Description
|-
| 680* || &lt;code&gt;char[]&lt;/code&gt; || Raw DXT1 compressed 32x32 pixel tiles with 4 mip levels.
|}
* 
* 
*

: * dxt1 compression is consistent at 8 Bytes per 4x4 block of pixels. so for 4 mip levels (32x32, 16x16, 8x8, 4x4) we get 512 + 128 + 32 + 8 = 680 Bytes.

[[Category:Map Dev]]</text>
      <sha1>r0xil04ucsk3bzf6lrzlk0pfmvs1viz</sha1>
    </revision>
  </page>
  <page>
    <title>Mapdev:Tutorial Finalising</title>
    <ns>0</ns>
    <id>3377</id>
    <redirect title="Mapdev:Tutorial Finalizing" />
    <revision>
      <id>25643</id>
      <timestamp>2012-12-17T02:17:36Z</timestamp>
      <contributor>
        <username>Enetheru</username>
        <id>2783</id>
      </contributor>
      <comment>Enetheru moved page [[Mapdev:Tutorial Finalising]] to [[Mapdev:Tutorial Finalizing]]: stupid spelling</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="40">#REDIRECT [[Mapdev:Tutorial Finalizing]]</text>
      <sha1>8xwtod1lfpk6ztzsdz00lst0i1jaze0</sha1>
    </revision>
  </page>
  <page>
    <title>Mapdev:Tutorial Finalizing</title>
    <ns>0</ns>
    <id>3375</id>
    <revision>
      <id>31354</id>
      <parentid>29209</parentid>
      <timestamp>2021-01-10T16:33:07Z</timestamp>
      <contributor>
        <username>Gajop</username>
        <id>2804</id>
      </contributor>
      <comment>/* Compiling the smf and smt files */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4280">= Finalizing =
This page describes how to compile some of the texture files into the smf smt files, test your map, archive the map using 7zip and upload to springfiles.com

= Review = 
Following stage one of the beginners tutorial you will have some intermediary files ready to convert into the SMF and SMT map format:
* heightmap.png
* metalmap.png
* diffuse.png
* mini.bmp
* grassmap.png

There is also the [[Mapdev:terraintype|terrain type]] map but thats not covered in these tutorials

= Compiling the smf and smt files =
{| class=&quot;wikitable&quot;
! springMapConvNG (Windows/Linux)
| &lt;ol&gt;
&lt;li&gt;Open up the terminal and navigate to your working directory
&lt;li&gt;Generate the mymapname.smf and mymapname.smt files by runing mapconv with these options:
&lt;pre&gt;springMapConvNG -t diffuse.png -h heightmap.png -m metalmap.png
-v grassmap.png -minimap mini.bmp -ct 1 -o mymapname&lt;/pre&gt;
&lt;li&gt;Copy the smf and smt files to the ./mymapname.sdd/maps/ directory (Do not rename!)
&lt;/ol&gt;
|-
! smf_tools (Windows/Linux)
| &lt;ol&gt;
&lt;li&gt;Open up the terminal and navigate to your working directory
&lt;li&gt;Generate the mymapname.smt and mymapname.smt.csv (tilemap) with this command:
&lt;pre&gt;smt_convert -vf --smt -o mymapname.smt --tilesize 32x32 diffuse.png&lt;/pre&gt;
&lt;li&gt;Generate the mymapname.smf file with this command:
&lt;pre&gt;smf_cc -vf --height height.png --metal metal.png --map mymapname.smt.csv --grassmap grassmap.png --minimap minimap.png mymapname.smt&lt;/pre&gt;
&lt;li&gt;Copy the smf and smt files to the ./mymapname.sdd/maps/ directory (Do not rename!)
&lt;/ol&gt;
|-
! MapConv (Windows)
| &lt;ol&gt;
&lt;li&gt;In mapconv directory: right click, new file, mymapname.bat
&lt;li&gt;Edit in text editor, put in these options:
&lt;pre&gt;MapConv -i -c 0 -x 256 -n 10 -o mymapname.smf -t diffuse.png -a 
heightmap.png -m metalmap.png -v grassmap.png&lt;/pre&gt;
&lt;li&gt;Depending on the desired quality add:
&lt;pre&gt;Fastest compile, lowest quality:

 -z &quot;nvdxt.exe -dxt1a -nmips 4 -quick -file&quot;

Medium speed, good quality: (CUDA version, requires nvidia 8 or higher series gfx card)

 -q

Slow, great quality: (Nothing)

Slower, best possible quality:

-z &quot;nvdxt.exe -dxt1a -nmips 4 -Sinc -quality_highest -file&quot;&lt;/pre&gt;

&lt;li&gt;Make sure mini.bmp is in the same directory as the mymapname.bat
&lt;li&gt;Generate the mymapname.smf and mymapname.smt files by executing mymapname.bat file
&lt;li&gt;Copy the smf and smt files to the ./mymapname.sdd/maps/ directory (Do not rename!)
&lt;/ol&gt;
|-
! Mac 
|{{FIXME}}
|}

= Testing the map =
Copying the sdd directory to your spring maps folder will allow spring to recognise it as a map, this way you can tweak parameters and test things before archiving it for distribution.

= Archiving =
Archiving the map creates a single file with smaller overall size for easy distribution.
&lt;ol&gt;
&lt;li&gt;Create a new 7zip archive containing the contents of the sdd folder.(see below for platform specific instructions)
&lt;li&gt;Copy the archive to maps folder to test
&lt;/ol&gt;
{{Caution|Make sure that you have not created the archive with the &quot;solid archive&quot; option, or spring will not recognise it.}}
{| class=&quot;wikitable&quot; width=&quot;100%&quot;
! Linux
|
# Open a terminal and navigate to your sdd directory
# Run the following command:
: &lt;code&gt;7z a -ms=off mymapname.sd7 *&lt;/code&gt;
|-
!Windows 
|[[File:Examplearchivewith7zip.jpg|512px]]
|-
!Mac 
|{{FIXME}}
|}

= Uploading to springfiles.com =
&lt;ol&gt;
&lt;li&gt;Head on over to [http://www.springfiles.com springfiles.com] and create an account
&lt;li&gt;Select upload from the main horizontal menu
&lt;li&gt;Fill out as much as you can
&lt;li&gt;Post to [http://springrts.com/phpbb/viewforum.php?f=13 map creation] subforum with something like &quot;[new map]&quot; in the subject line so as to increase visibiity.
&lt;/ol&gt;
= Congratulations =
Your map is set free into the wilds of the internet. We sincerely hope its well loved.

Please browse the [[Mapdev:Main|Map Development]] wiki pages for more ways to make awesome maps. Please help us make this wiki as comprehensive as possible, if you see something missing don't hesitate to jump in and add it.

Additionally, now you have gotten into maps, perhaps other areas of spring development may interest you. Check out the [[Game_and_Unit_development|Game development]] pages.

For help and discussions please visit the [http://springrts.com/phpbb/viewforum.php?f=13 forums]

Good Luck.

[[Category:Map Dev]]</text>
      <sha1>731jbvjn9immu6q2ieg1aqdyt43xewh</sha1>
    </revision>
  </page>
  <page>
    <title>Mapdev:Tutorial Intermediate</title>
    <ns>0</ns>
    <id>3374</id>
    <revision>
      <id>28242</id>
      <parentid>26726</parentid>
      <timestamp>2014-02-16T13:25:07Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>use Tip &amp; Caution</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8098">= Beginners Tutorial Stage 2 =
We continue on from [[Mapdev:Tutorial_Simple|stage 1]] of the beginners tutorial to add finer detail for the landscape, specular highlights, features like trees, rocks etc. And change the lighting conditions.

= What you will need =
* An image editor, such as [http://www.gimp.org/ GIMP] or [http://www.adobe.com/products/photoshop.html Adobe Photoshop], [http://en.wikipedia.org/wiki/List_of_raster_graphics_editors#List etc]
* [http://www.7-zip.org/ 7zip]
* [http://springfiles.com/spring/other/mapdev-stage1-working-files The files] we used in the [[Mapdev:Tutorial_Simple|first stage]]
* [[Spring Features]] - [http://springfiles.com/spring/tools/spring-features archive]

There are a multitude of other tools you can use to make maps, however for the purposes of this beginners tutorial, these are the only ones you will need. Check the [[Mapdev:Main#Tools|tools]] section for more information.

= Download =
* [http://springfiles.com/spring/other/mapdev-stage2-working-files Download] the finished working files
* [http://springfiles.com/spring/spring-maps/mapdev-stage2 Download] the completed map archive

= Map Features =
Map features are the extra bits and bobs added to a map that give it extra bling eg.  bushes, trees, houses, rocks etc. You can bundle them with your map, or you can create a dependency to external archives like [[Spring Features]]. For this tutorial we will be depending on spring features.
{{Tip|There is not a simple, solid, mature way to cover your map with features yet. Provided here are instructions for the simplest method, but its very time consuming and tedious. There are better methods that yield good results, you can find them listed in the [[Mapdev:features|features]] page.}}
&lt;center&gt;
{| class=&quot;wikitable&quot;
|+ Example
| [[File:Mapdev-features-without.jpg|341px]] || [[File:Mapdev-features-with.jpg|341px]]
|-
! Without Features !! With Features
|}&lt;/center&gt;
&lt;ol&gt;
&lt;li&gt;move the downloaded [[Spring Features]] archive to your spring games folder
&lt;li&gt;Edit your mapinfo.lua file to include spring features as a dependency
&lt;code&gt;&lt;pre&gt;	depend      = {&quot;Map Helper v1&quot;,&quot;Spring Features 1.0&quot;},&lt;/pre&gt;&lt;/code&gt;
&lt;li&gt;Edit the ./mymap.sdd/mapconfig/featureplacer/set.lua file
&lt;li&gt;Under the &lt;code&gt;objectlist&lt;/code&gt; subtable, add lines like the one below to place a feature

&lt;code&gt;&lt;pre&gt;{ name = 'name', x = 0 , z = 0 , rot = &quot;0&quot;},&lt;/pre&gt;&lt;/code&gt;
* The names of the features are specified in the feature folder within the map spring features archive
* Coordinate system is the same as when placing the start positions:
* &lt;code&gt;rot&lt;/code&gt; is the rotation around the &lt;code&gt;y&lt;/code&gt; axis.
eg.
&lt;code&gt;&lt;pre&gt;   objectlist = {
      { name = 'name', x = 0 , z = 0 , rot = &quot;0&quot;},
      { name = 'name', x = 0 , z = 0 , rot = &quot;0&quot;},
      { name = 'name', x = 0 , z = 0 , rot = &quot;0&quot;},
      { name = 'name', x = 0 , z = 0 , rot = &quot;0&quot;},
   },&lt;/pre&gt;&lt;/code&gt;
&lt;/ol&gt;
&lt;center&gt;
{| class=&quot;wikitable&quot;
| [[File:Mapdev-coords.png]]
|}&lt;/center&gt;

= Specular Map =
The [[Mapdev:specular|specular]] map defines how shiny and the colour of the shine that the terrain is, it is useful for ice &amp; snow, polished rock, metal, or wet ground types. The Specular map can be any size, and is stretched over the terrain.
&lt;center&gt;
{| class=&quot;wikitable&quot;
|+ Example
| [[File:Mapdev-spec_without.jpg|320px]] || [[File:Mapdev-spec_with.jpg|320px]]
|-
! Without Specular Map !! With Specular Map
|}&lt;/center&gt;
&lt;ol&gt;
&lt;li&gt;Create a 1024x1024 RGB image
&lt;li&gt;Paint it such that only the areas you wish to be shiny have colour,
&lt;li&gt;Save the image to your working directory as spec_color.png
&lt;center&gt;
{| class=&quot;wikitable&quot;
|+ Example
| [[File:Mapdev-spec_color.jpg]]
|-
! Example Specular Color Map
|}&lt;/center&gt;
&lt;li&gt;Create another 1024x1024 greyscale image
&lt;li&gt;Paint it such that black is matt finish ie. light will be reflected no matter the viewing angle, and white is reflective finish ie light gets reflected at increasingly sharper viewing angle. you will probably want to keep it mostly grey to white.
{{Caution|Be careful not to have any fully black pixels, as it will cause artifacts when the specular highlights are multiplied.}}
&lt;li&gt;Save the image to your working directory as spec_exp.png
&lt;center&gt;
{| class=&quot;wikitable&quot;
|+ Example
| [[File:Mapdev-spec_exp.jpg]]
|-
! Example Specular Exponent Map
|}&lt;/center&gt;
&lt;li&gt;Combine the two images into one 1024x1024 RGBA image
&lt;li&gt;Save the result as &quot;working directory&quot;/mymapname.sdd/maps/specular.png
&lt;/ol&gt;

= Detail =
[[Mapdev:detail|Detail maps]] make the ground look great even when you are really close to it.
&lt;center&gt;
{| class=&quot;wikitable&quot;
|+ Example
| [[File:Mapdev-splat-without.jpg|330px]] || [[File:Mapdev-splat-with.jpg|330px]]
|-
! Default Single Detail Map !! Multiple Detail Maps
|-
| colspan=&quot;2&quot; | ''* Click on images for higher res''
|}&lt;/center&gt;
== Creating the details map ==
&lt;ol&gt;
&lt;li&gt;Collect 4 detail textures that you would like to apply to your terrain and save them to your working directory. The detail textures will need to be tilable, and of the same resolution, resize them if necessary.
&lt;li&gt;Save the detail textures to your working directory as detail_1.png (detail_2.png etc.)
&lt;li&gt;Combine the 4 detail textures into an RGBA image.
&lt;li&gt;Save the combined result to &quot;working directory&quot;/mymap.sdd/maps/details.png
&lt;/ol&gt;
&lt;center&gt;
{| class=&quot;wikitable&quot;
|+ Example
| [[File:Mapdev-details.gif]] || [[File:Mapdev-details.png]]
|-
! Individual Detail Textures !! Combined Result
|}&lt;/center&gt;
== Creating the details distribution map ==
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;For each of the four detail textures:
&lt;ol&gt;
&lt;li&gt;Create an 512x512 greyscale image
&lt;li&gt;Paint where you would like the detail texture to show, white for full strength, black for zero strength.
&lt;li&gt;Save the image to your working directory as detail_1_dist.png (detail_2_dist.png etc.)
&lt;/ol&gt;
&lt;li&gt;Combine the 4 detail distribution maps into one RGBA image
&lt;li&gt;Save the result to &quot;working directory&quot;/mymap.sdd/maps/details_dist.png
&lt;/ol&gt;
&lt;center&gt;
{| class=&quot;wikitable&quot;
|+ Example
| [[File:Mapdev-ddist.gif]] || [[File:Mapdev-ddist.png]]
|-
! Detail Distribution maps !! Combined Result
|}&lt;/center&gt;

== Edit mapinfo.lua ==
&lt;ol&gt;
&lt;li&gt;Open mapinfo.lua in a text editor
&lt;li&gt;Tweak the  &lt;code&gt;texScales&lt;/code&gt; and &lt;code&gt;texMults&lt;/code&gt; values to achieve a good look.
&lt;/ol&gt;
&lt;code&gt;&lt;pre&gt;
   splats = {
      texScales = {0.02, 0.02, 0.01, 0.02},
      texMults  = {1.0, 0.7, 0.4, 1.0},
   },&lt;/pre&gt;&lt;/code&gt;
&lt;center&gt;
{| class=&quot;wikitable&quot;
| [[File:Map_measure.png|512px]]
|-
! Splat Scales Illustrated
|}&lt;/center&gt;

= Lighting =
could be fun to explain link to [[Mapdev:lighting]]
{| class=&quot;wikitable&quot;
|+ Examples
| {{FIXME}}(Code goes here) || {{FIXME}}(example image goes here)
|-
| {{FIXME}}(Code goes here) || {{FIXME}}(example image goes here)
|-
| {{FIXME}}(Code goes here) || {{FIXME}}(example image goes here)
|-
! Example lighting variables !! In game result
|}
= Review =
From this tutorial you have been able to really increase the detail level of your map using: features, specular highlights, detail splatting and lighting.

Working directory should look something similar to this:
&lt;pre&gt;working directory
  |-mymapname.sdd/
  | |-features/
  | |-LuaGaia/
  | |-mapconfig/
  | | |-featureplacer/
  | | | |-set.lua
  | |-maphelper/
  | |-maps/
  | | |-ddist.png
  | | |-details.png
  | | |-mapdev-stage2.smf
  | | |-mapdev-stage2.smt
  | | |-specular.png
  | |-objects3d/
  | |-unittextures/
  | |-mapinfo.lua
  | |-mapoptions.lua
  |-ddist1.png
  |-ddist2.png
  |-ddist3.png
  |-ddist4.png
  |-detail_1.png
  |-detail_2.png
  |-detail_3.png
  |-detail_4.png
  |-diffuse.png
  |-grasmap.png
  |-heightmap.png
  |-metalmap.png
  |-minimap.png
  |-spec_color.png
  |-spec_exp.png
&lt;/pre&gt;

= Finalizing =
Continue to [[Mapdev:Tutorial_Finalizing|this page]] to compile and archive your map for play

= I Want More =
This concludes the Beginners tutorial, there are loads more things you can do with maps so have a look through the [[Mapdev:Main|documentation]] and think out of the box

{{FIXME}}(show pictures of novel concepts, like bridges, scripted terrain, map borders etc.

[[Category:Map Dev]]</text>
      <sha1>mb3otwzqxodz02455uu57j3j0iuz5dy</sha1>
    </revision>
  </page>
  <page>
    <title>Mapdev:Tutorial Simple</title>
    <ns>0</ns>
    <id>3369</id>
    <revision>
      <id>30868</id>
      <parentid>30867</parentid>
      <timestamp>2019-01-02T03:49:24Z</timestamp>
      <contributor>
        <username>Gajop</username>
        <id>2804</id>
      </contributor>
      <comment>/* Edit mapinfo.lua */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8269">= Beginners Tutorial Stage 1 =
This beginners tutorial is aimed at getting you from nothing, to something simple which you can build upon.

* We'll start with the height map, defining the structure of the terrain
* Then the metalmap, a resource scheme built into the spring engine
* The diffuse texture, defining the colour of the terrain
* The minimap, for when selecting the map in the game lobby
* The grass map, for that extra flourish of detail
* Finally set up the start positions

= What you will need =
* An image editor, such as [http://www.gimp.org/ GIMP] or [http://www.adobe.com/products/photoshop.html Adobe Photoshop], [http://en.wikipedia.org/wiki/List_of_raster_graphics_editors#List etc]
* [http://www.7-zip.org/ 7zip]
* Windows - [[MapConv]], Linux - [[MapConvNG]]
* a copy of the map blueprint [https://github.com/jk3064/Map-Blueprint/archive/master.zip archive]

There are a multitude of other tools you can use to make maps, however for the purposes of this beginners tutorial, these are the only ones you will need. Check the [[Mapdev:Main#Tools|tools]] section for more information.

= Download =
* [http://springfiles.com/spring/other/mapdev-stage1-working-files Download] the working  files
* [http://springfiles.com/spring/spring-maps/mapdev-stage1 Download] the completed map archive

= Preparation =
&lt;ol&gt;
&lt;li&gt;Extract the mapcontainer.sdd folder from the blueprint archive into your working directory.&lt;/li&gt;
Your directory structure should look like this:
&lt;pre&gt;working directory
  |-mapcontainer.sdd/
    |-LuaGaia/
    |-mapconfig/
    |-maphelper/
    |-maps/
    |-mapinfo.lua
    |-mapoptions.lua
&lt;/pre&gt;    
&lt;li&gt;Rename the mapcontainer.sdd folder to the name of your map, eg. mymap.sdd
&lt;li&gt;Edit the following variables in the mapinfo.lua file, ignore the rest for now.
* name
* shortname
* description
* author
* version (just put like v1 or something in here)
&lt;/ol&gt;

= Create Height map =
For this tutorial we will be creating a 4x4 size map, which is relatively small. Typically maps will be 8x8 (for a 1v1) or larger, but entirely depends on the game you are targeting.
&lt;ol&gt;
&lt;li&gt;Check the [[Mapdev:height|height]] page to get our image dimensions. In our case a 4x4 map yields a image resolution of 257x257 pixels
&lt;li&gt;Create a 257x257 greyscale image using your image editor
&lt;li&gt;Draw the terrain&lt;/li&gt;
&lt;li&gt;Save the image to your working directory, call it heightmap.png
&lt;/ol&gt;
{{Tip|Black represents the lowest elevation on the map, white represents the highest, in between lies all the shades of grey. Hard edges in the image will be cliffs, and smooth gradients will be ramps.}}
&lt;center&gt;
{| class=&quot;wikitable&quot; 
|+ Example
| [[File:Mapdev-height.png|256px]] || [[File:Mapdev-height-example.png]]
|-
! Example Height Map !! Ingame Result
|}&lt;/center&gt;
== Edit mapinfo.lua ==
&lt;ol&gt;
&lt;li&gt;Open the mapinfo.lua file in a text editor
&lt;li&gt;Change the &lt;code&gt;minHeight&lt;/code&gt; and &lt;code&gt;maxHeight&lt;/code&gt; variables to &lt;code&gt;10&lt;/code&gt; and &lt;code&gt;256&lt;/code&gt; respectively&lt;br&gt;
These values control the overall height of the terrain, and will be unique to your map. After loading up the map in game you may want to revisit and tweak these values to get the best result.&lt;br&gt;
The resulting portion of code should appear like this:
&lt;pre&gt;local mapinfo = {
   ...
   smf = {
      minHeight = 10,
      maxHeight = 256,
      ...
   },
   ...
}&lt;/pre&gt;
&lt;/ol&gt;

= Create Metal Map =
{{Caution|There are several games for Spring which use their own resourcing system. If you are creating a map for one of those games, a metal map may not be necessary, however it is always nice if you can make your maps as compatible with other games as possible, but this is a choice left entirely up to you.}}
&lt;ol&gt;
&lt;li&gt;Check the [[Mapdev:metal|metal]] page to get our image dimensions. In our case a 4x4 map yields an image resolution of 128x128 pixels
&lt;li&gt;Create a 128x128 RGB image using your image editor
&lt;li&gt;Paint the whole image black
&lt;li&gt;Paint full red spots 6 or so pixels in diameter on the places where you want metal to appear in game.
&lt;li&gt;Save the image to your working directory, call it metalmap.png
&lt;/ol&gt;
&lt;center&gt;
{| class=&quot;wikitable&quot;
|+ Example
| [[File:Mapdev-metal.png|256px]] || [[File:Mapdev-metal-example.png]]
|-
! Example Metal Map !! Ingame Result
|}&lt;/center&gt;
== Edit mapinfo.lua ==
&lt;ol&gt;
&lt;li&gt;Open the mapinfo.lua file in a text editor
&lt;li&gt;Change the &lt;code&gt;maxMetal &lt;/code&gt; and the &lt;code&gt;extractorRadius&lt;/code&gt; variables to &lt;code&gt;6.0&lt;/code&gt; and &lt;code&gt;32.0&lt;/code&gt; respectively&lt;br&gt;
These variables control the maximum amount of metal that a metal extractor can extract at full capacity, and  the radius that a metal extractor will be able to draw from.&lt;br&gt;
The resulting portion of code will appear thus:
&lt;pre&gt;local mapinfo = {
   ...
   maxMetal = 6.0,
   extractorRadius = 32.0,
   ...
}&lt;/pre&gt;
&lt;/ol&gt;

= Create Diffuse Texture =
&lt;ol&gt;
&lt;li&gt;Check the [[Mapdev:diffuse|diffuse]] page to get our image dimensions. In our case a 4x4 map yields an image resolution of 2048x2048 pixels
&lt;li&gt;Create a 2048x2048 RGB image using your image editor
&lt;li&gt;Paint your ground colour in such a way that it compliments the height of the terrain, and metal spots.
&lt;li&gt;Save the image to your working directory, call it diffuse.png
&lt;/ol&gt;
{{Tip|It may be useful to use the heightmap.png and metalmap.png images as a starting points, scaling them up to size, and then painting over the top.}}
{{Caution|The larger the map the greater the file size this texture will be, a 4x4 map at 2048x2048 the diffuse texture image is already at 5.4mb, imagine a 32x32 size map, it would be in the hundreds of megabytes. Working with large textures is difficult, and requires good hardware. }}
&lt;center&gt;
{| class=&quot;wikitable&quot;
|+ Example
| [[File:Mapdev-diffuse.jpg]] || [[File:Mapdev-diffuse-example.png]]
|-
! Example Diffuse Map !! Ingame Result
|}&lt;/center&gt;

= Create Mini Map =
The [[Mapdev:minimap|mini-map]] is a thumbnail image of the the whole map displayed in lobbies when selecting maps.
&lt;ol&gt;
&lt;li&gt;Load up your diffuse.png image
&lt;li&gt;Scale the image to exactly 1024x1024 pixels
&lt;li&gt;Save the image to your working directory, call it mini.png
&lt;/ol&gt;

= Create Grass Map =
Grass adds additional depth to your map, giving it a little bit extra.
# Check the [[Mapdev:grass|grass]] page to get our image dimensions. In our case a 4x4 map yields a image resolution of 64x64 pixels
# Create a 64x64 RGB image using your image editor
# Paint the image fully black to begin with
# Paint varying strengths of blue for where you want the grass to show up.
# Save the image to your working directory, call it grassmap.png
&lt;center&gt;
{| class=&quot;wikitable&quot;
|+ Example
| [[File:Mapdev-grass.png]] || [[File:Mapdev-grass-example.png|455px]]
|-
! Grass map !! In Game Result
|}&lt;/center&gt;

= Define Start Positions =
considering the small size of the map we will only define two teams
&lt;ol&gt;
&lt;li&gt;Open the mapinfo.lua file in a text editor
&lt;li&gt;Locate the teams subtable and delete the lines for teams 2 and 3
&lt;li&gt;Edit the &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;z&lt;/code&gt; coordinate for each team to define their start location&lt;br&gt;
The coordinates for spring relate 1:1 with the pixels in the diffuse map. Starting at the top left of the image at (0,0). &lt;code&gt;x&lt;/code&gt; increases horizontally to the right, &lt;code&gt;z&lt;/code&gt; increases vertically downwards.&lt;br&gt;
The code should look similar to this:
&lt;pre&gt;local mapinfo = {
  ...
  teams = {
    [0] = {startPos = {x = 256, z = 1024}},
    [1] = {startPos = {x = 1792, z = 1024}},
  },
  ...
}&lt;/pre&gt;
&lt;/ol&gt;
&lt;center&gt;
{| class=&quot;wikitable&quot;
| [[File:Mapdev-coords.png]]
|-
! Coordinates
|}&lt;/center&gt;

= Review =
From the tutorial we have learned how to make the:
* Height map
* Diffuse texture
* Metal map
* Mini map
* Grass map
* Start locations

Your directory structure should look similar to this:
&lt;pre&gt;working directory
  |-mymapname.sdd/
  | |-LuaGaia/
  | |-mapconfig/
  | |-maphelper/
  | |-maps/
  | |-mapinfo.lua
  | |-mapoptions.lua
  |-grassmap.png
  |-heightmap.png
  |-metalmap.png
  |-diffuse.png
  |-minimap.png
&lt;/pre&gt;

Now we need to get the map loaded into the game

= Finalizing =
Continue to [[Mapdev:Tutorial_Finalizing|this page]] to compile, test and archive your map for distribution.

= I want more =
Continue to [[Mapdev:Tutorial_Intermediate|stage two]]

[[Category:Map Dev]]</text>
      <sha1>7q4uoogvntweze8sqfk2n8keuzkqofd</sha1>
    </revision>
  </page>
  <page>
    <title>Mapdev:WikiGuide</title>
    <ns>0</ns>
    <id>3368</id>
    <revision>
      <id>28239</id>
      <parentid>26729</parentid>
      <timestamp>2014-02-16T13:17:22Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>/* Infobox */ use Tip &amp; Caution for ease and consistency</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3302">= Style and format guide for mapdev wiki pages =



== Technical Pages ==
the structure of a technical page should be thus:
* title
* short description of the pages content
* pretty Images
* Specification
: this means the exact format for text, images, file locations, naming, etc
* (optional)implementation
: engine details on how its put into the game if relevant, also if there are multiple ways to use the information, most of the time i expect this section will be removed
* (optional)History
: relevant history as to why the feature is how it is, i expect this section to be removed in most cases
* (optional)additional Information
: for curiosity's sake if someone has more information on the subject they wish to add, such as with the terrain additional information regarding ROAM algorithms, etc.. i expect this section to be removed in most cases
* (optional)forum discussion
: forum links relating to the feature that are useful
== Howto's ==
Should attempt to deal with one thing at a time, and not try to be a &quot;how to make the best map ever&quot; type thing, keep it focused on one thing, keep it neat.
== Common Problems ==
if the description and solution to the problem can be fit into a couple of paragraphs, there is no need to make a new page for it, just chuck it under the heading on the main page.

= Page Elements =
== Infobox ==
use the infobox template for tips and cautions
 eg.
&lt;pre&gt;{{Tip|blah blah blah}}&lt;/pre&gt;

{{Tip|blah blah blah}}

&lt;pre&gt;{{Caution|blah blah blah}}&lt;/pre&gt;

{{Caution|blah blah blah}}

== FIXME ==
Wherever there is information missing that needs adding use {{{FIXME}}} tags
&lt;pre&gt;{{FIXME}}&lt;/pre&gt;
Later people can use [[Special:WhatLinksHere/Template:FIXME|this page]] to know what needs work
== Example Image ==
&lt;pre&gt;&lt;center&gt;
{| class=&quot;wikitable&quot;
|+ Example
| [[File:imagename.jpg]] || [[File:imagename.png]]
|-
! Example Image !! Ingame Result
|}&lt;/center&gt;&lt;/pre&gt;
&lt;center&gt;
{| class=&quot;wikitable&quot;
|+ Example
| (link image here with max height 256) || (link image here with max height 256)
|-
! Example Image !! Ingame Result
|}&lt;/center&gt;
== Image Spec ==
&lt;pre&gt;{| class=&quot;wikitable&quot; width=&quot;100%&quot;
! width=&quot;15%&quot; | File Location
| file path relative to root of map folder
|-
! File Format
| What file format can be used.
|-
! Colour Depth
| bits per pixel
|-
! Channels
| what colour channels
|-
! Resolution
| Either an exact value, a description or below.
&lt;center&gt;
{| class=&quot;wikitable&quot; style=&quot;text-align: center;&quot;
!Spring Map Size&lt;sup&gt;*&lt;/sup&gt;
!pixels = Spring Map Size * 512
|-
| 2
| 1024
|-
| 4
| 2048
|-
| 6
| 3072
|-
| ...
| ...
|-
| 32
| 16 384
|-
| style=&quot;text-align: left;font-style:italic&quot; colspan=2 | &amp;#42; must be multiples of 2
|}&lt;/center&gt;
|}&lt;/pre&gt;

{| class=&quot;wikitable&quot; width=&quot;100%&quot;
! width=&quot;15%&quot; | File Location
| file path relative to root of map folder
|-
! File Format
| What file format can be used.
|-
! Colour Depth
| bits per pixel
|-
! Channels
| what colour channels
|-
! Resolution
| Either an exact value, a description or below.
&lt;center&gt;
{| class=&quot;wikitable&quot; style=&quot;text-align: center;&quot;
!Spring Map Size&lt;sup&gt;*&lt;/sup&gt;
!pixels = Spring Map Size * 512
|-
| 2
| 1024
|-
| 4
| 2048
|-
| 6
| 3072
|-
| ...
| ...
|-
| 32
| 16 384
|-
| style=&quot;text-align: left;font-style:italic&quot; colspan=2 | &amp;#42; must be multiples of 2
|}&lt;/center&gt;
|}

[[Category:Map Dev]]</text>
      <sha1>d0yu4o6pciumhabs4452p1qmdkfjbtz</sha1>
    </revision>
  </page>
  <page>
    <title>Mapdev:detail</title>
    <ns>0</ns>
    <id>3381</id>
    <revision>
      <id>30842</id>
      <parentid>29367</parentid>
      <timestamp>2018-12-18T15:38:12Z</timestamp>
      <contributor>
        <username>Gajop</username>
        <id>2804</id>
      </contributor>
      <comment>/* mapinfo.lua */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="685">= Details =
{{FIXME}} Needs description here
&lt;center&gt;
{| class=&quot;wikitable&quot;
|+ Example
| {{FIXME}} needs image || [[File:Mapdev-splat-without.jpg|330px]]
|-
! Example Detail Texture !! Ingame Result
|-
| colspan=&quot;2&quot; | ''* Click on images for higher res''
|}&lt;/center&gt;

= Specification =
== mapinfo.lua ==
&lt;pre&gt;
local mapinfo = {
   ...
   resources = {
      ...
      detailTex = &quot;&quot;,
      ...
   },
   ...
}&lt;/pre&gt;

== Image File ==
{| class=&quot;wikitable&quot; width=&quot;100%&quot;
! width=&quot;15%&quot; | File Location
| ./maps/
|-
! File Format
| PNG, TGA, BMP, DDS {{new|99.0}}
|-
! Colour Depth
| 8bpp
|-
! Channels
| RGB
|-
! Resolution
| Any powers of two, eg. 256, 512, 1024...
|}

[[Category:Map Dev]]</text>
      <sha1>c8wwoer2gcgjbhar4c1st0f07f74j3i</sha1>
    </revision>
  </page>
  <page>
    <title>Mapdev:diffuse</title>
    <ns>0</ns>
    <id>3373</id>
    <revision>
      <id>30841</id>
      <parentid>27711</parentid>
      <timestamp>2018-12-18T15:37:49Z</timestamp>
      <contributor>
        <username>Gajop</username>
        <id>2804</id>
      </contributor>
      <comment>/* mapinfo.lua */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2005">= Diffuse =
The colour of the terrain, then modified with the lighting values in mapinfo.lua
&lt;center&gt;
{| class=&quot;wikitable&quot;
|+ Example
| [[File:Mapdev-diffuse.jpg]] || [[File:Mapdev-diffuse-example.png]]
|-
! Example Diffuse Map !! Ingame Result
|}&lt;/center&gt;

= Specification =
== mapinfo.lua ==
The relevant sections of the mapinfo.lua file that effect the colour of the ground are in the [[Map_Making:mapinfo.lua#Lighting|Lighting subtable]]

&lt;pre&gt;
local mapinfo = {
   ...
   lighting = {
      ...
      --// ground lighting
      groundAmbientColor  = {0.5, 0.5, 0.5},
      groundDiffuseColor  = {0.5, 0.5, 0.5},
      groundSpecularColor = {0.1, 0.1, 0.1},
      groundShadowDensity = 0.8,
      ...
   },
   ...
}
&lt;/pre&gt;

== Image File ==
{| class=&quot;wikitable&quot; width=&quot;100%&quot;
! width=&quot;15%&quot; | File Location
| The diffuse texture is chopped into 32x32 pixel tiles compressed using DXT1 and compiled into the smt using [[MapConv]] or [[MapConvNG]].
|-
! File Format
| Any that Mapconv programs support
|-
! Colour Depth
| 8bpp
|-
! Channels
| RGBA
|-
! Resolution
| &lt;center&gt;
{| class=&quot;wikitable&quot; style=&quot;text-align: center;&quot;
!Spring Map Size&lt;sup&gt;*&lt;/sup&gt;
!pixels = Spring Map Size * 512
|-
| 2
| 1024
|-
| 4
| 2048
|-
| 6
| 3072
|-
| ...
| ...
|-
| 32
| 16 384
|-
| style=&quot;text-align: left;font-style:italic&quot; colspan=2 | * must be multiples of 2
|}&lt;/center&gt;
|}

== Compression ==
The DXT1 compression is lossy, but in a consistent manner. all 32x32 tiles will have exactly the same size. To reduce the number of tiles saved in tile file(SMT) you can align graphical elements to a 32x32 pixel grid. MapConv can detect that a tile is repeated and reference it only once. This means that any repetition of the diffuse image, so long as it is aligned to a 32x32 pixel grid will result in a reduction in size.

* Use tiled textures that are multiples of 32x32 in dimensions.
* Place features like geovents and metal spots on a 32x32 grid.
* Repeat as much as possible on a 32x32 pixel grid.

[[Category:Map Dev]]</text>
      <sha1>annb08njx4hxaqdrg8jfg31k6opnj06</sha1>
    </revision>
  </page>
  <page>
    <title>Mapdev:features</title>
    <ns>0</ns>
    <id>3378</id>
    <revision>
      <id>28323</id>
      <parentid>27464</parentid>
      <timestamp>2014-02-24T23:57:04Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>/* Additional Information */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1818">= Features =
Map features are the bits and bobs that give maps more bling, such as rocks, trees, etc. 
&lt;center&gt;
{| class=&quot;wikitable&quot;
|+Example
|[[File:Mapdev-features-with.jpg|640px]]
|}&lt;/center&gt;

= Specification =
== Feature List ==
All features on a map are listed in the [[Mapdev:set.lua|set.lua]]

== Feature ==
The features themselves are complex enough to warrant their own set of pages.

= Additional Information =
* '''[[Spring Features]]''' is a mod archive filled with useful objects.
* '''[[Map_Making:_Feature_Placer|FeaturePlacer]]''' is an ingame tool to help with adding features to your map.

= History =
== Feature Map ==
Feature maps are a single RGB image where features such as grass, geothermal vents and trees, as well as structures, etc were &quot;placed&quot; using pixels on the image. This method was extremely imprecise and involved recompiling the map many times in order to simply move a tree from one location to another. They are still used for the purpose of placing [[Mapdev:grass|grass]]
&lt;center&gt;
{| class=&quot;wikitable&quot; style=&quot;text-align: center;&quot;
| [[File:Mapdev-grass.png]] || [[File:Mapdev-grass-example.png|451px]]
|-
! Example Feature Map
! Ingame Result
|}&lt;/center&gt;
=== Specification ===
{| class=&quot;wikitable&quot; width=&quot;100%&quot;
! width=&quot;15%&quot; | File Location
| The feature map is an intermediary file compiled into the SMF/SMT files using [[MapConv]] or [[MapConvNG]].
|-
! File Format
| Any that Mapconv programs support
|-
! Colour Depth
| 8bpp
|-
! Channels
| RGB
|-
! Resolution
| &lt;center&gt;
{| class=&quot;wikitable&quot; style=&quot;text-align: center;&quot;
!Spring Map Size&lt;sup&gt;*&lt;/sup&gt;
!pixels = Spring Map Size * 64
|-
| 2
| 128
|-
| 4
| 256
|-
| 6
| 284
|-
| ...
| ...
|-
| 32
| 2048
|-
| style=&quot;text-align: left;font-style:italic&quot; colspan=2 | &amp;#42; must be multiples of 2
|}&lt;/center&gt;
|}

[[Category:Map Dev]]</text>
      <sha1>7savq8m78xdokax4uqrxvrrdibnfjfo</sha1>
    </revision>
  </page>
  <page>
    <title>Mapdev:grass</title>
    <ns>0</ns>
    <id>3380</id>
    <revision>
      <id>31225</id>
      <parentid>31219</parentid>
      <timestamp>2020-05-06T04:03:04Z</timestamp>
      <contributor>
        <username>Gajop</username>
        <id>2804</id>
      </contributor>
      <comment>/* mapinfo.lua */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3114">= Grass =
Grass is entirely optional, but can be customized via map parameters and adds a nice touch to your map.
{| class=&quot;wikitable&quot; style=&quot;text-align: center;&quot; width=&quot;100%&quot;
| [[File:Mapdev-grass.png]] || [[File:Mapdev-grass-example.png|451px]]
|-
! Example Grass Disribution
! In Game Result
|}

= Specification =
== mapinfo.lua ==
&lt;pre&gt;local mapinfo = {
   ...
   smf = {
        ....
        grassmapTex = &quot;&quot;,
        ....
   },
   ...
   resources = {
      ...
      grassBladeTex = &quot;&quot;,
      grassShadingTex = &quot;&quot;,
      ...
   },
   ...
   grass = {
      bladeWaveScale = 1.0,
      bladeWidth = 0.32,
      bladeHeight = 4.0,
      bladeAngle = 1.57,
      bladeColor = {0.59, 0.81, 0.57},
   },
   ...
}&lt;/pre&gt;
=== Blade Wave Scale ===
Defaults to 1. It specifies how much the blades will wave in the wind. Higher makes them wave more.

=== Blade Height ===
Default is 4. Defines the length of the blade of grass in elmos.

=== Blade Angle ===
Default is pi/4. It defines how much each blade of grass curves.

=== Blade Color ===
does nothing when blade texture is set.

== Distribution Image ==
Formerly [[Mapdev:features|Feature]] Map. Grass distribution is defined by blue pixels, the more blue the pixel is (the closer to blue 255 it is), the thicker grass will be at that location. 
{| class=&quot;wikitable&quot; width=&quot;100%&quot;
! width=&quot;15%&quot; | File Location
| The distribution map is an intermediary file compiled into the SMF/SMT files using [[MapConv]] or [[MapConvNG]], it can also be specified in the mapinfo.lua
|-
! File Format
| Any that Mapconv programs support
|-
! Colour Depth
| 8bpp
|-
! Channels
| Greyscale
|-
! Resolution
| &lt;center&gt;
{| class=&quot;wikitable&quot; style=&quot;text-align: center;&quot;
!Spring Map Size&lt;sup&gt;*&lt;/sup&gt;
!pixels = Spring Map Size * 16
|-
| 2
| 32
|-
| 4
| 64
|-
| 6
| 96
|-
| ...
| ...
|-
| 32
| 512
|-
| style=&quot;text-align: left;font-style:italic&quot; colspan=2 | &amp;#42; must be multiples of 2
|}&lt;/center&gt;
|}

== Shading Image ==
* If a shading image is not present, the minimap will be used in its place.
{| class=&quot;wikitable&quot; width=&quot;100%&quot;
! width=&quot;15%&quot; | File Location
| ./maps/
|-
! File Format
| PNG, TGA
|-
! Colour Depth
| 8bpp
|-
! Channels
| RGB
|-
! Resolution
| Any, recommended powers of two, will be stretched over the terrain.
|}
&lt;center&gt;
{| class=&quot;wikitable&quot;
| [[File:Grassmap_Map_example.jpegâ€Ž]] || [[File:Grassmap_Map_ingame.jpg|512px|â€Ž]]
|-
! Example !! Result
|}&lt;/center&gt;

== Blade Texture ==
Specify a texture for the individual grass blades. The grass blades go from top to bottom, vertically. 
{| class=&quot;wikitable&quot; width=&quot;100%&quot;
! width=&quot;15%&quot; | File Location
| ./maps/
|-
! File Format
| PNG, TGA
|-
! Colour Depth
| 8bpp
|-
! Channels
| RGB (alpha does nothing here)
|-
! Resolution
| Any
|}

&lt;center&gt;
{| class=&quot;wikitable&quot; style=&quot;text-align: center;&quot;
| https://springrts.com/mediawiki/images/3/36/Grass_blade_tex_testing.png || https://springrts.com/mediawiki/images/9/9f/Grass_blade_tex_ingame.PNG
|-
! Example  !! Result
|}&lt;/center&gt;

= Forum Discussions =
* [http://springrts.com/phpbb/viewtopic.php?f=13&amp;t=27585 Try to keep perspective]

[[Category:Map Dev]]</text>
      <sha1>8ie273mqg36uxfn71mjx3cvispx2l5y</sha1>
    </revision>
  </page>
  <page>
    <title>Mapdev:height</title>
    <ns>0</ns>
    <id>3371</id>
    <revision>
      <id>26710</id>
      <parentid>25948</parentid>
      <timestamp>2013-03-20T20:13:23Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>1cat</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2292">= Height =
The height of the terrain is generally defined with a greyscale displacement map with black representing the lowest point on the terrain and white the highest. The height of the terrain can also be modified in game via lua scripting. 
&lt;center&gt;
{| class=&quot;wikitable&quot; 
|+ Example
| [[File:Mapdev-height.png|256px]] || [[File:Mapdev-height-example.png]]
|-
! Example Height Map !! Ingame Result
|}&lt;/center&gt;
= Specification =
== mapinfo.lua ==
* [[Mapdev:mapinfo.lua]]
&lt;code&gt;&lt;pre&gt;local mapinfo = {
   ...
   smf = {
      minHeight = 1000,
      maxHeight = -300,
      ...
   },
   ...
}&lt;/pre&gt;&lt;/code&gt;
=== minHeight and maxHeight ===
Any values below zero are underwater, see [[Mapdev:water]]

== Image File ==
{| class=&quot;wikitable&quot; width=&quot;100%&quot;
! width=&quot;15%&quot; | File Location
| The height map is an intermediary file compiled into the SMF/SMT files using [[MapConv]] or [[MapConvNG]].
|-
! File Format
| Any that the Mapconv programs support
|-
! Colour Depth
| 16bpp recommended, however 8bpp will work.
|-
! Channels
| Greyscale
|-
! Resolution
|&lt;center&gt;
{| class=&quot;wikitable&quot; style=&quot;text-align: center;&quot;
! Spring Map Size&lt;sup&gt;*&lt;/sup&gt;
! pixels = Spring Map Size * 64 + 1
|-
| 2
| 129
|-
| 4
| 257
|-
| 6
| 385
|-
| ...
| ...
|-
| 32
| 2049
|-
| style=&quot;text-align: left;font-style:italic&quot; colspan=2 | &amp;#42; must be multiples of 2
|}&lt;/center&gt; 
|}

=== 8 vs 16 bpp ===
These two images show the differences in prescision that the bit depth of the image makes. The effect has been exaggerated here for clarity.
&lt;center&gt;
{| class=&quot;wikitable&quot; style=&quot;text-align: center;&quot;
| [[File:8bpp.png|256px]]
|[[File:16bpp.png|256px]]
|-
! 8bpp
! 16bpp
|}
&lt;/center&gt;

=== +1 pixel ===
When each pixel represents a vertex you need one extra pixel than the number of quads you are attempting to represent

&lt;center&gt;
{| class=&quot;wikitable&quot; style=&quot;text-align: center;&quot;
|+ Representation
|[[File:Height_texture_map_vertex_example.png|384px|Example]]
|}&lt;/center&gt;

= Additional Information =
== ROAM terrain engine ==
* Official ROAM [http://www.cognigraph.com/ROAM_homepage/ page]
* Gamasutra has a nice [http://www.gamasutra.com/view/feature/3188/realtime_dynamic_level_of_detail_.php article] on ROAM
* various other [http://vterrain.org/LOD/Implementations/ implementations] of LOD terrain

[[Category:Map Dev]]</text>
      <sha1>h4jzbwpat3oom18zg7kl9x52bds2z2o</sha1>
    </revision>
  </page>
  <page>
    <title>Mapdev:howto height blender</title>
    <ns>0</ns>
    <id>3251</id>
    <revision>
      <id>28295</id>
      <parentid>27675</parentid>
      <timestamp>2014-02-22T00:31:27Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>recategorise -&gt; Map Dev (also, category at _bottom_ of markup)</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1574">= Creating a Heightmap in Blender =
= [http://www.youtube.com/embed/7f2tYgyF0W8 Video] =
== Video Script ==
1. Delete Cube and Light

2. Create Terrain Mesh
 - add plane
 - enter edit mode
 - scale plane to size you want
 - subdivide plane to match grid
 - enter object mode

3. Add Multires Modifyer
 - set subdivision to simple
 - subdivide until level 6
 - set preview level to 6

4. Sculpt Terrain Mesh
 - enter sculpt mode
 - set transform locks
 - sculpt
 - enter object mode

5. setup camera
 - select camera
 - set position and rotation
 - change to camera view
 - set camera to ORTHO
 - set scale

6. Setup Render
 - set render dimensions
The height map resolution is defined as SMU * 64 + 1, see [[Mapdev:height]]

7. Setup compositor
 - change space type to node editor
 - select compositor nodes
 - check use nodes
 - redirect Z
 - add normalise
 - add invert
 - render
[[File:Blender-node000.png|600px]]

8. Colour Management
 - set display device to none

9. Save
 - set type to tiff
 - set BW
 - set depth to 16bpp

==Additional Information==
* Need discussion on non square maps, camera settings for altering which dimension gets priority when rendering.
* Consider using this type of material to help understand your sculpting
[[File:Blender-node001.png|600px]]
* if your ram doesnt allow rendering large maps due to image dimensions, consider the render regions add on.

=== Examples ===
Height map [[File:Blender-screen-000.png]] Visual of build/walk [[File:Blender-screen-001.png]] Detail distribution [[File:Blender-screen-002.png]]
[[Category:Map Dev]]</text>
      <sha1>m514ibycqmb7i4kvzbczxwyan7vha94</sha1>
    </revision>
  </page>
  <page>
    <title>Mapdev:lightemission</title>
    <ns>0</ns>
    <id>3446</id>
    <revision>
      <id>30848</id>
      <parentid>30431</parentid>
      <timestamp>2018-12-18T15:39:50Z</timestamp>
      <contributor>
        <username>Gajop</username>
        <id>2804</id>
      </contributor>
      <comment>/* mapinfo.lua */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1284">= Light Emission Texture =
Adds colour to a fragment (pixel). The colour added is the RGB colour of the emission texture, while the alpha of the emission texture determines the amount of the original colour that remains. 

Can be used for accentuation. For example, metal spots in shadowed regions
&lt;center&gt;
{| class=&quot;wikitable&quot;
|+ Example
| 
[[File:Map without light emission.jpg|frameless|Map without light emission]]
 || 
[[File:Map with light emission.jpg|frameless|Map with light emission]]
|-
! Without Light Emission Texture!! With Light Emission Texture
|}&lt;/center&gt;

= Specification =
== mapinfo.lua ==
The relevant sections of the [[Mapdev:mapinfo.lua|mapinfo.lua]]
&lt;pre&gt;
local mapinfo = {
   ...
   resources = {
      ...
      lightEmissionTex = &quot;light_emission.png&quot;,
      ...
   },
   ...
}&lt;/pre&gt;

== Image File==
{| class=&quot;wikitable&quot; width=&quot;100%&quot;
! width=&quot;15%&quot; | File Location
| ./maps/
|-
! File Format
| PNG, TGA
|-
! Colour Depth
| 8bpp
|-
! Channels
| RGBA
|-
! Resolution
| Any, recommended powers of two, will be stretched over the terrain. Should be the same size as the [[Mapdev:specular]] image
|}
&lt;pre&gt;
Modifies the fragment color as follows
 
fragmentColor.rgb = fragmentColor.rgb * (1 - lightEmissionTex.a) + lightEmissionTex.rgb
&lt;/pre&gt;

[[Category:Map Dev]]</text>
      <sha1>axee53y85hf3e4144z1tuton02nnp6l</sha1>
    </revision>
  </page>
  <page>
    <title>Mapdev:mapinfo.lua</title>
    <ns>0</ns>
    <id>3268</id>
    <revision>
      <id>31471</id>
      <parentid>31470</parentid>
      <timestamp>2021-02-17T20:18:08Z</timestamp>
      <contributor>
        <username>Beherith</username>
        <id>2441</id>
      </contributor>
      <comment>/* water */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="25914">= mapinfo.lua Reference =
This file is the primary configuration file for maps, list many things including resources, attributes, ad properties.

==Source==
The engine source code which reads this file from the map is viewable here:
* {{sourcelink|file=rts/Map/MapInfo.cpp}}
* {{sourcelink|file=rts/Map/MapParser.cpp}}

== Example ==
Can be found in the [https://github.com/jk3064/Map-Blueprint/archive/master.zip map blueprint]

= File Location =
relative to the root directory of the map
: ./mapinfo.lua

= Formatting =
check [http://www.lua.org/docs.html Lua Documentation] for syntax etc.

In this wiki page, variables are organised as such:
{{tag|name=VariableName|type=type|range=[valid range]|special=Required|default=value
|description=Description}}

== Data Types ==
{{DataTypes}}

= Sections =
== mapinfo ==
&lt;pre&gt;local mapinfo = {
   name        = &quot;MyMap&quot;,
   shortname   = &quot;&quot;,
   description = &quot;&quot;,
   author      = &quot;&quot;,
   version     = &quot;1.0&quot;,
   --mutator   = &quot;deployment&quot;;
   mapfile     = &quot;maps/mymap.smf&quot;, -- // location of smf/sm3 file
   modtype     = 3, --// 1=primary, 0=hidden, 3=map
   depend      = {&quot;Map Helper v1&quot;},
   replace     = {},

   --startpic   = &quot;&quot;, --// deprecated
   --StartMusic = &quot;&quot;, --// deprecated

   maphardness     = 100,
   notDeformable   = false,
   gravity         = 130,
   tidalStrength   = 0,
   maxMetal        = 0.02,
   extractorRadius = 500.0,
   voidWater       = false,
   voidGround      = false,
   autoShowMetal   = true,

   smf = {
      ...
   },

   sound = {
      ...
   },

   resources = {
      ...
   },

   splats = {
      ...
   },

   atmosphere = {
      ...
   },

   grass = {
      ...
   },

   lighting = {
      ...
   },

   water = {
      ...
   },

   teams = {
      ...
   },

   terrainTypes = {
      ...
   },

   custom = {
      ...
   },
}&lt;/pre&gt;

{{tag|name=name|type=string|special=Required|default=none
|description=Name of the map}}

{{tag|name=shortname|type=string|special=Required
|description=maps will not show in the map list without a valid shortname(not sure on its requirements)}} 

{{tag|name=description|type=string|default=&lt;span style=&quot;color:#cccccc;text-shadow: #111 2px 2px 2px;&quot;&gt;name&lt;/span&gt;
|description=The description of the map that shows in the multiplayer battleroom}}

{{tag|name=author|type=string|default=&quot;&quot;
|description=Author of the map}}

{{tag|name=version|type=string
|description=version, appended to name}}

{{tag|name=mutator|type=string}}

{{tag|name=mapfile|type=string
|description=location of smf/sm3 file}}

{{tag|name=modtype|type=int|range=[013]|special=Required
|description=1=primary, 0=hidden, 3=map}}

{{tag|name=depend|special=Required}}

{{tag|name=replace}}

{{tag|name=maphardness|type=float|default=100.0
|description=Defines how much a map will deform from impacts. Higher values mean less deformation, negative values will result in negative deformation (really funny looking)}}

{{tag|name=notDeformable|type=bool|default=false
|description=Setting it to 1 means that no explosions can deform the map.}}

{{tag|name=gravity|type=float|range=[0.001-max]|default=130.0
|description=As you would expect, affects ballistics and how far units fly after an explosion. The force of gravity in units/sec^2}}

{{tag|name=tidalStrength|type=float|range=[0.0-max]|default=0.0
|description=The amount of energy which will be given by tidal generators.}}

{{tag|name=maxMetal|type=float|range=[0.0-max]|default=0.02
|description=How much metal a map square with the maximum metal value gives.}}

{{tag|name=extractorRadius|type=float|range=[0.0-max]|default=500
|description=The radius of effect that a single extractor will extract from. If two radii intersect, both extractors will suffer from reduced output.}}

{{tag|name=voidWater|type=bool|default=false
|description=Voidwater means there will be no water plane, and all parts of the map under water will be completely transparent, to show the skybox through the map. For example, check [http://springrts.com/phpbb/viewtopic.php?f=13&amp;t=20684&amp;hilit=apophis Apophis_v2]}}. Additionally for this to work, the &lt;code&gt;mapinfo.water.planeColor&lt;/code&gt; variable must not be specified in the mapinfo.lua file, delete or comment it out if it exists.

{{tag|name=voidGround|type=bool|default=false
|special=&lt;span class=&quot;warning&quot;&gt;New in 92.0&lt;/span&gt;
|description=Allows portions of the ground to be invisible if the map was compiled with a diffuse image that has an alpha channel. The terrain still exists, its just transparent.}}. 


{{tag|name=voidAlphaMin|type=float|default=0.9
|description=Controls what alpha level the transparency trigger.}}. 


{{tag|name=autoShowMetal|type=bool|default=true
|description=Defines whether the metal map (F4 mode) is shown automatically when a mex is queued for placement.}}

== smf ==
&lt;pre&gt;local mapinfo = {
   ...
   smf = {
      minHeight = 1000,
      maxHeight = -300,
      minimapTex = &quot;&quot;,
      smtFileName0 = &quot;&quot;,
      smtFileName1 = &quot;&quot;,
      smtFileName.. = &quot;&quot;,
      smtFileNameN = &quot;&quot;,
   },
   ...
}&lt;/pre&gt;
{{tag|name=minHeight|type=float|default=0.0
|description=Overrides the minimum map height specified while compiling. Compile time height used if undefined}}

{{tag|name=maxHeight|type=float|default=0.0
|description=Overrides the maximum map height specified while compiling. Compile time height used if undefined}}

{{tag|name=minimapTex|type=string
|special=&lt;span class=&quot;warning&quot;&gt;New in 99.0&lt;/span&gt;
| description=Overrides the minimap with an image of your choice, smf used if undefined or invalid}} 

{{tag|name=metalmapTex|type=string
|special=&lt;span class=&quot;warning&quot;&gt;New in 99.0&lt;/span&gt;
| description=Overrides the metalmap with an image of your choice, smf used if undefined or invalid}} 

{{tag|name=typemapTex|type=string
|special=&lt;span class=&quot;warning&quot;&gt;New in 99.0&lt;/span&gt;
| description=Overrides the typemap with an image of your choice, smf used if undefined or invalid}} 

{{tag|name=grassmapTex|type=string
|special=&lt;span class=&quot;warning&quot;&gt;New in 99.0&lt;/span&gt;
| description=Overrides the grassmap with an image of your choice, smf used if undefined or invalid}} 

{{tag|name=smtFileName[N]|type=string}}

== sound ==
&lt;pre&gt;local mapinfo = {
   ...
   sound = {
      preset = &quot;default&quot;,

      passfilter = {
         ...
      },

      reverb = {
         ...
      },
   },
   ...
}&lt;/pre&gt;

{{tag|name=preset|type=string|default=&quot;default&quot;
|description=Sets the _reverb_ preset (= echo parameters), passfilter (the direct sound) is unchanged. To get a list of all possible presets check: [https://github.com/spring/spring/blob/master/rts/System/Sound/OpenAL/EFXPresets.cpp EFXPresets.cpp]}}

{{Tip|You can change the preset at runtime via:
* /tset UseEFX [1&amp;#124;0]
* /tset snd_eaxpreset preset_name   (may change to a real cmd in the future)
* /tset snd_filter %gainlf %gainhf  (may    &quot;   &quot;  &quot;  &quot;    &quot;  &quot;   &quot;    &quot;   )}}

=== passfilter ===
Note, you likely want to set these tags due to the fact that they are _not_ set by `preset`!  So if you want to create a muffled sound you need to use them.
&lt;pre&gt;local mapinfo = {
   ...
   sound = {
      ...
      passfilter = {
         gainlf = 1.0,
         gainhf = 1.0,
      },
      ...
   },
   ...
}&lt;/pre&gt;

{{tag|name=gainlf|type=float}}

{{tag|name=gainhf|type=float}}

=== reverb ===
Normally you just want use the `preset` tag but you can use handtweak a preset if wanted with the following tags. To know their function &amp; ranges check the official OpenAL1.1 SDK document.
&lt;pre&gt;local mapinfo = {
   ...
   sound = {
      ...
      reverb = {         
         --density
         --diffusion
         --gain
         --gainhf
         --gainlf
         --decaytime
         --decayhflimit
         --decayhfratio
         --decaylfratio
         --reflectionsgain
         --reflectionsdelay
         --reflectionspan
         --latereverbgain
         --latereverbdelay
         --latereverbpan
         --echotime
         --echodepth
         --modtime
         --moddepth
         --airabsorptiongainhf
         --hfreference
         --lfreference
         --roomrollofffactor
      },
   },
   ...
}&lt;/pre&gt;

== resources ==
&lt;pre&gt;local mapinfo = {
   ...
   resources = {
      grassBladeTex = &quot;&quot;,
      grassShadingTex = &quot;&quot;,
      detailTex = &quot;&quot;,
      specularTex = &quot;&quot;,
      splatDetailTex = &quot;&quot;,
      splatDistrTex = &quot;&quot;,
      skyReflectModTex = &quot;&quot;,
      detailNormalTex = &quot;&quot;,
      lightEmissionTex = &quot;&quot;,
      parallaxHeightTex = &quot;&quot;,
   },
   ...
}&lt;/pre&gt;

{{tag|name=grassBladeTex|type=string
|description=Specifies the texture to be used on the grass blades themselves. Green-yellow gradients make for some interesting effects. Defaults to the internally generated blade texture. More Information: [[Mapdev:grass]]}}

{{tag|name=grassShadingTex|type=string
|description=Specifies the color variation of the grass across the map. This defaults to the minimap, so the grass color can match the map color. More Information: [[Mapdev:grass]]}}

{{tag|name=detailTex|type=string
|description=Specifies the detail texture for the map. More Information: [[Mapdev:detail]]}}

{{tag|name=specularTex|type=string
|description=More Information: [[Mapdev:specular]]}}

{{tag|name=splatDetailTex|type=string
|description=More Information: [[Mapdev:splatdetail]]}}

{{tag|name=splatDistrTex|type=string
|description=More Information: [[Mapdev:splatdetail]]}}

{{tag|name=skyReflectModTex|type=string
|description=More Information: [[Mapdev:skyreflectmod]]}}

{{tag|name=detailNormalTex|type=string
|description=More Information: [[Mapdev:normal]]}}

{{tag|name=lightEmissionTex|type=string
|description=More Information: [[Mapdev:lightemission]]}}

{{tag|name=parallaxHeightTex|type=string
|description=More Information: [[Mapdev:parallax]]}}

== splats ==
&lt;pre&gt;local mapinfo = {
   ...
   splats = {
      texScales = {0.02, 0.02, 0.02, 0.02},
      texMults  = {1.0, 1.0, 1.0, 1.0},
   },
   ...
}&lt;/pre&gt;
{{tag|name=texScales|type=float[4]
|default={0.2, 0.2, 0.2, 0.2}|description=Scale value for the splat texture in the RGBA channels respectively.}}

{{tag|name=texMults|type=float[4]
|default={1.0, 1.0, 1.0, 1.0}|description=Value for the splat texture in the RGBA channels respectively.}}

== atmosphere ==
&lt;pre&gt;local mapinfo = {
   ...
   atmosphere = {
      minWind      = 5.0,
      maxWind      = 25.0,

      fogStart     = 0.1,
      fogEnd       = 1.0,
      fogColor     = {0.7, 0.7, 0.8},

      sunColor     = {1.0, 1.0, 1.0},
      skyColor     = {0.1, 0.15, 0.7},
      skyDir       = {0.0, 0.0, -1.0},
      skyBox       = &quot;&quot;,

      cloudDensity = 0.5,
      cloudColor   = {1.0, 1.0, 1.0},
   },
   ...
}&lt;/pre&gt;

{{tag|name=minWind|type=float|range=[0.0-max]|default=5.0|
description=The minimum amount of energy the wind on the map will give. is clamped to maxwind}}

{{tag|name=maxWind|type=float|range=[0.0-max]|default=25.0
|description=The maximum amount of energy the wind on the map will give}}

{{tag|name=fogStart|type=float|default=0.1
|description=The distance from the camera at which the fog will start. &lt;code&gt;viewRange * fogStart&lt;/code&gt;}}

{{tag|name=fogEnd|type=float|default=1.0
|description=The distance from the camera that fog is opaque. &lt;code&gt;viewRange * fogEnd&lt;/code&gt; }}}

{{tag|name=fogColor|type=rgb|default={0.7, 0.7, 0.8}
|description=The color of the fog and the infinite plane below the world. The values are in the order Red, Green, Blue. However, giving values higher than 1.0 will give brighter fog and less than 0.0 will give darker}}

{{tag|name=sunColor|type=rgb|default={1.0, 1.0, 1.0}
|description=The color of the sun in the sky. The values are in the order Red, Green, Blue. This will also effect the size of the star. As the values increase (including over 1.0), the disc will get bigger; the inverse is also true}}

{{tag|name=skyColor|type=rgb|default={0.1, 0.15, 0.7}
|description=The color of the sky itself. The values are in the order Red, Green, Blue}}

{{tag|name=skyDir|type=float[3]|default={0.0, 0.0, -1.0}
|description=Is normalised vector}}

{{tag|name=skyBox|type=string
|description=Specify a .dds skybox (also called skycube) for examples and resources see this [http://springrts.com/phpbb/viewtopic.php?f=56&amp;t=11009 thread]}}

{{tag|name=cloudDensity|type=float|range=[0.0-max]|default=0.5
|description=The amount of clouds in the sky}}

{{tag|name=cloudColor|type=rgb
|default={1.0, 1.0, 1.0}|description=The color of the clouds}}

== grass ==
The shader for grass color at https://github.com/spring/spring/blob/266b51ad4c0301103e269a13f8e72f9c26511b4e/cont/base/springcontent/shaders/GLSL/GrassFragProg.glsl#L48 samples grassBladeTex, and multiplies it with grassShadingTex (which defaults to minimap)



&lt;pre&gt;local mapinfo = {
   ...
   grass = {
      bladeWaveScale = 1.0,
      bladeWidth  = 0.32,
      bladeHeight = 4.0,
      bladeAngle  = 1.57,
      bladeColor  = {0.59, 0.81, 0.57},
      maxStrawsPerTurf = 150,
   },
   ...
}&lt;/pre&gt;
{{tag|name=bladeWaveScale|type=float|default=1.0
|description=Specifies how much the wind should effect grass blade movement, as well as the amplitude of the grass motion. Setting it to 0 will stop grass animation}}

{{tag|name=bladeWidth|type=float|default=0.32
|description=Specifies the width of each blade of grass}}

{{tag|name=bladeHeight|type=float|default=4.0
|description=Specifies the length of each blade of grass}}

{{tag|name=bladeAngle|type=float|default=1.57
|description=Specifies the curvature of each blade of grass. Unit is radians. 0 means completely straight blades of grass}}

{{tag|name=maxStrawsPerTurf|type=int|default=150
|description=The maximum number of grass blades per 'turf', A turf is approximately 32x32 elmos. }}

{{tag|name=bladeColor|type=rgb|default={0.59, 0.81, 0.57}
|description=does nothing when `grassBladeTex` is set}}

== Lighting ==
&lt;pre&gt;local mapinfo = {
   ...
   lighting = {
      --// dynsun
      sunStartAngle = 0.0,
      sunOrbitTime  = 1440.0,
      sunDir        = {0.0, 1.0, 2.0, 1e9},

      --// unit &amp; ground lighting
      groundAmbientColor  = {0.5, 0.5, 0.5},
      groundDiffuseColor  = {0.5, 0.5, 0.5},
      groundSpecularColor = {0.1, 0.1, 0.1},
      groundShadowDensity = 0.8,
      unitAmbientColor    = {0.4, 0.4, 0.4},
      unitDiffuseColor    = {0.7, 0.7, 0.7},
      unitSpecularColor   = {0.7, 0.7, 0.7},
      unitShadowDensity   = 0.8,
      
      specularExponent    = 100.0,
   },
   ...
}&lt;/pre&gt;
{{tag|name=sunStartAngle|type=float|default=0.0}}

{{tag|name=sunOrbitTime|type=float|default=1440.0}}

{{tag|name=sunDir|type=float[3]|default={0.0, 1.0, 2.0}
|description=The direction of the sun, which is normalized by Spring. The Y-axis is up}}

{{tag|name=groundAmbientColor|type=rgb|default={0.5, 0.5, 0.5}
|description=The ambient (non-sun-lit) color of ground, grass, trees and other features. The values are in the order Red, Green, Blue}}

{{tag|name=groundDiffuseColor|type=rgb|default={0.5, 05, 0.5}
|description=The color of ground where it is fully sun lit (added to GroundAmbientColor). The values are in the order Red, Green, Blue}}

{{tag|name=groundSpecularColor|type=rgb|default={0.1, 0.1, 0.1}
|description=and its effect when a specular map is present?}}

{{tag|name=groundShadowDensity|type=float|default=0.8
|description=How far from the non shadowed to the ambient color stuff in shadow will go.}}

{{tag|name=unitAmbientColor|type=float|default={0.4, 0.4, 0.4}
|description=The ambient (non-sun-lit) color of units and corpses}}

{{tag|name=unitDiffuseColor|type=rgb|default={0.7, 0.7, 0.7}
|description=The color of units where they is fully sun lit (added to UnitAmbientColor). The color of units where they is fully sun lit (added to UnitAmbientColor)}}

{{tag|name=unitSpecularColor|type=rgb|default=unitDiffuseColor}}

{{tag|name=unitShadowDensity|type=float|default=0.8
|description=How far from the non shadowed to the ambient color stuff in shadow will go}}

{{tag|name=specularExponent|type=float|default=100}}

== water ==
&lt;pre&gt;local mapinfo = {
   ...
   water = {
      damage =  0.0,

      repeatX = 0.0,
      repeatY = 0.0,

      absorb    = {0.0, 0.0, 0.0},
      baseColor = {0.0, 0.0, 0.0},
      minColor  = {0.0, 0.0, 0.0},

      ambientFactor  = 1.0,
      diffuseFactor  = 1.0,
      specularFactor = 1.0,
      specularPower  = 20.0,

      planeColor = {0.0, 0.4, 0.0},

      surfaceColor  = {0.75, 0.8, 0.85},
      surfaceAlpha  = 0.55,
      diffuseColor  = {1.0, 1.0, 1.0},
      specularColor = {0.5, 0.5, 0.5},

      fresnelMin   = 0.2,
      fresnelMax   = 0.8,
      fresnelPower = 4.0,

      reflectionDistortion = 1.0,

      blurBase      = 2.0,
      blurExponent = 1.5,

      perlinStartFreq  =  8.0,
      perlinLacunarity = 3.0,
      perlinAmplitude  =  0.9,
      windSpeed = 1.0, --// does nothing yet

      shoreWaves = true,
      forceRendering = false,

      --// undefined == load them from resources.lua!
      --texture =       &quot;&quot;,
      --foamTexture =   &quot;&quot;,
      --normalTexture = &quot;&quot;,
      --caustics = {
      --   &quot;&quot;,
      --   &quot;&quot;,
      --},

   },
   ...
}&lt;/pre&gt;
{{tag|name=damage|type=float|default=0.0
|description=Number of hit points per game frame (30 frames per second) a unit will be damaged if it is in the water. As of 95.0 by default damage is also applied to hovercraft units. i wonder if this can be made to give life...?}}

{{tag|name=repeatX|type=float|default=0.0
|description=effects the filing frequency of the watertexture. E.g. how many times the watertexture (default ocean.jpg) will be repeated across the size of the entire map. Only affects basic water. Sane ranges[1-32] }}

{{tag|name=repeatY|type=float|default=0.0
|description=effects the filing frequency of the watertexture. E.g. how many times the watertexture (default ocean.jpg) will be repeated across the size of the entire map. Only affects basic water.  Sane ranges[1-32] }}

{{tag|name=absorb|type=rgb|default={0.0, 0.0, 0.0}
|description=How fast different colors (RGB in order) are absorbed by the water. Can be used to make the water look murky at deeper sections and so on. How this works: the waterabsorb value for the color channel gets multiplied by the depth of the water at a point, and this product gets subtracted from WaterBaseColor, until WaterMinColor is reached. Example: WaterAbsorb is 0.01, for the red channel, and we want to know how much red will be left in the water at a Spring elevation of -100, since 0.01*100= 1 , at this depth, there will be no more red component in the water, unless WaterMinColor is higher than 0 on the red channel}}

{{tag|name=baseColor|type=rgb|default={0.0, 0.0, 0.0}
|description=The color of the water just beneath the surface plane. This is the starting color from which deeper waters will absorb more color. The values are in the order Red, Green, Blue}}

{{tag|name=minColor|type=rgb|default={0.0, 0.0, 0.0}
|description=The smallest values the water will go down to due to WaterAbsorb}}

{{tag|name=ambientFactor|type=float|default=1.0
|description=How much ambient (undirected) light (ambientColor) the water surface has}}

{{tag|name=diffuseFactor|type=float|default=1.0
|description=How much diffuse (sun lit, diffuseColor) color will be applied to the water surface}}

{{tag|name=specularFactor|type=float|default=1.0
|description=Specifies how much light is reflected from the sun, sane range [0-5]}}

{{tag|name=specularPower|type=float|default=20.0
|description=Specifies how 'polished' the surface of the water is. Small values provide wide, large reflections of the sun (specularcolor), large values provide more pointlike reflections, sane range [1-256]}}

{{tag|name=planeColor|type=rgb|default={0.0, 0.4, 0.0}
|description=This sets the color of the groundplane under the water outside the map boundaries}}

{{tag|name=surfaceColor|type=rgb|default={0.75, 0.8, 0.85}
|description=The color of the water surface. Mostly affects the colors of the reflections off the top of the water. Has no effect on bump mapped water!}}

{{tag|name=surfaceAlpha|type=float|default=0.55
|description= Transparency of the water surface. 0 meaning almost fully transparent water plane(low amount of reflections visible), and 1 being nearly opaque (massive amount of reflections)}}

{{tag|name=diffuseColor|type=rgb|default=value
|description=This specifies the diffuse color of the water body. WARNING: use of this tag disables the effect of WaterAbsorb , in fact, this tag does nothing but disable WaterAbsorb. Avoid}}

{{tag|name=specularColor|type=rgb|default=lighting.groundDiffuseColor
|description=This will be the color of specular reflections coming from the sun only on the water surface}}

{{tag|name=fresnelMin|type=float|default=0.2
|description=This defines the minimum amount of light the water surface will reflect when looking vertically down on it [0-1]. Small values will make the water very transparent (non-reflective) when looking straight down on it. Large values will make the water reflect a lot even when looking straight down.}}

{{tag|name=fresnelMax|type=float|default=0.8
|description=This defines the maximum amount of light the water surface will reflect when looking horizontally (parallel to the water plane) across it [0-1]. Small values will make the water very transparent (non-reflective) even when looking straight across it. Large values will make the water reflect a lot when looking across.}}

{{tag|name=fresnelPower|type=float|default=4.0
|description=This is how quickly the water reflectivity goes from fresnelmin to fresnelmax depending on the angle of incidence across the water. [https://github.com/spring/spring/blob/a8cf33ad1d2ac775e6008cd04baa7e859d1f23ec/cont/base/springcontent/shaders/GLSL/bumpWaterFS.glsl#L288 reflColor.a = FresnelMin + FresnelMax * pow(angle, FresnelPower);]}}

{{tag|name=reflectionDistortion|type=float|default=1.0
|description=How much the surface should distort reflections that are cause by waves not being level: ergo it adds more choppyness to your reflections sensible from 0 to 20}}

{{tag|name=blurBase|type=float|default=2.0
|description=Something to do with blur, but it just seems to cause banding with values under 2 and corruption with values above 10}}

{{tag|name=blurExponent|type=float|default=1.5
|description=How much reflections on water surface should be blurred together with the water surface, lower values meaning clearer reflections, (0.2-5) Warning: above 5 seems to cause water corruption}}

{{tag|name=perlinStartFreq|type=float|default=8.0
|description=Wave sizes, smaller = big waves, sensible: [1,20] (influence the wave sizes)}}

{{tag|name=perlinLacunarity|type=float|default=3.0
|description=Defines the size of the perlin waves, small values being big waves ([0.2,5] is sensible)}}

{{tag|name=perlinAmplitude|type=float|default=0.9
|description=Base stillness of water surface, 0 is dead still, 1 is 'windy' .This doesnt affect the bump texture depth, besides the fact that this disables the bump texture when set to 0}}

{{tag|name=windSpeed|type=float|default=1.0
|description=does nothing yet}}

{{tag|name=shoreWaves|type=bool|default=true}}

{{tag|name=forceRendering|type=bool|default=true}}

will have to ask about those undefined tags

== teams ==
&lt;pre&gt;local mapinfo = {
   ...
   teams = {
      [0] = {startPos = {x = 2033, z = 852}},
      [1] = {startPos = {x = 10134, z = 852}},
      [2] = {startPos = {x = 0, z = 0}},
      [3] = {startPos = {x = 0, z = 0}},
      ...
   },
   ...
}&lt;/pre&gt;
Holds an array of start positions

== terrainTypes ==
&lt;pre&gt;local mapinfo = {
   ...
   terrainTypes = {
      [0] = {
         name = &quot;Default&quot;,
         hardness = 1.0,
         receiveTracks = true,
         moveSpeeds = {
            tank  = 1.0,
            kbot  = 1.0,
            hover = 1.0,
            ship  = 1.0,
         },
      },
      [1]  = { 
         ...
      },
      ...
   },
   ...
}&lt;/pre&gt;
Holds an array of start types where each element contains:

{{tag|name=name|type=string
|description=A label for the terrain type}}

{{tag|name=hardness|type=float|range=[0.001-max]|default=1.0
|description=Used as a multiplier against the mapinfo.mapHardness value. Can be used to make a particular terrain type softer or harder. A value of '1' will make it as hard as MapHardness, and 0.5 will make it half as hard}}

{{tag|name=receiveTracks|type=bool|default=true
|description= Effects whether track decals will be placed on the ground from moving vehicles}}

{{tag|name=moveSpeeds.tank|type=float|range=[0.0-max]|default=1.0
|description= Speed multiplier for tanks when travelling on the parent terrain type. A value of '1.0' is normal speed, 0.5 will make them travel at half speed on the parent terrain type}}

{{tag|name=moveSpeeds.kbot|type=float|range=[0.0-max]|default=1.0
|description= Speed multiplier for kbots when travelling on the parent terrain type. A value of '1.0' is normal speed, 0.5 will make them travel at half speed on the parent terrain type}}

{{tag|name=moveSpeeds.hover|type=float|range=[0.0-max]|default=1.0
|description= Speed multiplier for hovercraft when travelling on the parent terrain type. A value of '1.0' is normal speed, 0.5 will make them travel at half speed on the parent terrain type}}

{{tag|name=moveSpeeds.ship|type=float|range=[0.0-max]|default=1
|description= Speed multiplier for ships when travelling on the parent terrain type. A value of '1.0' is normal speed, 0.5 will make them travel at half speed on the parent terrain type}}

== custom ==
&lt;pre&gt;local mapinfo = {
   ...
   custom = {
      fog = {
         color    = {0.26, 0.30, 0.41},
         height   = &quot;80%&quot;, --// allows either absolue sizes or in percent of map's MaxHeight
         fogatten = 0.003,
      },
      precipitation = {
         density   = 30000,
         size      = 1.5,
         speed     = 50,
         windscale = 1.2,
         texture   = 'LuaGaia/effects/snowflake.png',
      },

   },
   ...
}&lt;/pre&gt;

[[Category:Map Dev]]</text>
      <sha1>as3iw7s9qar31vnxjvrkt4xchdqnm8e</sha1>
    </revision>
  </page>
  <page>
    <title>Mapdev:metal</title>
    <ns>0</ns>
    <id>3376</id>
    <revision>
      <id>31288</id>
      <parentid>29250</parentid>
      <timestamp>2020-09-16T14:08:41Z</timestamp>
      <contributor>
        <username>Gajop</username>
        <id>2804</id>
      </contributor>
      <comment>/* mapinfo.lua */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2443">= Metal =
Metal maps are used for the built in resourcing scheme (Metal/Energy), they define metal areas on a battlefield based upon the values in the red channel of the metal map.

{{Caution|There are several games for Spring which use their own resourcing system. If you are creating a map for one of those games a metal map may not be necessary, however it is always nice if you can make your maps as compatible with other games as possible, but this is a choice left entirely up to you.}}
&lt;center&gt;
{| class=&quot;wikitable&quot;
|+ Example
| [[File:Mapdev-metal.png|256px]] || [[File:Mapdev-metal-example.png]]
|-
! Example Metal Map !! Ingame Result
|}&lt;/center&gt;

= Specification =
== mapinfo.lua ==
* [[Mapdev:mapinfo.lua|mapinfo.lua]]
&lt;pre&gt;mapinfo ={
   ...
   maxMetal        = 0.02,
   extractorRadius = 500.0,
   autoShowMetal   = true,
   ...
   smf = {
        ....
        metalmapTex = &quot;&quot;,
        ....
    },
    ...
}&lt;/pre&gt;

== Image File ==
* The red value of pixel corresponds to the metal value.
{| class=&quot;wikitable&quot; width=&quot;100%&quot;
! width=&quot;15%&quot; | File Location
| The metal map is an intermediary file compiled into the SMF file using [[MapConv]] or [[MapConvNG]], it can also be specified in the mapinfo.lua.
|-
! File Format
| Any that the Mapconv programs support
|-
! Colour Depth
| 8bpp
|-
! Channels
| Greyscale
|-
! Resolution
| &lt;center&gt;
{| class=&quot;wikitable&quot; style=&quot;text-align: center;&quot;
!Spring Map Size&lt;sup&gt;*&lt;/sup&gt;
!pixels = Spring Map Size * 32
|-
| 2
| 64
|-
| 4
| 128
|-
| 6
| 256
|-
| ...
| ...
|-
| 32
| 1024
|-
| style=&quot;text-align: left;font-style:italic&quot; colspan=2 | &amp;#42; must be multiples of 2
|}&lt;/center&gt;
|}

= Additional Information =
== Patch Technique ==
If you do want perfect metal patches, use a 6x6 pixel pencil in your image editor with a red value of 255. This combined with setting the &quot;MaxMetal&quot; tag in the definitions to 1, will result in a perfect 2.0 metal generation per patch (using Balanaced Annihilation values). The game use isn't the point however. The fact is that if you can predict how much each spot will output (typically), using the &quot;MaxMetal&quot; parameter, you can easily scale the values up and down. As an example of another extreme, Evolution RTS dictates that all metal patches will output 0.5 metal regardless of the map settings. So whether you need to put a lot of thought into your metal map values depends entirely upon the game for which you are creating the map.

[[Category:Map Dev]]</text>
      <sha1>o0af31t608m53t8j66umsk69umee58e</sha1>
    </revision>
  </page>
  <page>
    <title>Mapdev:minimap</title>
    <ns>0</ns>
    <id>3416</id>
    <revision>
      <id>29249</id>
      <parentid>29214</parentid>
      <timestamp>2015-04-19T04:03:37Z</timestamp>
      <contributor>
        <username>Enetheru</username>
        <id>2783</id>
      </contributor>
      <minor/>
      <comment>/* Image File */  added overrides</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1040">= Mini-Map =
It is traditionally a simplified top down view of the battlefield, it can also be an arbitrary image. It is used in the lobby when viewing and selecting maps.
&lt;center&gt;
{| class=&quot;wikitable&quot;
|+ Example
| [[File:Mapdev-diffuse.jpg]] || [[File:Minimap_example.jpg|400px]]
|-
! Example Minimap !! Example of use
|}&lt;/center&gt;

= Specification =
== mapinfo.lua ==
&lt;code&gt;&lt;pre&gt;
local mapinfo = {
   ...
   smf = {
      ...
      minimapTex = &quot;&quot;,
      ...
   },
   ...
}&lt;/pre&gt;&lt;/code&gt;
== Image File ==
* The mini map will update when the terrain is terraformed to reflect the changes.
* The mini map is used as the grass shading map if a grass shading map hasn't been specified.
{| class=&quot;wikitable&quot; width=&quot;100%&quot;
! width=&quot;15%&quot; | File Location
| This image is an intermediary file compiled into the SMF file using [[MapConv]] or [[MapConvNG]], it can also be specified in the mapinfo.lua
|-
! File Format
| Any that Mapconv programs can use
|-
! Colour Depth
| 8bpp
|-
! Channels
| RGB
|-
! Resolution
| 1024x1024
|}

[[Category:Map Dev]]</text>
      <sha1>7tsy1uqvkyrxv1ff076pl6ifnfk8dd9</sha1>
    </revision>
  </page>
  <page>
    <title>Mapdev:normal</title>
    <ns>0</ns>
    <id>3418</id>
    <revision>
      <id>30846</id>
      <parentid>30768</parentid>
      <timestamp>2018-12-18T15:39:09Z</timestamp>
      <contributor>
        <username>Gajop</username>
        <id>2804</id>
      </contributor>
      <comment>/* mapinfo.lua */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1990">= Normal Texture =
Gives the terrain a normal map. This can be used to suggest small surface details while keeping terrain flat. The RGB channels determine the XYZ of the new surface normal (in tangent space), while the alpha channel determines how much of the original surface normal is kept.

[https://code.google.com/p/gimp-normalmap/ This GIMP plugin] provides various ways to convert heightmaps into normal maps.

{{Caution|Requires clients to have GLSL-spec hardware}}
&lt;center&gt;
{| class=&quot;wikitable&quot;
|+ Example
| {{FIXME}} needs image file || {{FIXME}} needs image file
|-
! Without Normal Map !! With Normal Map
|}&lt;/center&gt;

= Important Info =

* The normal map effect will *not* be shown unless you have a specular map defined. It can be as simple as a full-black with full-black alpha image, TGA 32-bit format is recommended.&lt;br /&gt;
* If you want to merge two normal maps, for instance, one for the terrain and one for the resources (metal, geo vents), it's not as simple as it might sound if you want to do it properly. You can read about it in detail [http://wiki.polycount.com/wiki/Normal_map here]. The &quot;Whiteout&quot; technique is recommended, there is a Photoshop action available for it [https://polycount.com/discussion/163801/udn-and-whiteout-normal-map-blending-photoshop-actions here]&lt;br /&gt;

= Specification =
== mapinfo.lua ==
The relevant sections of the [[Mapdev:mapinfo.lua|mapinfo.lua]]
&lt;pre&gt;
local mapinfo = {
   ...
   resources = {
      ...
      detailNormalTex = &quot;normal.png&quot;,
      ...
   },
   ...
}&lt;/pre&gt;

== Image File==
{| class=&quot;wikitable&quot; width=&quot;100%&quot;
! width=&quot;15%&quot; | File Location
| ./maps/
|-
! File Format
| PNG, TGA
|-
! Colour Depth
| 8bpp
|-
! Channels
| RGBA
|-
! Resolution
| Any, recommended powers of two, will be stretched over the terrain.
|}

&lt;pre&gt;
Modifies the shading normal as follows

shadingNormal.xyz = NORMALIZE(terrainNormal.xyz * (1 - detailNormalTex.a) 
                               + detailNormalTex.rgb)
&lt;/pre&gt;

[[Category:Map Dev]]</text>
      <sha1>93iofa2kf2fgtkrz2t5t94oxaqj0fcb</sha1>
    </revision>
  </page>
  <page>
    <title>Mapdev:parallax</title>
    <ns>0</ns>
    <id>3419</id>
    <revision>
      <id>30840</id>
      <parentid>26717</parentid>
      <timestamp>2018-12-18T15:37:26Z</timestamp>
      <contributor>
        <username>Gajop</username>
        <id>2804</id>
      </contributor>
      <comment>/* mapinfo.lua */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1268">= Parallax Texture =
modifies the diffuse, normal, and specular
TEXTURE COORDINATES before sampling is done

{{FIXME}} description as to why you want to use Parallax textures.
&lt;center&gt;
{| class=&quot;wikitable&quot;
|+ Example
| {{FIXME}} needs image file || {{FIXME}} needs image file
|-
! Without Parallax Map !! With Parallax Map
|}&lt;/center&gt;
= Specification =
== mapinfo.lua ==
The relevant sections of the [[Mapdev:mapinfo.lua|mapinfo.lua]]
&lt;pre&gt;
local mapinfo = {
   ...
   resources = {
      ...
      parallaxHeightTex = &quot;parallax.png&quot;,
      ...
   },
   ...
}&lt;/pre&gt;

== Image File==
{| class=&quot;wikitable&quot; width=&quot;100%&quot;
! width=&quot;15%&quot; | File Location
| ./maps/
|-
! File Format
| PNG, TGA
|-
! Colour Depth
| 8bpp
|-
! Channels
| RGBA
|-
! Resolution
| Any, recommended powers of two, will be stretched over the terrain. Should be the same size as the [[Mapdev:specular]] image
|}
{{FIXME}} needs cleaning.
&lt;pre&gt;
height, scale, and bias parameters are packed
as follows to produce a texel offset-factor f

h = (parallaxHeightTex.r * 65280 + parallaxHeightTex.g * 256) / 65536
s = (parallaxHeightTex.b)
b = (parallaxHeightTex.a - 0.5)
f = h * s + b
&lt;/pre&gt;

= Forum Discussions =
* [http://springrts.com/phpbb/viewtopic.php?f=13&amp;t=29108 Parallax Maps?]

[[Category:Map Dev]]</text>
      <sha1>qacvtl125ez4nwot0xnwi2knevexvrk</sha1>
    </revision>
  </page>
  <page>
    <title>Mapdev:performance</title>
    <ns>0</ns>
    <id>3431</id>
    <revision>
      <id>28293</id>
      <parentid>27709</parentid>
      <timestamp>2014-02-22T00:25:25Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>recategorise &quot;Map Dev&quot;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1636">= Performance =
Tips on optimizing your maps performance

== SMT File Size ==
Spring map tile files are essentially a large array of 32x32 pixel images which the SMF file references in its map tile index.

To reduce the size of your map, consider aligning any texture images to a 32x32 grid. When compiling, an image matching algorithm may be able to detect duplicate tiles and reference only the one.

Infact any repeated features on the map, so long as they are shifted to 32x32 pixel multiples will allow the map compiler to optimise it.

== Other ==
{{FIXME}} clean up

Download GPU-z.
That lets you monitor the amount of gpu ram in use as well as gpu load %. Remember that the whole map gets loaded into it, along with all the textures. If you do a /give all ingame and your gpu ram use goes above 512MB (providing your card has at least 1gb) then it is probably too much. 

TLDR: get gpu-z, look at what actually changes your performance. Ignore whiners standing in the way of progress. Tell whiners to /advmapshading 0

As a stopgap measure, .dds textures are recommended because they use as much gpu ram as their filesize. All png and other images get decompressed and mipmapped. A non dds 2k square image will occupy 16 MB gpu ram.

People with shit gpus complaining is nothing new, 256MB is insufficient anyway. 

All in all, its unlikely to eat too much performance by using uncompressed 2k images, SSMF is taxing for many peoples gpus anyway.

remove waterplanecolor tag from smd. It will stop water being all around the map.

(from [http://springrts.com/phpbb/viewtopic.php?f=13&amp;t=29579 forum topic] )

[[Category:Map Dev]]</text>
      <sha1>cbpbwxddn4muuumql6ujlifop8vxhz4</sha1>
    </revision>
  </page>
  <page>
    <title>Mapdev:set.lua</title>
    <ns>0</ns>
    <id>3389</id>
    <revision>
      <id>31224</id>
      <parentid>28761</parentid>
      <timestamp>2020-05-06T03:33:48Z</timestamp>
      <contributor>
        <username>Gajop</username>
        <id>2804</id>
      </contributor>
      <comment>/* setcfg */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1506">= set.lua Reference =
This file lists all the units, buildings and features that belong to the gaia team, their locations and orientation.

==Source==
The engine source code which reads this file from the map is viewable here:
* ???
== Example ==
Can be found in the [https://github.com/jk3064/Map-Blueprint/archive/master.zip map blueprint]

= File Location =
relative to the root directory of the map
: ./mapconfig/featureplacer/set.lua

= Formatting =
check [http://www.lua.org/docs.html Lua Documentation] for syntax etc.

In this wiki page, variables are organised as such:
{{tag|name=VariableName|type=type|range=[valid range]|special=Required|default=value
|description=Description}}

== Data Types ==
{{DataTypes}}

= Sections =
== setcfg ==
&lt;pre&gt;
----------------------------------------------------------
-- AutoCreated by FeaturePlacer (by smoth)

local setcfg = {
   unitlist = {
   ...
   { name = 'name', x = 0 , z = 0 , rot = &quot;0&quot;},
   ...
   },
   buildinglist = {
   ...
   { name = 'name', x = 0 , z = 0 , rot = &quot;0&quot;},
   ...
   },
   objectlist = {
   ...
   { name = 'name', x = 0 , z = 0 , rot = &quot;0&quot;},
   ...
   },
}
return setcfg&lt;/pre&gt;

{{tag|name=name|type=string
|description=name of the unit, feature, or building owned by the gaia team}}

{{tag|name=x|type=integer
|description=x position on the map}}

{{tag|name=z|type=integer
|description=z position on the map}}

{{tag|name=rot|type=string
|description=a number which specifies the rotation of the object}}

[[Category:Map Dev]]</text>
      <sha1>68q7volssjpx5dneyi4ty90gdq3jk5q</sha1>
    </revision>
  </page>
  <page>
    <title>Mapdev:skybox</title>
    <ns>0</ns>
    <id>3391</id>
    <revision>
      <id>26720</id>
      <parentid>25988</parentid>
      <timestamp>2013-03-20T20:15:29Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>1cat</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1266">= Sky Box =
Is a cubemap projection of a skyline used to enhance the background of the map.
&lt;center&gt;
{| class=&quot;wikitable&quot;
|+ Example
| align=&quot;center&quot; | [[File:Skyboxsimple.gif|292px]] || [[File:Cloudysunset.jpg|350px]]
|-
! Example cube cross before assembling to dds cubemap format !! Ingame Result
|}&lt;/center&gt;

= Specification =
== mapinfo.lua ==
The relevant sections of the mapinfo.lua file that effect the colour of the ground are in the [[Map_Making:mapinfo.lua#atmosphere|atmosphere subtable]]

&lt;code&gt;&lt;pre&gt;
local mapinfo = {
   ...
   atmosphere = {
      ...
      skyBox = &quot;&quot;,
      ...
   },
   ...
}
&lt;/pre&gt;&lt;/code&gt;
== Image File ==
{| class=&quot;wikitable&quot; width=&quot;100%&quot;
! width=&quot;15%&quot; | File Location
| ./maps/
|-
! File Format
| DXT1 compressed dds cubemap
|-
! Colour Depth
| 4bpp
|-
! Channels
| RGB
|-
! Resolution
| Powers of two, recommended higher than 512x512
|}
= Additional Information =
== Howto's ==
* [[Mapdev:Howto_skybox]]
* [http://judegodin.wordpress.com/2011/12/06/how-the-hell-do-i-make-a-cubemap/ howto with 3dsmax]
* [http://www.cgtextures.com/content.php?action=tutorial&amp;name=cubemaps cgtextures.com]
* [http://wiki.polycount.net/CubeMap#Software polycount.net]
* [http://en.wikipedia.org/wiki/Cube_mapping wikipedia]

[[Category:Map Dev]]</text>
      <sha1>iiw5kwpkudampt2ex2wiucm421mxaw8</sha1>
    </revision>
  </page>
  <page>
    <title>Mapdev:skyreflectmod</title>
    <ns>0</ns>
    <id>3445</id>
    <revision>
      <id>30847</id>
      <parentid>26732</parentid>
      <timestamp>2018-12-18T15:39:39Z</timestamp>
      <contributor>
        <username>Gajop</username>
        <id>2804</id>
      </contributor>
      <comment>/* mapinfo.lua */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1636">= Sky Reflection Modifier Texture =
Sets the weight for mixing the diffuse texture colour with the reflected colour of the sky. This occurs before any other shading calculations use the diffuse colour. 

This can be used to suggest a surface composed of reflective materials, such as ice or crystals.

&lt;center&gt;
{| class=&quot;wikitable&quot;
|+ Example
| [[File: skyreflectmod_without_example.png|300px]]|| [[File: skyreflectmod_with_example.png|300px]]
|-
! Without Sky Reflection Modifier Map !! With Sky Reflection Modifier Map
|}&lt;/center&gt;

= Specification =
== mapinfo.lua ==
The relevant sections of the [[Mapdev:mapinfo.lua|mapinfo.lua]]
&lt;pre&gt;
local mapinfo = {
   ...
   resources = {
      ...
      skyReflectModTex = &quot;skyreflectmod.png&quot;,
      ...
   },
   ...
}&lt;/pre&gt;

== Image File==
{| class=&quot;wikitable&quot; width=&quot;100%&quot;
! width=&quot;15%&quot; | File Location
| ./maps/
|-
! File Format
| PNG, TGA
|-
! Colour Depth
| 8bpp
|-
! Channels
| RGB
|-
! Resolution
| Any, recommended powers of two, will be stretched over the terrain. Should be the same size as the [[Mapdev:specular]] image
|}
&lt;pre&gt;
Modifies the diffuse colours as follows:
diffuseColor.r = diffuseColor.r * (1 - skyReflectModTex.r) +
                   reflectionColor.r * skyReflectModTex.r
diffuseColor.g = diffuseColor.g * (1 - skyReflectModTex.g) +
                   reflectionColor.g * skyReflectModTex.g
diffuseColor.b = diffuseColor.b * (1 - skyReflectModTex.b) +
                   reflectionColor.b * skyReflectModTex.b

Equivalent to the GLSL code: (diffuseColor is a vector)
diffuseColor = mix(diffuseColor, reflectionColor, skyReflectModTex)
&lt;/pre&gt;

[[Category:Map Dev]]</text>
      <sha1>9o06v81m65jlcepejii5hsassjednp6</sha1>
    </revision>
  </page>
  <page>
    <title>Mapdev:specular</title>
    <ns>0</ns>
    <id>3379</id>
    <revision>
      <id>30845</id>
      <parentid>30738</parentid>
      <timestamp>2018-12-18T15:38:59Z</timestamp>
      <contributor>
        <username>Gajop</username>
        <id>2804</id>
      </contributor>
      <comment>/* mapinfo.lua */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2182">= Specular =
Gives you per-pixel control over the color and intensity of specular highlights anywhere on the map. You could eg. make all highlights red, or have them depend on the type of material that a pixel represents, or something more exotic.
The alpha channel defines how &quot;polished&quot; the surface looks (glossiness), and the RGB color is the amount of light that gets reflected for each color channel.
{{Caution|requires clients to have GLSL-spec hardware}}
&lt;center&gt;
{| class=&quot;wikitable&quot;
| [[File:Mapdev-specular.jpg|256px]] || [[File:Mapdev-spec_with.jpg|451px]]
|-
! Example Specular Texture
! Ingame Result
|}&lt;/center&gt;

= Specification =
== mapinfo.lua ==
The relevant sections of the [[Mapdev:mapinfo.lua|mapinfo.lua]]
* If specularTex points to a file that does not exist, you will get full unmoderated specularity based on whatever your map's lighting settings are
&lt;pre&gt;
local mapinfo = {
   resources = {
      ...
      specularTex = &quot;&quot;,
      ...
   },
   ...
   lighting = {
      ...
      groundSpecularColor = {0.1, 0.1, 0.1},
      ...
   },
   ...
}
&lt;/pre&gt;

== Image File ==
{| class=&quot;wikitable&quot; width=&quot;100%&quot;
! width=&quot;15%&quot; | File Location
| ./maps/
|-
! File Format
| PNG, TGA
|-
! Colour Depth
| 8bpp
|-
! Channels
| RGBA
|-
! Resolution
| Any, recommended powers of two, will be stretched over the terrain.
|}
* The RGB channels will control the red, green, and blue contribution per highlight
* The Alpha channel (multiplied by 16) becomes the specular exponent. Or on other words controls the sharpness of the specular highlights, the higher the value the sharper the highlights.
* You have to set the RGB values to zero if you want no specular contribution
* If you omit the alpha channel, or have a fully opaque image, the specular exponent is at its max and the results are a very sharp specular highlights.
{{Caution|If you set the alpha value of the specular texture to zero, or you will get the below result. Use almost zero instead.}}
&lt;center&gt;
{| class=&quot;wikitable&quot;
| [[File:Mapdev-spec_alpha_issue.jpg]]
|}&lt;/center&gt;

= Forum Discussion =
* [http://springrts.com/phpbb/viewtopic.php?f=13&amp;t=21951 Make Your Maps Shiny(er) With SSMF]

[[Category:Map Dev]]</text>
      <sha1>noq7jiz85kk72di4yplwl5mb38oucuq</sha1>
    </revision>
  </page>
  <page>
    <title>Mapdev:splatdetail</title>
    <ns>0</ns>
    <id>3426</id>
    <revision>
      <id>30843</id>
      <parentid>29725</parentid>
      <timestamp>2018-12-18T15:38:21Z</timestamp>
      <contributor>
        <username>Gajop</username>
        <id>2804</id>
      </contributor>
      <comment>/* mapinfo.lua */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3447">= Details =
Splat Detail textures extend the default single detail texture that is applied uniformly over the entire map, by allowing the mapper to specify 4 different greyscale detail textures, and offers control of the strength, spatial distribution and tiling resolution of each detail texture.

Important: Splat Detail textures requires a specular texture [[Mapdev:specular]] to exist and be defined in order to be enabled!

{{Caution|requires clients to have GLSL-spec hardware}}
&lt;center&gt;
{| class=&quot;wikitable&quot;
|+ Example
| [[File:Mapdev-splat-without.jpg|330px]] || [[File:Mapdev-splat-with.jpg|330px]]
|-
! Default Detail Map !! Splat Detail Maps
|-
| colspan=&quot;2&quot; | ''* Click on images for higher res''
|}&lt;/center&gt;

= Specification =
== mapinfo.lua ==
&lt;pre&gt;
local mapinfo = {
   ...
   resources = {
      ...
      splatDistrTex = &quot;splatDistributionTex.tga&quot;,
      splatDetailTex = &quot;splatDetailTex.tga&quot;,
      ...
   },
   ...
   splats = {
      texScales = {0.02, 0.02, 0.02, 0.02},
      texMults = {1.0, 1.0, 1.0, 1.0},
   },
   ...
}&lt;/pre&gt;

=== texScales ===

texScales offers a way to adjust the tiling resolution of each of the 4 splat detail textures. Values of 0.02 are the default values, lower values will increase the size of the textures on the ground, and higher values will decrease the tile size. 

&lt;center&gt;
{| class=&quot;wikitable&quot;
|[[File:Map measure.png|512px|measuring stick]]
|-
! texScales
|}&lt;/center&gt;

=== texMults ===

texMults offers a quick way to adjust the strength at which each detail texture will be blended onto the map. Values of 1.0 are the default values, lower values will make the detail texture fainter, higher values make it more pronounced. This is very useful for fine-tuning the strengths after generating the splat distribution texture, which is time-consuming to manipulate in an image editor, and cant be increased above a certain value there.

== Distribution Image ==
{| class=&quot;wikitable&quot; width=&quot;100%&quot;
! width=&quot;15%&quot; | File Location
| ./maps/
|-
! File Format
| PNG, TGA
|-
! Colour Depth
| 8bpp
|-
! Channels
| RGBA
|-
! Resolution
| Any, recommended powers of two, will be stretched over the terrain.
|}

The RGBA Channels are individual greyscale distribution maps which define which detail textures to splat onto the ground. The intensity of the splatted textures is multipled by the pixel values for the corresponding channels.
&lt;center&gt;
{| class=&quot;wikitable&quot;
|+ Example
| [[File:Mapdev-ddist.gif]] || [[File:Mapdev-ddist.png]]
|-
! Detail Distribution maps !! Combined Result
|}&lt;/center&gt;

== Detail Image ==
{| class=&quot;wikitable&quot; width=&quot;100%&quot;
! width=&quot;15%&quot; | File Location
| ./maps/
|-
! File Format
| PNG, TGA
|-
! Colour Depth
| 8bpp
|-
! Channels
| RGBA
|-
! Resolution
| Any, recommended powers of two, will be tiled over the terrain.
|}
Each Channel represents a seperate greyscale image. The ground colour is multiplied by the pixel values of the channel. The intensity of the effect is also controlled per channel using the {{xtaglink|mapinfo.lua|texMults}} variables, low numbers = less effect. 
&lt;center&gt;
{| class=&quot;wikitable&quot;
|+ Example
| [[File:Mapdev-details.gif]] || [[File:Mapdev-details.png]]
|-
! Individual Detail Textures !! Combined Result
|}&lt;/center&gt;

= Forum Discussion =
* [http://springrts.com/phpbb/viewtopic.php?f=56&amp;t=21565 Detail texture resource thread]
* [http://springrts.com/phpbb/viewtopic.php?f=13&amp;t=22564  Detail texture splatting is ready!]

[[Category:Map Dev]]</text>
      <sha1>iwk33sggzj18xq1hpka0ak07z5mxz9z</sha1>
    </revision>
  </page>
  <page>
    <title>Mapdev:splatdetailnormals</title>
    <ns>0</ns>
    <id>3737</id>
    <revision>
      <id>31088</id>
      <parentid>30844</parentid>
      <timestamp>2019-11-18T11:57:32Z</timestamp>
      <contributor>
        <username>Beherith</username>
        <id>2441</id>
      </contributor>
      <minor/>
      <comment>/* Detail Normal Texture Splatting (DNTS) */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3695">= Detail Normal Texture Splatting (DNTS) =

This extends the existing functionality of SSMF splatted detail textures [[Mapdev:splatdetail]], with the option of specifying 4 different (normal map + greyscale diffuse map) detail textures.

Splatted detail textures only allowed grayscale textures to be overlayed on the map, while DNTS also allows normal maps as well.

Instead of creating a combined detail texture of 4 different single-channel diffuse detail textures stored in a single RGBA image, it uses four separate normal textures. 

The textures must contain the normal maps in the RGB channel (standard normal maps), with an optional diffuse luminance in the alpha channel. 

Beherith recommends using a high-pass filter on the luminance diffuse (alpha) channel, to avoid visible banding when zoomed out. When using PBR materials as DNTS sources, he also recommends mixing the diffuse and ambient occlusion parts of the textures into the diffuse alpha, as well as keeping the alpha channel centered around 50% greyscale, and with preferably a low spread to make sure that diffuse doesnt overpower the nice normals you have added.

The system uses the same splatDistributionTexture as regular SSMF.


'''You cannot specify these options in .smd files, only .lua!'''

Example result:

[[File:dnts_example.jpg|960px]]
== Distribution Image ==
{| class=&quot;wikitable&quot; width=&quot;100%&quot;
! width=&quot;15%&quot; | File Location
| ./maps/
|-
! File Format
| PNG, TGA, DDS
|-
! Colour Depth
| 8bpp
|-
! Channels
| RGBA
|-
! Resolution
| Any, recommended powers of two, will be stretched over the terrain.
|}

The RGBA Channels are individual greyscale distribution maps which define which detail textures to splat onto the ground. The intensity of the splatted textures is multipled by the pixel values for the corresponding channels.
&lt;center&gt;
{| class=&quot;wikitable&quot;
|+ Example
| [[File:Mapdev-ddist.gif]] || [[File:Mapdev-ddist.png]]
|-
! Detail Distribution maps !! Combined Result
|}&lt;/center&gt;

== Detail Normal Textures ==
{| class=&quot;wikitable&quot; width=&quot;100%&quot;
! width=&quot;15%&quot; | File Location
| ./maps/
|-
! File Format
| PNG, TGA, DDS 
|-
! Colour Depth
| 8bpp
|-
! Channels
| RGB for normal maps only, RGBA for normal map + diffuse map in alpha channel. The Y (green) channel of normal maps should be inverted.
|-
! Resolution
| Any, recommended powers of two, will be tiled over the terrain.
|}

&lt;center&gt;
{| class=&quot;wikitable&quot;
|+ Detail Normal Texture Example
| [[File:Mapdev-dnts-normal.jpg|400px]] || [[File:Mapdev-dnts-diffuse-alpha.jpg|400px]]
|-
! Normal texture in RGB channel !! greyscale diffuse in ALPHA channel
|}&lt;/center&gt;

= Specification =

Specify splatDetailNormalTex1 .. splatDetailNormalTex4 in the MAP resources section. splatDetailTex will be unused if and of splatDetailNormalTex[1-4] are present. 

Specify splatDetailNormalDiffuseAlpha=1 to enable diffuse textures stored in alpha channels.

splatDetailNormalDiffuseAlpha=0 is the default value, and will ignore all and any alpha channels in the splatDetailNormalTex's, resulting in a purely normal mapped surface, with no extra diffuse texturing. 

texScales and texMults work identically to [[Mapdev:splatdetail]]

== mapinfo.lua ==
&lt;pre&gt;
local mapinfo = {
   ...
   resources = {
      ...
      splatDistrTex = &quot;splatDistributionTex.tga&quot;,
      splatDetailNormalDiffuseAlpha = 1,
      splatDetailNormalTex = {
         &quot;sandpebbles_NORM.tga&quot;,
         &quot;crystal_245_dnts.dds&quot;,
         &quot;grass_91_dnts.dds&quot;,
         &quot;pebbles_250_dnts_u8888.dds&quot;,
          alpha = true,
      },
      ...
   },
   ...
   splats = {
      texScales = {0.02, 0.02, 0.02, 0.02},
      texMults = {1.0, 1.0, 1.0, 1.0},
   },
   ...
}&lt;/pre&gt;

[[Category:Map Dev]]</text>
      <sha1>csmb3hkc2mvdyodz9yel6odsn214iyc</sha1>
    </revision>
  </page>
  <page>
    <title>Mapdev:sunDir</title>
    <ns>0</ns>
    <id>3851</id>
    <revision>
      <id>31175</id>
      <parentid>31174</parentid>
      <timestamp>2020-02-14T02:20:29Z</timestamp>
      <contributor>
        <username>Forboding angel</username>
        <id>2578</id>
      </contributor>
      <comment>Add a possibly more colloquial term</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="759">&lt;div class=&quot;keywords&quot;&gt; sun, position, direction, sunDir, sun position, sun direction, sun grid &lt;/div&gt;

This grid is meant to show on a 2d plane, where the sun position will be on your map and the values needed for x and z axis positioning.

WARNING - It is entirely possible that the engine causes these values to be mirrored when the map loads, so pay attention. You can make it super easy to see where the sun position is by lowering it significantly (e.g. y = 0.2) and using terrain and trees to see the shadow positions. A little janky, but it works.

Without further adieu, the grid:

[[File:Map_Grid.png]]

If someone wants to make it better, here is a link to the PSD:

https://drive.google.com/file/d/15t9gVU0fsqzPequvxePgVTEe5IhCDw29/view?usp=sharing</text>
      <sha1>bstk03jqp7cy8h0rlzfzdm5pxv03ib1</sha1>
    </revision>
  </page>
  <page>
    <title>Mapdev:terraintype</title>
    <ns>0</ns>
    <id>3417</id>
    <revision>
      <id>29251</id>
      <parentid>29246</parentid>
      <timestamp>2015-04-19T04:05:02Z</timestamp>
      <contributor>
        <username>Enetheru</username>
        <id>2783</id>
      </contributor>
      <minor/>
      <comment>/* Image File */  added overrides</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2578">= Terrain Types =
Type Maps or terrain Types allow altering the speed of units, and the mount of deformation.
&lt;center&gt;
{| class=&quot;wikitable&quot; style=&quot;text-align: center;&quot;
| ({{FIXME}} Example typemap)
|-
! Example Typemap
|}
&lt;/center&gt;
{{Caution|The use of type maps for unit speed adjustment is discouraged; due to the way units are automatically assigned to categories and the invisible nature of the type map it makes game play unpredictable.}}

Spring already provides speed alteration, with pathing optimisation based on terrain incline. Units will always take the &quot;road&quot; if its completely flat and have to travel a fair distance along otherwise uneven terrain.

Type maps use in deformation can show distinction between terrains like sand, rock, etc. This will suffer from edges between hardness levels having different heights after deformation, however it can be somewhat mitigated by making transitional typemaps with multiple hardness levels.

Use sparingly, with obvious visual indicators in the texture image.

= Specification =
== mapinfo.lua ==
The relevant sections of the mapinfo.lua file are in the [[Map_Making:mapinfo.lua#terrainTypes|terrainTypes subtable]]

&lt;code&gt;&lt;pre&gt;local mapinfo = {
   ...
   smf = {
        ....
        typemapTex = &quot;&quot;,
        ....
    },
    ...
   terrainTypes = {
      [0] = {
         name = &quot;Default&quot;,
         hardness = 1.0,
         receiveTracks = true,
         moveSpeeds = {
            tank  = 1.0,
            kbot  = 1.0,
            hover = 1.0,
            ship  = 1.0,
         },
      },
      [1]  = { 
         ...
      },
      ...
   },
   ...
}&lt;/pre&gt;&lt;/code&gt;

== Image File ==
An 8bpp greyscale image has 256 values for grey. each value represents a different terrain type, so you can have 256 different terrains, starting at zero(black)(default) to 255(white)
{| class=&quot;wikitable&quot; width=&quot;100%&quot;
! width=&quot;15%&quot; | File Location
| The metal map is an intermediary file compiled into the SMF file using [[MapConv]] or [[MapConvNG]], it can also be specified in the mapinfo.lua
|-
! File Format
| Any that the Mapconv programs support
|-
! Colour Depth
| 8bpp
|-
! Channels
| Greyscale
|-
! Resolution
| &lt;center&gt;
{| class=&quot;wikitable&quot; style=&quot;text-align: center;&quot;
!Spring Map Size&lt;sup&gt;*&lt;/sup&gt;
!pixels = Spring Map Size * 32
|-
| 2
| 64
|-
| 4
| 128
|-
| 6
| 192
|-
| ...
| ...
|-
| 32
| 1024
|-
| style=&quot;text-align: left;font-style:italic&quot; colspan=2 | &amp;#42; must be multiples of 2
|}&lt;/center&gt;
|}

= Forum Discussions =
* [http://springrts.com/phpbb/viewtopic.php?f=13&amp;t=21669 Typemap rant thread.]

[[Category:Map Dev]]</text>
      <sha1>mdmpvxd05unp6w137zrtmf6tsvpasxv</sha1>
    </revision>
  </page>
  <page>
    <title>Mapdev:water</title>
    <ns>0</ns>
    <id>3406</id>
    <revision>
      <id>31232</id>
      <parentid>28763</parentid>
      <timestamp>2020-05-13T16:35:34Z</timestamp>
      <contributor>
        <username>Gajop</username>
        <id>2804</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5447">= Water =
The 'water' engine feature can be used for more than just water, it can be Lava, Slime, and completely invisible for maps in space.

Water is always at zero elevation, the terrain is positioned above and below the water using the &lt;code&gt;minHeight&lt;/code&gt; and &lt;code&gt;maxHeight&lt;/code&gt; values(see [[Mapdev:height]]).

Shading of the water is split into two parts; the surface of the water and the surface of the ground under the water

Water has five different rendering modes which can be set ingame by the command:
&lt;pre&gt;/water&lt;/pre&gt;
&lt;ol start=0&gt;
&lt;li&gt; basic
&lt;li&gt; reflective
&lt;li&gt; dynamic
&lt;li&gt; reflective&amp;refractive
&lt;li&gt; bumpmapped
&lt;/ol&gt;

The relevant soure code [https://github.com/spring/spring/tree/bfc21aada48a6a606b039819ba55017fe3d4f29d/rts/Rendering/Env files]

= Specifications =
Now because of the various graphical modes, and some options being shared, I've split this into sections.

==Data Types==
{{DataTypes}}

== Options that are always relevant ==
&lt;pre&gt;local mapinfo = {
   ...
   tidalStrength = 0,
   voidWater = false,
   ...
   water = {
      damage =  0.0,

      absorb    = {0.0, 0.0, 0.0},
      baseColor = {0.0, 0.0, 0.0},
      minColor  = {0.0, 0.0, 0.0},

      forceRendering = false,

      planeColor = {0.0, 0.4, 0.0},
    },
   ...
}&lt;/pre&gt;

{{tag|name=tidalStrength|type=float}}

{{tag|name=voidWater|default=false|type=bool|description=If true, the water will not be drawn. Also the terrain under the water will not be drawn.}}

{{tag|name=damage|type=float}}

{{tag|name=absorb|type=float3|description=Used to calculate the colour of the terrain under the water, see below.}}

{{tag|name=baseCcolor|type=float3|description=Used to calculate the colour of the terrain under the water, see below.}}

{{tag|name=minColor|type=float3|description=Used to calculate the colour of the terrain under the water, see below.}}

The absorb, baseColor and minColor variables are used to alter the colour of the terrain under the water as defined in a glsl shader, see [https://github.com/spring/spring/blob/a71c17d710cc387c484e876971881837ecb0ff10/cont/base/springcontent/shaders/GLSL/SMFFragProg.glsl line 163].

{{tag|name=forceRendering|default=false|type=bool|description=If false, and the minimum height of the terrain is above 1.0, then the water will not be drawn.}}

{{tag|name=planeColor|default={0.0, 0.4, 0.0}|type=float3|description=sets the colour of the horizon water plane, to prevent it from being drawn at all you must comment out this line.}}

== Basic ==
&lt;center&gt;
{| class=&quot;wikitable&quot; 
|+ Example
| [[File:Water basic example.jpg|400px]]
|}&lt;/center&gt;
&lt;pre&gt;local mapinfo = {
   ...
   water = {
      repeatX = 0.0,
      repeatY = 0.0,

      --texture = &quot;&quot;,
   },
   ...
}&lt;/pre&gt;

{{tag|name=repeatX|type=float|default=0|description=control the texture repetition}}

{{tag|name=repeatY|type=float|default=0|description=control the texture repetition}}

{{tag|name=texture|type=string|default=0|description=the texture image to use, searches the ./maps/ directory of the map archive.}}

== Reflective ==
&lt;center&gt;
{| class=&quot;wikitable&quot; 
|+ Example
| {{FIXME}}need to place an image here
|}&lt;/center&gt;
&lt;pre&gt;local mapinfo = {
   ...
   water = {
      surfaceColor  = {0.75, 0.8, 0.85},
   },
   ...
}&lt;/pre&gt;

{{FIXME}}?

{{tag|name=surfaceColor|type=float3f|default={0.0, 0.0, 0.0}|description=Effects the reflected colour.}}

== Dynamic ==
&lt;center&gt;
{| class=&quot;wikitable&quot; 
|+ Example
| [[file:water_dynamic_example.jpg|400px]]
|}&lt;/center&gt;
&lt;pre&gt;local mapinfo = {
   ...
   water = {
      surfaceColor  = {0.75, 0.8, 0.85},
      --foamTexture =   &quot;&quot;,
   },
   ...
}&lt;/pre&gt;

{{tag|name=surfaceColor|type=float3f|default={0.0, 0.0, 0.0}|description=Effects the reflected colour.}}

{{FIXME}}?

== Reflective and Refractive ==
From what i can tell, this mode is basically the same as the reflective mode, except that it distorts(refracts the light) of objects under the surface.
&lt;center&gt;
{| class=&quot;wikitable&quot; 
|+ Example
| [[file:water_refractive_example.jpg|400px]]
|}&lt;/center&gt;
&lt;pre&gt;local mapinfo = {
   ...
   water = {
      surfaceColor  = {0.75, 0.8, 0.85},
   },
   ...
}&lt;/pre&gt;

{{tag|name=surfaceColor|type=float3f|default={0.0, 0.0, 0.0}|description=Effects the reflected colour.}}

== Bump Mapped ==
&lt;center&gt;
{| class=&quot;wikitable&quot; 
|+ Example
| {{FIXME}}need to place an image here
|}&lt;/center&gt;
&lt;pre&gt;local mapinfo = {
   ...
   water = {
      ambientFactor  = 1.0,
      diffuseFactor  = 1.0,
      specularFactor = 1.0,
      specularPower  = 20.0,



      surfaceColor  = {0.75, 0.8, 0.85},
      surfaceAlpha  = 0.55,
      diffuseColor  = {1.0, 1.0, 1.0},
      specularColor = {0.5, 0.5, 0.5},

      fresnelMin   = 0.2,
      fresnelMax   = 0.8,
      fresnelPower = 4.0,

      reflectionDistortion = 1.0,

      blurBase      = 2.0,
      blurExponent = 1.5,

      perlinStartFreq  =  8.0,
      perlinLacunarity = 3.0,
      perlinAmplitude  =  0.9,
      windSpeed = 1.0, --// does nothing yet

      shoreWaves = true,

      --foamTexture =   &quot;&quot;,
      --normalTexture = &quot;&quot;,
      --caustics = {
      --   &quot;&quot;,
      --   &quot;&quot;,
      --},
      numTiles = 1,
      hasWaterPlane = true,

   },
   ...
}&lt;/pre&gt;

{{FIXME}}?

= Forum Discussions =
* [http://springrts.com/phpbb/viewtopic.php?f=13&amp;t=28264 chockolate rain] map discussion apparrently has soemthing in it i wanted to keep for later.. cant remember though...
* [[Water_Height:_Mapconv_vs._Heightmap|water height]]

[[Category:Map Dev]]</text>
      <sha1>1wevw1gfk4dwzkaj42m23kaflk0t582</sha1>
    </revision>
  </page>
  <page>
    <title>Mapgen</title>
    <ns>0</ns>
    <id>3428</id>
    <revision>
      <id>27562</id>
      <parentid>26075</parentid>
      <timestamp>2013-08-23T02:21:55Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="714">Spring 92.0 will contain a simple map generator. To test it, spring has to be started with a script.txt which contains the line:

&lt;code&gt;&lt;pre&gt;
[GAME]
MapSeed=123;
&lt;/pre&gt;&lt;/code&gt;

Where 123 can be replaced with any number to generate another map.
MapName should not be present in script.txt

The generated map will be fairly generic map, aimed at TA-like mods.
It currently takes into account the amount of players and the allies.

Future work will add lua bindings, allowing maps to be generated from lua.
This way, mods could supply their own map generator.

for details see:
* {{Sourcelinkhash|974e5b42c5bcde30a704218448aa288764642d55}}
* https://github.com/MadrMan/spring/commits/mapgen

[[Category: Development]]</text>
      <sha1>ka5mcggk3x65l7i4h9g7chkzxkupgez</sha1>
    </revision>
  </page>
  <page>
    <title>Mapinfo.lua</title>
    <ns>0</ns>
    <id>3442</id>
    <redirect title="Mapdev:mapinfo.lua" />
    <revision>
      <id>26182</id>
      <timestamp>2013-02-22T00:45:29Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>Create redirect from [[Mapinfo.lua]] to [[Mapdev:mapinfo.lua]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="32">#REDIRECT [[Mapdev:mapinfo.lua]]</text>
      <sha1>iusqup0q1y9kcl4j4g7wqv0d64lbh9v</sha1>
    </revision>
  </page>
  <page>
    <title>Maps</title>
    <ns>0</ns>
    <id>938</id>
    <revision>
      <id>28317</id>
      <parentid>26657</parentid>
      <timestamp>2014-02-24T23:36:50Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <minor/>
      <comment>fix link</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2626">=== Download maps ===
For download links look at the [[Getting_Spring_Content_and_Links|Content and Links page]].

===Install maps===
Maps are &quot;.sd7&quot; or &quot;.sdz&quot; files. To install this files move them into (Unix) ~/.spring/maps or (Windows) &quot;My Documents\My Games\Spring\Maps&quot;.
As is the case with games, use the &quot;Reload maps/games&quot; option from the &quot;Tools&quot; menu in SpringLobby.

===Choosing a Map===
Technically, all Spring games ''work'' with any Spring map. In practice, '''some maps are unplayable with certain games.''' For example a game where you mine resources from the ground will only work on maps where these resources are present. A game based around land combat will not be very fun on a water map.&lt;br&gt;
This is why some map makers started adding prefixes to the map names, to signal what games work well with their map.&lt;br&gt;
This is no official list, only a recommendation what to look out for. '''Generally it is best to have a look at the games webpage if a map pack is offered or even already included in the download.'''

====Conflict Terra====
map names prefixed with '''CT'''&lt;br&gt;
more info and map list on website: http://code.google.com/p/conflictterra/wiki/MapInfo&lt;br&gt;

====Evolution RTS====
map names prefixed with '''EvoRTS'''&lt;br&gt;
map list on website: http://www.evolutionrts.info/download/ -&gt; maps&lt;br&gt;

====Gundam RTS====
map names prefixed with '''Grts'''

====Spring 1944====
map names prefixed with '''1944'''&lt;br&gt;
maplist on website: http://spring1944.net/wiki/doku.php?id=guide:gameplay:recommended%20maps&lt;br&gt;

====Kernel Panic====
most maps have &quot;kernel panic&quot; mentioned in their description (searchable by lobbies)&lt;br&gt;
has a map pack: http://springrts.com/wiki/Kernel_Panic#Download_links&lt;br&gt;

====Zero-K====
http://zero-k.info/Maps.mvc rating system&lt;br&gt;
start box coordinates for some maps: http://code.google.com/p/zero-k/wiki/MapBoxes&lt;br&gt;

===Popular maps===
*[http://springfiles.com/spring/spring-maps?order=count&amp;sort=desc Popular maps on SpringFiles.com]

===Map recommendations for games with TA based economy (ie BA, XTA, NOTA)===
*[[Map reviews]]: Map reviews galore
*[[Suggested maps for 1v1]]
*[[Suggested maps for 3ffa]]
*[http://springrts.com/wiki/4v4BA List of maps for 4v4 in BA]

===Start Boxes via lobby chat===
commands for autohosts:&lt;br&gt;
'''!split v 20'''  create 2 boxes, at left and right end of map. &quot;20&quot; defines the size.&lt;br&gt;
'''!split h 20'''  create 2 boxes, at bottom and top end of map. &quot;20&quot; defines the size.&lt;br&gt;
start box coordinates for some maps: http://code.google.com/p/zero-k/wiki/MapBoxes&lt;br&gt;

=== Making Maps ===
*[[Mapdev:Main|Map development]]

[[Category:Maps]]</text>
      <sha1>rnbp7i3r85lycpbsv5o96eq9cpcxmyq</sha1>
    </revision>
  </page>
  <page>
    <title>Maps:Compiling</title>
    <ns>0</ns>
    <id>1137</id>
    <revision>
      <id>30726</id>
      <parentid>30725</parentid>
      <timestamp>2018-08-14T02:37:38Z</timestamp>
      <contributor>
        <username>Maddox</username>
        <id>2934</id>
      </contributor>
      <minor/>
      <comment>typo fix</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10220">[[Engine_Development|Development]] &lt; [[Map_development|Map Development]] &lt; {{FULLPAGENAME}}

== Compiling Spring Maps ==

This is often the bit that scares a lot of people off, but it is really not that difficult. There are two different ways to compile a map, so you can choose which option suits you best. You can:

*Compile through a DOS prompt, or
*Create and batch file.

'''**NOTE!** IF YOU EVER GET JUST A PINK TEXTURE AFTER COMPILING THE ISSUE IS THAT YOU EITHER RENAMED THE FILES AFTER COMPILING OR CHANGED THE DIRECTORY STRUCTURE! THE SMD, SMT, AND SMF FILES MUST BE ALL CONTAINED WITHIN A DIRECTORY INSIDE YOUR ARCHIVE NAMED &quot;maps&quot;!!!'''

=== Before you start ===

First off, download a map converter.There are two compilers that most people use:
* [[Mothers MapConv]] with 'optimization'&lt;br&gt;This version should work for everyone, it has the no scanlines hack included. Works just like its described below.
* Users [[MapConv]] without optimization &lt;br&gt;Use this if you feel adventurous or need very special features.

Place the compiler in to a directory on your computer somewhere. Because of a bug in the program, the path to the map converter can NOT contain ANY Spaces. A Path of '''C:\Maps\MapConv\''' is good, but a path of '''C:\Maps\Map Conv\''' is BAD.

A good practice is to save all your source Pictures into seperate folders when making a map. However, this gets very tedious when compiling. So it is a good idea to make a copy of your source BMP files and place these in the same folder as the map  converter. This just makes things alot easier later on. You should have the following files in your MapConv folder:

* Texture.bmp (mapsize*512 pixels)
* Height.bmp (mapsize*8+1 pixels)
* Metal.bmp (mapsize*8+1 pixels)
* Feature.bmp (mapsize*8 pixels)

All .bmp files should be 24bit RGB bitmaps.

You should also put, if you are using them, your type map (Type.bmp) and your tile
map (Tile.bmp). Most maps do not use these, so you do not usually need to worry about them.

You need the 7-zip compression program to compress your map into a .[[sd7]] map file.
* [http://www.7-zip.org 7-zip homepage]
* [http://prdownloads.sourceforge.net/sevenzip/7z431.exe?download Download Link]

A .smd file. These can be made with [http://taspring.clan-sy.com/phpbb/viewtopic.php?t=2420 Maelstroms SMD creator].
It is recommended to actually try to learn how the different SMD values works though by looking at other maps .smd files. The SMD creator is also not completly bugfree, so you should preferably look it through once with a text editor anyway.

You also need to know:

*The minimum and maximum heights of your map.
*The name of your map.
*How much you want to compress your map.

=== Command Line Options ===

As the compiler runs off information entered into it as '''Command Line Parameters''' , you need to know a bit about them first. Command Line Parameters are really not difficult to understand. They look a bit like this: 

 ProgramName -Setting1 Value -Setting2 Value

The first bit is how we launch the program. Windows will launch whatever program is specified by '''ProgramName'''. '''-Setting1 Value''' is also very simple. Windows basically says to the program &quot;Setting1 is Value&quot;. A better example would be -height 10, which basicly means &quot;Height is 10&quot;. These can be combined with as many settings as you want, as we can see with the '''Setting2 Value''' bit. In this way we can pass as much information to the compiler as we want. To compile a map, we need the following Command Line Parameters:

'''Map Compression'''
This takes the form of '''-c Compression''', where Compression is a value. Typing '''-c 0''' will give a compression of 0. Range is 0-1, where 0 is no compression, and will make you final map file size very large. **NOTE** NEVER USE THE SMF COMPRESSION, IT IS UTTERLY USELESS! (Further note, its not useles, just ugly. If your making a map thats bigger than 16*16, then I advise you to use it to save on the file size and texture memory. Values of up to 0.6 wont cause too noticable loss in quality, while still reducing file size.)

'''Max Height'''
This specifies the maximum height of the map. This option looks like '''-x Height''', where Height is the maximum height of the map. Typing '''-x 300''' will give your map a maximum height of 300 map units.

'''Minimum Height'''
This specifies the minimum height of the map. This option looks like '''-n Height''', where Height is the minimum height of the map. Typing '''-n -50''' will give your map a minimum height of -50 map units.

'''Texture'''
This specifies the location of your texture picture. This option looks like '''-t Location''', where Location is the location of your texture image. Typing '''-t texture.bmp''' will make the compiler look in the same directory it is in for '''texture.bmp'''. Typing '''-t C:\Maps\HillMap\texture.bmp''' will make the compiler look in the '''C:\Maps\HillMap\''' for texture.bmp. This name cannot contain spaces.

'''Other Picture files'''
These work in basically the same way as the texture option works, with just a changed Setting name.
*'''-m metal.bmp''': Specifies the location of the metal map.
*'''-a height.bmp''': Specifies the location of the height map.
*'''-f feature.bmp''': Specifies the location of the feature map.
*'''-y typemap.bmp''': Specifies the location of the terrain type map.
Please note that these names cannot contain spaces.

'''Map Name'''
The Map Converter needs to know where to save your map, and what to call it. We use the '''-o Mapname.smf''' setting to do this. Of course, you replace Mapname with the name of your map, but you NEED to have the '.smf' bit on the end of it, otherwise the compiling wont work. An example would be '''-o HillMap.smf'''. This name may contain spaces, but only if you put the filename in quotes like so: '''-o &quot;My Map Name.smf&quot;

'''Other Tags'''
Some of these tags are helpful, some are annoying and some are just a mystery. This is basically the mics tags settings.
*'''Low Pass''': If you map has very steep slopes or rough areas that look ugly, this will smooth them a bit. Is activated just by typing '''-l'''. Very useful feature if your heightmap is a bit noisy but you dont want to lose detail by blurring/smoothing it in an image manipulation program
*'''Invert Height map''': As the logical way to make a height map is the same way up as all the other maps, but the way the map is actually used is the inverted version of this. To make things easier, they included this option to invert the height map. Is activated just by typing '-i'. Most maps will use this. With invert option enabled, black areas on the heightmap will correspond do the lowest points on the map.

=== Compiling through a batch file ===

This is perhaps the easiest option. You just have to create a simple text file, rename it, and run.

First, open up Notepad. Notepad can be found in Start &gt; Program Files &gt; Accessories &gt; Notepad. In notepad, type or copy the following:

'''mapconv -c 0 -x 500 -n 50 -o MapName.smf -t texture.bmp -m metal.bmp -a height.bmp -f feature.bmp -i '''

Replace the relevant values with the values you need, as the settings here will not work for all the maps. Then, in Notepad click File &gt; Save As. In the file name box, type '''&quot;Compile.bat&quot;''', with the quotes. If you do not have the quotes, it will not work. Save the file in the same directory as your compiler.

Go to the MapConv folder on your hard drive, and you should see a new file. This file will be called Compile.bat. Double click this file, and a black Dos window should pop up. After a few minutes the window should close. There will now be 2 extra files in that directory. '''MapName.smt''' and '''MapName.smf'''.


=== Compiling through DOS ===

Use this option if you want to read the information that the MapConv outputs. If you are not familiar with how DOS works, then this way is not for you.

All you need to do is navigate your way through DOS to the location of your map converter program. Then, type in the following:

'''mapconv -c 0 -x 500 -n 50 -o MapName.smf -t texture.bmp -m metal.bmp -a height.bmp -f feature.bmp -i '''

Replace the relevant values with the values you need, as the settings here will not work for all the maps.

Once compiled, there will be 2 extra files in that directory. '''MapName.smt''' and '''MapName.smf'''.

=== Testing your map ===

Most often, its very annoying to have to zip and replace your map files for them to work. There is a very simple workaround that allows you, for example, to edit your .smd file and not have to zip it all up again:

Create a '''Mapname.sdd''' '''directory''' in your spring/maps folder, and copy the all the files you would normally place into the zipped map into it. This will allow Spring to load the map just as if it were 7zipped and renamed to .[[sd7]]

Example file placing:
Spring/maps/Mapname.sdd/maps/Mapname.smd

After you've got everything fine tuned, you can 7zip the map for distribution.

=== Compressing your map ===

Your SMD file needs to have the same name as the .smt and .smf files. If your smt file is calles '''HillMap.smt''', your .smd file needs to be called '''HillMap.smd'''.

Place the '''MapName.smd''', '''MapName.smt''' and '''MapName.smf''' files into an empty folder called maps\. Eg: '''C:\maps\'''. Right click this folder, and a right click menu should appear. In that menu, there will be a 7-Zip'''&gt;''' submenu. Open this menu, and click '''Add to Archive...'''. A 7-zip window will appear. Make sure the settings are identical to the following picture:
[[Image:7-zip_options.jpg]]

Change the '''Archive''' box at the top to the name of your map, with .sd7 on the end. Eg: '''HillMap.sd7'''. Click the '''OK''' button. After the compression has completed, there will be a file called '''HillMap.sd7''' in the same directory as the folder was. In this example, the '''HillMap.sd7''' would be straight on the C:\ drive. Copy '''HillMap.sd7''' to your TASpring\Maps\ directory.

NOiZE: The compresion can be set at ultra. but make sure you don't make it a solid archive!

If all of this was done correctly, the map should now appear your maps list in the lobby, and you can go play it.


[[Category:Map making]]</text>
      <sha1>6e1an79ceabqhc7z73qj752xu9dgyr3</sha1>
    </revision>
  </page>
  <page>
    <title>Maps:Map Designer</title>
    <ns>0</ns>
    <id>1895</id>
    <revision>
      <id>27816</id>
      <parentid>27510</parentid>
      <timestamp>2013-10-27T19:28:33Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>recat to deprecated</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4056">{{Deprecated}}[[Engine_Development|Development]] &lt; [[Map_development|Map Development]] &lt; {{FULLPAGENAME}}

== MapDesigner, by Hugh Perkins ==

[http://hughperkins.com/csai/MapDesigner.zip Download]

*Supports multipass texture splatting.  SM3 loader.
*Heightmap editor.  Left click to raise land, right click to lower
*Paint splatted texture.  Left click to paint texture, right click to erase
*Export heightmap, slopemap and blend maps
*Exported slopemap color-coded by movement area, eg infantry, vehicle and extreme (configurable)

Source-code repository, in git:

git://github.com/hughperkins/SpringMapDesigner.git

Source-code browser:

http://github.com/hughperkins/SpringMapDesigner/tree/master

Written in C#, using either mono or .net, both work, over gtk.net.

== User interface ==

[image:http://hughperkins.com/csai/mapdesigner3small.JPG]

== Concepts ==

MapDesigner is optimized for creating SM3 maps, which use texture splatting to provide high detail maps.

For each texture, we need:
*the texture, which will be tiled according to the tilesize
*a blend map, which controls where the texture will be visible

The blend map is essentially an alpha map.  The areas which are white will be splatted with our texture, and the other areas will be transparent.

The textures are rendered in layers, one by one.  The later layers cover the earlier layers, according to each one's blend map texture.  Here's some pictures that illustrate how this works.  We are rendering each layer with a vertical offset so you can see each layer on its own.

[Media:http://hughperkins.com/csai/multitextureview1.JPG]

[Media:http://hughperkins.com/csai/multitextureview2.JPG]

[Media:http://hughperkins.com/csai/multitextureview3.JPG]

In reality, these layers are all rendered together, with no vertical offset, so they look like they are all part of the same single terrain.

You can use any DevIL-compatible texture as your splat texture.  Select a texture stage and click &quot;Load texture...&quot; to load the texture into that texture stage.  You can change the tilesize to control how it is splatted in the visible areas.

The blend texture works like an alpha texture, but the data is actually stored in the RGB channels, as a grey-level.  MapDesigner lets you paint or remove to and from the blend texture, which has the effect of painting splat texture on the map, or removing it.

== Texture stages ==

Multiple texture stages can be configured.  We use one texture stage for each splatted texture and set its operation to &quot;Blend&quot;.

The first texture stage - texstage1 - should be set to &quot;Replace&quot;, and has no blend texture.  That's because it's the base texture for the map, on top of which the other textures are painted.

Advanced:
*It's possible to set other operations on the texture stages.

== Paint splatted texture ==

*select &quot;Paint texture&quot;
*select a texture stage
*set texture stage operation to &quot;Blend&quot; and load a texture if necessary
*Left click map to paint texture, right click to erase
*You can click &quot;Save blend texture&quot; to export the blend texture map

Note that texture stages are applied in order, first 1 then 2 then 3 etc.  The later layers cover the earlier ones.

If you click the map and nothing happens, your changes may be being masked by later layers.  You can edit the later layers to uncover your changes, or click &quot;move down&quot; to move your edited layer later in the queue.

[Media:http://hughperkins.com/csai/mapdesignblendediting.JPG]

== Water ==

Areas below zero height will be underwater:

[Media:http://hughperkins.com/csai/mapdesignwater.JPG]

== Exported Slopemap ==

You can use File | Export slopemap... to export a slopemap for your map.

Black means zero slope, green is vehicles, blue is infantry, red is extreme:

[Media:http://hughperkins.com/csai/slopemap2.JPG]

== Configuration ==

Configuration is stored in config.xml ,which can be opened in notepad
*You can change height and width in the display section to change the window size on next startup
*You can configure key mappings, and mouse move configuration</text>
      <sha1>n40g2ga1erpf2lr1vxos61y2h6uezp5</sha1>
    </revision>
  </page>
  <page>
    <title>Maps:Noob Mistakes</title>
    <ns>0</ns>
    <id>1503</id>
    <revision>
      <id>23570</id>
      <parentid>23569</parentid>
      <timestamp>2012-02-16T11:10:50Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>/* Map n00b FAQ */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1419">[[Engine_Development|Development]] &lt; [[Map_development|Map Development]] &lt; {{FULLPAGENAME}}

Everybody Keeps posting in the forum, and it's hard to figure out what exactly the n00b is doing wrong.

=Map n00b FAQ=

'''If The Character Combination :/ is included in the compilation batch script it doesn't work.'''

Thats Wrong:

&lt;code&gt;D:\TA_Editors\MapConv\MapConv.exe -c 0.5 -x 400 -n 100 -o D:\TA_Editors\MapConv\maps\metal-islands.smf -t D:\TA_Editors\MapConv\maps\metal-islands_texturemap.bmp -m D:\TA_Editors\MapConv\maps\metal-islands_metalmap.bmp - ...&lt;/code&gt;

Correct:

&lt;code&gt;MapConv.exe -c 0.5 -x 400 -n 100 -o metal-islands.smf -t metal-islands_texturemap.bmp -m metal-islands_metalmap.bmp -a metal-islands_heightmap.bmp -f metal-islands_featuremap.bmp -i&lt;/code&gt;

Put the files next to mapconv.exe!

===Do Not Rename Your SMT===

MapConv takes the first part of the &quot;-o mapname.smf&quot; to determine the name of the smt file (namely mapname.smt), a reference to this &quot;mapname.smt&quot; is stored in the smf file as where to look for tile images.  This means you can rename you smf and smd files, but are unable to rename the tile file.

===Put water low enough===
If you want to do a land only dry map, make sure your water isn't just below the ground, or else even the smallest crater will turn into a pond. Instead, use the '''-x''' and '''-n''' to put even your lowest ground far above water.
[[Category:Map_making]]</text>
      <sha1>s8paqkx9a2wizlyhp9mzrbmyrbn7oma</sha1>
    </revision>
  </page>
  <page>
    <title>Maps:SMD</title>
    <ns>0</ns>
    <id>3271</id>
    <redirect title="Map Making:SMD" />
    <revision>
      <id>24592</id>
      <timestamp>2012-05-28T03:49:39Z</timestamp>
      <contributor>
        <username>Enetheru</username>
        <id>2783</id>
      </contributor>
      <comment>moved [[Maps:SMD]] to [[Map Making:SMD]]: in wrong namespace</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="28">#REDIRECT [[Map Making:SMD]]</text>
      <sha1>m889ddrmva5q0ggg05ga09e5oycw9e9</sha1>
    </revision>
  </page>
  <page>
    <title>Maps:SpringMapEdit</title>
    <ns>0</ns>
    <id>2639</id>
    <revision>
      <id>31087</id>
      <parentid>28329</parentid>
      <timestamp>2019-11-13T22:37:09Z</timestamp>
      <contributor>
        <username>Sprang</username>
        <id>2952</id>
      </contributor>
      <comment>/* Links */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="817">== SpringMapEdit, by Frostregen ==

[[File:Springedit37.png]]


==Links==
* Homepage: http://frostregen.de:8085/sme
* Download: http://frostregen.org/springmapedit/springmapedit_321.7z
* aeonios's updated version: https://springfiles.com/spring/development/spring-map-edit
* Mercurial Repository: http://frostregen.org/hg/SpringMapEdit
* [http://springrts.com/phpbb/viewtopic.php?f=13&amp;t=16341 Forum topic]

&lt;gallery&gt;
File:SpringMapEditor_tests.png|memory RAM test
File:SpringMapEditor_64x64_map_textured.png|64*64map test
File:SpringMapEditor 56x64 map mem usage.png|56*64 map edition test
File:SpringMapEdit 48x64map textured slopes highset.png|48*64 map slope+texture high seting
File:SpringMapEditor48x64map textureprefab zoomed.png|48*64 map textured prefab and features editing
&lt;/gallery&gt;

[[Category:Map Tools]]</text>
      <sha1>o94hsaq54hy7ubhn31az3u3rxeudz6b</sha1>
    </revision>
  </page>
  <page>
    <title>Maps:Tutorial</title>
    <ns>0</ns>
    <id>3665</id>
    <redirect title="Tutorial:BasicMapMaking(Maelstrom)" />
    <revision>
      <id>28922</id>
      <timestamp>2014-10-19T09:04:15Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>Flozi moved page [[Maps:Tutorial]] to [[Tutorial:BasicMapMaking(Maelstrom)]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="48">#REDIRECT [[Tutorial:BasicMapMaking(Maelstrom)]]</text>
      <sha1>mqwr17znblfr9rtw78l56rqa28avkq7</sha1>
    </revision>
  </page>
  <page>
    <title>MapsBalance</title>
    <ns>0</ns>
    <id>1115</id>
    <revision>
      <id>17536</id>
      <parentid>12330</parentid>
      <timestamp>2009-08-31T17:56:59Z</timestamp>
      <contributor>
        <username>Aegis</username>
        <id>2285</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6840">[[Engine_Development|Development]] &lt; [[Map_development|Map Development]] &lt; {{FULLPAGENAME}}


== Making properly balanced maps ==
So, you're making a map. But how much resources should it have?

Don't regard this as of little relevance! This is very important!

All units in unit sets are balanced assuming that, for example, metal is x harder to get than energy. If your map has, for example, too much metal, units that cost more onto the metal side than energy side become unbalancedly cheap.

== Resource Standards ==
When making maps, these are the standards for resources:

'''Metal:'''
*The amount per normal metal extractor is between 0.7 and 2.5
*The amount of total metal in all patches, when beeing extracted by normal metal extractors, is about 5~15 per player, assuming each player is controlling about a quarter of the map.  It should be noted, though, that this metal should be SPREAD OUT, not all located at the start position.
 

'''Energy:'''
*The amount of tidal energy is almost always 20
*The amount of solar energy is almost always 20
*The amount of wind, is usually 1(min)~25(max) or some other min~max values &lt;b&gt;that average between 7 and 13&lt;/b&gt;
*The amount of geothermals available to each player generally varies widely depending on the map.  A good guideline is to usually have 1 geothermal for every 2 players as a minimum, or 2 geothermals per player as a maximum.


Standards are just that, standards, and you don't HAVE to follow them. But it's better not to go too overboard with resources or use diferent standards very frequently.  For example an  interesting variation may be to increase the amount of metal generated per extractor, but reduce the number of extractors, so that the total metal available is not changed significantly. 

In all cases, &lt;B&gt;less metal = more strategy&lt;/B&gt;.  Too little metal is &lt;B&gt;always&lt;/B&gt; better than too much.  This point cannot be stressed too much.

== Gravity ==
When making maps, the standard gravity is '''140''', or so some assume. No clear &quot;default&quot; value has actually be given by the developers, but it most likely lies somewhere between 100 and 150. If you decide to use a value much higher value, units that fire balistic projectiles (cannons) may not be able to fire their projectiles at the intended range. Be sure to test your map alot before releasing it if you are going to change the gravity drastically.

== Resource Dynamics ==
This section is dedicated to a more throughout explanation of the workings of the resources in Spring so you can balance your map accordingly.


'''Metal:'''

Additional info needed.


'''Energy:'''

A somewhat edited quote from the map forum (thus not a true quote);

&quot;On the wind issue I belive somewhere around 0-20 or 0-30 is pretty reasonable for a map where you want wind to be the &quot;best&quot; option, which it wasn't on all TA maps. Although wind was viable on most maps with the expection of the moon maps.
Relying on wind for your energy needs has always been a risky move though, even on maps where it has proven to be useful, because you might just get stuck with all of your generators giving an output of  1, thus ruining your economy for the moment. I hope it stays this way in TA, and personally I find the suggestion that you'd need 30-40 as an average output for wind to be viable quite odd, as online play in TA has shown that's not true.
Just for reference, two maps where almost only wind was used in TA are GoW and PD. In GoW I belive the wind varied between 3 to 27, while on PD it was between 1 (or 0, not sure) to 24.

From what I've discussed so far though (with old TA players), most seems to agree that once the average income goes to 7 or above, wind quickly becomes the better option. Some do favor having a few solars just as a backup, but overall wind quickly becomes the better option for your main source of energy income, the solars will at most get the postion of a small backup. It can lead to the added investment of energy storages though.

From this you can easily come to your own conclusions, there are however some minor points that I would want to add. First of, you have to take into account that solars in XTA doesn't cost any energy at all, this is however something that mostly comes into play if your current source of energy is getting destroyed, so you lack energy.
The other thing I want to add is a short overview of the advantages of the two different sources of energy, ordered by (from my point of view and without taking into account the lack of energy cost for the XTA solar) importance;
1) The wind generator costs less, only 1/3 of a solar. An average income of 7 will thus already put it as the better choice theoretically.
2) The wind generator builds quicker, this means you will start to get your energy income faster too which might matter quite a bit.
3) The solar gives you a constant supply of energy that does not vary.
4) The solar is better armored than the wind generator. I'm not sure if 3 wind generators have more health than a single solar though (you also have to take into account that they are often built next to each other, so when one goes it will damage the ones next to it).
5) A single solar takes less space than 3 wind generators. Once the average wind income from a single generator is 20 or above this points becomes moot though, but before that it can potentially be important on certain maps.
6) A solar usually leaves a &quot;better&quot; wreckage, thus yielding you more metal when you reclaim it. This of course means it was destroyed in the first place, which never is that good.

This is all disregarding the tidal of course, but that's another matter entirely as it needs water to be built. It works by the same principle as the solar however, the difference being that the wind generator is only Ã‚Â½ the cost of the tidal. There are also some other differences compared to the solar of course (size, armor etc), but generally it should be pretty straightforward to decide if its worth the cost or not if you already understand the relation between solars and wind generators.

One more note about wind, if I remember correctly. In OTA the wind was highest on the barren worlds (ice/desert etc), while it wasn't a real option on moon maps.&quot;


'''A short summary of this &quot;quote&quot; reads as follows;'''

Wind generators starts to become the best choice as soon as the average energy income from a single generator goes above 7. As the average gets higher the wind generators quickly become the only real choice if you want to win.
If your map does have an average income of 7 or above, the only real benifits of a solar is more armor, constant supply, less space and finally it usually leaves wreckage behind.
A single solar costs 3 times that of a wind generator, a single tidal costs 2 times the amount of a wind generator.

[[Category:Map making]]</text>
      <sha1>pgg7btvscqghtmfngegnz6q85tk90rk</sha1>
    </revision>
  </page>
  <page>
    <title>Maps Reviews</title>
    <ns>0</ns>
    <id>956</id>
    <redirect title="Map Reviews" />
    <revision>
      <id>10793</id>
      <parentid>869</parentid>
      <timestamp>2005-09-07T03:55:57Z</timestamp>
      <contributor>
        <username>Sinbadev</username>
        <id>7</id>
      </contributor>
      <minor/>
      <comment>redirecting redirects</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="25">#REDIRECT [[Map_Reviews]]</text>
      <sha1>fcg6my5n8zva59fns7porhudmmk8fwg</sha1>
    </revision>
  </page>
  <page>
    <title>Maps reviews</title>
    <ns>0</ns>
    <id>955</id>
    <redirect title="Map Reviews" />
    <revision>
      <id>10792</id>
      <parentid>868</parentid>
      <timestamp>2005-09-07T03:55:05Z</timestamp>
      <contributor>
        <username>Sinbadev</username>
        <id>7</id>
      </contributor>
      <minor/>
      <comment>redirecting redirects</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="25">#REDIRECT [[Map_Reviews]]</text>
      <sha1>fcg6my5n8zva59fns7porhudmmk8fwg</sha1>
    </revision>
  </page>
  <page>
    <title>Mass destruction weapon</title>
    <ns>0</ns>
    <id>1353</id>
    <revision>
      <id>25274</id>
      <parentid>11170</parentid>
      <timestamp>2012-10-29T12:59:24Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>remove wanted links</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2942">'''Mass destruction weapon''' is any weapon (structure or mobile unit) that can inflict a great deal of damage during a very short time, is long-range (or has unlimited range) and takes considerable time and resources to deploy.

Most popular mass destruction weapons are the nuclear missile silos. Unlike other RTS games, in XTA they are relatively cheap and quick to build and can fire quite rapidly. However, equally efficient and cheap defense systems exist, which neccesitates a bomber raid in order to destroy anti-nuke defenses before [[nuke strike|nuking]]. When enemy has porced with anti-air, it can be troublesome. A solution is to raid or swarm the enemy, but on some maps it is impossible.

Another weapon that can be considered mass-destruction is the long-range plasma cannon. In both [[Absolute Annihilation]] and XTA Pimped Edition, it comes in a normal and rapid-firing variant, the latter being much more expensive and less accurate. In comparison with nukes, LRPCs' range is limited, which makes them less useful on large maps. There are shield generator systems to protect player from plasma bombarment in Absolute Annihilation. XTA does not have any unit able to deflect the bombarment. They are more expensive to build than nuke silos (in most mods they are one of the most expensive structures), can take ages to construct without several [[construction units]] helping and draw extremely large portions of energy when firing (especially the rapid-firing variant, which needs a dedicated fusion plant to fire continuously). However, economical strain of building such a cannon is greatly rewarded, as the player who constructed it can break through chokepoints without losing a single unit, given the chokepoint is in range of fire, or even demolish the enemy base. It must be noted that the cannon is not invincible and can be quickly destroyed by a nuke strike or bomber raid, which puts the owner way behind the competition (as he spent most of his resources building the cannon). This neccesitates an anti-air and anti-nuke support, which raises the cannon's nonetheless jawdropping cost even more.

The [[commander]] itself can also be used as a mass destruction weapon, due to an overwhelming explosion which follows its destruction. Usually, this is done late game by flying an air transport carrying the commander into enemy's anti-air defense or self-destructing this transport over enemy's base. This tactic is known as [[commander bombing]] or, when enemy commander is used, [[commander kidnapping]]

In some mods, there exist mobile nuclear missile silos or mobile long range plasma cannons (i. e. [[Absolute Annihilation|AA]]), which are generally weaker than their stationary counterparts, but are less prone to air or nuke attacks due to mobility. Also missiles fired from these weapon systems are usually non-interceptable, making them good at taking out anti-missile structures.

[[category:Strategy]]</text>
      <sha1>a24bb3cb29z1f8xte8herhrijq1r8oq</sha1>
    </revision>
  </page>
  <page>
    <title>Matrix</title>
    <ns>0</ns>
    <id>3827</id>
    <revision>
      <id>31005</id>
      <parentid>31004</parentid>
      <timestamp>2019-03-22T20:28:00Z</timestamp>
      <contributor>
        <username>Silentwings</username>
        <id>2883</id>
      </contributor>
      <minor/>
      <comment>/* Matrix - Ubserver Bridge */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="665">Matrix is an open network for secure, decentralized communication. Spring has its own matrix server which is connected with [[Glenda]] to the lobby server.

A lobby account is required to login: https://springrts.com/matrix/

==== Matrix Server ====
* synapse: https://github.com/matrix-org/synapse
* authprovider: https://github.com/TurBoss/matrix-synapser-uberserver-xmlrpc

==== Matrix - Uberserver Bridge ====
* framework: https://github.com/tulir/mautrix-python
* lobby library: https://github.com/TurBoss/asyncspring
* appservice: https://github.com/TurBoss/matrix-spring-appservice, https://github.com/half-shot/matrix-appservice-discord

[[Category: Lobby]]</text>
      <sha1>2z60s97xg3vhb6txriopsbswo4ko44u</sha1>
    </revision>
  </page>
  <page>
    <title>Maximum Annihilation</title>
    <ns>0</ns>
    <id>2498</id>
    <revision>
      <id>21277</id>
      <parentid>20380</parentid>
      <timestamp>2011-02-24T16:53:31Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>/* Credits */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6830">{{deprecated}}

[[Category:Mods]]

http://img291.imageshack.us/img291/7540/maximumannihilationforunh4.png

== Overview ==
Maximum Annihilation claims to be the next evolutionary step in the long tradition of OTA mods which started with [[UberHack]], continued with [[Absolute_Annihilation|Absolute Annihilation (=AA)]] and finally lead to [[Balanced_Annihilation|Balanced Annihilation (=BA)]] which just concentrates on fixing bugs and balancing issues on the AA basis and currently is the most popular mod.

Maximum Annihilation's development started with using BA as basis but instead of just doing some minor refinements it leaps ahead and adds in new or removes content just like its &quot;spiritual predecessors&quot;. The goal is to provide a more intense gameplay experience by adding new strategic possibilities and lots of interesting features without having superflous or extremely similar units.

The current version 1.1 houses more than 450 units and buildings on three full-scale technology levels and their number is growing as some areas still await their planned new units. With other features like an altered economy system based upon less effecitve metal makers and a flexible multi-lab model for unit production there have been some big changes but you still can see BA's spirit shine through at various positions making Maximum Annihilation being rather loosely based on it.

----

== Gameplay ==
Maximum Annihilation was designed to feature three entire technology levels plus sort of a fourth one housing some &quot;game-ender-weapons&quot; that actually will be seen in usual online games. That fourth level can only be achieved by having reached Tech-Level-3 and morphing your Commander thus leading to a higher hesitation to sacrifice your Commander in a &quot;Combomb-Maneuver&quot;.

Multi-Level labs in Maximum Annihilation V1.1:
http://img364.imageshack.us/img364/4127/malabsgalleryv11qq9.jpg

A new multi-lab model also gets introduced:
Instead of assisting your labs with builders to get reasonable buildrates they now cannot be assisted anymore but build fast for themselves always consuming a constant rate of metal despite what is built. That ratio increases with ascending tech levels:

*T1 Ground / Sea Labs: -5m per second
*T2 Ground / Sea Labs: -10m per second
*T3 Ground / Sea Labs: -25m per second
*T1 Air Labs: -2.5m per second
*T2 Air Labs: -5m per second
*T3 Air Labs: -12.5m per second

This way you can plan how much of your metal income you want to spend on units. It now also is possible to choose more than just one unit class. Especially the first tech level lets you virtually choose any combination: Have labs for tanks and planes, K-Bots and tanks or even one for K-Bots, tanks, planes and ships - you're free to choose. You also no longer need to fear some enemy bombers piercing your defenses and bombing either your assisters (rendering your buildspeed to about 0 for quite some time) or your lab (what might get nasty if you don't have a builder nearby to rebuild your lab).

This system at the same time leads to another change:
The buildtime no longer is a real resource which makes you need more time or buildpower to finish certain units/buildings. The buildtime now has a linear relation to the costs having the side effect that constructors now can finish buildings in a more reasonable timeframe and don't need huge assistance to provide acceptable buildtimes.

There also have been some changes on the unit roles:
K-Bots now offer an all-terrain specialty while vehicles offer an amphibic specialty. Besides combat units both unit trees also feature specialized amphibic and all-terrain constructors. Apart from that K-Bots now also provide an advanced auto-repair capability: After not being under fire for a short while the unit starts its auto-repairs. The general regeneration rate looks like this:

*T1 autoheal: 10HP per second
*T2 autoheal: 20HP per second

Exceptions to this rule are scouts, spies and artillery which only have half of those values. This gives K-Bots a better raiding capability and a special qualification for conquer&amp;hold tasks.

Starting a match with K-Bots now also is way more worthy because of new units like an artillery K-Bot which finally delivers a missing role for the T1 K-Bots.

----

== Other major changes in comparison to BA: ==
*Power Plants &amp; Metal Extractors only have a rather tiny storage capacity. For serious backup resources you need storages.
*Arm Flash &amp; Core Instigator have more reasonable stats considering their costs and speed
*Arm Samson &amp; Core Slasher are Anti-Air only. For serious ground siege you have the dedicated artillery
*Laser weapons now also deal 100% of their damage and don't lose lots of damage potential on more distant targets
*Porcing and one unit spam got less effective so don't play a sitting duck and mix your units for good
*Crawling Bombs only have a big detanotion when they ignite themselves and they can deploy into a static mine
*T2 Tactical Nuke Launchers now act like small-factor nukes and can be countered by Anti-Nukes
*Lifting Commanders with T1 Air Transports doesn't work
* Construction K-Bots finally can ram down trees and don't get stuck anymore in forests
*Bombers on partol now actually pick targets instead of flying their routes without any reaction
*Decoy Commanders now have a big explosion too which doesn't deal much damage though
*Juno doesn't kill but stun mines, radars &amp; jammers
*LRPCs don't damage subs and underwater buildings
*Shields are exterior now i.e. the work like an umbrella -&gt; enemy units inside the shield bubble aren't affected

----

== Download, Info &amp; Media ==

=== '''Download Links:''' ===
Version 1.1:

*http://spring.jobjol.nl/show_file.php?id=987
*http://www.file-upload.net/en/download-778788/MA11.sd7.html
*http://www.tasdownloads.com/uploads/mods_public/MA11.sd7
*http://spring-portal.com/index.php/docman/doc_details/266-maximum-annihilation-v11

=== '''Info:''' ===
Modinfo / Modit:
http://modinfo.adune.nl/index.php?side=arm&amp;MOD=ma11

=== '''Media:''' ===
==== Youtube Videos ====
[http://www.youtube.com/watch?v=1bDrU3GB2iM&amp;fmt=18 http://i.ytimg.com/vi/1bDrU3GB2iM/default.jpg]
[http://www.youtube.com/watch?v=ayswV8KaStA&amp;fmt=18 http://i.ytimg.com/vi/ayswV8KaStA/default.jpg]

==== Still Shots ====
[http://img393.imageshack.us/img393/5769/loadscreen2ab4.jpg http://img393.imageshack.us/img393/5769/loadscreen2ab4.th.jpg] 
[http://img364.imageshack.us/img364/2746/loadscreenlm2.jpg http://img364.imageshack.us/img364/2746/loadscreenlm2.th.jpg]

----

== Credits ==

Maximum Annihilation is developed by Krogoth86 aka KÃƒÂ¤setoast. Lots of LUA widgets, effects and some of the new units have been created by others though. Read the Credits.txt for more info on that or go here:

http://pastebin.ca/1238530 (''fixme'')

----
Back to [[Games]]
{{Category:Mods}}</text>
      <sha1>sea1sb7xwfk8xij6hybetfj0mdqfgw8</sha1>
    </revision>
  </page>
  <page>
    <title>Media</title>
    <ns>0</ns>
    <id>3811</id>
    <redirect title="Games" />
    <revision>
      <id>30399</id>
      <parentid>30398</parentid>
      <timestamp>2017-07-10T05:14:00Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>Redirected page to [[Games]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="19">#REDIRECT [[Games]]</text>
      <sha1>djsidi1opw6u766a3o7yl826ypmlm79</sha1>
    </revision>
  </page>
  <page>
    <title>MelBot</title>
    <ns>0</ns>
    <id>3422</id>
    <revision>
      <id>29852</id>
      <parentid>29851</parentid>
      <timestamp>2016-02-07T21:09:00Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="434">MelBot is a lobby bot written by [[User:MelTraX|MelTraX]] which connects #taspring on Freenode or #sy on QuakeNet with the channel #sy in springs lobby 


Source Code: https://github.com/spring/MelBot/

TODO: get more info about it:
* http://springrts.com/phpbb/viewtopic.php?f=16&amp;t=29467
* http://springrts.com/phpbb/viewtopic.php?t=11883


alternative implemention in python:

https://github.com/spring/relayhost

[[Category:Lobby]]</text>
      <sha1>tsnklfgj5v757p00bi8g7kv9ful16hb</sha1>
    </revision>
  </page>
  <page>
    <title>Melbot</title>
    <ns>0</ns>
    <id>3423</id>
    <redirect title="MelBot" />
    <revision>
      <id>25921</id>
      <timestamp>2013-01-03T08:57:24Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>Abma moved page [[Melbot]] to [[MelBot]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20">#REDIRECT [[MelBot]]</text>
      <sha1>7cd0362jw16k8gzmcd79hy6nadq0188</sha1>
    </revision>
  </page>
  <page>
    <title>Messages.lua</title>
    <ns>0</ns>
    <id>3055</id>
    <revision>
      <id>27979</id>
      <parentid>27823</parentid>
      <timestamp>2013-11-17T10:48:49Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>95 ! remove engine support for gamedata/messages.tdf,</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1345">{{deprecated|Removed in Spring 95.0. See {{sourcelink|file=cont/examples/Widgets/game_messages.lua}} for a possible replacement.}}

==Location==
&lt;code&gt;messages.lua&lt;/code&gt; is a file in the &lt;code&gt;Gamedata/&lt;/code&gt; directory of a Spring Game. 

==Purpose==
This file defines what messages are shown when a player dies.

==Source==
The engine source code which parses the data from this file is viewable here: 

* {{sourcelink|file=rts/Game/Messages.cpp}}

==Details==
In the message string &lt;code&gt;%i&lt;/code&gt; is replaced with the player's team number and &lt;code&gt;%s&lt;/code&gt; is replaced with the player's name.

==Example==
===Single Message===
Example taken from Air Raid:

&lt;code&gt;&lt;pre&gt;
return {
  &quot;Player %i(%s) is down!&quot;
}
&lt;/pre&gt;&lt;/code&gt;

===Multiple Messages===
Example taken from [http://code.google.com/p/zero-k/ zeroK]. One message is picked from the list at random.

&lt;code&gt;&lt;pre&gt;
local messages = {
  [ [[Team%i(%s) is no more]] ] = {
    &quot;Team%i (%s) has been obliterated&quot;,
    &quot;Team%i (%s) has been liquidated&quot;,
    &quot;Team%i (%s) has been eradicated&quot;,
    &quot;Team%i (%s) has been terminated&quot;,
    &quot;Team%i (%s) has bowed out&quot;,
    &quot;Team%i (%s) has gone to a better place&quot;,
    &quot;Team%i (%s) beheld Satan as he fell from heaven LIKE LIGHTNING!&quot;,
    &quot;Team%i (%s) is out of existence&quot;,
    ...
    },
}
return messages
&lt;/pre&gt;&lt;/code&gt;


[[Category:gamedata]]</text>
      <sha1>l51miarjycnt6fs9nm52c6euce0rbvi</sha1>
    </revision>
  </page>
  <page>
    <title>Messages.tdf</title>
    <ns>0</ns>
    <id>3056</id>
    <redirect title="Messages.lua" />
    <revision>
      <id>21500</id>
      <timestamp>2011-03-20T14:57:26Z</timestamp>
      <contributor>
        <username>Knorke</username>
        <id>833</id>
      </contributor>
      <comment>created redirect</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="26">#REDIRECT [[Messages.lua]]</text>
      <sha1>3f5ltuqywk3l3o2fi8jmb5vewzk08t7</sha1>
    </revision>
  </page>
  <page>
    <title>MiniSpring</title>
    <ns>0</ns>
    <id>1031</id>
    <revision>
      <id>21278</id>
      <parentid>20603</parentid>
      <timestamp>2011-02-24T16:53:46Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="786">{{deprecated}}

'''MiniSpring''' is a special release of the Spring engine by Buggi. It halves the size of all units in the game, making maps look and feel twice as big as they really are. A new version has been released, and is currently compatible with Spring version .65b2. Unfortunately, because this mod uses a hacked executalbe, it is not properly compatible with the TASClient. It would be quite hard to actually set up and play a multiplayer game with it because of this. But that does not stop you from trying it out!

Don't mess with pages, d00ds, I patrol the wiki, you've been warned. :P

=== Links ===
* [http://taspring.clan-sy.com/phpbb/viewtopic.php?t=2703 Forum Link]
* [http://www.epicedit.com/MiniSpring_065b2_0.zip Download link]

[[Category:Mods]]
{{Category:Mods}}</text>
      <sha1>6gbsj6izekpcvaupxt2uiibxiyn5a3a</sha1>
    </revision>
  </page>
  <page>
    <title>Missile Tower</title>
    <ns>0</ns>
    <id>1529</id>
    <revision>
      <id>26881</id>
      <parentid>24350</parentid>
      <timestamp>2013-03-23T23:11:49Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>remove Category:Units</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="460">{{Balanced_Annihilation_deprecated}}

[[category:Balanced Annihilation]]
Missile Towers are light defense structures made for destroying aircraft. Their advantages over an [[LLT]] are that they have a longer range and do not consume energy, and are homing. However, they have much less health and do not shoot as quickly, so they should not be used as your main defensive structure.


[[Image:armrl.jpg|Arm Missile Tower]][[Image:corrl.jpg|Core Missile Tower]]</text>
      <sha1>mzusv9nld2catl4c3bcjoqt7hy0dhh5</sha1>
    </revision>
  </page>
  <page>
    <title>Mission development Guide</title>
    <ns>0</ns>
    <id>2196</id>
    <revision>
      <id>17139</id>
      <parentid>12009</parentid>
      <timestamp>2009-08-22T20:48:08Z</timestamp>
      <contributor>
        <username>Seanheron</username>
        <id>2595</id>
      </contributor>
      <comment>as far as I know, all of this functionality is long dead... deprecated</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8328">{{deprecated}}
===Getting started===
First download this [http://spring.unknown-files.net/file/2945/Blank_Lua_file_/ template ]

Then open it up in notepad and save it as a txt file

Load up spring from spring.exe in your spring folder.
Now choose mission builder from the list.

Push enter and type: .cheat
                    .nocost
These will allow you to build your mission a lot faster

Now build up a friendly base with all the units you want, and an enemy base with all the units you want for them. 

Then select all of the players units and base, then push enter and type: .savesel 0

Now do the same thing for the enemy, but type: .savesel 1

Lastly push enter and type: .savefeatures

Once you save the units, quit
Now open up the file '''infolog''' thats in spring folder.
 
It'll have the code for loading the units in there. Don't open up spring again before you copy it out or you'll lose everything.

You should see lines like this

units.Load(&quot;CORAK&quot;, float3(15400, 85, 2450), 0, false) 

units.Load(&quot;CORAK&quot;, float3(12650, 40, 2054), 0, false) 

units.Load(&quot;CORAK&quot;, float3(13444, 60, 2045, 0, false) 

Now cut out the unit loading code paste it into the Template:Setup() function

It should look like this:

-- Create a bunch of units for this simple mission
function Blank:Setup()

units.Load(&quot;arm_solar_collector&quot;, float3(472.0, 45.2, 280.0), 0, false)

units.Load(&quot;arm_metal_extractor&quot;, float3(328.0, 40.7, 360.0), 0, false)

units.Load(&quot;arm_commander&quot;, float3(469.7, 42.5, 441.7), 0, false)

units.Load(&quot;arm_wind_generator&quot;, float3(288.0, 40.1, 2768.0), 1, false)

units.Load(&quot;arm_light_laser_tower&quot;, float3(1920.0, 44.4, 2176.0), 1, false)

units.Load(&quot;arm_light_laser_tower&quot;, float3(1776.0, 43.9, 2208.0), 1, false)

units.Load(&quot;arm_vehicle_plant&quot;, float3(528.0, 74.0, 3664.0), 1, false)

Now to test it

Push Ctrl+H and find  Blank, then replace it with the name you want for your mission.

To change this txt file back to lua: 

Go to save as

Change the name to &quot;whatever.lua&quot; without the qutoes

Then change the type to &quot;All Files&quot;

Place in the startscript folder

If it opens and all the units spawn, then you are ready to start making your mission.

===Using the Update function as a trigger===

Now open up your txt to start scripting

The setup function only runs once, the first frame when the game starts and never again. That's where you want to put in all the code for loading the starting units and bases 

At center of your mission script is the update function. It gets called by the game 30 times per second. You call all the other functions from this function.  A lot of the missions run on a time counter.

EX. 
----

-- This function is executed every simulated frame (30 times/sec) 
function Blank:Update() 

    -- Perform initialization 
    if self.state == 0 then 
        self.state = 1 
        self:Setup() 
        
        print(&quot;Welcome&quot;) 
    end 
    
    -- Run SlowUpdate once every second 
    if math.mod(gs.frameNum, 30) == 0 then 
        self:SlowUpdate() 
    end 

    
    -- Do some stuff a bit later 
     if gs.frameNum == 30*10 then 
   print(&quot;Their moving to attack us &quot;) 
     end 
     if gs.frameNum == 30*20 then 
        self:SetupDelayed() 
     end 
     if gs.frameNum == 30*60 then 
        self:MoveTanks() 
     end 
     if gs.frameNum == 30*75 then 
        self:Airsupport() 
     end 
end

----

The parts at the top are functions that get called in the Update() function
after x amount of time. 

10 seconds in the game it prints a message. 

SetupDelayed() gets called after 20 seconds.

MoveTanks() is called after 60 sec  

Airsupport() is called after 75 sec

===Indepth look at the MoveTanks() function===

Below is the code for MoveTanks(). It loads a bunch of units near the edge of the map where the enemy base is and tells them to move to a point on the map. You get the load unit code for them the same way you do for loading the starting units in the setup function.

----

function Blank:MoveTanks()
    local unitList = {
        units.Load(&quot;ARMSTUMP&quot;, float3(4294.4, 119.7, 569.2), 1, false),
    units.Load(&quot;ARMSTUMP&quot;, float3(4375.3, 121.6, 555.5), 1, false),
    units.Load(&quot;ARMSTUMP&quot;, float3(4424.2, 126.5, 621.0), 1, false),
    units.Load(&quot;ARMSTUMP&quot;, float3(4498.7, 119.6, 509.9), 1, false),
    units.Load(&quot;ARMSAM&quot;, float3(4294.2, 115.2, 449.7), 1, false),
    units.Load(&quot;ARMSTUMP&quot;, float3(4555.6, 118.8, 486.7), 1, false),
    units.Load(&quot;ARMSTUMP&quot;, float3(4612.9, 118.8, 471.7), 1, false),
    units.Load(&quot;ARMSTUMP&quot;, float3(4298.7, 117.6, 515.2), 1, false),
    units.Load(&quot;ARMSAM&quot;, float3(4332.7, 114.1, 335.6), 1, false),
    units.Load(&quot;ARMSTUMP&quot;, float3(4345.2, 116.9, 497.9), 1, false),
    units.Load(&quot;ARMSTUMP&quot;, float3(4445.7, 120.3, 506.3), 1, false),
    units.Load(&quot;ARMSAM&quot;, float3(4472.5, 114.1, 391.7), 1, false),
    units.Load(&quot;ARMSAM&quot;, float3(4571.3, 115.2, 358.5), 1, false),
    units.Load(&quot;ARMSTUMP&quot;, float3(4472.8, 115.6, 450.8), 1, false),
    units.Load(&quot;ARMSAM&quot;, float3(4260.4, 114.1, 396.6), 1, false),
    units.Load(&quot;ARMBULL&quot;, float3(4579.6, 117.6, 427.1), 1, false)
    }
    local c = Command()
    c.id = Command.MOVE
    c:AddParam(4284)
    c:AddParam(132)
    c:AddParam(3886)
    for i = 1, table.getn(unitList) do
   unitList[i]:GiveCommand(c)
    end
end  

----
===Details for commands===
---=
 }
    local c = Command()
    c.id = Command.MOVE
    c:AddParam(4284)
    c:AddParam(132)
    c:AddParam(3886)
    for i = 1, table.getn(unitList) do
   unitList[i]:GiveCommand(c)
    end
end  

----


The commands are:

     Command.STOP
     Command.WAIT
     Command.MOVE
     Command.FIGHT
     Command.ATTACK
     Command.AREA_ATTACK
     Command.GUARD
     Command.LOAD_UNITS
     Command.UNLOAD_UNITS
---

 c:AddParam(4284)
    c:AddParam(132)
    c:AddParam(3886)

These are points on the map, they show up in the bottom left corner of the screen while playing
----

===Using groups===

You can refer to a group of guys later on, somewhere else in the script if you have  given them a name. For example. 
---=

self.panzer1 = {
        units.Load(&quot;ARMSTUMP&quot;, float3(2054.0, 109.4, 594.0), 1, false),
       units.Load(&quot;ARMMART&quot;, float3(2271.0, 108.2, 606.0), 1, false),
   units.Load(&quot;ARMMART&quot;, float3(2303.0, 108.2, 574.0), 1, false),
   units.Load(&quot;ARMYORK&quot;, float3(2065.0, 108.2, 480.0), 1, false),
       units.Load(&quot;ARMMART&quot;, float3(2207.0, 109.1, 638.0), 1, false),
       units.Load(&quot;ARMYORK&quot;, float3(2113.0, 108.2, 528.0), 1, false),
       units.Load(&quot;ARMYORK&quot;, float3(2113.0, 107.0, 480.0), 1, false),
       units.Load(&quot;ARMSTUMP&quot;, float3(2126.0, 111.4, 606.0), 1, false),
       units.Load(&quot;ARMMART&quot;, float3(2239.0, 108.2, 638.0), 1, false),
       units.Load(&quot;ARMSTUMP&quot;, float3(2094.0, 110.5, 606.0), 1, false),
       units.Load(&quot;ARMBULL&quot;, float3(2250.0, 108.2, 503.0), 1, false),
       units.Load(&quot;ARMSTUMP&quot;, float3(2136.0, 113.8, 638.0), 1, false),
       units.Load(&quot;ARMSTUMP&quot;, float3(2168.0, 111.4, 638.0), 1, false),
       units.Load(&quot;ARMSTUMP&quot;, float3(2022.0, 111.1, 594.0), 1, false),
       units.Load(&quot;ARMMART&quot;, float3(2239.0, 108.2, 606.0), 1, false),
       units.Load(&quot;ARMYORK&quot;, float3(2065.0, 108.2, 528.0), 1, false),
       units.Load(&quot;ARMMART&quot;, float3(2207.0, 108.2, 606.0), 1, false),
       units.Load(&quot;ARMMART&quot;, float3(2207.0, 108.2, 574.0), 1, false),
       units.Load(&quot;ARMMART&quot;, float3(2239.0, 108.2, 574.0), 1, false),
       units.Load(&quot;ARMMART&quot;, float3(2271.0, 108.2, 574.0), 1, false),
       units.Load(&quot;ARMYORK&quot;, float3(2161.0, 108.2, 528.0), 1, false),
       units.Load(&quot;ARMYORK&quot;, float3(2161.0, 108.2, 480.0), 1, false),
       units.Load(&quot;ARMMART&quot;, float3(2303.0, 109.4, 606.0), 1, false),
       units.Load(&quot;ARMSTUMP&quot;, float3(2077.0, 113.0, 652.0), 1, false),
       units.Load(&quot;ARMSTUMP&quot;, float3(2109.0, 115.2, 652.0), 1, false)
    }

Then order them around like this

local c = Command()
    c.id = Command.PATROL
    c:AddParam(4645)
    c:AddParam(140)
    c:AddParam(8926)
    for i = 1, table.getn(self.panzer1) do
   self.panzer1[i]:GiveCommand(c)
    end

===Credits===
Wrote by Gamer17

Got everything from:

smartie and Thor

More info at this wiki
http://spring.clan-sy.com/wiki/Mission_development


Ask any questions at this tread
http://spring.clan-sy.com/phpbb/viewtopic.php?t=10501&amp;postdays=0&amp;postorder=asc&amp;start=0</text>
      <sha1>nzg5jmbd3hkvu04tq43itbfiyzv4ef3</sha1>
    </revision>
  </page>
  <page>
    <title>Mod Development:Archives</title>
    <ns>0</ns>
    <id>3548</id>
    <redirect title="Gamedev:Archives" />
    <revision>
      <id>27546</id>
      <timestamp>2013-08-19T17:42:10Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>Flozi moved page [[Mod Development:Archives]] to [[Gamedev:Archives]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30">#REDIRECT [[Gamedev:Archives]]</text>
      <sha1>l177ez9gkc2w2y1p62jsue52ol4yret</sha1>
    </revision>
  </page>
  <page>
    <title>Mod Development:Sidepics</title>
    <ns>0</ns>
    <id>3549</id>
    <redirect title="Gamedev:Sidepics" />
    <revision>
      <id>27548</id>
      <timestamp>2013-08-19T17:42:34Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>Flozi moved page [[Mod Development:Sidepics]] to [[Gamedev:Sidepics]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30">#REDIRECT [[Gamedev:Sidepics]]</text>
      <sha1>a68i8pf7zi6p70vjyviqtxrfrdrjyeq</sha1>
    </revision>
  </page>
  <page>
    <title>Mod and Unit development</title>
    <ns>0</ns>
    <id>3000</id>
    <redirect title="Gamedev:Main" />
    <revision>
      <id>26348</id>
      <parentid>20685</parentid>
      <timestamp>2013-03-07T21:37:29Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>nix a double redirect (delete old redirects instead?)</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="26">#REDIRECT [[Gamedev:Main]]</text>
      <sha1>i8doqfxgw0r0qgaftgrxzsn5vvhgqjz</sha1>
    </revision>
  </page>
  <page>
    <title>Mod structure</title>
    <ns>0</ns>
    <id>3001</id>
    <redirect title="Game structure" />
    <revision>
      <id>20687</id>
      <timestamp>2010-12-05T00:43:25Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>moved [[Mod structure]] to [[Game structure]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="28">#REDIRECT [[Game structure]]</text>
      <sha1>rkd8r1ub707vf2b2as0lajlvnvoi7f6</sha1>
    </revision>
  </page>
  <page>
    <title>Modinfo.lua</title>
    <ns>0</ns>
    <id>3076</id>
    <revision>
      <id>30518</id>
      <parentid>30515</parentid>
      <timestamp>2017-12-19T20:30:06Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>/* Details */ just use tag template instead?</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5060">==Location==
{{var|modinfo.lua}} is a file in the root directory of a Spring Game.

==Purpose==
The purpose of this file is to define a Spring content package as a game or game content archive. It is read both by the multiplayer lobbies and the engine itself.

==Source==
The engine source code which parses the data from this file is viewable here:

* {{sourcelink|file=rts/System/FileSystem/ArchiveScanner.cpp}}

==Details==
The following tags are read, all are strings unless otherwise specified:

{{tag
|name = name
|type = string
|default = n/a
|special = Required
|description = The name displayed in the lobby or via Spring.exe, {{taglink|version}} is automatically appended. [http://springrts.com/phpbb/viewtopic.php?f=14&amp;t=25927 Don't put the version into the name!]
}}

{{tag
|name = shortName
|type = string
|default = n/a
|description = A short representation of the package name, usually an acronym of the above.
}}

{{tag
|name = version
|type = string
|default = n/a
|description = The version of this package. See [[#Further Reading]] for more information.
}}

{{tag
|name = mutator
|type = string
|default = n/a
|special = Required
|description = Is the package an official release or a mutator?
}}

{{tag
|name = game
|type = string
|default = n/a
|description = What game is this package based on? This is subtly different from the {{name|name}} attribute. Consider that a main game archive and a mutator would have the same game, but different name values.
}}

{{tag
|name = shortGame
|type = string
|default = n/a
|description = Again an acronym representing the above.
}}

{{tag
|name = description
|type = string
|default = n/a
|description = A description of this content package.
}}

{{tag
|name = modType
|type = int
|default = n/a
|description = What kind of content package is this? {{value|1}} for a game or mutator, {{value|4}} for a hidden base content file (prior to 104.0 this was {{value|0}}), menu archives use {{value|5}}. Maps use 3 in [[mapinfo.lua]].
}}

{{tag
|name = depend
|type = table
|default = {}
|description = A table of other content packages, referenced by {{name|name + version}}, not their filename, which this package depends on. Spring will load them if they are present, or throw an error if they are missing. This is used by mutators to depend on main game file and by all games to depend on base content files. New games may particularly want to depend on {{value|'Spring Cursors'}} (provided as {{var|cursors.sdz}} in the Spring {{var|base}} directory) if they do not yet have their own [[MouseCursors|custom cursors]].
}}

{{tag
|name = replace
|type = table
|default = {}
|description = A table of content packages, again referenced by {{name|name + version}}, that this package is meant to replace. For example if you have a base content package with your game music, you may wish to replace it with an updated version later on without having to modify the [[modinfo.lua]] of all packages which {{var|depend}} on it. This is not usually used to update main game archives, however, as players may wish to continue playing a previous version.
}}

==Examples==
===Main Game file===
&lt;syntaxhighlight lang=&quot;lua&quot;&gt;
local modinfo = {
  name = &quot;My Awesome Spring Game&quot;,
  shortName = &quot;MASG&quot;,
  game = &quot;My Awesome Spring Game&quot;,
  shortGame = &quot;MASG&quot;,
  mutator = &quot;Official&quot;,
  version = &quot;v1.0&quot;,
  description =	&quot;An awesome game I made with units&quot;,
  url =	&quot;http://www.linktomyawesomegame.com/&quot;,
  modtype = 1,
}

return modinfo
&lt;/syntaxhighlight&gt;

===Mutator===
A mutator depends on the main game file, but does not replace it, it will usually have a different {{name|name}} and {{name|shortName}} but the same {{name|game}} and {{name|shortGame}} values as the main game file. It should still have a {{name|modtype}} of {{value|1}}.


&lt;syntaxhighlight lang=&quot;lua&quot;&gt;
local modinfo = {
  name = &quot;My Awesome Spring Game Mutator&quot;,
  shortName = &quot;MASGM&quot;,
  game = &quot;My Awesome Spring Game&quot;,
  shortGame = &quot;MASG&quot;,
  mutator = &quot;Double Speed Mutator&quot;,
  version = &quot;v1.0&quot;,
  description =	&quot;An awesome mutator I made for MASG&quot;,
  url =	&quot;http://www.linktomyawesomegame.com/&quot;,
  modtype = 1,
  depend = {
    &quot;My Awesome Spring Game v1.0&quot;,
  }
}

return modinfo
&lt;/syntaxhighlight&gt;

===Base Content===
Base content is a hidden, unplayable content package which is depended on by your game. For example you might include music in a hidden content package so that it was not updated with the main game files. It must have a {{name|modtype}} of {{value|4}} ({{value|0}} prior to 104.0). The following example is from {{var|springcontent.sdz}}, which is automatically loaded by Spring for all games.


&lt;syntaxhighlight lang=&quot;lua&quot;&gt;
local modinfo = {
  name = &quot;Spring content&quot;,
  version = &quot;v1&quot;,
  description = &quot;Mods can depend on this archive to get all the spring content&quot;,
  modtype = 4,
  depend = {
    &quot;Spring Bitmaps v1&quot;
  },
}

return modinfo
&lt;/syntaxhighlight&gt;

===Further Reading===
Forum thread: {{forumlink|topic=25927&amp;start=5|title=Please fix:games contain version in &quot;name&quot; tag (modinfo.lua)}}

[[Category:gamedata]]</text>
      <sha1>h8rd1ynxnsuz7bglf6wntrrrzd90yt0</sha1>
    </revision>
  </page>
  <page>
    <title>Modoptions.lua</title>
    <ns>0</ns>
    <id>3198</id>
    <revision>
      <id>27912</id>
      <parentid>26925</parentid>
      <timestamp>2013-10-29T18:07:20Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>recat to Gamedata, isn't in the folder, but neither is ModInfo</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1467">Note: map options (&lt;code&gt;mapoptions.lua&lt;/code&gt;) and game options (&lt;code&gt;modoptions.lua&lt;/code&gt;) are basically the same, so one page for both.

==Purpose==
Allow players to set game variables via lobby.

==Reading==
Use [[Lua_SyncedRead#Mod-.2FMap-Options|these functions.]]

To avoid errors '''check modoptions for being nil''', in case the game was not started by a lobby. 
Otherwise you get &quot;''attempt to index local 'modOptions' (a nil value)''&quot;


&lt;code&gt;&lt;pre&gt;
local lolfactor = 100	--some default value to be used when no modoptions are present
local modOptions = Spring.GetModOptions()
if (modOptions) then
	lolfactor = modOptions.lolfactor
else
	Spring.Echo (&quot;no modoptions are set&quot;)
end
Spring.Echo (&quot;lolfactor = &quot; .. lolfactor)
--do something with lolfactor--&lt;/pre&gt;&lt;/code&gt;

==Examples==
===Some simple example===
Allow players to set start resources.

&lt;code&gt;&lt;pre&gt;local opts= {
	{
	key=&quot;startingmetal&quot;,
	name=&quot;Start Metal&quot;,
	desc=&quot;How much metal at start?&quot;,
	type   = 'number',	
	def    = 4000,
	min    = 1,
	max    = 40000,
	step   = 1,
	},
return opts&lt;/pre&gt;&lt;/code&gt;

The gadget that gives the start resources reads it like this:
&lt;code&gt;&lt;pre&gt;local startingmetal=4000
local modOptions = Spring.GetModOptions()
if (modOptions) then startingmetal = modOptions.startingmetal or 4000 end
Spring.SetTeamResource(teamID, &quot;m&quot;, startingmetal)&lt;/pre&gt;&lt;/code&gt;

==links==
zero-K: http://code.google.com/p/zero-k/source/browse/trunk/mods/zk/ModOptions.lua

[[Category:Gamedata]]</text>
      <sha1>fay0epdjasvdyirxa89aa31jvszes49</sha1>
    </revision>
  </page>
  <page>
    <title>Modrules.lua</title>
    <ns>0</ns>
    <id>3054</id>
    <revision>
      <id>31827</id>
      <parentid>31573</parentid>
      <timestamp>2022-07-05T05:23:32Z</timestamp>
      <contributor>
        <username>Forboding angel</username>
        <id>2578</id>
      </contributor>
      <comment>/* system */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="12466">==Location==
&lt;code&gt;modrules.lua&lt;/code&gt; is a file in the &lt;code&gt;Gamedata/&lt;/code&gt; directory of a Spring game. 

==Purpose==
This file controls various global parameters of the game, for example how fast units gain experience, what unit types can be transported, how fine grained the LOS system is, etc.

==Source==
The engine source code which parses the data from this file is viewable here:

* {{sourcelink|file=rts/Sim/Misc/ModInfo.cpp}}

==Data Types==
{{DataTypes}}

==Details==
&lt;code&gt;Modrules.lua&lt;/code&gt; is divided into several sub-tables containing tags specific to each section, as follows:


===capture===
{{tag
|name = energyCostFactor
|type = float
|default = 0.0
|description = How much of the original energy cost it requires to capture something.
}}


===construction===
{{tag
|name = constructionDecay
|type = bool
|default = true
|description = Do uncompleted building frames begin to decay if no builder is working on them?
}}

{{tag
|name = constructionDecayTime
|type = float
|default = 6.66
|description = The time in seconds before abandoned building frames begin to decay.
}}

{{tag
|name = constructionDecaySpeed
|type = float
|default = 0.03
|description = How fast build progress decays for abandoned building frames. Note that the rate is inversely proportional to the {{xtaglink|Gamedev:UnitDefs|buildtime}} i.e. a building with a larger {{xtaglink|Gamedev:UnitDefs|buildtime}} will decay more slowly for a given value of this tag than a building with a shorter {{xtaglink|Gamedev:UnitDefs|buildtime}}.
}}


===experience===
{{tag
|name = experienceMult
|type = float
|default = 1.0
|description = Controls the amount of experience gained by units engaging in combat. The formulae used are: 
::&lt;code&gt;xp for damage = 0.1 * experienceMult * damage / target_HP * target_power / attacker_power&lt;/code&gt; 
::&lt;code&gt;xp for kill = 0.1 * experienceMult * target_power / attacker_power&lt;/code&gt;. 
: Where {{xtaglink|Gamedev:UnitDefs|power}} can be set by the UnitDef tag.
}}

{{tag
|name = powerScale
|type = float
|default = 1.0
|description = Controls how gaining experience changes the relative {{xtaglink|Gamedev:UnitDefs|power}} of the unit. The formula used is &lt;code&gt;Power multiplier = powerScale * (1 + xp / (xp + 1))&lt;/code&gt;.
}}

{{tag
|name = healthScale
|type = float
|default = 0.7
|description = Controls how gaining experience increases the {{xtaglink|Gamedev:UnitDefs|maxDamage}} (total hitpoints) of the unit. The formula used is &lt;code&gt;Health multiplier = healthScale * (1 + xp / (xp + 1))&lt;/code&gt;.
}}

{{tag
|name = reloadScale
|type = float
|default = 0.4
|description = Controls how gaining experience decreases the {{xtaglink|Gamedev:UnitDefs|reloadTime}} of the unit's weapons. The formula used is &lt;code&gt;Rate of fire multiplier = reloadScale * (1 + xp / (xp + 1))&lt;/code&gt;.
}}


===featureLOS===
{{tag
|name = featureVisibility
|type = int
|default = 3
|description = Controls the visibility of features. Can be &lt;code&gt;0&lt;/code&gt; - no default LOS for features, &lt;code&gt;1&lt;/code&gt; - Gaia features always visible, &lt;code&gt;2&lt;/code&gt; - allyteam &amp; Gaia features always visible, or &lt;code&gt;3&lt;/code&gt; - all features always visible.
}}


===fireAtDead===
{{tag
|name = fireAtKilled
|type = bool
|default = false
|description = Will units continue to target and fire on enemies which are running their &lt;code&gt;Killed()&lt;/code&gt; animation? (See [[Animation-LuaCallins#Generic]])
}}

{{tag
|name = fireAtCrashing
|type = bool
|default = false
|description = Will units continue to target and fire on enemy aircraft which are in the 'crashing' state? (See [[Lua_SyncedCtrl#Unit_Control]])
}}


===flankingBonus===
{{tag
|name = defaultMode
|type = int
|default = 1
|description = The default {{xtaglink|Gamedev:UnitDefs|flankingBonusMode}} for units. Can be &lt;code&gt;0&lt;/code&gt; - No flanking bonus. Mode &lt;code&gt;1&lt;/code&gt; builds up the ability to move over time, and swings to face attacks, but does not respect the way the unit is facing. Mode &lt;code&gt;2&lt;/code&gt; also can swing, but moves with the unit as it turns. Mode &lt;code&gt;3&lt;/code&gt; stays with the unit as it turns and otherwise doesn't move, the ideal mode to simulate something such as tank armour. 
}}


===los===
{{tag
|name = losMipLevel
|type = int
|default = 1
|description = Controls the resolution of the LOS calculations. A higher value means lower resolution but increased performance. An increase by one level means half the resolution of the LOS map in both x and y direction. Must be between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;6&lt;/code&gt; inclusive.
}}

{{tag
|name = losMul
|type = float
|default = 1.0
|special = {{removed|101.0}}
|description = Multiplies all unit's {{xtaglink|Gamedev:UnitDefs|sightDistance}} by this value. Generally speaking you should always use the default.
}}

{{tag
|name = airMipLevel
|type = int
|default = 1
|description = Controls the resolution of the LOS vs. aircraft calculations. A higher value means lower resolution but increased performance. An increase by one level means half the resolution of the air-LOS map in both x and y direction. Must be between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;30&lt;/code&gt; inclusive. [http://springrts.com/mantis/view.php?id=4031#c11709] - jK describe for you what the value means.
}}

{{tag
|name = airLosMul
|type = float
|default = 1.0
|special = {{removed|101.0}}
|description = Multiplies all unit's {{xtaglink|Gamedev:UnitDefs|airSightDistance}} by this value. Generally speaking you should always use the default.
}}

{{tag
|name = radarMipLevel
|type = int
|default = 2
|description = Controls the resolution of the radar. See description of airMipLevel for details.
}}

===movement===
{{tag
|name = allowAirPlanesToLeaveMap
|type = bool
|default = true
|description = Are (gunship) aircraft allowed to fly outside the bounds of the map?
}}

{{tag
|name = allowAircraftToHitGround
|type = bool
|default = true
|special = {{new|90.0}}
|description = Are aircraft allowed to hit the ground whilst manoeuvring?
}}

{{tag
|name = allowPushingEnemyUnits
|type = bool
|default = false
|special = {{new|83.0}}
|description = Can enemy ground units push each other during collisions?
}}

{{tag
|name = allowCrushingAlliedUnits
|type = bool
|default = false
|special = {{new|85.0}}
|description = Can allied ground units crush each other during collisions? Units still have to be explicitly set as crushable using the &lt;code&gt;crushable&lt;/code&gt; parameter of [[Lua_SyncedCtrl#Unit_Control|Spring.SetUnitBlocking]].
}}

{{tag
|name = allowUnitCollisionDamage
|type = bool
|default = false
|special = {{new|85.0}}
|description = Do unit-unit (skidding) collisions cause damage?
}}

{{tag
|name = allowUnitCollisionOverlap
|type = bool
|default = true
|special = {{new|89.0}}
|description = Can mobile units collision volumes overlap one another? Allows unit movement like [http://www.youtube.com/watch?v=mRtePUdVk2o this (video)] at the cost of more 'clumping'.
}}

{{tag
|name = allowGroundUnitGravity
|type = bool
|default = true
|special = {{new|92.0}}
|description = Allows fast moving mobile units to 'catch air' as they move over terrain.
}}

{{tag
|name = allowHoverUnitStrafing
|type = bool
|default = true if using QTPFS pathfinder
|special = {{new|92.0}}
|description = Allows hovercraft units to slide in turns.
}}

{{tag
|name = useClassicGroundMoveType
|type = bool
|default = false
|special = {{new|89.0}} {{removed|102.0}}
|description = A ticket back to unit movement circa 2009: no reversing, no {{xtaglink|Gamedev:UnitDefs|turninplace|false}}, no smooth collision handling, no nothing. For comparison of pathfinding code.
}}

===paralyze===
{{tag
|name = paralyzeOnMaxHealth
|type = bool
|default = true
|description = Are units paralyzed when the level of emp is greater than their current health or their maximum health?
}}


===reclaim===
{{tag
|name = multiReclaim
|type = int
|default = 0
|description = Can multiple units reclaim a feature or only one? &lt;code&gt;0&lt;/code&gt; implies the latter, all other values the former.
}}

{{tag
|name = reclaimMethod
|type = int
|default = 1
|description = Controls how features are reclaimed. Can be &lt;code&gt;0&lt;/code&gt; - gradual reclaim, &lt;code&gt;1&lt;/code&gt; - all reclaimed at end, any other positive value &lt;code&gt;n&lt;/code&gt; - reclaim in &lt;code&gt;n&lt;/code&gt; chunks.
}}

{{tag
|name = unitMethod
|type = int
|default = 1
|description = Controls how units are reclaimed. Can be &lt;code&gt;0&lt;/code&gt; - gradual reclaim, &lt;code&gt;1&lt;/code&gt; - all reclaimed at end, any other positive value &lt;code&gt;n&lt;/code&gt; - reclaim in &lt;code&gt;n&lt;/code&gt; chunks.
}}

{{tag
|name = featureEnergyCostFactor
|type = float
|default = 0.0
|description = How much energy should reclaiming a feature cost? Multiplier against the fraction of the features' {{xtaglink|Gamedev:FeatureDefs|metal}} content reclaimed.
}}

{{tag
|name = unitEnergyCostFactor
|type = float
|default = 0.0
|description = How much energy should reclaiming a unit cost? Multiplier against the fraction of the unit's {{xtaglink|Gamedev:UnitDefs|buildCostEnergy}} reclaimed. 
}}

{{tag
|name = unitEfficiency
|type = float
|default = 1.0
|description = How much metal should reclaiming a unit return? Multiplier against the unit's {{xtaglink|Gamedev:UnitDefs|buildCostMetal}}.
}}

{{tag
|name = allowEnemies
|type = bool
|default = true
|description = Can enemy units be reclaimed?
}}

{{tag
|name = allowAllies
|type = bool
|default = true
|description = Can allied units be reclaimed?
}}


===repair===
{{tag
|name = energyCostFactor
|type = float
|default = 0.0
|description = How much of the original energy cost it requires to repair something.
}}


===resurrect===
{{tag
|name = energyCostFactor
|type = float
|default = 0.5
|description = How much of the original energy cost it requires to resurrect something.
}}


===sensors===
{{tag
|name = requireSonarUnderWater
|type = bool
|default = true
|description = If &lt;code&gt;true&lt;/code&gt; then when underwater, units only get LOS if they also have sonar.
}}
{{tag
|name = alwaysVisibleOverridesCloaked
|type = bool
|default = false
|special = {{new|101.0}}
|description = If &lt;code&gt;true&lt;/code&gt; then units will be visible even when cloaked (probably?).
}}
{{tag
|name = separateJammers
|type = bool
|default = true
|special = {{new|101.0}}
|description = When &lt;code&gt;true&lt;/code&gt; each allyTeam only jams their own units.
}}

===system===
{{tag
|name = pathFinderSystem
|type = int
|default = 0
|special={{new|85.0}}
|description = Which pathfinder does the game use? Can be &lt;code&gt;0&lt;/code&gt; - The legacy default pathfinder, &lt;code&gt;1&lt;/code&gt; - Quad-Tree Pathfinder System ([[QTPFS]])}} or &lt;code&gt;-1&lt;/code&gt; - disabled.

{{tag
|name = pathFinderUpdateRate
|type = float
|default = 0.007
|special={{new|98.0}}
|description = Controls how often the pathfinder updates; larger values means more rapid updates.}}

{{tag
|name = pathFinderRawDistMult
|type = float
|default = 1.25
|special={{new|105.+ BAR}}
|description = Engine does raw move with a limited distance, this multiplier adjusts that}}

{{tag
|name = allowTake
|type = bool
|default = true
|special = {{new|103.0}}
|description = Enables and disables the {{var|/take}} [[UI_commands|UI command]].}}

===transportability===
{{tag
|name = transportAir
|type = bool
|default = false
|description = Can aircraft be transported?
}}

{{tag
|name = transportShip
|type = bool
|default = false
|description = Can ships be transported?
}}

{{tag
|name = transportHover
|type = bool
|default = false
|description = Can hovercraft be transported?
}}

{{tag
|name = transportGround
|type = bool
|default = true
|description = Can ground units be transported?
}}

{{tag
|name = targetableTransportedUnits
|type = bool
|default = false
|special = {{new|89.0}}
|description = Can transported units be targeted by weapons? &lt;code&gt;true&lt;/code&gt; allows both manual and automatic targeting.
}}


==Examples==

===Empty===

&lt;code&gt;modrules.lua&lt;/code&gt; can simply return an empty table like this:
&lt;pre&gt;
return {}
&lt;/pre&gt;
If you do this, Spring will use the default values.

===Configurable by modoptions===
Interestingly &lt;code&gt;modrules.lua&lt;/code&gt; can read [[Modoptions.lua|modoptions]], so these parameters can be scripted to be configurable from the lobby.
For example to allow selecting either legacy default pathfinder or [[QTPFS]] via a modoption:
&lt;pre&gt;
  system = {
    pathFinderSystem = (Spring.GetModOptions() and (Spring.GetModOptions().qtpfs == &quot;1&quot;) and 1) or 0,
  },
&lt;/pre&gt;

===External Examples===
[https://github.com/EvolutionRTS/Evolution-RTS/blob/master/Gamedata/modrules.lua 'Evolution RTS' Modrules.lua]

[[Category:gamedata]]</text>
      <sha1>24ht66ffd3ra3gqmmmxpvc6dyr6bu08</sha1>
    </revision>
  </page>
  <page>
    <title>Mods</title>
    <ns>0</ns>
    <id>970</id>
    <redirect title="Games" />
    <revision>
      <id>20610</id>
      <parentid>16851</parentid>
      <timestamp>2010-11-29T08:33:36Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>Redirected page to [[Games]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="19">#REDIRECT [[Games]]</text>
      <sha1>djsidi1opw6u766a3o7yl826ypmlm79</sha1>
    </revision>
  </page>
  <page>
    <title>Mods, and their strategies/tactics</title>
    <ns>0</ns>
    <id>1128</id>
    <revision>
      <id>25283</id>
      <parentid>16898</parentid>
      <timestamp>2012-10-29T13:26:27Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>remove wanted link (SWTA)</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="157">{{deprecated}}

*[[Absolute_Annihilation#Strategy|Absolute Annihilation]]
*[[Final Frontier]]
*Star Wars TA
*[[Expand &amp; Exterminate]]
*[[NOTA#Strategy|NOTA]]</text>
      <sha1>bhncfe8f47y5imp6pmqb8oa1urfhqsh</sha1>
    </revision>
  </page>
  <page>
    <title>Mods/The Lost Legacy</title>
    <ns>0</ns>
    <id>1237</id>
    <redirect title="The Lost Legacy" />
    <revision>
      <id>11064</id>
      <timestamp>2006-02-04T13:58:41Z</timestamp>
      <contributor>
        <username>Hoehrer</username>
        <id>103</id>
      </contributor>
      <comment>Mods/The Lost Legacy moved to The Lost Legacy</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30">#REDIRECT [[The Lost Legacy]]
</text>
      <sha1>fo423zm6fjlsb0np3rb3v5u6ob4jlee</sha1>
    </revision>
  </page>
  <page>
    <title>Modweb Generator</title>
    <ns>0</ns>
    <id>1686</id>
    <revision>
      <id>26927</id>
      <parentid>20728</parentid>
      <timestamp>2013-03-25T20:16:49Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>remove Game development</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1852">{{deprecated}}
The Modweb Generator is a set of PHP scripts created by [[User:Maelstrom|Maelstrom]] to easily create statistics pages for each unit and weapon in a mod.

=== Instructions ===
To create a 'Modweb' for your mod, follow these instructions
# Download the current version of the Modweb scripts from the forum thread. A link is down the bottom of this page.
# Unzip the Modweb generator into a directory on your webserver.
# Unzip the following folders and files of your mod into the '''mod/''' directory of the Modweb:
#* The '''modinfo.tdf''' file, found in the base directory of the mod, into the base directory
#* The '''units/''' directory of the mod,
#* The '''weapons/''' directory of the mod,
#* The '''gamedata/''' directory of the mod.
#* The files in '''unitpics/''' directory of the mod in the '''output/images''' folder of the modweb generator (note : unitpics '''MUST''' be in '''.bmp''' format.
# Run '''index.php''' through your web browser of choice, and select the relevant options from the menu.
# Copy the contents of the '''output/''' folder to the desired location
# Your done!

=== Notes ===
* Depending on the template, build pics will need to be uploaded to an '''images/''' directory where all the HTML files are located.

=== Examples ===
* [http://ta-aa.sourceforge.net/modweb/ AA's Technical Unit Guide], using excellent custom templates (outdated).
* [http://froob.iamacup.com/AAmodweb/ AA 2.21 Technical Unit Guide], Made by Maelstrom and [Gen]Fox after loads of headache.
* [http://taspring.clan-sy.com/warcows/XTAv6/ XTA Modweb]. A bit outdated, but still there.
* [http://www.ta-spring.com/mods/xectvsmynn/unitguide/ Xect vs. Mynn Modweb]. Used an old version of the Modweb.
* Please add yours to the list if its not here!

=== Links ===

[http://taspring.clan-sy.com/phpbb/viewtopic.php?t=3842 Forum Thread]</text>
      <sha1>io5dj398n7b8kndwx5lo7iv04h4d9iu</sha1>
    </revision>
  </page>
  <page>
    <title>Monthly Topic Rotation</title>
    <ns>0</ns>
    <id>1127</id>
    <revision>
      <id>23257</id>
      <parentid>23073</parentid>
      <timestamp>2012-01-09T04:30:45Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>remove category</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10622">{{deprecated}}

&quot;Monthy Topic Rotation&quot; is a term coined by Gnome referring to the fact that people keep coming into the forums and posting messages on the same subject.  It seems that as Spring becomes more popular, more new people keep coming up with the same ideas and questions... think of this as the &quot;Is your idea original?&quot; FAQ as opposed to the &quot;real&quot; [[FAQ]].

Now in some situations it's okay to repost on the same topic, if it has been only mentioned before in other people's topics or if you make reference to the fact that it is a known issue you are addressing with new ideas... but that doesn't excuse you from the list.  One way or the other, the community might make fun of you for rehashing old topics, expecially when they aren't forgotten so much as people are bored of talking about them.

This has now turned into a sort of game. You can see the current scores here: http://maelstrom.niiil.com/?l=mtr (Note from a visitor: link seems to be down)

=The Topics=
'''List of Generic Topics with brief discussion and list of topics posted on these subjects for quick reference:'''

===Spring is dying / Large BA games on DSD are killing it===
Has been &quot;discussed&quot; to death.
Please avoid threads that contain nothing but complaints or unrealistic ideas.

===Advertise &quot;Spring&quot; to make it more popular===
Everybody knows that advertising brings more players. What is needed are people to actually do something, eg make easy to use installers, videos or web pages.

===Custom Resources===
Requests or Suggestions that involve anything from different names for the resources we have, better control over the handling of resources, resources like those in other games etc.  The best generalized suggestion is for a more dynamic, mod controlled resource and unit limit. Often coupled with suggestions for hacking or script based work arounds for the lack of the requested feature.

*[http://springrts.com/phpbb/viewtopic.php?t=5932 A Third Resource PLEASE!]
*[http://springrts.com/phpbb/viewtopic.php?t=6277 A proposed System]
*[http://springrts.com/phpbb/viewtopic.php?t=6342 Mentioned in conjunction with other requests for resource related features]
*[http://springrts.com/phpbb/viewtopic.php?p=121014 Carbon or Something]
*[http://springrts.com/phpbb/viewtopic.php?t=5966 Reserach as a Resource]
*[http://springrts.com/phpbb/viewtopic.php?p=121186 spicing up economy]

===OTA Style Music===
: '''This has now been done by a game, map or would be technically possible if somebody wants to do it.'''&lt;br&gt;
Requests or Suggestions that the engine include music playback, especially music that changes depending on what kind of action is happening in game.  Associated with requests for a sound track of any kind or asking for a link to get the orriginal TA Soundtrack in MP3 format.

*[http://springrts.com/phpbb/viewtopic.php?t=2856 Soundtracks.]
*[http://springrts.com/phpbb/viewtopic.php?t=2786&amp;highlight=music Original TA music]
*[http://springrts.com/phpbb/viewtopic.php?t=2640&amp;highlight=music TA Style music]
*[http://springrts.com/phpbb/viewtopic.php?t=2363&amp;highlight=music Music Player code]
*[http://springrts.com/phpbb/viewtopic.php?t=2348&amp;highlight=music Is original music needed?]
*[http://springrts.com/phpbb/viewtopic.php?p=80030#80030 Music support?]

As a subnote, many of Spring's pre beta members have been working on code to get the music working, while yet others have spent time studying other games and their setups. Current thinking is of a THE SIMS style, where you can specify your own music.

===Raise/Lower Terrain===
: '''This has now been done by a game, map or would be technically possible if somebody wants to do it.'''&lt;br&gt;
People suggesting or requesting some kind of better control over deformable terrain or some kind of terraforming unit.  Often associated with people posting pictures of cool effects they have achieved through the use of the current &quot;blow a big hole and then restore to the desired surface&quot; method.

*[http://springrts.com/phpbb/viewtopic.php?t=2838 Raise/Lower Terrain?]
*[http://springrts.com/phpbb/viewtopic.php?t=6346 Terraforming]
*[http://springrts.com/phpbb/viewtopic.php?p=121091 Building Holes]

===Camera Angles===
: '''This has now been done by a game, map or would be technically possible if somebody wants to do it.'''&lt;br&gt;
suggesting changes to current camera angles, popularly related to the inability of the rotatable and FPS cams to go outside the map boundries, making it difficult to see units close to the edges of the map.

*[http://springrts.com/phpbb/viewtopic.php?t=2821 The #2 item on my wishlist]

Also, there's the problem of the world stopping at a rather steep drop.

*[http://springrts.com/phpbb/viewtopic.php?t=2789 What is good, and what is bad]

===The New GUI===
: '''This has now been done by a game, map or would be technically possible if somebody wants to do it.'''&lt;br&gt;
Anything related to how bad the current GUI is, suggestions for features that already exists but users do not know about because they are barely documented, or simply threads asking for or about the new GUI.

*[http://springrts.com/phpbb/viewtopic.php?t=2801 New GUI questions]
*[http://springrts.com/phpbb/viewtopic.php?t=1994 New GUI testing]
*[http://springrts.com/phpbb/viewtopic.php?p=35418 Wheres the new gui?]
*[http://springrts.com/phpbb/viewtopic.php?t=1643 re: about the newGUI]
*[http://springrts.com/phpbb/viewtopic.php?t=4110 New &quot;Interface&quot;]

===Multiple transport load sharing via cable hooks===
Seriously WTF, this isn't even a good idea, why does this keep coming up?

*[http://springrts.com/phpbb/viewtopic.php?t=2621 Transports]

===Mobile factories===
: '''This has now been done by a game, map or would be technically possible if somebody wants to do it.'''&lt;br&gt;
*[http://springrts.com/phpbb/viewtopic.php?t=2017 Rise and walk, or how my factorie grew legs (and wings too).]
*[http://springrts.com/phpbb/viewtopic.php?t=2809#38534 &quot;Build pads&quot; for units]
*[http://springrts.com/phpbb/viewtopic.php?p=35072#35072 air based factories for FF]

===Day and Night===
: '''This has now been done by a game, map or would be technically possible if somebody wants to do it.'''&lt;br&gt;
Wouldn't it be pretty to see a tank's headlights in the dark? Even prettier would be to have a dynamic sun to go with it. =) Watch the mountain's shadows lengthen...

*[http://springrts.com/phpbb/viewtopic.php?p=5514#5514 Reviving the request list]
*[http://springrts.com/phpbb/viewtopic.php?t=1598 Day and Night]
*[http://springrts.com/phpbb/viewtopic.php?t=552 how about night and day]
*[http://springrts.com/phpbb/viewtopic.php?t=2872 Gameplay idea: Night]


===FPS mode hud/movement changes===
Lots of people don't think the FPS mode implimentation is being all that it can be.  They love to make forum topics about it.
*[http://springrts.com/phpbb/viewtopic.php?t=2917 Regarding the FPS &quot;gimmick&quot;]

===Game lobby moderators===
A well known issue. People always seem to request it...
*[http://springrts.com/phpbb/viewtopic.php?t=2770 Client moderators]
*[http://springrts.com/phpbb/viewtopic.php?t=3065 We need moderators]

===Gaia Player===
: '''This has now been done by a game, map or would be technically possible if somebody wants to do it.'''&lt;br&gt;
Subject specific threads:

*[http://springrts.com/phpbb/viewtopic.php?t=1410 first one?]
*[http://springrts.com/phpbb/viewtopic.php?t=3189 Almost directly related]
*[http://springrts.com/phpbb/viewtopic.php?t=1204 This is the last one]

But this request appears in random threads every now and then.

*[http://springrts.com/phpbb/viewtopic.php?t=3154&amp;start=20 is gaia in cvs? Alantai says so.]
*[http://springrts.com/phpbb/viewtopic.php?t=2791], [http://springrts.com/phpbb/viewtopic.php?t=2627], [http://springrts.com/phpbb/viewtopic.php?t=2293&amp;start=20], [http://springrts.com/phpbb/viewtopic.php?t=1395].

===Improved feature reactivity===
Bridges that you can acctually walk on, better hit detection, there are lots of improvements that could be made to the way spring units, models, and features react to eachother in the most basic sense.  Often they are mentioned in the same topic.  

*[http://springrts.com/phpbb/viewtopic.php?p=48196#48196 3D Collission Mesh?]

===Spherical/Looping/Endless maps===
: '''This has now been done by a game, map or would be technically possible if somebody wants to do it.'''&lt;br&gt;
A number of options are available for making the map &quot;go on forever&quot;... and apparently the '''new''' new map format includes support for extanding the map behond the playable area of the map (no more ugly edges).

Usually what is being suggested if for maps to just loop, refered to a sphere but more like a &quot;double cylinder&quot; or &quot;Torus&quot;... some people basically think we could just &quot;warp&quot; units to the other side of the map, but issues have been brought up with ranged weapons, line of sight and figuring out where shots are coming from. If you go WAY WAY back you can even see this idea included in an idea for an MMORTS based on the spring engine.


*[http://springrts.com/phpbb/viewtopic.php?p=64751#64751 Monster Truck Madness 2? Looping Maps.]
*[http://springrts.com/phpbb/viewtopic.php?t=4065 Even MORE 3D]
*[http://springrts.com/phpbb/viewtopic.php?t=3275 Spherical Maps]
*[http://springrts.com/phpbb/viewtopic.php?t=473 stop talking about this!!!]
*[http://springrts.com/phpbb/viewtopic.php?t=655 Does anyone Want This?]
*[http://springrts.com/phpbb/viewtopic.php?t=870&amp;highlight=mmorts Multiple Maps Linked together... would also require being able to join a battle already in progress]


===What is that map with the trees... (and others)===
Ok, so its a map, but me, and others I'm sure are fed up of repeting ourselves... The map with trees is NOT availble for download. Its part of aGorms imagination. Unfortunatly the engin currentlyt can't handel the trees very well so its not released... You will see the screen alot because... well people think its a realy good screen.

See the said screen:
[http://springrts.com/screenshots/screen87.jpg The Tree Map]

*[http://springrts.com/phpbb/viewtopic.php?p=99835#99835 Spring on Wikipedia]
*[http://springrts.com/phpbb/viewtopic.php?t=5707&amp;highlight=whats+map  What's this wiki map]

===Rewinding Replays===
: '''This has now been done by a game, map or would be technically possible if somebody wants to do it.'''&lt;br&gt;
Many people want stuff such as a .jumpto (time) command, or the ability to rewind during a replay. The nature of replays and the spring simulation implies that rewinding can never happen, so discussing this is really pointless.

*[http://springrts.com/phpbb/viewtopic.php?t=6009 Rewinding for Replays?]</text>
      <sha1>05sykxlh63xi5vldglhbanfei57u8ft</sha1>
    </revision>
  </page>
  <page>
    <title>Mothers MapConv</title>
    <ns>0</ns>
    <id>3195</id>
    <revision>
      <id>26867</id>
      <parentid>23591</parentid>
      <timestamp>2013-03-23T18:48:13Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>Map tools -&gt; Map Tools</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5192">{{deprecated|Mothers Mapconv is deprecated, use [[MapConvNG]] instead!}}
[[Category:Map Tools]]

Download: http://springfiles.com/spring/tools/mapconv-no-scanlines-hack


The usage is the same as in [[MapConv]], with the following exceptions:
All features (including GeoVent/Tree/Grass) are now on their own FeatureMap.  This is a 24bit bmp specified with the -f &lt;featuremapname.bmp&gt; flag.
''It should be 1/8th the resolution of your map.'' (i.e. 1 pixel smaller in each direction then your heightmap)

Tree's and GeoVents are placed on the green layer.
*255 Places a GeoVent
*200-215 Places tree types 1-16

MapConv will try to place these features in the exact spot you place them, it will then go into crackhead mode if it cannot.

Grass is the blue layer.  The blue value  maps to a 'pseudo-density' of the grass.  The 'grass' map in the engine is very very low resolution,  so be aware that you will not get nice linear results.  255=full grass, 0=no grass.

The red layer places 'Arbitrary Features,' aka wreckages.  One pixel of red equals one feature.  Red '255' gives you a feature of the first arbitrary type, 254 the second, 253 the third, and so on.


===Using Mapconv===

ok now you have your 4 maps, copy them into mothersmapconv folder

now you have to get mapconv to work. You can edit the .bat file or do this:
goto start-&gt; run and type &quot;cmd&quot; this will open a dospromt
for those that don't knwo dos, use cd.. to go up one level cd &quot;mapname&quot; to change folder and &quot;d:&quot; to go to your D drive
navigate to the mapconv folder.

Then you need to type &quot;mapconv&quot; follwoed by a list of parameters

This is a list taken from mothers mapconv help:

USAGE:

  mapconv  [-l] [-i] [-c &lt;compression&gt;] -x &lt;max height&gt; -n &lt;min height&gt; [-o 
  &lt;Output file&gt;] [-e &lt;tile file&gt;] [-y &lt;Typemap file&gt;] -m &lt;Metalmap file&gt; -a 
  &lt;Heightmap file&gt; -t &lt;Texture file&gt; [--] [-v] [-h]


Where:

  -l,  --lowpass
    Lowpass filters the heightmap

  -i,  --invert
    Inverts the height map vertically (not the height values but the height map 
    (uhm someone rewrite this))

  -c &lt;compression&gt;,  --compress &lt;compression&gt;
    (value required)  How much we should try to compress the texture file. 
    Default value 0.8 . (lower=higher quality, larger file)

  -x &lt;max height&gt;,  --maxheight &lt;max height&gt;
    (required)  (value required)  What altitude in spring the max(0xffff) level 
    of the height map should represent

  -n &lt;min height&gt;,  --minheight &lt;min height&gt;
    (required)  (value required)  What altitude in spring the min(0) level of 
    the height map should represent

  -o &lt;Output file&gt;,  --outfile &lt;Output file&gt;
    (value required)  The name of the created map

  -e &lt;tile file&gt;,  --externaltilefile &lt;tile file&gt;
    (value required)  External tile file that will be used for finding tiles, 
    tiles not found in this will be added in a new tile file

  -y &lt;Typemap file&gt;,  --typemap &lt;Typemap file&gt;
    (value required)  Type map to use, uses the red channel to decide type, 
    types are defined in the .smd, if this argument is skipped the map will be 
    all type 0

  -m &lt;Metalmap file&gt;,  --metalmap &lt;Metalmap file&gt;
    (required)  (value required)  Metal map to use, red channel is amount of 
    metal, green=255 is where to place geos (one pixel=one geo). Is resized to 
    fit the mapsize

  -a &lt;Heightmap file&gt;,  --heightmap &lt;Heightmap file&gt;
    (required)  (value required)  Input heightmap to use for the map, this 
    should be in 16 bit raw format (.raw extension) or an image file. Must be 
    xsize*128 1 x ysize*128 1 in size.

  -t &lt;Texture file&gt;,  --intex &lt;Texture file&gt;
    (required)  (value required)  Input bitmap to use for the map. Must be 
    xsize*1024 x ysize*1024 in size. (xsize,ysize integers determined from this 
    file)

  --,  --ignore_rest
    Ignores the rest of the labeled arguments following this flag.

  -v,  --version
    Displays version information and exits.

  -h,  --help
    Displays usage information and exits.


This is an example of a command to convert your map (mame is crossroads)
I allways use the -i parameter else the texture map gets applied wrong

mapconv.exe -i -f w_crossroadsf.bmp -x 300 -n 50 -m w_crossroadsm.bmp -a w_crossroadsh.bmp -t w_crossroads.bmp -o w_crossroads.smf



If you run this you will see 2 new files in the mapconv folder   yourmapname.smf and yourmapname.smt  
You still need an extra file; yourmapname.smd
A smd file contains all things like wind speeds max metal sun direction map description, starting positions etc.
You can take a smd file from another map and edit or use Maelstorms SMD creator: 
http://taspring.clan-sy.com/phpbb/viewtopic.php?t=2420



Now put these 3 files in a folder called &quot;maps&quot;, download 7-zip [http://www.7-zip.org here], open it and navigate to the maps folder then right-click on it and do add to archive. Just let it make a zip file, and later rename it to yourmapname.sd7 (you have to edit the extension)

Put this file in your spring maps folder and you're ready to test it!


I'm gonna cleanup this tutorial alter and add alot more stuff but if you aren't bothered too much because of all the typo's this should teach you how to make your first map


cheers!</text>
      <sha1>c3u5t35pobx3x73n8w3304w0gr2ufcm</sha1>
    </revision>
  </page>
  <page>
    <title>MouseCursors</title>
    <ns>0</ns>
    <id>3567</id>
    <redirect title="Gamedev:MouseCursors" />
    <revision>
      <id>27789</id>
      <timestamp>2013-10-26T22:33:41Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>Flozi moved page [[MouseCursors]] to [[Gamedev:MouseCursors]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="34">#REDIRECT [[Gamedev:MouseCursors]]</text>
      <sha1>7ax85j0oddl9zdeyd7aj854r69ywx19</sha1>
    </revision>
  </page>
  <page>
    <title>Movedefs.lua</title>
    <ns>0</ns>
    <id>2777</id>
    <revision>
      <id>31828</id>
      <parentid>31065</parentid>
      <timestamp>2022-07-06T19:51:16Z</timestamp>
      <contributor>
        <username>Maddox</username>
        <id>2934</id>
      </contributor>
      <minor/>
      <comment>Fixed comment about hover class: canHover was removed in 95.0</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="12505">=Movedefs.lua=
==Location==
&lt;code&gt;movedefs.lua&lt;/code&gt; is a file in the &lt;code&gt;Gamedata/&lt;/code&gt; directory of a Spring Game.

==Purpose==
This file defines '''MoveClasses''' which are used to determine pathing for units.

==Source==
The engine source code which parses the data from this file is viewable here: 
* {{sourcelink|file=rts/Sim/MoveTypes/MoveDefHandler.cpp}}

==Data Types==
{{DataTypes}}

==Details==
A mobile unit is assigned a '''MoveClass''' using the {{xtaglink|Gamedev:UnitDefs|movementClass}} tag. The engine determines the unit's pathfinding based on the properties of the '''MoveClass''', so analogous properties (e.g. {{xtaglink|Gamedev:UnitDefs|footprintX}}) in the [[Gamedev:UnitDefs|UnitDef]] should be the same for optimal behaviour.

All '''MoveClasses''' must belong to one of four possible types. A '''MoveClass''' is assigned a type simply by including it within the name string e.g. &lt;code&gt;Tank_MyMoveClassName&lt;/code&gt;. Types are used in '''[[Mapdev:terraintype|TypeMaps]]''' of Spring maps, which allow mappers to set per-type speed multipliers. 

===Types===
* &lt;code&gt;Bot&lt;/code&gt; - A ground based '''MoveClass'''. The default type if no matching type string is found.
* &lt;code&gt;Tank&lt;/code&gt; - A ground based '''MoveClass'''. Identical to &lt;code&gt;Bot&lt;/code&gt; other than interaction with '''TypeMaps'''.
* &lt;code&gt;Ship&lt;/code&gt; or &lt;code&gt;Boat&lt;/code&gt; - Are synonyms. All ships / boat '''MoveClasses''' must belong to this type to behave as ships.
* &lt;code&gt;Hover&lt;/code&gt; - All hovercraft '''MoveClasses''' (traverse any depth of water without speed reduction) must belong to this class.

==MoveClass Tags==
{{tag
|name = name
|type = string
|default = &quot;&quot;
|description = The name of the '''MoveClass'''. Usually passed by the sub-table variable name rather than using this tag (See [[#Example]]). Prior to 9.50 this had to contain &quot;tank&quot;, &quot;hover&quot;, &quot;ship&quot; or &quot;boat&quot; respectively for non-Bot types. This is now set using {{taglink|speedModClass}}.
}}

{{tag
|name = speedModClass
|type = int
|default = 1
|special = {{new|95.0}}
|description = Determines the speed modifier class used (See [[Mapdev:terraintype]]). Accepted values are &lt;code&gt;0&lt;/code&gt; = Tank, &lt;code&gt;1&lt;/code&gt; = KBot, &lt;code&gt;2&lt;/code&gt; = Hover, &lt;code&gt;3&lt;/code&gt; = Ship.
}}

{{tag
|name = footprintX
|type = int
|default = 1
|description = How wide the '''MoveClass''' is in footprint units, left to right. 1 footprint unit = 16 [[elmo]]s. Cannot be below &lt;code&gt;1&lt;/code&gt;. For mobile units this should be the same as the {{xtaglink|Gamedev:UnitDefs|footprintX}} of its [[Gamedev:UnitDefs|UnitDef]].
}}

{{tag
|name = footprintZ
|type = int
|default = footprintX
|description = How wide the '''MoveClass''' is in footprint units, top to bottom. 1 footprint unit = 16 [[elmo]]s. Cannot be below &lt;code&gt;1&lt;/code&gt;. For mobile units this should be the same as the {{xtaglink|Gamedev:UnitDefs|footprintZ}} of its [[Gamedev:UnitDefs|UnitDef]].
}}

{{tag
|name = crushStrength
|type = float
|default = 10.0
|description = Power of a unit with this '''MoveClass''' to crush features and units. Any features with a {{xtaglink|Gamedev:FeatureDefs|crushResistance}} less than this value will be crushed on contact. Any units with crushing enabled via [[Lua_SyncedCtrl#Unit_Control|Spring.SetUnitBlocking]]), in an impact where collider impulse exceeds collidee impulse and whose {{xtaglink|Gamedev:UnitDefs|crushResistance}} is less than this value will also be crushed.
}}

{{tag
|name = maxSlope
|type = float
|default = 60.0 (15.0 for hover types)
|description = The maximum steepness of slope a unit with this '''MoveClass''' can climb in degrees. For further details see [[#How_slope_is_determined]].}}

{{tag
|name = slopeMod
|type = float
|default = 4.0 / (maxSlope + 0.001)
|description = How much a slope will slow a unit, &lt;code&gt;0&lt;/code&gt; means no slowdown.
}}

{{tag
|name = avoidMobilesOnPath
|type = bool
|default = true
|description = Do the units attempt to avoid other mobile units when pathing?
* Pro: groups moving without a ctrl-order clump much less
* Contra: groups moving with a ctrl-order are less organized
}}

{{tag
|name = allowTerrainCollisions
|type = bool
|default = true
|special = {{new|96.0}}
|description = Disable this to improve handling of large (&gt;4 x 4) footprint units (See {{mantis|4217}}).
}}

{{tag
|name = allowRawMovement
|type = bool
|default = false
|special = {{new|104.0}}
|description = Enables native &quot;raw move&quot; (straight-line path) support  (See also [[Lua_SyncedCtrl|Spring.SetUnitMoveGoal]] and {{mantis|4412}}).
}}

=== Heat Tags ===
These tags are used in unit avoidance. 

{{tag
|name = heatMapping
|type = bool
|default = false
|description = This enables/disables generation and usage of path heats.
}}

{{tag
|name = heatMod
|type = float
|default = 0.0042
|description = The pathfinder cost modifier that is multiplied by the heat of the current square.
}}

{{tag
|name = heatProduced
|type = int
|default = 30
|description = How much heat to place on a square if a path goes through it. &lt;code&gt;heat set = max(currentSquareHeat, heatProduced)&lt;/code&gt;.
}}

=== Flow Field Tags ===
These tags are used in unit avoidance. 

{{tag
|name = flowMapping
|type = bool
|default = true
|description = This enables/disables [https://leifnode.com/2013/12/flow-field-pathfinding/ flow field mapping].
}}

{{tag
|name = flowMod
|type = float
|default = 1.0
|description = Multiplied by the objects {{xtaglink|Gamedev:UnitDefs|mass}} for the y-component (up) of the flow vector. No idea what effect this has.
}}

=== Tank &amp; Bot-Only Tags ===
{{tag
|name = depthMod
|type = float
|default = 0.1
|description =  How much water will slow amphibious units. The deeper the water, the slower the movement.&lt;span class=&quot;warning&quot;&gt;Replaced with a subtable in Spring 86.x&lt;/span&gt;
}}

{{tag
|name = maxWaterDepth
|type = float
|default = 0.0
|description = The maximum depth of water in [[elmo]]s the unit can wade through.
}}

=== Ship-Only Tags ===
{{tag
|name = minWaterDepth
|type = float
|default = 10.0
|description = The minimum depth of water in [[elmo]]s the ship requires to float in.
}}

{{tag
|name = subMarine
|type = bool
|default = false
|description = Is the ship a submarine; can it move underneath other ships?
}}

==Sub Tables==
===depthModParams===
Only read for &lt;code&gt;Bot&lt;/code&gt; and &lt;code&gt;Tank&lt;/code&gt; '''MoveClasses''', the depthModParams group contains several sub-tags. Depthmod is a system for changing the speed of units depending on how deep they are underwater.

&lt;code&gt;
       new formula is given by
         if h &lt; depthModParams.minHeight: 1.0
         if h &gt; depthModParams.maxHeight: 0.0
         else:
           depthScale = MAX(0.01, MIN(depthModParams.maxScale, (a * h * h) + (b * h) + c))
           depthMod = 1 / depthScale
       where
         h = unit's absolute height below water surface
         a = depthModParams.quadraticCoeff
         b = depthModParams.linearCoeff
         c = depthModParams.constantCoeff
&lt;/code&gt;

{{tag
|name = minHeight 
|type = float
|default = 0.0
|description =  The minimum depth where the depthMod curve applies.  If the unit is shallower than the minHeight, no change in speed occurs. 
}}

{{tag
|name = maxHeight 
|type = float
|default = MAX_FLOAT
|description =  The maximum depth where the depthMod curve applies.  If the unit is deeper than the maxHeight, the unit is immobilized.
}}

The following tags control the behavior of the unit within the active portion of the curve (depth is greater than {{taglink|minHeight}} but less than {{taglink|maxHeight}}). It would be best to simply open up your graphing program of choice and use the provided formula, but if you're scared of graphs you should read the descriptions below:

{{tag
|name = maxScale
|type = float
|default = MAX_FLOAT
|description =  This is the cap on how severe the depth effect can be. For example, lets say that you use a maxScale value of 2. If a unit is at the depth where its scale reaches the max (usually near its maximum depth; with a maxScale value of 2), the slowest it will go is half of its maximum speed. In other words, (maxVelocity / maxScale). Therefore, as another example, a value of 4 would cause the unit's maximum speed (near the units maximum depth) to be 25% of it's maxVelocity.
}}

{{tag
|name = quadraticCoeff
|type = float
|default = 0.0
|description =  The application of the speed-divider effect is modelled as a quadratic.  This is the &quot;depth-squared&quot; component of that.  That is, a value set here will be applied exponentially as the unit gets deeper, therefore it is best to use very small numbers for this tag.
}}

{{tag
|name = linearCoeff
|type = float
|default = depthMod
|description =  The application of the speed-divider effect is modelled as a quadratic.  This component makes divisor increase linearly with the depth of the unit.  So with a value of 0.1, for example, a unit would go from 1/2 speed to 1/3 speed and 1/3 speed to 1/4 speed each time it goes 10 units deeper.
}}

{{tag
|name = constantCoeff 
|type = float
|default = 1.0
|description =  The application of the speed-divider effect is modelled as a quadratic.  This is the constant component of the divisor.  If you want a gradual decrease of speed and your {{taglink|minHeight|0}} (the waterline) then this value '''must''' be 1.  Using less than 1 will cause the unit to go ''faster'' as it hits the water, and using greater than 1 will cause the unit to abruptly slow down the moment it gets its feet wet.  If you're not using {{taglink|minHeight|0}}, you'll have to adjust this value accordingly to get a smooth application of the depthMod divider.
}}

===speedModMults===
{{new|86.0}}

These previously hard-coded variables allow control over how the pathfinder (default only, not [[QTPFS]], see [[Modrules.lua]]) calculates the cost for a '''MoveClass''' for squares containing mobile units, if and only if {{taglink|avoidMobilesOnPath|true}}.

{{tag
|name = mobileBusyMult
|type = float
|default = 0.1
|description = The cost multiplier for mobile units which are 'Busy'; Not currently being built and with a non-empty command queue, but not moving on a path. Clamped to values above &lt;code&gt;0.01&lt;/code&gt;.}}

{{tag
|name = mobileIdleMult
|type = float
|default = 0.35
|description = The cost multiplier for mobile units which are 'Idle'; Either currently being built or with an empty command queue. Clamped to values above &lt;code&gt;0.01&lt;/code&gt;.}}

{{tag
|name = mobileMoveMult
|type = float
|default = 0.65
|description = The cost multiplier for mobile units which are 'Moving'; Trying to follow their own path. Clamped to values above &lt;code&gt;0.01&lt;/code&gt;.
}}

==How slope is determined==
Spring doesn't represent terrain slopes in degrees, internally it uses
&lt;code&gt;(1.0 - the terrain normal's y-component)&lt;/code&gt; so the slope of vertical faces is &lt;code&gt;1&lt;/code&gt; and that of horizontal ones &lt;code&gt;0&lt;/code&gt;. A unit's &lt;code&gt;maxSlope&lt;/code&gt; value (which is in
degrees in its movedef) is converted so that the &quot;can we go here?&quot; (ie
&quot;&lt;code&gt;maxSlope &gt; terrainSlope&lt;/code&gt;?&quot;) comparisons are meaningful, the formula
is &lt;code&gt;1.0 - cos(DEG2RAD(maxSlope * 1.5))&lt;/code&gt;. If you want to know the terrain angle in degrees, compute &lt;code&gt;RAD2DEG(arccos(1.0 - terrainSlope))&lt;/code&gt;. For a bot with a &lt;code&gt;maxSlope&lt;/code&gt; of 36 degrees (~0.41221 in &quot;Spring format&quot;), the maximum tolerable terrain angle is approximately

&lt;code&gt;RAD2DEG(arccos(1.0 - 0.41221))&lt;/code&gt;

or 54 degrees. If &lt;code&gt;maxSlope&lt;/code&gt; was &lt;code&gt;30&lt;/code&gt;, the MTTA would be 45, and if it was &lt;code&gt;60&lt;/code&gt; (the highest sensible value due to that 1.5 scalar and the absence of overhanging cliffs) the bot could mount any terrain. In other words you do not need the long mathematical derivation, just remember that
&lt;code&gt;maxTerrainAngle = maxSlope * 1.5&lt;/code&gt;

--kloot, Thu Jul 31, 2008

==Code to check your movdefs==
{{forumlink|topic=24866|title=A resource to check movedefs}} that game developers have used for years and find it quite useful.

==Example==
===External Examples===
[http://imolarpg.dyndns.org/trac/balatest/browser/trunk/gamedata/movedefs.lua 'Balanced Annihilation' movedefs.lua]

[http://spring1944.svn.sourceforge.net/viewvc/spring1944/trunk/S44Main.sdd/gamedata/movedefs.lua?&amp;view=markup 'Spring: 1944' movedefs.lua]

[http://code.google.com/p/springtutorialgame/source/browse/trunk/SpringTutorialGame.sdd/Gamedata/movedefs.lua 'Spring Tutorial Game' movedefs.lua]

[http://code.google.com/p/zero-k/source/browse/trunk/mods/zk/gamedata/movedefs.lua 'ZeroK' movedefs.lua]

[[Category:Gamedata]]</text>
      <sha1>9krmw2nx02jf4jeasoh8vqoouq27wlh</sha1>
    </revision>
  </page>
  <page>
    <title>Multiplayer Strategy</title>
    <ns>0</ns>
    <id>1837</id>
    <revision>
      <id>19073</id>
      <parentid>14000</parentid>
      <timestamp>2010-03-13T19:16:26Z</timestamp>
      <contributor>
        <username>Koshi</username>
        <id>2371</id>
      </contributor>
      <comment>fix category</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4131">Introduction &lt;br&gt;
Now that you've presumably read about how to excel in a one on one enviroment, I'm sure you're ready to try something a little different. Whether it is for the mutability, possible pace, sheer complexity or development of player roles, nearly all Spring players eventually and consistently venture into the world of multiplayer matches.

-Neddiedrow

Choosing A Host &lt;br&gt;
Some people have the power to host a game, and the audacity to abuse that power. If you've played with somebody before and found their hosting inadequate, why subject yourself to it again? Trial and error - but remember, as Kennedy said, an error does not become a mistake until you refuse to correct it.

Starting A Game &lt;br&gt;
Don't get caught up in who you are playing alongside or against. You will play in unfair matches, leaning either direction. The best method of learning is through loss, and the greatest ability to teach is granted in a stunning victory. However, be aware of the abilities and quirks of those you are working with or against before the game actually begins. If somebody has an unreliable connection, prepare for it. You're now in part responsible for a group - best act accordingly.

Playing A Game &lt;br&gt;
You and your allies will make mistakes. Somebody may be the strong point. Somebody may cause the loss of the whole team. There is nothing wrong with this.

Your role is to play coherently with your allies and excel in what you do. Thus, communication is the hallmark of a skilled multiplayer. Talk about concerted attacks, work out plans of defense, ask for support. Give advice, lend support, adapt your overhead strategy to accommodate. If you must leave, warn your allies. I cannot stress that point enough, you must tell your allies that you are leaving, and a reason why would not go amiss! Leave them the best you have to work with!

Never leave or be away for 60 seconds, else you'll be criticized for life!
Never play with players who think that they are the only decent player in the whole team, if that happens resign (i.e. explode all your units)

''You are not alone, and you cannot effectively play as if you were alone in a fair match.''

Clans And You &lt;br&gt;
Chances are, if you are reading this article, you are either a skilled independent player or part of a clan. However, this article would probably most benefit the people who will never read it, but I digress.

Clans are organized groups of players, generally for multiplayer games, who form a small community within the greater community of the game, and often become friends. As such, members of Clans will exhibit in most cases a greater ability to communicate with those within their Clan. They've played with them, won with them, lost alongside them...

Many games hosted in Spring are Clan against Other, a cause of some discontent against certain Clans. If you are not in a Clan, or are working with a scattered group of people rather than your own Clan, know that you are probably at a disadvantage in terms of multiplayer strategy and communication when you face a Clan or majority Clan team.

General rules of thumb used in relation to individual users can be applied to Clans, though I must warn you that while an individual represents his Clan in general, there are exceptions.

Connections Between Single Player &amp; Team Experiences &lt;br&gt;
Single player ability does, to some extent, translate into multiplayer skill - this much is undeniable. Arguments occur when people disagree on the extent to which it can replace actual experience in a team environment - as a general rule of thumb, I would contend that it can cover roughly sixty percent of the necessary knowledge to excel in a team environment. Self-sufficiency, competitive expansion, complete grasp of tactics as an individual... these are lessons which will help you in a multiplayer match. While they do not replace the ability to accommodate your team mates or the simple ability to communicate... they too are crucial for a successful team game.

[Possibly To Be Continued]

''' [[Strategy_and_Tactics|&lt;- Back to Strategy and Tactics page]]'''
[[Category: Strategy]]</text>
      <sha1>pbba254ojrtnmczm3nt7ery3nrgx76t</sha1>
    </revision>
  </page>
  <page>
    <title>Mumble</title>
    <ns>0</ns>
    <id>3611</id>
    <revision>
      <id>28188</id>
      <parentid>28187</parentid>
      <timestamp>2014-02-01T14:56:21Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="408">
springrts has set up a mumble server, to use it, you need to install mumble and use these details to connect to the server:

* Server: mumble.springrts.com
* Port: 64738 (=default mumble port)
* Username: Use your spring ID
* Password: Use any password

Link to download mumble (Beh): http://sourceforge.net/projects/mumble/ - Ubuntu users can just install from Applications-&gt;Add/Remove


[[Category:Lobby]]</text>
      <sha1>itcpgp3psvgjjysjf0907kfcu97ehbv</sha1>
    </revision>
  </page>
  <page>
    <title>NOTA</title>
    <ns>0</ns>
    <id>2213</id>
    <revision>
      <id>30972</id>
      <parentid>30968</parentid>
      <timestamp>2019-02-22T01:42:34Z</timestamp>
      <contributor>
        <username>Hawara</username>
        <id>2945</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="301">[http://nota.machys.net NOTA Homepage]
----
[http://nota.machys.net/downloads NOTA Downloads page]
----
[https://springrts.com/phpbb/viewforum.php?f=55 NOTA subforum]
----
Back to [[Games]]
----
Back to the [https://bitbucket.org/notagame/nota/wiki/Home NOTA wiki]
[[Category:NOTA]]
[[Category:Games]]</text>
      <sha1>64d2idthgj1pzd7lm0co58nd0el2sls</sha1>
    </revision>
  </page>
  <page>
    <title>NOTA Guides</title>
    <ns>0</ns>
    <id>2536</id>
    <redirect title="NOTA" />
    <revision>
      <id>18988</id>
      <parentid>15191</parentid>
      <timestamp>2010-03-13T17:51:08Z</timestamp>
      <contributor>
        <username>Koshi</username>
        <id>2371</id>
      </contributor>
      <comment>no content, but a link -&gt; redirect</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="18">#REDIRECT [[NOTA]]</text>
      <sha1>p75a93ihz7vbu73r28if9jn9lzen9on</sha1>
    </revision>
  </page>
  <page>
    <title>NOTA OTA differences guide</title>
    <ns>0</ns>
    <id>2532</id>
    <revision>
      <id>30967</id>
      <parentid>25794</parentid>
      <timestamp>2019-02-22T00:45:43Z</timestamp>
      <contributor>
        <username>Hawara</username>
        <id>2945</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="18884">== So, you wanna give NOTA a try, huh? ==
&lt;br&gt;
This is intended to be an introductory guide to those with an OTA-like background who are willing to give NOTA a try.  Please keep in mind that the N in NOTA means &quot;Not&quot; and it's not just a saying.  NOTA doesn't play much like OTA or any OTA-like mod so some of the strategies/tactics you're used to will not work here.  I'll do my best to explain clearly and briefly how things are different in NOTA so that adapting to this new way of waging war doesn't end up with you becoming a casualty.'''''- Totbuae'''''
&lt;br&gt;&lt;br&gt;
----

== What the... ?  Where's the commander? ==
&lt;br&gt;
In normal NOTA game mode you don't start with a commander, you start with a command building&lt;sup&gt;1&lt;/sup&gt;.  The command building, being a building, is not mobile but it has a long build radius and its build list is roughly equivalent to that of a T1 const KBOT/vehicle/VTOL from OTA plus a few waterborne structures.  Lastly, the command building is moderately armed against both ground and air units which means your early base is adequately protected against small raids (five or less early PeeWees/Flashes aren't going to accomplish much but ten or twenty might if you don't have any other defenses).
&lt;br&gt;&lt;br&gt;
&lt;sup&gt;1&lt;/sup&gt; There's a game mode under the mod options tab in the TASClient lobby which allows you to start with the command building and the commander.  Other than that, you can get a commander by building a warp gate from the T3 base expansion tower (more on those later) and warping him in.  This latter one is different from the one you can opt to start with, it has a more extensive build list (it can even build Timmy/Bertha).
&lt;br&gt;&lt;br&gt;
== Ok, ok, so no commander... What next, then? ==
&lt;br&gt;
Three mexes and a solar are a good start.  NOTA econ is similar to OTA econ; you've got your solars, mexes&lt;sup&gt;1&lt;/sup&gt;, windgens&lt;sup&gt;2&lt;/sup&gt;, metal makers, geos, floating mexes, floating metal makers, tidals, e-storage and m-storage.  Metal extraction and energy production levels are also similar to OTA (a solar will produce 20e, a geo will produce 250e, metal makers use 60e to produce 0.6m and so forth).  One notable difference from Absolute Annihilation descendants is that there aren't any advanced solars in NOTA, instead you have access to the standard fusion reactor from the start.  NOTA fusions are cheaper and quicker to build but they also produce less energy (only 350e but don't worry, you get better fusions at T2).
&lt;br&gt;&lt;br&gt;
&lt;sup&gt;1&lt;/sup&gt; NOTA mexes are a little bit more resistant to damage than OTA mexes.&lt;br&gt;
&lt;sup&gt;2&lt;/sup&gt; NOTA windgens don't chain explode as badly as in AA descendants.
&lt;br&gt;&lt;br&gt;
== Fair enough but econ never won any battles. ==
&lt;br&gt;
Or so you say. :P
&lt;br&gt;&lt;br&gt;
== Ha, ha, very funny.  What I meant is, should I go KBOTs or vehicles first? ==
&lt;br&gt;
That question has much deeper ramifications in NOTA than in most other mods.  The reason behind this is that KBOTs and vehicles are much more different than in OTA or any AA descendants.  Like in most other mods, KBOTs can climb steeper hills than vehicles and vehicles are in general faster and tougher than KBOTs.  Unlike most other mods, though, the differences don't stop there.
&lt;br&gt;&lt;br&gt;
KBOTs will give you the most bang for the buck if we define bang to mean firepower.  NOTA KBOTs are smaller size-wise than OTA KBOTs which means you can concentrate a lot of firepower in a small area (four PeeWees occupy about as much space as one Stumpy).  KBOTs in general also have excellent self repair (a badly damaged Hammer, for example, can get back to top shape if it stays away from combat for about forty seconds).  The combination of easily affordable firepower and good self repair makes KBOTs very useful for holding ground.  Finally, KBOTs can afford to move around more in combat compared to vehicles (you'll see why on the paragraph about vehicles).
&lt;br&gt;&lt;br&gt;
Why on Earth would you want to use vehicles, then?  Simple reason, NOTA KBOTs are ''V-E-R-Y S-L-O-W''&lt;sup&gt;1&lt;/sup&gt;.  Forget about running past defenses with PeeWees and blowing up stuff or using them to catch up to those Flashes that got past your front line, it ain't gonna happen.  KBOTs' slow speed makes them vulnerable to static defenses which outrange them (there are KBOTs which can safely take out statics from range).  Also, slow speed combined with small size makes KBOTs doubly vulnerable to large area of effect weapons such as artillery (what Levelers&lt;sup&gt;2&lt;/sup&gt; do to KBOTs can only be described as obscene) and close air support VTOLs.  Their last drawback is that KBOTs don't have any means to attack high altitude VTOLs (I'll explain later, in the paragraph about aircraft) or ships.  Special infantry transports which can lift twenty Rocko/Hammer sized KBOTs at once were introduced to help mitigate their lack of mobility on large maps.
&lt;br&gt;&lt;br&gt;
As stated before, vehicles are on average faster and tougher than KBOTs.  Tanks in particular will take reduced damage from the front compared to the rear and sides.  Because of this, tanks are better used to charge up to defensive lines (of either statics or mobile units) but not past them (which would expose their weaker rear armor).  The vehicle plant also grants access to mobile flak vehicles (flak is the only ground anti-air defense that can shoot at high altitude VTOLs), mobile artillery (T1 arty is mean in NOTA, it outranges statics by a fair amount and has good splash damage) and mobile anti-ship guns (just wait 'till I talk about ships, ok).  All in all, vehicles have better assault options than KBOTs and should be used when you're ready to go knocking on your opponent's door.
&lt;br&gt;&lt;br&gt;
&lt;sup&gt;1&lt;/sup&gt; There are fast assault KBOTs (Zipper for Arm and the Core counterpart, the Sprinteurs) which move at about Flash speed.&lt;br&gt;
&lt;sup&gt;2&lt;/sup&gt; Levelers aren't artillery, they're self propelled field guns but they do outrange most KBOTs.
&lt;br&gt;&lt;br&gt;
== And just what are &quot;high altitude VTOLs&quot;? ==
&lt;br&gt;
Glad you asked.  Air power is one of the aspects which most evidently sets NOTA apart from OTA or any AA descendants (another one being navy).  As expected, the VTOLs' greatest asset is their mobility, they're fast and unaffected by terrain.  NOTA VTOLs can be classified in two categories: high and low altitude.
&lt;br&gt;&lt;br&gt;
High altitude VTOLs fly too high to be attacked by most ground anti-air defenses&lt;sup&gt;1&lt;/sup&gt;.  T1 strategic bombers (Thunder/Shadow), T2 strategic bombers (Phoenix/Hurricane), T2 stealth bombers (Black Lilly, Core only), T2 high-speed spy planes (Archangel, Arm only), T2 radar planes (Eagle/Vulture) and T3 flying fortresses (Centurion, yes, you guessed it, Core only) are all high altitude.  Against these high flying menaces your best bet are fighters/interceptors and ground flak to a lesser extent.  The remaining VTOLs are low altitude and can be attacked by all ground anti-air units.
&lt;br&gt;&lt;br&gt;
While on the subject of VTOLs, the ones in NOTA have fuel which is used up when they move or launch ordnance.  Due to this, VTOLs cannot remain on station indefinitely and will have to return to base to rearm/refuel.  Air repair pads are available from the start and each T1 aircraft plant has one integrated air repair pad to help get you started.
&lt;br&gt;&lt;br&gt;
On a more tactical/strategic note, NOTA VTOLs are evil.  Ground attack aircraft are the bane of all ground units (even anti-air) and can reduce a whole contingent of tanks to scrap metal in mere seconds.  Strategic bombers will give you no-end grief as they take out your factories with near impunity.  If your opponent goes air you have to at least get some fighters up unless you have the resources to invest heavily on ground anti-air (don't forget to get some flak as well).
&lt;br&gt;&lt;br&gt;
Now, before you start complaining, ground anti-air is not useless.  It's more of a deterrent, i.e., without it your other ground forces can be pounded by air with impunity, with it you at least make your opponent lose some aircraft for every airstrike.  Ground anti-air also helps your fighters maintain air superiority over the territory you control.
&lt;br&gt;&lt;br&gt;
It's not, however, all fun and games in the VTOL camp.  The VOTLs' extra dose of pwnage is balanced by the fact that you don't get construction aircrafts until T2.  Yes, you read that right, ''there's no construction aircraft in the T1 aircraft plant build list''.  The aircraft plant, however, does grant access to air transports which have an added value in NOTA because they can move transportable turrets around.
&lt;br&gt;&lt;br&gt;
&lt;sup&gt;1&lt;/sup&gt; A missile tower (Defender/Pulverizer) built on top of a tall enough hill will be able to shoot at high altitude VTOLs if the surrounding terrain is low.
&lt;br&gt;&lt;br&gt;
== What's so different about NOTA navy? ==
&lt;br&gt;
For starters, the 3D models are different.  They look a lot shipier and less like the glorified armed yachts from OTA.  Ships are also armed to the teeth (the ''&quot;lowly&quot;'' destroyer has 7 weapons:  two plasma cannons, two flak cannons, two torpedo launchers and an anti-air missile).  Furthermore, ship mounted plasma cannons are artillery cannons, the have very good range and area of effect.  There's also only one shipyard (there's no advanced shipyard) which builds all ships, from the destroyer to the battleship.
&lt;br&gt;&lt;br&gt;
Unlike OTA and other mods, ships rule the seas.  While you can hold destroyers and maybe cruisers at bay for a little while through the cunning use hovers, torpedo bombers and anti-ship guns, it's just a matter of time before the bigger ships show up and wreck all your stuff.  Considering this, it's imperative that you get ships of your own if the map has any significant amount of water.  If you decide to forgo ships in such a type of map then it's vital that you find and destroy the opponent's shipyard as soon as possible.
&lt;br&gt;&lt;br&gt;
By the way, anti-ship guns (also called coastal defense guns) are a special type of medium range plasma cannon that do extra damage to ships.  There are two versions:  a static one and a mobile one built by the T1 vehicle plant.  These guns are a little bit inaccurate and must achieve direct hits to do any damage (they have a very small area of effect) so they're not very well suited to attack anything smaller than ships.
&lt;br&gt;&lt;br&gt;
== You mentioned something else I wanted to ask about, what was it?... Right, &quot;transportable turrets&quot;? ==
&lt;br&gt;
Also unique to NOTA (for the time being) are transportable turrets.  Air transports can move these around and so can hover transports (you can also FPS a unit and push them around, but that only works for minor adjustments).  They're a convenient way to provide support for your mobile units when the front lines start to shift.  You can also try to sneak some into undefended enemy territory to cause some havoc.
&lt;br&gt;&lt;br&gt;
There are four types of transportables.  Two are common to both Arm and Core:  transportable light laser turrets and transportable flak turrets.  The other one is exclusive to Arm forces, it's a transportable rocket launcher; the Box-o-Death (tm) spews ballistic rockets non-stop with good range.  The last one is the Core only transportable sabot tower, the Splinter, which fires anti-tank darts.
&lt;br&gt;&lt;br&gt;
== Ah, I see.  Why would I need those, though?  Couldn't I just build regular turrets instead? ==
&lt;br&gt;
Base expansion is another aspect where NOTA greatly differs from OTA and any OTA-like mods.  Construction KBOTs/vehicles/VTOLs only have a very basic build list.  They cannot build factories or advanced defenses, they can only build some basic economy buildings (solars, geos, windgens, mexes, metal makers), some basic defenses (transportable LLTs, anti-air machineguns/chainguns, dragon's teeth&lt;sup&gt;1&lt;/sup&gt; and land mines&lt;sup&gt;2&lt;/sup&gt;) and radar.  Construction hovercraft can also build some sea-based versions of those basic structures.
&lt;br&gt;&lt;br&gt;
In order to expand, mobile constructors can also build base expansion towers (Level 1 Base constructors) which are unarmed versions of the command building with a little shorter build range and a little less build power but with the same build list.  These are a little pricey and deciding when and where to build one is a very important strategic decision.  The added step of building base expansion towers is the reason why NOTA is called &quot;Mobility Focused Warfare&quot; (your mobile units will see a lot more action than in other mods because your static defenses are unlikely to be in the front lines).
&lt;br&gt;&lt;br&gt;
&lt;sup&gt;1&lt;/sup&gt; DTs are smaller in NOTA, they're meant to serve as obstacles for mobile units not as protection for defenses.&lt;br&gt;
&lt;sup&gt;2&lt;/sup&gt; There aren't any dedicated minelayer units in NOTA, mobile construction units double as minelayers.
&lt;br&gt;&lt;br&gt;
== Wait, if mobile constructors cannot build factories then how do I tech up? ==
&lt;br&gt;
The command building and the base expansion towers build two types of constructors which allow you to tech up:  Level 2 Constructors and Advanced Constructors.  Level 2 Constructors come in four varieties:  Kbot, Tank, Air and Def.  Starting with NOTA version 1.50, base expansion towers can morph into any of the four Level 2 Constructors.
&lt;br&gt;&lt;br&gt;
The first three Level 2 Constructors (Kbot, Tank and Air) allow you to build the corresponding advanced factory (Adv KBOT Lab, Adv Vehicle Plant and Adv Aircraft Plant).  The defense one gives access to advanced defensive structures:  pop-up plasma cannons (Ambusher/Toaster), BLODs (Annihilator/Doomsday Machine), EMP missile launchers (Stunner, Arm only), radar jamming missile launchers (Scramjam, Core only), nukes (Retaliator/Silencer), LRPCs (Big Bertha/Intimidator), RFLRPCs (Vulcan/Buzzsaw) and long range nuclear cannons (Tabitha/Influence).
&lt;br&gt;&lt;br&gt;
All Level 2 Constructors also allow you to upgrade your economy by providing access to Heavy Fusion Reactors, Moho Metal Makers and Moho Engineers (Moho Engineers are really big construction KBOTs which are responsible for building Moho Mines).  To round up the package, all Level 2 Constructors also have access to a small selection of T1 defensive&lt;sup&gt;1&lt;/sup&gt;, utility&lt;sup&gt;2&lt;/sup&gt; and economy&lt;sup&gt;3&lt;/sup&gt; structures.
&lt;br&gt;&lt;br&gt;
The Advanced Constructors build EVERYTHING all of the four Level 2 Constructors can plus NOTA's T3 structures.  At T3 the Core gets the warp gate (warps in the commander&lt;sup&gt;4&lt;/sup&gt;), the Krogoth gantry (I wonder what this might do? :P), the Anti-gravity hangar (builds flying fortresses) and the Pinocchio (I won't ruin the surprise, just build one and see what it does).  Not to be outdone, the Arm also gets the warp gate (there's a little surprise waiting for you here, also) plus the Pod Factory (builds Montros Pods which are the Arm's answer to the Kroggies) and the orbital laser (C&amp;C GDI's Ion Cannon, anyone?).
&lt;br&gt;&lt;br&gt;
&lt;sup&gt;1&lt;/sup&gt; LLTs, HLTs, MRPCs, coastal defense guns, missile towers, flak cannons and anti-nukes&lt;br&gt;
&lt;sup&gt;2&lt;/sup&gt; Radar towers and air repair pads&lt;br&gt;
&lt;sup&gt;3&lt;/sup&gt; T1 fusion reactors&lt;br&gt;
&lt;sup&gt;4&lt;/sup&gt; You can only have one active commander at a time (if you lose it, you can warp in another one).
&lt;br&gt;&lt;br&gt;
== This really is nothing like OTA. ==
&lt;br&gt;
I told you so, right from the start.
&lt;br&gt;&lt;br&gt;
== Yeah, I guess you did.  Anything else I should know? ==
&lt;br&gt;
Just a few things, actually.  First and foremost is that you CANNOT assist factories in NOTA&lt;sup&gt;1&lt;/sup&gt;.  However, there's little need for that since NOTA factories build faster than their OTA counterparts.  In fact, NOTA factories are so efficient that there's an option to slow them down to 75%, 50% and 25% of their maximum output (you'll see a button which displays &quot;100%&quot; on the left panel when you select a factory, repeatedly clicking it will cycle through the four possible values) so that they don't choke your early economy.
&lt;br&gt;&lt;br&gt;
Also gone from NOTA are starburst rockets.  These weapon systems are very limited because they cannot hit moving targets; this has been corrected in NOTA by replacing them with ballistic missiles which can more effectively engage mobile units.  NOTA anti-air is dedicated anti-air, i.e., anti-air weapons (missiles, flak) cannot fire at ground targets.
&lt;br&gt;&lt;br&gt;
Another thing you'll notice is that in NOTA weapon ranges are a little bit longer than in OTA (for example, the EMG of an OTA PeeWee has a range of ~180, the EMG of a NOTA PeeWee has a range of 255).  On a related note, there aren't any advanced radar towers in NOTA because a NOTA basic radar tower has a radar coverage much larger than a OTA ''advanced'' radar tower.  NOTA radars can also detect cloaked units that get too close.
&lt;br&gt;&lt;br&gt;
Finally, static anti-nukes are T1 in NOTA and they have a rather large umbrella of protection (so now you don't have any excuse for getting nuked unprepared).
&lt;br&gt;&lt;br&gt;
&lt;sup&gt;1&lt;/sup&gt; Look at it this way, in most other mods your factory isn't really ''&quot;ready&quot;'' until you have around six construction units guarding and assisting it; NOTA completely eliminates this second step (and if you really, really, ''really'' need to spam then you can always build more factories).
&lt;br&gt;&lt;br&gt;
==I assume then that buildings are comparatively stronger than in OTA? How much stronger?==
&lt;br /&gt;
&quot;Buildings&quot; is quite a general term.  I already mentioned that NOTA factories build units faster so in that sense they're &quot;stronger&quot;.  Also remember that NOTA radars cover a much wider area compared to OTA radars so, again, they're &quot;stronger&quot;.  I'm assuming this question is directed more towards static defenses than anything else.
&lt;br /&gt;
&lt;br /&gt;
You need to keep in mind that NOTA emphasizes the use of mobile units (&quot;mobility focused warfare&quot;, remember?) so static defenses should be considered support units.  You should rely primarily on mobile units and only turn to static defenses in specific situations where they will clearly be more effective than mobile units (this almost always boils down to terrain related situations where mobility is impaired, e.g., bottlenecks, cliffs and so on).
&lt;br /&gt;
&lt;br /&gt;
The CORE can be a little more liberal with the use of static defenses due to the Necros, if a static defense is destroyed the Necros can bring it back online as long as the wreckage remains.  Just be sure that the position where the wreckage is located doesn't become overrun by the enemy.
&lt;br /&gt;
&lt;br /&gt;
== Is that all? ==
&lt;br&gt;
Yep, for now at least.  Remember that this is just an introductory guide meant to explain the differences between NOTA and OTA/AA descendants.  I didn't go and wasn't planning to go into any in-depth tactics, strategies or unit analysis for NOTA (maybe later, in another document).  There's another [[NOTA players guide|guide]] made by 123v and HeavyLancer which does offer some pointers about how to play NOTA effectively; it's a good read and you might consider going over that one as well.

----
Author: Totbuae
----
&lt;-- Back to the [https://bitbucket.org/notagame/nota/wiki/Home NOTA wiki]
[[Category:NOTA]]</text>
      <sha1>e3gru4ldmlutbrd5jarxn2f6djpfotz</sha1>
    </revision>
  </page>
  <page>
    <title>NOTA players guide</title>
    <ns>0</ns>
    <id>2526</id>
    <revision>
      <id>30966</id>
      <parentid>27950</parentid>
      <timestamp>2019-02-22T00:45:34Z</timestamp>
      <contributor>
        <username>Hawara</username>
        <id>2945</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="15407">{{deprecated|This page is deprecated, please look at the [http://nota.machys.net NOTA Homepage]}}

This is an NOTA players guide, made by 123v and HeavyLancer. 

This is by no means a definitive strategical guide to NOTA, because there are so many units and strategies that it would take forever to think them all up and list them. This Guide gives you the knowledge and understanding to develop your own strategies and tactics.

== Overview ==

This guide is about unit selection for various situations, some general tactics and strategies for all 3 fields of battle; land, sea and air. All of these fields of battle in NOTA are equally important, and it is advised not to concentrate solely on one at the expense of others.

At the end are sections on economy, defenses and a section on general strategies, tactics and some notes.



----


== Land ==

=== Tier 1 ===

* The Kbot is a very valuable unit. It is cheap and dishes out the best fire power at cost. However, Kbots lack armor, health and speed but you get the most fire power for the cost.

* Vehicles are best used as tier 1 Kbot support as vehicle artillery and AA has better range than their Kbot equivalents. Vehicles also have greater speed and better armour (making them better base assault units not unlike Calvary). They are also less cost effective than Kbots in terms of damage dealing capacity.

* If you need a mobile army for a big map you may want a a vehicle army because of the extra mobility and aforementioned armour. However, for that cost you could build 2 Kbot armies, which can push for more ground, still hold their own, and have more firepower.

*You will also find that kbots maneuver better in battle while vehicles have speed. The differences come out on large maps, as small maps one may even wonder why they would even build vehicles.
=== Tier 2 ===

* As tier 2 units hit the battle field tier 1 units will play a smaller role in the bigger battles, but one of the neat things about NOTA is that tier 1 units have important uses even into the late game where as in many other mods they are a waste of resources.

* Tier 2 units are really neat. You can see for your self in-game. The Arm Raptor IV Kbot is a work of art. Even if you will not play NOTA, you should still see this unit. As it takes hits in battle it will also lose weapons as different parts are blown off.

=== Some notes on specific units ===

* The peewee is a very useful unit in NOTA. It is cheap, moves at a high speed, for a Kbot, has a spray attack, decent health, and does not take out all it's mates when it is killed! (Unlike in some other mods) The Core AK is the same but the lazers it has are just not as cool.

* Another ground unit you should know about are the speedy raider bots. They are fast, have a decent attack range, and do decent damage. An opponent that micromanages these early on in the game can be a nightmare if you are not prepared. These raider bots are good for raiding, killing arty, snipers, and when micromanaged, small groups of Kbots. '''Do not''' try to kill them with Arm Flash tanks. The Zeus, Core Instigator, and units whose projectiles move fast enough to hit fast moving targets are good for dealing with these.

* T1 artillery for both Arm and Core are great for fire power on low trajectory, but is not very mobile. T2 Kbot artillery is costly, but a giant gun on legs.



----

== Air ==

=== Air vs Sea ===

*Ships are rather costly and as a result come with some AA. It is a good idea not to fly near ships. Torpedo bombers should be used against ships, but not in closely clumped packs, as ship AA will deal splash damage to those poor planes of yours, and kill them off very quickly. If you do not use them in packs pilots will not be coming home, and they will not be able to tell stories of the great ships they sunk. 

* Toads and Vashps can also be used against ships, but not subs. Bombers and such will not be very effective for dealing damage to ships as you will see for yourself.

* There are sea based planes but land based air is really where it's at.

=== Tier 2 ===

Tier 2 air is a world apart from tier 1, just in sheer terms of variety.

* A pack of tier 2 bombers can give some tier 1 fighters a bad time and an early death as the tier 2 bombers have better AA thanks to their tail guns. Still, a large pack of tier 1 fighters will drop even tier 2 bombers. Tier 2 fighters are better. 

* Stealth bombers use 200 E for stealth. They are fragile and won't last long if detected. Ground radar can detect them if they fly directly overhead. Otherwise, radar planes are the best way of detecting them.

* Wings are deadly low flying laser beaming monsters flaunting a laser of death and two bombs, but every AA unit can hit them, so they can fall out of the sky fairly quickly. They fly slow, so a retreat must be premeditated if the wing is to live. It does not have a large fuel tank so it is not a great deep strike unit, unless you have mobile airpads with you.

* The Core Flying Fortress is a very costly unit but a pain to kill as it has AA and a lot of armor and health. Interceptors are the best way to kill them. If you have less than 20 Tier 1 aircraft after a flying fortress comes your not going to have much of a fighter force left afterwards. 20 Tier 1 fighters have a decent survival chance if they attack as a group. The Tier 2 interceptors are the best way to kill a flying fortress though. Flak is not bad but a flying fortress is flak resistant (flak will still kill it, however).

=== Notes on Air ===

* The Tier 1 ground attack planes (Toad and Vashp), are excellent. They are not cheap or easily built but are wonderful for cleaning up problems in your base or behind your front lines. A toad can pick off raiders in your wind mill farm without causing much collateral damage at all.

* Planes have fuel, and it makes for great game play. Airpads are cheap but needed. A tier 1 air factory comes with a pad as part of the kit (W00t!)

* 4-5 accurately placed bomb drops from a tier 1 or tier 2 strategic bomber can destroy most factories. About 32 (since NOTAv1.59 40+ bombers) bombers can kill a Command Center and 9 stealth bombers will do the same job. 

* Napalm bombers are great. They are fast and fly low to avoid a lot of AA. Rocket towers or tier 2 rocket units put a stop to them best. 
Napalm. Beautiful. Hit massed units with it. Hit econ farms with it. Love it when you use it. Hate it when it is used against you.

* Air is a huge part of establishing regional control. Getting a fighter within response range to discourage air to ground attacks and ground based AA discourage air to air attacks. This can be done with 1-2 fighters and 2-3 ground AA. 

* the cheap static chaingun AA turrets costing 34 metal are a good panic response option for to low altitude air (the are build-able in the field by construction bots/vehicles)
----


== Sea ==

* Firstly, a word on hovers. Hovers are cheaper than ships so it is nice to use them as they do not cost as much. Hover arty is the best hover unit for fighting small ships, but understand that ships are the kings of the sea, not hovers. 6 hover arty will pwn a Destroyer and you could pull it of with 4 of them if you're really good, but don't count on it. A hover transport will CARRY a MOHO builder(T2 metal extractor constructor). This is important as Moho builders are very important units in NOTA and they are very slow.

=== Ships ===

* Ships are huge investments and as a result have a huge impact on the field of battle. Losing sea, followed by the enemie's use of naval bombardment is not fun and will end the game. If there is sea on the map '''you will want it'''. 

* As a ship is valuable you do not want to lose your first ship, so watch it closely, but do not be afraid to use it because you just may catch your opponent with his pants down. If an AA ship can park in your harbor you can say good bye to your air supremacy, and then you've got a problem.

* The Destroyer is really the runt of the ship family but it's radar and sonar ranges are huge. It has the most torpedoes of any ship(4, with 2 on each side), yet it's low health is a bit of a drawback.

* The Cruiser is a great all purpose ship. 123v envies the Core version, it's the best ship you could dream up. Cruisers effectively have 2 torpedoes, a nice set of guns, decent range, and a small sonar radius.

* Subs carry a lot of fire power. They have 1 guided and 3 unguided torpedo launchers, but have little health and can be beaten with ease. Subs can cause a lot of hurt before torpedoes reach them and if they are lucky they may even live. 2 lucky subs can kill a destroyer, but the same destroyer on a lucky day could also kill both subs in the same exchange.

=== Factional Navy Differences ===

* Arm ships are more single purposed and thus cost a lot less as they typically have less AA, and are just not as much. Core ships typically lack the range of the arm ships but do have more hp and are packing a more all-purpose bite. 

For instance, a Core missile ship packs a cruiser gun battery and other weapons to boot. An Arm missile ship is much smaller but costs half the price, and has effectively no additional weapons. A player who keeps his resource spending in mind would prefer the arm missile ship as he can get more missile bang for the buck, but he will need to defend his ships with additional units where as the Core ship can dish out some damage to all units, except subs.

* The Core battle cruiser is a floating pile of health where as the Arm battle cruiser has half the health, but has much longer-ranged guns.


----

== Economy ==

* Economy is costly in NOTA which means that using MMs (energy to Metal Makers) is not a way to get a heavy economy rolling. If you have a good supply of Energy then use MMs, but producing units to gaining or defend metal spots will get you a lot further than throwing your resources into a bunch of fusions.

* Heavy economy building cost a lot of Metal and takes time to build. Getting Moho metal extractors (Mohos) is a huge deal, and it costs you nearly 5000 M to get your first Moho up and running. Mohos have more health as they do cost a lot.

* In NOTA wind does not have a huge explosion so u do not have to be as afraid to use it.

== Defense ==

* NOTA defensive units are costly but very effective. Spending the M can be a real setback, but if it was well chosen it will serve you well. You will find that NOTA does not have indestructible weapons. Super weapons built prematurely are very easy to lose. Mobile units should be mixed with static defense for the best results. Static AA can remove large airborne problems quite nicely too. After you have about 12 flack they start to become very effective. Transportable flack has a faster turn rate and is thus better for shooting low-flying targets then static flack.

*Use a transport unit to carry transportable defenses to new locations.

=== Air Defense ===

* The best way and most cost effective way to establish air supremacy is to build fighters. You should make use of ground Anti-Air to make sure that your fighters win, but it is not cost effective to use ground AA to hold your airspace. Ground based AA will also be a deterrent for enemy aircraft, but this does not equal safety as ground attack air craft can remove small groups of AA without much trouble.

* As fighters can be lost easily over enemy airspace is is normally better not to lose them in a conflict over enemy airspace. Instead, more costly ground-based AA could be a safer option for your air force.

* '''Warning!''' Only flak and ship based high altitude missiles will hit high flying planes such as bombers. All other surface AA is for low altitude air defense.

* Flak has splash damage but is also inaccurate, however, it can case premature deaths by causing an engine fire. Once you have 8-10 flak it will become effective and enemy bomber losses will be heavy.

* Transportable (yes, transportable!) flak turrets do the same damage as non-transportable versions and have a faster turret turn rate, so it is not so bad against fighters (but still inaccurate). Use a transport unit to carry transportable defenses to new locations.


=== Sea Defense ===

* An anti ship gun is a powerful weapon, but air can knock it out with ease, so keep air supremacy or invest in some heavy AA.

* Heavy, long range weapons (such as strategic cannons) are a great way to back your sea effort, and a good way to hold it. Big Berthas (Arm strategic cannons) have a good range for controlling sea, and do good damage to boot.

----

== General Strategies, Tactics and Notes ==

=== Tactics ===

* Keeping your army alive, micro'ing your lines during confrontation is part of the game. A well lead army can achieve wonders.

* Raiding and attacking your enemies' economy is good, as NOTA's econ is a serious investment. Captured ground and mexes are more valuable in NOTA than other mods. Doing raids and not just one all out attack will help you gain the upper hand so you can make that heavy attack and succeed.

* Picking apart your enemy:
Because diversity is so powerful in NOTA breaking up your enemy's diversity exposes his vulnerabilities. Most units all do a specific extremely very well.

*Due to the tides of battle, it may be best to let the battle rage back and forth over your/their mex spots(metal extraction spot) rather then trying to hold at the mex spot, just be sure to cap it when available.

=== Strategies ===

'''Teching'''

* Once you have 3 or more factories you might think of going to Tier 2 depending on how the game is going. As you get a feel for the game you will know when and even if you want to tech. The Tier 2 units are much more useful than Tier 1 units but also cost a good deal more so there will be many more Tier 1 units than Tier 2 units.

* Building an air factory before going to Tier 2 in any other area is also often a wise idea if you haven't already.

=== Notes ===

* Factories cannot be assisted in NOTA. Most NOTA factory production is faster than it is in other mods. If you want larger unit production you can build another factory. In NOTA diversity is very important. As a result you should have a number of factories early on, perhaps even before you can keep them all running at full production. NOTA factories can increase and decrease their production speed so as not to consume resources or build as quickly, depending on your needs.

* There are three armor classes: light, medium and heavy. Units do different damage to the different armor classes, as you would expect. Most Kbots have no armor. Armor is weaker at the sides and weakest at the rear, often the thicker the armor the greater the weak points.

=== Factors to consider when choosing units to be produced ===

* Weapon characteristics such as rate of fire, accuracy, area of effect, damage, turret turn rate, and how the damage and projectiles reach the target
* Armour class and health
* Speed and turn rate
* Build time(which decides what is practical to produce), energy and metal required to manufacture the unit 
* Cost-effectiveness with regards to firepower
* Stealth characteristics such as cloaking, stealth and decloaking radius

----
Content created and edited by HeavyLancer and 1-23v[NOTA]
----
&lt;-- Back to the [https://bitbucket.org/notagame/nota/wiki/Home NOTA wiki]
[[Category:NOTA]]</text>
      <sha1>euju14fdgagsj5j3l1j3745sm4firb2</sha1>
    </revision>
  </page>
  <page>
    <title>NOTAair</title>
    <ns>0</ns>
    <id>2259</id>
    <revision>
      <id>18991</id>
      <parentid>12067</parentid>
      <timestamp>2010-03-13T17:51:46Z</timestamp>
      <contributor>
        <username>Koshi</username>
        <id>2371</id>
      </contributor>
      <comment>fix category</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4998">Air combat in the mod NOTA is vastly different than most other TA variants.

'''FUEL:''' All aircraft baring a few exceptions use fuel. This means that they can only stay in the air for so long and have a limited number of shots to fire. Planes that are out of fuel will automatically move to the closest unoccupied refuel pad. If none are available they will land near an occupied pad and wait their turn. 

'''ROLES:''' No not the one the baker makes... idiots. Each plane in NOTA has a specific role in mind. 


NOTE: [Arm_example/Core_example]:


'''Level 1'''

- ''Scouts'': With high sight range, decent radar, and high fuel this is a good early scout though its low hp means if something sneezes at it, it dies. [Fink/Peeper]

- ''Fighters'': Air superiority. They are weak vs. ground but their missiles and machine guns (MGs) shred air units. Set them to patrol past what you want to protect to give them time to shoot down bombers and ground attack aircraft. [Freedom Fighter/Avenger]

- ''Strategic Bombers'': Flying at a high altitude these planes are great for taking out buildings or large immobile unit clusters. Each bomber has a large fuel contingent but only one bomb load. They fly very high up which means only flak and other aircraft can get to them. With  no defensive weapons they need protection from fighters and interceptors if you want them to survive. [Thunder/Shadow]

- ''Ground attack'': Unlike bombers these units are meant to engage ground forces either on the move or not. They fly low to the ground which means missile units like Slashers or Jethros can hit them. Core's Vashp has powerful rockets and bombs. Arm's Toadfoot has rockets similar to the Vashp but trades in the bombs for an anti air missile and MG. Arm's Hellfish light bomber has a similar bomb drop to the vashp but no missiles (does have a tail mounted MG though).

- ''Torpedo Bombers'': These low flying aircraft can launch a guided torpedo at enemy ships and subs. With absolutely no other weapon they are useful only on maps where ships play a major role.

- ''Transports'': Use these to move the transportable turrets into new positions or ferry ground forces around impassable terrain or closer to the front line. They can hold only one unit at a time and only level 1 units. They don't use fuel!!!!

----

'''Level 2'''

- ''Construction Planes'': These highly mobile builders have the same build list as the other mobile cons at level 1. They also have the slowest worker time so it will take them longer to build the same structures.

- ''Stealth Fighters'': These fast maneuverable fighters will dominate the skies. Useless against ground, their AA missiles down most planes in only 2-4 volleys. They also have a flare system which allows them to survive dogfights longs. Oh and they are stealth.

- ''Gunships'': Ground attack and thats it. These units are designed to take out ground units lacking appropriate anti air. They fly low to the ground and as such can be hit by all anti air (and a few anti ground) weapons so wandering into a base is generally suicide.

- ''Strategic Bombers'': Flying high above the battlefield these heavy bombers are excellent at taking out defense or resource buildings. Like their lower level cousins they have larger fuel reserves but only one bomb load. But being at a higher tech level they have more hp and a light anti air MG mounted in a turret. Core has access to the Black Lily a specialized stealth bomber that lacks the MG of the Hurricane but has double the weapons damage.

- ''Ground Attack'': Both sides have a specialize ground attack aircraft. Arm's Flying wing mounts a lower damage Annihilator laser (roughly 50% less) and twin bombs. The unit exception at taking out armored targets like tanks and defensive buildings. The Wing mounts an MG in the rear for air defense. Core's Firebat is a napalm bomber designed to take out clusters of kbots. It flies fast and low to the ground to avoid AA and hit its target. Other than its bombs it is unarmed.

- ''Interceptors'': Mounting fast firing weapons these planes are ideal for taking out enemy bombers and ground attack aircraft. Arm's Voodoo has 1 anti air missile and several MGs. It is however next to useless against ground units. Core's Osprey has wing mounted plasma weapons and a centerline beamlaser. It can effectively engage ground targets unlike its Arm counterpart. 

- ''Radar Planes'': A flying radar tower these planes are your eyes in the sky. With unlimited fuel they can constantly provide radar coverage to your forces. They are fairly weak however and have no weapons to defend themselves. 

- ''Sonar Planes'': Flying sonar buoy. Pretty simple eh? Basically the same as the radar plane but provides sonar. Flies low to the ground like the top bomber

- ''Transports'': Beefier versions of the level 1 transports, they can carry one unit of any tech level besides those that are untransportable. Arm's Dragonfly mounts a paralyzer weapon as well.
[[Category:NOTA]]</text>
      <sha1>7kfcyzyrigr3odopi29otkixb5ivpas</sha1>
    </revision>
  </page>
  <page>
    <title>Nanoblobs</title>
    <ns>0</ns>
    <id>1331</id>
    <revision>
      <id>16891</id>
      <parentid>12266</parentid>
      <timestamp>2009-08-08T17:06:58Z</timestamp>
      <contributor>
        <username>Seanheron</username>
        <id>2595</id>
      </contributor>
      <minor/>
      <comment>deprecated</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9077">{{deprecated}}

== Project conceptual notes, by Argh ==

Here's a unit breakdown, based on current balance. This is all likely to change- NanoBlobs is in a bit of a transition period. 

=Economy=

'''Lords''' are your commanders. They have a powerful weapon that kills things on the ground, are pretty tough, and can build things quickly, but they are very vulnerable to some units (Knights and Demons, especially). Lords can hover on the surface of water. 

'''Sheep''' are your economy and your principal way to multiply your build-power. Sheep are very likely to either disappear entirely... or change in role, soon, but for now they are still in the same role they've always been- weak, defenseless, and totally necessary. Sheep can hover on the surface of water. 

'''Autofacs''' build armies automatically (with &quot;repeat on&quot; and queues, of course). Nothing special about them... right now. This is also likely to change, but I'm not getting into that until I have the new things done. 

=Defense=

'''Holders''' are stationary, not-so-powerful towers. They can kill Wolves and other light units easily, but fall to Knights. Massed, they can stop small rushes, and backed up with SpireRooks and MegaSheep, they can stand anything but a Demon, but not by themselves. Like everything in NanoBlobs, they have strengths and weaknesses. 

'''SpireRooks''' are slow, powerful units that shoot infrequently, but their weapons can kill Knights in a hit or two, and they are more than cost-effective against SquareRooks and Demons. Their main weakness is that they are very slow and large targets, but they also are specifically weak against Striders. SpireRooks are completely amphibious, and can go underwater. 

'''MegaSheep''' are defensive plasma artillery. While they can be used on offensive operations, they are slow, and they produce resources, so they are often better kept behind a line of Holders, where they do a great job of killing Striders, Knights, and TriRooks. 

=Offense=

'''Wolves''' are cheap, disposable scouts. They can kill weak units or slow-firing things if they are left undefended, but are not powerful combat units. However, they are very cheap, build fast, and provide your enemies with one more target. Always have an Autofac or two building Wolves... their value as scouts and as &quot;chaff&quot; is very important, even if they have low combat power. Wolves can fly. 

'''Archers''' kill Wolves, and move quickly enough to keep up with hordes. They are completely useless against all other units at this time. Mix them up in the queue at the Autofac with other units, like TriRooks and MegaSheep. 

'''Knights''' are your hard-core rapid strike force. Armed with short-range flamethrowers and unbelievable healing powers, they are quite capable of taking apart a base in seconds if they aren't killed on the way in. While Knights are quite killable in this version, they are still very, very dangerous if used correctly. 

'''Striders''' are both weak and powerful. They have been optimised for the current build of Spring's aiming code, but due to the low size of their weapon arc, they still require some micromanagement to really use effectively. Striders have rapid-fire burst chainguns that are quite capable of killing any unit in the game except for Wolves. They are fairly slow, but have a lot of hitpoints for a small unit, and take less damage from certain types of weapon. They are unbelievably deadly on flat terrain, but much less useful on rocky or broken places. Used correctly, Striders can smash open a defense very quickly. Used incorrectly, they are a waste of resoureces and unit-count. 

'''TriRooks''' are the newest unit in NanoBlobs. They are very powerful attack units, but lack the armor to be all-out assault tanks. However, their weapon has good range, a rapid rate of fire... and due to its hovering nature, it can go over terrain that normal units can't see over... very, very handy. TriRooks require finesse to really use well, however, because they are a big economic drain. TriRooks are swimming units, and are effectively both ships and tanks. 

'''SquareRooks''' are a general-purpose artillery unit. Lacking close-in defense, and vulnerable to Knights and Wolves, they are still worth using, because they have weapons that can kill Striders and other light unit types all day long. However, they fare poorly against Holders and SpireRooks. 

'''Demons''' are the ultimate can-openers. They have a long-range popup missile that does decent damage to anything, but fires slowly. More importantly, however, they have an amazing DemonGun that can tear up massed units or defenses in a real hurry, and also has an effect over time, instead of being nearly instantaneous. Unlike other weapons it can keep killing units further back as they move through the deadly zone. Demons require protection from Knights, and aren't terribly fast, but they can also swim like TriRooks. 

=Gameplay=

NanoBlobs is, basically, a new kind of game design. I started it out as a way to talk to the AI developers about making better AIs for Spring, but it's a lot more complicated than that at this point. 

Basically, on anything but a small map, NanoBlobs is a completely strategic RTS. You're not going to want to micromanage your units, or worry about losing a few (thousand). Instead, you're going to block, scout, feint... and then attack, after finding the weak spots in your opponent's current streams of units. 

NanoBlobs expects players to already know how to queue up multiple build orders, do things like the good ol' &quot;bomber/guard&quot; trick from OTA, and other Gnug skills. NanoBlobs is not terrifically noob-friendly, and requires that you actually pay attention to the massive battles... and plan well in advance. You can't win through just spamming one unit, and you can't win by playing defensively, and building up to Tech X, or slowly choking your enemy out of metal spots, or any of that boring crap. No. In NanoBlobs.. you win by killing the enemy... period. No tactic is &quot;lame&quot;. Everything has a fairly obvious counter... plus a lot of subtleties. It's not &quot;realistic&quot;, it's not an attempt to be anything but a pure battle experience. 

Typical new players get stuck on three things: 

1. They are like, &quot;uh, where are the mines and tech levels&quot;. Uh... there aren't any. GET MOVING  

2. They try to build defenses and hold until they have Demons. This is dumb, because then their opponant can steadily hopscotch new Autofacs nearer and nearer to them, and crush them with sheer firepower. 

3. They think that .cheat .nocost is on, and spam in an unintelligent way. There ARE COSTS to most major units, and the gradual drain on your economy is a major part of gameplay, which future versions are going to emphasise more  

The best thing to do, playing this game, is to decide where your first base will be... get it built before the enemy's first Wolves arrive, and then begin spamming out streams to scout and to hold as much of the map as possible. NanoBlobs is very much about map control- not so that you can get metal, but because that prevents the enemy from getting around your flanks. 

After that, then what? Well, here are some classic options: 

1. Rapid-build 50 Knights, then throw them at the weakest part of the enemy's lines. One Knight can destroy a base pretty easily. Really. Just give 'em a path, tell 'em to Roam, and then get on with something else... like sending all available Wolves ahead to distract their defenses  

2. Spam out Wolves, MegaSheep, Knights and Archers in a mix, to keep the enemy engaged and pinned, then build up a force of SquareRooks and a couple of Demons. Use the Squares to punch a hole in the enemy streams, then use the Demons to kill their defenses. Just make sure to guard them against Knights. 

3. Use your Lord to roam around, spiderwebbing Autofacs all over the map, anywhere the enemy doesn't contest you, and gradually spam them to death. 

4. Use your Lord or a bunch of Sheep to build Holders to support your forces in a combat area, or to create a fall-back line that you can retreat to. Just because you can send thousands of robots to their death doesn't mean that the occasional retreat isn't a good idea. 

5. Use the units that can swim to go around enemy land forces and crush them  

... and lots and lots and lots of variants. NanoBlobs looks simple, but is not simple. Each unit has a lot of subtleties, from economic balance to what terrain it can handle to how fast it is. I've really tried to make sure that you never go, &quot;hey, that's redundant&quot;, or &quot;wow, that's useless&quot; with the mod. 

All of that said... this version's balance is still very rough, so please don't flame me when you find an obvious flaw (point it out though, I will keep it in mind). And I am contemplating some major changes for the future, to further reduce lag for low-end players... and when the new version of Spring is out, I will be making very heavy use of the new UnitIcons feature, so that you can direct your battles &quot;from orbit&quot;.

{{Category:Mods}}
[[Category:Mods]]</text>
      <sha1>tklgn0wfmjmynnvnzi4acasotdb8ku4</sha1>
    </revision>
  </page>
  <page>
    <title>New to xta</title>
    <ns>0</ns>
    <id>2630</id>
    <revision>
      <id>20859</id>
      <parentid>20858</parentid>
      <timestamp>2010-12-18T18:47:02Z</timestamp>
      <contributor>
        <username>Babbles</username>
        <id>2232</id>
      </contributor>
      <comment>Undo revision 20858 by [[Special:Contributions/Babbles|Babbles]] ([[User talk:Babbles|talk]])</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5687">                       [[Image:Xta_logo_white.jpg]]

'''Here you can find a neat guide for beginners to XTA'''


== Light Laser Tower == 

Light laser towers (LLTs) have a much different role in XTA.

They cost 250+ metal and should '''NOT''' be spammed unless in specific circumstances.

It is widely thought that 2-3 well spread LLTs will kill a Commander.

They are more for holding a strategic point than defending a small area.

Units will defeat equal metal cost in defence.

----

== Commander ==

XTA is built around the Commanders and Commander Pushing is common.

For a specific guide on Commanders, go [http://springrts.com/wiki/Xta_commander here].


Unlike BA, there are differences between Core and Arm Commanders:
*Arm is faster moving
*Core has bigger decloak radius (easy to decloak)
*Core has longer D-Gun (260 compared to Arm's 240)
At morphing, they are also different: 
*Core gets a heavier laser, closer range = more damage at Level Two
*Arm gets a paralyser at Level Two
*Core gets a plasma shot at Level Four
*Arm gets three raven rockets at Level Four

The Commanders have shorter range than BA Commanders.

It costs 200 Energy to cloak a stationary unmorphed Commander, and 1000 a moving one.

The D-Gun also has a wider impact.

Commanders can make all Tech one and Tech Two labs, like all constructors.

'''BUT DO NOT GO TECH TWO AT START'''

'''Commanders do NOT leave a wreckage. '''

== Morphing ==

Commanders can be morphed in XTA (toggled On/Off in host options).
Commanders can be morphed 4 times. The first level requires 0.01 experience.
First level gives: 
*+3 metal, +75 Energy (starts at +2 and +50)
*2,000 metal + Energy storage (starts at 1,000)
*Build speed increases by 25, gets full Tech one radar as well as increased LoS
*Range increases by 20, more powerful primary laser and +250 extra health
*When cloaked and moving Commander uses only 700 energy, not 1000
*Level Two requires 0.25 experience and gives improvement on level 1
*Level Three requires 0.10 experience (will go to 0.09 if excess after Level Two)
*Level Three gives improvement on Level Two as well as self repair option
*Level Four requires 0.25 experience and gives improvement on Level Three
*'''Commander will be paralysed during morphing!'''


----

== Vehicles or Kbots? ==

In XTA both types are useful.

It is best to go Kbots on hilly areas and Vehicles on flat areas.

Flash are not as powerful and a wide spread of units is best.

Vehicle Constructors are faster builders but cost more.

All AA shoots ground.

Scouts in XTA are very strong and can survive a lot of damage, however have low damage output.

----

== Nanos == 

XTA Nano Towers have shorter range but more build power than in BA.

They chain explode, so place them at your own risk!

Try space them out and not so close to your lab (but within range).

----

== Anti Air == 

Unlike BA, Vehicle and Kbot AA, Tech One and Two shoots ground and air.

All stationary Anti Air shoots ground.

Anti Air ships also shoot ground (and surface sea).

There is only one Tech one and Tech Two stationary Land Anti Air for both factions.

There is only one Tech one and Tech Two stationary Sea Anti Air for both factions.

There is no Tech Two Kbot Anti Air, although Armâ€™s Pelican has a weak missile.

----

== Difference in Techs ==

'''Tech one'''

It is usually best to only have one Tech One land lab, with assisters to improve build power.

XTA is very similar to OTA with Tech one units (less than BA).

Toaster/Ambusher is Tech One; Guardian/Punisher is Tech Two.

Dragonâ€™s Teeth blocks Rockets and majority of Missiles (terrain dependant).

All Tech One Constructors can make all Tech one and Tech Two labs.

Sub Pen and Shipyard are both sea Tech one.

Level one Metal Makers do not chain explode.

Popups do not have &quot;High Trajectory&quot; function.

'''Tech 1.5'''

Hovercraft and Sea Planes are Tech 1.5

Labs cost 1,700 metal.

The Constructors can make Mohos and Anti Nukes.

Hover Platform can be built on Land and Sea.

''' Tech Two'''

Tech Two is very different in XTA, and is usually made earlier.

Once Tech Two is out, Tech one units will suffer heavily in head on combat.

Resurrection Kbots are Tech Two and can make structures.

'''Mohos cost 300 Energy to run not 25!'''

Zippers/Freakers are in Tech one and 2 labs.

Fleas have 700 HP and are less a scout unit more Skirmish.

Guardians/Punishers do not have &quot;High Trajectory&quot; function.

There are no Plasma Shields.

'''Tech Three''' 

All Core land  and air Tech Two cons can make the Krogoth Gantry.

Arm has no Tech Three.

Krogoth is only Tech Three unit (30,000+ metal).

----

== Resources ==

There is no Advanced Solar.

Cloakable Fusions give 800 Energy
*Arm takes 125 Energy to Cloak
*Core takes 150 Energy to Cloak
*Arm takes 500 Energy to Stealth (625 for Cloak and Stealth)
*Core takes 550 Energy to Stealth (725 for Cloak and Stealth)

Heavy Fusions give 3500 Energy.

Arm have Mobile Fusions (260 E) in Advanced Vehicle Lab.

Core have Mini Fusions (300 E) built by all Tech Two Constructors.

NEVER start with a Heavy Fusion.

Moho Metal Extractors cost 300 Energy per second to maintain.

There is no gradual reclaim.

Metal storages give 10,000 storage extra.

Energy Storages give 30,000 extra storage.

No Tech Two Storages (there are Tech one underwater ones).

Underwater Storages give increased amounts of storage, but cost a little more.

----

== Micro ==

XTA is more about Micro as opposed to Macro.

Controlling a select amount of units can win games.

Units have more Health and are harder to kill.

Wasting units by not microing '''WILL''' cost games.

Commanders are widely microed.




[[Category:xta]]</text>
      <sha1>sf3bjdvsy91ege1vu63920fmz0l45h6</sha1>
    </revision>
  </page>
  <page>
    <title>Nuke strike</title>
    <ns>0</ns>
    <id>1477</id>
    <revision>
      <id>15163</id>
      <parentid>11292</parentid>
      <timestamp>2008-07-27T06:00:24Z</timestamp>
      <contributor>
        <username>Maackey</username>
        <id>2532</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2038">'''''A mid-late game tactic'''''

This tactic basically involves a large number of nuclear missile silos which are built, loaded with nukes, and then fired in rapid succession. 
Very successful if one of the nukes gets through the missile defense and hits a high concentration of expensive buildings that in turn create a chain reaction. eg. an advanced fusion reactor, or, (''should your lottery ticket win whilst you are saving the alienware's CEO's life and he promises to get you the best damn machine they build, and your isp company draws a new &quot;never pay for high speed internet again&quot; competition with your name on the draw'') two missiles get through, one hitting the Moho geothermal plant which explodes forcing the nearby commander into the airspace that the second missile is planning on taking, the resulting explosion slams the commander to the ground that is currently occupied by the Buzzsaw/Vulcan, which in turn explodes destroying the ring of doomsday machines surrounding the unexploded part of the base.


'''Nuke strike is effective against:'''

*    New players (aka noobs)
*    Peep with no missile defense :P
**   Or hit your enemy's missile defense just before u nuke  i.e planned / suicide air raid



'''Nuke Strike is ineffective against:'''

* Someone with more well fortified anti-nukes then you have nuclear silos.
* Someone with an expansion strategy.


Nuke strikes are difficult to pull off because of the high resource drain involved in building them and clearing enemy missile defense. 
* However if you get some nice hits the game is either over then and there, or the opponent is crippled enough for the game to end shortly afterwards. 
Beware of radar jammed areas hiding the enemy's real base, as well as mobile anti-nukes.
* Not nice to find out you have sent your entire mobile force to clear out the recently nuked decoy base and your back door is open to his 5 krogoths, life gets awkward quickly.




''' [[Strategy_and_Tactics|&lt;- Back to Strategy and Tactics page]]'''

[[Category:Strategy]]</text>
      <sha1>1orq579e2q0xryuhb1w9rp7rizc0gnm</sha1>
    </revision>
  </page>
  <page>
    <title>OTA</title>
    <ns>0</ns>
    <id>1186</id>
    <revision>
      <id>30981</id>
      <parentid>30979</parentid>
      <timestamp>2019-02-22T03:01:58Z</timestamp>
      <contributor>
        <username>Hawara</username>
        <id>2945</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="513">{{historical}}
OTA, or the original Total Annihilation, is a game made by Cavedog in 1997 by [[Wikipedia:Chris Taylor (game designer)|Chris Taylor]]. Spring was originally a remake of OTA in 3D, but has expanded beyond that. OTA still has a large community, and has many, many mods to play with. A few of these have been ported to Spring, such as [[Absolute Annihilation]], [[UberHack]], [[Final Frontier]], [[TA-WD|World Domination]], and SWTA.

For more information, go look at [[Wikipedia:Total Annihilation]].</text>
      <sha1>m1pcunmja76gaxjjhxw8tc5of4mm0h6</sha1>
    </revision>
  </page>
  <page>
    <title>OTAR-EVAMP</title>
    <ns>0</ns>
    <id>1006</id>
    <revision>
      <id>21301</id>
      <parentid>20604</parentid>
      <timestamp>2011-02-24T17:03:48Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="22224">{{historical}} '''Space is Big... really Big'''


== Andromeda Wars (Possible Title) ==


----
Before our world had even cooled, a dire threat faced the thousand racesÃ¢â‚¬â„¢ that inhabited the outer edge of the galactic core. The Core, the massive bejeweled cloud of energy that was the center of our galaxy, had begun a fatal climax to a million year old countdown. The stars of the Core are much closer together then the outer armÃ¢â‚¬â„¢s, and this allowed Slower then light travel shipÃ¢â‚¬â„¢s to reach other starÃ¢â‚¬â„¢s in only a year, or at best a few monthÃ¢â‚¬â„¢s.
[[Image:LizardShot1.png|frame|right|Concept Art Of EF Infantry Lizard Marauder]]

The Galactic Senate formed and ruled semi-peacefully for thousandÃ¢â‚¬â„¢s of yearÃ¢â‚¬â„¢s. EmpireÃ¢â‚¬â„¢s grew and faded, and the Core seemed to last forever. However the energy coming off each star fed into the others, making the Core a hot bed of radiation. RaceÃ¢â‚¬â„¢s that didnÃ¢â‚¬â„¢t cope, died out, but most survived and continued on with the status co. The stars though, they began to age faster, burning there hydrogen at an increased rate. 

One by one the starÃ¢â‚¬â„¢s began to supernova, and these massive energyÃ¢â‚¬â„¢s caused other starÃ¢â‚¬â„¢s to supernova as well, creating a crescendo of energy that wiped out the Core in one massive, slow motion explosion. The raceÃ¢â‚¬â„¢s panicked, but bogged down by bureaucracy and bickering, no major evacuations took place. Some raceÃ¢â‚¬â„¢s escaped in tiny ramjet ships, but most where consumed by the deadly wave of gamma radiation that spilled form the Core.

The outer raceÃ¢â‚¬â„¢s, the ones that werenÃ¢â‚¬â„¢t powerful enough, economically or politically, to force there way into the rich hot bed of the Core, saw the holocaust that consumed thousandÃ¢â‚¬â„¢s of raceÃ¢â‚¬â„¢s. The charismatic leader of a race known as the JÃ¢â‚¬â„¢okall took quick control of the Outer Senate and organized a massive exodus, before the wave of Gamma radiation overcame them. It took fifty yearÃ¢â‚¬â„¢s, and they lost many of the inner raceÃ¢â‚¬â„¢s, but the majority of the Arm sector escaped.  

The Arm sector was facing towards the third arm of the galaxy, the races of the other two Arm sectorÃ¢â‚¬â„¢s have never been contacted by this one. There fate was never found, and the fleeing raceÃ¢â‚¬â„¢s didnÃ¢â‚¬â„¢t care enough to send scoutÃ¢â‚¬â„¢s around the cloud of radiation. 

Even though the Exodus Fleet, or the EF, was using ramjets and flying at demi-light-speed, the Core Explosion still gained. As thingÃ¢â‚¬â„¢s looked grim, a amazing mind from a race of famed thinkers found the secret of hyperspace, and how to travel faster then light. The EF suddenly started to gain ground, and headed outwards, towards the Cloud of Magellan, and possible to Andromeda. Where ever they needed to go. 

The EF formed a police force the keep malcontentÃ¢â‚¬â„¢s under control, and called them the GuardianÃ¢â‚¬â„¢s. Only a few minor wars occurred, and some raceÃ¢â‚¬â„¢s where confined into radio silence, forbidden to leave there World-Ship. Those ships, named the OutcastÃ¢â‚¬â„¢s, clustered around the network of ships of the EF. Some ships exploded like miniature sunÃ¢â‚¬â„¢s, fusion bombÃ¢â‚¬â„¢s strapped to there hull set off. MillionÃ¢â‚¬â„¢s perished as the Guardians kept the peace. 

A minor scuffle happened at the outer edge of the Galactic Arm. It involved a race of semi-evolved, but very stubborn and pugnacious, apes. They joined up with the fleet after a minor war. When they saw the explosion shining through the dust cloudÃ¢â‚¬â„¢s near the center of the galaxy, the negotiationÃ¢â‚¬â„¢s where quickly over. The humans stuck to the dank subsections of the most charitable race in the EF, the Shofixti. The humanÃ¢â‚¬â„¢s, pushed to new levelÃ¢â‚¬â„¢s of xenophobia and general anti alienisms, sulked and plotted. 

The Shofixti simply shock there head and subdued the human uprisingÃ¢â‚¬â„¢s with as little violence as possible. After a few centuries, after the EF had cleared the edge of the Galaxy, the humans and the Shofixti had grown so used to each other, that they barley noticed any difference between them. Aside form the fact that the humanÃ¢â‚¬â„¢s had a amazing lack of gillÃ¢â‚¬â„¢s, stinkers or compound eyeÃ¢â‚¬â„¢s. 

The EF has been running now, fleeing between the fast gulf between the Milky Way and Andromeda, for exactly twenty nine thousand years.

The EF had blended together each race trying to keep the massive World-ShipÃ¢â‚¬â„¢s from failing, and the FTL EngineÃ¢â‚¬â„¢s working at a constant pace. Once they cleared the official Ã¢â‚¬Å“death zoneÃ¯Â¿Â½? where the gamma radiation had lowered to a acceptable limit. The EF kept going though, fore they had already reached the great gull between the GalaxyÃ¢â‚¬â„¢s. It was a feeling that the older raceÃ¢â‚¬â„¢s and there eldest could describe well. A feeling of deep chill. 

No starÃ¢â‚¬â„¢s, no nearby planets, black holeÃ¢â‚¬â„¢s, quasars, pulsars or neutron starÃ¢â‚¬â„¢s.. Nothing but a massive empty, filled only with clouds of gasÃ¢â‚¬â„¢s and partials. The World-ShipÃ¢â‚¬â„¢s plowed on, towards the bright promise land of Andromeda. The most sophisticate instruments the EF used showed that the Andromeda galaxy was not exploding, and had not done so in the past million years. 

Once the EF reached the edge of Andromeda, a massive celebration occurred. The three largest World-Ships, called the ArkÃ¢â‚¬â„¢s by the more poetic humans where literally lashed together and everyone, even the sullen outcastÃ¢â‚¬â„¢s where gathered together. The OutcastÃ¢â‚¬â„¢s had actually forgotten that their ships were ships, and where shocked when they where taken outside in large shuttles. Even so, the OutsiderÃ¢â‚¬â„¢s didnÃ¢â‚¬â„¢t dull the party. 

The corpse of the many heroÃ¢â‚¬â„¢s of the EF, ranging from the inventor of FTL, the First Leader and the hero of the tenth war, Ke&lt;click&gt;Jaw&lt;snap&gt;. He was called Key by most none insectoid raceÃ¢â‚¬â„¢s. The party ended after a couple monthÃ¢â‚¬â„¢s, and the EF started to search for habitably planetÃ¢â‚¬â„¢s in the outer rim of the Galaxy. For some reason no one thought that anyone would dispute the EF. The universe is too massive to fight over land? Right?

When the EF first met the Xenos, they thought that they where literally minerals, as the Xenos donÃ¢â‚¬â„¢t build much, and generally sit around in nutrient baths. So as the EF mining crew began to slowly process the complex silicon crystals to create much needed computer chips, the Xenos had to experience being vivisected over many long months. The local Psionic of the Xeno colony was the last to be mined, and had already felt the pain of itÃ¢â‚¬â„¢s friends being slowly torn apart. It never occurred to the Xenos that the intruders couldnÃ¢â‚¬â„¢t speak with Psi abilities, and so the EF never learned of the atrocity they where committing.

The Psionic sent its pain and the pain of its fellows to the nearest Xeno colony, and then the Psionic there sent the message along a long chain of Psionic relays to the Xeno Home world. Incensed, the Xenos began to plot there counter attackÃ¢â‚¬Â¦.


----

==Xeno Units and Buildings==

===Commander:=== The Xeno commander is slow, but equipped with a stolen advanced Nanolather, it can build a entire Xeno colony with ease. Its amazing Psi ability, the Destabilizer, can blow apart the molecules of a single enemy unit causing instant death. Its weaker Psi blast can fend of lighter enemy incursions, while the Destabilizer can handle the larger EF units. 

===Xeno Buildings, Lvl 1===

*Mine: This small structure burroÃ¢â‚¬â„¢s into the natural depositÃ¢â‚¬â„¢s of mineralÃ¢â‚¬â„¢s in the planet, and using sophisticated Xeno tech, transportÃ¢â‚¬â„¢s the refined material the nearest storage facility. 

*Solar Power Plant: Using a plantlike symbiotic, a Xeno chooses to become one with this plant, and as such can generate power through photosynthesis. The Xeno protects the plant by brining up crystalline shields. 

*Nutrient Bath: A small bath, filled with nutritive fluids. Creates XenoÃ¢â‚¬â„¢s, from Tankers to the small, agile Flyers. The XenoÃ¢â‚¬â„¢s have two buildings for creating unitÃ¢â‚¬â„¢s, but can only build slowly. They have less air craft and navel vehicleÃ¢â‚¬â„¢s, and are limited tactically as such .They make up for it with there incredibly strong (and slow) infantry. 

===Xeno Tanks, lvl 1=== 
*PsiTanker: A small crystal that has adapted some of the EFÃ¢â‚¬â„¢s ideas. Uses Psionic powers to levitate, Has a Blaster. Cheapish 
*PsiBuilder: A levitating builder unit 
*PsiScout: Cheap, fast, with a very weak blaster 
*PsiShard: Xeno version of Missile tanks. UseÃ¢â‚¬â„¢s a tracker shard 

===Xeno Infantry, Lvl 1=== 
*Xeno: Basic Xeno infantry, more powerful then EF version. Uses a Shard, non tracking 
*Psicadet: A psychic in training, which can take centuries, given the XenoÃ¢â‚¬â„¢s slow life time. UseÃ¢â‚¬â„¢s a Psi Blast 
*Shard: The walking version of the PsiShard, without the tracking 
*Spy: The fastest Xeno in the game (which isnÃ¢â‚¬â„¢t saying much) the Spy has one advantage over the EF scout. Psionic invisibility, which clouds the enemyÃ¢â‚¬â„¢s minds. Can still be detected and shot by radar. Unarmed 
*Constructor: Infantry builder, capable of scaling mountainÃ¢â‚¬â„¢s better then a Psibuilder. 

===Xeno Planes, Lvl 1===
*Flyer: Scout, fast, equipped with a Shard. What can I say? 
*Fighter: Using a Blaster and two shardsÃ¢â‚¬â„¢, this plane stayÃ¢â‚¬â„¢s in the air with the help of two motorized fanÃ¢â‚¬â„¢s stolen from a EF 9340-X Ã¢â‚¬Å“BrawlerÃ¯Â¿Â½? class gunship. 
*Bomber: Using a strap on rocket of Xeno design, the Bomber never really expects to return from combat. It has a Ray, and can be devastating when (if) it makeÃ¢â‚¬â„¢s a pass. 
*Floating Nutrient Bath: Using a energy net created by the Psychic building the ships, the nutrients are held in a concentrated area of the ocean. Builds the Xeno ShipÃ¢â‚¬â„¢s. 

===Xeno Ships, Lvl 1=== 
*Ship: The Xeno all purpose ship is a jack of all tradeÃ¢â‚¬â„¢s, but the master of none. With a shard, blaster and Psionic radar, the Ship can be out maneuvered in any way by a specialized ship of the EF. But it is adaptable, and that has something going for it! 
*ShipBuilder: name sayÃ¢â‚¬â„¢s it all! 

*GeoPowerplant: Its called the Death by Ecstasy, by most XenoÃ¢â‚¬â„¢s. The GeoPowerplant is a Xeno that has given its life willingly to supply power to the war machine required to fight the EF. The Ecstasy comes form the pure electricity that flowÃ¢â‚¬â„¢s out of the XenoÃ¢â‚¬â„¢s body, stimulating the pleasure compound of the XenoÃ¢â‚¬â„¢s brain. The Xeno slowly becomes nothing more then a building, immobile and not interested in anything other then the ecstasy that flows through its body. 

*Blaster Tower: Named by the EF, who have learned to hate this squat crystal. Basically a Blaster linked to a power node, giving it unprecedented power. 

*Psiradar: A Psionic sits in this amplifying tower, drawing energy from a nutrient bath. It useÃ¢â‚¬â„¢s its thoughts to detect the enemy, and single H.Q The Tower itself thoughÃ¢â‚¬Â¦ its pitifully weak and is blow apart by even small armÃ¢â‚¬â„¢s fire. 

*Wall: WellÃ¢â‚¬Â¦ aside from being cool, purple and crystal like, do I need to say anything else?

==Xeno Arsenal==

===Xeno Weapons:=== 

Energy: 

*Blaster: Basically a organically grown superconductor that builds charge until it unless a massive wave of energy, blasting enemy units to pieces. 

*Ray: Using naturally grown parabolic mirrorÃ¢â‚¬â„¢s to bounce a ray of bioluminescent light back and forth, adding power until it fireÃ¢â‚¬â„¢s off a ray of intense heat. Most deadly Energy weapon, akin to a Annihilator, but itÃ¢â‚¬â„¢s beam is invisible, making the weapon harder to spot. 

*Discord: Building up a incredible charge in there own bodyÃ¢â‚¬â„¢s, this Xeno can blow themselves to smithereens. The weapon crateÃ¢â‚¬â„¢s heat, and its nicknamed the Ã¢â‚¬Å“HarbormakerÃ¯Â¿Â½? by the EF. 

Kinetic: 

*Shard: A cannibalistic weapon that cutÃ¢â‚¬â„¢s into eh XenoÃ¢â‚¬â„¢s own body, creating lethal silicon shards. A cluster of Nano botÃ¢â‚¬â„¢s are inserted into the shard, sharpening the disc into a molecule thin edge. This allows the Shard to cut through almost any amour. UseÃ¢â‚¬â„¢s metal and energy to fire. 

*Psionic (The XenoÃ¢â‚¬â„¢s mind-structure is so inexplicably bizarre that the EF has not been able to figure out how the XenoÃ¢â‚¬â„¢s accomplish these featÃ¢â‚¬â„¢s. It seamÃ¢â‚¬â„¢s apparent that the Xeno bodyÃ¢â‚¬â„¢s can focused energy waveÃ¢â‚¬â„¢s, and there mindÃ¢â‚¬â„¢s can direct them consciously) 

*Nuke: The HumanÃ¢â‚¬â„¢s dredged this archaic term up from there databaseÃ¢â‚¬â„¢s. It seems fitting enough. A ancient Xeno, sitting in a nutrient bath, had a mind so advanced that it can create what has now become feared through out the EF. The Nuke is literally a globule of matter, held together by a unknown energy, and once it impacts on the ground, the energy feedÃ¢â‚¬â„¢s into the plasma, compressing it into Nutronium. Nutronium is the densest matter in the known universe, and this ball of Nutronium will level a large area of the planet before falling apart, due to structural instabilityÃ¢â‚¬â„¢s. 

*Shock: This Xeno weapon is a sniper rifle. Using a massive amount of energy, it fireÃ¢â‚¬â„¢s a lethal burst of gamma radiation in a beam so focused it can burn a hole through an enemy. If the target survives, itÃ¢â‚¬â„¢s nervous system will literally fall apart as sever radiation sickness takeÃ¢â‚¬â„¢s hold. 

*Psi Blast: Using anger built up by the war with the EF, a Xeno Psychic can literally liquefy a humanoid, reptiloid and intelligent walking treeoid brain.


----


==EF Units and Buildings==

===EF Commander===
The C&amp;C of the EF attack forces. Capable of creating a forward ops base and an entire army, this formidable battle suit is directly linked to a orbiting World-Ship. Equipped with the top secret weapon, the Punch-Gun, the commander can literally tear molecules apart in a straight line, destroying anything unlucky enough to be in the way. Unfortunately this bulky gun leaves room for only a light laser. 

*Mine: used toÃ¢â‚¬Â¦ mine minerals 
*Wind Power: the EF has long known the best wayÃ¢â‚¬â„¢s of getting every last bit of energy out of every last source possible. They leave NO source untapped, and so the Shofixti built theses oversized windmills. 
*Solar Power: A twenty sided die, stuck on a stick with a hole under the ground, as one Gary Gigax said. He had recently (re)invented a popular board game, saying that he had found it in his great to the tenth power grandfather suitcase. The power generator drops into the hole when coming under fire, like an Ambusher. 
*GeoPowerplant: This massive cylinder houses hyper advanced fanÃ¢â‚¬â„¢s, spun by the gasses coming out of the planet. Creates power, and comes with a small capacitors to hold some extra energy. 
===Aircraft Plant===
Builds aircraft manned by the Insectoids that have far far FAR better reactions then most raceÃ¢â‚¬â„¢s, making them perfect for fast paced air combat 
*TX-99 Sneak: Ã¢â‚¬Å“AdorableÃ¯Â¿Â½? is another name for this sickeningly cute plane. Fortunately, only the pilots, the Insectoids, call these plans as such. Looks like a small hexagon with multiple hover generators stuck on landing gear that looks like spider legs. 
*TX-100 Bulldog: The best bet for early air combat. Equipped with a simple laser and two gavetic missiles (really just a cool name for a regular missile that implode rather then explode) 
*TY-Con Builder Plane: Using a mico-nanolather to construct buildings, this plane can reach had to reach placeÃ¢â‚¬â„¢s of the map and builds. 
*TX-990 Thumper: A minelayer plane. Insane? NO! Drops modified Thwumper bombs. They explode in the air, spraying light laser fire all over the area. Weakens and destroys enemy building and units.

===Infantry Beamer===
Using a slow motion transporter (Fast oneÃ¢â‚¬â„¢s cause deadly radiation to flood the area) the Beamer plants infantry on the ground from the orbiting World-Ship. The infantry comes from the Sjakar and the Humans, both fast breeding, violent and good at infantry combat. A old human with a perchance for ancient military organizations brought the term Ã¢â‚¬Å“MarineÃ¯Â¿Â½? back into use. 

*M.I: The M.IÃ¢â‚¬â„¢s (Mobile Infantry) are power armored troops, each equipped with a small laser, micro com unit and a huge amount of guts. Basic trooper, with a small laser 
*Marauder: This lizardman is capable of handling the increased work lode that comes with the Marauder suits. With extra speed, maneuverability and some odd seat designs, the Marauder is the speedy scout of the EF. Comes with a large sight range and a light laser. 
*A.T.I: Slower then the other infantry suits, the ATI is a Anti Tank Infantry unit capable of firing a sonic warhead. The warhead priceÃ¢â‚¬â„¢s the inner part of the tank then blasts a sonic warhead inside the confined space of the tank. Unfortunately, the warhead has yet to be modified to fit the biology of the XenoÃ¢â‚¬â„¢s, and is not a one hit kill. 
*ConBot: The ConBot is a endearing, if slow, weak and dumb robot. Every one at the base always likes to see theses botÃ¢â‚¬â„¢s trundle around building and repairing. Can build buildings, go all over most terrainÃ¢â‚¬â„¢s but itÃ¢â‚¬â„¢s not as speedy as the other builder units. 
*A.I: The first ever Artificial Intelligence infantry. Dirt cheap, equipped with weak A.A missiles and fast, the A.I botÃ¢â‚¬â„¢s are useful for early raids and air protection. 
*Thumper: Firing light mortars, this antique was used only one before, in the conquest of earth. Many humans drive theses, because after San Diego was leveled by them, the hairless apes gained a grudging respect for theses light artillery units. Equipped with a plasma gun. 


===Tank Factory===
Building tankÃ¢â‚¬â„¢s on planet is easer then beaming them from World-Ships. So this is ACTUALLY a factory, building with advanced nanolathers. All EF tankÃ¢â‚¬â„¢s are hovers, because A: Its cooler and B: They are more flexible 

*GV-90 Ã¢â‚¬Å“PodÃ¯Â¿Â½?: This small converted hover car literally has a light laser strapped to the front. Its best use is in scouting and mass raids. 

*GV-892 Ã¢â‚¬Å“ZippyÃ¯Â¿Â½?: This hover bike has two riders and a missile launcher on the back. The missileÃ¢â‚¬â„¢s are automated, and the second driver fireÃ¢â‚¬â„¢s two pitifully weak laser pistols. Zippys serve better as AA platforms then anti tankÃ¢â‚¬â„¢s, but the pistols do look cool! .The Zippers are often considered insane by most males of most races. The females howeverÃ¢â‚¬Â¦ 

*GV-920 Ã¢â‚¬Å“BulldozerÃ¯Â¿Â½?: This hover tank has some medium amour and a Kinetic wave gun. Great tank of the line, but will not stand up to more deadly Xeno weapons. 

*CV-1.0 Ã¢â‚¬Å“Hover ConÃ¯Â¿Â½?: This tanks has a advanced nanolather, and a insanely brave pilot. Most CVÃ¢â‚¬â„¢s have pilots that will willingly drive into heavy laser fire just reclaim some smoldering wreckage, so maybe its just idiocy rather bravery. 

===Other Buildings===

*Laser Tower: A Tower with a laser hooked to a continuous power source. 

*Wall: A nice wall to protect your towers. DoesnÃ¢â‚¬â„¢t look like crystals thoughÃ¢â‚¬Â¦ 

*Laser Wall: A better wall that unfortunately sucks up more power then the other verity, making it more expensive. It canÃ¢â‚¬â„¢t be run over by larger tankÃ¢â‚¬â„¢s, and is harder to damage.

==EF Arsenal: (As posted By SinbadEV)==

===Kinetic===

*Kinetic Wave Gun: Pushes Stuff and causes projectile damage, but also to the insides of stuff. 

*Kinetic Bomb: Thwumper: Goes off in the air and squishes stuff from the top 

*Gravity Pointer: Build 3 stations to &quot;triangulate a target&quot;, anything withing the triangle formed by this can be cause to implode. 

*Gravity Mines: temporaily increases the &quot;mass&quot; of an area, slowing movement and doing slow but constant damage to anything trapped in it's field. 

===Magnetic=== 

*Field disruptor/EMP: Used on a specifically engineered &quot;mechanical only&quot; attack with only physical/projectile weapons, disrupts the functioning of close ranged units. 

*Clumper Mine: magnetizes the metal in a group of units, these units will constantly be atracted to eachother but remain functional. 

===Phase(matter state)=== 

*Disruptor: Causes Atoms to randomly shift and ionize, causing enemies to simply become useless blobs of random goo. 

*Destabalizer: Causes Atoms to become unstable and will eventually go critical and then nuclear. 

*Shifter: Causes units to slip out of phase with the rest of the world (non moving stuff like ground will stop them because it's more &quot;permanent&quot; or something), will eventually come back into phase... useful as a weapon to temporarily &quot;displace&quot; defences, a defense to shift out factories and resource facilities, or as an attack to get behind enemy lines... also phasing projectiles can be shot &quot;through&quot; armor doing direct damage to the inards of units. 

*Atoomizer(Atomizer): Causes atoms to stop bonding together and into molecules and disapate. 

===Photonic=== 

*Solid Light: &quot;Highlighter&quot;: simply caused natural light to have more mass and begin pummeling a target. 

*Infra-red and Ultra-Violet &quot;Lazers&quot;: Invisible and passing through shields targetting normal lazers. 

===Heat/Cold=== 

*Flashpointer: Causes a target to uncontrollably absorb heat, freezing surrounding units and flash boiling even metal...


More on the Second and Third Tier weapons later. Stay tuned! Will you be the land grabbing EF or the hostile, alien Xenos?

---

NOTE BY GUESSMYNAME: This was orignally supposed to be a Remake of TA (Hence the title) but Zoombie managed to both change it completely and shanghi me into making it.

The orignial idea was to just make TA without any copyright-based issues. To be honest, i prefered the original idea, so Zoombie's version has about as much chance of getting off the ground as a very large rock, unless he plans to make it himself (which I doubt). I've chosen to help the SYs make new and improved unit models: http://taspring.clan-sy.com/phpbb/viewtopic.php?t=2063

Back to [[Mods]]

[[Category:Mods]]</text>
      <sha1>57slh9ig9193u8wruww2wjskcv2676z</sha1>
    </revision>
  </page>
  <page>
    <title>OTAism</title>
    <ns>0</ns>
    <id>3571</id>
    <redirect title="Gamedev:Glossary" />
    <revision>
      <id>27798</id>
      <timestamp>2013-10-27T18:15:38Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>redirect to glossary [previously wanted page]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="37">#REDIRECT [[Gamedev:Glossary#OTAism]]</text>
      <sha1>696aebxpn9yrfhg7x4x2isoxrxjd85v</sha1>
    </revision>
  </page>
  <page>
    <title>Obtaining The Source Code</title>
    <ns>0</ns>
    <id>2627</id>
    <redirect title="Template:Obtaining The Source Code" />
    <revision>
      <id>16092</id>
      <timestamp>2009-02-14T01:55:11Z</timestamp>
      <contributor>
        <username>Spliff</username>
        <id>2567</id>
      </contributor>
      <comment>[[Obtaining The Source Code]] moved to [[Template:Obtaining The Source Code]]: made into a template</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="48">#REDIRECT [[Template:Obtaining The Source Code]]</text>
      <sha1>9mmlt5hg0vqs1i7lhmunkh8krmxuf9r</sha1>
    </revision>
  </page>
  <page>
    <title>Official Map Making Guide</title>
    <ns>0</ns>
    <id>2391</id>
    <revision>
      <id>28901</id>
      <parentid>22414</parentid>
      <timestamp>2014-10-18T21:33:23Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>Tag for delete - &quot;Kick everything but the link&quot; - Picasso (and link is on MapConv page)</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2256">{{delete}}
{{deprecated}}

== how to start ==
this is basically for linux/unix but i'm sure it will be helpful for windows and other platforms as well. just have a look at the source!

== download+building the needed tools ==

you will find the needed MapConv binary in here:
 https://github.com/spring/MapConv

a simple &lt;b&gt;make&lt;/b&gt; in that directory will build it.

== using the tools ==
in the directory samples you'll find this:
===cat readme.txt  | sed -e 's/^/ /g'===
 These aren't necessarily *good* examples of how to use MapConv, or how to
 make a good Spring map.

 The .SMDs are modified from Small Divide, to boot.

 I haven't learned how to properly package a map for Spring; I just symlink
 the .smd, .smf and .smt into the maps directory.

 1: The sample map that seems to have come with mapconv, historically.
    Old file names:

      257f.bmp -&gt; feature.png
      257h.bmp -&gt; height.png
      257m.bmp -&gt; metal.png
      2kt.bmp  -&gt; texture.png

 2: A tiny map with one feature on it named myFeature, made for testing
    converting models to s3o.

    The metal patch under the feature is probably pointless. :)

=== example 1 ===
go to '''trunk/tools/MapConv/samples/1''' and type '''make''' which should build the sample 1 map. the output should be:
 -rw-r--r-- 1 joachim users    2091 Jul  9 18:17 test.smd
 -rw-r--r-- 1 joachim users  913468 Jul  9 18:23 test.smf
 -rw-r--r-- 1 joachim users    1392 Jul  9 18:23 test.smt
the smd file is a normal text file which has interesting map parameters. you'll find a complete documentation in this wiki somewhere (maybe in different tutorial).
the smf and smt file is your graphical representation of the sample 1 map.

=== testring the map ===
basically you could copy those three files test.smd, test.smf and test.smt into your maps directory which is ~/.spring/maps/ in case of linux and in windows it's the c:/programms/spring/.../maps directory.

if you want only one compressed file this is what can be done:
 mkdir -p map
 cp test.smd map/
 cp test.smt map/
 cp test.smf map/
 zip -r9 random.sdz map
 cp test.sdz ~/.spring/maps/

i think this code will be added to the sample 1 and sample 2 script but the original author didn't know that or didn't care when the document was written.</text>
      <sha1>fr7r8s733z12fhjc2aw3qz2fox62kpx</sha1>
    </revision>
  </page>
  <page>
    <title>On off scripts</title>
    <ns>0</ns>
    <id>3342</id>
    <revision>
      <id>26595</id>
      <parentid>26358</parentid>
      <timestamp>2013-03-18T15:41:56Z</timestamp>
      <contributor>
        <username>Emmanuel</username>
        <id>557</id>
      </contributor>
      <minor/>
      <comment>removed cob synthax</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="756">---'''know and change the on off button state'''---

defined in UnitDef by the tags:
&lt;code&gt;
ActivateWhenBuilt=false,
OnOffable=true,
&lt;/code&gt;

switched by player or by script action



*detect the switching of on/off button 
&lt;code&gt;
local starton startoff


function script.Activate ( ) 

starton=1 

end


function script.Deactivate ( ) 

startoff=1

end

&lt;/code&gt;


*know the state of on/off
&lt;code&gt;
local isactive

isactive==Spring.GetUnitIsActive(unitID)

&lt;/code&gt;


*change the on/off state(1=on,0=off)
&lt;code&gt;
local something

if something==true

then SetUnitValue (20,1) 

else SetUnitValue (20,0) 

end
&lt;/code&gt;
**note : the lua equivalent is maybe not possible


*[[SpringRtsTutorialAnimDef]] return to the list of animDef exemples

[[Category:Emmanuel]]</text>
      <sha1>0tg8jh3w30ba5crswzzfdcfxadnddmu</sha1>
    </revision>
  </page>
  <page>
    <title>OpenSUSE install</title>
    <ns>0</ns>
    <id>2628</id>
    <revision>
      <id>28632</id>
      <parentid>20966</parentid>
      <timestamp>2014-06-14T12:21:35Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="603">[[Linux|Linux Setup Guide]] &lt; {{FULLPAGENAME}}

__TOC__
[[Image:Distributions-opensuse_linux.pngâ€Ž]]

For packaging &lt;font color=&quot;#00DD00&quot;&gt;requests&lt;/font&gt; or &lt;font color=&quot;#FF0000&quot;&gt;complaints&lt;/font&gt;, please contact [[Linux:Packaging#OpenSUSE | the packagers]].

= OpenSUSE =
A list of various packages for openSUSE and other distributions related to spring are located [http://download.opensuse.org/repositories/home:/accAgon/ here].

There is also an [http://en.opensuse.org/Spring OpenSUSE Wiki for spring].

= See Also: =
* [[Finalizing_linux_install]]
* [[Troubleshooting_linux]]

[[Category: Linux]]</text>
      <sha1>hk78roi6ajbbqf00440l0y19k4ero17</sha1>
    </revision>
  </page>
  <page>
    <title>Ota2xta</title>
    <ns>0</ns>
    <id>1994</id>
    <revision>
      <id>20274</id>
      <parentid>20273</parentid>
      <timestamp>2010-10-15T15:06:57Z</timestamp>
      <contributor>
        <username>Babbles</username>
        <id>2232</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="12706">'''This page is currently being updated.'''

This page is an introduction for OTA players to the [http://springrts.com/wiki/XTA XTA] mod for the first time.

But does work as well for new and regulars from other mods.
                       
= [[Image:Xta_logo_white.jpg]] =
= The Energy build tree =

[[Image:ArmenergyBpath.jpg|thumb|300px|-&lt;span style=&quot;background:black; color:white; padding: 0em 1em;&quot;&gt; Arm energy build*tree &lt;/span&gt;]]


[[Image:Coreenergybpath.jpg|thumb|300px|-&lt;span style=&quot;background:black; color:white; padding: 0em 1em;&quot;&gt; Core energy build-tree &lt;/span&gt;]]


In few words, for OTA players, Do '''not''' start with the Heavy Fusion Reactor, use the '''Light Fusion''' -&gt; '''Cloakable Fusions''' -&gt;'''Heavy Fusion''' building path instead.


The XTA Energy tree differs from the OTA one in a few ways.

In short, several buildings and mobile units have been added &quot;in between&quot; the basic energy sources like solarpanels/windgenerators, and the more advanced Fusion power plant.


----

== Energy producing buildings and mobile units ==

=== The early Energy structures ===

The three basic Energy supplies have remained the same; Wind, Tidal and Solar power. However there are some differences:

'''The Solar Collector'''

* This no longer requires Energy to be constructed

Advantages:

* Is heavily armoured compared to its Wind counterpart
* Produces a stable economy giving +20 Energy no matter the map
* Does not chain explode meaning many can be placed safely in close proximity

Disadvantages:

* It is rather expensive in metal, 3x times the cost of a Wind Generator

Tips:

* Offers a quick solution for energy stall at mid Metal cost (145 Metal)
* Can be used as a barricade to protect Metal Extractors etc. from raids

'''Wind Generator'''

Advantages:

* Due to low metal cost, can be easily spammed
* Can be highly efficent depending on map

Disadvantages:

* Costs Energy meaning at times of Energy shortage difficult to build
* Is not stable meaning on some maps, at times make produce miminal Energy
* Easily killed and chain explodes if made near other Wind Generators

Tips:

* Best kept as far from front line as possible
* Use spacing when placing Wind Generators to avoid chain explosions

'''Tidal Generators'''

* There is an Underwater version available from a Construction Sub.

Advantages:

* Stable economy similar to Solar Collector however is map dependant.
* Underwater possibility allows for unknown Energy bases.
* Can be hard to destroy due to sea nature
* Only early water Energy source
* Does not cost a lot of Metal or Energy meaning it can be efficent

Disadvantages:

* Only available in Sea
* Some maps give low Tidal
* Chain explodes to an extent, but not as much as Wind Generators
* Not heavily armoured

Tips:

* Similar to Wind Generators, avoid conflict
* If Tidal is high and map has water, can be constructed and safe

'''Energy storage'''

* The cost has been increased, but the Storage capacity is now 30k and 32k for Underwater Storage
* This allows for easier economy management

Tips:

* Combine with Wind Generator farms in windy maps for better results
* If you intend on using your Commander it is heavily advised you build one
* Self Destruct is powerful and can be used in case of raid


----

=== Advanced Energy structures ===

At Tech Two, XTA introduces the major changes and advantages compared to OTA.


To start with, there is a &quot;midway&quot; Fusion energy plant.

'''The Light Fusions'''

* Both Core and Arm have their own versions of the lightest Fusion
* They provide the start up for an Advanced Economy
* Good for powering one Moho Metal Extractor

'''Core Light Fusion Power Plant''' 

Advantages:

* Can be built by any Land or Air Advanced Construction unit
* Produces a stable Energy output for early Tech


Disadvantages:

* It is not as efficent as its later counterparts
* Is not mobile

Tips:

* Use when you are constructing your first or second Moho Metal Extractor
* Like all Fusions, has high Self Destuct radius and can be used as bomb

'''Arm Light Mobile Fusion'''

* Arm do not get a structure but rather a unit
* This is built in the Advanced Vehicle Factory
* Gives roughly enough to power a Moho Metal Extractor

Advantages:

* Costs half of the energy cost of a core Lightfusion.
* Costs around half of the build*time cost of a core Lightfusion.
* It can be moved away from danager
* Is more efficent than Core counterpart

Disadvantages:

* Gives less energy (260) than Core counterpart
* Cannot be built with Kbots or Air
* Uses Vehicle Factory preventing its use during that time for combat units

Tips:

* Use when you are constructing your first or second Moho Metal Extractor
* Like all Fusions, has high Self Destuct radius and can be used as bomb, however due to mobilty can be directed at enemy
* Best to get a small combat force out before using

'''Light Carriers'''

* Both factions have these
* Only available in Advanced Shipyards
* Mobile like Arm's Mobile Fusion
* Gives roughly enough for Moho Extractor
* Also gives Advanced Radar and repairs planes
* Costs around 2,000 Metal and gives 370 Energy
* Takes 45 Energy to use Radar


Here is a [http://modinfo.adune.nl/index.php?act=editmultiple&amp;from=find&amp;MOD=xtapev955&amp;units=arm_mobile_fusion+core_light_fusion_power_plant reference for stats delta] between Arm and Core minis.

Another interesting [http://modinfo.adune.nl/index.php?act=editmultiple&amp;from=find&amp;MOD=xta_se_v066 historical comparative view both light fusions.]


'''Cloakable Fusions'''

* The Cloakable Fusions are best comparable to the OTA Heavy Fusions
* They have the possibility to both Cloak and Stealth (radar and LoS):
    * Arm takes 125 Energy to Cloak
    * Core takes 150 Energy to Cloak
    * Arm takes 500 Energy to Stealth (625 for Cloak and Stealth)
    * Core takes 550 Energy to Stealth (725 for Cloak and Stealth) 
* They give 800 Energy allowing for multiple Moho Extractors to run
* You should always Cloak to avoid detection
* Can be used as &quot;suprise bomb&quot; with Cloaking and Self Destruct

'''Heavy Fusion'''

* This is the last Fusion available and gives 3500 Energy
* Is the most efficent Energy source
* Is more expensive than OTA Fusions
* Creates huge explosion, potentially base crippling if destroyed
* Is a target for Bombers due to being unable to Cloak


Here is a [http://modinfo.adune.nl/index.php?act=editmultiple&amp;from=find&amp;MOD=xtapev955&amp;units=arm_cloakable_fusion_reactor+arm_fusion_reactor comparative view of the Cloakable and Heavy fusions.]

'''Underwater Fusion'''

* This is built only by Underwater Construction Submarines
* Gives slightly more Energy than Cloakable Fusion but costs more
* Only static Advanced Energy supply



----


''' Note '''

This is an attempt to explain:

*You must '''not''' build a Heavy Fusion power plant in XTA, like you used in OTA. Use a '''Cloakable Fusion''' for that purpose.

*There are several new power sources that fill the gap between 20 and 1000 E output OTA had.

*The Moho Metal extractors take 300 energy to work (extract metal) so don't build them if you don't have the energy, or will stall your hole production.

= Power consumption/costs =

The first thing you need to know, is, Moho Metal Extractors use 300 of energy to work.

This can be justified, because of metal is a quantitative scarce resource, and a moho metal extractor, effectively quintuples the extraction rate, such marvel must come at a cost. In this case the cost, apart of the unit and tech level itself, is the need of much more power to function.

The increase in the energy use is slightly higher than x^5, with x = energy drain of level 1 metal extractor.


== Units that need lots of energy to fire ==
&lt;br&gt;

Units in this list demand you keep an eye on your energy tab for using.
Its recommended to get an energy storage with them, but most of them are t2, so you probably have storage by that point, if you are not rushing.


*Commanders
:Disintegration gun, requires 350 in storage for using it.

*Arm Sniper

:Taking down laser towers and sniping important units costs 1000 energy per shot.
:2260 damage per shot. Build an energy storage.

*Arm Raven

:900 energy per shot. This means you need storage for sieging properly, as its not usual you have 80% of the energy tank full.
:This unit does around 2400 dps, but scattered/random non focusable damage.
:At times it seems its not worth its cost (half a golliat).
:Used properly, and covered, it will demolish any base, specially if you have 2.


*Arm Millenium

:The arm flagship, is now described as an &quot;artillery&quot; battle ship. 1000 e per shot.

*Arm Annihilator

:4000 energy per shot for this massive laser weapon.


*Core artillery

:High damage per shot, bertha class shell, 750 energy per shot. Slow moving unit.

*Core Warlord

:The core flagship, needs 1200 energy to fire its main gun (400 energy per second). The secondary lasers drains 200 energy per shot(200 energy per second).

*Core Goliath
: High damage shell, uses 800 energy per shot.


*Core Krogoth

:Needs 2000 energy to fire its blue laser from the head.

== Other units with high energy drain ==
&lt;br&gt;
In general, many other units need a good ammount of energy to work continiously.
Even when they dont require lots of energy to fire one shot, these units have high energy consumption, many times more than those big burst weapons.


*Core Sumo

: The heavy laser that it bears uses 192 energy per shot (274 per second).


*Arm Luger

:It used to cost nothing to fire this beautiful unit. Now with tweaked numbers, maintaining this thing firing costs '''MORE energy than a core artillery does''', core arty uses 112 energy per second, luger uses 143 energy per second.

= Basic xta description for ota players =


All level 1 units are worth building:
*Stumpies and Hammers are decent anti*MT choices.
*Jeffies are very dangerous, but they do cost nearly 200 metal.
*There is a level 1 gunship now.
*Freedom Fighters and Avengers have been given their sorely needed boost.

All level 2 units are worth building:
*Sumos have tons of armor, huge range, rapid fire rate and move at medium speed.
*Their 2.1k metal cost is well worth the unit you get in exchange.
*Goliaths are horrifying weapons: 23k armor (66% as much as an OTA Krogoth), missile*alike range, BB*class shell.
*But they don't quite come for free: 2.8k metal.
*Mavericks build much faster.
*Flakkers fire at ground targets, and their antiair potential has been improved.
*Warlords and Leviathans were massively boosted in terms of armor and firepower.
*Krogoths are totally krazy, man.

Nearly all defenses were revamped:
*MTs are nearly unchanged, except they are smaller so that you can fit more of them into the same space.
*LLTs have the range and power to be worth building.
*HLTs are a bit costly, but they can reach further than missiles.
*An excellent early creep weapon.
*Ambusher/Toaster are now buidable by level 1 Construction units and fulfill the same role as Guardian/Punisher in OTA.
*Guardian/Punisher are level 2 structures with much longer range, firepower and armor.
*Annihilators and Doomsday Machines have far higher range, more armor, and they don't blow up half your base when they die.
*With all the armor available in level 2 units, you will need them.
*BB has lost some accuracy, Intim lost some range. Both lost firepower but gained armor and area of effect.
*EMP/Neutron silos are short ranged, very fast building budget nukes.
*Antinuke silos build their missiles faster to accomodate for EMP/Neutron change.

Resource structures have changed less than other parts of the mod but the gameplay impact is very big:
*Metal Extractors self destruct instantly and without damaging anything around them.
*This makes upgrading to Moho Extractors less tedious.
*ARM has a Mobile Fusion, CORE has a stationary Light Fusion.
*Both cost 1500 metal and make about 300 energy: ideal to fuel your Moho economy.
*Moho Extractors are quite cheap (750 metal) and make lots of metal, but they drain 300 energy.
*You want to have at least a Geo or Mobile/Light Fusion before you build a Moho.
'''Cloakable Fusions have taken the place of OTA's regular ones.'''
*Regular Fusions now cost 10k metal. Their armor and energy production have been increased appropriately.
*This reduces the need for Fusion farms in very late game.

*Mine layers have several types of mines that are worth building and move faster.
*Energy and Metal Storage stores a lot more.
*Missile frigates have got firepower and hitpoints suitable for their cost.
*Mobile artillery and lugers are not inaccurate.
*Decoy commanders build as fast as real commanders.
*The build range on all con units has been increased.




[[Category:xta]]</text>
      <sha1>sih1l41yec9oymjgtyxrk78wain6vp3</sha1>
    </revision>
  </page>
  <page>
    <title>P.U.R.E.</title>
    <ns>0</ns>
    <id>2550</id>
    <revision>
      <id>24374</id>
      <parentid>19006</parentid>
      <timestamp>2012-05-02T08:46:15Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="106">{{deprecated|Please look at the [http://www.moddb.com/games/pure P.U.R.E. Homepage]}}

[[Category: Games]]</text>
      <sha1>jlvav7pm1l6k4itwozdyt6b06fxoapi</sha1>
    </revision>
  </page>
  <page>
    <title>PieceTrailCEGTag</title>
    <ns>0</ns>
    <id>2647</id>
    <revision>
      <id>28801</id>
      <parentid>27873</parentid>
      <timestamp>2014-10-05T16:39:30Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>uncategorise as CEG, delete?</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1177">{{deprecated}}
This is replaced by [[Gamedev:UnitDefs#pieceExplosionGenerators]]

'''Old way does not to work anymore.'''

Related thread with example and a way to easily convert from old to new system:
http://springrts.com/phpbb/viewtopic.php?f=14&amp;t=27554

----
original page below
----

From Kloot:

In case you missed the changelog entry, this can now be done using the new unit FBI tags pieceTrailCEGTag and pieceTrailCEGRange (where Tag is a string and Range is
an integer). If Tag is given, each piece of an exploding unit randomly loads one of &lt;pieceTrailCEGRange&gt; CEG's whose tag starts with the prefix &lt;pieceTrailCEGTag&gt; and
ends with a number in the range [0, pieceTrailCEGRange - 1]:&lt;br/&gt;

Code:&lt;br/&gt;
&lt;code&gt;
// CEG definitions&lt;br/&gt;
[Fire0]&lt;br/&gt;
...&lt;br/&gt;
[Fire1]&lt;br/&gt;
...&lt;br/&gt;
[Fire2]&lt;br/&gt;
...&lt;br/&gt;
[Fire3]&lt;br/&gt;
...&lt;br/&gt;

&lt;/code&gt;
&lt;br/&gt;
Code:&lt;br/&gt;
&lt;code&gt;&lt;br/&gt;
// unit FBI&lt;br/&gt;
pieceTrailCEGTag = &quot;Fire&quot;;&lt;br/&gt;
pieceTrailCEGRange = 4;&lt;br/&gt;
&lt;/code&gt;&lt;br/&gt;

If range is 1 (default) then you only need Fire0 defined,
otherwise all possible &lt;pieceTrailCEGRange&gt; tags are
expected to be valid.

Thread about this: [http://springrts.com/phpbb/viewtopic.php?f=9&amp;t=12879&amp;start=20]</text>
      <sha1>lejqwbkmbcsvvl3tzr8h0zvot84vauv</sha1>
    </revision>
  </page>
  <page>
    <title>Planned Delaying</title>
    <ns>0</ns>
    <id>1825</id>
    <revision>
      <id>19090</id>
      <parentid>11639</parentid>
      <timestamp>2010-03-13T20:37:04Z</timestamp>
      <contributor>
        <username>Koshi</username>
        <id>2371</id>
      </contributor>
      <comment>fix category</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="361">Planned Delaying is a strategy employed in multiplayer matches, almost exclusively.

If one simply devotes his or her forces to delaying the development of a foe - this as an overarcing primary goal - then in theory his or her allies can complete the game with their own personally determined strategy, most commonly expansion or rushing.
[[Category: Strategy]]</text>
      <sha1>9shjgq6byle56l8wahr5xxkesooy7u1</sha1>
    </revision>
  </page>
  <page>
    <title>Plasma</title>
    <ns>0</ns>
    <id>3239</id>
    <revision>
      <id>24090</id>
      <parentid>24082</parentid>
      <timestamp>2012-03-15T05:09:53Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="469">==Plasma==

The plasma system can be used to download a specific file by filename

http://zero-k.info/ContentService.asmx

Its a soap-service, the service-name for downloading is &quot;DownloadFile&quot;.

It returns a torrent file and a list of mirrors. This allows parallel downloads and pieces can be checked with the torrent file. A torrent file is a bencoded file.

An [http://zero-k.info/ResourceList.aspx admin-interface] is also available.

[[Category: Download Systems]]</text>
      <sha1>j9y3syu1qa9w2r2z7dh7nt4dvir288g</sha1>
    </revision>
  </page>
  <page>
    <title>Porcing</title>
    <ns>0</ns>
    <id>1343</id>
    <revision>
      <id>25269</id>
      <parentid>16833</parentid>
      <timestamp>2012-10-29T12:41:18Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>remove wanted link</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2552">'''Porcing''' (POR-king) is a strategy in which player focuses on building concentrated defenses in a relatively small area to a point where they are nearly impossible to penetrate. The term gets it's name from 'porcupine.' After this, player builds up a large attack force (often an uberweapon) while fending off incoming attacks using his defensive structures. When appropriately big force is accumulated, player tries to overwhelm and destroy enemy base in a single run. Sometimes the enemy is taken care of using a [[nuke strike|nuke]] or long range artillery i. e. Long range plasma cannon.

Porcing has good chances of success when:
* Sufficient resources to build a good base are available without expansion.
* [[Mass destruction weapon]]s are very expensive or hardly accessible
* Enemy is rushing
* [[Defense buildings]] are more cost effective than mobile combat units (which is usual)
* Defensive terrain restricting the ability of enemy units to move in and attack will make it easier to porc.

Porcing will fail when:
* The enemy can expand significantly and gain a significant resource advantage
* Mass destruction weapons are readily available or enemy uses [[Commander bombing|commbombing]]
* There are efficient artillery units to take out defenses from distance
* Enemy is [[swarming]]. Particularly dangerous when defenses comprise mostly of laser or other hit-or-miss weapons

'''Counter'''

To counter porcing, a player should try and expand across the map to gain as much of a resource advantage as possible.  Some raiding should be performed, but with care.  The aim is to discourage the opponent from expanding and restricting his territory and resources.  Frequent raiding will play into the porcer's hands by expending resources in futile attacks that are unlikely to do any damage.  Attacks from various directions should be attempted, as parts of the base may not be as well defended.

With a significant resource advantage, you can then beat the porcer to the punch; by accumulating a large attack force capable of overwhelming and destroying the porcer's defenses in one go.  Long range artillery and mass destruction weapons can be very effetive against a porcer.
 
If porcing is very effective, the game is considered off-balance and becomes boring, as each player prepares his attack for a very long time.

'''Mod Specific Notes'''

As a Strategy, Porcing is generally not effective in fast-paced or territory dependent mods.


''' [[Strategy_and_Tactics|&lt;- Back to Strategy and Tactics page]]'''

[[Category:Strategy]]</text>
      <sha1>h4t8xr1z7qx4u9f7k741acpoypbpcgf</sha1>
    </revision>
  </page>
  <page>
    <title>Ports</title>
    <ns>0</ns>
    <id>3867</id>
    <redirect title="Admin:Ports" />
    <revision>
      <id>31544</id>
      <timestamp>2021-04-20T12:33:22Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>Abma moved page [[Ports]] to [[Admin:Ports]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="25">#REDIRECT [[Admin:Ports]]</text>
      <sha1>sfsapuzdjbobe3t2plab7z9kklso5w6</sha1>
    </revision>
  </page>
  <page>
    <title>Pr-downloader</title>
    <ns>0</ns>
    <id>3233</id>
    <revision>
      <id>31063</id>
      <parentid>30482</parentid>
      <timestamp>2019-07-27T15:11:05Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1575">pr-downloader is a console cross-platform download tool for spring. it can download games and maps supporting currently all main download systems, including [[rapid]], [[plasma]] and [[upq]].


=download=
binaries of pr-downloader are included in the static builds of spring:
https://springrts.com/dl/buildbot/default/develop/

=compile=

== install depencies on debian ==

  sudo apt-get install -y gcc-4.7 g++-4.7 cmake libcurl4-openssl-dev libjsoncpp-dev \
  libboost-thread1.55-dev libboost-system1.55-dev libboost-filesystem1.55-dev spring libjsoncpp-dev \
  liblua5.1-0-dev libzip-dev zlib1g-dev

== run compile instructions ==

   cmake .
   make

=usage=
&lt;pre&gt;
pr-downloader 0.7-1-g4aeb062
Usage: pr-downloader 
--rapid-download &lt;name&gt;
--rapid-validate
--dump-sdp &lt;name&gt;
--plasma-download &lt;name&gt;
--http-download &lt;name&gt;
--http-search &lt;name&gt;
--download-map &lt;name&gt;
--download-game &lt;name&gt;
--download-engine &lt;name&gt;
--filesystem-writepath &lt;name&gt;
--help
--version
&lt;/pre&gt;

==download the latest version of zero-k==

&lt;code&gt;pr-downloader zk:stable&lt;/code&gt;


==download a map==

&lt;code&gt;pr-downloader DeltaSiegeDry&lt;/code&gt;

==download the engine==

&lt;code&gt;pr-downloader --download-engine {{StableEngineVersion}}&lt;/code&gt;

==PR-Downloader Frontend (Windows only)==

[https://drive.google.com/folderview?id=0B25BbZxm93S9T0syUlBwVUUyM2M&amp;usp=sharing Easy to use Batch UI for PR-Downloader (windows only)]

Must be extracted next to pr-downloader.exe

==Bugs==

Please report bugs to the [https://github.com/spring/pr-downloader/issues official bug tracker].

[[Category: Download_Systems]]</text>
      <sha1>ehgb565orcfm1sy4175fg20wmst54y5</sha1>
    </revision>
  </page>
  <page>
    <title>Press</title>
    <ns>0</ns>
    <id>2999</id>
    <revision>
      <id>30955</id>
      <parentid>30247</parentid>
      <timestamp>2019-02-18T06:10:26Z</timestamp>
      <contributor>
        <username>Hawara</username>
        <id>2945</id>
      </contributor>
      <comment>add steam games</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7155">This page lists urls of interesting spring related news/reviews and a bit info about its [[history]].


= History of Spring and its games in the press =

(newest comes first)

{|
!Date!!Magazine/Page!!Language!!Topic!!Title
|-
|&lt;h2&gt;2018&lt;/h2&gt;
|-
|2018.04.27||rockpapershotgun.com||English||Zero-K||[https://www.rockpapershotgun.com/2018/04/27/free-total-annihilation-like-rts-zero-k-lands-on-steam/ Free Total Annihilation-like RTS Zero-K lands on Steam]
|-
|&lt;h2&gt;2017&lt;/h2&gt;
|-
|2017.12.29||pcgamer.com||English||Zero-K||[https://www.pcgamer.com/the-best-free-games-of-2017/ The best free games of 2017]
|-
|&lt;h2&gt;2014&lt;/h2&gt;
|-
|2014.04.07||steampowered.com||English||Evolution RTS||[https://store.steampowered.com/news/12889/ Now Available on Steam - Evolution RTS]
|-
|&lt;h2&gt;2013&lt;/h2&gt;
|-
|2013.05.24||gamedev.net||English||Spring RTS 94.1||[http://www.gamedev.net/page/resources/_/technical/apis-and-tools/spring-rts-engineering-internals-r3143 Spring RTS Engineering Internals]
|-
|2013.03.11||gamersglobal.de||German||Spring RTS 93.0||[http://www.gamersglobal.de/news/65526/spring-rts-version-930-der-open-source-engine-erschienen Spring RTS: Version 93.0 der Open-Source-Engine erschienen]


|-
|&lt;h2&gt;2012&lt;/h2&gt;
|-
|2012.10.28||mbnet.fi||Finish||Kernel Panic||[http://www.mbnet.fi/artikkeli/ajankohtaiset/viikon_pelit/kernel_panic_1 Kernel Panic]
|-
|2012.03.28||sourceforge.net||English||Spring||[http://sourceforge.net/blog/podcast-springrt/ The Anvil Podcast: Spring RTS]
|-
|&lt;h2&gt;2011&lt;/h2&gt;
|-
|2011.12.29||jeuxlinux.fr||French||Spring 85.0||[http://www.jeuxlinux.fr/f1239-Spring_85.0.html Spring 85.0]
|-
|2011.12.27||textureszone.com||English||Spring||[http://www.textureszone.com/tutorials/4-applications-reviews/68-19-free-3d-game-engines-to-create-your-own-3d-games-.html 19 Free 3D Game Engines to create your own 3D Games !]
|-
|2011.12.20||blogspot.com||Spanish||Zero-K||[http://lacuevadellobo.blogspot.com/2011/12/jugando-zero-k.html Playing Zero-K]
|-
|2011.08.24||gamasutra.com||English||Spring||
[http://www.gamasutra.com/view/feature/6467/building_with_someone_elses_.php Building With Someone Else's Blocks: Going Open Source With Games]
|-
|2011.06.17||computerbild.de||German||Zero-K||[http://www.computerbild.de/download/Zero-K-6275447.html Zero-K] also on [http://www.computerbild.de/artikel/cb-Heft-Service-zum-Heft-Inhalte-der-aktuellen-Heft-CD_DVD-1313024.html CD/DVD]
|-
|2011.05.15||chip.de||German||Zero-K
|[http://www.chip.de/news/Zero-K-Mulitplayer-Strategiespiel-zum-Download_49005815.html Zero-K: Multiplayer-Strategiespiel zum Download]
|-
|2011.05.14||mbnet.fi||finnish||Kernel Panic
|{{forumlink|topic=26033|title=Kernel Panic on mbnet.fi game of the day}}
|-
|-
|2011.03.31||dedoimedo.com||english||spring 0.82.7||[http://www.dedoimedo.com/games/spring-rts.html Spring Engine - Ready for prime time?]

|-
|2011.03.29||wired.com||english||maps
|[http://www.wired.com/magazine/2011/03/ff_makestuff_materials/?pid=4938&amp;viewall=true Turning a Spring map into a wooden coffee table] {{forumlink|topic=17834|title=forum thread}}
|-
|2011.02.24||pro-linux.de||German||Evolution RTS
|[http://www.pro-linux.de/news/1/16729/futter-fuer-spieler-evolution-rts-und-gtc.html Futter für Spieler: Evolution RTS und GCT]
|-
|2011.01.06||makeuseof.com||English||spring 0.82.7
|[http://www.makeuseof.com/tag/spring-project-open-source-strategy-game-engine-impressive-selection-free-games/ The Spring Project - An Open Source Strategy Game Engine With An Impressive Selection of Free Games]
|-
!&lt;h2&gt;2010&lt;/h2&gt;
|-
|2010.11.30||atomicgamer.com||English||Gundam RTS v1.26 + spring 0.82.6.1
|[http://www.atomicgamer.com/files/88940/gundam-rts-v1-26-free-game Gundam RTS v1.26 Free Game]
|-
|2010.11||c't||German||Kernel Panic + Spring 0.82.6.1
|[http://www.heise.de/software/download/cdd_112_3 c't-Software-Kollektion], [http://www.heise.de/ct/inhalt/2010/24/130/ 1], [http://www.saschawillems.de/phase2/ctmag/ctmag02.jpg 2]
|-
|2010.08.17||winload.de||German||Spring 0.82.3
|[http://www.funload.de/ta-spring TA Spring]
|-
|2010.08.16||pchome.de||German||Spring 0.82.3
|[http://www.pchome.de/download/spring-rts_61167.html Spring RTS 0.82.3]
|-
|2010.08.14||chip.de||German||Spring 0.82.3
|[http://www.chip.de/downloads/Spring-RTS_21642345.html Spring RTS]
|-
|2010.07.09||chip||German||Spring
|[http://www.chip.de/downloads/CHIP-Online-Open-Source-Spiele-DVD_42337911.html CHIP Online Open-Source-Spiele-DVD]
|-
|2010.06.23||megagames.com||English||Gundam RTS 1.21
|[http://www.megagames.com/freeware/gundam-rts Gundam RTS]
|-
|2010.02.12||happyassassin.net||English||Spring 0.81.1
|[http://www.happyassassin.net/2010/02/12/from-the-freaking-awesome-department-3d-support-on-nouveau/ From the ‘freaking awesome’ department – 3D support on nouveau]
|-
!&lt;h2&gt;2009&lt;/h2&gt;
|-
|2009.10.24||rl-team.net||russian||Spring 0.80.5.1
|[http://rl-team.net/1146323396-spring-engine-v079.html Spring RTS Engine v0.80.5.1]
|-
|2009.10.16||techspikes.com||english||Spring
|[http://www.techspikes.com/2009/10/5-random-linux-games-worth-playing/ 5 random Linux games worth playing]
|-
!&lt;h2&gt;2008&lt;/h2&gt;
|-
|2008.07.01||gcup.ru||russian||Spring||[http://gcup.ru/load/igrovye_dvizhki/spring_engine/3-1-0-108 Spring Engine ]
|-
|-
|2008.06.18||mmft.org||English||Interview
|[http://www.mmft.org/node/25 Interview: Gundam RTS]
|-
|2008.02||PCGamer(UK)||English||Star Wars Spring
|[http://www.imperialwinter.com/images/Star%20Wars%20Spring%20article.jpg Scan ~9MB]
|-
!&lt;h2&gt;2007&lt;/h2&gt;
|-
|2007.01.27||netzwelt.de||German||TA Spring
|[http://www.netzwelt.de/news/75081-taktik-action-kostenlose-spiele-internet.html Taktik und Action: Kostenlose Spiele aus dem Internet]
|-
!&lt;h2&gt;2006&lt;/h2&gt;
|-
|2006.10.03||springrts.com||English||Spring 0.73b1
|[http://springrts.com/phpbb/viewtopic.php?f=2&amp;t=7373 New spring version, 0.73b1] (TA Spring renamed to Spring and it becomes an Engine!)
|-
|2006.05.11||rebell.at||English||Interview
|[http://rebell.at/artikel/ta-spring-interview-en TA Spring Interview (en)]
|-
|2006.02||pczone.co.uk||English||Star Wars Spring
|[http://www.imperialwinter.com/images/Star%20Wars%20Spring%20article.jpg Pagescan] ~9MB
|-
!&lt;h2&gt;2005&lt;/h2&gt;
|-
|2005.04.28||videogamer.com||English||spring 0.40b2
|[http://www.videogamer.com/pc/ta_spring/news/total_annihilation_gets_a_remake.html Total Annihilation gets a remake]
|-
|2005.04.28||eurogamer.net||English||spring 0.40b2
|[http://www.eurogamer.net/articles/news280405spring Free Total Annihiliation remake]
|-
|2005.04.27||slashdot.org||English||spring 0.40b2
|[http://games.slashdot.org/story/05/04/27/1644211/Total-Annihilation-Remake-Released Total Annihilation Remake Released]
|-
!&lt;h2&gt;2004&lt;/h2&gt;
|-
|2004.08.17||slashdot.org||English||announcement
|[http://games.slashdot.org/story/04/08/17/0334203/Hobbyist-Spring-RTS-Engine-Takes-Shape Hobbyist 'Spring' RTS Engine Takes Shape]
|-
|2004.06.28||tauniverse.com||English||forum thread
|[http://www.tauniverse.com/forum/showthread.php?s=&amp;postid=435289#post435289 Latest Info About TA2, TA's Sequels &amp; A Little History Of TA]
|}


[[Category: Spring]]

&lt;!--
see also:
http://springrts.com/phpbb/viewtopic.php?f=1&amp;t=24697

--&gt;


 __NOTOC__
__NOEDITSECTION__</text>
      <sha1>qh1wzzkycm2aj6t3nmyqz69wnkyk03j</sha1>
    </revision>
  </page>
  <page>
    <title>Printable Reference</title>
    <ns>0</ns>
    <id>2631</id>
    <revision>
      <id>26641</id>
      <parentid>26542</parentid>
      <timestamp>2013-03-20T14:03:39Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>recat</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="392">'''[[Using_Spring|&lt;--Back to Using Spring]]'''

==Printable Control Reference page==

You can print out [http://sparcman.net/Documents/Spring_Control_Reference.pdf this two page quick reference sheet] which covers all basic keyboard and mouse controls and many advanced controls. Not all controls are included as this is meant to be a quick reference for basic gameplay use.
[[Category:Help]]</text>
      <sha1>hm7r075z82ug7jlzn3oti6c85mh8tvt</sha1>
    </revision>
  </page>
  <page>
    <title>Production buildings</title>
    <ns>0</ns>
    <id>1552</id>
    <revision>
      <id>25265</id>
      <parentid>24351</parentid>
      <timestamp>2012-10-29T12:20:51Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>remove wanted links</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1482">{{Balanced_Annihilation_deprecated}}

[[category:Balanced Annihilation]]
== Unit Production ==

Production buildings build mobile units for your army.

=== Arm ===

* Land Buildings
** Level 1
*** [[Vehicles#Arm Vehicle Plant|Vehicle Plant]]
*** Air Base
*** KBot Lab
*** Hover Plant
** Level 2
*** [[Vehicles#Arm Advanced Vehicle Plant|Advanced Vehicle Plant]]
*** Advanced Air Base
*** Advanced KBot Lab
* Sea Buildings
** Level 1
*** Navy Base
*** Seaplane Factory
** Level 2
*** Advanced Navy Base

=== Core ===

* Land Buildings
** Level 1
*** [[Vehicles#Core Vehicle Plant|Vehicle Plant]]
*** Air Base
*** KBot Lab
*** Hover Plant
** Level 2
*** [[Vehicles#Core Advanced Vehicle Plant|Advanced Vehicle Plant]]
*** Advanced Air Base
*** Advanced KBot Lab
* Sea Buildings
** Level 1
*** Navy Base
*** Seaplane Factory
** Level 2
*** Advanced Navy Base

== Resource Production ==

As a sidenote, units with nanolathes (building units) can reclaim wrecks, features (such as trees and rocks) and units for resources also. Also, mobile units typically provide a small amount of energy.

As Arm and Core use the same types of structures, the followwing applies to both.

* Energy
** Level 1
*** Solar Panel
*** Geothermal Powerplant
*** Tidal Generator
** Level 2
*** Fusion Reactor
*** Cloakable Fusion Reactor
* Metal
** Level 1
*** Metal Extractor
*** Metal Maker
*** Underwater Metal Extractor
*** [[Floating Metal Maker]]
** Level 2
*** Moho Metal Extractor
*** Moho Metal Maker</text>
      <sha1>tdn6owf2x4r4gfuard1q3ki3yd4mdw1</sha1>
    </revision>
  </page>
  <page>
    <title>Programming Forum Resources</title>
    <ns>0</ns>
    <id>2549</id>
    <revision>
      <id>26690</id>
      <parentid>19133</parentid>
      <timestamp>2013-03-20T19:53:24Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>recat (worth keeping?)</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="430">There are several programming forums that can be used as resources and provide a second insight to a programming problem. The purpose of this page is to list those so that the developers of spring may use them if necessary.

*[http://www.comprog.co.nr/ Computer Programmer's Forum]
*[http://www.gamedev.net/ Game Development forum]
*[http://www.dreamincode.net/ Programming and Web Development Help forum]

[[Category:Engine Dev]]</text>
      <sha1>sz10zsmywq92w6ivh5jfobt7q2vfkos</sha1>
    </revision>
  </page>
  <page>
    <title>Project Ragnarok</title>
    <ns>0</ns>
    <id>1204</id>
    <revision>
      <id>21288</id>
      <parentid>20605</parentid>
      <timestamp>2011-02-24T16:57:29Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3688">{{Historical}}

Project Ragnarok will be a mod which uses no copyrighted material so it can be distributed for free and will not require you to own a copy of TA to play. This game will not just be a free rebuild of TA. 

==Features==
* 2 unique factions with completely unique gameplay styles (2 more will be added after the first version of the mod is released.) The two starting factions will be The United Tribes and The Machinations of Fenris.
* High poly models. This mod is designed to look beautiful and take advantage of the often under-utilized power of the spring engine. 2000+polys per unit on average, with an emphases on smaller, more tactical battles.
* New tree models and maps will be utilized for this mod. The model scale will be increased from the TA Spring standard: models, trees, and features will be up to 50% larger.
* Smaller numbers of units. The action will take place in small concentrated battles, as opposed to large, chaotic battles as seen in most other mods.

==Concept Art==
*http://rukktest.stfu.ca/Ragnarok.jpg
*http://rukktest.stfu.ca/WarriorCaste.jpg

==Factions==
===The United Tribes===
In the distant future of our planet, after wars have torn the world to pieces time after time, man had begun to digress to the social patterns of a simpler time, when mighty nations had no place on this world. The Tribes of Earth were formed by the Asatru Caste, the spiritual leaders of humanity, so that they could rule without fear of another world conflict destroying humanity forever. The loosely knit group of tribes cooexisted for hundreds of years before conflicts started once more, but this time from somewhere completely unexpected.

====Info====
The United Tribes will start the game with a Mobile Command Center, which is a massive flying complex which constructs units and structures. All United Tribes structures are mobile and can be moved by flying transport units.

===The Machinations of Fenris===
While the machines which came from the sky have no name for themselves, the Asatru have all but confirmed that they can only be the servants of Fenris himself, come to bring about Ragnarok and end all things. Indeed, the machines seem set on dismantling the world itself, harvesting all that lies before them for some unknown end. Their towering warmachines seem to touch the sky, and when they begin to sing, everything turns to ash.

====Info====
The Machinations main combat unit is called the Monolith, and it builds more of itself. It has been described as a [[Wikipedia:Clanking replicator|Von Neuman Machine]].

==Sample Units==
===Hel Caste Warrior===
The Hel Caste is the elite fighting force of the United Tribes. The Asatru have geneticly engineered the ideal warrior, creating men who stand over ten feet tall and have the strength of many. When enclosed in their powered body armor, they are a force of vast destruction, capable of jump-jetting for miles and raining death upon any they cross. Their legendary rapid-fire rockets can pepper an area with their deadly wrath.
===The Monolith===
This towering machination moves very slowely across the face of the world, singlehandedly laying waste to entire regions. Armed with an ungodly array of energy weapons, they can destroy most anything they can hit. They appear to have some sort of personnal shield generator which can stop projectiles dead in their tracks. They have even been known to reproduce themselves on the battlefield. Given their extraordinary strength, can some weakness be found in time to end their dread march before all is gone?

==Links==
Forum Thread: [http://taspring.clan-sy.com/phpbb/viewtopic.php?t=3540]


[[Mods|Back to Mods page]]


[[Category:Mods]]</text>
      <sha1>5kiqjkmly3ttl7o2fe5skncece40o6c</sha1>
    </revision>
  </page>
  <page>
    <title>Project proposals</title>
    <ns>0</ns>
    <id>3050</id>
    <revision>
      <id>29086</id>
      <parentid>28604</parentid>
      <timestamp>2015-01-10T16:24:09Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>ingame lobby was done by gajop</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6356">This page contains project proposals for [[Google Summer of Code]] and some general project ideas.

Below is a list of project ideas by the developers.

==GSoC project proposals==

=== Limited play area ===

Estimated difficulty: '''medium'''

Spring uses a finite-world model, where the scene has distinct bounds that all actors must obey.
Current Spring map formats have a hardcoded rectangle boundary geometry; they also provide very limited support for defining aesthetics of the surrounding environment outside the play area.

The new system should allow the map's developer to restrict the playable area to a subset of the global area, possibly adding support for multiple shapes and/or non rectangular shape restrictions.

The restriction shapes should be readable and changeable mid-game through the engine's Lua API. Proper handling of units which are suddenly off-map needs to be implemented.

'''Details:''' [[GSoC_Limited_play_area]]

'''Potential mentors:''' abma, midknight

=== Sensor handling redesign / simplification ===

Estimated difficulty: '''high'''

Currently there are a number of different &quot;sensor&quot; systems in the engine: LineOfSight, Radar, Sonar, and Seismic.
Some sensors can be jammed, some cannot. Some respect terrain, and some are always circular in coverage.

A new sensor system should integrate the current LOS, Radar, Sonar, Seismic systems into a streamlined codebase, to reduce amount of code in each implementation, and it should add additional features which would then be available for all types, while improving efficiency where possible.

Preferably all this should also be faster than the current system or a compelling argument/experiment should be made that shows there cannot be a faster system with the same features.

'''Details:''' [[GSoC_Sensor_handling_redesign]]

'''Potential mentors:''' abma, midnight

=== Engine level abstraction of resources ===

Estimated difficulty: '''medium to high'''

The Spring engine has its roots in an older Real-Time Strategy title, where only two resources were incorporated into the game design.
The current resource system is largely present in the codebase being hardcoded in a lot of critical places.

The old system needs to be replaced, the new one should be flexible enough to reproduce everything that the old system did and be able to imitate the behaviour of most common RTS game titles.

The engine's Lua API to fetch resources will have to be adapted to the new system, and new calls will have to be added to it.

'''Details:''' [[GSoC_Engine_resource_abstraction]]

'''Potential mentors:''' abma, midnight

=== Implementing a Scene Graph ===

Estimated difficulty: '''high'''

The Spring rendering engine uses a lot of FFP (fixed function pipeline) OpenGL functions. This model is becoming deprecated and is generally slower and less flexible than more modern approaches.

Under this proposal, the rendering code should get a complete overhaul and moved into a Scene Graph.
Allowing to replace the old code optionally with shader based approaches, including techniques as normal/relief mapping or 100% GPU based rendering of particles.

'''Details:''' [[GSoC_New_rendering_system]]

'''Potential mentors:''' abma, jK, midnight

=== New shadowmap techniques ===

Estimated difficulty: '''high'''

Currently Spring uses a single shadowtexture causing disturbed shadows when the viewrange increases.
The proposal is to implement one of the newer techniques like cascaded shadowmaps (CSM), percentage-closer filtering (PCF) or variance shadowmaps (VSM). Support for transparent shadows is appreciated.

'''Potential mentors:''' jK

=== Host change during a match ===

Estimated difficulty: '''medium to high'''

Spring's network model implies the existence of a server to host a battle. For various reasons the network link between host and clients can be interrupted. 
A system should be designed to allow manual and/or automatic switching of the game's host (possibly using an existing player after testing load handling capabilities).

'''Details:''' [[GSoC_Reconnect_Host_change]]

'''Potential mentors:''' abma, koshi

==General ideas for new developers==

These projects are interesting, but do not fit into the time schedule of GSoC.

=== validAIs.lua ===
Estimated difficulty: '''low to medium'''

Not all [[AI:Skirmish|AI-bots]] work with every game. If an AI is added by the player into a game that it does not support, the player experience is unpleasant: Best case the AI simply does nothing, worst case the game hangs or crashes.
This has been a common problem since years.

The solution could be a file included into games that contains a list of AIs known to support it. The lobby clients would read this file and block the user from adding unsupport AIs. This kind of whitelisting is already implemented for maps as [[Validmaps.lua]], so it would be nice and consistent to follow the same logic.



http://springrts.com/mantis/view.php?id=2923

=== In source Lua-API documentation ===

Estimated difficulty: '''low to medium'''

write a tool, that creates html from in-source comments to document the lua api. For Example:
&lt;code&gt;&lt;pre&gt;
/*-
Prints a message
@param msg
*/
static int Echo(lua_State* L);

&lt;/pre&gt;&lt;/code&gt;

this should create the function in the lua-api-docs

Spring.Echo

(this is just a suggestion)

see also [http://springrts.com/phpbb/viewtopic.php?f=73&amp;t=27771 meeting minutes] (possible solution for in-source lua documentation)



=== Port spring to ARM/Android ===

Estimated difficulty: '''medium to very high'''

Spring currently seems to not work on the ARM architecture as streflop currently doesn't support ARM. Also there will be possible compile/linker/sync errors that have to be fixed first to make it run flawlessly.
Also its not clear if its possible if spring can be made syncing to x86 platforms because on some ARM processors no FPU available.

For a possible starting point see the [[Spring_on_ARM|Spring on ARM]] page.


=== 3D map format ===

Estimated difficulty: '''very high'''

The current map format is 2d only (with heightmaps), adding a real 3d map format would allow real bridges or some fancy maps.

[http://code.google.com/p/recastnavigation/ Recast navigation] could be used as pathfinder. This project is really difficult, as many / most parts of the engine have to be changed.

[[Category:GSoC]]</text>
      <sha1>ibuld3ahkzbabn088qr3st5gvgr5yn3</sha1>
    </revision>
  </page>
  <page>
    <title>Projectiles.txt</title>
    <ns>0</ns>
    <id>1502</id>
    <revision>
      <id>26807</id>
      <parentid>22430</parentid>
      <timestamp>2013-03-21T10:59:11Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>recat</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7446">&lt;pre&gt;
Class: CSimpleGroundFlash.  Scriptname: CSimpleGroundFlash
	sizeGrowth: float
	ttl: int
	colorMap: CColorMap*
	texture: GroundFXTexture*
	size: float
	pos: float3
	useAirLos: bool
	alwaysVisible: bool


Class: CSeismicGroundFlash.  Scriptname: CSeismicGroundFlash
	size: float
	pos: float3
	useAirLos: bool
	alwaysVisible: bool


Class: CStandardGroundFlash.  Scriptname: CStandardGroundFlash
	flashSize: float
	circleAlpha: float
	flashAlpha: float
	circleGrowth: float
	color: uchar[3]
	size: float
	pos: float3
	useAirLos: bool
	alwaysVisible: bool


Class: CGroundFlash.  Scriptname: CGroundFlash
	size: float
	pos: float3
	useAirLos: bool
	alwaysVisible: bool


Class: CProjectile.  Scriptname: CProjectile
	speed: float3
	pos: float3
	useAirLos: bool
	alwaysVisible: bool


Class: CPieceProjectile.  Scriptname: CPieceProjectile
	speed: float3
	pos: float3
	useAirLos: bool
	alwaysVisible: bool


Class: CFlareProjectile.  Scriptname: CFlareProjectile
	speed: float3
	pos: float3
	useAirLos: bool
	alwaysVisible: bool


Class: CExpGenSpawner.  Scriptname: CExpGenSpawner
	delay: int
	dir: float3
	damage: float
	explosionGenerator: CExplosionGenerator*
	speed: float3
	pos: float3
	useAirLos: bool
	alwaysVisible: bool


Class: CFireProjectile.  Scriptname: CFireProjectile
	speed: float3
	pos: float3
	useAirLos: bool
	alwaysVisible: bool


Class: CTorpedoProjectile.  Scriptname: CTorpedoProjectile
	speed: float3
	pos: float3
	useAirLos: bool
	alwaysVisible: bool


Class: CEmgProjectile.  Scriptname: CEmgProjectile
	speed: float3
	pos: float3
	useAirLos: bool
	alwaysVisible: bool


Class: CBeamLaserProjectile.  Scriptname: CBeamLaserProjectile
	speed: float3
	pos: float3
	useAirLos: bool
	alwaysVisible: bool


Class: CFireBallProjectile.  Scriptname: CFireBallProjectile
	speed: float3
	pos: float3
	useAirLos: bool
	alwaysVisible: bool


Class: CLightningProjectile.  Scriptname: CLightningProjectile
	speed: float3
	pos: float3
	useAirLos: bool
	alwaysVisible: bool


Class: CStarburstProjectile.  Scriptname: CStarburstProjectile
	speed: float3
	pos: float3
	useAirLos: bool
	alwaysVisible: bool


Class: CFlameProjectile.  Scriptname: CFlameProjectile
	speed: float3
	pos: float3
	useAirLos: bool
	alwaysVisible: bool


Class: CWeaponProjectile.  Scriptname: CWeaponProjectile
	speed: float3
	pos: float3
	useAirLos: bool
	alwaysVisible: bool


Class: CMissileProjectile.  Scriptname: CMissileProjectile
	speed: float3
	pos: float3
	useAirLos: bool
	alwaysVisible: bool


Class: CLargeBeamLaserProjectile.  Scriptname: CLargeBeamLaserProjectile
	speed: float3
	pos: float3
	useAirLos: bool
	alwaysVisible: bool


Class: CExplosiveProjectile.  Scriptname: CExplosiveProjectile
	speed: float3
	pos: float3
	useAirLos: bool
	alwaysVisible: bool


Class: CLaserProjectile.  Scriptname: CLaserProjectile
	speed: float3
	pos: float3
	useAirLos: bool
	alwaysVisible: bool


Class: CBitmapMuzzleFlame.  Scriptname: CBitmapMuzzleFlame
	sideTexture: AtlasedTexture*
	frontTexture: AtlasedTexture*
	dir: float3
	colorMap: CColorMap*
	size: float
	length: float
	sizeGrowth: float
	ttl: int
	frontOffset: float
	speed: float3
	pos: float3
	useAirLos: bool
	alwaysVisible: bool


Class: CGenericParticleProjectile.  Scriptname: CGenericParticleProjectile
	speed: float3
	pos: float3
	useAirLos: bool
	alwaysVisible: bool


Class: CSmokeTrailProjectile.  Scriptname: CSmokeTrailProjectile
	speed: float3
	pos: float3
	useAirLos: bool
	alwaysVisible: bool


Class: CMuzzleFlame.  Scriptname: CMuzzleFlame
	speed: float3
	pos: float3
	useAirLos: bool
	alwaysVisible: bool


Class: CGeoThermSmokeProjectile.  Scriptname: CGeoThermSmokeProjectile
	color: float
	size: float
	startSize: float
	sizeExpansion: float
	ageSpeed: float
	speed: float3
	pos: float3
	useAirLos: bool
	alwaysVisible: bool


Class: CTracerProjectile.  Scriptname: CTracerProjectile
	length: float
	speed: float3
	pos: float3
	useAirLos: bool
	alwaysVisible: bool


Class: CDirtProjectile.  Scriptname: CDirtProjectile
	alpha: float
	alphaFalloff: float
	size: float
	sizeExpansion: float
	slowdown: float
	color: float3
	texture: AtlasedTexture*
	speed: float3
	pos: float3
	useAirLos: bool
	alwaysVisible: bool


Class: CSphereParticleSpawner.  Scriptname: CSphereParticleSpawner
	emitVector: float3
	emitMul: float3
	gravity: float3
	colorMap: CColorMap*
	texture: AtlasedTexture*
	airdrag: float
	particleLife: float
	particleLifeSpread: float
	numParticles: int
	particleSpeed: float
	particleSpeedSpread: float
	particleSize: float
	particleSizeSpread: float
	emitRot: float
	emitRotSpread: float
	directional: bool
	sizeGrowth: float
	sizeMod: float
	speed: float3
	pos: float3
	useAirLos: bool
	alwaysVisible: bool


Class: CSimpleParticleSystem.  Scriptname: CSimpleParticleSystem
	emitVector: float3
	emitMul: float3
	gravity: float3
	colorMap: CColorMap*
	texture: AtlasedTexture*
	airdrag: float
	particleLife: float
	particleLifeSpread: float
	numParticles: int
	particleSpeed: float
	particleSpeedSpread: float
	particleSize: float
	particleSizeSpread: float
	emitRot: float
	emitRotSpread: float
	directional: bool
	sizeGrowth: float
	sizeMod: float
	speed: float3
	pos: float3
	useAirLos: bool
	alwaysVisible: bool


Class: CExploSpikeProjectile.  Scriptname: CExploSpikeProjectile
	length: float
	width: float
	alpha: float
	alphaDecay: float
	lengthGrowth: float
	dir: float3
	color: float3
	speed: float3
	pos: float3
	useAirLos: bool
	alwaysVisible: bool


Class: CWreckProjectile.  Scriptname: CWreckProjectile
	speed: float3
	pos: float3
	useAirLos: bool
	alwaysVisible: bool


Class: CSmokeProjectile2.  Scriptname: CSmokeProjectile2
	color: float
	ageSpeed: float
	size: float
	startSize: float
	sizeExpansion: float
	wantedPos: float3
	glowFalloff: float
	speed: float3
	pos: float3
	useAirLos: bool
	alwaysVisible: bool


Class: CWakeProjectile.  Scriptname: CWakeProjectile
	speed: float3
	pos: float3
	useAirLos: bool
	alwaysVisible: bool


Class: CHeatCloudProjectile.  Scriptname: CHeatCloudProjectile
	heat: float
	maxheat: float
	heatFalloff: float
	size: float
	sizeGrowth: float
	sizemod: float
	sizemodmod: float
	texture: AtlasedTexture*
	speed: float3
	pos: float3
	useAirLos: bool
	alwaysVisible: bool


Class: CSpherePartSpawner.  Scriptname: CSpherePartSpawner
	alpha: float
	ttl: int
	expansionSpeed: float
	color: float3
	speed: float3
	pos: float3
	useAirLos: bool
	alwaysVisible: bool


Class: CSpherePartProjectile.  Scriptname: CSpherePartProjectile
	speed: float3
	pos: float3
	useAirLos: bool
	alwaysVisible: bool


Class: CRepulseGfx.  Scriptname: CRepulseGfx
	speed: float3
	pos: float3
	useAirLos: bool
	alwaysVisible: bool


Class: CGfxProjectile.  Scriptname: CGfxProjectile
	creationTime: int
	lifeTime: int
	color: uchar[4]
	speed: float3
	pos: float3
	useAirLos: bool
	alwaysVisible: bool


Class: CSmokeProjectile.  Scriptname: CSmokeProjectile
	color: float
	size: float
	startSize: float
	sizeExpansion: float
	ageSpeed: float
	speed: float3
	pos: float3
	useAirLos: bool
	alwaysVisible: bool


Class: CBubbleProjectile.  Scriptname: CBubbleProjectile
	speed: float3
	pos: float3
	useAirLos: bool
	alwaysVisible: bool


Class: CGeoSquareProjectile.  Scriptname: CGeoSquareProjectile
	speed: float3
	pos: float3
	useAirLos: bool
	alwaysVisible: bool


Class: CShieldPartProjectile.  Scriptname: CShieldPartProjectile
	speed: float3
	pos: float3
	useAirLos: bool
	alwaysVisible: bool

&lt;/pre&gt;
[[Category: CEG]]</text>
      <sha1>9hpedq8dvqr2wrc0ochz6d7bk27rnz8</sha1>
    </revision>
  </page>
  <page>
    <title>QTPFS</title>
    <ns>0</ns>
    <id>3575</id>
    <redirect title="Gamedev:Glossary" />
    <revision>
      <id>27811</id>
      <timestamp>2013-10-27T19:20:05Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>redirect to glossary</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="36">#REDIRECT [[Gamedev:Glossary#QTPFS]]</text>
      <sha1>63edhztt0bsbl6zamu7bys85qo9tc2a</sha1>
    </revision>
  </page>
  <page>
    <title>Radian</title>
    <ns>0</ns>
    <id>3315</id>
    <redirect title="Gamedev:UnitsOfMeasurement" />
    <revision>
      <id>27538</id>
      <parentid>25307</parentid>
      <timestamp>2013-08-19T17:11:38Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>double redirect</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="48">#REDIRECT [[Gamedev:UnitsOfMeasurement#Angular]]</text>
      <sha1>ejlvf4m3wzc648vzcaf70j7s2l2hnro</sha1>
    </revision>
  </page>
  <page>
    <title>Raiding</title>
    <ns>0</ns>
    <id>1366</id>
    <revision>
      <id>11183</id>
      <parentid>6151</parentid>
      <timestamp>2006-09-22T17:28:59Z</timestamp>
      <contributor>
        <username>Redstar</username>
        <id>6</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3430">A raid is normally a small to medium fast attack.  The aim of a raid is not to kill or cripple an opponent, but to sap his strength, and to distract him from building his economy.

Raiding is typically done with smaller groups of fast units, with at least moderate damage potential.  The idea is to use speed and surprise to avoid defences and destroy some economic buildings.  The most popular target for a raid is the metal extractor as they are easy to kill, and metal is generally the critical resource.  Windmills are also easy to kill, and if enough are destroyed, the resulting energy stall will hurt the defending player badly. If the enemy's built his windmills too close together, they can also chain-explode, seriously damaging his economy. Construction units and factories are also worthwhile targets, although generally a raid will only take out a factory if the defence is very slow to respond.

As the game progresses, raiding generally becomes pointless due to the accumulation of defensive structures and gradual closing-off of open approaches.  A raid against a well defended position will only waste resources and give the opponent metal wrecks to reclaim.  However certain specialist units such as hovercraft, amphibious units, stealth units, and all terrain assault kbots may be able to cover difficult terrain or slip under radar cover, allowing a surprise raid from an unexpected direction much later in the game.

Raiding should be used with care against a porcing opponent. You should raid just enough to encourage the porcer to stay behind his defenses, allowing you to spread across the map and take control of as much resource as possible.

In many TA based-mods, air units are not normally built early due to their high cost but are very effective against ground units that are not designed for anti-air fire.  As a result there is often an opportunity for an air raid in the mid game, after ground defences have become established, but before anti air defence is solidly established. This means that it's usually a good idea to start with a Vehicle or KBot factory (depending on how flat/rough the terrain is and how much metal you can get your hands on) and put down an air factory before or just after your first L2 factory. This can also help protect you against air raids, as the L1 fighters in most TA-based mods can quickly destroy L1 bombers and gunships.

Good radar coverage is vital for a successful raid. Without it, you will likely stumble into heavy defences or concentrations of units. With it, you can steer your units away from large concentrations of enemies and pick off outlying structures and units. Early on, the only real form of mobile radar in most TA-based mods are the easily-destroyed recon planes, though recon cars like the Jeffy/Weasel and recon KBots like the Flea can fill a similar role.

Good radar coverage is also important for defending against raids.  Radar will usually give early warning of an approaching raid, allowing you to mobilise defensive forces to respond.  Light defensive structures, like LLTs or mines, are also useful. They don't necessarily need to be heavy enough to stop an attack dead in its tracks. It's enough to slow an attacker down, damage his units, and tip the odds nicely in your favour when your combat units arrive to engage the invaders.



''' [[Strategy_and_Tactics|&lt;- Back to Strategy and Tactics page]]'''

[[Category:Strategy]]</text>
      <sha1>0tpdpbqkf72xheov8z36ef5ihl3w1b9</sha1>
    </revision>
  </page>
  <page>
    <title>Rapid</title>
    <ns>0</ns>
    <id>3238</id>
    <revision>
      <id>31627</id>
      <parentid>31626</parentid>
      <timestamp>2021-09-19T18:54:30Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>/* list of rapid repositories: repos.gz */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4473">&quot;Rapid&quot; is a concept for storing &quot;archives&quot; for spring. It consists of multiple indexes:

* main index of all known rapid repos: https://repos.springrts.com/repos.gz
* index of all known archives in a repo, i.e.: https://packages.springrts.com/versions.gz, https://repos.springrts.com/zk/versions.gz, ...
* index of a single game/map/content archive: .sdp which lists all files inside the &quot;pool&quot; directory

spring can directly read .sdp and the pool directory which contains the real files of an archive. multiple .sdp can share the same files in a pool which makes &quot;rapid&quot; so efficient in storage.

Serverside [[RapidTools]] are used to manage the repository of all games.


=Using rapid as Gamedev=
If a Gamedev wants to use rapid, he needs to use a git repository for his game where the game archive is in the .sdd format stored:

The git repository needs to contains a folder which is in the structre of a .sdd. in modinfo.lua version has to be
&lt;pre&gt;
version = '$VERSION',
&lt;/pre&gt;
$VERSION later on will be replaced by the git commit number or, when a release is made, the version number of the release. modinfo.lua needs to be lowercase!

==Creating a release==
When the git repository is connected to rapid, a release can be made by making a git-commit with a commit message in the format:
&lt;pre&gt;
VERSION{x.xx}
&lt;/pre&gt;

Where everything in the brackets will replace $VERSION in modinfo.lua.

This will create a tag :stable for this commit and create an archive at https://''gamename''.repo.springrts.com/builds/, i.e. https://i18n.repo.springrts.com/builds/ which can be distributed/uploaded to different sites if needed.
It is also automatically published to upq at https://springfiles.springrts.com/ which all current download systems have access to; you can validate what happened there, too.

===Adding your game to the rapid download system===
Please create a new issue at https://github.com/spring/RapidTools/issues and report the location of your git repository and the wanted rapid tag.

To download you can use one of the [[Rapid_Tags]].

=Files structures=

file structure of rapid is:

&lt;pre&gt;
/versions.gz
/repos.gz
/packages/
/pool/
&lt;/pre&gt;

==list of rapid repositories: repos.gz==
gziped text file which has a list of all rapid repositories.

&lt;pre&gt;
main,https://packages.springrts.com,,
&lt;/pre&gt;
for springrts it is:
https://repos.springrts.com/repos.gz

==list of archives on a mirror: versions.gz==
gziped text file which has a list of all sdp archives in this repository.
&lt;pre&gt;
ba-tronic:version:7.12-tronic1,baafb4fb215c60873e7d10e7ec600dc5,Balanced Annihilation V7.12,Balanced Annihilation V7.12-tronic1
&lt;/pre&gt;

the md5 hash is the filename of the sdp of the archive. so for example:

https://packages.springrts.com/packages/baafb4fb215c60873e7d10e7ec600dc5.sdp

==folder with index archives: /packages/==
this folder contains all available packages (~games) in the rapid file structure.

==an index archive: .sdp==
gziped index file with a list of all files in this archive. this is for example a game.

Format of the .sdp (index) files:
* There is one entry per indexed file. These are repeated until EOF.
* The format of one such entry:
** 1 byte real file name length
** real file name
** 16 byte MD5 digest
** 4 byte CRC32
** 4 byte file size
* The 16 bytes MD5 digest is the reference to the 32 Hex char file name
* under pool, which contains the content.

filename of the .sdp is:

  md5(md5(filename1) + md5(content of file1) + md5(filename2) + md5(content of file2) ...)


see also void PoolArchiveT::load(DigestT const &amp; Digest):

https://github.com/spring/RapidTools/blob/master/Rapid/PoolArchive.cpp#L35

or

https://github.com/spring/spring/blob/master/rts/System/FileSystem/Archives/PoolArchive.h

==the pool folder==
this folder contains all files referenced by the .sdp's in gzipped form. the filename is the md5 of the file. this way files which are used by multiple archives can be shared.

The pool system uses two directories, to be found in the root of a spring
data directory, pool and packages. They may look as follows:
&lt;pre&gt;
/pool/00/00756ec29fe8fc9d3da9b711e76bc9.gz
/pool/00/3427d26f419dabe74eaf7b865407b8.gz
...
/pool/01/
/pool/02/
...
/pool/ff/
&lt;/pre&gt;

basicly its in this form:

&lt;pre&gt;
/pool/&lt;first 2 hex chars&gt;/&lt;last 30 hex chars&gt;.gz
&lt;/pre&gt;

The splitting up into the 00 till ff sub-dirs is only to prevent possible
problems with file-system limits for maximum files per directory (eg. FAT32).

[[Category: Download Systems]]</text>
      <sha1>4gpvjzvaixlbhclprqn1lflsht81eq7</sha1>
    </revision>
  </page>
  <page>
    <title>RapidTools</title>
    <ns>0</ns>
    <id>3626</id>
    <revision>
      <id>30811</id>
      <parentid>30810</parentid>
      <timestamp>2018-11-19T00:58:34Z</timestamp>
      <contributor>
        <username>Gajop</username>
        <id>2804</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1945">RapidTools are for managing a [[rapid]] game/archive repository.

Made by det

=Source=
https://github.com/spring/pr-downloader

=Bugs=
https://github.com/spring/pr-downloader/issues


=Compile=
to compile it on ubuntu:
&lt;pre&gt;
git clone https://github.com/spring/pr-downloader.git --recursive
sudo apt-get install liblua5.1-0-dev libzip-dev zlib1g-dev cmake libssl-dev
cmake .
make
&lt;/pre&gt;

Additional setup instructions: https://springrts.com/wiki/Admin:Rapid

=Tool description=
==AddZip==

takes a .zip and adds it to the repo with user specified tags:

Usage:
&lt;pre&gt;
AddZip &lt;Store Path&gt; &lt;Zip Path&gt; [Tag1] ...
&lt;/pre&gt;

==BuildGit==

adds a git path to the repo and generates the tags automatically from the commit message, it also optimizes for incremental updates

Usage:
&lt;pre&gt;
BuildGit &lt;Git Path&gt; &lt;Mod Root&gt; &lt;Modinfo&gt; &lt;Store Path&gt; &lt;Git Hash&gt; &lt;Prefix&gt;
&lt;/pre&gt;

==Streamer==

is a cgi program to serve some specific files of a .sdp. This is the fastest and official way to fetch a rapid archive.

at client side you have to http POST:
http://packages.springrts.com/streamer.cgi?&lt;hash of sdp&gt;

post data is binary 0/1 if a file of the specified sdp is needed or not.

streamer.cgi then returns all files in a single stream in the same order than in the sdp. it has to be in the root of a [[rapid]] file structure.

&lt;pre&gt;
Usage: ./Streamer
Expects environment variables DOCUMENT_ROOT and QUERY_STRING
Expects a gziped bitarray as stdin
&lt;/pre&gt;

for details see the source-code:
https://github.com/spring/pr-downloader/blob/master/src/Streamer.cpp#L94

==MakeZip==

can create a zip from a .sdp

&lt;pre&gt;
MakeZip ~/.spring ba:stable ba.zip
&lt;/pre&gt;

===Notes===

If you get this error:
&lt;pre&gt;
Error on unknown tag lookup
&lt;/pre&gt;

MakeZip doesn't find the tag specified in (for example) ~/.spring/versions.gz. To fix, copy the required versions.gz:

&lt;pre&gt;
cp ~/.spring/rapid/packages.springrts.com/versions.gz ~/.spring/
&lt;/pre&gt;

[[Category: Download Systems]]</text>
      <sha1>cyqo2732c2pznqvtypdxxz4qi912ci2</sha1>
    </revision>
  </page>
  <page>
    <title>Rapid Tags</title>
    <ns>0</ns>
    <id>3440</id>
    <revision>
      <id>31831</id>
      <parentid>31766</parentid>
      <timestamp>2022-07-21T16:26:12Z</timestamp>
      <contributor>
        <username>Raaar</username>
        <id>2848</id>
      </contributor>
      <comment>added metalfactions:stable</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1938">Most of these tags are automaticly updated from [[Gamedev:PublicRepos]].

{| class=&quot;wikitable sortable&quot; Width=&quot;100%&quot;
|-
! Tag !! Name
|-
| ba-tronic:latest || Balanced Annihilation Tronic
|-
| ba:stable || Balanced Annihilation
|-
| ba:test || Balanced Annihilation
|-
| bac:stable || BA Chicken Defense
|-
| bac:test || BA Chicken Defense
|-
| bar:test || Balanced Annihilation Reloaded
|-
| brickcraft:epenis || BrickCraft epenis
|-
| brickcraft:latest || BrickCraft 
|-
| btl:latest || BattleTech: Legacy
|-
| ct:stable || Conflict Terra
|-
| ct:test || Conflict Terra
|-
| ea:latest || Eternal Annihilation
|-
| evo:stable || Evolution RTS
|-
| evo:test || Evolution RTS
|-
| ft:test || Frontier
|-
| jw:test || Journeywar
|-
| kp:latest || Kernel Panic
|-
| metalfactions:stable || Metal Factions
|-
| micromodules:latest || Micro Modules
|-
| mosaic:stable || MOSAIC
|-
| mw:latest || Micronwars
|-
| nota:latest || NOTA
|-
| nota:stable || NOTA
|-
| operationx:latest || Special BA
|-
| pa:latest || Progressive Annihilation
|-
| ra:latest || Research Annihilation Concept
|-
| s44-deployment:test || Spring: 1944
|-
| s44:latest || Spring: 1944
|-
| s44:stable || Spring: 1944
|-
| sa:latest || Supreme Annihilation
|-
| spring-features:stable || Spring Features
|-
| specialba:latest || Special BA
|-
| springtanks:latest || Spring Tanks
|-
| staticfriction:stable || Static Friction
|-
| staticfriction:testing || Static Friction
|-
| ta_factions:latest || TA : Factions
|-
| tc:stable || The Cursed
|-
| tc:test || The Cursed
|-
| void:latest || Void
|-
| xta:fixed || XTA
|-
| xta:latest || XTA
|-
| xta:test || XTA
|-
| xtar:latest || XTAR
|-
| zk:stable || Zero-K
|-
| zk:test || Zero-K
|-
| zkc:latest || Zero-K
|-
| zkdota:stable || Zero-K DOTA
|-
| zkdota:test || Zero-K DOTA
|-
| zkr:alpha || Zero-K Raid
|-
| zkr:latest || Zero-K Raid
|-
| zkr:test || Zero-K Raid
|}

[[Category:Download Systems]]
[[Category:Game Dev]]</text>
      <sha1>90hg48dc89jnai5gzbu5lryu2kgtbrg</sha1>
    </revision>
  </page>
  <page>
    <title>Read Me First</title>
    <ns>0</ns>
    <id>1119</id>
    <revision>
      <id>31615</id>
      <parentid>31456</parentid>
      <timestamp>2021-08-17T17:03:17Z</timestamp>
      <contributor>
        <username>Raaar</username>
        <id>2848</id>
      </contributor>
      <minor/>
      <comment>/* Getting Started */ fixed springlobby web site link</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2827">__NOTOC__= Playing =
'''Spring is an engine!''' It can play many different games and maps. To play, you need at least one [[Games|Game]] and [[Maps|Map]]!

==Getting Started==

To get started with Spring, download [https://springlobby.springrts.com/ SpringLobby], which you can use to play, chat and download games and maps.

==Downloading Games/Maps==

'''To download [[Games|Games]] (or [[Maps|Maps]]), use your lobby to join an online battle hosting the game/map that you want. It should offer to download for you.'''

&lt;i&gt;If the download fails, or if no games/maps show up, you should check that your lobby has found your Spring install. With SpringLobby, click edit -&gt; preferences -&gt; Spring, and make sure that it has the correct paths.&lt;/i&gt;

You can also download games and maps manually, see the [[FAQ|FAQ]]. There is also the option to install different [[GamesDownloads#Universal_Downloaders|Lobbies]].

==Single-Player==

To start a single-player game, use your lobby. Go to the Single-Player tab. Select a game, map and [[AIs|AI]] and click &quot;Start&quot;. 

Some AIs don't work with all games. If the one you pick builds nothing, try another!

==Playing Online==
To play online, you need the latest version of the [[Download|Spring Engine]]. To join matches, look for the &quot;battles&quot; or &quot;multiplayer&quot; tab in your lobby client.

== Wondering where some former popular games are? ==
Some larger games run their own lobby servers! 
* Zero-k (which grew out of CA) can be found at https://zero-k.info/
* Beyond All Reason (which grew out of BAR) can be found at https://www.beyondallreason.info/
* Balanced Annihilation and some other legacy *A games can be found at at https://balancedannihilation.com/

==Lan Party==
See the dedicated page [[Spring_on_a_LAN|Playing on a lan]].

=Useful Hotkeys, Etc.=

For the default keyboard layout please look at the [[Keyboard]] page.

=The Spring Forum=
[[Forum_Etiquette|Guidelines For Forum Etiquette]]

=Development=
To get started with development check the [[Engine_Development|Development]] page.

=Your question not answered here? Got problems?=
Read the [[FAQ|Frequently Asked Questions]] or ask in the [http://springrts.com/phpbb/viewforum.php?f=11 Forum].
You can also report [[Bugs]] to the developers so they can be fixed.

==Game Specific Questions==
If you have a question or problem with a certain gameplay mechanic in a game, you can talk about it at the [http://springrts.com/phpbb/viewforum.php?f=47 game's subforum]

If Spring crashes/hangs, please look at the [[FAQ:trouble|FAQ]]. 

[[Category:Help]]

&lt;!--
This page opens, when the installer finished installing, keep that in mind when changing stuff here. This Page is also linked directly from the start-page.

This page should explain how to get an running game after installing the engine.
(Install Mod + Map)
 --&gt;</text>
      <sha1>4dc2x34s9v6ijdi2og59f2vr3lrn2dc</sha1>
    </revision>
  </page>
  <page>
    <title>Readme</title>
    <ns>0</ns>
    <id>998</id>
    <redirect title="Read Me First" />
    <revision>
      <id>20627</id>
      <parentid>19125</parentid>
      <timestamp>2010-11-29T10:59:08Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>Redirected page to [[Read Me First]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">#REDIRECT [[Read_Me_First]]</text>
      <sha1>hxw7zme7rrx5lz4w8c28fpqksgsson8</sha1>
    </revision>
  </page>
  <page>
    <title>Regression Testing</title>
    <ns>0</ns>
    <id>3232</id>
    <revision>
      <id>24175</id>
      <parentid>24174</parentid>
      <timestamp>2012-03-28T17:45:56Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1975">Regression tests are made to not let things break again. If something broke, a regression test should be made.

==General rules==

Keep tests small, simple and fast. It doesn't help, if one test takes 10 hours.

Results of tests should be reproduceable. Thats not always possible, but at n runs it should return n times the same.

The game has to be available with a rapid tag

Single tests can be run on demand, means: (when testsrun=1)
Also, tests can be disabled with &quot;testsdisable=1,2,3&quot;, which will disable test 1,2 and 3.

&lt;code&gt;&lt;pre&gt;
/runtest 1
&lt;/pre&gt;&lt;/code&gt;

will run test one.


also, tests should be written, that they can run in parallel.
tests shouldn't rely on a specific map.

===modoptions===
&lt;code&gt;&lt;pre&gt;
testsrun=1
testsdisable=1,2,3
test1areax = &lt;map cordinate&gt;
test1areay = &lt;map cordinate&gt;
&lt;/pre&gt;&lt;/code&gt;

==How to create a test==

A test will be run on a spring-headless, which means it has no visual output.


The test has to be active, when the modoption &quot;EngineTesting = 1&quot; in script.txt is set, it should default to 0.


In the lua widget / gadget, check if this tag is set, and then start the tests.

A test consits of five parts:

===Setup===
spawn units, create features, ... initialize.
move/reclaim/... command to units

===Run===
mostly the engine will do the work. maybe the run a is just some lua function.


===End condition===
 - test run &gt; frames
 - unit died
 - unit created
...

===Validate===
 - test if unit reached goal
 - test if all units are idle / did their work
 - ...

Results should be shown this way when it failed:

&lt;code&gt;&lt;pre&gt;
Spring.Log(string.format(&quot;Test %d result: failed&quot;,testnumber, result), LOGLEVEL.ERROR)
&lt;/pre&gt;&lt;/code&gt;

or on success:
&lt;code&gt;&lt;pre&gt;
Spring.Log(string.format(&quot;Test %d result: ok&quot;,testnumber, result))
&lt;/pre&gt;&lt;/code&gt;

===Cleanup===

* remove created units
* unset variables

==Example Widget==

==Example Gadget==


===links===
http://springrts.com/phpbb/viewtopic.php?f=21&amp;t=27928

[[Category:Development]]</text>
      <sha1>kpustl33o5kcf0kxo128uqvjlep9j9l</sha1>
    </revision>
  </page>
  <page>
    <title>ReleaseNotes:101.0</title>
    <ns>0</ns>
    <id>3731</id>
    <revision>
      <id>29660</id>
      <parentid>29659</parentid>
      <timestamp>2015-09-27T13:11:00Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="196">windows buildslave wanted:

https://springrts.com/phpbb/viewtopic.php?f=12&amp;t=33866

Compatibility &amp; Changes in 101.0

https://springrts.com/phpbb/viewtopic.php?f=12&amp;t=33843


[[Category:Releases]]</text>
      <sha1>49yuwzfvncx40oaag9j8ql3uv2e705l</sha1>
    </revision>
  </page>
  <page>
    <title>ReleaseNotes:97.0</title>
    <ns>0</ns>
    <id>3643</id>
    <redirect title="ReleaseNotes:98.0" />
    <revision>
      <id>28749</id>
      <timestamp>2014-10-01T03:38:38Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>Abma moved page [[ReleaseNotes:97.0]] to [[ReleaseNotes:98.0]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="31">#REDIRECT [[ReleaseNotes:98.0]]</text>
      <sha1>rrszzoh5oo2bis7jj1d8e825l12259h</sha1>
    </revision>
  </page>
  <page>
    <title>ReleaseNotes:98.0</title>
    <ns>0</ns>
    <id>3612</id>
    <revision>
      <id>28748</id>
      <parentid>28747</parentid>
      <timestamp>2014-10-01T03:38:38Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <minor/>
      <comment>Abma moved page [[ReleaseNotes:97.0]] to [[ReleaseNotes:98.0]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1008">

=New features=

==More languages supported!==

Thanks to utf8 being added to Spring, signs from more languages now display correctly: 

UTF8-Support.
[[File:After.jpg|700px]]

==Visual profiling and grapher that shows how Spring spends time==

[[File:Grapher.jpg|700px]]

 green are video frames
    red are simframes
    blue is swapBuffer (gpu/vsync)
    pink is lua gc

You see that `Frame Grapher` which displays the last half second and its time slices

==KeyChains hotkeys==
New hotkey system that allows for chained key presses, by new developer MajBoredom.

(idk what excactly this does but it seems worth mentioning, add details to description)

==spring:// urls==
http://springrts.com/phpbb/viewtopic.php?f=12&amp;t=31846

==ingame lobby ==
(luasocket default enabled)
http://springrts.com/phpbb/viewtopic.php?p=561799#p561799

==support for SSMF Detail Normal Textures==

when https://github.com/spring/spring/pull/131 get merged: http://beherith.eat-peet.net/stuff/baryay.jpg

[[Category:Releases]]</text>
      <sha1>m8njjgcsohangicl33njbmyeaj5jikv</sha1>
    </revision>
  </page>
  <page>
    <title>ReleaseNotes:99.0</title>
    <ns>0</ns>
    <id>3670</id>
    <revision>
      <id>29310</id>
      <parentid>29308</parentid>
      <timestamp>2015-06-22T03:26:35Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="889">== Release Candidates ==
[https://springrts.com/phpbb/viewtopic.php?f=12&amp;t=32774 RC1]
[https://springrts.com/phpbb/viewtopic.php?f=12&amp;t=32881 RC2]
[https://springrts.com/phpbb/viewtopic.php?f=12&amp;t=33035 RC3]
[https://springrts.com/phpbb/viewtopic.php?f=12&amp;t=33436 RC4]
[https://springrts.com/phpbb/viewtopic.php?f=12&amp;t=33546 RC5]
[https://springrts.com/phpbb/viewtopic.php?f=12&amp;t=33587 RC6]

==New crashhandler on linux==
hopefully it will be never needed! :-)
[[File:New-crashandler.png|700px]]

(created via /cheat /crash)


https://i.imgur.com/Self8jY.jpg
https://i.imgur.com/4V8g5cV.jpg
source: https://springrts.com/phpbb/viewtopic.php?p=566145#p566145

https://cloud.githubusercontent.com/assets/4228461/7712510/615c0916-fe7a-11e4-830d-30018d8a32f3.png
source: https://github.com/spring/spring/pull/197

http://i.snag.gy/bO2Ds.jpg
source: hokomoko, #sy channel

[[Category:Releases]]</text>
      <sha1>o21cxbv39jdbed8ae2ykvrivpipaxp0</sha1>
    </revision>
  </page>
  <page>
    <title>Ren'Py</title>
    <ns>0</ns>
    <id>3535</id>
    <revision>
      <id>29211</id>
      <parentid>27641</parentid>
      <timestamp>2015-03-28T08:28:33Z</timestamp>
      <contributor>
        <username>Kingraptor</username>
        <id>2558</id>
      </contributor>
      <minor/>
      <comment>Moved to Github</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1956">'''Ren'Py''' is an open source visual novel engine, available [http://www.renpy.org/ here]. It can be used in conjunction with Spring to provide a singleplayer experience with narrative, dialogue, images and videos.

== Using Ren'Py with Spring ==
Without the use of sockets, Ren'Py and Spring can best communicate in the following way:

=== Ren'Py to Spring ===
Python can read a Spring startscript and modify it, say using [http://docs.python.org/2/library/string.html#formatstrings str.format] or the older [http://docs.python.org/2/library/stdtypes.html#string-formatting % (modulo) operator]. In this way, any arbitrary game, per-player or per-team information can be made available to Spring at runtime. It is also theoretically possible for Python to modify the contents of an .sdz or .sdd archive directly, but this is not recommended.

=== Spring to Ren'Py ===
A widget or gadget can write a Python file with any information to be communicated to Ren'Py, which it can then import using the [http://docs.python.org/2/library/functions.html#execfile execfile] function. Bear in mind that because Spring is limited in which directories its Lua can write files to, Ren'Py will need to know where the Spring datadir is.

=== Examples ===
[https://github.com/KingRaptor/springpy SpringPy] is a code example for Spring-Ren'Py communication. You can check out the whole repo and open/run the Ren'Py project with the Ren'Py SDK.
* [https://github.com/KingRaptor/springpy/blob/master/game/script.rpy Example script.rpy]
* [https://github.com/KingRaptor/springpy/blob/master/spring/script_pytest.txt Example startscript]
* [https://github.com/KingRaptor/springpy/blob/master/spring/LuaUI/Widgets/api_shared_functions.lua Widget to write Python dictionaries and module files]
* [https://github.com/KingRaptor/springpy/blob/master/spring/LuaUI/Widgets/dbg_test.lua Test widget]: writes data required by sample code on widget:Initialize()

[[Category:Game Dev]]</text>
      <sha1>f4cz3vum1odzwyv94c2ug6uqf395xk2</sha1>
    </revision>
  </page>
  <page>
    <title>Reporting</title>
    <ns>0</ns>
    <id>3832</id>
    <revision>
      <id>31455</id>
      <parentid>31056</parentid>
      <timestamp>2021-02-07T08:37:55Z</timestamp>
      <contributor>
        <username>Silentwings</username>
        <id>2883</id>
      </contributor>
      <minor/>
      <comment>/* Contacting moderators */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1489">[[Main_Page|Wiki]] &lt; {{FULLPAGENAME}}

== Contacting moderators ==

For individual forum posts, which might not follow our [[Felony|forum rules]], use the 'report post' button which you can find [https://springrts.com/phpbb/app.php/help/faq#f2r9 near the top right of every forum post].

In all other cases, when a reaction is wanted from Springs moderators, reports may be sent, via private messages, with evidence in the form of links/logfiles/replays, [https://springrts.com/phpbb/ucp.php?i=pm&amp;mode=compose&amp;g=3623 to the Spring staff (=moderators and administrators) forum group]. 

'''Forum threads should not be used for reporting users behaviour to moderators.''' Why not? Because forum threads are for discussions, which don't require a heavy burden of proving something when you say it - consequently we will never treat them as a request for a reaction or judgement from moderators, although we might react for other reasons. We may not always read them, but if we do then we will generally lock threads made to request moderator reactions.

== Moderation within autohosts ==

Misbehaviour within autohosts should be reported to the autohost owners or operators. Send a private lobby message &lt;code&gt;!list users&lt;/code&gt; to the autohost to find out who these are.

Autohosts are typically run by particular users and have a degree of autonomy, [[Botflags|as detailed here]]. Springs (global) moderators will typically not process disputes between players relating to ingame behaviour.</text>
      <sha1>bjcm3g7hnrmtu9elkwch01bde3f7jk9</sha1>
    </revision>
  </page>
  <page>
    <title>Requirements</title>
    <ns>0</ns>
    <id>1362</id>
    <revision>
      <id>27320</id>
      <parentid>22617</parentid>
      <timestamp>2013-06-18T07:15:26Z</timestamp>
      <contributor>
        <username>Beherith</username>
        <id>2441</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3095">'''System Requirements''', or: &quot;What sort of a system do I need to run Spring?&quot;

You need a 3D graphics card to run Spring, which will probably require at least a a GeForce4 MX and the latest driver supported. Minimum CPU requirements are a little more complex. A more powerful CPU will have the capability to support larger maps and a greater maximum unit limit. A 1 GHz CPU should be able to support an estimated 500 units. The memory needed will also vary with unit count and map size, but 512 MB is enough to play medium sized games.


{|
!CPU
!RAM
!GPU, Video Ram
!Resolution; Settings
!Result
|-
|Intel Core i5-750 at 3.5GHz
|8GB
|GeForce GTX 560ti 1GB
|2560x1440; Everything maxed out
|More than playable, but having more than 500 units on screen the FPS goes below 30
|-
|Intel Core 2 Duo 4300 (1.8 GHz, 64bit)
|3072 MB
|GeForce 8500 GT 512 MB
|1600 x 1200; medium settings
|Very playable. Starts to lag if you blow up 50 commanders with 100 nukes
|-
|Intel Core 2 Extreme X6800
|512 MB
|GeForce 6200 256 MB w/Turbocache
|1024 x 768; minimum settings
|Starts to lag after 1200  units
|-
|Intel Pentium 4 2600 MHz (HT)
|1024 MB 
|Intel 82865G (built-in)
|
|Works ok, laggy on high (visible) unit count or on big maps when most of the terrain is visible.
|-
|AMD Turion MT-32 1.8 GHz
|448 MB
|ATi Radeon Express 200M, 64 MB
|1280 x 800; minimum settings
|Works fine, but a bit laggy on higher unit counts (750 ). Lags bad after detonation of nukes or commanders (video chip sucks in rendering clouds).
|-
|Intel Pentium 4 1.7 GHz
|256 MB
|GeForce FX 5200, 128 MB
|1280x1024; minimum settings
|Slow on water maps with the nice-shining-animated-water (works very well with the standard one). Slow when some smoke is shown too. Disregard that, no display matter. 16x16 maps work fine if &lt;100~ units, otherwise very slow. 8x8 maps like SmallDivide work well. Running linux.
|-
|Intel Celeron 1.2 GHz
|512 MB
|Intel 915GM (laptop/integrated)
|1024x768; near minimum settings
|Works fine on maps 16x16 and smaller.  6 players is about the most it can handle, maybe only 4 on large maps with lots of units.
|-
|Intel Pentium M 1.73 GHz 740
|2048 MB
|Intel 915GM Express (laptop/integrated)
|1024x768; near minimum settings, no shadows, basic water, no anti aliasing
|Works fine on small maps, in the beginning starts out at 15 frames per second, then once there are around 500 units it starts lagging excessively at 1 or 2 frames per second, and becomes unplayable. Running ubuntu 9.04-11.04.
|-
|Intel Core Duo 1.83 GHz
|1204 MB
|GeForce 7600 Go (Laptop) 512 MB
|1280x768; near maximum settings
|Works fine on all maps, including those over 32x32. Running Windows XP.
|-
|AMD 1ghz to 1,3ghz
|512MB or less
|GeForce 4 128MB
|640 x 480; no sound, no reflections, everything that can disabled or lowered
|Over 100fps at the very beginning, goes down to 0.01fps as time goes and players expand more and more. Either overclock to 5ghz or upgrade to any dual core like AMD or Intel 5000+. 
|-
|Any under 1ghz
|???MB
|???
|???
|Don't expect spring to run in a playable manner.
|}

[[Category: Playing]]</text>
      <sha1>fd829a96z8hfwgdi8lnu664bjilxozp</sha1>
    </revision>
  </page>
  <page>
    <title>Resources</title>
    <ns>0</ns>
    <id>1284</id>
    <revision>
      <id>12568</id>
      <parentid>11101</parentid>
      <timestamp>2007-07-25T12:47:42Z</timestamp>
      <contributor>
        <username>PiHalbe</username>
        <id>2253</id>
      </contributor>
      <minor/>
      <comment>spam revert</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="13206">'''Resources''' are raw natural goods collected in-game, which can be spent to create new units, structures and ammunition, power up weaponry or keep some systems functioning (like cloaking systems). In TA, two types of resources exist: metal and energy.

==Resource strategy==

===A Note on Efficiency===

From the start of a match until the end, it is incumbent upon every player to expand, both in terms of territory controlled, and in terms of resources, which often go hand in hand.  Most players begin with several Windmills or Solar Generators, expand with their first few mexs (metal extractors), and then build their first factory.  Some never expand very far beyond this point. Even if you don't lose directly when you do this, you still damage your team's overall well-being.

===Resource versus Military Spending===

Your economy begins with a Commander, but quickly grows to include mobiles (units which move) and statics (units which don't move) of many types.  The key to victory is knowing which units to build and when.  Creating builder units, which in turn can create resources, is a high-priority process, and should remain so until the match ends.  Each military unit built is a net loss from your economy until you put it to use.  For example, say that you build your first factory, and that the first unit produced is a military unit - a Flash tank.  Not only does this action consume resources that could be spent on resource generating structures, it delays the construction of units that could build more resource generating structures more quickly. You lose time, metal and energy. Economists refer to this as the &quot;opportunity cost&quot;, what you lose by making one decision over another.

Builder units provide a direct economic advantage. Each additional builder means that you can build resource-generating structures faster. The benefits gained from an active builder quickly outweigh the opportunity cost of constructing that builder, as their activities result in absolute economic growth (You get resources faster). Combat units provide an indirect economic advantage when they destroy things your opponent's built or secure more territory for you. They result in relative economic growth by reducing your opponent's economy. (Your opponent loses resources) The efficiency of combat units is much less certain, and depends much more on the tides of war and your opponent's actions.

For the present, keep in mind that resource spending should almost never be 100% on economic or 100% military.  The ratio should vary in accordance with need, but a generally healthy ratio is 60% Economic Spending and 40% Military Spending. Every rule has its exceptions, but, all other things being equal, the stronger economy wins the match.

===The Relative Efficiency of Resource Types===

So, should you build metal extractors (mexs) or metal makers?  Windmills or Solars?  How many, and in what order?  The answer to these questions will vary from map to map, and from mod to mod, but can generally be predicted as follows:

A Solar Collector costs roughly three times as much metal as a Windmill and always produces 20 Energy.  Wind is variable, but the maximum and minimum wind for a map can be translated into a fixed value by adding the two extremes and dividing by two. Always check the wind values in the lobby before the game begins! Picking the right level 1 energy structure is vital.

Let's look at an example. Take the map EvergreenHaven v3, which has Wind between 1-30.  This gives us an average wind income of :~15.5 energy per Windmill.  As you can build roughly three Windmills per Solar Collector, metal for metal, your Wind/Solar Ratio (Average Wind income/20 energy per solar) would be 15.5*3/20 = 46.5/20 = 2.325/1.  On this map, Wind is optimal.

It is worth noting that Wind's variable nature can lead to unused excesses and unpredictable stalls, and that build times for the two structures are usually close, with Windmills building slightly faster. While these deficiencies can be addressed to a degree by building a minimal number of Solars to ensure a certain income or additional energy storage units (which are generally inefficient for small-scale use, but can be very good in large numbers), in the case of a Wind/Solar ratio of 1/1, Solar would be the preferred choice.  As a rule of thumb, say that with a ratio of 1.2/1 (24/20) or less, build Solar. For 1.21/1 or more, build Wind.

On almost all maps, wind will be your best choice. Auto-spaced, huge box build orders for Windmills should be given to one or two level 1 builders early on. Spring makes this very easy to do - click on the windmill, hold down alt shift, and click and drag. You can use z and x or the 4th and 5th mouse buttons to adjust the spacing between units. Give windmills at least 1 unit of spacing, preferably more, as they explode violently when destroyed.

Geothermal plants should be considered carefully. They can give you a big boost to your energy, but are very tempting targets for your enemy and can only be built in certain places. If you have a geothermal vent that looks fairly safe and your economy's otherwise healthy, build one. Otherwise pass.

In almost all cases, metal extractors are more efficient than metal makers, so while a mix is usually optimal, the general rule is to always claim all mex spots available to you before producing metal makers.  Please note that &quot;mex spots available to you&quot; does not refer to the initial three or four near your Start Position, but to all unclaimed ones.  All other things being equal, all players will claim mex spots in territory covering (map size/number of players).  If your enemy doesn't claim all the spots that are within their suggested territory, they're yours to claim as well.  As you defeat enemies, it is of extreme importance to move forward and claim mex spots to enhance your own economy as you disable your opponent's.

===A Note on Stalling===

Don't.  You should never try spending much more metal than you make at any given time unless you've stockpiled in advance, and it's even more dangerous to run low on Energy. Many weapons, including HLTs and the Commander's D-gun, require it to fire, and mexes require it to operate.  If you want to build two things at once but don't have enough metal, prioritize. That way, one of the things will be finished in less time.  Having many builders idling is a sign of poor planning.  Having every builder building very, very slowly from a stall is just as bad. Given the flexible nature of energy and the disadvantages of running short, it is important to always have an excess available.  When using metal makers, always use the Metal Maker AI. (Click the metal maker in question, then Click the &quot;select AI&quot; button then scroll down and select the &quot;metal maker AI&quot;)

If you do start to stall, back off your military production as much as you safely can and focus on shoring up your economy. Stabilize your energy supply first, then work on building up your metal supply.

===Teching Up to Expand Resource Production===

Once you've got your level 1 economy on solid footing, you face the next problem: deciding when advance to tech level 2. Building a level 2 facility 5 minutes after everyone else has one is a better alternative than getting one 90% of the way built with no means to defend it and losing it to an AK. Falling badly behind in the Tech 2 race will hurt your economy in the long run, so it's important to know precisely when you're safe to build.

There are a great many variables involved in determining when it's best to tech up, most of which involve common sense. Don't start building a level 2 factory until you can defend it. Make sure that there are static defenses nearby to ward off attackers. Even a few LLTs in the right place can make the difference between a load of scrap waiting to be reclaimed to fuel your continued expansion and a triumphant army of Flashes sitting smugly by the ruins of your level 2 factory.  As a rule of thumb, don't start to build a level 2 facility until you have  25 Metal income and 800 metal in storage.  Trying any earlier will hinder rather than help.  Trying much later will waste time that could be spent building Moho Mexs.

Unless you have enemies knocking down your front door, the first and second unit built from your level 2 factory should be advanced builders.  Assign these to Ctrl groups immediately and get them building.  If enemies have knocked down your front door, build the advanced builders the instant it's safe. You can't afford to get any more behind, but you also don't want your advanced builder to roll out of the factory and get instantly slagged.

In the case of XTA, you should have ample energy income at this point.  300 over and above what you're using is the absolute minimum, as each Moho Mine in XTA requires 300 Energy to function.  For AA and other mods, excess energy is less necessary, but is still good to have. Remember, energy is what makes everything go. Run short on energy and your enemy will run over you. The first item built with your advanced construction units should usually be a Moho Mine on your biggest safe metal spot, followed by Moho Mines on all other metal spots available to you, or everywhere on a metal map. If your enemy's being particularly aggressive (or suspiciously quiet), a Radar Jammer followed by Moho Mines everywhere is also an option.

Once you have a few Moho Mines up, and your military (both mobile units and static defenses) is reasonably solid, start constructing a fusion plant or cloakable fusion plant. Defend these well, especially against airstrikes. Not only are they a hefty resource investment, but they go bang with extreme alacrity. A field of flak turrets and missile towers nearby (appropriately spaced-out - don't try to carpet your base with them!) will give any airborne visitors a nasty surprise.

Little is more frustrating than seeing an ally get to level 2 and then try to build an Annihilator or Doomsday Machine without a single Moho Mine to give the project the resources it needs to finish before the game ends. Level 3 factories (Experimental Gantries in AA) can come at any time after Moho Mines are built, and will be further discussed in Strategy, part 2 - Military Policy. In mods such as Final Frontier, where level 3 Builders with level 3 metal extractors exist, they can come earlier.

===When It's OK to Stop Expanding Your Resources===

Never.  It is never acceptable to stop expanding your economy.  You're beating your enemies with what you have and victory seems certain?  Keep expanding, and pound them into the ground. Let your attack falter due to lack of reinforcements (or, worse, running out of energy), and they might fatally surprise you.  You've hit the unit limit?  Self-destruct level 1 or unused units and replace them all with stronger models. You should easily be able to turn 20 Windmills into 20 cloakable fusion plants at this point. Your enemies are pushing you back towards your base? More resources will let you mass enough military units to turn the tide.

In order to manage your economy effectively in the late game, you really need to use the features Spring offers. Otherwise, you'll quickly be overwhelmed by the number of things that need doing. Even something as simple as assigning the lead construction unit of each &quot;task group&quot; to your numbered ctrl-groups can make your life a lot easier.

* You have 10 Ctrl groups. Use all 10. At least four should be reserved for advanced construction units. Which four is up to you, but using consecutive numbers is probably a good idea. Save at least a couple of groups for your battle units.
* Issue Guard orders to give prime builders (at whatever tech level) assistants, creating a Builder Group. 4 Farks on an advanced builder more than quintuple its output, and are easy to handle if you Ctrl group the one advanced builder. If you have level 1 builders that've run out of things to do, assign them to guard a factory or a level 2 builder. As long as you have the resources to support it, the more builders on a project, the better.
* Use Shift to queue orders. Don't be afraid to build up really long queues. You can always cancel a queue, or even use wait orders to delay part of it until after a vital job finishes. You want to be able to devote enough time to your battle units to win fights, so you don't want to be babying your construction units all the time.
* Use Shift drag to create lines of units and Shift Alt drag to build boxes of units. These are especially good for defences or resource buildings, as they let you queue up a lot of orders very quickly.
* Use mouse 4 and 5 or z and x while dragging to adjust the spacing between line or box build orders, to make units much harder to chain destroy and ensure that your defensive structures have clear fields of fire. Play around to find the right spacing for a given building. Some have bigger explosions than others.
* Use your Commander intelligently. He can't build much by himself, but his nanolathe is almost as powerful as an Advanced Construction Vehicle's. This can be used to speed up construction significantly.

[[Category:Strategy]]</text>
      <sha1>g4x57o3psdvj93umo5lcclv14b0n442</sha1>
    </revision>
  </page>
  <page>
    <title>Resources.lua</title>
    <ns>0</ns>
    <id>3142</id>
    <revision>
      <id>30822</id>
      <parentid>26784</parentid>
      <timestamp>2018-12-02T10:25:50Z</timestamp>
      <contributor>
        <username>Gajop</username>
        <id>2804</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4950">==Location==
&lt;code&gt;resources.lua&lt;/code&gt; is a file in the &lt;code&gt;Gamedata/&lt;/code&gt; directory of a Spring Game.&lt;br&gt;
&lt;code&gt;resources_map.lua&lt;/code&gt; is a file in the &lt;code&gt;Gamedata/&lt;/code&gt; directory of a Spring Map.

==Purpose==
This file is used by a game to reference textures for use in [[CEG|Custom Explosion Generators]], as well as various default explosions and other engine textures such as default trees and water etc. Maps have a corresponding file, &lt;code&gt;resources_map.lua&lt;/code&gt; which behaves in the same way.

==Source==
The engine source code which parses the data from this file is viewable here:

* {{sourcelink|file=rts/Rendering/ProjectileDrawer.cpp}} (smoke, groundfx &amp; projectiletextures) &lt;code&gt;resources_map.lua&lt;/code&gt; is only read here.

* {{sourcelink|file=rts/Rendering/GroundDecalHandler.cpp}} (scars)
* {{sourcelink|file=rts/Rendering/Env/AdvTreeGenerator.cpp}} (trees)
* {{sourcelink|file=rts/Map/MapInfo.cpp}} (caustics &amp; maps)

==Details==

The engine loads textures from seven subtables within the &lt;code&gt;graphics&lt;/code&gt; subtable of the returned resources table. Certain tables are automatically added by the engine if a game is not overriding them, they are numerical arrays whereas all others are key-value associative arrays. Engine defaults which are required to be present are included in the [[#Automatic]] example below.

* &lt;code&gt;caustics&lt;/code&gt; - Textures used with bumpmapped water. Automatically added by the engine.&lt;br&gt;
* &lt;code&gt;smoke&lt;/code&gt; - Textures used for engine default smoke. Automatically added by the engine.&lt;br&gt;
* &lt;code&gt;scars&lt;/code&gt; - Textures used for the burn scars left on the map by weapon explosions. Automatically added by the engine.&lt;br&gt;
* &lt;code&gt;trees&lt;/code&gt; - Textures for engine default trees.&lt;br&gt;
* &lt;code&gt;maps&lt;/code&gt; - Base textures in case a map does not provide it's own.&lt;br&gt;
* &lt;code&gt;groundfx&lt;/code&gt; - Game or Map specific textures for [[CEG-Classes#CSimpleGroundFlash|CSimpleGroundFlash]] CEG's as well as engine default explosion [[CEG-Format#groundflash|groundflash]].&lt;br&gt;
* &lt;code&gt;projectiletextures&lt;/code&gt; - Game or Map specific textures for the other [[CEG-Classes]] as well as engine defaults. This is the only table that is read from &lt;code&gt;resources_map.lua&lt;/code&gt;&lt;br&gt;

==Example==
===Automatic===
The following example (which is becoming a [http://en.wikipedia.org/wiki/De_facto_standard de facto standard]) sets out the engine default textures, and recursively adds any textures from the game's &lt;code&gt;Bitmaps/projectileTextures/&lt;/code&gt; and &lt;code&gt;Bitmaps/groundFX/&lt;/code&gt; directories, respectively. It will ignore any directories created by [http://en.wikipedia.org/wiki/Apache_Subversion SVN], and can be easily edited to filter out [http://en.wikipedia.org/wiki/Git_(software) git] or any other version control software.

&lt;pre&gt;
local  resources = {
    graphics = {
      -- Spring Defaults
      trees = {
        bark           = 'Bark.bmp',
        leaf           = 'bleaf.bmp',
        gran1          = 'gran.bmp',
        gran2          = 'gran2.bmp',
        birch1         = 'birch1.bmp',
        birch2         = 'birch2.bmp',
        birch3         = 'birch3.bmp',
      },
      maps = {
        detailtex      = 'detailtex2.bmp',
        watertex       = 'ocean.jpg',
      },
      groundfx = {
        groundflash    = 'groundflash.tga',
        groundring     = 'groundring.tga',
        seismic        = 'circles.tga',
      },
      projectiletextures = {
        circularthingy = 'circularthingy.tga',
        laserend       = 'laserend.tga',
        laserfalloff   = 'laserfalloff.tga',
        randdots       = 'randdots.tga', 
        smoketrail     = 'smoketrail.tga',
        wake           = 'wake.tga',
        flare          = 'flare.tga',
        explo          = 'explo.tga',
        explofade      = 'explofade.tga',
        heatcloud      = 'explo.tga',
        flame          = 'flame.tga',
        muzzleside     = 'muzzleside.tga',
        muzzlefront    = 'muzzlefront.tga',
        largebeam      = 'largelaserfalloff.tga',
      },
    }
  }

local VFSUtils = VFS.Include('gamedata/VFSUtils.lua')

local function AutoAdd(subDir, map, filter)
  local dirList = RecursiveFileSearch(&quot;bitmaps/&quot; .. subDir)
  for _, fullPath in ipairs(dirList) do
    local path, key, ext = fullPath:match(&quot;bitmaps/(.*/(.*)%.(.*))&quot;)
    if not fullPath:match(&quot;/%.svn&quot;) then
    local subTable = resources[&quot;graphics&quot;][subDir] or {}
    resources[&quot;graphics&quot;][subDir] = subTable
      if not filter or filter == ext then
        if not map then
          table.insert(subTable, path)
        else -- a mapped subtable
          subTable[key] = path
        end
      end
    end
  end
end

-- Add mod projectiletextures and groundfx
AutoAdd(&quot;projectiletextures&quot;, true)
AutoAdd(&quot;groundfx&quot;, true)

return resources

&lt;/pre&gt;
===External===
{{sourcelink|file=cont/base/springcontent/gamedata/resources.lua}} - Engine base content &lt;code&gt;resources.lua&lt;/code&gt;

[[Category:Gamedata]]</text>
      <sha1>begzqdub9f7hyc9rqn3jy9aduuuuvtj</sha1>
    </revision>
  </page>
  <page>
    <title>Resources map.lua</title>
    <ns>0</ns>
    <id>3164</id>
    <redirect title="Resources.lua" />
    <revision>
      <id>24949</id>
      <parentid>22982</parentid>
      <timestamp>2012-09-01T12:05:08Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>change this not-even-a-stub to a simple redirect</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">#REDIRECT [[Resources.lua]]</text>
      <sha1>e5rvdmhldlmziiwn3qvus5b3iq5eafw</sha1>
    </revision>
  </page>
  <page>
    <title>Roadmap</title>
    <ns>0</ns>
    <id>3858</id>
    <revision>
      <id>31843</id>
      <parentid>31740</parentid>
      <timestamp>2022-08-29T08:57:39Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>Replaced content with &quot; [[Category:Engine Dev]]&quot;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="24">
[[Category:Engine Dev]]</text>
      <sha1>id4lp7a3n34gqd6jqq5tuek5dmbct7g</sha1>
    </revision>
  </page>
  <page>
    <title>Rox Knorke ingame experimental moddev</title>
    <ns>0</ns>
    <id>3082</id>
    <revision>
      <id>26360</id>
      <parentid>21837</parentid>
      <timestamp>2013-03-08T16:22:55Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>[[Category:Emmanuel]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="203">*[http://www.youtube.com/watch?v=EvHj_Bw5pTI rox knorke &amp; the art of transportation ingame ! ]
*[http://www.youtube.com/watch?v=ogjf7h5gD8w spring tank and the destructible walls ]

[[Category:Emmanuel]]</text>
      <sha1>agql9vc5vuqbwpeq31wo8lo28htcavt</sha1>
    </revision>
  </page>
  <page>
    <title>Runecrafter</title>
    <ns>0</ns>
    <id>3666</id>
    <redirect title="Tutorial:MapMaking(Runecrafter)" />
    <revision>
      <id>28925</id>
      <timestamp>2014-10-19T09:08:51Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>Flozi moved page [[Runecrafter]] to [[Tutorial:MapMaking(Runecrafter)]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="45">#REDIRECT [[Tutorial:MapMaking(Runecrafter)]]</text>
      <sha1>rdl7aq5lv8ckqi6rwdnmgp0uvq9wuk8</sha1>
    </revision>
  </page>
  <page>
    <title>Rushing</title>
    <ns>0</ns>
    <id>969</id>
    <revision>
      <id>16831</id>
      <parentid>16830</parentid>
      <timestamp>2009-08-08T16:08:12Z</timestamp>
      <contributor>
        <username>Seanheron</username>
        <id>2595</id>
      </contributor>
      <minor/>
      <comment>forgot to remove category</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3242">{{deprecated}}

A &quot;rush&quot; refers to pushing out an early attack, especially in a two player game. In some games, this is at heavy expense to the mid and late game or even crippling your economy in the hope of an uncontested victory; for example the &quot;three-pool rush&quot; (or even worker rush) in Starcraft, or a &quot;Guardian rush&quot; in Dawn of War, both of which will lose you the game if unsuccessful. This is not necessarily the case with TA however, though if the player on the recieving end of the rush can successfully repel it they &lt;i&gt;can&lt;/i&gt; come out with an advantage.

In the original TA rushing was conducted by using assist-build to pump out a number of flashes to masticate an uprepared enemy base.

A succesful rush has to be planned from the first second of the game.  You should have more than one unit moving to attack before the end of the first minute.  If you choose slightly stronger of faster units, an attack that starts before two minutes might be successful.

Watch your units and watch your economy.  Attack from multiple directions to divide you enemy's defensive strength.  Focus on metal extractors, wind if you see it, and power.  Keep solar collectors closed to starve your enemy of energy.

And when your first ends, have another on the way.

For example: in OTA I rush a vehicle plant with 2 solars and a mex, build 3 weasels, move towards the enemy base (almost always opposite my start position) divide weasels into 3 attacks grouping each one 1,2 or 3 whilst my comm starts expanding. I then micro the weasels :) works well enough.

If you are on the receiving end of a rush the way you can gain an advantage is by reclaiming the metal from the attacking units. However, one of the biggest dangers of being on the receiving end of the rush is the amount of time you spend handling it. To this end a quick thing to do is to set a constuction unit on patrol around your base to suck up the metal - this will also repair partially damaged buildings etc. If you end up microing your con-unit, any advantage you get from reclaiming metal will be gone - the next attack will arrive before you've had any advantage from the metal you reclaimed.
Another useful function is the reclaim area function. click reclaim hold and drag and your unit will reclaim all in that green circle! :)

In AA, a good anti-rush tactic is building a LLT near the center of your base early on, and adding others near metal extractors and energy plants as necessary. Since units in Spring can't fire through each other, this prevents your enemy from microing their rush units to keep them on the other side of your first factory (or a block of other structures) from your Commander. Keep doing this throughout the game to discourage raiders, but don't try to cover your entire base. Keeping some fast mobile units in reserve to respond to raids is a much better idea. (Cite: SwiftSpear and Lathan's discussion in  [http://taspring.clan-sy.com/phpbb/viewtopic.php?t=4206 this thread].)

'''Mod Specific Notes'''

As a Strategy, Rushing is generally effective in most balanced mods. Cases where Rushing may not be effective include Optimus Prime's Final Frontier, among others.



''' [[Strategy_and_Tactics|&lt;- Back to Strategy and Tactics page]]'''</text>
      <sha1>00evko88g9o175wfc4qepmv1vio7xqw</sha1>
    </revision>
  </page>
  <page>
    <title>S3o using blender</title>
    <ns>0</ns>
    <id>2923</id>
    <revision>
      <id>26792</id>
      <parentid>20143</parentid>
      <timestamp>2013-03-21T10:38:50Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>recat</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3489">== motivation ==
This guide helps you to create a '.s3o' unit for spring using:
* 'blender' - for 3d moddeling
* 'gimp' - for texturing (or similar tools for 2d art)

== The Tools ==
First download/install blender, then install a blender-compatible python version. The command shell window for blender will tell you which version of python it was compiled with, get specifically that version of python. Finally download the exporter for blender, found at [1].

Once all is installed you can either work from scratch or start working based on a template [2]. If you start from scratch, have a look at [1] to meet all requirements for the exporter script, such as naming conventions and necessary empties.

== Editing and Exporting ==
The parenting system of blender is used to find the chain of children for exporting. Each child must have a unique name which can later be used for rigging.

Important: the model MUST have exactly two textures:
* 1. texture RGBA32 where: 
**RGB is used for coloring and A is used for team-coloring

* 2. texture RGBA32 where: 
**R for glow
**G for reflectivity
**B 'unassigned' (mod dependent)
**A for transparency (standard ARB shader supports only 1 bit that is: either render the pixel, or not)

=== Notes on working with the Template ===
Everything should be properly configured for export, with necessary empties etc present. If objects are hidden from view for better editing, press ALT+H to unhide all objects.

When you start working on the base mesh, remember not to delete the object itself. Go into Edit Mode, select all vertices and delete them. Then add primitives/vertices/... to your empty mesh of the still-valid base object.

After meshing out your model, remember to check whether you need to move/scale the empties that you see in the node viewer. The cubic empty sets the ground midpoint of the object, the arrow empty is used for height purposes and the spheric empty defines the model's boundary box.

== Notes on the export step ==
The active selection does not influence the exporter therefore you don't need to select any object (still you can) to make a valid export.
The exporter will loop over all objects in the scene automatically.

Please note that the template you can download from [2] also includes a modified exporter script for blender that allows it to export the objects even while cameras and light setups are present in the scene for preview-rendering.

== Deployment &amp; Testing==
Copy the '.s3o' in the folder:
* /mods/modname/objects3d/

While textures go into:
* /mods/modname/unittextures/

As your first model is a unit replacement, don't forget to modify the unitname.fbi (in case of the 'armsolar' replacement: use armsolar.fbi) and add your model there.
* /mods/modname/units/armsolar.fbi

WARNING: '''when using .s3o you have to add a suffix, else spring will crash!'''

Open the '/mods/modname/units/armsolar.fbi' and you will see:
=== units/armsolar.fbi: Valid for 3do ===
 [UNITINFO] {
  unitname=armsolar;
  name=Solar Collector;
  description=Produces Energy;
  acceleration=0;
  activateWhenBuilt=1;
  ...

we have to modify this in order to make it s3o aware with:

=== units/armsolar.fbi: Valid for s3o ===
 [UNITINFO] {
  '''unitname=armsolar.s3o;'''
  name=Solar Collector;
  description=Produces Energy;
  acceleration=0;
  activateWhenBuilt=1;
  ...

== Links ==
* [1] http://springrts.com/phpbb/viewtopic.php?f=9&amp;t=17026
* [2] http://www.lastlog.de/misc/s3o-template.zip

[[Category: 3D Models]]</text>
      <sha1>2n52jvvc9yrx4cksskk4cvcn9w8zfmz</sha1>
    </revision>
  </page>
  <page>
    <title>SLDB</title>
    <ns>0</ns>
    <id>3745</id>
    <revision>
      <id>30640</id>
      <parentid>29770</parentid>
      <timestamp>2018-03-15T22:58:21Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="176">SLDB is a lobby bot which is used to calculate Skill values.

[[SPADS]] based hosts send game results to it.

==Source Code==
https://github.com/Yaribz/SLDB

[[Category:Lobby]]</text>
      <sha1>gj7sk3d21dp2epg6qar3sdmp9h90vqs</sha1>
    </revision>
  </page>
  <page>
    <title>SM3 FAQ</title>
    <ns>0</ns>
    <id>1707</id>
    <revision>
      <id>27814</id>
      <parentid>27509</parentid>
      <timestamp>2013-10-27T19:27:55Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>recat to deprecated</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1245">{{Deprecated}}[[Engine_Development|Development]] &lt; [[Map_development|Map Development]] &lt; {{FULLPAGENAME}}


= Frequently Asked Questions on SM3 =


== What is DevIL ==
DevIL is the Image Loading library that spring uses.
http://openil.sf.net/

DevIL supports loading of bmp, dds, gif, jpg, png, pcx, psd, psp, tga, raw, pal, tif, pal, sgi, hdr among others.


== &quot;Map Size (x) should be equal to GameAreaW and GameAreaH&quot;? ==
For the map to load you need to add these two variables to your .sm3:
&lt;br&gt;
	GameAreaW=xxx;&lt;br&gt;
	GameAreaH=xxx;&lt;br&gt;
The map size(note, not the heightmap size which is map 1 pixel) width/height goes here.

== How do I use external textures? ==
Create a modinfo.tdf textfile in your mapname.sdd. It should contain:

[MOD]&lt;br&gt;
{&lt;br&gt;
Name=mapname;&lt;br&gt;
Description=your description here;&lt;br&gt;
ModType=0;&lt;br&gt;
&lt;br&gt;
NumDependencies=1;&lt;br&gt;
Depend0=texturefilename.sd7;&lt;br&gt;
}&lt;br&gt;

This will tell Spring to look in the directory where your map is located(eg. \maps\) for the textures you have specified in the SM3. Example:

[Rock]&lt;br&gt;
{&lt;br&gt;
TileSize=60;&lt;br&gt;
File=textures/rock/rock.jpg;&lt;br&gt;
Bumpmap=textures/rock/rock_normal.jpg;&lt;br&gt;
}&lt;br&gt;

Which would tell Spring that your texture is at texturefilename.sd7/textures/rock/rock.jpg.</text>
      <sha1>ku4nvjqfkxuczyzph12eu3gyc541tc8</sha1>
    </revision>
  </page>
  <page>
    <title>SM3 Map Format</title>
    <ns>0</ns>
    <id>1702</id>
    <revision>
      <id>27815</id>
      <parentid>27508</parentid>
      <timestamp>2013-10-27T19:28:15Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>recat to deprecated</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8643">{{Deprecated}}[[Engine_Development|Development]] &lt; [[Map_development|Map Development]] &lt; {{FULLPAGENAME}}


== Introduction ==

As opposed to the original SMF renderer, the SM3 map renderer allows multiple texture layers rendered on the terrain. This allows for higher texture resolutions and improved lighting such as bumpmapping/specular mapping.

Hugh Perkins has been working on a [[Maps:Map_Designer|SM3 map editor]]

== Map specification ==

Instead of a binary SMF file and a SMD file, all map information is now stored in a text based .SM3 file. This has the same basic layout as the original .SMD file, but it includes a [TERRAIN] section and an [INFOMAPS] section. It also has  an extra tag in LIGHT (GroundSpecularColor):

 [MAP]
 {
 		// regular smd information, such as start positions,
 		// [WATER] and [ATMOSPHERE] sections...
 
 	[LIGHT]
 	{
 			// specular color, defaults to 0.1 0.1 0.1
 		GroundSpecularColor=0.3 0.3 0.3;
 
 			// other standard tags shared with SMF (such as GroundSunColor)...
 
 	}

 	[INFOMAPS]
 	{
 		metal=Maps/dry_data/metalmap.png;
 		type=Maps/dry_data/typemap.png;
 	}
 	[TERRAIN]
 	{
 		HeightScale=400.0;
 		HeightOffset=10.0;
 		Heightmap=Maps/dry_data/1026.png;
 		
 		NumTextureStages=2; // all texture stages are multiplied
 		SpecularExponent=16; // specular exponent AKA 
 			//shininess or polishedness.  defaults to 8
 	
 		[texstage0]
 	 	{
 				// the first texture stage operation is ignored
 			source=Snow;
 		}
 		[texstage1]
 		{
 				// use the incoming alpha to blend between 2 textures
 			operation=blend; 
 			source=CrackedDirt;
 			blender=RockBlender1026;
 		}
 			/* texture definitions */
 		[CrackedDirt]
 		{
 			File=Maps/dry_data/dirt2.jpg;
 			Bumpmap=Maps/dry_data/dirt2_bm.jpg;
 			TileSize=50;
 		}
 		[Snow]
 		{
 			File=Maps/dry_data/Snow_Sand.jpg;
 			TileSize=20;
 		}
 	
 			/* blender definition, all blenders have &quot;Blendmap=1&quot; */
 			// a rock blender loaded from file for a specific map
 		[RockBlender1026]
 		{
 			Blendmap=1;
 			File=Maps/dry_data/1026_bm_small.png;
 		}
 	}
 }

== Heightmap specification ==

The heightmap is specified with 3 tags located in the [TERRAIN] section:

'''Heightmap:''' This should be either:
*An 8 or 16 bit image file readable by DevIL
*A 8 or 16 bit RAW file, such as generated by Terragen

'''HeightScale and HeightOffset:''' The actual height of a heightmap pixel is calculated scaled by HeightScale, after which HeightOffset is added to it (height = pixel * HeightScale + HeightOffset)

== Texturing method specification (how are the textures applied) ==

=== Texture stages/layers ===

Texturing of SM3 terrains works by a series of texture layers that are applied on top of eachother. These layers are called &quot;texture stages&quot;. The stages can be added, multiplied, or alpha blended with the previous stage. This is defined by the stage operation. 

The number of stages is given with the tag NumTextureStages like:

 NumTextureStages=2;

Keep in mind that the stages are directly executed on your videocard. This means the more stages you make the slower the map will render. 
 
The first stage never has an operation:

 	[texstage0]
 	{
 		source=Snow;
 	}

Following stages can have &quot;operation=add&quot;, &quot;operation=mul&quot;, &quot;operation=blend&quot;

==== Operation Add ====

The add operation needs a texture to add to the previous stage, which is specified with the &quot;source=TextureName&quot; tag. The texture specification is explained below.

 	[texstage1]
 	{
 		operation=add;
 		source=CrackedDirt;
 	}

==== Operation Multiply ====

Same as add, but with operation=mul

 	[texstage1]
 	{
 		operation=mul;
 		source=CrackedDirt;
 	}

==== Operation Blend ====

The blend operation does alpha blending with an extra grayscale alpha texture. Specification of these alpha textures (&quot;Blendmaps&quot;) is explained later in this doc. The blend operation needs a &quot;blender=BlenderName&quot; tag to work. I'm guessing most maps will only be using this operation. 

 	[texstage1]
 	{
 		operation=blend; 
 		source=CrackedDirt;
 		blender=RockBlender1026;
 	}

The avaiable operations are limited to add/mul/blend for techical reasons:
This way even the most complex maps can be executed with multipass operations on any card with at least 2 textures units. It would even work on a Riva TNT I think.

Obviously because the first stage doesn't have any previous stage, the operation of the first stage is ignored

=== Textures ===

==== Tiled textures ====

The operations usually have &quot;source=texturename&quot; in them, which points to the name of a tiled texture.

Example:

 	NumTextureStages=1;
 	[texstage0]
 	{
 		source=Snow;
 	}

 	[Snow]
 	{
 		File=Maps/dry_data/Snow_Sand.jpg;
 		TileSize=20;
 	}

Tilesize is how big a single tile is in the 3D spring world, when the texture is tiled across the map. Imagine a heightmap of 1025x1025 (In spring world space this is 1024*8= 8192x8192 units). 
When you set tilesize=4096, you will see the complete texture 4 times on the map (2 by 2). Set it to 8192 and you'll see the map completely covered. 



==== Blendmap specification ====

Blendmaps can either be loaded from file or generated from the terrain. They are stretched across the full terrain, so in combination with the blend operation you can specify exactly where you want to see a specific texture on the terrain.

===== Blendmaps from file =====

Blendmaps can be loaded from any grayscale file that DevIL can load:

 	[RockBlender]
 	{
 		Blendmap=1;
 		File=Maps/dry_data/1026_bm_small.png;
 	}

===== Generated blendmaps =====

Blendmaps can be generated from the heightmap. The final value is computed by

 blendmap_value = SlopeTerm * HeightTerm * coverage * noise

The slope of the terrain is a value between 0 and 1, with 0 being flat and 1 being completely steep. Ofcourse with a heightmap the slope can only be near 1 and not exactly 1

The height of the terrain is between 0 and 1 (the minimum and maximum height value)
If the height is between minHeight and maxHeight, HeightTerm will be 1. maxHeightFuzzy and minHeightFuzzy determine the &quot;border&quot; size between having a HeightTerm of 0 and a HeightTerm of 1. 


GeneratorLOD indicates at which resolution the blendmap should be generated. The blendmap size will be (heightmapsize-1) / (2 ^ generatorLOD). For example with a heightmap width of 1025 and a generatorlod of 2, the blendmap size will be 1024/4=256.

(Images illustrating this will be added later)

== Infomaps ==

The infomaps section defines the metal map and typemap. Both should be 8 bit images in any format DevIL accepts.

== Image file sizes ==

* The heightmap has to be square and its dimensions have to be a power-of-two + 1, like 257x257, 513x513, 1025x1025
* The blendmaps have to be square too, with power-of-two dimensions like: 256x256, 512x512, 1024x1024.  They should be smaller than the heightmap.
* The tiled textures should have power-of-two dimensions, but don't have to be square
* The minimap can be anything, but it will be resized to an image of 1024x1024. Specifying a 1024x1024 will allow faster loading because no resizing is needed.
* Typemap and metalmaps dimensions should be (heightmapsize - 1) / 2, so when the heightmap is 1025x1025, the typemap is 512x512.
* The heightmap can be any [http://openil.sourceforge.net/features.php DevIL] supported format, or RAW such as exported by terragen. All the other maps/texture files can only be a DevIL format.

== Feature placement ==

The feature specification is done with a list of feature type names in the SM3 itself, and with a binary datafile that contains all the feature positions, orientations.
Feature types are specified like this:

 	[FeatureTypes]
 	{
 		NumTypes=4;
 		type0=TreeType0;     // a tree
 		type1=MyFeature; 
 		type2=MyOtherFeature;
 		type3=GeoVent;            // a geothermal	
 	}

The feature binary file should be made with an editor. I'm hoping Maelstrom will add feature placing to his startpoint editor, but until then there's only http://user.supradigital.org/jcnossen/FeaturePlacer.zip

[[Image:Featureplacer.png]]

The &quot;Pos:&quot; fields are ment to enter the feature X,Y,Z. You can use zero for Y because spring will automatically put the feature on the ground when it loads.
Type is the index into the feature type list specified in the SM3 file.

The feature data file should be linked to the SM3 with:

 [MAP]
 {
 		// other map tags ...
 	featuredata=FeatureDataFileName;
 }

== Minimap ==

The minimap is loaded from an image file that you have to set in the MAP section of the sm3 file.
Example:

 [MAP]
 {
 		// other map tags ...
 	minimap=maps/data/minimap.png;
 }

== TODO ==

* fix bugs</text>
      <sha1>jqaz5odxkbb7yf92xqg0m1rb9ihgnhr</sha1>
    </revision>
  </page>
  <page>
    <title>SOP</title>
    <ns>0</ns>
    <id>1869</id>
    <revision>
      <id>19126</id>
      <parentid>11683</parentid>
      <timestamp>2010-03-13T21:15:37Z</timestamp>
      <contributor>
        <username>Koshi</username>
        <id>2371</id>
      </contributor>
      <comment>fix category</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3190">== Strategic, Operational &amp; Tactical Warfare ==

===Introduction===
Understanding the distinctions among strategic, operational, and tactical warfare is important in devising a successful battle plan. However, the distinctions can be a bit fuzzy; there is overlap at each level.

===Strategy===
Strategic planning deals with the overall objective of the war - in this case, to destroy every enemy unit before being destroyed yourself. Strategy is at the national scale in the real world, which would be analogous to the scale of the whole of the player's units and buildings at the TAS scale. Strategy integrates economic, political, and military forces to achieve the final goal. Strategic goals are those that lead to the ultimate strategic objective: destruction of the enemy. They tend to be general rather than specific: for example, &quot;destroy the enemy's energy generation capacity&quot;.

===Operational Planning===
Operational planning provides a specific means for reaching a strategic goal. Operational planning deals with where, when, and how forces should be employed in order to reach a strategic goal. For example, if the objective is to &quot;destroy the enemy's energy generation capacity,&quot; the operational components of this would be to locate the enemy's energy generation buildings, assess the enemy forces available to defend the respective buildings, determine the best route to take to destroy the enemy building with the least enemy resistance, and deploy forces in such a way as to achieve the strategic goal. Operational goals tend to be on a more specific level than strategic ones; strategic goals can be broken down into one or several operational goals. An example of an operational goal may be &quot;destroy the fusion plant at the north of the enemy's base&quot;.

===Tactics===
Tactical planning involves the use of force to best achieve the intermediate steps to the operational goal. Tactics involves where and how to best employ each unit so that its destructive potential is maximized, and the enemy's destructive potential against it and the whole force is minimized. Tactical planning will destroy single enemy defense structures, groups of defense structures, units, and so on. A good example of tactical planning might be &quot;this group of Goliaths will advance and destroy the enemy's Annihilator defending his fusion plant&quot;.

===Conclusion===
Why is it important to understand this? In order to win the game, you must set strategic goals that provide the best way to win. How is the game won? The game is not won on the battlefield; it is won on an economic level. You must set strategic goals in such a way as to maximize your own economic production over the length of the game, and minimize your enemy's. Operational goals allow you to break strategic goals down so that you can act with a sense of purpose; they give a concrete way of determining where, when, and how to use your forces. Tactics allows you to use your units to their maximum potential, thereby increasing the number of units that you can have because the need to replace losses will be less. 

-Felix the Cat

''' [[Strategy_and_Tactics|&lt;- Back to Strategy and Tactics page]]'''
[[Category: Strategy]]</text>
      <sha1>potlgaoxsp0omo577xiglbovtwrbo3f</sha1>
    </revision>
  </page>
  <page>
    <title>SPADS</title>
    <ns>0</ns>
    <id>3606</id>
    <revision>
      <id>31411</id>
      <parentid>30872</parentid>
      <timestamp>2021-01-28T06:27:27Z</timestamp>
      <contributor>
        <username>Bibim</username>
        <id>2690</id>
      </contributor>
      <comment>/* Development */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1452">&lt;span style=&quot;font-weight:bold; font-size:large;&quot;&gt;SPADS links&lt;/span&gt;
----

== Support ==
*[[SPADS:Installation|Installation]]
*[https://springrts.com/phpbb/viewforum.php?f=88 Discussion in Spring forums]
*[http://github.com/Yaribz/SPADS/issues Issue tracker]

== Reference documents ==
*[http://planetspads.free.fr/spads/doc/spadsDoc.html Commands and settings reference guide]
*[http://planetspads.free.fr/spads/conf/templates/ Configuration templates]
*[http://springrts.com/wiki/SPADS_official_plugins_list Official plugins list]
== Memos ==
*[http://springrts.com/wiki/SPADS_update_procedure_for_new_Spring_version SPADS update procedure for new Spring version]
*[http://planetspads.free.fr/spads/repository/UPDATE SPADS manual update procedure for new major SPADS version]
*[http://springrts.com/wiki/SPADS_plugin_install_notes Plugin installation notes]
*[http://springrts.com/wiki/SPADS_PerlUnitSync_module_generation_for_Windows PerlUnitSync module generation for Windows]
== Development ==
*[https://github.com/Yaribz/SPADS Source code]
*[http://planetspads.free.fr/spads/repository/CHANGELOG Detailed changelog]
*[http://planetspads.free.fr/spads/doc/spadsPluginApiDoc.html Plugin API documentation]
*[http://springrts.com/wiki/SPADS_plugin_development Plugin development tutorials (Perl)]
*[http://springrts.com/wiki/SPADS_plugin_development_(Python) Plugin development tutorials (Python)]

__NOTOC__
[[Category:Autohosts]]
[[Category:SPADS]]</text>
      <sha1>q7ctc8nxj8xr7bc30ywxsstqowgjpe5</sha1>
    </revision>
  </page>
  <page>
    <title>SPADS:Installation</title>
    <ns>0</ns>
    <id>3833</id>
    <revision>
      <id>30878</id>
      <parentid>30877</parentid>
      <timestamp>2019-01-27T04:17:38Z</timestamp>
      <contributor>
        <username>Maddox</username>
        <id>2934</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3330">To install SPADS on '''Linux/UNIX''', you have to:
===============================================
&lt;ol&gt;&lt;li&gt;Ensure Perl, swig and g++ are installed and available in your PATH (all standard Perl core modules must be available, on some systems such as RedHat/Fedora/CentOS this requires installing a metapackage usually named &quot;perl-core&quot;)&lt;/li&gt;
&lt;ol&gt;•  Perl comes installed in Ubuntu, but you'll probably need [https://cpan.metacpan.org/authors/id/S/SH/SHAY/perl-5.28.1.tar.gz a more recent version]. After downloading it at the root, enter the following commands:
    &lt;ol&gt;•  tar -xzf perl-5.10.1.tar.gz&lt;/ol&gt;
    &lt;ol&gt;•  cd perl-5.10.1&lt;/ol&gt;
    &lt;ol&gt;•  ./Configure -des -Dprefix=/usr/local&lt;/ol&gt;
    &lt;ol&gt;•  make&lt;/ol&gt;
    &lt;ol&gt;•  make test&lt;/ol&gt;
    &lt;ol&gt;•  sudo make install&lt;/ol&gt;
    &lt;ol&gt;•  export PATH=$PATH:/usr/local/bin/perl&lt;/ol&gt;
&lt;/ol&gt;
&lt;ol&gt;•  To check if perl is installed, at your ssh connection prompt enter: '''perl -v'''&lt;/ol&gt;
&lt;ol&gt;•  To install Swig in Ubuntu or other debian-based Linux distros, enter: '''apt install swig'''&lt;/ol&gt;
&lt;ol&gt;•  To install g++, the C++ compiler: 
    &lt;ol&gt;•  sudo apt-get update&lt;/ol&gt;
    &lt;ol&gt;•  sudo apt-get install g++&lt;/ol&gt;
&lt;/ol&gt;
&lt;li&gt;Run '''perl spadsInstaller.pl''' (SPADS will be installed in current directory)&lt;/li&gt;
&lt;li&gt;Check your configuration files, in particular &quot;spads.conf&quot;, &quot;hostingPresets.conf&quot; and &quot;battlePresets.conf&quot;&lt;/li&gt;
&lt;ol&gt;•  In hostingPresets you'll probably want to edit '''battleName''' to what will be shown in Spring Lobby&lt;/ol&gt;
&lt;li&gt;Then you can run SPADS as follows:
'''perl spads.pl &lt;spadsConfPath&gt;''' (for instance: '''perl spads.pl etc/spads.conf''')&lt;/li&gt;
&lt;/ol&gt;
&lt;br /&gt;

To install SPADS on '''Windows''', you have to:

=============================================
&lt;ol&gt;&lt;li&gt; Install ActivePerl Windows (x86) (available here: http://www.activestate.com/activeperl/downloads) or Strawberry Perl (32bit) (available here: http://strawberryperl.com)&lt;/li&gt;
&lt;li&gt; Ensure your Perl bin directory is in your PATH environement variable&lt;/li&gt;
&lt;li&gt; Open a Command shell, go in the directory where you extracted SPADS installation files, and run &quot;perl spadsInstaller.pl&quot; (SPADS will be installed in current directory)&lt;/li&gt;
&lt;li&gt; Check your configuration files, in particular &quot;spads.conf&quot;, &quot;hostingPresets.conf&quot; and &quot;battlePresets.conf&quot;&lt;/li&gt;
&lt;/ol&gt;
Then you can run SPADS as follows:
&quot;perl spads.pl &lt;spadsConfPath&gt;&quot; (for instance: &quot;perl spads.pl etc/spads.conf&quot;)



To install SPADS on '''macOS''', you have to:
============================================
&lt;ol&gt;&lt;li&gt; Ensure Perl, swig and g++ are installed and available in your PATH&lt;/li&gt;
&lt;li&gt; Install Spring server (check the locations of the unitsyc library, &quot;spring-dedicated&quot; and &quot;Spring data directory&quot;, they will be asked during SPADS installation)&lt;/li&gt;
&lt;li&gt;Install at least one mod in Spring data directory&lt;/li&gt;
&lt;li&gt;Run &quot;./spadsInstaller.pl&quot; (SPADS will be installed in current directory)&lt;/li&gt;
&lt;li&gt;Check your configuration files, in particular &quot;spads.conf&quot;, &quot;hostingPresets.conf&quot; and &quot;battlePresets.conf&quot;&lt;/li&gt;&lt;/ol&gt;

Then you can run SPADS as follows:
&quot;./spads.pl &lt;spadsConfPath&gt;&quot; (for instance: &quot;./spads.pl etc/spads.conf&quot;)

&lt;br /&gt;&lt;br /&gt;
If you have any problem, you can contact the SPADS creator, ''bibim'', directly in SpringLobby or in the [https://springrts.com/phpbb/viewforum.php?f=88 SPADS subforum]
&lt;br /&gt;&lt;br /&gt;</text>
      <sha1>ct3slwwyzzsl91839gdfz7fnq1oxilp</sha1>
    </revision>
  </page>
  <page>
    <title>SPADS Inline::Python installation guide</title>
    <ns>0</ns>
    <id>3860</id>
    <revision>
      <id>31632</id>
      <parentid>31420</parentid>
      <timestamp>2021-10-05T07:07:13Z</timestamp>
      <contributor>
        <username>Bibim</username>
        <id>2690</id>
      </contributor>
      <comment>/* Method 1: Using cpanminus to install latest version from GitHub */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7382">= Introduction =

&lt;code&gt;Inline::Python&lt;/code&gt; is a Perl module which allows interactions between Perl code and Python code. SPADS uses it to communicate with plugins coded in Python.

Unfortunately the current stable release of this module suffers from a bug which makes Perl strings appear as byte strings when used with Python 3 (Python 2 is unaffected). This is not a blocking problem, as Python can easily convert these data if needed and SPADS plugin API offers dedicated functions to deal with the problem (cf the [http://planetspads.free.fr/spads/doc/spadsPluginApiDoc.html#Perl-strings-conversions PYTHON SPECIFIC NOTES - Perl strings conversions] section of the Plugin API documentation). However, a cleaner way to solve this problem is to install a fixed version of the module, directly from the official module maintainer repository. The remaining of this document will detail the different ways to install &lt;code&gt;Inline::Python&lt;/code&gt;, on Linux and Windows.

&lt;br&gt;
= Installing Inline::Python on Linux =
&lt;br&gt;
== Method 1: Using cpanminus to install latest version from GitHub ==
&lt;code&gt;cpanminus&lt;/code&gt; is a lightweight package manager for Perl, which is able to install Perl modules directly from Git repositories. This is very useful for &lt;code&gt;Inline::Python&lt;/code&gt; installation because only the latest version from the module maintainer repository includes the fix for Perl string conversions with Python 3.

The first step consists in installing &lt;code&gt;cpanminus&lt;/code&gt; (if not already installed on your system). To do that you can usually use the package manager of your Linux distribution. For example, for Debian based distributions: &lt;code&gt;apt-get install cpanminus&lt;/code&gt;, or for Red Hat based distributions: &lt;code&gt;dnf install perl-App-cpanminus&lt;/code&gt; (for other cases, check [https://metacpan.org/pod/App::cpanminus#INSTALLATION the INSTALLATION section of cpanminus documentation]).

In order to be able to install Perl package directly from Git repositories, Git must also be installed on the system. This can be done using following command for example on Debian based distributions: &lt;code&gt;apt-get install git&lt;/code&gt;

Finally, building the &lt;code&gt;Inline::Python&lt;/code&gt; module requires having Python headers available on the system, as well as the &lt;code&gt;distutils&lt;/code&gt; Python package. You can install them using following command for example on Debian based distributions: &lt;code&gt;apt-get install python3-dev python3-distutils&lt;/code&gt;

Once &lt;code&gt;cpanminus&lt;/code&gt; and the dependencies are installed, &lt;code&gt;cpanminus&lt;/code&gt; can be used to install the latest version of &lt;code&gt;Inline::Python&lt;/code&gt; from module maintainer's repository. This can be done simply by entering following command (with root privileges if you are using the system Perl):&lt;br&gt;
&lt;code&gt;&lt;nowiki&gt;cpanm https://github.com/niner/inline-python-pm.git&lt;/nowiki&gt;&lt;/code&gt;

&lt;br&gt;

== Method 2: Using the package manager of your Linux distribution ==
This is the easiest way to install &lt;code&gt;Inline::Python&lt;/code&gt; (if your distribution supports it), as it automatically downloads and installs a package specifically prepared for your distribution. However, this method installs the stable release of &lt;code&gt;Inline::Python&lt;/code&gt;, which suffers from the string conversion bug with Python 3 explained in introduction. So this method is only recommended if you don't plan to use Python 3 or if the installation method based on &lt;code&gt;cpanminus&lt;/code&gt; failed.

For this method you just need to find the name of the system package containing the &lt;code&gt;Inline::Python&lt;/code&gt; Perl module and install it on your system.&lt;br&gt;
For example, for Debian based distributions: &lt;code&gt;apt-get install libinline-python-perl&lt;/code&gt;&lt;br&gt;
For Red Hat based distributions: &lt;code&gt;dnf install perl-Inline-Python&lt;/code&gt;

&lt;br&gt;
== Method 3: Using cpan ==
&lt;code&gt;cpan&lt;/code&gt; is the standard tool included with Perl to install modules from the [https://www.cpan.org/ Comprehensive Perl Archive Network]. Unfortunately, only the current stable releases of the modules can easily be installed this way, so this method should only be reserved to cases where all other installation methods failed.

To install &lt;code&gt;Inline::Python&lt;/code&gt; using &lt;code&gt;cpan&lt;/code&gt;, simply enter following command (with root privileges if you are using the system Perl):&lt;br&gt;
&lt;code&gt;cpan Inline::Python&lt;/code&gt;

&lt;br&gt;
= Installing Inline::Python on Windows =
&lt;br&gt;
== Step 1: Installing cpanminus ==
&lt;code&gt;cpanminus&lt;/code&gt; is a lightweight module manager for Perl, which is able to install Perl modules directly from Git repositories and allows interactive mode installations.

If your are using Strawberry Perl, &lt;code&gt;cpanminus&lt;/code&gt; should be pre-installed (you can check it by trying the &lt;code&gt;cpanm&lt;/code&gt; command in a console windows). If you are using another Perl distribution and &lt;code&gt;cpanminus&lt;/code&gt; isn't pre-installed, you should be able to use the packet manager of your Perl distribution (&lt;code&gt;ppm&lt;/code&gt; for example for old ActiveState Perl releases) to install &lt;code&gt;cpanminus&lt;/code&gt;. You can also use the generic default Perl module manager &lt;code&gt;cpan&lt;/code&gt; to install it using following command: &lt;code&gt;cpan cpanminus&lt;/code&gt;

&lt;br&gt;
== Step 2: Using cpanminus to install Inline::Python ==
As explained in introduction, the current stable release of &lt;code&gt;Inline::Python&lt;/code&gt; suffers from the string conversion bug with Python 3, so it is recommended to install the latest version instead. Unfortunately, the installation script included in the latest version on the module maintainer repository has some problems when installing on Windows. I created my own fork on GitHub to fix these installation problems. As long as the module maintainer didn't merge my fixes in his repository, I recommend using my fork to install the latest version of &lt;code&gt;Inline::Python&lt;/code&gt; on Windows, using following command:&lt;br&gt;
&lt;code&gt;&lt;nowiki&gt;cpanm https://github.com/Yaribz/inline-python-pm.git&lt;/nowiki&gt;&lt;/code&gt;

&lt;br&gt;
If for some reason the installation of the latest version of &lt;code&gt;Inline::Python&lt;/code&gt; fails, you can try to install the stable release instead. Unfortunately, the current stable release of &lt;code&gt;Inline::Python&lt;/code&gt; doesn't install automatically on Windows due to broken Python installation detection and one test which is coded for Linux system only and which must be skipped. Consequently, &lt;code&gt;cpanminus&lt;/code&gt; must be run in interactive mode and with a flag to force installation despite the failing test, using this command:&lt;br&gt;
&lt;code&gt;cpanm --interactive -f Inline::Python&lt;/code&gt;

The install script will then ask 4 questions:
# &lt;code&gt;Use which? [1]&lt;/code&gt; Here you must enter the full path of your &lt;code&gt;python.exe&lt;/code&gt; file from your Python installation (warning: paths containing spaces are not supported by the installer). For example: &lt;code&gt;C:\Python\python.exe&lt;/code&gt; 
# &lt;code&gt;Enter extra libraries (e.g. -lfoo -lbar) [None]&lt;/code&gt; Here you can press enter, as no additional library should be needed for standard Python installation.
# &lt;code&gt;Which? Or enter another. [1]&lt;/code&gt; Here you need to enter the digit corresponding to the library with 2 digits in its name. For example: &lt;code&gt;2&lt;/code&gt; (to select entry &lt;code&gt;2) C:/Python/libs/python39.lib&lt;/code&gt;)
# &lt;code&gt;Which? Or enter another. [1]&lt;/code&gt; Here you can press enter as the install script should have auto-detected the include location of your Python installation correctly.</text>
      <sha1>o8uzdsiq3lp5o9y6jiteedhrf3njv25</sha1>
    </revision>
  </page>
  <page>
    <title>SPADS PerlUnitSync module generation for Windows</title>
    <ns>0</ns>
    <id>3592</id>
    <revision>
      <id>29739</id>
      <parentid>28150</parentid>
      <timestamp>2015-11-14T10:06:22Z</timestamp>
      <contributor>
        <username>Bibim</username>
        <id>2690</id>
      </contributor>
      <comment>obsolete</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1064">&lt;span class=warning&gt;This procedure is obsolete since SPADS 0.11.36, it is just kept here for reference. SPADS now uses the Win32::API module for unitsync library interface on Windows, it doesn't require generating Swig wrappers anymore.&lt;/span&gt;

This document describes how to generate the PerlUnitSync wrapper files for Windows. It is aimed at SPADS maintainer only. By default SPADS automatically downloads these files from maintainer's repository, so you don't need to regenerate them unless you want to compile your own wrapper for specific unitsync versions.

== Requirements ==

Following components must be installed on the system and added to your PATH environment variable:
*Swig
*GCC Version 4
*GNU Binutils
*MinGW API for MS-Windows
*MinGW Runtime
*MinGW Utilities

The PERL5_LIB environment variable must be set to the Perl5 library of your Perl installation (example: &quot;C:\Perl\lib\CORE\perl516.lib&quot;)

== Procedure ==

The PerlUnitSync module generation must be launched from SPADS directory as follows:
    perl spadsInstaller.pl -g

[[Category:SPADS]]</text>
      <sha1>0jj8o11lu3z1eort5re80p97cqq34uz</sha1>
    </revision>
  </page>
  <page>
    <title>SPADS official plugins list</title>
    <ns>0</ns>
    <id>3517</id>
    <revision>
      <id>31640</id>
      <parentid>31514</parentid>
      <timestamp>2021-10-25T21:54:19Z</timestamp>
      <contributor>
        <username>Bibim</username>
        <id>2690</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2932">This page lists all official SPADS plugins, with basic descriptions (more information is usually available in the README file of the plugin). Refer to [http://springrts.com/wiki/SPADS_plugin_install_notes SPADS plugin install notes] for installation instructions.

== [http://planetspads.free.fr/spads/plugins/AutoPauseOnVote.pm AutoPauseOnVote] ==
automatically pauses the game when a vote is called

== [http://planetspads.free.fr/spads/plugins/AutoRegister.zip AutoRegister] ==
automatically registers the lobby account used by SPADS if needed

== [http://planetspads.free.fr/spads/plugins/AutoSpec.zip AutoSpec] ==
automatically warns/specs unsync/unready players with configurable delays and thresholds

== [http://planetspads.free.fr/spads/plugins/ClientStatusEvents.zip ClientStatusEvents] ==
extends the plugin API with new event-based callbacks on client status changes

== [http://planetspads.free.fr/spads/plugins/ClusterManager.zip ClusterManager] ==
turns a SPADS instance into a manager of clusters of SPADS instances

== [http://planetspads.free.fr/spads/plugins/CustomAliases.zip CustomAliases] ==
makes it possible to define your own aliases for all SPADS commands

== [http://planetspads.free.fr/spads/plugins/CustomTeamColors.zip CustomTeamColors] ==
makes it possible to customize the team colors applied by SPADS

== [http://planetspads.free.fr/spads/plugins/DownloadArchives.zip DownloadArchives] ==
adds !dlmap and !dlmod commands for map and mod downloads

== [http://planetspads.free.fr/spads/plugins/DynamicMapRotation.zip DynamicMapRotation] ==
changes rotation map list automatically according to battle context

== [http://planetspads.free.fr/spads/plugins/FirstWelcomeMsg.zip FirstWelcomeMsg] ==
sends a message to a player the first time he joins the battle only

== [http://planetspads.free.fr/spads/plugins/InGameMute.zip InGameMute] ==
adds !mute, !unmute and !mutes commands for in-game mutes

== [http://planetspads.free.fr/spads/plugins/PreventVoteExploit.zip PreventVoteExploit] ==
tries to prevent vote exploits using multi accounts

== [http://planetspads.free.fr/spads/plugins/RecommendedMap.zip RecommendedMap] ==
chooses map automatically depending on game type and number of players

== [http://planetspads.free.fr/spads/plugins/RequiredChannel.zip RequiredChannel] ==
forces players to be in a channel before being able to join the battle

== [http://planetspads.free.fr/spads/plugins/Resign.zip Resign] ==
adds !resign command and specific vote system to resign as a team

== [http://planetspads.free.fr/spads/plugins/ReverseLookup.zip ReverseLookup] ==
shows hostnames near IP addresses in !status output

== [http://planetspads.free.fr/spads/plugins/SpringieExtension.zip SpringieExtension] ==
implements Springie/Zero-K lobby protocol extension

== [http://planetspads.free.fr/spads/plugins/ZeroK.zip ZeroK] ==
implements Zero-K specific functionalities

__NOTOC__
[[Category:SPADS]]</text>
      <sha1>lwmiliuz9jr6kgg10ezes5bz9mur0wt</sha1>
    </revision>
  </page>
  <page>
    <title>SPADS plugin development</title>
    <ns>0</ns>
    <id>3460</id>
    <revision>
      <id>31435</id>
      <parentid>31434</parentid>
      <timestamp>2021-01-28T13:19:37Z</timestamp>
      <contributor>
        <username>Bibim</username>
        <id>2690</id>
      </contributor>
      <comment>/* Writing plugin code */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20681">= Introduction =

SPADS is an autohost system coded in Perl, it supports both Perl and Python plugins. This tutorial deals with Perl plugin development only (for Python plugin development another tutorial is available [https://springrts.com/wiki/SPADS_plugin_development_(Python) here]).

SPADS plugins are object-oriented modules. It is strongly recommended to already know Perl basics before starting Perl plugin development (a brief introduction to Perl is available [https://perldoc.perl.org/perlintro here]).

&lt;br&gt;
= Simple plugin tutorial (HelloWorld) =

In this section we are going to write our first SPADS plugin. So let's start simple with a good old &quot;Hello world&quot;. The plugin will answer &quot;Hello World&quot; to anyone saying &quot;Hello&quot; in a private message to SPADS.

== Choosing our template ==

Some plugin templates are available to help you bootstrap your plugin development. The commented versions of these templates are available [http://planetspads.free.fr/spads/plugins/templates/commented/ here], while the raw versions (without comment) are available [http://planetspads.free.fr/spads/plugins/templates/raw/ here] (the &lt;code&gt;.py&lt;/code&gt; files must be ignored for this tutorial, these are the Python versions of the templates).

Our first plugin will be very basic, so we will use the simplest template: &lt;code&gt;MySimplePlugin.pm&lt;/code&gt;. Let's download [http://planetspads.free.fr/spads/plugins/templates/commented/MySimplePlugin.pm the commented version of this template] and open it with our favorite editor. As you can see, the code is heavily commented (actually every single line of code is explained), so I won't go into further details here. Now that you've read and understood the commented template, let's actually start plugin development.

== Adapting the template ==

First we must name our plugin. Let's call it &lt;code&gt;HelloWorld&lt;/code&gt;. We have to rename the downloaded template from &lt;code&gt;MySimplePlugin.pm&lt;/code&gt; to &lt;code&gt;HelloWorld.pm&lt;/code&gt;, and edit it to replace &lt;code&gt;MySimplePlugin&lt;/code&gt; by &lt;code&gt;HelloWorld&lt;/code&gt; in the source code.

== Checking SPADS plugin system ==

Before going into actually writing new code, let's just check that the plugin works in SPADS (if not done yet, you have to configure the [http://planetspads.free.fr/spads/doc/spadsDoc_All.html#global:pluginsDir SPADS plugins directory] in your &lt;code&gt;spads.conf&lt;/code&gt; configuration file and reload SPADS configuration).

We have to move our new plugin (&lt;code&gt;HelloWorld.pm&lt;/code&gt;) in the SPADS plugins directory so that SPADS can find it. Then, as a privileged SPADS user, we can type following command (in a private message to SPADS for example): &lt;code&gt;!plugin HelloWorld load&lt;/code&gt;. SPADS should answer &lt;code&gt;Loaded plugin HelloWorld.&lt;/code&gt;, which indicates the plugin has been loaded successfully.

If all is ok, we can let this SPADS instance running like this, we will get back to it later.

== Writing plugin code ==

Writing plugin code mainly consists in implementing plugin callbacks and calling plugin API functions, as specified in [http://planetspads.free.fr/spads/doc/spadsPluginApiDoc.html SPADS plugin API documentation].

So we want our plugin to react to some private messages sent to SPADS. To do so we have to implement a plugin callback function which is called by SPADS core each time a lobby private message is received: this is the [http://planetspads.free.fr/spads/doc/spadsPluginApiDoc.html#onPrivateMsg-self-userName-message onPrivateMsg] event-based callback.

We also want our plugin to send a private message, to do so we can call the plugin API function [http://planetspads.free.fr/spads/doc/spadsPluginApiDoc.html#sayPrivate-user-message sayPrivate].

Now that we have identified the API functions that we need, we can actually implement our plugin. Here is a commented implementation example of the &lt;code&gt;onPrivateMsg&lt;/code&gt; callback, which will answer &lt;code&gt;Hello World&lt;/code&gt; to anyone saying &lt;code&gt;Hello&lt;/code&gt; in a private message to SPADS:
&lt;syntaxhighlight lang=&quot;perl&quot;&gt;
sub onPrivateMsg {
  
  # $self is the plugin object (first parameter of all plugin callbacks)
  # $userName is the name of the user sending the private message
  # $message is the message sent by the user
  my ($self,$userName,$message)=@_;
  
  # We check the message sent by the user is &quot;Hello&quot;
  if($message eq 'Hello') {
    
    # We send our wonderful Hello World message
    sayPrivate($userName,'Hello World');
    
  }
  
  # We return 0 because we don't want to filter out private messages
  # for other SPADS processing
  return 0;
  
}&lt;/syntaxhighlight&gt;

All we have to do now is adding this callback declaration in our &lt;code&gt;HelloWorld.pm&lt;/code&gt; file located in SPADS plugins directory. We obtain [http://planetspads.free.fr/spads/plugins/tutorials/HelloWorld.pm this fully functional HelloWorld plugin].

== Testing our plugin ==

Let's test this plugin in SPADS. First, since we modified the plugin source code, we have to tell SPADS to reload the plugin as follows: &lt;code&gt;!plugin HelloWorld reload&lt;/code&gt;. SPADS should answer &lt;code&gt;Reloaded plugin HelloWorld.&lt;/code&gt;, which indicates the plugin has been reloaded successfully.

Finally, just say &lt;code&gt;Hello&lt;/code&gt; to SPADS in a private message. Congratulations for your first SPADS plugin! ;)

&lt;br&gt;
= Configurable plugin tutorial (ForbiddenWords) =

In this section we are going to write our first configurable SPADS plugin (a configurable plugin has its own configuration file, named after the plugin name but with &lt;code&gt;.conf&lt;/code&gt; extension). This plugin will monitor all messages said by players in the battle lobby, and will kick players who use swear words.

== Specifying our configuration parameters ==

The first step of writing a configurable plugin is to choose how we will configure it. In our example, we will use 2 configuration parameters: &lt;code&gt;words&lt;/code&gt; will contain the list of forbidden words, and &lt;code&gt;immuneLevel&lt;/code&gt; will contain the minimum autohost access level to be immune regarding these forbidden words checks.

We choose to make &lt;code&gt;words&lt;/code&gt; a global setting (unmodifiable, not impacted by preset change), and &lt;code&gt;immuneLevel&lt;/code&gt; a preset setting (modifiable, can be impacted by preset change). The &lt;code&gt;words&lt;/code&gt; global setting will have no restriction (can be empty, can contain any character...), whereas the &lt;code&gt;immuneLevel&lt;/code&gt; preset setting will only be allowed to be an integer or integer range.

== Preparing the template ==

Once we have a clear view of our configuration settings, we can start adapting the template for our needs. Since we are making a configurable plugin, this time we will download [http://planetspads.free.fr/spads/plugins/templates/commented/MyConfigurablePlugin.pm the configurable plugin template] and its associated [http://planetspads.free.fr/spads/plugins/templates/commented/MyConfigurablePlugin.conf configuration file example].

First, let's take a look at the configuration file example. This is a just a basic configuration file containing one global setting example and one preset setting example. Let's modify this file to match the configuration we chose as follows (don't forget to rename the file from &lt;code&gt;MyConfigurablePlugin.conf&lt;/code&gt; to &lt;code&gt;ForbiddenWords.conf&lt;/code&gt; also):
{|style=&quot;margin-top: 10px; margin-left: 40px; background-color: #38474E; border: 1px solid black; border-color: #20292E&quot; |
|
 # This is our global setting (can't be changed without reloading the configuration)
 words:ass;asshole;bastard;bitch;cunt;fuck;motherfucker;shit;whore
 
 # We must define our preset setting in the default preset at least
 [default]
 
 # This is our preset setting, which can be changed with &quot;!plugin ... set ...&quot;
 # or by loading a preset.
 # &quot;100&quot; is the default value, and any integer between 0 and 140 is allowed
 immuneLevel:100|0-140
|}
Then we must prepare the plugin template itself, by renaming it from &lt;code&gt;MyConfigurablePlugin.pm&lt;/code&gt; to &lt;code&gt;ForbiddenWords.pm&lt;/code&gt; and editing it to replace &lt;code&gt;MyConfigurablePlugin&lt;/code&gt; by &lt;code&gt;ForbiddenWords&lt;/code&gt; in the source code. We must also adapt the template so that it uses the configuration settings we chose. This is done by modifying the &lt;code&gt;%globalPluginParams&lt;/code&gt; and &lt;code&gt;%presetPluginParam&lt;/code&gt; declarations as follows:
&lt;syntaxhighlight lang=&quot;perl&quot;&gt;
# We define one global setting &quot;words&quot; and one preset setting &quot;immuneLevel&quot;.
# &quot;words&quot; has no type associated (no restriction on allowed values)
# &quot;immuneLevel&quot; must be an integer or an integer range
# (check %paramTypes hash in SpadsConf.pm for a complete list of allowed
# setting types)
my %globalPluginParams = ( words =&gt; [] );
my %presetPluginParams = ( immuneLevel =&gt; ['integer','integerRange'] );
&lt;/syntaxhighlight&gt;

== Writing plugin code ==

We want our plugin to react to messages said in the battle lobby. There is no dedicated callback for this event in [http://planetspads.free.fr/spads/doc/spadsPluginApiDoc.html SPADS plugin API documentation], so we have to set up our own handler on the [http://springrts.com/dl/LobbyProtocol/ProtocolDescription.html#SAIDBATTLE:server SAIDBATTLE lobby command]. To do so we have to call the plugin API function [http://planetspads.free.fr/spads/doc/spadsPluginApiDoc.html#addLobbyCommandHandler-handlers-priority-caller addLobbyCommandHandler]. We will call this function at the end of our plugin constructor as follows, so that it will be set up directly when the plugin is loaded:
&lt;syntaxhighlight lang=&quot;perl&quot;&gt;
  [...]
  
  # We set up a lobby command handler on SAIDBATTLE
  addLobbyCommandHandler({SAIDBATTLE =&gt; \&amp;hLobbySaidBattle});
  
  # We return the instantiated plugin
  return $self;
  
}
&lt;/syntaxhighlight&gt;
However, if SPADS is disconnected from the lobby due to network problems for example, all lobby handlers are automatically removed. So we must re-add them each time we connect to lobby server. This can be done using the [http://planetspads.free.fr/spads/doc/spadsPluginApiDoc.html#onLobbyConnected-self-lobbyInterface onLobbyConnected] event-based callback as follows:
&lt;syntaxhighlight lang=&quot;perl&quot;&gt;
# This callback is called each time we (re)connect to the lobby server
sub onLobbyConnected {
  
  # When we are disconnected from the lobby server, all lobby command
  # handlers are automatically removed, so we (re)set up our command
  # handler here.
  addLobbyCommandHandler({SAIDBATTLE =&gt; \&amp;hLobbySaidBattle});
  
}
&lt;/syntaxhighlight&gt;
Also, it is a good practice to remove any handler we have added when the plugin is unloaded. To do so we must implement the [http://planetspads.free.fr/spads/doc/spadsPluginApiDoc.html#onUnload-self-context onUnload] event-based callback as follows:
&lt;syntaxhighlight lang=&quot;perl&quot;&gt;
# This callback is called when the plugin is unloaded
sub onUnload {
  
  # We remove our lobby command handler when the plugin is unloaded
  removeLobbyCommandHandler(['SAIDBATTLE']);
  
}
&lt;/syntaxhighlight&gt;
Finally, we have to implement our &lt;code&gt;SAIDBATTLE&lt;/code&gt; handler &lt;code&gt;hLobbySaidBattle&lt;/code&gt;. In this handler we need to perform following operations:
* skip processing if the user is the autohost itself: we need to access SPADS configuration to compare the user name with the [http://planetspads.free.fr/spads/doc/spadsDoc_All.html#global:lobbyLogin lobbyLogin] setting value. So we will need the plugin API function [http://planetspads.free.fr/spads/doc/spadsPluginApiDoc.html#getSpadsConf getSpadsConf].
* perform processing according to our configuration (&lt;code&gt;words&lt;/code&gt; and &lt;code&gt;immuneLevel&lt;/code&gt; settings): we need to access our plugin configuration, so we will need the plugin API function [http://planetspads.free.fr/spads/doc/spadsPluginApiDoc.html#getPluginConf-pluginName-caller getPluginConf].
* retrieve the autohost access level of the user: we will use the plugin API function [http://planetspads.free.fr/spads/doc/spadsPluginApiDoc.html#getUserAccessLevel-user getUserAccessLevel]
* send a message to the battle lobby when we kick someone: we will use the plugin API function [http://planetspads.free.fr/spads/doc/spadsPluginApiDoc.html#sayBattle-message sayBattle].
* send a [http://springrts.com/dl/LobbyProtocol/ProtocolDescription.html#KICKFROMBATTLE:client KICKFROMBATTLE] lobby command to kick a user: we will use the plugin API function [http://planetspads.free.fr/spads/doc/spadsPluginApiDoc.html#queueLobbyCommand-lobbyCommand queueLobbyCommand].

Here is a commented implementation example of this &lt;code&gt;hLobbySaidBattle&lt;/code&gt; handler, which will kick any non-privileged user saying a forbidden word in the battle lobby:
&lt;syntaxhighlight lang=&quot;perl&quot;&gt;
# This is the handler we set up on SAIDBATTLE lobby command.
# It is called each time a player says something in the battle lobby.
sub hLobbySaidBattle {
  
  # $command is the lobby command name (SAIDBATTLE)
  # $user is the name of the user who said something in the battle lobby
  # $message is the message said in the battle lobby
  my ($command,$user,$message)=@_;
  
  # First we check it's not a message from SPADS (so we don't kick ourself)
  my $p_spadsConf=getSpadsConf();
  return if($user eq $p_spadsConf-&gt;{lobbyLogin});
  
  # Then we check the user isn't a privileged user
  # (autohost access level &gt;= immuneLevel)
  my $p_conf=getPluginConf();
  return if(getUserAccessLevel($user) &gt;= $p_conf-&gt;{immuneLevel});
  
  # We put the forbidden words in a array
  my @forbiddenWords=split(/;/,$p_conf-&gt;{words});
  
  # We test each forbidden word
  foreach my $forbiddenWord (@forbiddenWords) {
    
    # If the message contains the forbidden word (case insensitive)
    if($message =~ /\b$forbiddenWord\b/i) {
      
      # Then we kick the user from the battle lobby
      sayBattle(&quot;Kicking $user from battle (watch your language!)&quot;);
      queueLobbyCommand([&quot;KICKFROMBATTLE&quot;,$user]);
      
      # We quit the foreach loop (no need to test other forbidden word)
      last;
      
    }
    
  }
  
}
&lt;/syntaxhighlight&gt;
Once we put all that together, we obtain [http://planetspads.free.fr/spads/plugins/tutorials/ForbiddenWords.pm this fully functional ForbiddenWords] plugin and [http://planetspads.free.fr/spads/plugins/tutorials/ForbiddenWords.conf its associated configuration file].

== Testing our plugin ==

To test our plugin, we have to put the plugin module in [http://planetspads.free.fr/spads/doc/spadsDoc_All.html#global:pluginsDir SPADS plugins directory], and the associated configuration file in [http://planetspads.free.fr/spads/doc/spadsDoc_All.html#global:etcDir SPADS etc directory].

Then we load the plugin as follows: &lt;code&gt;!plugin ForbiddenWords load&lt;/code&gt;. And finally, as an unprivileged user we can try to say some forbidden words in the battle lobby and we should get kicked by the plugin.

&lt;br&gt;

= New-command plugin tutorial (TimePlugin) =

In this section we are going to write a plugin which implements a new command for SPADS. Such plugins are configurable plugins like the one we wrote just before, with 2 additional files to configure the new commands. This plugin will give current time when someone types &lt;code&gt;!time&lt;/code&gt;.

== Preparing the template ==

This time we need to download 4 files to prepare our plugin: [http://planetspads.free.fr/spads/plugins/templates/commented/MyNewCommandPlugin.pm the new-command plugin template], [http://planetspads.free.fr/spads/plugins/templates/commented/MyNewCommandPlugin.conf the associated configuration file example], [http://planetspads.free.fr/spads/plugins/templates/commented/MyNewCommandPluginHelp.dat the help file example] and [http://planetspads.free.fr/spads/plugins/templates/commented/MyNewCommandPluginCmd.conf the commands rights configuration file example].

As usual, we rename these files to match our plugin name: &lt;code&gt;MyNewCommandPlugin&lt;/code&gt; --&gt; &lt;code&gt;TimePlugin&lt;/code&gt;. Then we edit the plugin template &lt;code&gt;TimePlugin.pm&lt;/code&gt; and replace &lt;code&gt;MyNewCommandPlugin&lt;/code&gt; by &lt;code&gt;TimePlugin&lt;/code&gt; in the source code, and we do the same for the plugin configuration template &lt;code&gt;TimePlugin.conf&lt;/code&gt;, so that the &lt;code&gt;commandsFile&lt;/code&gt; and &lt;code&gt;helpFile&lt;/code&gt; settings are consistent with the files we just renamed.

Then we can edit our command rights requirements configuration file: &lt;code&gt;TimePluginCmd.conf&lt;/code&gt;. This file uses the same syntax as the standard SPADS &lt;code&gt;commands.conf&lt;/code&gt; file. The template provides a default command &lt;code&gt;myCommand&lt;/code&gt; with no requirement. We will just rename this command to &lt;code&gt;time&lt;/code&gt;:
{|style=&quot;margin-top: 10px; margin-left: 40px; background-color: #38474E; border: 1px solid black; border-color: #20292E&quot; |
|
 # Anyone can call our command from anywhere
 [time]
 ::|0:
|}
Now we need to write the help information for our new command. This is done in the file &lt;code&gt;TimePluginHelp.dat&lt;/code&gt;. This file uses the same syntax as the standard SPADS &lt;code&gt;help.dat&lt;/code&gt; file, and the template provides a help example for a command &lt;code&gt;myCommand&lt;/code&gt; as a syntax reminder. After each command declaration, the first line is the command syntax description, and the other lines are optional usage examples. Let's replace this help example with our own help information for our basic &lt;code&gt;!time&lt;/code&gt; command:
{|style=&quot;margin-top: 10px; margin-left: 40px; background-color: #38474E; border: 1px solid black; border-color: #20292E&quot; |
|
 [time]
 &lt;nowiki&gt;!&lt;/nowiki&gt;time - This command just prints current time
|}

== Writing plugin code ==

The new-command plugin template that we used to initialize our plugin already defines a new command named &lt;code&gt;myCommand&lt;/code&gt;, so all we have to do is to edit our plugin file ( &lt;code&gt;TimePlugin.pm&lt;/code&gt; ) and replace this command by our own &lt;code&gt;time&lt;/code&gt; command:

First, let's modify the code which sets up the new SPADS command handler using the plugin API function [http://planetspads.free.fr/spads/doc/spadsPluginApiDoc.html#addSpadsCommandHandler-handlers-replace-0 addSpadsCommandHandler]. This call is located in the plugin constructor. We edit it so that it becomes:
&lt;syntaxhighlight lang=&quot;perl&quot;&gt;
  [...]
  # We declare our new command and the associated handler
  addSpadsCommandHandler({time =&gt; \&amp;hSpadsTime});
  [...]
&lt;/syntaxhighlight&gt;
We must modify the same way the code which removes this SPADS handler using the plugin API function [http://planetspads.free.fr/spads/doc/spadsPluginApiDoc.html#removeSpadsCommandHandler-commands removeSpadsCommandHandler] in the [http://planetspads.free.fr/spads/doc/spadsPluginApiDoc.html#onUnload-self-context onUnload] event-based callback:
&lt;syntaxhighlight lang=&quot;perl&quot;&gt;
  [...]
  # We remove our new command handler
  removeSpadsCommandHandler(['time']);
  [...]
&lt;/syntaxhighlight&gt;
Finally, we must replace the handler example &lt;code&gt;hMyCommand&lt;/code&gt; by our own handler &lt;code&gt;hSpadsTime&lt;/code&gt;. In order to answer to the user issuing the command, we can use the plugin API function [http://planetspads.free.fr/spads/doc/spadsPluginApiDoc.html#answer-message answer], which will send an answer message to the user in the same way he sent the command (private message, battle lobby...).

Here is an implementation example for this basic command:
&lt;syntaxhighlight lang=&quot;perl&quot;&gt;
# This is the handler for our new command
sub hSpadsTime {
  my ($source,$user,$p_params,$checkOnly)=@_;
  
  # time is a basic command, we have nothing to check in case of callvote
  return 1 if($checkOnly);
  
  my @time = localtime();
  @time = map(sprintf(&quot;%02d&quot;,$_),@time);
  
  answer(&quot;Current local time: $time[2]:$time[1]:$time[0]&quot;);
}
&lt;/syntaxhighlight&gt;

Once we put all that together, we obtain [http://planetspads.free.fr/spads/plugins/tutorials/TimePlugin.pm this fully functional TimePlugin] plugin, and its associated [http://planetspads.free.fr/spads/plugins/tutorials/TimePlugin.conf configuration file], [http://planetspads.free.fr/spads/plugins/tutorials/TimePluginCmd.conf command rights configuration file] and [http://planetspads.free.fr/spads/plugins/tutorials/TimePluginHelp.dat command help file].

== Testing our plugin ==

To test our plugin, we have to put the plugin module and the plugin help file in [http://planetspads.free.fr/spads/doc/spadsDoc_All.html#global:pluginsDir SPADS plugins directory], and the 2 configuration files in [http://planetspads.free.fr/spads/doc/spadsDoc_All.html#global:etcDir SPADS etc directory].

Then we load the plugin as follows: &lt;code&gt;!plugin TimePlugin load&lt;/code&gt;. And finally, we can try to say !time in a private message to SPADS or in the battle lobby, and SPADS should answer giving current local time. Our &lt;code&gt;!time&lt;/code&gt; command help should also appear in &lt;code&gt;!help&lt;/code&gt; and &lt;code&gt;!help time&lt;/code&gt; outputs.

[[Category:SPADS]]</text>
      <sha1>b86l2zk0202qls2r5uh5qm8b13l95q6</sha1>
    </revision>
  </page>
  <page>
    <title>SPADS plugin development (Python)</title>
    <ns>0</ns>
    <id>3859</id>
    <revision>
      <id>31439</id>
      <parentid>31438</parentid>
      <timestamp>2021-01-28T14:24:25Z</timestamp>
      <contributor>
        <username>Bibim</username>
        <id>2690</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="23041">= Introduction =

SPADS is an autohost system coded in Perl, it supports both Perl and Python plugins. This tutorial deals with Python plugin development only (for Perl plugin development another tutorial is available [https://springrts.com/wiki/SPADS_plugin_development here]).

SPADS plugins are object-oriented modules. It is strongly recommended to already know Python basics before starting Python plugin development (a Python tutorial is available [https://docs.python.org/3/tutorial/ here]).

&lt;br&gt;
= Technical prerequisites =

Python (the Python interpreter and its libraries) must be installed on the system (versions 2.6+ or 3.2+ recommended). The type of installation (32-bit / 64-bit) must be consistent with the Perl version and the Spring engine used for SPADS.

Additionally, in order to allow communication between Perl code (SPADS core) and Python code (SPADS plugins), SPADS uses a Perl module named &lt;code&gt;Inline::Python&lt;/code&gt; which must also be installed on the system. It is recommended to install the latest version for SPADS, refer to [https://springrts.com/wiki/SPADS_Inline::Python_installation_guide this guide] for installation.

&lt;br&gt;

= Simple plugin tutorial (HelloWorld) =

In this section we are going to write our first SPADS plugin. So let's start simple with a good old &quot;Hello world&quot;. The plugin will answer &quot;Hello World&quot; to anyone saying &quot;Hello&quot; in a private message to SPADS.

== Choosing our template ==

Some plugin templates are available to help you bootstrap your plugin development. The commented versions of these templates are available [http://planetspads.free.fr/spads/plugins/templates/commented/ here], while the raw versions (without comment) are available [http://planetspads.free.fr/spads/plugins/templates/raw/ here] (the &lt;code&gt;.pm&lt;/code&gt; files must be ignored for this tutorial, these are the Perl versions of the templates).

Our first plugin will be very basic, so we will use the simplest template: &lt;code&gt;mysimpleplugin.py&lt;/code&gt;. Let's download [http://planetspads.free.fr/spads/plugins/templates/commented/mysimpleplugin.py the commented version of this template] and open it with our favorite editor. As you can see, the code is heavily commented (actually every single line of code is explained), so I won't go into further details here. Now that you've read and understood the commented template, let's actually start plugin development.

== Adapting the template ==

First we must name our plugin. Let's call it &lt;code&gt;HelloWorld&lt;/code&gt;. We have to rename the downloaded template from &lt;code&gt;mysimpleplugin.py&lt;/code&gt; to &lt;code&gt;helloworld.py&lt;/code&gt;, and edit it to replace &lt;code&gt;MySimplePlugin&lt;/code&gt; by &lt;code&gt;HelloWorld&lt;/code&gt; in the source code.

== Checking SPADS plugin system ==

Before going into actually writing new code, let's just check that the plugin works in SPADS (if not done yet, you have to configure the [http://planetspads.free.fr/spads/doc/spadsDoc_All.html#global:pluginsDir SPADS plugins directory] in your &lt;code&gt;spads.conf&lt;/code&gt; configuration file and reload SPADS configuration).

We have to move our new plugin (&lt;code&gt;helloworld.py&lt;/code&gt;) in the SPADS plugins directory so that SPADS can find it. Then, as a privileged SPADS user, we can type following command (in a private message to SPADS for example): &lt;code&gt;!plugin HelloWorld load&lt;/code&gt;. SPADS should answer &lt;code&gt;Loaded plugin HelloWorld.&lt;/code&gt;, which indicates the plugin has been loaded successfully.

If all is ok, we can let this SPADS instance running like this, we will get back to it later.

== Writing plugin code ==

Writing plugin code mainly consists in implementing plugin callbacks and calling plugin API functions, as specified in [http://planetspads.free.fr/spads/doc/spadsPluginApiDoc.html SPADS plugin API documentation].

So we want our plugin to react to some private messages sent to SPADS. To do so we have to implement a plugin callback function which is called by SPADS core each time a lobby private message is received: this is the [http://planetspads.free.fr/spads/doc/spadsPluginApiDoc.html#onPrivateMsg-self-userName-message onPrivateMsg] event-based callback.

We also want our plugin to send a private message, to do so we can call the plugin API function [http://planetspads.free.fr/spads/doc/spadsPluginApiDoc.html#sayPrivate-user-message sayPrivate].

Now that we have identified the API functions that we need, we can actually implement our plugin. Here is a commented implementation example of the &lt;code&gt;onPrivateMsg&lt;/code&gt; callback, which will answer &lt;code&gt;Hello World&lt;/code&gt; to anyone saying &lt;code&gt;Hello&lt;/code&gt; in a private message to SPADS:
&lt;syntaxhighlight lang=&quot;python&quot;&gt;
    # This is the callback called each time SPADS receives a private message
    #   self is the plugin object (first parameter of all plugin callbacks)
    #   userName is the name of the user sending the private message
    #   message is the message sent by the user
    def onPrivateMsg(self,userName,message):
    
        # Here we &quot;fix&quot; strings received from Perl in case
        # the Inline::Python module transmits them as byte strings
        (userName,message)=spads.fix_string(userName,message)
   
        # We check the message sent by the user is &quot;Hello&quot;
        if message == 'Hello':
            
            # We send our wonderful Hello World message
            spads.sayPrivate(userName,'Hello World')
        
        # We return 0 because we don't want to filter out private messages
        # for other SPADS processing
        return 0&lt;/syntaxhighlight&gt;

All we have to do now is adding this callback declaration in our &lt;code&gt;helloworld.py&lt;/code&gt; file located in SPADS plugins directory. We obtain [http://planetspads.free.fr/spads/plugins/tutorials/helloworld.py this fully functional HelloWorld plugin].

== Testing our plugin ==

Let's test this plugin in SPADS. First, since we modified the plugin source code, we have to tell SPADS to reload the plugin as follows: &lt;code&gt;!plugin HelloWorld reload&lt;/code&gt;. SPADS should answer &lt;code&gt;Reloaded plugin HelloWorld.&lt;/code&gt;, which indicates the plugin has been reloaded successfully.

Finally, just say &lt;code&gt;Hello&lt;/code&gt; to SPADS in a private message. Congratulations for your first SPADS plugin! ;)

&lt;br&gt;
= Configurable plugin tutorial (ForbiddenWords) =

In this section we are going to write our first configurable SPADS plugin (a configurable plugin has its own configuration file, named after the plugin name but with &lt;code&gt;.conf&lt;/code&gt; extension). This plugin will monitor all messages said by players in the battle lobby, and will kick players who use swear words.

== Specifying our configuration parameters ==

The first step of writing a configurable plugin is to choose how we will configure it. In our example, we will use 2 configuration parameters: &lt;code&gt;words&lt;/code&gt; will contain the list of forbidden words, and &lt;code&gt;immuneLevel&lt;/code&gt; will contain the minimum autohost access level to be immune regarding these forbidden words checks.

We choose to make &lt;code&gt;words&lt;/code&gt; a global setting (unmodifiable, not impacted by preset change), and &lt;code&gt;immuneLevel&lt;/code&gt; a preset setting (modifiable, can be impacted by preset change). The &lt;code&gt;words&lt;/code&gt; global setting will have no restriction (can be empty, can contain any character...), whereas the &lt;code&gt;immuneLevel&lt;/code&gt; preset setting will only be allowed to be an integer or integer range.

== Preparing the template ==

Once we have a clear view of our configuration settings, we can start adapting the template for our needs. Since we are making a configurable plugin, this time we will download [http://planetspads.free.fr/spads/plugins/templates/commented/myconfigurableplugin.py the configurable plugin template] and its associated [http://planetspads.free.fr/spads/plugins/templates/commented/MyConfigurablePlugin.conf configuration file example].

First, let's take a look at the configuration file example. This is a just a basic configuration file containing one global setting example and one preset setting example. Let's modify this file to match the configuration we chose as follows (don't forget to rename the file from &lt;code&gt;MyConfigurablePlugin.conf&lt;/code&gt; to &lt;code&gt;ForbiddenWords.conf&lt;/code&gt; also):
{|style=&quot;margin-top: 10px; margin-left: 40px; background-color: #38474E; border: 1px solid black; border-color: #20292E&quot; |
|
 # This is our global setting (can't be changed without reloading the configuration)
 words:ass;asshole;bastard;bitch;cunt;fuck;motherfucker;shit;whore
  
 # We must define our preset setting in the default preset at least
 [default]
  
 # This is our preset setting, which can be changed with &quot;!plugin ... set ...&quot;
 # or by loading a preset.
 # &quot;100&quot; is the default value, and any integer between 0 and 140 is allowed
 immuneLevel:100|0-140
|}
Then we must prepare the plugin template itself, by renaming it from &lt;code&gt;myconfigurableplugin.py&lt;/code&gt; to &lt;code&gt;forbiddenwords.py&lt;/code&gt; and editing it to replace &lt;code&gt;MyConfigurablePlugin&lt;/code&gt; by &lt;code&gt;ForbiddenWords&lt;/code&gt; in the source code. We must also adapt the template so that it uses the configuration settings we chose. This is done by modifying the &lt;code&gt;globalPluginParams&lt;/code&gt; and &lt;code&gt;presetPluginParam&lt;/code&gt; declarations as follows:
&lt;syntaxhighlight lang=&quot;python&quot;&gt;
# We define one global setting &quot;words&quot; and one preset setting &quot;immuneLevel&quot;.
# &quot;words&quot; has no type associated (no restriction on allowed values)
# &quot;immuneLevel&quot; must be an integer or an integer range
# (check %paramTypes hash in SpadsConf.pm for a complete list of allowed
# setting types)
globalPluginParams = { 'words': [] }
presetPluginParams = { 'immuneLevel': ['integer','integerRange'] }
&lt;/syntaxhighlight&gt;

== Writing plugin code ==

We want our plugin to react to messages said in the battle lobby. There is no dedicated callback for this event in [http://planetspads.free.fr/spads/doc/spadsPluginApiDoc.html SPADS plugin API documentation], so we have to set up our own handler on the [http://springrts.com/dl/LobbyProtocol/ProtocolDescription.html#SAIDBATTLE:server SAIDBATTLE lobby command]. To do so we have to call the plugin API function [http://planetspads.free.fr/spads/doc/spadsPluginApiDoc.html#addLobbyCommandHandler-handlers-priority-caller addLobbyCommandHandler]. We will call this function at the end of our plugin constructor as follows, so that it will be set up directly when the plugin is loaded:
&lt;syntaxhighlight lang=&quot;python&quot;&gt;
        [...]
    
        # We set up a lobby command handler on SAIDBATTLE
        spads.addLobbyCommandHandler({'SAIDBATTLE': hLobbySaidBattle})
&lt;/syntaxhighlight&gt;
However, if SPADS is disconnected from the lobby due to network problems for example, all lobby handlers are automatically removed. So we must re-add them each time we connect to lobby server. This can be done using the [http://planetspads.free.fr/spads/doc/spadsPluginApiDoc.html#onLobbyConnected-self-lobbyInterface onLobbyConnected] event-based callback as follows:
&lt;syntaxhighlight lang=&quot;python&quot;&gt;
    # This callback is called each time we (re)connect to the lobby server
    def onLobbyConnected(self,lobbyInterface):
        
        # When we are disconnected from the lobby server, all lobby command
        # handlers are automatically removed, so we (re)set up our command
        # handler here.
        spads.addLobbyCommandHandler({'SAIDBATTLE': hLobbySaidBattle})
&lt;/syntaxhighlight&gt;
Also, it is a good practice to remove any handler we have added when the plugin is unloaded. To do so we must implement the [http://planetspads.free.fr/spads/doc/spadsPluginApiDoc.html#onUnload-self-context onUnload] event-based callback as follows:
&lt;syntaxhighlight lang=&quot;python&quot;&gt;
    # This callback is called when the plugin is unloaded
    def onUnload(self,reason):
        
        # We remove our lobby command handler when the plugin is unloaded
        spads.removeLobbyCommandHandler(['SAIDBATTLE'])
&lt;/syntaxhighlight&gt;
Finally, we have to implement our &lt;code&gt;SAIDBATTLE&lt;/code&gt; handler &lt;code&gt;hLobbySaidBattle&lt;/code&gt;. In this handler we need to perform following operations:
* skip processing if the user is the autohost itself: we need to access SPADS configuration to compare the user name with the [http://planetspads.free.fr/spads/doc/spadsDoc_All.html#global:lobbyLogin lobbyLogin] setting value. So we will need the plugin API function [http://planetspads.free.fr/spads/doc/spadsPluginApiDoc.html#getSpadsConf getSpadsConf].
* perform processing according to our configuration (&lt;code&gt;words&lt;/code&gt; and &lt;code&gt;immuneLevel&lt;/code&gt; settings): we need to access our plugin configuration, so we will need the plugin API function [http://planetspads.free.fr/spads/doc/spadsPluginApiDoc.html#getPluginConf-pluginName-caller getPluginConf].
* retrieve the autohost access level of the user: we will use the plugin API function [http://planetspads.free.fr/spads/doc/spadsPluginApiDoc.html#getUserAccessLevel-user getUserAccessLevel]
* send a message to the battle lobby when we kick someone: we will use the plugin API function [http://planetspads.free.fr/spads/doc/spadsPluginApiDoc.html#sayBattle-message sayBattle].
* send a [http://springrts.com/dl/LobbyProtocol/ProtocolDescription.html#KICKFROMBATTLE:client KICKFROMBATTLE] lobby command to kick a user: we will use the plugin API function [http://planetspads.free.fr/spads/doc/spadsPluginApiDoc.html#queueLobbyCommand-lobbyCommand queueLobbyCommand].

Here is a commented implementation example of this &lt;code&gt;hLobbySaidBattle&lt;/code&gt; handler, which will kick any non-privileged user saying a forbidden word in the battle lobby:
&lt;syntaxhighlight lang=&quot;python&quot;&gt;
# This is the handler we set up on SAIDBATTLE lobby command.
# It is called each time a player says something in the battle lobby.
#   command is the lobby command name (SAIDBATTLE)
#   user is the name of the user who said something in the battle lobby
#   message is the message said in the battle lobby
def hLobbySaidBattle(command,user,message):
    
    # First we &quot;fix&quot; strings received from Perl in case
    # the Inline::Python module transmits them as byte strings
    (user,message)=spads.fix_string(user,message)
    
    # Here we check it's not a message from SPADS (so we don't kick ourself)
    spadsConf = spads.getSpadsConf()
    if user == spadsConf['lobbyLogin']:
        return
    
    # Then we check the user isn't a privileged user
    # (autohost access level &gt;= immuneLevel)
    pluginConf = spads.getPluginConf()
    if int(spads.getUserAccessLevel(user)) &gt;= int(pluginConf['immuneLevel']):
        return
    
    # We put the forbidden words in a list
    forbiddenWords = pluginConf['words'].split(';')
            
    # We test each forbidden word
    for forbiddenWord in forbiddenWords:
        
        # If the message contains the forbidden word (case insensitive)
        if re.search(r'\b' + re.escape(forbiddenWord) + r'\b',message,re.IGNORECASE):
            
            # Then we kick the user from the battle lobby
            spads.sayBattle(&quot;Kicking %s from battle (watch your language!)&quot; % user)
            spads.queueLobbyCommand([&quot;KICKFROMBATTLE&quot;,user])
                    
            # We quit the foreach loop (no need to test other forbidden word)
            break
&lt;/syntaxhighlight&gt;

As we are using regular expressions in our plugin code, we must not forget to import the &lt;code&gt;re&lt;/code&gt; Python module at the start of our plugin:
&lt;syntaxhighlight lang=&quot;python&quot;&gt;
# Import the regular expression module to check for forbidden words
import re
&lt;/syntaxhighlight&gt;
Once we put all that together, we obtain [http://planetspads.free.fr/spads/plugins/tutorials/forbiddenwords.py this fully functional ForbiddenWords] plugin and [http://planetspads.free.fr/spads/plugins/tutorials/ForbiddenWords.conf its associated configuration file].

== Testing our plugin ==

To test our plugin, we have to put the plugin module in [http://planetspads.free.fr/spads/doc/spadsDoc_All.html#global:pluginsDir SPADS plugins directory], and the associated configuration file in [http://planetspads.free.fr/spads/doc/spadsDoc_All.html#global:etcDir SPADS etc directory].

Then we load the plugin as follows: &lt;code&gt;!plugin ForbiddenWords load&lt;/code&gt;. And finally, as an unprivileged user we can try to say some forbidden words in the battle lobby and we should get kicked by the plugin.

&lt;br&gt;

= New-command plugin tutorial (TimePlugin) =

In this section we are going to write a plugin which implements a new command for SPADS. Such plugins are configurable plugins like the one we wrote just before, with 2 additional files to configure the new commands. This plugin will give current time when someone types &lt;code&gt;!time&lt;/code&gt;.

== Preparing the template ==

This time we need to download 4 files to prepare our plugin: [http://planetspads.free.fr/spads/plugins/templates/commented/mynewcommandplugin.py the new-command plugin template], [http://planetspads.free.fr/spads/plugins/templates/commented/MyNewCommandPlugin.conf the associated configuration file example], [http://planetspads.free.fr/spads/plugins/templates/commented/MyNewCommandPluginHelp.dat the help file example] and [http://planetspads.free.fr/spads/plugins/templates/commented/MyNewCommandPluginCmd.conf the commands rights configuration file example].

As usual, we rename these files to match our plugin name: &lt;code&gt;MyNewCommandPlugin&lt;/code&gt; --&gt; &lt;code&gt;TimePlugin&lt;/code&gt;. Then we edit the plugin template &lt;code&gt;timeplugin.py&lt;/code&gt; and replace &lt;code&gt;MyNewCommandPlugin&lt;/code&gt; by &lt;code&gt;TimePlugin&lt;/code&gt; in the source code, and we do the same for the plugin configuration template &lt;code&gt;TimePlugin.conf&lt;/code&gt;, so that the &lt;code&gt;commandsFile&lt;/code&gt; and &lt;code&gt;helpFile&lt;/code&gt; settings are consistent with the files we just renamed.

Then we can edit our command rights requirements configuration file: &lt;code&gt;TimePluginCmd.conf&lt;/code&gt;. This file uses the same syntax as the standard SPADS &lt;code&gt;commands.conf&lt;/code&gt; file. The template provides a default command &lt;code&gt;myCommand&lt;/code&gt; with no requirement. We will just rename this command to &lt;code&gt;time&lt;/code&gt;:
{|style=&quot;margin-top: 10px; margin-left: 40px; background-color: #38474E; border: 1px solid black; border-color: #20292E&quot; |
|
 # Anyone can call our command from anywhere
 [time]
 ::|0:
|}
Now we need to write the help information for our new command. This is done in the file &lt;code&gt;TimePluginHelp.dat&lt;/code&gt;. This file uses the same syntax as the standard SPADS &lt;code&gt;help.dat&lt;/code&gt; file, and the template provides a help example for a command &lt;code&gt;myCommand&lt;/code&gt; as a syntax reminder. After each command declaration, the first line is the command syntax description, and the other lines are optional usage examples. Let's replace this help example with our own help information for our basic &lt;code&gt;!time&lt;/code&gt; command:
{|style=&quot;margin-top: 10px; margin-left: 40px; background-color: #38474E; border: 1px solid black; border-color: #20292E&quot; |
|
 [time]
 &lt;nowiki&gt;!&lt;/nowiki&gt;time - This command just prints current time
|}

== Writing plugin code ==

The new-command plugin template that we used to initialize our plugin already defines a new command named &lt;code&gt;myCommand&lt;/code&gt;, so all we have to do is to edit our plugin file ( &lt;code&gt;timeplugin.py&lt;/code&gt; ) and replace this command by our own &lt;code&gt;time&lt;/code&gt; command:

First, let's modify the code which sets up the new SPADS command handler using the plugin API function [http://planetspads.free.fr/spads/doc/spadsPluginApiDoc.html#addSpadsCommandHandler-handlers-replace-0 addSpadsCommandHandler]. This call is located in the plugin constructor. We edit it so that it becomes:
&lt;syntaxhighlight lang=&quot;python&quot;&gt;
        [...]
        # We declare our new command and the associated handler
        spads.addSpadsCommandHandler({'time': hSpadsTime})
        [...]
&lt;/syntaxhighlight&gt;
We must modify the same way the code which removes this SPADS handler using the plugin API function [http://planetspads.free.fr/spads/doc/spadsPluginApiDoc.html#removeSpadsCommandHandler-commands removeSpadsCommandHandler] in the [http://planetspads.free.fr/spads/doc/spadsPluginApiDoc.html#onUnload-self-context onUnload] event-based callback:
&lt;syntaxhighlight lang=&quot;python&quot;&gt;
        [...]
        # We remove our new command handler
        spads.removeSpadsCommandHandler(['time'])
        [...]
&lt;/syntaxhighlight&gt;
Finally, we must replace the handler example &lt;code&gt;hMyCommand&lt;/code&gt; by our own handler &lt;code&gt;hSpadsTime&lt;/code&gt;. In order to answer to the user issuing the command, we can use the plugin API function [http://planetspads.free.fr/spads/doc/spadsPluginApiDoc.html#answer-message answer], which will send an answer message to the user in the same way he sent the command (private message, battle lobby...).

Here is an implementation example for this basic command:
&lt;syntaxhighlight lang=&quot;python&quot;&gt;
# This is the handler for our new command
def hSpadsTime(source,user,params,checkOnly):

    # checkOnly is true if this is just a check for callVote command, not a real command execution
    if checkOnly :
        
        # time is a basic command, we have nothing to check in case of callvote
        return 1

    # We get current time using &quot;now&quot; function of datetime class from datetime module
    current_time = datetime.datetime.now()
    current_time_string = current_time.strftime(&quot;%H:%M:%S&quot;)

    # We call the API function &quot;answer&quot; to send back the response to the user who called the command
    # using same canal as he used (private message, battle lobby, in game message...)
    spads.answer(&quot;Current local time: %s&quot; % current_time_string)
&lt;/syntaxhighlight&gt;

As we are retrieving current time in our plugin code, we must not forget to import the &lt;code&gt;datetime&lt;/code&gt; Python module at the start of our plugin:
&lt;syntaxhighlight lang=&quot;python&quot;&gt;
# Import the datetime module so we can get current time for our !time command
import datetime
&lt;/syntaxhighlight&gt;
Once we put all that together, we obtain [http://planetspads.free.fr/spads/plugins/tutorials/timeplugin.py this fully functional TimePlugin] plugin, and its associated [http://planetspads.free.fr/spads/plugins/tutorials/TimePlugin.conf configuration file], [http://planetspads.free.fr/spads/plugins/tutorials/TimePluginCmd.conf command rights configuration file] and [http://planetspads.free.fr/spads/plugins/tutorials/TimePluginHelp.dat command help file].

== Testing our plugin ==

To test our plugin, we have to put the plugin module and the plugin help file in [http://planetspads.free.fr/spads/doc/spadsDoc_All.html#global:pluginsDir SPADS plugins directory], and the 2 configuration files in [http://planetspads.free.fr/spads/doc/spadsDoc_All.html#global:etcDir SPADS etc directory].

Then we load the plugin as follows: &lt;code&gt;!plugin TimePlugin load&lt;/code&gt;. And finally, we can try to say !time in a private message to SPADS or in the battle lobby, and SPADS should answer giving current local time. Our &lt;code&gt;!time&lt;/code&gt; command help should also appear in &lt;code&gt;!help&lt;/code&gt; and &lt;code&gt;!help time&lt;/code&gt; outputs.

[[Category:SPADS]]</text>
      <sha1>hfg96z7c44kzzl07siirnm05rh9bwu8</sha1>
    </revision>
  </page>
  <page>
    <title>SPADS plugin install notes</title>
    <ns>0</ns>
    <id>3464</id>
    <revision>
      <id>28152</id>
      <parentid>28125</parentid>
      <timestamp>2014-01-11T14:01:43Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1493">This document describes briefly how to install a SPADS plugin. It considers you already have a SPADS instance configured and running, with [http://planetspads.free.fr/spads/doc/spadsDoc_All.html#global:pluginsDir SPADS plugins directory] set to a valid directory.

== Archive extraction ==

If the plugin is packed as an archive (zip, 7z, tar.gz ...), you need to extract the files somewhere temporarily.

== Configuration ==

If the plugin contains a README file, this file should be opened and checked for configuration instructions.
Otherwise, it means the plugin doesn't need to be configured and this step can be skipped.

== Installation ==

If the plugin contains configuration files (*.conf), they must be moved into [http://planetspads.free.fr/spads/doc/spadsDoc_All.html#global:etcDir SPADS configuration directory].
All other files must be moved into [http://planetspads.free.fr/spads/doc/spadsDoc_All.html#global:pluginsDir SPADS plugins directory], unless specified differently by the README file.

== Activation ==

If you want this plugin to be automatically loaded when SPADS starts, you must add the plugin name to the [http://planetspads.free.fr/spads/doc/spadsDoc_All.html#global:autoLoadPlugins auto-loaded plugins setting].

If you want to load the plugin manually, you can use following command: &quot;!plugin &lt;pluginName&gt; load&quot;

== Check ==

If the plugin has been loaded successfully, it should appear in &quot;!version&quot; and &quot;!list plugins&quot; outputs.

__NOTOC__
[[Category:SPADS]]</text>
      <sha1>8pxqu6k9m31zkzp4rez9ow5llyoe9yh</sha1>
    </revision>
  </page>
  <page>
    <title>SPADS update procedure for new Spring version</title>
    <ns>0</ns>
    <id>3591</id>
    <revision>
      <id>30419</id>
      <parentid>28146</parentid>
      <timestamp>2017-09-05T12:55:38Z</timestamp>
      <contributor>
        <username>Bibim</username>
        <id>2690</id>
      </contributor>
      <comment>procedure change for SPADS 0.12</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2864">This document describes how to (re)configure SPADS regarding Spring version.


= Enabling/disabling Spring version auto-management in SPADS =
=== Enabling Spring version auto-management ===
*set the [http://planetspads.free.fr/spads/doc/spadsDoc_GlobalSettings.html#global:autoManagedSpringVersion autoManagedSpringVersion] value in spads.conf to the desired Spring version or release (examples: &quot;103.0&quot;, &quot;103.0.1-1359-gdc09042&quot;, &quot;testing&quot;)
*empty the [http://planetspads.free.fr/spads/doc/spadsDoc_GlobalSettings.html#global:unitsyncDir unitsyncDir] and [http://planetspads.free.fr/spads/doc/spadsDoc_GlobalSettings.html#global:springServer springServer] values in spads.conf
*set the [http://planetspads.free.fr/spads/doc/spadsDoc_GlobalSettings.html#global:springServerType springServerType] value to &quot;dedicated&quot; or &quot;headless&quot; in spads.conf (according to the type of Spring server you want to use)
*remove any directory containing Spring base content from the [http://planetspads.free.fr/spads/doc/spadsDoc_GlobalSettings.html#global:springDataDir springDataDir] values in spads.conf
*restart SPADS
=== Disabling Spring version auto-management ===
*empty the [http://planetspads.free.fr/spads/doc/spadsDoc_GlobalSettings.html#global:autoManagedSpringVersion autoManagedSpringVersion] value in spads.conf
*set the [http://planetspads.free.fr/spads/doc/spadsDoc_GlobalSettings.html#global:unitsyncDir unitsyncDir] and [http://planetspads.free.fr/spads/doc/spadsDoc_GlobalSettings.html#global:springServer springServer] values in spads.conf to the corresponding paths for the desired Spring version
*empty the [http://planetspads.free.fr/spads/doc/spadsDoc_GlobalSettings.html#global:springServerType springServerType] value in spads.conf
*add the Spring data directory containing the base content of the desired Spring version to the [http://planetspads.free.fr/spads/doc/spadsDoc_GlobalSettings.html#global:springDataDir springDataDir] values in spads.conf
*restart SPADS


= Changing Spring version in SPADS =
=== Changing Spring version when auto-management is enabled ===
*update the [http://planetspads.free.fr/spads/doc/spadsDoc_GlobalSettings.html#global:autoManagedSpringVersion autoManagedSpringVersion] value in spads.conf to the new desired Spring version or release (examples: &quot;103.0&quot;, &quot;103.0.1-1359-gdc09042&quot;, &quot;testing&quot;)
*restart SPADS
=== Changing Spring version when auto-management is disabled ===
*update the [http://planetspads.free.fr/spads/doc/spadsDoc_GlobalSettings.html#global:unitsyncDir unitsyncDir], [http://planetspads.free.fr/spads/doc/spadsDoc_GlobalSettings.html#global:springServer springServer] and [http://planetspads.free.fr/spads/doc/spadsDoc_GlobalSettings.html#global:springDataDir springDataDir] values in spads.conf to the corresponding paths for the new Spring version if needed
*restart SPADS

__NOTOC__
[[Category:SPADS]]</text>
      <sha1>01x4ne1p8qucqq0ji4qpysgqx2atqmp</sha1>
    </revision>
  </page>
  <page>
    <title>SSMF: Detail Textures</title>
    <ns>0</ns>
    <id>3225</id>
    <revision>
      <id>28954</id>
      <parentid>28951</parentid>
      <timestamp>2014-10-21T19:08:30Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>decategorise</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="415">{{delete}}
= Detail Textures =

Detail textures are made by adding a texture to each channel of an image.

http://www.evolutionrts.info/random/examplesplattex.jpg

There are a total of 4 texture slots available. One for R, G, B, and one for the Alpha Channel. When you have your detail textures ready, save the file as splattex.tga (Targa - 1024x1024) and place it in the maps folder alongside splatdistribution.tga</text>
      <sha1>q4jcs8v8oteasrdzzie19e5cxbwv09t</sha1>
    </revision>
  </page>
  <page>
    <title>SSMF: Distribution Map</title>
    <ns>0</ns>
    <id>3224</id>
    <revision>
      <id>28956</id>
      <parentid>28947</parentid>
      <timestamp>2014-10-21T19:08:53Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>decategorise</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="715">{{delete}}
= Distribution Map =

The Distribution map is essentially an atlas telling spring where to spread your detail textures. Lets have a look at an example distribution map:

http://www.evolutionrts.info/random/examplesplatdistribution.jpg

Each channel corresponds to a different texture referenced in the detail texture map. These areas are set using the channels of the image and are generally saved using the Targa format ( .tga ), sized at 1024x1024.

http://www.evolutionrts.info/random/examplechannels.jpg

Save your distribution map as splatdistribution.tga, and place it in the maps folder alongside the smf and smt files.

Once you have your distribution map, you need to set up your detail textures</text>
      <sha1>tjru3sw1rhpp92e4zxk4nq886g2luyp</sha1>
    </revision>
  </page>
  <page>
    <title>SSMF: Grass Shading Map</title>
    <ns>0</ns>
    <id>3227</id>
    <revision>
      <id>28955</id>
      <parentid>28950</parentid>
      <timestamp>2014-10-21T19:08:42Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>decategorise</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="672">{{delete}}
= Grass Shading Map =
By default spring's grass pulls the minimap to use for coloration of the grass patches. You can override this with ''grassShadingTex''. Below is an example




&lt;table&gt;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;Grass map&lt;/td&gt;&lt;td&gt;Grass map in game&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;[[File:Grassmap_Map_example.jpegâ€Ž|120px|alt=grassmap example |grassmap]]&lt;/td&gt;&lt;td&gt;This is a section of grassmap image. This image applied to the entire map which determines the color of grass.&lt;/td&gt;&lt;td&gt;[[File:Grassmap_Map_ingame.jpgâ€Ž|300px|alt=grassmapp applied in game|in game]]&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;Click image for larger picture&lt;/td&gt;&lt;td&gt;Click image for larger picture&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</text>
      <sha1>cqx8fva8sv9oq9r33rsha283fkdew7y</sha1>
    </revision>
  </page>
  <page>
    <title>SSMF: Normal Map</title>
    <ns>0</ns>
    <id>3297</id>
    <revision>
      <id>28953</id>
      <parentid>28952</parentid>
      <timestamp>2014-10-21T19:08:21Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>decategorise</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="297">{{delete}}
= Normal Map =

Normal maps (in this case) are used to add &quot;fake&quot; 3d detail to a flat 2d image. It is a technique of manipulating lighting to give the appearance of looking at a 3d object, when actually it is just 2D.

This is what a normal map looks like:
[[File:examplenormalmap.jpg]]</text>
      <sha1>qzkq4rcrcrwptus0g9zs045qwuacjr1</sha1>
    </revision>
  </page>
  <page>
    <title>SSMF: Specular Map</title>
    <ns>0</ns>
    <id>3226</id>
    <revision>
      <id>28957</id>
      <parentid>23993</parentid>
      <timestamp>2014-10-22T00:37:12Z</timestamp>
      <contributor>
        <username>Enetheru</username>
        <id>2783</id>
      </contributor>
      <minor/>
      <comment>not enough useful information compared to http://springrts.com/wiki/Mapdev:specular</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="413">{{delete}}
= Specular Map =

A specular map controls brightness and &quot;shinyness&quot; of your map. The more light you add to a particular portion of your specular map, the brighter and more reflective that portion of the map will be. Specular maps should be 1024x1024 and saved as specularmap.bmp. Of course placed in the maps folder with the other ssmf maps.

http://www.evolutionrts.info/random/examplespecularmap.jpg</text>
      <sha1>81ya52z9ofm0d4k3zic3lunux1kjiz4</sha1>
    </revision>
  </page>
  <page>
    <title>SY</title>
    <ns>0</ns>
    <id>1024</id>
    <revision>
      <id>18945</id>
      <parentid>10857</parentid>
      <timestamp>2010-03-13T17:28:58Z</timestamp>
      <contributor>
        <username>Koshi</username>
        <id>2371</id>
      </contributor>
      <comment>fix category</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="621">The SYs are the &quot;Swedish Yankspankers&quot;, long time TA hackers probably most well known for the '''Demo Recorder'''(A way to record and then play-back games played in Total Annihilation) and their [[XTA]] balancing mod.  The Demo Recorder eventually began supporting full 3D playback which could be concidered the beginnings of the TA Spring projects.  For more information, check their [http://www.clan-sy.com/ Home Page].

NOTE: I'm sure those who have been into the TA Scene longer could beef this up with a lot more history.

===Non-wiki Links===
*[http://taspring.clan-sy.com/team.php Team Members]

[[Category:Clans]]</text>
      <sha1>pgg3lffgopj9bcc62ak73ly3k026ydg</sha1>
    </revision>
  </page>
  <page>
    <title>Script.txt</title>
    <ns>0</ns>
    <id>3145</id>
    <revision>
      <id>30870</id>
      <parentid>30215</parentid>
      <timestamp>2019-01-15T15:49:15Z</timestamp>
      <contributor>
        <username>Gajop</username>
        <id>2804</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2299">= Script.txt =
Start script file for Spring Engine. 

Lobbies create it for spring, usually found in &lt;code&gt;~/.spring/script.txt&lt;/code&gt; on Linux/MacOSX.

On Windows it can be found mostly in &lt;code&gt;My Documents\My Games\Spring\script.txt&lt;/code&gt; or next to spring.exe.

== Structure ==
See {{sourcelink|file=doc/StartScriptFormat.txt}} for a more detailed example.

Spring 97.0 added &lt;code&gt;GAME/MUTATOR{0..9}&lt;/code&gt; so you can load arbitrary mutator archives before the game. Additionally since 97.0 &lt;code&gt;GAME/GameID&lt;/code&gt; is the only seed of the synced random generator, so you can define the &lt;code&gt;GameID&lt;/code&gt; in a luaAI battle startscript and you will always get a syncing match.

Since 99.0 &lt;code&gt;GAME/Gametype&lt;/code&gt; can be a [[rapid]] tag, and demo recording can be disabled by setting &lt;code&gt;GAME/RecordDemo&lt;/code&gt; to 0

Since 102.0 &lt;code&gt;GAME/SaveFile&lt;/code&gt; can be specified in start script in order to start from a (lua) save (.slsf).

Overview of the structure:
&lt;pre&gt;[GAME]
{
  // game attributes
  [MUTATOR0]
  {
    // mutator attributes
  }
  [AI0]
  {
    // AI attributes
  }
  [PLAYER0]
  {
    // player attributes
  }
  [TEAM0]
  {
    // team attributes
  }
  [ALLYTEAM0]
  {
    // ally team attributes
  }
  [RESTRICT]
  {
    // restrictions
  }
  [MODOPTIONS]
  {
    // values for the options defined in Modoptions.lua
  }
  [MAPOPTIONS]
  {
    // values for the options defined in Mapoptions.lua
  }
}&lt;/pre&gt;

= Examples =
== minimal functional startscript ==
Based on {{forumlink|topic=32893&amp;p=566971#p566953|title=these two posts:}} 
&lt;pre&gt;
[GAME]
{
	MapName=DeltaSiegeDry;
	GameType=Balanced Annihilation V8.10;
	IsHost=1;
	[PLAYER0]
	{
		Team=0;
	}
	[TEAM0]
	{
		TeamLeader=0;
		AllyTeam=0;
	}
	[ALLYTEAM0]
	{
	}
}
&lt;/pre&gt;


== More examples ==
startscripts used for pre-defined offline matches vs AI in different team configurations -  
https://code.google.com/p/springtanks/source/browse/#svn%2Ftrunk%2FMissions

= Generating startscripts =
It is possible to use for example Springlobby to setup a game via the Singleplayer tab.

The temporary file that gets generated can be copied for further use.

== Converting Lua tables to script.txt format ==

{{forumlink|topic=32643|title=lua table -&gt; script.txt generator}} - thread with two examples

[[Category:Development]]</text>
      <sha1>tnddyqxyam0unav6nwdi1h6aalyzul8</sha1>
    </revision>
  </page>
  <page>
    <title>Scripting for newbs</title>
    <ns>0</ns>
    <id>2452</id>
    <revision>
      <id>26789</id>
      <parentid>20731</parentid>
      <timestamp>2013-03-21T09:25:21Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>recat (deprecate?)</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1194">=Scripting for Newbs=

This is a reference guide for all of you out there that don't know C++, or are unfamiliar with scriptor.

&lt;10&gt; would be to angle 10 degrees.
[10] would be 10 spring units, look at the upspring model for examples.

An example is: 

spin gun around y-axis speed [10] accelerate [2];

In this example it would rotate the object &quot;gun&quot; around the y-axis &quot;up and down&quot; accelerating speed of 2 units per time, to a max speed of 10 units per time.

Another thing to understand with Cob/Bos is that it has a few built-in scripts, such as:

Activate()

Which is called if the unit is set to on, via onoffable in the unit's fbi file.

Here is an example of a script for a metal extractor:

piece base, top;

#include &quot;sfxtype.h&quot;
#include &quot;exptype.h&quot;

Activate()
{
move base to y-axis [4];
}

Deactivate()
{
move base to y-axis [0];
}

SpinTop()
{
while (get ACTIVATION)
{
move top to y-axis [4] speed [20];
sleep 400;
move top to y-axis [0] speed [20];
sleep 400;
}
start-script SpinTop();

The --|-- are to represent the spacing via tab, I'm not sure if it is neccesary on the first level, but it does make the script easier to read [at least in my opinion].
[[Category:Animation]]</text>
      <sha1>q82gbskhbw5ufydycy8pdx1p8tl8puc</sha1>
    </revision>
  </page>
  <page>
    <title>Sd7</title>
    <ns>0</ns>
    <id>3177</id>
    <redirect title="Gamedev:Archives" />
    <revision>
      <id>27582</id>
      <parentid>26775</parentid>
      <timestamp>2013-08-24T19:40:46Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>make this a redirect, adds nothing</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30">#REDIRECT [[Gamedev:Archives]]</text>
      <sha1>l177ez9gkc2w2y1p62jsue52ol4yret</sha1>
    </revision>
  </page>
  <page>
    <title>Selectkeys.txt</title>
    <ns>0</ns>
    <id>3275</id>
    <redirect title="Uikeys.txt" />
    <revision>
      <id>24646</id>
      <timestamp>2012-06-03T13:49:39Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>moved [[Selectkeys.txt]] to [[Uikeys.txt]]: selectkeys.txt support as removed in spring 89, use uikeys.txt instead!</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="24">#REDIRECT [[Uikeys.txt]]</text>
      <sha1>c6dygenkoe4bsuecpvfni9qqhqb5gs8</sha1>
    </revision>
  </page>
  <page>
    <title>SetMoveTypeDataExample</title>
    <ns>0</ns>
    <id>2793</id>
    <revision>
      <id>26855</id>
      <parentid>21214</parentid>
      <timestamp>2013-03-23T16:48:48Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>1cat</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3021">&lt;code&gt;&lt;pre&gt;

function gadget:GetInfo()
  return {
    name      = &quot;FlashTurnRate&quot;,
    desc      = &quot;Adds an option for flashes and friends to turn faster but go slower&quot;,
    author    = &quot;Baczek&quot;,
    date      = &quot;26 Dec 2009&quot;,
    license   = &quot;GNU GPL, v2 or later&quot;,
    layer     = 0,
    enabled   = true  --  loaded by default?
  }
end

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

if (not gadgetHandler:IsSyncedCode()) then
  return
end

local EditUnitCmdDesc = Spring.EditUnitCmdDesc
local FindUnitCmdDesc = Spring.FindUnitCmdDesc
local InsertUnitCmdDesc = Spring.InsertUnitCmdDesc
local GiveOrderToUnit = Spring.GiveOrderToUnit
local SetUnitNeutral = Spring.SetUnitNeutral
local GetUnitMoveTypeData = Spring.GetUnitMoveTypeData
local SetGroundMoveTypeData = Spring.MoveCtrl.SetGroundMoveTypeData
local SetGunshipMoveTypeData = Spring.MoveCtrl.SetGunshipMoveTypeData

local FLASH = {
  [UnitDefNames[&quot;armflash&quot;].id] = true,
  [UnitDefNames[&quot;corgator&quot;].id] = true,
  [UnitDefNames[&quot;armatlas&quot;].id] = true,
}

local flashList = {}

local CMD_SET_TR = 34581

local turnCmd = {
      id      = CMD_SET_TR,
      name    = &quot;flashTurnRate&quot;,
      action  = &quot;flashTurnRate&quot;,
      type    = CMDTYPE.ICON_MODE,
      tooltip = &quot;Changes the turn rate of the Flash&quot;,
      params  = { '0', '  Lo  ', '  Hi  '}
}


function gadget:UnitCreated(unitID, unitDefID, unitTeam, builderID)
  if FLASH[unitDefID] then
    InsertUnitCmdDesc(unitID, 500, turnCmd)
    local tr = UnitDefs[unitDefID].turnRate
    local ms = UnitDefs[unitDefID].speed
    flashList[unitID] = {orgturnrate=tr, orgspeed=ms}
  end
end

function gadget:UnitDestroyed(unitID, unitDefID, unitTeam)
  flashList[unitID] = nil
end

function gadget:AllowCommand(unitID, unitDefID, teamID, cmdID, cmdParams, cmdOptions)
  if FLASH[unitDefID] then
    if (cmdID == CMD_SET_TR) then 
      local mt = GetUnitMoveTypeData(unitID)
      Spring.Echo(&quot;turnRate=&quot;..tostring(mt.turnRate))
      if mt.name ~= &quot;ground&quot; and mt.name ~= &quot;gunship&quot; then return false end
      local cmdDescID = FindUnitCmdDesc(unitID, CMD_SET_TR)
      Spring.Echo(&quot;cmdparams[1]=&quot; .. tostring(cmdParams[1]))
      if mt.name == &quot;ground&quot; then 
        SetGroundMoveTypeData(unitID, {
                turnRate=(1+cmdParams[1]) * flashList[unitID].orgturnrate,
                maxSpeed=flashList[unitID].orgspeed / (1+cmdParams[1])
        })
      elseif mt.name == &quot;gunship&quot; then
        -- setting maxSpeed on gunships should automatically adjust
        -- brakeDistance
        SetGunshipMoveTypeData(unitID, {
                turnRate=(1+cmdParams[1]) * flashList[unitID].orgturnrate,
                maxSpeed=flashList[unitID].orgspeed / (1+cmdParams[1])
        })
      end
      turnCmd.params[1] = cmdParams[1]
      EditUnitCmdDesc(unitID, cmdDescID, turnCmd)
      turnCmd.params[1] = 1
      return false
    end
  end
  return true
end

&lt;/pre&gt;&lt;/code&gt;
[[Category: Lua]]</text>
      <sha1>suie2rlb4f28zid7stu2cjltwczdey2</sha1>
    </revision>
  </page>
  <page>
    <title>SetMoveTypeDataExample Example usage</title>
    <ns>0</ns>
    <id>2794</id>
    <redirect title="SetMoveTypeDataExample" />
    <revision>
      <id>18000</id>
      <timestamp>2009-12-26T19:15:35Z</timestamp>
      <contributor>
        <username>Imbaczek</username>
        <id>852</id>
      </contributor>
      <comment>[[SetMoveTypeDataExample Example usage]] moved to [[SetMoveTypeDataExample]]: brainfart</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="36">#REDIRECT [[SetMoveTypeDataExample]]</text>
      <sha1>q8czxhjnv6dcluqqev9111tg4zp1dgn</sha1>
    </revision>
  </page>
  <page>
    <title>SetupGuide</title>
    <ns>0</ns>
    <id>1254</id>
    <revision>
      <id>30905</id>
      <parentid>30475</parentid>
      <timestamp>2019-02-11T20:56:04Z</timestamp>
      <contributor>
        <username>Jobarjo</username>
        <id>2921</id>
      </contributor>
      <comment>added snap installation method</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1676">=Linux/Unix Setup Guide=

{{#css:
  table.glossy {
    margin: 4px; padding:10px;
    border: 1px solid rgba(0,0,0,0.5);
    border-radius: 10px 10px 10px 10px;
    box-shadow: 0 2px 6px rgba(0,0,0,0.5), inset 0 1px rgba(255,255,255,0.3), inset 0 10px rgba(255,255,255,0.2), inset 0 10px 20px rgba(255,255,255,0.25), inset 0 -15px 30px rgba(0,0,0,0.3);
    text-align: center;
  }
  /*table.glossy:hover {
    background: rgba(160,160,220,0.4);
  }*/
}}



{| style=&quot;width:70%; margin-left:15%; margin-right:15%;&quot; |

|{{Template:LinuxSetupGuideButton|name=From Source|link=Build_from_source|icon=Git.png}}

|{{Template:LinuxSetupGuideButton|name=Snaps|link=Snaps_install }}

|{{Template:LinuxSetupGuideButton|name=Ubuntu|link=Ubuntu_install|icon=Distributions-ubuntu.png}}

|{{Template:LinuxSetupGuideButton|name=Gentoo|link=Gentoo_install|icon=Distributions-gentoo.png}}

|-

|{{Template:LinuxSetupGuideButton|name=Slackware|link=Slackware12_install|icon=Distributions-slackware.png}}

|{{Template:LinuxSetupGuideButton|name=Debian|link=Debian_install|icon=Distributions-debian.png}}

|{{Template:LinuxSetupGuideButton|name=Mandriva|link=Mandriva_install|icon=Distributions-mandriva_linux.png}}

|-

|{{Template:LinuxSetupGuideButton|name=openSUSE|link=openSUSE_install|icon=Distributions-opensuse_linux.png}}

|{{Template:LinuxSetupGuideButton|name=Fedora|extlink=http://projects.springlobby.info/projects/springlobby/wiki/Install#Fedora-10|icon=Distributions-fedora.png}}

|{{Template:LinuxSetupGuideButton|name=FreeBSD|link=FreeBSD_install|icon=Distributions-freebsd.png}}
|}


&lt;span style=&quot;float:right&quot;&gt;[[Linux:Packaging | Package Maintainers]]&lt;/span&gt;

[[Category:Linux]]</text>
      <sha1>9ux4bkavc64ale9mrub29xb9b77tgqp</sha1>
    </revision>
  </page>
  <page>
    <title>Shaders:CustomUnitShadingFramework</title>
    <ns>0</ns>
    <id>3829</id>
    <revision>
      <id>30777</id>
      <timestamp>2018-09-24T19:42:45Z</timestamp>
      <contributor>
        <username>Maddox</username>
        <id>2934</id>
      </contributor>
      <comment>1st commit</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1298">The Custom Unit Shading Framework was developed by jK to facilitate the writing of custom unit &amp; feature shaders in Lua for the SpringRTS engine.&lt;br /&gt;
You can access its repository from here: https://github.com/jk3064/Custom-Unit-Shader-Framework
&lt;br /&gt;&lt;br /&gt;
Writing new shaders requires the following two steps:
* Creation of a new file in the ModelMaterials folder that defines the material. Here you should specify the following:
** material properties (camera usage, textures, culling, etc.)
** whether it's a unit or feature shader (feature shaders have feature=true)
** callins that can affect unit/feature rendering (such as UnitCreated, DrawUnit, as well as the feature equivalents)
** the unit and feature defs which will be affected by the shader
* Creation of a shader file in the ModelMaterials/Shaders. This file should contain the actual GLSL shader as well as the definition of the uniform values used within it.
&lt;br /&gt;For details refer to the existing unit &amp; feature example shaders.
&lt;br /&gt;
* To test feature shaders do the following steps:
** Open modinfo.lua and change modtype to 1 so it can be run directly
** Start spring using Custom Unit Shaders as the game.
** In the console, type /cheat and /give ad0_aleppo_X, where X is any number from 1 to 10, e.g. /give ad0_aleppo_5</text>
      <sha1>i7fzhetsl8wgnu1umqbnc8nszv9472x</sha1>
    </revision>
  </page>
  <page>
    <title>Shaders:IvandPBRShader</title>
    <ns>0</ns>
    <id>3831</id>
    <revision>
      <id>30784</id>
      <parentid>30783</parentid>
      <timestamp>2018-09-27T17:55:36Z</timestamp>
      <contributor>
        <username>Maddox</username>
        <id>2934</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1950">'''Ivand's PBR shader's install instructions'''
&lt;br /&gt;
What you will need:
&lt;br /&gt;
# Latest maintenance engine. Grab it here: https://springrts.com/dl/buildbot/default/maintenance/
# Custom unit shader gadget. Every mod has a bit different code, check if your game has it, if not copy from somewhere else. ZK variant: https://github.com/lhog/Zero-K/blob/pbrCUS_v1/LuaRules/Gadgets/api_custom_unit_shaders.lua
# PBR shader: https://github.com/lhog/Zero-K/blob/pbrCUS_v1/ModelMaterials/Shaders/pbr.lua
# PBR meta-material definitions: https://github.com/lhog/Zero-K/blob/pbrCUS_v1/ModelMaterials/10_pbr.lua
# model definition with PBR extension: https://github.com/lhog/Zero-K/blob/pbrCUS_v1/Objects3d/unit.dae.lua (replace &quot;unit&quot; by your actual unit model's name)
# unitDef file (ZK style, you might prefer your own): https://github.com/lhog/Zero-K/blob/pbrCUS_v1/units/unit.lua
# model and textures (not on github, provide your own). Make sure texture filenames and channel mappings are specified correctly in unit.dae.lua
&lt;br /&gt;
If this all sounds too complicated from the first sight, you can just clone this demo branch: &quot;git clone -b pbrCUS_v1 https://github.com/lhog/Zero-K.git&quot;. It's all in there except for textures and .dae file
&lt;br /&gt;&lt;br /&gt;
'''Texture Preparation'''
&lt;br /&gt;
For efficient file size usage, your different maps must be disposed in separate channels of up to three images. All images and channels are optional and will reset to a default value or appearance if missing. Follows a proposal for this channel layout, yet bear in mind this can be rearranged in the model.ext.lua config file. Upspring has a built-in menu option to assemble images from separate channels in any desired configuration.
&lt;br /&gt;
*Texture1: Diffuse/Color (r, g, b) + Teamcolor (a)
*Texture2: Occlusion (r) + Roughness (g) + Metallic (b) + Emissive (a)
*Texture3: Normal (r, g, b) + Clipping (a)
&lt;br /&gt;
PS.: Clipping is currently unsupported in this shader.</text>
      <sha1>36gt71rzddimqk5cqhblbyndmilxwc8</sha1>
    </revision>
  </page>
  <page>
    <title>Shaders:PBRShaders</title>
    <ns>0</ns>
    <id>3830</id>
    <revision>
      <id>30781</id>
      <parentid>30780</parentid>
      <timestamp>2018-09-27T17:49:18Z</timestamp>
      <contributor>
        <username>Maddox</username>
        <id>2934</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1021">PBR stands for Physically Based Render, it's a technique for 3D surface shading that tries to replicate the physical properties of light when hitting a given surface. More info: https://en.wikipedia.org/wiki/Physically_based_rendering

One of the main advantages of PBR - besides looking extremely good for minimal effort by the artists - is how streamlined the process of generating the textures becomes. Regardless of if you created the textures \in an image editing program or in a dedicated texturing app like Substance Painter, you know that &quot;what you see is what you get&quot; - ie. the final look of the model in the target gaming engine will be the same as what you're seeing in your authoring software.

SanguinarioJoe (from Spring 1944) &amp; Ivand (from ZeroK) have developed powerful PBR shaders for the Spring engine. Follows the related links:
&lt;br /&gt;
*[https://github.com/sanguinariojoe/spring1944-materialstest/commit/9696a1dcc42790a627ea27660d67ebf27348ca05 SanguinarioJoe's PBR Shader]
*[[Shaders:IvandPBRShader]]</text>
      <sha1>srnkoh6zklktxaun9o0gsggzax9ov6q</sha1>
    </revision>
  </page>
  <page>
    <title>Shard AI</title>
    <ns>0</ns>
    <id>3357</id>
    <redirect title="AI:Shard" />
    <revision>
      <id>25466</id>
      <timestamp>2012-11-26T03:52:28Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>Abma moved page [[Shard AI]] to [[AI:Shard]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="22">#REDIRECT [[AI:Shard]]</text>
      <sha1>ocsqngtqwqjd3mw1a4dk8koshyfsuxs</sha1>
    </revision>
  </page>
  <page>
    <title>Shield Interception Tag Use</title>
    <ns>0</ns>
    <id>1769</id>
    <revision>
      <id>27911</id>
      <parentid>26884</parentid>
      <timestamp>2013-10-29T18:04:05Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>recat to Game Dev (bye bye Units!) needs cleanup</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2473">== &lt;center&gt;Shield Interception Tags&lt;/center&gt; ==



The two following tags can be used to control what types of shields can intercept what types of weapons:

'''InterceptedByShieldType:''' This is defined in the weapon that is to be intercepted. It represents a bitfield that is checked against a similar bitfield on the shield for a positive or negative interception (see examples).

'''ShieldInterceptType:''' This is defined in the shield. It represents a bitfield that is checked against a similar bitfield on the weapon to determine a positive or negative interception (see examples).



== &lt;center&gt;Examples&lt;/center&gt; ==




In order to check for shield collisions, the two tags above are converted into binary format, for example:&lt;br&gt;
&lt;br&gt;
InterceptedByShieldType=5; becomes 101 in binary&lt;br&gt;
ShieldInterceptType=7; becomes 111 in binary&lt;br&gt;
&lt;br&gt;
To then check that weapon's interception status against the shield, the bitfields need to be lined up as follows: &lt;br&gt;
&lt;br&gt;
101 (Weapon)&lt;br&gt;
111 (Shield)&lt;br&gt;
&lt;br&gt;
If any of the columns made by this line-up contains two ones, the shield will positively intercept the weapon. In this case there are two columns with two ones in them, so the weapon is intercepted. A final example:&lt;br&gt;
&lt;br&gt;
InterceptedByShieldType=7; becomes 111 in binary&lt;br&gt;
ShieldInterceptType=24; becomes 11000 in binary&lt;br&gt;
&lt;br&gt;
00111 (Weapon)&lt;br&gt;
11000 (Shield)&lt;br&gt;
&lt;br&gt;
No interception is registered because no columns contain two ones.



== &lt;center&gt;Charts&lt;/center&gt; ==



I (Relinquished) felt that it may help some people to have a few charts or reference tables to quickly see which shields work with what.


'''Table of Shield type hit detections''' (X's indicate a collision)


[http://i170.photobucket.com/albums/u257/apurelinquished/ShieldGroups.jpg Collision Chart]
http://i170.photobucket.com/albums/u257/apurelinquished/ShieldGroups.jpg


'''Binary Collision Shield Groups'''


1 2 4 8 16 32 Are the only 6 possible distinct shield groups.

Anything in each of the following categories will collide with any other one in the same category:

 000001 Shields:
 	1	3	5	7	9
 	11	13	15	17	19
 	21	23	25	27	29
 	31

 000010 Shields:
 	2	3	6	7	10
 	11	14	15	18	19
 	22	23	26	27	30
 	31

 000100 Shields:
 	4	5	6	7	12
 	13	14	15	20	21
 	22	23	28	29	30
 	31

 001000 Shields:
 	8	9	10	11	12
 	13	14	15	24	25
 	26	27	28	29	30
 	31

 010000 Shields:
 	16	17	18	19	20
 	21	22	23	24	25
 	26	27	28	29	30
 	31

 100000 Shields:
 	32

[[Category: Game Dev]]</text>
      <sha1>o02zwwtkj9lrxwancv5ol6g7j5wd4cr</sha1>
    </revision>
  </page>
  <page>
    <title>Sidedata.lua</title>
    <ns>0</ns>
    <id>3060</id>
    <revision>
      <id>31643</id>
      <parentid>26785</parentid>
      <timestamp>2021-11-02T00:07:31Z</timestamp>
      <contributor>
        <username>Maddox</username>
        <id>2934</id>
      </contributor>
      <minor/>
      <comment>Typo fixed - sitedata.lua =&gt; sidedata.lua</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1639">==Location==
&lt;code&gt;sidedata.lua&lt;/code&gt; is a file in the &lt;code&gt;Gamedata/&lt;/code&gt; directory of a Spring Game.

==Purpose==
This file defines the playable factions/races/sides in a game. (ie ARM &amp; CORE, Terran, Protoss, USA, Bananas,...)

==Source==
The engine source code which parses the data from this file is viewable here: 

* {{sourcelink|file=rts/Sim/Misc/SideParser.cpp}}

==Details==
Each faction can have two properties:&lt;br&gt;
* &lt;code&gt;name&lt;/code&gt; (displayed in lobby)&lt;br&gt;
*&lt;code&gt;startUnit&lt;/code&gt; (must be read by [http://springrts.com/phpbb/viewtopic.php?f=67&amp;t=21883&amp;p=417021 a gadget to actually spawn the start unit])&lt;br&gt;

These values are available to lua via &lt;code&gt;Spring.GetSideData&lt;/code&gt; (See [[Lua_SyncedRead#Sides.2FFactions|Lua_SyncedRead]]):
&lt;code&gt;&lt;pre&gt;local sideName, startUnit = Spring.GetSideData(sideID)&lt;/pre&gt;&lt;/code&gt;

==Example==
===Single Faction===
&lt;code&gt;&lt;pre&gt;local sideData = {
  {
    name = 'AwesomeDudes',
    startunit = 'awesomedudebase',
  },
}
return sideData
&lt;/pre&gt;&lt;/code&gt;
===Multiple Factions===
&lt;code&gt;&lt;pre&gt;local sideData = {
  {
    name = 'NKG',
    startunit = 'bflagship2',
  },
  {
    name = 'Drone',
    startunit = 'kdroneengineer',
  },
  ...
}
return sideData
&lt;/pre&gt;&lt;/code&gt;

==Faction Icons==
Faction icons are not defined in this file but just read from the &lt;code&gt;Sidepics/&lt;/code&gt; directory.

&lt;span class=&quot;note&quot;&gt;(NB: Some widgets, such as advanced playerlist, may complain about missing faction icon if they are not present)&lt;/span&gt;

Can be .bmp and maybe other formats.
Filename is same as Faction name ie for above examples:
&lt;code&gt;AwesomeDudes.bmp NKG.bmp Drone.bmp&lt;/code&gt;

[[Category:gamedata]]</text>
      <sha1>9lerq2bnsahjqn0spl78le1ihcxbe4o</sha1>
    </revision>
  </page>
  <page>
    <title>Simple Game Tutorial</title>
    <ns>0</ns>
    <id>1305</id>
    <revision>
      <id>27915</id>
      <parentid>26189</parentid>
      <timestamp>2013-10-29T18:14:08Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>/* Step 3:Making a 3D Model */ update link</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20992">{{deprecated|This page is out of date and has been marked for review.}}
[[Category:Deprecated]]

This Tutorial Aims to get a person from knowing nothing about Spring to the point where they can create and edit mods.

Right now I am working from memory so you may want to correct me when I'm wrong, I will try to cross link from my summaries to the appropriate articles available in other places.

I will not go too deep into making 3do's because they are old and dumb... but I'll try to make note of the differences here.

I don't know anything about scripting right now, so that section is likely to be sparse when I write it, I hope that someone will expand on it.

=Book 1: The First Unit=

==Step 1:Planning==
Who cares about planning, you know what you're doing... just come up with an idea for a mod... I made a chess set... if you don't have a real idea and just want to make a model show up in the game... then yeah... this is the place to start... I'd do that if I were you.

Another good thing to do at this point is to creat a &quot;working directory&quot;, and inside it create a directory with the name that your mod will have... after many headaches I decided it's best to put this in the root directory of your system so it's really easy to find when you are switching around back and forth between folders and keep having to find your files over and over again.


==Step 2:Getting The Tools==
You will need a bunch of stuff... here's the list (I assume you are using windows)

''Want:''
*[http://springrts.com/wiki/Download Spring] - The main program, you will likely need this to test if you've screwed up
*A Tiny Map (2x2) - to test your mod fast 

''Need:''
*'''Program listings can be found here:''' '''[http://springrts.com/wiki/Map,_Mod,_And_Unit_Development_Programs Map, Mod, And Unit Development Programs]'''
*3D Modeling Program - '''See above link'''
*Notepad - to edit all the myriad of text files
*A Graphical Editing Program - needs to handle RGBA TGAs (aka TGA's with alpha channels), I suggest Photoshop if you have it, or The GIMP... needed for all of the texture making for UVmapping stuff... '''See above link'''
*Upspring 1.3 - To convert your models to the appropriate s3o format (if you want to fight with 3do builder, then go ahead... a good trick is to get your model into Upspring first and adjust all the hierarchy, then save it as an 3do... but why bother?). '''See above link'''
*Scriptor - to make and compile your units &quot;animation script&quot;... or steal someone else's and make it work for your unit. '''See above link'''
*Compression Utility - (I suggest [http://www.7-zip.org/ 7zip] - even if you are using zip compression and not 7zip, it's still good to have)

==Step 3:Making a 3D Model==

Go into your 3D modeling program and make a 3D model, [http://taspring.clan-sy.com/w/images/b/b4/WingsCombine.PNG combine] all the objects and UV map the model, then separate it out into any parts that need to move independently of each other.  Then Export the UV map as an Image File and Export the whole thing as a 3ds file.  Put the original wings file, the UVMap image and the 3ds file into your working directory so you can find them later.

Wings 3D UV Mapping tutorial has been started here - [[3DModels:Wings3DTutorial]]

==Step 4:Fixing Your Images==

[[Basic s3o unit making guide|This Article includes a UVMapping Guide]]

Open up your UVMap in Photoshop (or whatever) go to the layer/chooser dialog box and go to the Channels Tab, add a new layer (it should default to alpha) and fill it with 99% black so you can see your texture in upspring.  If you want to can paint the UVmap and put white (1% black) on the alpha channel where you want your team colors to show up (you can use something between 1% and 99% to get a blend of your team color along with the texture... for example 50% will give you your texture with 50% of the team color mixed in...)

I don't know how to do glow maps... XXreminder for someone to create a Glowmapping tutorial... you don't actually need one for the model to show up.

Save these images both in the working directory.

Save a copy of these images in tga format into &lt;working directory&gt;/&lt;mod name&gt;/unittextures

==Step 5:Upspring==

===Importing Your 3ds===
Open [[upspring]], go to file&gt;load model and navigate to and open your 3DS model you exported, you should see the model in upspring as a 3d mesh.  Go to the model tab and set the radius and height values to something other then zero... this defines where the health bar will show up, and more importantly, how big the collision sphere will be.

You will also need to use all of the other tools on those tabs to resize and rotate and move your model to the right place... wings makes models that are 90 degrees off and about 30 times smaller than most spring models... make sure you click the &quot;apply transform&quot; button after any changes that you actually want to show up in the game.

Also, you will want to make the hierarchy work using the cut, paste, and add empty buttons.  You will need an object called &quot;base&quot; that all the other objects are connected to... the &quot;origin object&quot;... sometimes you get lucky and wings exports it properly... usually not.

===Importing Your UV and Glowmaps===

Go to the textures tab and make your UV/texture/team-color map as &quot;texture1&quot; and your UV/glow/reflectivity map as &quot;texture2&quot;... it should show up correctly in the preview pane.

===Exporting Your s3o===
Choose File&gt;Save Model As then in the drop down select &quot;s3o&quot; and type an appropriate name. This model should be saved to your working directory, and a copy of it made to &lt;working directory&gt;/&lt;mod name&gt;/objects3d/

==Step 6: Lua files==

===UnitName.lua===
&lt;!--
For Reference visit [[Units:FBI]], but again, the easiest way to do this is to extract an existing mod and find the fbi for a unit that behaves similarly to the one you are trying to make and rename and modify it.

Some More Specific Information Not Clear in the &quot;Units:FBI&quot; article:

'''Name+&quot; &quot;+Description=Spring Display Name'''

So if you have the following settings:

 Name=Tiger;
 Description=Fast Attack C.A.T.;

The Tooltip will show &quot;Tiger Fast Attack C.A.T.&quot;

'''BuildPic Defaults to UnitName.bmp'''

So if you leave out &quot;BuildPic=filename.bmp;&quot; Spring will look in /unitpics/ for a file called &quot;UnitName.bmp&quot; to use as your buildpic.

'''ObjectName'''

If you want to use an s3o object, you will need to specify with &quot;ObjectName=UnitName'''.S3O;'''&quot; otherwise it will look for &quot;UnitName.3do&quot;.  Also, you don't have to use &quot;UnitName&quot; as the filename and, in fact, multiple Unit's fbi files can reference the same 3D models. It is easier, however, for people to figure out what you are doing in your mod if you follow the standards.

Save this file as plain text in &lt;working directory&gt;/&lt;mod name&gt;/units/
--&gt;

&lt;pre&gt;
unitDef = {
  unitname           = [[arm_spider]],
  name               = [[Weaver]],
  description        = [[Cloaking Construction Spider, Builds at 9 m/s]],
  acceleration       = 0.15,
  bmcode             = [[1]],
  brakeRate          = 0.15,
  buildCostEnergy    = 230,
  buildCostMetal     = 230,
  buildDistance      = 80,
  builder            = true,

  buildoptions       = {
  },

  buildPic           = [[arm_spider.png]],
  buildTime          = 230,
  canAttack          = false,
  canGuard           = true,
  canMove            = true,
  canPatrol          = true,
  canreclamate       = [[1]],
  canstop            = [[1]],
  category           = [[LAND UNARMED]],
  cloakCost          = 1,
  cloakCostMoving    = 2,
  corpse             = [[DEAD]],

  customParams       = {
    description_bp = [[Aranha e de construÃƒÂ§?o, ConstrÃƒÂ³i a 6 m/s]],
    description_es = [[Ara?a de construcciÃƒÂ³n, construye a 6 m/s]],
    description_fi = [[Rakentaja/kaikuluotainkiipeilij?, rakentaa 6m/s nopeudella]],
    description_fr = [[Araign?e de Construction, Construit ? 6 m/s]],
    description_it = [[Ragno do costruzione occultante, costruisce a 6 m/s]],
    description_pl = [[Paj?k konstruktor, buduje z pr?dko?ci? 6m/s]],
    helptext       = [[The Weaver is a constructor that can climb over any obstacle and build defenses on high ground.]],
    helptext_bp    = [[Weaver ÃƒÂ© o construtor escalador camuflÃƒÂ¡vel de NOVA. Pode subir qualquer obstÃƒÂ¡culo, mas constrÃƒÂ³i mais devagar que construtores normais.]],
    helptext_es    = [[El Weaver es el constructor que puede treparse sobre qualquier obstÃƒÂ¡culo y construir defensas en terreno alto]],
    helptext_fi    = [[Weaver pystyy liikkumaan vaikeakulkuisimmassakin maastossa ja rakentamaan vaivatta my?s useimmille muille rakentajille saavuttamattomiin paikkoihin.]],
    helptext_fr    = [[Le weaver est un robot de construction tout terrain qui peut batir des d?fenses en terrain ?lev?.]],
    helptext_it    = [[Il Weaver ÃƒÂ© un costruttore che puo arrampicarsi su qualunque ostacolo e costruire difese nel terreno alto]],
    helptext_pl    = [[Weaver jest konstruktorem mog?cym wspina? si? po ka?dej powierzchni oraz posiadaj?cym mo?liwo?? maskowania si?]],
  },

  defaultmissiontype = [[Standby]],
  designation        = [[ARM-MLSPD]],
  energyMake         = 0.15,
  energyUse          = 0,
  explodeAs          = [[BIG_UNITEX]],
  footprintX         = 3,
  footprintZ         = 3,
  iconType           = [[builder]],
  mass               = 115,
  maxDamage          = 750,
  maxslope           = 16,
  maxSlope           = 72,
  maxVelocity        = 1.7,
  maxWaterDepth      = 22,
  metalMake          = 0.15,
  movementClass      = [[TKBOT3]],
  noAutoFire         = false,
  noChaseCategory    = [[TERRAFORM SATELLITE FIXEDWING GUNSHIP HOVER SHIP SWIM SUB LAND FLOAT SINK]],
  objectName         = [[ARMMLSPD]],
  radarDistanceJam   = 256,
  seismicSignature   = 16,
  selfDestructAs     = [[BIG_UNITEX]],
  showNanoSpray      = false,
  side               = [[ARM]],
  sightDistance      = 295,
  smoothAnim         = true,
  steeringmode       = [[1]],
  TEDClass           = [[CNSTR]],
  terraformSpeed     = 450,
  threed             = [[1]],
  turninplace        = 0,
  turnRate           = 1020,
  workerTime         = 9,
  zbuffer            = [[1]],

  featureDefs        = {

    DEAD  = {
      description      = [[Wreckage - Weaver]],
      blocking         = true,
      category         = [[arm_corpses]],
      damage           = 850,
      featureDead      = [[DEAD2]],
      featurereclamate = [[smudge01]],
      footprintX       = 3,
      footprintZ       = 3,
      height           = [[40]],
      hitdensity       = [[100]],
      metal            = 92,
      object           = [[ARMMLSPD_dead]],
      reclaimable      = true,
      reclaimTime      = 92,
      seqnamereclamate = [[tree1reclamate]],
      world            = [[All Worlds]],
    },


    DEAD2 = {
      description      = [[Debris - Weaver]],
      blocking         = false,
      category         = [[heaps]],
      damage           = 850,
      featureDead      = [[HEAP]],
      featurereclamate = [[smudge01]],
      footprintX       = 3,
      footprintZ       = 3,
      height           = [[4]],
      hitdensity       = [[100]],
      metal            = 92,
      object           = [[debris3x3b.s3o]],
      reclaimable      = true,
      reclaimTime      = 92,
      seqnamereclamate = [[tree1reclamate]],
      world            = [[All Worlds]],
    },


    HEAP  = {
      description      = [[Debris - Weaver]],
      blocking         = false,
      category         = [[heaps]],
      damage           = 850,
      featurereclamate = [[smudge01]],
      footprintX       = 3,
      footprintZ       = 3,
      height           = [[4]],
      hitdensity       = [[100]],
      metal            = 46,
      object           = [[debris3x3b.s3o]],
      reclaimable      = true,
      reclaimTime      = 46,
      seqnamereclamate = [[tree1reclamate]],
      world            = [[All Worlds]],
    },

  },

}

return lowerkeys({ arm_spider = unitDef })
&lt;/pre&gt;

Save this file as a lua file in &lt;working directory&gt;/&lt;mod name&gt;/units/

===modinfo.lua===

modinfo.lua is a lua file that defines a number of things that are used when loading a mod, most of the information is self explanatory but basically what you are doing is defining what is going to show up in whatever mod-selection interface you use as well as what other files need to be loaded into memory in order for your mod to work.

====Making a New Mod with your unit/units====
The following is an example of what will be in your [[modinfo.lua]] file if you are starting from scratch and making your own mod. This is also good when you are just testing one unit to see if it works.

&lt;pre&gt;
return {
		-- The name is shown in the selection interface
		game = &quot;MyMod&quot;,
		shortGame = &quot;MM&quot;,
		name = &quot;My Mod&quot;,
		shortName = &quot;MM&quot;,
		version = &quot;4.0&quot;,
		mutator = &quot;Heroes&quot;,
		-- These can be shown by the selection interface
		description = &quot;My Mod That I Made&quot;,
		url = &quot;http://www.theplacepeoplecangetthelatestversionofyourmod.com&quot;,
		-- What kind of mod this is 
		--  0 - Hidden (support mod that can't be selected, such as OTA_textures) 
		--  1 - Normal, only one can be selected at a time 
		--  2 - Addon, any number of these can be selected. Could be used 
		--      for single units for example. 
		--  others - perhaps mutators and addon races that can be 
		--           enabled in addition to XTA for example? 
		modtype = &quot;1&quot;,
		-- Number of other archives this one depends on 
		depend= {
			&quot;Spring content v1&quot;,
			&quot;Spring Cursors&quot;,
			&quot;Spring Bitmaps&quot;,
			-- Number of other content names this one replaces
                        added comment about filename vs unitsync name for dependency
		},
	}
&lt;/pre&gt;

====Adding Your Unit to an Existing Mod====
The following is an example of what will be in your modinfo.lua file if you are adding new units to an existing mod (in this case XTA SE v066), this is good for adding units to the build tree of an existing mod or adding a whole new team.

&lt;pre&gt;
-- Description of the mod control file recognized by spring:
return {
		-- The name is shown in the selection interface
		game = &quot;XTASE_MyUnits&quot;,
		shortGame = &quot;XTASEMU&quot;,
		name = &quot;XTASEv0.66 with+My Units&quot;,
		shortName = &quot;XTASEMU&quot;,
		version = &quot;4.0&quot;,
		mutator = &quot;Heroes&quot;,
		-- These can be shown by the selection interface
		description = &quot;xta_se_v066 with the cool tank I made&quot;,
		url = &quot;http://www.fileuniverse.com/exactlocationblahblahblah&quot;,
		-- What kind of mod this is 
		--  0 - Hidden (support mod that can't be selected, such as OTA_textures) 
		--  1 - Normal, only one can be selected at a time 
		--  2 - Addon, any number of these can be selected. Could be used 
		--      for single units for example. 
		--  others - perhaps mutators and addon races that can be 
		--           enabled in addition to xta for example? 
		modtype = &quot;1&quot;,
		-- Number of other archives this one depends on 
		depend= {
			&quot;XTAsev066&quot;,
                        &quot;Spring Cursors&quot;,
                        &quot;Spring content v1&quot;,
			-- Number of other archives this one replaces
                                        --do not used filenames, use the internal name, or downloader programs will fail to download the dependencies automatically
		},
	}
&lt;/pre&gt;

If you are not depending on OTA files, you will have to supply your own cursors.

There are some extra bits in these examples, but I work on the &quot;better safe than sorry&quot; principle... which is to wait for someone who knows what they are doing to fix my articles. 

You will want to save this file as plain text in &lt;working directory&gt;/&lt;mod name&gt;/

===armorDefs.lua===

I'm not exactly sure how this works, but the file needs to exist, so either steal one from another mod and modify it... or just make a file that looks like this.

&lt;pre&gt;
local armorDefs = {
}
&lt;/pre&gt;

You will want to save this file as a lua file in &lt;working directory&gt;/&lt;mod name&gt;/gamedata

===sidedata.lua===

Start by stealing the sidedata.lua file from your dependency mod if you have one, then edit it to include your units/side.

Basically this file is in the form:

&lt;pre&gt;
local sideData = {
	[1] = {
		name      = 'Good Guys',
		startunit = 'GG_comm',
	},
}
&lt;/pre&gt;

There are also additional &quot;[X]&quot; entries for each side/team/commander-choice available in the mod-selector you choose.

You will save this file as lua file in &lt;working directory&gt;/&lt;mod name&gt;/gamedata/

-------------------

Coolfile:

The engine will stop spawning start units and resources anymore. 
Please read this[http://springrts.com/phpbb/viewtopic.php?f=14&amp;t=21883] for more information.

(annotated on 2010-10-23)

Moved the buildOptions definitions into the unitDef definitions, LuaParser 
Please read the change log line 77 [http://springrts.com/wiki/The_Talking_Changelog] for more information.

(annotated on 2010-10-24)

===moveDefs.lua===
This file determines the footprint of your units, the angle of slopes they can climb and in how deep water they can drive. It contains several entries, all in the following format:

&lt;pre&gt;
local moveDefs = {
	KBOT1 = { -- This is the name. Unit files refer to this name.
		footprintx = 1, -- This is how big the X dimension is of the footprint in Spring units probably?
		footprintz = 1, -- This is how big the Y dimension is of the footprint in Spring units probably?
		maxwaterdepth = 15, -- This is how big the Y dimension is of the footprint in Spring units probably?
		maxslope = 36, -- The maximum angle of slopes this unit can climb.
		crushstrength = 5, -- This determines if the unit/unit class can crush certain features
	},
	-- etc..
}
&lt;/pre&gt;

===sounds.lua===
This file refers to all the sounds your units make, so Spring knows which sound file is linked to what action. It contains entries in the following format.

&lt;pre&gt;
local Sounds = {
   SoundItems = {
      IncomingChat = {
         file = &quot;sounds/nexuiz/talk.wav&quot;,
         priority = 15,
         preload = true,
      },
      MultiSelect = {
         file = &quot;sounds/ota/button9.wav&quot;,
         priority = 15,
         preload = true,
         rolloff = 0.1,
      },
      MapPoint = {
         file = &quot;sounds/bzflag/teamgrab.wav&quot;,
         priority = 15,
         preload = true,
         rolloff = 0.1,
      },
      FailedCommand = {
         file = &quot;sounds/openQuarz/pkup.wav&quot;,
         gain = 0.75,
         priority = 15,
         preload = true,
         in3d = false,
      },
}
&lt;/pre&gt;
}

==Step 7:Adding a Build Pic==

Add a 96x96 BMP to your &lt;working directory&gt;/&lt;mod name&gt;/unitpics/ folder named either &quot;UnitName.bmp&quot; or whatever you specified in the &quot;BuildPic=&quot; line of your fbi.

==Step 8:Adding a Side Pic==

Add a 16x16 BMP to your &lt;working directory&gt;/&lt;mod name&gt;/sidepics/ folder named &quot;teamname.bmp&quot; or whatever you specified in the &quot;name=&quot; line of your SIDEDATA.TDF for each side/team you have added.

==Step 9:Scriptor==

===Stealing a Script===
Open someone else's script in scriptor that works the way you want your script to work, look at the top where it's talking about &quot;piece names&quot;... then change those piece names to be the piece names of your unit and do a find/replace to make all the places where those pieces show up to be your pieces too.  Compile it so its name is the same as the &quot;UnitName=&quot; value in your &quot;UnitName.fbi&quot;.

XXreminder to someone to link to a proper scripting tutorial

Put the bos and cob files for your unit script in &lt;working directory&gt;/&lt;mod name&gt;/scripts

==Step 10:Compiling Your Mod==

You may want to check your mod directory and make sure it follows the structure defined [[Mod_Development:Archives|here]].

navigate to your &lt;working directory&gt;/&lt;mod name&gt; and select everything and choose &quot;add to archive &lt;mod name&gt;.7z&quot;.

make a copy of this file called &lt;mod name&gt;v0.7z in your working directory so you don't screw anything up later, then make a copy of it called &lt;mod name&gt;.sd7 in the mods directory of spring.

An alternative, added in more recent versions is the &quot;.SDD&quot; folder, to use this, copy the entire &lt;mod name&gt; folder in the mods directory of spring and rename it as &quot;&lt;mod name&gt;.SDD&quot;.  The advantage to the &quot;.SDD&quot; method is that you can tweak settings and add files without recompressing your mod all the time.  When it comes time to distribute your mod use &quot;.sd7&quot;.

EXAMPLES:
If your mod is called JoesMod you will have a file called &quot;JoesMod.sd7&quot; or a folder called &quot;JoesMod.SDD&quot; in your spring mods directory.

==Step 11:Testing Your Mod==
Open Up your lobby client, pick your mod from the drop-down list of the games in host battle or singleplayer mode if your lobby supports it(if it doesn't show up you screwed up your modinfo.txt), choose your tiny map from the map list and press start.  If it doesn't break and your unit shows up, you have created all the neccessary files... yay!

Gotchas:
*If it doesn't work, check you didn't zip the folder itself, but the contents, ie if you open mymod.sd7 with 7zip, you should see folders such as &quot;unittextures&quot; rather than a folder &quot;mymod&quot; containing unittextures.

Old Category:Game development</text>
      <sha1>l7oylziydamrqq046bdzfynzk21soha</sha1>
    </revision>
  </page>
  <page>
    <title>Simple Mod Tutorial</title>
    <ns>0</ns>
    <id>3003</id>
    <redirect title="Simple Game Tutorial" />
    <revision>
      <id>20702</id>
      <timestamp>2010-12-05T00:59:21Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>moved [[Simple Mod Tutorial]] to [[Simple Game Tutorial]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="34">#REDIRECT [[Simple Game Tutorial]]</text>
      <sha1>kpt4f59h60m3rqii4p3pram160jxz49</sha1>
    </revision>
  </page>
  <page>
    <title>Simpleparticlesystem</title>
    <ns>0</ns>
    <id>1866</id>
    <revision>
      <id>28797</id>
      <parentid>18976</parentid>
      <timestamp>2014-10-05T16:33:58Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>tag for delete</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2098">{{delete}}
'''Propertiers for SimpleParticleSystem:'''

&lt;ul&gt;

&lt;li&gt;
'''float3 pos'''&lt;br&gt;
Position of the particle system emmiter.
&lt;/li&gt;&lt;br&gt;

&lt;li&gt;
'''[[AtlasedTexture]] texture'''&lt;br&gt;
Texture for the particles.
&lt;/li&gt; &lt;br&gt;

&lt;li&gt;
'''float3 emitVector'''&lt;br&gt;
Vector that describes the direction of the particles, this is then modified by the rotation propertiers.
&lt;/li&gt;&lt;br&gt;

&lt;li&gt;
'''[[CColorMap]] colorMap'''&lt;br&gt;
Colormap describing the colors of the particles during their lifetime.
&lt;/li&gt;&lt;br&gt;

&lt;li&gt;
'''float3 gravity'''&lt;br&gt;
Vector force applied to the particles every frame.
&lt;/li&gt;&lt;br&gt;

&lt;li&gt;
'''float airdrag'''&lt;br&gt;
Constant multiplier on the particle each frame, a value of 1.0 means the particles will keep their current momentum, a value bellow 1 and they will slow down each frame.
&lt;/li&gt;&lt;br&gt;

&lt;li&gt;
'''float particleLife'''&lt;br&gt;
Life of the particles in frames.
&lt;/li&gt;&lt;br&gt;

&lt;li&gt;
'''float particleLifeSpread'''&lt;br&gt;
Random number between 0 and particleLifeSpread added to particleLife.
&lt;/li&gt;&lt;br&gt;

&lt;li&gt;
'''int numParticles'''&lt;br&gt;
Number of particles that will be spawned.
&lt;/li&gt;&lt;br&gt;

&lt;li&gt;
'''float particleSpeed'''&lt;br&gt;
Initial speed of the particles.
&lt;/li&gt;&lt;br&gt;

&lt;li&gt;
'''float particleSpeedSpread'''&lt;br&gt;
Random number between 0 and particleSpeedSpread added to particleSpeed.
&lt;/li&gt;&lt;br&gt;

&lt;li&gt;
'''float particleSize'''&lt;br&gt;
Size of the particles.
&lt;/li&gt;&lt;br&gt;

&lt;li&gt;
'''float particleSizeSpread'''&lt;br&gt;
Random number between 0 and particleSizeSpread added to particleSize.
&lt;/li&gt;&lt;br&gt;

&lt;li&gt;
'''float sizeGrowth'''&lt;br&gt;
Size added to particles each frame.
&lt;/li&gt;&lt;br&gt;

&lt;li&gt;
'''float sizeMod'''&lt;br&gt;
Size frame multiplier.
&lt;/li&gt;&lt;br&gt;

&lt;li&gt;
'''float emitRot'''&lt;br&gt;
Rotation in degree from emitVector that particles will be spawned from, a value of 90 will emmit particles in a plane perpendicular to the emitVector.
&lt;/li&gt;&lt;br&gt;

&lt;li&gt;
'''float emitRotSpread'''&lt;br&gt;
Random number between 0 and emitRotSpread added to emitRot, a value of 180 will make the particles spawn in a full sphere.
&lt;/li&gt;&lt;br&gt;

&lt;li&gt;
'''bool directional'''&lt;br&gt;
If the particles should be oriented to point at the direction of their velocity.
&lt;/li&gt;&lt;br&gt;

&lt;/ul&gt;</text>
      <sha1>cf4kjrv0zqz934nfuu86xxfx1gt4g7b</sha1>
    </revision>
  </page>
  <page>
    <title>SiteMap</title>
    <ns>0</ns>
    <id>2692</id>
    <redirect title="Spring:SiteMapThoughts" />
    <revision>
      <id>21585</id>
      <parentid>16773</parentid>
      <timestamp>2011-04-02T18:14:11Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>Redirected page to [[Spring:SiteMapThoughts]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="36">#REDIRECT [[Spring:SiteMapThoughts]]</text>
      <sha1>fmdikqutexkq2addzbllt1zsxkadnmm</sha1>
    </revision>
  </page>
  <page>
    <title>SiteMapThoughts</title>
    <ns>0</ns>
    <id>2724</id>
    <redirect title="Spring:SiteMapThoughts" />
    <revision>
      <id>17188</id>
      <timestamp>2009-08-22T22:12:12Z</timestamp>
      <contributor>
        <username>Seanheron</username>
        <id>2595</id>
      </contributor>
      <comment>[[SiteMapThoughts]] moved to [[Spring:SiteMapThoughts]]: belongs there</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="36">#REDIRECT [[Spring:SiteMapThoughts]]</text>
      <sha1>fmdikqutexkq2addzbllt1zsxkadnmm</sha1>
    </revision>
  </page>
  <page>
    <title>Skyboxcreation</title>
    <ns>0</ns>
    <id>3390</id>
    <redirect title="Mapdev:Howto skybox" />
    <revision>
      <id>25741</id>
      <timestamp>2012-12-20T07:32:56Z</timestamp>
      <contributor>
        <username>Enetheru</username>
        <id>2783</id>
      </contributor>
      <comment>Enetheru moved page [[Skyboxcreation]] to [[Mapdev:Howto skybox]]: bring inline with naming scheme :D</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="33">#REDIRECT [[Mapdev:Howto skybox]]</text>
      <sha1>bxg1gfr3kkx3s2em0ugvm6i3vzoa8fg</sha1>
    </revision>
  </page>
  <page>
    <title>Slackware12 install</title>
    <ns>0</ns>
    <id>2921</id>
    <redirect title="Slackware install" />
    <revision>
      <id>20005</id>
      <timestamp>2010-08-19T15:58:50Z</timestamp>
      <contributor>
        <username>Hoijui</username>
        <id>2288</id>
      </contributor>
      <comment>[[Slackware12 install]] moved to [[Slackware install]]: standardization</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="31">#REDIRECT [[Slackware install]]</text>
      <sha1>ry609q76ntu5o5iwo2uuwd8gv1ym993</sha1>
    </revision>
  </page>
  <page>
    <title>Slackware install</title>
    <ns>0</ns>
    <id>2490</id>
    <revision>
      <id>28634</id>
      <parentid>28629</parentid>
      <timestamp>2014-06-14T12:23:37Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>copied from finalizing linux install</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7225">[[Linux|Linux Setup Guide]] &lt; {{FULLPAGENAME}}

__TOC__
[[Image:Slackware.png]]

For packaging &lt;font color=&quot;#00DD00&quot;&gt;requests&lt;/font&gt; or &lt;font color=&quot;#FF0000&quot;&gt;complaints&lt;/font&gt;, please contact [[Linux:Packaging#Slackware | the packagers]].

= Slackware =

version 89.0 for Slackware 13.37 and 14.00 x86_64 (there is an update for boost libraries for 13.37)

There is 3 ways to install springrts for Slackware, compiling from scratch, downloading slackbuild packages, or running a script that download the slackware packages and set the game for you.

== Installing using script ==

There is a script named [http://corec.cl/spring/spring_slackware_64b_installer.sh  spring_slackware_64b_installer.sh], you must download it and run:

&lt;code&gt;
chmod +x spring_slackware_64b_installer.sh

su -c spring_slackware_64b_installer.sh
&lt;/code&gt;

The command will ask for the root password, detect Slackware version and operative system architecture. The script will create the folder &lt;code&gt;sb_packages&lt;/code&gt; to save files, and then install files. (just x86_64 is ready now).

At the end you just need to run springlobby to start to play.

&lt;code&gt;
springlobby
&lt;/code&gt;

== Installing using SlackBuilds packages ==

Download packages from next links and install them running as root: 

&lt;code&gt;
upgradepkg --reinstall --install-new *.t?z
&lt;/code&gt;

The packages are:

[http://corec.cl/spring/DevIL-1.6.8_rc2-x86_64-3_SBo.tgz DevIL-1.6.8_rc2-x86_64-3_SBo.tgz]

[http://corec.cl/spring/icu4c-4.6.1-x86_64-1_SBo.tgz icu4c-4.6.1-x86_64-1_SBo.tgz]

[http://corec.cl/spring/libtorrent-rasterbar-0.15.9-x86_64-1_SBo.tgz libtorrent-rasterbar-0.15.9-x86_64-1_SBo.tgz]

[http://corec.cl/spring/OpenAL-1.13-x86_64-1_SBo.tgz OpenAL-1.13-x86_64-1_SBo.tgz]

[http://corec.cl/spring/p7zip-9.20.1-x86_64-1_SBo.tgz p7zip-9.20.1-x86_64-1_SBo.tgz]

[http://corec.cl/spring/spring-89.0-x86_64-1_SBo.tgz spring-89.0-x86_64-1_SBo.tgz]

[http://corec.cl/spring/wxGTK-2.8.12-x86_64-2_SBo.tgz wxGTK-2.8.12-x86_64-2_SBo.tgz]

[http://corec.cl/spring/boost-1.49.0-x86_64-1.txz boost-1.49.0-x86_64-1.txz]

[http://corec.cl/spring/springlobby-0.147-x86_64-1_SBo.tgz springlobby-0.147-x86_64-1_SBo.tgz]

The '''gcc 4.7.1''' force us to upgrade boost library at least to 1.48 version, we choose 1.49 to distribute with spring because that will be the version of boost in Slackware 14 (not released yet), and until know there is no problems with libraries in 13.37 slackware version.

=== maps ===

Here is some maps that you want 

*[http://springfiles.com/spring/spring-maps/deltasiegedry DeltaSiegeDry.sd7]
*FolsomDamFinal.sd7
*LLTAComplexV2.sd7
*Small_Supreme_Battlefield_V2.sd7
*SpeedMetal.sd7
*Tabula-v2.sd7
*TheRockFinal.sd7
*Tropical.sd7
*Wide Pass v3.2.sd7
*folsomdamdeluxev4.sd7

=== packages ===

Depending on both, architecture and version of Slackware you are using, there are different versions of packages. this is an example for Slackware 13.37.0 64bits.

*DevIL-1.6.8_rc2-x86_64-3_SBo.tgz
*OpenAL-1.12.854-x86_64-1_SBo.tgz
*icu4c-4.6.1-x86_64-1_SBo.tgz
*libtorrent-rasterbar-0.15.5-x86_64-1_SBo.tgz
*p7zip-9.13-x86_64-1_SBo.tgz
*spring-0.82.7.1-x86_64-1_SBo.tgz
*springlobby-0.131-x86_64-1_SBo.tgz
*wxGTK-2.8.12-x86_64-1_SBo.tgz

=== How to choose the correct installer file? ===

You need to know just 3 things: what version of spring do you want, what version of Slackware is running, and what kind of architecture you have. To know what version of spring, you just need to go to [http://www.springrts.com http://www.springrts.com] and check the last version. if this page is missing the latest version, just send us a mail. To get the Slackware version of your system, you just need to type this:

&lt;code&gt;
cat /etc/slackware-version
&lt;/code&gt;

and to get the architecture of your CPU, just type:

&lt;code&gt;
uname -m
&lt;/code&gt;

Architectures '''i686''', '''i486''' and any other different from '''x86_64''' are 32bits and should work with '''i486'''.

For example, this Slackware version is '''13.1.0''' and the architecture is '''i686''', and I know that the last version of spring is 0.82.7.1, so the required file is:

Spring-&amp;lt;SPRING_VERSION&amp;gt;-Slackware-&amp;lt;SLACKWARE_VERSION&amp;gt;-&amp;lt;ARCHITECTURE&amp;gt;.tar.gz

Spring-0.82.7.1-Slackware-13.1.0-i486.tar.gz

== Install using script ==

After having downloaded the file, you have to decompress it with:

&lt;code&gt;
tar xzvf Spring-0.82.7.1-Slackware-13.1.0-i486.tar.gz
&lt;/code&gt;

This should create a directory with the same name as the file:

&lt;code&gt;
cd Spring-0.82.7.1-Slackware-13.1.0-i486/
&lt;/code&gt;

And there you just run:

&lt;code&gt;
./spring_slackware_32b_install.sh
&lt;/code&gt;

The script will ask for the root password, install packages, copy maps and games, and check a boost symbolic link that this distribution needs to make to run springlobby properly.

= Install by package =

For a full install, the dependencies in precompiled tgz's for '''32 bits''':

[http://dl.dropbox.com/u/1277376/slackware/spring-0.82.7.1-i486-1.tgz spring 0.82.7.1]

[http://www.megaupload.com/?d=S3NH7Q0S openAL 1.12.854]

[http://www.megaupload.com/?d=QOE461J6 DevIL-1.6.8_rc2]

[http://www.megaupload.com/?d=HY45ITXC icu4c-4.4.1-i486]

[http://www.megaupload.com/?d=60WU4Q9X p7zip-9.13]

There is all dependencies in precompiled tgz's for '''64 bits''' (Slackware 13.0, working on 13.1):

[http://www.megaupload.com/?d=MMB8HTQU spring 0.82.6.1]

[http://www.megaupload.com/?d=AC75YZ1S openAL 1.10.622]

[http://www.megaupload.com/?d=WQ2DGUS8 DevIL-1.6.8_rc2]

[http://www.megaupload.com/?d=774C313B boost-1.38.0]

[http://www.megaupload.com/?d=HC4OMM5J icu4c-4.2.1]

[http://www.megaupload.com/?d=OY1P3ME0 glew-1.5.1]

[http://www.megaupload.com/?d=2Q09GME2 libtorrent-rasterbar-0.14.9]

Assuming that all .tgz are saved in the same directory, open a console and cd inside that directory; then do this:
&lt;code&gt;&lt;pre&gt;
su -c &quot;installpkg *.tgz&quot;
&lt;/pre&gt;&lt;/code&gt;

When asked for the root password, enter it.

A menu entry for spring and another for springlobby will apear in KDE, XFCE and GNOME.

Depending on your distribution/package, you still need a Multiplayer Lobby. For Linux, the most common one is SpringLobby, which you can get [http://springlobby.info/wiki/springlobby/Install here]. For Slackware 13.1, the binaries required for SpringLobby:

'''32bits''':

[http://www.megaupload.com/?d=Q8X69Q01 libtorrent-rasterbar-0.15.0-i486]

[http://www.megaupload.com/?d=AGSWZCUM boost-1.42.0-i686]
*NOTE: By default, Slackware don't have *-mt libraries, so, if you want compile/run springlobby, you must make symbolic links to '''libboost_*.so''' libraries in this way:&lt;code&gt;&lt;pre&gt;##ln -s /usr/lib/libboost_system.so /usr/lib/libboost_system-mt.so&lt;/pre&gt;&lt;/code&gt;

[http://www.megaupload.com/?d=K6GIVCQE wxGTK-2.8.11-i486]
*NOTE: If you have problems compiling/runing springlobby, you must be sure that you are using UNICODE config, to do that, you must run:&lt;code&gt;&lt;pre&gt;##wx-config --selected-config&lt;/pre&gt;&lt;/code&gt;, and, if you have a response different to &lt;code&gt;gtk2-unicode-release-2.8&lt;/code&gt; you have a problem, and you must compile/install correct package.

[http://www.megaupload.com/?d=K3OUFTL5 springlobby-0.114-i686] (out of date now on v0.120)


= See Also: =
* [[Finalizing_linux_install]]
* [[Troubleshooting_linux]]

[[Category: Linux]]</text>
      <sha1>r00zboui2vysv3gn5httzicqvzz0nwx</sha1>
    </revision>
  </page>
  <page>
    <title>SlowUpdate</title>
    <ns>0</ns>
    <id>3113</id>
    <redirect title="Gamedev:UnitsOfMeasurement" />
    <revision>
      <id>27535</id>
      <parentid>22185</parentid>
      <timestamp>2013-08-19T17:10:47Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>double redirect</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="40">#REDIRECT [[Gamedev:UnitsOfMeasurement]]</text>
      <sha1>7665j9sv4kihud1oon6zk5di6prhvxc</sha1>
    </revision>
  </page>
  <page>
    <title>Smf decompiler</title>
    <ns>0</ns>
    <id>3741</id>
    <revision>
      <id>29968</id>
      <parentid>29738</parentid>
      <timestamp>2016-04-26T21:06:12Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>categorise</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="14725">This simple python2.x script will decompile fully decompile a map, outputs features, raw heightmap, texture, typemap, metal map, grass map, elevations, texturemap, minimap.

&lt;code&gt;&lt;pre&gt;
#!/usr/bin/python
# PD license by Beherith
import sys
import struct
import Image

print 'Welcome to the SMF decompiler by Beherith (mysterme@gmail.com). Place this script next to the .smf file and pass the .smf as a command line argument to this script to get it decompiled'

if len(sys.argv)&gt;1:
	print 'Working on:',sys.argv[1]
else:
	exit(1)
SMFHeader_struct= struct.Struct('&lt; 16s i i i i i i i f f i i i i i i i')
'''	char magic[16];      ///&lt; &quot;spring map file\0&quot;
	int version;         ///&lt; Must be 1 for now
	int mapid;           ///&lt; Sort of a GUID of the file, just set to a random value when writing a map

	int mapx;            ///&lt; Must be divisible by 128
	int mapy;            ///&lt; Must be divisible by 128
	int squareSize;      ///&lt; Distance between vertices. Must be 8
	int texelPerSquare;  ///&lt; Number of texels per square, must be 8 for now
	int tilesize;        ///&lt; Number of texels in a tile, must be 32 for now
	float minHeight;     ///&lt; Height value that 0 in the heightmap corresponds to	
	float maxHeight;     ///&lt; Height value that 0xffff in the heightmap corresponds to

	int heightmapPtr;    ///&lt; File offset to elevation data (short int[(mapy+1)*(mapx+1)])
	int typeMapPtr;      ///&lt; File offset to typedata (unsigned char[mapy/2 * mapx/2])
	int tilesPtr;        ///&lt; File offset to tile data (see MapTileHeader)
	int minimapPtr;      ///&lt; File offset to minimap (always 1024*1024 dxt1 compresed data plus 8 mipmap sublevels)
	int metalmapPtr;     ///&lt; File offset to metalmap (unsigned char[mapx/2 * mapy/2])
	int featurePtr;      ///&lt; File offset to feature data (see MapFeatureHeader)

	int numExtraHeaders; ///&lt; Numbers of extra headers following main header
'''
ExtraHeader_struct= struct.Struct('&lt; i i i')
'''	int size; ///&lt; Size of extra header
	int type; ///&lt; Type of extra header
	int extraoffset ; //MISSING FROM DOCS, only exists if type=1 (vegmap)'''
MapTileHeader_struct=struct.Struct('&lt; i i')
'''	int numTileFiles; ///&lt; Number of tile files to read in (usually 1)
	int numTiles;     ///&lt; Total number of tiles'''
MapFeatureHeader_struct=struct.Struct('&lt; i i')
'''	int numFeatureType;
	int numFeatures;'''
	
MapFeatureStruct_struct=struct.Struct('&lt; i f f f f f')
'''int featureType;    ///&lt; Index to one of the strings above
	float xpos;         ///&lt; X coordinate of the feature
	float ypos;         ///&lt; Y coordinate of the feature (height)
	float zpos;         ///&lt; Z coordinate of the feature

	float rotation;     ///&lt; Orientation of this feature (-32768..32767 for full circle)
	float relativeSize; ///&lt; Not used at the moment keep 1'''
TileFileHeader_struct =struct.Struct('&lt; 16s i i i i')
'''	char magic[16];      ///&lt; &quot;spring tilefile\0&quot;
	int version;         ///&lt; Must be 1 for now

	int numTiles;        ///&lt; Total number of tiles in this file
	int tileSize;        ///&lt; Must be 32 for now
	int compressionType; ///&lt; Must be 1 (= dxt1) for now'''
	

_S3OHeader_struct = struct.Struct(&quot;&lt; 12s i 5f 4i&quot;)
_S3OPiece_struct = struct.Struct(&quot;&lt; 10i 3f&quot;)
_S3OVertex_struct = struct.Struct(&quot;&lt; 3f 3f 2f&quot;)
_S3OChildOffset_struct = struct.Struct(&quot;&lt; i&quot;)
_S3OIndex_struct = struct.Struct(&quot;&lt; i&quot;)

SMALL_TILE_SIZE=680
MINIMAP_SIZE=699048
def pythonDecodeDXT1(data):# Python-only DXT1 decoder; this is slow!
	# input: one &quot;row&quot; of data (i.e. will produce 4*width pixels)
	blocks = len(data) / 8  # number of blocks in row
	out = ['', '', '', '']  # row accumulators

	for xb in xrange(blocks):
		# Decode next 8-byte block.        
		c0, c1, bits = struct.unpack('&lt;HHI', data[xb*8:xb*8+8])
		# print c0,c1,bits
		# color 0, packed 5-6-5
		b0 = (c0 &amp; 0x1f) &lt;&lt; 3
		g0 = ((c0 &gt;&gt; 5) &amp; 0x3f) &lt;&lt; 2
		r0 = ((c0 &gt;&gt; 11) &amp; 0x1f) &lt;&lt; 3
		
		# color 1, packed 5-6-5
		b1 = (c1 &amp; 0x1f) &lt;&lt; 3
		g1 = ((c1 &gt;&gt; 5) &amp; 0x3f) &lt;&lt; 2
		r1 = ((c1 &gt;&gt; 11) &amp; 0x1f) &lt;&lt; 3

		# Decode this block into 4x4 pixels
		# Accumulate the results onto our 4 row accumulators
		for yo in xrange(4):
			for xo in xrange(4):
				# get next control op and generate a pixel
				
				control = bits &amp; 3
				bits = bits &gt;&gt; 2
				if control == 0:
					out[yo] += chr(r0) + chr(g0) + chr(b0)
				elif control == 1:
					out[yo] += chr(r1) + chr(g1) + chr(b1)
				elif control == 2:                                
					if c0 &gt; c1:
						out[yo] += chr((2 * r0 + r1 + 1) / 3) + chr((2 * g0 + g1 + 1) / 3) + chr((2 * b0 + b1 + 1) / 3)
					else:
						out[yo] += chr((r0 + r1) / 2) + chr((g0 + g1) / 2) + chr((b0 + b1) / 2)
				elif control == 3:
					if c0 &gt; c1:
						out[yo] += chr((2 * r1 + r0 + 1) / 3) + chr((2 * g1 + g0 + 1) / 3) + chr((2 * b1 + b0 + 1) / 3)
					else:
						out[yo] += '\0\0\0'

	# All done.
	return out
	
def unpack_null_terminated_string(data, offset):
	result=''
	nextchar = 'X'
	while True:
		nextchar=struct.unpack_from('c',data,offset+len(result))[0]
		if nextchar=='\0':
			return result
		else:
			result+=nextchar
		if len(result)&gt;10000:
			return result

class SMFMap:
	def __init__(self,filename):
		self.filename=filename
		self.basename=filename.rpartition('.')[0]
		self.smffile=open(filename,'rb').read()
		self.SMFHeader= SMFHeader_struct.unpack_from(self.smffile, 0)
		
		self.magic=self.SMFHeader[0]#;      ///&lt; &quot;spring map file\0&quot;
		self.version=self.SMFHeader[1]#;         ///&lt; Must be 1 for now
		self.mapid=self.SMFHeader[2]#;           ///&lt; Sort of a GUID of the file, just set to a random value when writing a map

		self.mapx=self.SMFHeader[3]#;            ///&lt; Must be divisible by 128
		self.mapy=self.SMFHeader[4]#;            ///&lt; Must be divisible by 128
		self.squareSize=self.SMFHeader[5]#;      ///&lt; Distance between vertices. Must be 8
		self.texelPerSquare=self.SMFHeader[6]#;  ///&lt; Number of texels per square, must be 8 for now
		self.tilesize=self.SMFHeader[7]#;        ///&lt; Number of texels in a tile, must be 32 for now
		self.minHeight=self.SMFHeader[8]#;     ///&lt; Height value that 0 in the heightmap corresponds to	
		self.maxHeight=self.SMFHeader[9]#;     ///&lt; Height value that 0xffff in the heightmap corresponds to

		self.heightmapPtr=self.SMFHeader[10]#;    ///&lt; File offset to elevation data (short int[(mapy+1)*(mapx+1)])
		self.typeMapPtr=self.SMFHeader[11]#;      ///&lt; File offset to typedata (unsigned char[mapy/2 * mapx/2])
		self.tilesPtr=self.SMFHeader[12]#;        ///&lt; File offset to tile data (see MapTileHeader)
		self.minimapPtr=self.SMFHeader[13]#;      ///&lt; File offset to minimap (always 1024*1024 dxt1 compresed data plus 8 mipmap sublevels)
		self.metalmapPtr=self.SMFHeader[14]#;     ///&lt; File offset to metalmap (unsigned char[mapx/2 * mapy/2])
		self.featurePtr=self.SMFHeader[15]#;      ///&lt; File offset to feature data (see MapFeatureHeader)

		self.numExtraHeaders=self.SMFHeader[16]#; ///&lt; Numbers of extra headers following main header'''
		
		print 'Writing heightmap RAW (Remember, this is a %i by %i 16bit 1 channel IBM byte order raw!)'%((1+self.mapx),(1+self.mapy))
		self.heightmap=struct.unpack_from('&lt; %iH'%((1+self.mapx)*(1+self.mapy)),self.smffile,self.heightmapPtr)
		heightmap_file=open(self.basename+'_height.raw','wb')
		for pixel in self.heightmap:
			heightmap_file.write(struct.pack('&lt; H',pixel))
		heightmap_file.close()
		heightmap_img=Image.new('RGB',(1+self.mapx,1+self.mapy),'black')
		heightmap_img_pixels=heightmap_img.load()
		for x in range(heightmap_img.size[0]):
			for y in range(heightmap_img.size[1]):
				height=self.heightmap[(heightmap_img.size[0])*y+x]/256
				heightmap_img_pixels[x,y]=(height,height,height)
		heightmap_img.save(self.basename+'_height.bmp')
				
		print 'Writing MetalMap'
		self.metalmap= struct.unpack_from('&lt; %iB'%((self.mapx/2)*(self.mapy/2)),self.smffile,self.metalmapPtr)
		metalmap_img=Image.new('RGB',(self.mapx/2,self.mapy/2),'black')
		metalmap_img_pixels=metalmap_img.load()
		for x in range(metalmap_img.size[0]):
			for y in range(metalmap_img.size[1]):
				metal=self.metalmap[(metalmap_img.size[0])*y+x]
				metalmap_img_pixels[x,y]=(metal,0,0)
		metalmap_img.save(self.basename+'_metal.bmp')
		
		print 'Writing typemap'
		self.typemap=  struct.unpack_from('&lt; %iB'%((self.mapx/2)*(self.mapy/2)),self.smffile,self.typeMapPtr)
		typemap_img=Image.new('RGB',(self.mapx/2,self.mapy/2),'black')
		typemap_img_pixels=typemap_img.load()
		for x in range(typemap_img.size[0]):
			for y in range(typemap_img.size[1]):
				type=self.typemap[(typemap_img.size[0])*y+x]
				typemap_img_pixels[x,y]=(type,0,0)
		typemap_img.save(self.basename+'_type.bmp')
	
		print 'Writing minimap'
		miniddsheaderstr=([68, 68, 83, 32, 124, 0, 0, 0, 7, 16, 10, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 
		11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 4, 0, 0, 0, 68, 88, 84, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 8, 16, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
		self.minimap=self.smffile[self.minimapPtr:self.minimapPtr+MINIMAP_SIZE]
		minimap_file=open(self.basename+'_mini.dds','wb')
		for c in miniddsheaderstr:
			minimap_file.write(struct.pack('&lt; B',c))
		minimap_file.write(self.minimap)
		minimap_file.close()
		
		print 'Writing grassmap'
		vegmapoffset = SMFHeader_struct.size+ExtraHeader_struct.size+4
		for extraheader_index in range(self.numExtraHeaders):
			extraheader = ExtraHeader_struct.unpack_from(self.smffile,extraheader_index*ExtraHeader_struct.size+SMFHeader_struct.size)
			extraheader_size,extraheader_type,extraoffset =extraheader
			# print 'ExtraHeader',extraheader
			if extraheader_type==1: #grass
				# self.grassmap=struct.unpack_from('&lt; %iB'%((self.mapx/4)*(self.mapy/4)),self.smffile,ExtraHeader_struct.size+SMFHeader_struct.size+extraheader_size)
				self.grassmap=struct.unpack_from('&lt; %iB'%((self.mapx/4)*(self.mapy/4)),self.smffile,extraoffset)
				grassmap_img=Image.new('RGB',(self.mapx/4,self.mapy/4),'black')
				grassmap_img_pixels=grassmap_img.load()
				for x in range(grassmap_img.size[0]):
					for y in range(grassmap_img.size[1]):
						grass=self.grassmap[(grassmap_img.size[0])*y+x]
						if grass==1:
							grass = 255
						else:
							grass = 0
						grassmap_img_pixels[x,y]=(grass,grass,grass)
				grassmap_img.save(self.basename+'_grass.bmp')

		
		#MapFeatureHeader is followed by numFeatureType zero terminated strings indicating the names
		#of the features in the map. Then follow numFeatures MapFeatureStructs.
		self.mapfeaturesheader = MapFeatureHeader_struct.unpack_from(self.smffile,self.featurePtr)
		self.numFeatureType,self.numFeatures=self.mapfeaturesheader
		self.featurenames=[]
		featureoffset = self.featurePtr + MapFeatureHeader_struct.size
		while len(self.featurenames)&lt;self.numFeatureType:
			featurename = unpack_null_terminated_string(self.smffile,featureoffset)
			self.featurenames.append(featurename)
			featureoffset+=len(featurename)+1 #cause of null terminator
			# print featurename
			'''nextchar= 'N'
			while nextchar != '\0':
				nextchar=struct.unpack_from('c',self.smffile,len(featurename)+self.featurePtr+MapFeatureHeader_struct.size
					+sum([len(fname)+1 for fname in self.featurenames]))[0]
				if nextchar =='\0':
					self.featurenames.append(featurename)
					featurename=''
				else:
					featurename+=nextchar'''
					
		print 'Features found in map definition',self.featurenames
		feature_offset=self.featurePtr+MapFeatureHeader_struct.size+sum([len(fname)+1 for fname in self.featurenames])
		self.features=[]
		for feature_index in range(self.numFeatures):
			feat= MapFeatureStruct_struct.unpack_from(self.smffile,feature_offset+MapFeatureStruct_struct.size*feature_index)
			# print feat
			self.features.append({'name':self.featurenames[feat[0]],'x':feat[1],'y':feat[2],'z':feat[3],'rotation':feat[4],'relativeSize':feat[5],})
			# print self.features[-1]
		print 'Writing feature placement file'
		feature_file=open(self.basename+'_featureplacement.lua','w')
		for feature in self.features:
			feature_file.write('{ name = \'%s\', x = %i, z = %i, rot = &quot;%i&quot; ,scale = %f },\n'%(feature['name'],feature['x'],feature['z'],feature['rotation'],feature['relativeSize']))
		feature_file.close()
		
		print 'loading tile files'
		self.maptileheader=MapTileHeader_struct.unpack_from(self.smffile,self.tilesPtr)
		self.numtilefiles,self.numtiles=self.maptileheader
		self.tilefiles=[]
		tileoffset=self.tilesPtr+MapTileHeader_struct.size
		for i in range(self.numtilefiles):
			numtilesinfile=struct.unpack_from('&lt; i',self.smffile,tileoffset)[0]
			tileoffset+=4 #sizeof(int)
			tilefilename=unpack_null_terminated_string(self.smffile,tileoffset)
			tileoffset+=len(tilefilename)+1 #cause of null terminator
			self.tilefiles.append([tilefilename,numtilesinfile,open(tilefilename,'rb').read()])
			print tilefilename, 'has',numtilesinfile,'tiles'
		self.tileindices=struct.unpack_from('&lt; %ii'%((self.mapx/4)*(self.mapy/4)),self.smffile,tileoffset)
			
		
		self.tiles=[]
		for tilefile in self.tilefiles:
			tileFileHeader = TileFileHeader_struct.unpack_from(tilefile[2],0)
			magic,version,numTiles,tileSize,compressionType=tileFileHeader
			#print tilefile[0],': magic,version,numTiles,tileSize,compressionType',magic,version,numTiles,tileSize,compressionType
			for i in range(numTiles):
				self.tiles.append(struct.unpack_from('&lt; %is'%(SMALL_TILE_SIZE),tilefile[2], TileFileHeader_struct.size+i*SMALL_TILE_SIZE)[0])
			
			
		
		print 'Generating texture, this is very very slow (few minutes)'
		textureimage=Image.new('RGB',(self.mapx*8,self.mapy*8),'black')
		textureimagepixels=textureimage.load()
		for ty in range(self.mapy/4):
			# print 'row',ty
			for tx in range(self.mapx/4):
				currtile=self.tiles[self.tileindices[(self.mapx/4)*ty+tx]]
				# print 'Tile',(self.mapx/4)*ty+tx
				#one tile is 32x32, and pythonDecodeDXT1 will need one 'row' of data, assume this is 8*8 bytes
				for rows in xrange(8):
					# print &quot;currtile&quot;,currtile
					dxdata=currtile[rows*64:(rows+1)*64]
					# print len(dxdata),dxdata
					dxtrows=pythonDecodeDXT1(dxdata) #decode in 8 block chunks
					for x in xrange(tx*32,(tx+1)*32):
						for y in xrange(ty*32+4*rows,ty*32+4+4*rows):
							# print rows, tx,ty,x,y
							# print dxtrows
							oy=(ty*32+4*rows)
							textureimagepixels[x,y]=(ord(dxtrows[y-oy][3*(x-tx*32) +0]),ord(dxtrows[y-oy][3*(x-tx*32) +1]),ord(dxtrows[y-oy][3*(x-tx*32) +2]))
		textureimage.save(self.basename+'_texture.bmp')
		print 'Done, one final bit of important info: the maps maxheight is %i, while the minheight is %i'%(self.maxHeight,self.minHeight)
mymap = SMFMap(sys.argv[1])


&lt;/pre&gt;&lt;/code&gt;

[[Category:Map Tools]]</text>
      <sha1>h32koigkerms6ae7hb57697wj0p1sgc</sha1>
    </revision>
  </page>
  <page>
    <title>SmuG Works</title>
    <ns>0</ns>
    <id>2002</id>
    <revision>
      <id>19157</id>
      <parentid>19134</parentid>
      <timestamp>2010-03-13T22:11:33Z</timestamp>
      <contributor>
        <username>Koshi</username>
        <id>2371</id>
      </contributor>
      <comment>fix category</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="123">[http://spring.clan-sy.com/phpbb/viewtopic.php?t=8428&amp;highlight=smug Smug Guide to Running Your Boy]
[[Category: Strategy]]</text>
      <sha1>rxwk4u5pg2bihdm568w9rxtcucqeadg</sha1>
    </revision>
  </page>
  <page>
    <title>Smug Goat</title>
    <ns>0</ns>
    <id>1735</id>
    <revision>
      <id>25285</id>
      <parentid>11549</parentid>
      <timestamp>2012-10-29T13:27:55Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>remove wanted link (SWTA)</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4580">==The History==
[[Image:Cop.JPG|thumb|200px|right|&lt;center&gt; To Serve and Protect.&lt;/center&gt;]]
There were days when the world was a formless ember in a sea of timeless cloud and chaos; days of holy ash and hellish light; days when the thought of Man was but a passing glimmer in the gazing eye of a capricious God and Creator.


SmuG was formed way, way, after those days. And as much as Nixa would like to believe it, he is not a God. Or a Creator. Except, perhaps, of SmuG. Which he was. Partially.

SmuG was formed on August 16, around Midnight (GMT -5:00). DragonMaster45 and Nixa were hanging out in a random lobby (clothes were on; holy crap, don't even joke about that) and Nixa mentioned that he wanted to form a clan that was skill based. Steven and Isaac of [LolSquad] had agreed; however, they also wished for a sweet name to be a requisite.

The founding group congregated like Baptists in a random passworded battle and brainstormed clan name ideas. DragonMaster45 suggested SAD (Shrimp And Lobster), only to realize his backcronym didn't fit. Steven, ever the satirist, suggested SmugG - Smug Goat. DragonMaster45 than suggested SmuG, for added brevity and visual appeal.


It went something like that, in any case. The SAD chapter is certianly true.

Nixa quickly invited ninjak and Silence into the fold, and so SmuG took the form it has today. It seeks to make a name for itself. It seeks - to have lesbainz. Groupies too! One day, perhaps. One can always dream...

==The Members==
&lt;editor's note : Add yourself, people!&gt;

*DragonMaster45 (Retired): Occasionally he wears the [SWS] tags when he is doing Star Wars Spring stuff. He  actively pursues females in the real world and fails miserably. Accordingly, he hopes to be a Spring Pimp so the ladies can come to him, instead of the other way around. He plans not to use mace as much.

*Nixa(Retired): &lt;s&gt;While considered a God amongst mortal men, he spends most of his time sleeping... His spare time involves studying for a BE ( study? what's this word :o ) while trying to annoy day as much as possible for 1v1's. In reality, Nixa is a blatent noob who will most likely be beaten by some randoms newbs in 5 minutes.
&lt;/s&gt; Nixa will write another bio for you SmuG fans when he is not experiencing a fit of Parkinson's.
O NOES!!!! 

*Isaac: Gator spam kekekekekeke ^_^#

*Steven: Sucks

*Am0kk: Wins too much &gt;:(

*jackalope: my atlas put gater in ur base

*Silent(Retired)

==The Mission==
SmuG seeks - to - conquer - the entirety - of - the - BATHROOM. Because we smell bad, and the lesbainz don't like that very much. Unless they like kinky stuff; in which case, they're  more expensive. DragonMaster45 needs to get a job, then we'll be able to afford them better.

We also seek to make a name for ourselves and glorify the name of the Smug Goat who is our namesake and founder in spirit. &lt;br /&gt;

[[Image:Isaac%27s_Smug_Goat.jpg|thumb|80px|center|&lt;center&gt; The Smug Goat.&lt;/center&gt;]]
Insider's Note: We tried to pet him, but he kept eating our sleeves. D{=

==The Book of Goat==
===Weeks 1-2=== 

And lo, the Smug Goats went out and pwned many, noob and vet alike.
But their leetness was frowned upon, and their boasting became tiresome.
A new precept was declared by the Lord Goat-Tender Nixa: DO NOT BE DICKS.
And the Goats were much more cuddly after that. Except to jerks, whom they still destroyed with expected ferocity and bleat.

===Week 3===
And the Smug Goats continued carving their facades into the great Tablet of Spring history, and many awe-inspiring victories were achieved through practice and skill. A select few of them, those most appealing to the Great Goat were such:

*The slaying of three WarCs by Dragon45 in a stacked game on DigSite; 

*The slaying of two XHCs by Nixa and Dragon45 on Green Comet;

*The annihilation of three XHCs by Dragon45 in a stacked game on NightScape, using tactics so effective that he was subsequently banned from all XHC games;

*And the ultimate victory; the crushing of the legend PRO_rAndy by Nixa in a match so epic that it shall remain a powerful lesson in tactics, aggression, expansion, and surprise.

And many bleats were pleasurably bleated by the Great Bleatiest of All Bleaters, the Great Smug Goat himself, and he continued masticating shirt-sleeves.

==Bleated Wisdoms==
Contained herein are the wise words of the followers of the Goat.
===Isaac===
*If you make too many slices of toast they will be cold before you finish  buttering them. Getting too greedy means you have to eat cold toast :( &lt;cite&gt;&lt;br&gt;August 25, 2006&lt;/cite&gt;

[[category:Clans]]</text>
      <sha1>bx5r8ymixiv5n6yuz1teudxrsh9gst1</sha1>
    </revision>
  </page>
  <page>
    <title>Smug Goats</title>
    <ns>0</ns>
    <id>1734</id>
    <revision>
      <id>11548</id>
      <parentid>6022</parentid>
      <timestamp>2006-09-16T15:18:49Z</timestamp>
      <contributor>
        <username>FoeOfTheBee</username>
        <id>20</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="64">You are looking for [[Smug Goat]]. Go there!

[[category:Clans]]</text>
      <sha1>az7a1hwtdcp5v5r7m978ptv4uia3aaj</sha1>
    </revision>
  </page>
  <page>
    <title>Snaps install</title>
    <ns>0</ns>
    <id>3835</id>
    <revision>
      <id>30906</id>
      <timestamp>2019-02-11T20:58:51Z</timestamp>
      <contributor>
        <username>Jobarjo</username>
        <id>2921</id>
      </contributor>
      <comment>added snap installation method</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="209">== Snap installation method ==

Most modern linux distrubutions can install snaps.

If you have snapd installed, simply type:

&lt;pre&gt;sudo snap install springlobby-nsg&lt;/pre&gt;

https://snapcraft.io/springlobby-nsg</text>
      <sha1>phfvmh7smanueyczl082kmw0k8qgsts</sha1>
    </revision>
  </page>
  <page>
    <title>Sounds.lua</title>
    <ns>0</ns>
    <id>3087</id>
    <revision>
      <id>30837</id>
      <parentid>30832</parentid>
      <timestamp>2018-12-18T11:17:26Z</timestamp>
      <contributor>
        <username>Gajop</username>
        <id>2804</id>
      </contributor>
      <comment>/* External Examples */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6439">==Location==
&lt;code&gt;sounds.lua&lt;/code&gt; is a file in the &lt;code&gt;Gamedata/&lt;/code&gt; directory of a Spring Game.

==Purpose==
The file is used to define '''SoundItems'''. Beside simply &quot;linking&quot; to an audio file, '''SoundItems''' can use various tags to alter the playback of the file.

==Source==
The engine source code which parses the data from this file is viewable here:

* {{sourcelink|file=rts/System/Sound/SoundItem.cpp}}

==Data Types==
{{DataTypes}}

==Details==
Wherever a sound is played in Spring, be it associated with a [[Gamedev:UnitDefs|UnitDef]], [[Gamedev:WeaponDefs|WeaponDef]] or via the [[Lua_UnsyncedCtrl#Sounds|lua API]], a '''SoundItem''' is used. If you access a raw sound file, a '''SoundItem''' with the defaults is created for you.

Additionally, multiple '''SoundItems''' can use one single file with different settings, this is very efficient, as they only use 1 shared buffer.

{{new|89.0}}: All item names are treated in lowercase.

==Tips==
You can update &amp; reload your sounddefs at runtime via Spring.LoadSoundDef(&quot;gamedata/sounds.lua&quot;).

===Reserved SoundItems===
The following '''SoundItems''' are reserved for specific engine sounds:

* &lt;code&gt;IncomingChat&lt;/code&gt; - Is played when a chat message is received.
* &lt;code&gt;MultiSelect&lt;/code&gt; - Is played when multiple units are selected simultaneously.
* &lt;code&gt;MapPoint&lt;/code&gt; - Is played when a map point is placed by the player or an ally.
* &lt;code&gt;FailedCommand&lt;/code&gt; - Is played when a unit fails to execute a command. e.g. When a unit cannot reach it's destination etc.
* &lt;code&gt;default&lt;/code&gt; - Used for all sounds that aren't listed in &lt;code&gt;sounds.lua&lt;/code&gt;.

===SoundItem Properties===

{{tag
|name = gain
|type = float
|default = 1.0
|description = This varies the loudness, &gt; &lt;code&gt;1.0&lt;/code&gt; is louder, &lt; &lt;code&gt;1.0&lt;/code&gt;  is quieter. &lt;code&gt;0.0&lt;/code&gt; is silent.}}

{{tag
|name = gainmod
|type = float
|default = 0.0
|description = If &gt; &lt;code&gt;0.0&lt;/code&gt; then this adds a random amount to {{taglink|gain}} each time the sound is played. Clamped between &lt;code&gt;0.0&lt;/code&gt; and &lt;code&gt;1.0&lt;/code&gt;. The result is in the range '''['''({{taglink|gain}} * (1 + {{taglink|gainMod}}))''',''' ({{taglink|gain}} * (1 - {{taglink|gainMod}}))''']'''.}}

{{tag
|name = pitch
|type = float
|default = 1.0
|description = Varies the pitch of the sound, &gt; &lt;code&gt;1.0&lt;/code&gt; is higher pitched, &lt; &lt;code&gt;1.0&lt;/code&gt; is lower.}}

{{tag
|name = pitchmod
|type = float
|default = 0.0
|description = If &gt; &lt;code&gt;0.0&lt;/code&gt; then this adds a random amount to {{taglink|pitch}} each time the sound is played. Clamped between &lt;code&gt;0.0&lt;/code&gt; and &lt;code&gt;1.0&lt;/code&gt;. The result is in the range '''['''({{taglink|pitch}} * (1 + {{taglink|pitchMod}}))''',''' ({{taglink|pitch}} * (1 - {{taglink|pitchMod}}))''']'''.}}

{{tag
|name = dopplerscale
|type = float
|default = 1.0
|description = How unit and camera speed affects the pitch of the sound, to exaggerate it, use values &gt; &lt;code&gt;1.0&lt;/code&gt;. Use &lt;code&gt;0.0&lt;/code&gt; to completely disable the effect.}}

{{tag
|name = priority
|type = int
|default = 0
|description = When lots of sounds are played, sounds with lower {{taglink|priority}} are more likely to get cut off. A {{taglink|priority}} &gt; &lt;code&gt;0&lt;/code&gt; will never be cut of (priorities can be negative).}}

{{tag
|name = maxconcurrent
|type = int
|default = 16
|description = How many copies of this sound can be played at once?}}

{{tag
|name = maxdist
|type = float
|default = MAX_FLOAT
|description = The cut-off distance (in [[elmo]]s) at which this sound will no longer be played.}}

{{tag
|name = rolloff
|type = float
|default = 1.0
|description = How fast the sound becomes quieter with distance. &lt;code&gt;0.0&lt;/code&gt; means always the same loudness regardless of distance.}}

{{tag
|name = in3d
|type = bool
|default = true
|description = Non-3d sounds always came out of the front-speakers (or the centre one). 3d sounds are, well, in 3d.}}

{{tag
|name = looptime
|type = int
|default = 0
|description = The time in milliseconds the sound should loop for.}}

==Examples==
===default sounds===
The following is the default &lt;code&gt;sounds.lua&lt;/code&gt; supplied in the base content [[springcontent.sdz]] archive, with some of the comments removed (As the information is presented here).
&lt;pre&gt;
local Sounds = {
  SoundItems = {
    IncomingChat = {
      --- always play on the front speaker(s)
      file = &quot;sounds/beep4.wav&quot;,
      in3d = &quot;false&quot;,
    },
    MultiSelect = {
      --- always play on the front speaker(s)
      file = &quot;sounds/button9.wav&quot;,
      in3d = &quot;false&quot;,
    },
    MapPoint = {
      --- respect where the point was set, but don't attenuate in distance
      --- also, when moving the camera, don't pitch it
      file = &quot;sounds/beep6.wav&quot;,
      rolloff = 0,
      dopplerscale = 0,
    },
    ExampleSound = {
      --- some things you can do with this file
      --- can be either ogg or wav
      file = &quot;somedir/subdir/soundfile.ogg&quot;,
      gain = 1,
      pitch = 1,
      dopplerscale = 1,
      priority = 0,
      maxconcurrent = 16,
      maxdist = 20000,
      rolloff = 1,
      in3d = true,
      looptime = 0,
    },

    -- new since 89.0
    default = {
      gainmod = 0.35,
      pitchmod = 0.3,
      pitch = 0.7,
      in3d = true,
    },
  },
}

return Sounds
&lt;/pre&gt;
===Using PitchMod to prevent loud explosions====
Taken from this thread by jK: {{forumlink|topic=28819|title=Use PitchMod in sounds.lua to prevent loud explosions}}

Explosions can sound louder than intended when they are started in the same simFrame and so are played in sync -&gt; resonance. PitchMod now changes the playback time (e.g. with 0.3 the sounds should have a playback time of 100-130%) and so there isn't a resonance anymore even when the sound is started multiple times in the same simframe.

&lt;pre&gt;
local files = VFS.DirList(&quot;sounds/explosions/&quot;)
local t = Sounds.SoundItems
for i=1,#files do
   local fileName = files[i]
   t[fileName] = {
      file     = fileName;
      pitchmod = 0.3;
      gainmod  = 0.2;
      maxconcurrent = 8;
   }
end
&lt;/pre&gt;



===External Examples===
{{sourcelink|file=cont/base/springcontent/gamedata/sounds.lua}} - The original default &lt;code&gt;sounds.lua&lt;/code&gt;

[https://github.com/ZeroK-RTS/Zero-K/blob/master/gamedata/sounds.lua ZeroK sounds.lua]

==Further Reading==
{{forumlink|topic=17647&amp;start=25|title=Information about sounds.lua}}
{{forumlink|topic=20685|title=Information about gainMod and pitchMod}}
[[Category:gamedata]]</text>
      <sha1>di1hyk4rqu0i05w1o2ak7cmjw1z1bf6</sha1>
    </revision>
  </page>
  <page>
    <title>Source Development</title>
    <ns>0</ns>
    <id>3211</id>
    <redirect title="Building spring" />
    <revision>
      <id>27596</id>
      <parentid>23725</parentid>
      <timestamp>2013-08-24T23:10:40Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>double redirect</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29">#REDIRECT [[Building_spring]]</text>
      <sha1>cirqk2g7g59dmug88javf7rqe3s78mz</sha1>
    </revision>
  </page>
  <page>
    <title>Spamming</title>
    <ns>0</ns>
    <id>1345</id>
    <revision>
      <id>12564</id>
      <parentid>11162</parentid>
      <timestamp>2007-07-25T11:45:32Z</timestamp>
      <contributor>
        <username>PiHalbe</username>
        <id>2253</id>
      </contributor>
      <minor/>
      <comment>spam revert</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="633">'''Spamming''', when it comes to game tactics, is a term used to describe:
* [[Porcing]] using a great many of weak [[defense buildings]]
* A very numerous [[swarming|swarm]]
Spamming is sometimes seen as a bad game practice, because it makes the game more difficult for owners of lower-grade hardware. Displaying spammed environment results in massive slowdown (lag), which prevents the player from taking any actions or makes them very difficult. Intentional spamming in order to cause lag and render the enemy defenseless is clearly unfair. However, it is sometimes neccesary, i. e. against a porced player.

[[category:Strategy]]</text>
      <sha1>qaf1vzh9uqpmrvwaroki6zmmyqc6zvn</sha1>
    </revision>
  </page>
  <page>
    <title>Spring</title>
    <ns>0</ns>
    <id>1188</id>
    <redirect title="History" />
    <revision>
      <id>24768</id>
      <parentid>11015</parentid>
      <timestamp>2012-07-13T20:42:39Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>remove double redirect</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="21">#REDIRECT [[History]]</text>
      <sha1>7626jcupqe6szw1peqoswye85mbxd7e</sha1>
    </revision>
  </page>
  <page>
    <title>Spring-config</title>
    <ns>0</ns>
    <id>3527</id>
    <redirect title="Springsettings.cfg" />
    <revision>
      <id>26967</id>
      <timestamp>2013-04-03T04:30:32Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>Abma moved page [[Spring-config]] to [[Springsettings.cfg]]: thats how the file is named!</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="32">#REDIRECT [[Springsettings.cfg]]</text>
      <sha1>rf51ds0mjogr2rs8ck1zmghhj36k02o</sha1>
    </revision>
  </page>
  <page>
    <title>Spring-launcher</title>
    <ns>0</ns>
    <id>3853</id>
    <revision>
      <id>31198</id>
      <parentid>31197</parentid>
      <timestamp>2020-03-15T12:10:25Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="271">spring-launcher is a installer for SpringRTS games.

it downloads maps + games with [[pr-downloader]] and the starts the spring engine with [[Chobby]] as menu.




==repository==
https://github.com/gajop/spring-launcher


[[Category:Lobby]]
[[Category: Download_Systems]]</text>
      <sha1>660x6m2cgiladxzswifrpxe3i1kcky0</sha1>
    </revision>
  </page>
  <page>
    <title>SpringEngineTODO</title>
    <ns>0</ns>
    <id>1238</id>
    <revision>
      <id>30483</id>
      <parentid>21762</parentid>
      <timestamp>2017-11-05T04:00:36Z</timestamp>
      <contributor>
        <username>Gajop</username>
        <id>2804</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2546">A collection of ideas which could improve Spring. Before starting anything, please ask in the forum [http://springrts.com/phpbb/viewforum.php?f=60 developement-forum] so that you go in the right direction. 

* Get a '''stable OS X version''' working. Contact the developers on the forums for this, as there are people who build and run it successfully. Still need proper packaging and maintaining,
** Requires: C/C++, CMake and MacOS
** Time: &lt; 1 month
** Level of difficulty: Medium
** More information at http://springrts.com/wiki/Spring_on_MacOSX

* clean up, sanitize, and implement a '''consistent error handling''' scheme in the engine
* add '''general serializing''' to the engine, which touches the following:
** Implement saving/loading. There are a lot of direct LoadSave() functions in the game code, but the easier way would probably to finish the serialization in the class registration type interfaces (rts/System/creg), so everything can be serialized automatically. 
*** Requires: C/C++
*** Time: ~3 months
*** Level of difficulty: medium - hard
** [[Syncing System|Implement re-sync]]. After a sync problem is detected, and a re-sync of the random seed does not fix it the game would pause and use the rsync to adjust game state (current plan if for float3 data) to resync. After using rsync on it should be able to continue normally until the next sync error is detected.
*** Requires: C/C++, network programming
*** Time: ~3&lt; months
*** Level of difficulty: Hard

* Implement a '''general sensor system''' replacing the radars, as described in http://taspring.clan-sy.com/phpbb/viewtopic.php?t=6105
** Requires: C/C++, 3D/2D math (Lua knowledge not required, but prefered)
** Time: ~2 months
** Level of difficulty: Medium

* '''Abstracting the resource system''' to allow more than two resources (metal/energy)
** Requires: C/C++ (Lua knowledge not required, but prefered)
** Time: ~1-3 months
** Level of difficulty: Easy-Medium

* '''Exposing more Spring functions to the Lua world''' (command AIs, move types) or/and small frameworks
** Requires: basic C/C++, Lua
** Time: ~1-3&lt; months (depends on the goal)
** Level of difficulty: Easy-medium

* Implement '''MD5 as a model format or add other model formats'''.
** Requires: C/C++, 3D math (Lua knowledge not required, but prefered)
** Time: ~1-3 months
** Level of difficulty: Medium

* Add '''p2p/round-robin for hosting''' (so host exit does not stop the game)
** Requires: C/C++, network programming
** Time: ~3&lt; months
** Level of difficulty: Medium

* '''Fix bugs'''</text>
      <sha1>473rf5ed4pbajkg7vlecbkqiiedr8kp</sha1>
    </revision>
  </page>
  <page>
    <title>SpringLS</title>
    <ns>0</ns>
    <id>3284</id>
    <revision>
      <id>27699</id>
      <parentid>25448</parentid>
      <timestamp>2013-10-03T13:42:51Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="858">SpringLS is a lobbyserver written in java. It can be run in LAN-Mode which allows logging in without creating an account. Its a replacement of [http://springrts.com/dl/TASServer.jar TASServer] which is unmaintained.

==Setup==
To run SpringLS you need to install the [http://www.java.com/en/download/manual.jsp Java Runtime Environment].

Once that is installed, you need to setup the lobby server.

See the [https://github.com/spring/SpringLS/blob/springls-0.37/README.markdown README] for more info.

==Download==

[https://github.com/downloads/spring/SpringLS/springls-{{SpringLSVersion:Latest}}-stand-alone.jar Download '''SpringLS {{SpringLSVersion:Latest}}''' ~ 5.6MB] (requires Java 5+)


See https://github.com/spring/SpringLS for more details or the [http://springrts.com/phpbb/viewtopic.php?f=16&amp;t=27324 Forum thread] about it.


[[Category:Lobby]]</text>
      <sha1>qmo7gd9l3i1e72rgerx4dakde0o93sg</sha1>
    </revision>
  </page>
  <page>
    <title>SpringLobby</title>
    <ns>0</ns>
    <id>3625</id>
    <revision>
      <id>31139</id>
      <parentid>30626</parentid>
      <timestamp>2019-12-11T21:23:46Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="722">&lt;font color=&quot;orange&quot;&gt;cross-platform&lt;/font&gt;,
&lt;font color=&quot;#00AAFF&quot;&gt;C++&lt;/font&gt;,
by &lt;font color=&quot;#00CC00&quot;&gt;abma&lt;/font&gt;

SpringLobby is the official lobby client of spring and is bundled with the Spring engine in the installer. It uses the ''wxWidgets'' library.

==Download==

https://springlobby.springrts.com

==Source Code==
[https://github.com/springlobby/springlobby/ Springlobbies source code] is at github. When not using git please use tarballs from the official site as githubs automaticly created tarballs are broken.

==Bugs==

Please report bugs to [https://github.com/springlobby/springlobby/issues Springlobby's official bug tracker].

When reporting bugs, please provide [[springlobby.log]]!

[[Category:Lobby]]</text>
      <sha1>agtd2b2fzrld05u1wma7jsacxi2copf</sha1>
    </revision>
  </page>
  <page>
    <title>SpringRtsTutorialAnimDef</title>
    <ns>0</ns>
    <id>3331</id>
    <revision>
      <id>27807</id>
      <parentid>26654</parentid>
      <timestamp>2013-10-27T18:52:45Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>nuke some wanted pages for now and some (minor) cleanups</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2063">= Animation Script Examples =

== Basic Scripts ==
this scripts make the gameplay
*[[builder scripts]] - AnimDef building unit oustside ingame
*[[factory scripts]] - AnimDef producing unit inside themself ingame
*[[weapon scripts]] - AnimDef shooting targets ingame
*[[transport scripts]] - AnimDef loading unloading units ingame
*[[wind extractor]] - AnimDef checking wind speed and direction ingame

== Common Scripts ==
this scripts are cosmetic or modifiers

*''start stop scripts'' - AnimDef acting when mobile or static ingame
*[[on off scripts]] - AnimDef using the switch menu key on off ingame
*[[armored when close scripts]] - AnimDef enabling damagemodifier ratio ingame
*[[emiter scripts]] - AnimDef emiting smoke, buble, wave, weapon, explosion, ceg ingame
*''victim scripts'' - AnimDef check if the unit is attacked by what and where and how much
*''death scripts'' - unit diying with style ingame
*''born scripts'' - unit borning with style ingame
*[[health scripts]] - AnimDef know own maxhealth, actual health, paralyser %, born % ingame
*[[dynamic scripts]] - AnimDef changing UnitDef values ingame
*''perpiece scripts'' - AnimDef check piece for critical hit location or dedicaced damages
*''context scripts'' - Animdef know who is interacting with them (transport build fight)
*''collision scripts'' - crushing or so ?

== Complex Scripts ==
this scripts are the anims that make realistic renders
*''location scripts'' - AnimDef check position on map,slopes ,direction of attack ingame
*''animation scripts'' - AnimDef moving wheels leg arm crane accurately ingame
*[[loop scripts]] - AnimDef  thing repetadly or forever condition or not ingame
*''data scripts'' - AnimDef lot of info or piece ingame


=== What cannot be done in AnimDefs ? ===
*Some things are not possible in SpringRts engine :
#Factory will not move
#Factory will not own ON/OFF switch
#Transport will not build(confirm? who is exclusif ?)
#metal extractor will do nothing else(exclusif)
#changing the height of the radar and sonar and view sensors
#

[[Category:Emmanuel]]</text>
      <sha1>nvifwnyk8qt85lk3ji21vd0jxdju6od</sha1>
    </revision>
  </page>
  <page>
    <title>SpringSettings</title>
    <ns>0</ns>
    <id>3148</id>
    <revision>
      <id>28437</id>
      <parentid>28357</parentid>
      <timestamp>2014-03-25T21:39:51Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>categorise (grumble grumble stubs)</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="119">SpringSettings is a config tool from [[SpringLobby]]


Changes settings in [[springsettings.cfg]].

[[Category: Lobby]]</text>
      <sha1>fuu2cbe05kx81nkcjzbs3tvadwa49mk</sha1>
    </revision>
  </page>
  <page>
    <title>SpringSettings.cfg</title>
    <ns>0</ns>
    <id>3165</id>
    <redirect title="Springsettings.cfg" />
    <revision>
      <id>27539</id>
      <parentid>26349</parentid>
      <timestamp>2013-08-19T17:12:28Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>double redirect</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="32">#REDIRECT [[Springsettings.cfg]]</text>
      <sha1>rf51ds0mjogr2rs8ck1zmghhj36k02o</sha1>
    </revision>
  </page>
  <page>
    <title>SpringTutorialGame</title>
    <ns>0</ns>
    <id>3093</id>
    <revision>
      <id>30298</id>
      <parentid>30297</parentid>
      <timestamp>2016-12-08T02:26:06Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1411">__notoc__
= Spring Tutorial Game =
[[File:SpringTutorialGame.jpg|thumb|256px|right|Spring Tutorial Game in action]]
Despite the name, this '''not''' an &quot;official&quot; project.

And despite being called &quot;game&quot; it is '''not''' meant to be a game that is made to be fun to play, nor is it a technical or graphics demo. If you are looking for those sort of things, check out the available [[Games]] or [[Gamedev:PublicRepos]].

== Purpose ==
This is basically a &quot;Hello World&quot; Spring game.

The idea is that most potential game devs will hopefully understand the examples and with the help of this wiki can build on them.

== Why not just use stuff from other games? ==
Most Spring games consist of hundreds of files, with scripts that can have thousands of lines of code. Furthermore some files are just ''wrong'' or outdated, comments are sparse etc.

That does not stop the games from working but clearly they are not the best examples to learn from; 
The idea of this project is to have a basic game with some simple examples.

== There are just files! Why is there no guide to go along with this? ==
A good guide is [[The_Complete_Guide_To_Making_A_Spring_Game|this one by Ptsnoop]]

His &quot;Empty Game&quot; was also the base for this, see {{forumlink|topic=25831|title= original forum thread}}.

== Where can I get it? ==
[https://github.com/spring-archive/springtutorialgame.sdd Github repository]

[[Category:Game Dev]]</text>
      <sha1>adx8ybyiyo7cw4b7lll0wkw4r6nwyx2</sha1>
    </revision>
  </page>
  <page>
    <title>SpringWiki</title>
    <ns>0</ns>
    <id>3622</id>
    <redirect title="Spring:WikiEtiquette" />
    <revision>
      <id>28301</id>
      <timestamp>2014-02-22T12:39:18Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>Flozi moved page [[SpringWiki]] to [[Spring:WikiEtiquette]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="34">#REDIRECT [[Spring:WikiEtiquette]]</text>
      <sha1>rpebb40wgx1uicwxr47zvmb9u91b3xg</sha1>
    </revision>
  </page>
  <page>
    <title>Spring Engine Code</title>
    <ns>0</ns>
    <id>1116</id>
    <revision>
      <id>26701</id>
      <parentid>25007</parentid>
      <timestamp>2013-03-20T19:58:07Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>recat</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2042">To get people somewhat started into the mass of spring engine code, here is a small &quot;walkthrough&quot; of the game process.
Another good way of learning the code is building it in debug mode, setting a breakpoint at some place, and running spring. When it breaks on that point you'll be able to see full call stack which is very educational.

# Application entry point (Main.cpp)
## Window is created
## VFS is initialized (VFSHandler.cpp)
## Game setup:
### if there is a start script (like [[script.txt]]) this is used to initialize the global gameSetup (in GameSetup.cpp)
### CPreGame is created
#### if it's a client: CPreGame either waits for a start script.txt i
#### if it's a server: CPreGame uses the given start script (if one) or shows the list of startup CScript classes such as Commanders or Global AI
### CGame is created
#### CGame::CGame() will load all game data such as the map, unit models, textures, features
## Main window message loop starts
### [[Spring_Engine_Code | Drawing]]
### [[Spring_Engine_Code | Game_Update]]

==Game Update==
# update the networking, and when a message for a new frame arrives start update the game. This might seem weird, but because all game simulations have to be synced, it shouldn't run the game further until the server is ready. 
## unit handler update
## feature update
## projectile handler update
## ...

== Scripts ==

A single script is chosen by CPreGame, and is run once a frame.  This is not the same as the script.txt which only provides initialization data, typically to communicate from the lobby to spring.exe. For a lobby-game, the script is hard-coded as &quot;Commanders&quot;, which gives each team a commander.

The current loaded script is specified by Game/StartScripts/ScriptHandler.cpp : CScriptHandler::Instance-&gt;chosenScript

== Mods ==

The mod selection takes place in PreGame.cpp.

The mod is loaded by multiple files, such as Sim/Units/UnitDefHandler.cpp , which are called from Game.cpp, in the constructor:

 unitDefHandler=new CUnitDefHandler();

[[Category:Engine Dev]]</text>
      <sha1>kvh2wpoykh5wo8hhirhuzfrjr62rl1z</sha1>
    </revision>
  </page>
  <page>
    <title>Spring FAQ</title>
    <ns>0</ns>
    <id>936</id>
    <redirect title="FAQ" />
    <revision>
      <id>10774</id>
      <timestamp>2005-06-09T17:26:00Z</timestamp>
      <contributor>
        <username>Fnordia</username>
        <id>1</id>
      </contributor>
      <comment>Spring FAQ moved to FAQ</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="18">#REDIRECT [[FAQ]]
</text>
      <sha1>g0l1w9qmpnwgqur5b6cwy0e4wu0rppz</sha1>
    </revision>
  </page>
  <page>
    <title>Spring Features</title>
    <ns>0</ns>
    <id>3427</id>
    <revision>
      <id>29848</id>
      <parentid>29847</parentid>
      <timestamp>2016-02-05T16:38:59Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>/* Download */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="688">= Spring Features =
An archive containing lots of models ready to be placed on your map.

  {{FIXME}} needs better description on what exactly it is
  {{FIXME}} needs basic instructions on how to use
  {{FIXME}} needs links to other information like feature placer, toolbox, blah etc.

== Download ==

can be downloaded from [[Rapid]], with [[pr-downloader]]:

&lt;code&gt;&lt;pre&gt;
pr-downloader &quot;Spring Features v1.6&quot;
&lt;/pre&gt;&lt;/code&gt;

as alternative the rapid tags spring-features:stable and spring-features:test exist.


[https://github.com/Spring-Helper-Projects/spring-features project site]

[http://springrts.com/phpbb/viewtopic.php?f=56&amp;t=25752 Release post in Forum]

[[Category:Map making]]</text>
      <sha1>ocdkk2znii0auh1su1pm0cdkvs4lnhr</sha1>
    </revision>
  </page>
  <page>
    <title>Spring Headless</title>
    <ns>0</ns>
    <id>3144</id>
    <revision>
      <id>26642</id>
      <parentid>24731</parentid>
      <timestamp>2013-03-20T14:04:23Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>recat</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="504">spring-headless is a console program which allows to run spring without a gfx card to run for example ai vs ai-games without user in or output.

to setup spring-headless copy springrc-template-headless.txt to ~/.[[springrc]] (or springsettings.cfg).

create a script.txt and run it with spring-headless [[script.txt]] (note: you can set up a game in SpringLobby - after you have started a game, Spring will have written the configuration to the file script.txt in your Spring folder).


[[Category:Help]]</text>
      <sha1>cm5kktlukecyirm15s01qvwveycss33</sha1>
    </revision>
  </page>
  <page>
    <title>Spring MT</title>
    <ns>0</ns>
    <id>3450</id>
    <revision>
      <id>27770</id>
      <parentid>27766</parentid>
      <timestamp>2013-10-25T21:09:45Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5527">{{deprecated}}

== Spring MT ==
The Spring MT 94.11 release is
&lt;span style=&quot;color:#FF0000&quot;&gt;compatible with Spring 94.1&lt;/span&gt;

=== What is Spring MT? ===
Spring MT uses multithreaded asynchronous simulation (MT ASIM) to a much higher degree than the other Spring releases. It also uses asynchronous pathfinding (APATH). This typically translates into significantly higher performance, depending on your hardware.

=== What hardware do I need? ===
You need '''three physical cores''' to get any real benefit. A quad core or better is recommended.&lt;br /&gt;&lt;br /&gt;
[[Image:Spring_MT_core_layout.gif|666px]]
=== How much faster is it? ===
Typically '''more than 100% faster''' with a quad core. Benchmarked using Core I7 2600K, BA7.72, DeltaSiegeDry, Default pathfinder, 4x &quot;give all&quot;.

=== How can it be faster? ===
The simulation will run on several CPU cores, and the pathfinder may also run on a separate core.

=== How does Spring / Spring MT play together? ===
Spring MT includes Spring, and uses automatic engine type detection to make it sync-compatible.

=== On which servers can I play Spring MT? ===
Look for servers that have &quot;Spring MT&quot; or &quot;MT&quot; in the description. These servers will send you a chat message with instructions.

=== What is the downside? ===
The simulation may work slightly differently, possibly producing some negative effects. There is an increased risk of threading bugs that may cause a desync. The Default pathfinder is recommended because the QTPFS pathfinder tends to kill the performance of Spring MT.

=== Should I use MT even if I don't want to play on MT servers? ===
You can give it a try, the included Spring 94.11 (non-MT) version also has automatic CPU affinity setup that may give you some more performance.

=== How do I install it? ===
&lt;span style=&quot;color:#FF0000&quot;&gt;Note: After installation, join lobby chat room '''SpringMT9411''' for streamlined access to MT autohosts.&lt;/span&gt;

'''Windows complete'''&lt;br /&gt;
:[http://springrts.com/dl/buildbot/default/MTsim2/94.1-19-g1f3d930/win32/spring_94.1-19-g1f3d930.exe 94.11 MT + 94.11 installer]&lt;br /&gt;
:
:[http://springrts.com/dl/buildbot/default/MTsim2/94.1-19-g1f3d930/win32/spring_94.1-19-g1f3d930_portable.7z 94.11 MT + 94.11 portable]&lt;br /&gt;

'''Executables only'''&lt;br /&gt;
Unzip both executables in the install folder of the official release.

:Windows [http://springrts.com/dl/buildbot/default/MTsim2/94.1-19-g1f3d930/win32/%7bMTsim2%7d94.1-19-g1f3d930_spring-mt.7z 94.11 MT], [http://springrts.com/dl/buildbot/default/MTsim3/94.1-16-ge49de6c/win32/%7bMTsim3%7d94.1-16-ge49de6c_spring.7z 94.11].&lt;br /&gt;
:
:Linux32 [http://springrts.com/dl/buildbot/default/MTsim2/94.1-19-g1f3d930/linux32/%7bMTsim2%7d94.1-19-g1f3d930_spring-mt-linux32-static.7z 94.11 MT], [http://springrts.com/dl/buildbot/default/MTsim3/94.1-16-ge49de6c/linux32/%7bMTsim3%7d94.1-16-ge49de6c_spring-linux32-static.7z 94.11]. &lt;span style=&quot;color:#FF0000&quot;&gt;Requires a [http://springrts.com/dl/buildbot/default/master/94.1/linux32/spring_94.1_minimal-portable-linux32-static.7z portable] installation&lt;/span&gt;&lt;br /&gt;
:
:Linux64 [http://springrts.com/dl/buildbot/default/MTsim2/94.1-19-g1f3d930/linux64/%7bMTsim2%7d94.1-19-g1f3d930_spring-mt-linux64-static.7z 94.11 MT], [http://springrts.com/dl/buildbot/default/MTsim3/94.1-16-ge49de6c/linux64/%7bMTsim3%7d94.1-16-ge49de6c_spring-linux64-static.7z 94.11]. &lt;span style=&quot;color:#FF0000&quot;&gt;Requires a [http://springrts.com/dl/buildbot/default/master/94.1/linux64/spring_94.1_minimal-portable-linux64-static.7z portable] installation&lt;/span&gt;&lt;br /&gt;
:
:OSX64 [http://springrts.com/dl/buildbot/default/MTsim2/94.1-19-g1f3d930/osx64/%7bMTsim2%7d94.1-19-g1f3d930_MacOSX-10.6-SnowLeopard_spring-mt.zip 94.11 MT], [http://springrts.com/dl/buildbot/default/MTsim3/94.1-16-ge49de6c/osx64/%7bMTsim3%7d94.1-16-ge49de6c_MacOSX-10.6-SnowLeopard_spring.zip 94.11]. &lt;span style=&quot;color:#FF0000&quot;&gt;Requires a [http://springrts.com/dl/buildbot/default/master/94.1/osx64/spring_94.1_MacOSX-10.6-SnowLeopard.zip portable] installation&lt;/span&gt;&lt;br /&gt;

'''Source code'''&lt;br /&gt;
:
:[https://github.com/zerver/spring/tree/1f3d930a716bb0260e8d12b7d80b8f8f0299a908 Github 94.11 MT]&lt;br /&gt;
:
:[https://github.com/zerver/spring/tree/e49de6c299860728208ee60c2092c2131cae1363 Github 94.11]&lt;br /&gt;

=== How do I install it on my autohost? ===

'''Dedicated server'''&lt;br /&gt;

:[http://springrts.com/dl/buildbot/default/MTsim2/94.1-19-g1f3d930/win32/%7bMTsim2%7d94.1-19-g1f3d930_spring-dedicated.7z Windows]&lt;br /&gt;
:
:[http://springrts.com/dl/buildbot/default/MTsim2/94.1-19-g1f3d930/linux32/%7bMTsim2%7d94.1-19-g1f3d930_spring-dedicated-linux32-static.7z Linux32]&lt;br /&gt;
:
:[http://springrts.com/dl/buildbot/default/MTsim2/94.1-19-g1f3d930/linux64/%7bMTsim2%7d94.1-19-g1f3d930_spring-dedicated-linux64-static.7z Linux64]&lt;br /&gt;
:
:[http://springrts.com/dl/buildbot/default/MTsim2/94.1-19-g1f3d930/osx64/%7bMTsim2%7d94.1-19-g1f3d930_MacOSX-10.6-SnowLeopard_spring-dedicated.zip OSX64]&lt;br /&gt;

In '''spads.conf''' set masterChannel:SpringMT9411&lt;br /&gt;

In '''spads.pl''', search for &quot;sub cbJoinBattleRequest&quot; and insert these lines of code immediately after the second line (the one that starts with &quot;my&quot;):
&lt;pre&gt;
  if (!exists $lobby-&gt;{channels}-&gt;{$masterChannel} || 
      !exists $lobby-&gt;{channels}-&gt;{$masterChannel}-&gt;{$user}) {
    my $mtmsg = &quot;Please note this server REQUIRES Spring MT 94.11. &quot;.
      &quot;Installation instructions: http://springrts.com/wiki/Spring_MT&quot;;
    sayPrivate($user,$mtmsg);
  }
&lt;/pre&gt;
Consider disabling spads auto update to avoid the changes being overwritten.</text>
      <sha1>pd1lwte79mgtlof0ios5pjr0wrq4068</sha1>
    </revision>
  </page>
  <page>
    <title>Spring Maps</title>
    <ns>0</ns>
    <id>1457</id>
    <redirect title="Maps" />
    <revision>
      <id>18727</id>
      <parentid>11272</parentid>
      <timestamp>2010-03-13T10:18:45Z</timestamp>
      <contributor>
        <username>Koshi</username>
        <id>2371</id>
      </contributor>
      <comment>redirect to correct page</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="18">#REDIRECT [[Maps]]</text>
      <sha1>mo99zvx1vgp8vsx5sth48hv6yv2ue09</sha1>
    </revision>
  </page>
  <page>
    <title>Spring Multithreaded Lua</title>
    <ns>0</ns>
    <id>3516</id>
    <redirect title="Asynchronous Simulation" />
    <revision>
      <id>26819</id>
      <timestamp>2013-03-22T16:19:19Z</timestamp>
      <contributor>
        <username>Zerver</username>
        <id>2656</id>
      </contributor>
      <comment>Zerver moved page [[Spring Multithreaded Lua]] to [[Asynchronous Simulation]]: better name</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="37">#REDIRECT [[Asynchronous Simulation]]</text>
      <sha1>20b8v6jsywaj4z3z3btutwnq3m5j84j</sha1>
    </revision>
  </page>
  <page>
    <title>Spring Project</title>
    <ns>0</ns>
    <id>3272</id>
    <redirect title="History" />
    <revision>
      <id>24625</id>
      <timestamp>2012-06-02T03:57:56Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>moved [[Spring Project]] to [[History]] over redirect</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="21">#REDIRECT [[History]]</text>
      <sha1>7626jcupqe6szw1peqoswye85mbxd7e</sha1>
    </revision>
  </page>
  <page>
    <title>Spring Replays</title>
    <ns>0</ns>
    <id>1054</id>
    <revision>
      <id>26979</id>
      <parentid>26978</parentid>
      <timestamp>2013-04-07T07:47:05Z</timestamp>
      <contributor>
        <username>Hoijui</username>
        <id>2288</id>
      </contributor>
      <comment>/* Chat Commands */ fix one command</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2448">=== Recording Replays ===
Replays are automatically recoreded for every game you play in Spring.&lt;br&gt; They are saved to your Spring\demos\ folder.

=== Watching Replays ===
There are multiple ways to watch a replay:

1) Use the replays browser of your lobby. This depends on what lobby you use.

2) Drag &amp; and drop the replay file onto Spring.exe

3) Associate .sdf replay files with spring.exe

Then just doubleclick the replay file.

4) use rightlick -&gt; open with -&gt; Spring.exe


People watch replays to improve their skill by watching what they did wrong, and what other people did right. Use them to improve your skill.

=== Uploading Replays ===
Replays can be uploaded to [http://replays.springrts.com/ replays.springrts.com]. Uploaded replays can be commented. The uploader can edit the description and tags. To upload or comment a Spring lobby login is needed.

If you wish to discuss a match with other players, just give them the link to the uploaded replay.

A testing site is available at [http://replays.springrts.com/ replays-test.springrts.com].

SPADS autohost owners can configure SPADS to automatically upload all matches. For instructions read [https://github.com/dansan/spring-replay-site/raw/master/README.replay-upload README.replay-upload].

If you have trouble with the replays website please contact Dansan at the [http://springrts.com/phpbb/ Spring forums].

'''Note:''' Replays from different versions of Spring are not compatible. That is, if you have installed version {{CurrentVersion}}, you can only watch replays recorded in {{CurrentVersion}}. The replays are automatically labeled by spring with the current version number.)

=== Important keys to use while watching the replay: ===

'''L:''' Shows you Radar and LOS information of active player.

'''1,2,3...''': Changes active player, this is usefull to check on economy and LOS information.

'''F12''': Screenshots!

'''+''' / '''-''' : adjust game speed

'''Pause key''': Pause

==Chat Commands==

'''/skip ''&lt;n&gt;''''' : Fast forward the replay to second ''n''

'''/skip +''&lt;n&gt;''''' : Fast forward the replay ''n'' seconds

'''/skip f''&lt;n&gt;''''' : Fast forward the replay to frame ''n'' (there are 30 frames per second)

'''/skip f+''&lt;n&gt;''''' : Fast forward the replay ''n'' frames (there are 30 frames per second)

Example: '''/skip f1''' at the start of the replay can be useful to skip long pre-game chatter and go directly to the action.

[[Category:Playing]]</text>
      <sha1>81lpxyrxo0xrlytx884u62xd31t3205</sha1>
    </revision>
  </page>
  <page>
    <title>Spring Tanks</title>
    <ns>0</ns>
    <id>3035</id>
    <revision>
      <id>28570</id>
      <parentid>27935</parentid>
      <timestamp>2014-05-18T05:17:57Z</timestamp>
      <contributor>
        <username>Knorke</username>
        <id>833</id>
      </contributor>
      <comment>{{deprecated}}</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8840">{{deprecated}}

= About =
'''Spring Tanks''' started as an experiment.

[http://springrts.com/media.php?tag=game%3A+Spring+Tanks Some screenshots] can seen be in the media section

{{navimgx|xsize=200|ysize=140|image=Springtanks_TVicon.png|link=http://www.youtube.com/watch?v=xlgV64CEE7Q}}
[http://www.youtube.com/watch?v=xlgV64CEE7Q '''Click here for a video!''']

You can play it in both Single &amp; Multiplayer. The Singleplayer is not so much fun because the AI is not very good.

The lobbychannel is '''#springtanks'''  (type ''/join #springtanks'' into lobby chat)

The forum is [http://springrts.com/phpbb/viewforum.php?f=68 here]

= Gameplay Description =
Capture the Flag with Tanks. How cool is that?
[http://h-4.abload.de/img/springtanksctfcomic_jpgtbe.jpg  So cool that there is a comic about it.]

Each player starts with a squad of tanks, a base and two flags.

Outmanouver the enemy and pick up his flags by touching them with a unit and carry them to your base to score.
Defend your own flags.

The player or team with the highest score after a set timelimit wins.

One could say the gameplay is a strategy game mixed with elements from first person shooters and sports like football.

== Squad System &amp; Wave Respawn ==
Every 30 seconds all destroyed units are respawned.

The respawn timer is shown as a countdown and progress bar in the top right corner.
You can not get more units than your initial squad.

= The Units: =
[[Image:Knorke_Springtanks_startsquadwithnames.pngâ€Ž]]

== Blitz - Car ==
The Blitz Car is unarmed and '''fragile'''.
With its high '''speed''' and good maneuverability it is perfect for sneaky flag capture runs and scouting.

== TakTak - Medium Tank ==
This unit is the '''basis of your squad'''.
It is armed with an automatic dual cannon that offers a high rate of fire.
Armor and mobility are average.

== Thulsa - Heavy Tank ==
A very cumbersome unit.
With the '''large cannon and heavy armor''' this tank dominates the battlefield.
Downside are the low speed and slow turret rotation.
One hit destroys a Blitz Car - if the Thulsa can catch it.

== Flag ==
Drive near an enemy flag to '''pick it up''' then bring it to your Base to score a point.
If the flag carrier is destroyed, the flag falls to the ground. 
There it can be picked up again or the flag owner can touch it to return it to his base.
Protect your flags!
Flags are indestructible.

== Base ==
The base is a '''respawn point''' for destroyed units and flags.
You also have to bring enemy flags here to score a point.
The Base is indestructible.

=The Maps=
Only the the listed maps are playable with Spring Tanks.
On other maps no units will be spawned at gamestart.

'''Desert Cliffs''' - 1v1&lt;br&gt;
http://springfiles.com/spring/spring-maps/desertcliffsv1

'''Aquatic Divide''' - 1v1&lt;br&gt;
http://springfiles.com/spring/spring-maps/aquaticdividetnm05-v2

'''Eye_Of_Horus_v2''' - 1v1, 3ffa, 4ffa, 2v2&lt;br&gt;
http://springfiles.com/spring/spring-maps/eye-horus-v2

'''Saltrock Colony''' - 1v1, 3ffa&lt;br&gt;
http://springfiles.com/spring/spring-maps/saltrockcolonyv2

'''Canyon Crossing''' - 1v1, 3ffa, 4ffa, 2v2&lt;br&gt;
http://springfiles.com/spring/spring-maps/canyon-crossing

'''Into Battle''' - 1v1&lt;br&gt;
http://springfiles.com/spring/spring-maps/battle-v3

'''Castles''' - 1v1, 3ffa, 4ffa, 2v2&lt;br&gt;
http://springfiles.com/spring/spring-maps/castles

'''Mount Dustmore v3''' - 1v1, 3ffa, 4ffa, 2v2&lt;br&gt;
http://springfiles.com/spring/spring-maps/mountdustmorev3

= Basic Gameplay Tips =
*Pay attention to the respawn timer:
If there are only few seconds left and you rush for the flag, chances are enemy units will respawn near you and destroy your flag carrier.
Sometimes it is better to wait until the enemy has left his respawn area and then go for an easy flag grab.
**Similiar, the timer can help you decide if you need to retreat to protect your flag or if the respawning reinforcements will clear the situation.
*When you play with the &quot;place start position ingame&quot; option, chose carefully.
**If your units respawn all the time in craters or in trees, you only got yourself to blame. So chose a spot with flat land, clear of obstacles.
**If a unit still gets stuck, you can selfdestruct it: select unit and press crtl+d to make it respawn in the next wave.


= Battle Tactics =
*Thulsa Tanks have splash damage and kill a TakTak with 2 hits, only 1 hit is needed for a Blitz Car.
*A slowly retreating Thulsa Tank can kill a large number of TakTaks that attack in a line.
*If you need to kill a Thulsa with TakTaks, swarm it and do not get picked off one by one.
*Lure the enemy away from his base so that you can go for the flag with Blitz Cars from the flank or from the back.
*Pay attention to your attention: If a battle is lost and no advantage can be gained, do no bother with it.
Instead concentrate on the units that can make a difference.

= Advice for Hosting =
*The modoption &quot;gametimelimit&quot; decides how long a game lasts. You can select from 1 to 90 minutes.

*To spawn your own autohost, write this in private to a springie bot:
  !spawn mod=springtanks:stable,title=awesome game!,password=

= Playing vs Single Player AI =
Spring Tanks has a build in Single Player menu.&lt;br&gt;
To open it:&lt;br&gt;
1) Start Spring.exe, select 
*Mod: Spring Tanks 
*Map: does not matter (smaller=loads faster but w/e)

2) Click &quot;Test the game&quot;

3) Now the Spring Tanks Single Player Menu should come up. 

4) Select one of the challenges and click &quot;Start Game&quot;

5) Spring restarts and you can play!

6) Can you find the easter egg after winning 3 challenges?

'''=&gt;''' You can go back to the menu by pressing ESC.

'''Single Player by hosting a battle in a lobby:'''
*Dont. Try the pre setup matchups first.
*The only AI that knows how to play Spring Tanks is the &quot;Borked Advancer&quot; AI.
*Pay attention to what [http://springrts.com/wiki/Spring_Tanks#The_Maps maps] work.

= Get the game =
Easiest way is to to join the Spring Tanks autohost with your existing spring engine install and whatever lobby you chose to use. The lobby will then download the game file.
==Manual download==
First of, the [http://springrts.com/wiki/Download Spring engine] must already be installed.

'''Game file:''' http://packages.springrts.com/builds/springtanks-RC6.1.sdz

If you know how to use [http://springrts.com/wiki/Dev:LobbyDownloadSystems#Rapid rapid], the rapid tag is: '''springtanks:stable'''

'''Mappack:''' [http://knorke.darkstars.co.uk/springtanks/SpringTanks_mappack2_unzip_to_mapfolder.zip download]

Absolutely needed for single player!

= Hotkeys =
hotkeys specific to Spring Tanks:
  v		select units carrying a flag
  b		send unit to home base
  esc		single player only: open/close the Spring Tanks single player menu
Usefull default hotkeys, regular Spring players will not need to read this.
Most important are:
  return/enter	chat
  tab		toggle complete map view (zooms out to show complete map)
  s		stop. selected unit stops shoting and moving.
  shift+clicking	make waypoints
  f		fight: while traveling to destination, unit will engage all enemies on its path
  a		attack / shot ground
  crtl+d		blew up selected unit (ie if stuck)
  c		cockpit view: controll the unit in (buggy) first person mode
  ctrl+z		select all units of the same type as current selection
  p		patrol. set up waypoints for a patrol route that the unit will circle on
  shif+esc	bring up exit menu
  F6		sound on/off
  pause		pause the game. its the key next to print &amp; scroll lock.

= Trouble? =
Such a little troublemaker!

low fps? lol. should not use more cpu/gpu than any other spring game.

If there is a ~1 seconde stutter at game start, that is because of the texture being loaded. Cant do much about it.

If the game game crashes when starting a new game in Single Player, make sure you have the map. (next version will have a check)

Some usefull commands to be entered in chat:
  /advshading 0	no reflections on units. can give large fps boost
  /advshading 1	turn reflections on units on
  /shadows 0	no shadows
  /shadows 1	full shadows
  /shadows 2	only shadows from units, no terrain shadows
  /water 0	most basic water graphics

==Can't Fix==
Starting new games with Single player menu does not work on Mac OS.


= TL;DR =
Tanks. Capture The Flag. Get the map pack. glhf.

Single Player: Read ''Playing vs AI''

=Credits &amp; Making Of=
Credits: http://www.pastebin.com/Wpub9wWw

==Used tools==
Wings 3D, notepad++, [[Upspring]], Irfanview, MS Paint, Audiacity, Fraps, Windows Movie Maker, 7zip, DXTbmp, VirtualDub

=Status=
playing: &lt;del&gt;completly playable on latest stable engine version: 0.82.7.1&lt;/del&gt;&lt;br&gt;
&lt;del&gt;needs fixing to work with newest Spring release 84.0 (will eventually be done)&lt;del&gt;&lt;br&gt;
development: {{forumlink|thread=26937|title=see forum:}} and http://springrts.com/mantis/view.php?id=4329

paused due to other things being more interessting.</text>
      <sha1>fa814wgj5brgl0af53kpts64te5lo3y</sha1>
    </revision>
  </page>
  <page>
    <title>Spring for RTS Players</title>
    <ns>0</ns>
    <id>990</id>
    <revision>
      <id>26859</id>
      <parentid>26857</parentid>
      <timestamp>2013-03-23T16:55:25Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>deprecate this one too</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4663">{{deprecated}}
'''

If you already played a lot of RTS Games, this is a fast guide to Spring and it is useful for OTA players.
If you are new to RTS then you should read the [[Spring guide!]].

I will only explain the major differences and leave the complicated stuff for you to learn by playing.

NOTE: This section tends toward OTA, XTA and AA content, and may be of lesser help with other Mods such as Gundam or E&amp;E.

----


=== Resources ===


In Spring resources (Metal and Energy) are unlimited, unlike in most other RTS Games. This means that once you have built i.e. a metal extractor(Mex)/Solarplant you will get metal/energy out of it until it's destroyed (as long as you have Energy for the Mex).
There are 2 major following Issues because of this:
*Your economy will grow exponentially (always more and more) if you invest most of your resources into it.
*You never end up with no resources to gather, but the battle builds up till one side is overpowered.

At the top off the screen there is a grey (metal) and yellow (energy) bar, these show you how full your storages are. There is a green (income) and red (usage) number next to each.
If one or both bars are full, you are wasting resources, so you should be using more of them. If Metal is empty you should get more, but Energy should never be empty, because then all Metal producing Facilities stop working.


Especially for all OTA players, mexes have a radius, if you press f4, you will see green where there is metal (the greener the better) and red where your mexes are already collecting.

----

=== Units ===

You start with the Commander (Comm), the unique builder unit who has the D-Gun. The D-Gun can destroy *anything* in one hit. The D-Gun, however, requires large amounts of energy, which is critical at the early stages in which it's use is more likely (to defend agaisnt rushes and the like). The Commander is furthermore the fastest builder that you start with (although better builders are avaible at techlevel 2, later in the game); you can snap to him with CTRL+C if he gets lost. Beware, though, because the Commander is ALSO a walking bomb - when he dies, he takes EVERYTHING around him with him.

Construction Units (&quot;Builders&quot; or &quot;con units&quot; or just &quot;conbots&quot;) can help eachother building - the more conbots you put on a building, the faster it'll be constructed. Be aware that the rate at which metal and energy is consumed also increases - you cannot build if you do not have anything to build with. The same can be done to help factories build units - simply assign the conbot to Guard (hotkey G) the factory, and the conbot will automatically help build whatever it is the factory is building.

There are, generally speaking, five kinds of units in Spring: Vehicles (tanks, cars, what have you), K-Bots (&quot;infantry&quot; robots, if you will), Hovercrafts (all-terrain tanks), aircraft (have wings, will fly) and Ships (including submarines). Vehicles are generally heavier and more hard-hitting than K-Bots, but since the K-Bots have legs, they can get to places the vehicles can't. Similarly, the hovercrafts are all capable of travelling on both land and water, but like the tanks, they are unable to traverse cliffsides and steep terrain. What's more, hovercrafts are generally lighter than tanks in regards to armor and armament. Aircrafts are generally more expensive and less deadly than vehicles and K-Bots, but they have the advantage of fast and unlimited movement.

Ships are just big. Lots of armor, lots of guns. And they sail.
----

=== Radar ===

The big colored blips on your screen are radar dots.
With radar covarage you can see things out of los, but only as moving blips. Radar doesn't go through hills, there are radar jammers and under water there is sonar instead.

----

=== Side Notes ===

To improve your gameplay, watch replays of good players. But you should also watch your own, to see where your problems are. (spring.exe-&gt;not server-&gt;name of replay.sdf enter; + and - to change the speed)&lt;br&gt;
With shift you can que up things. (A must in this game)&lt;br&gt;
There are keybord shortcuts (uikeys.txt), and you can make some yourself with the selection editor.&lt;br&gt;
For a general Idea of how to start building look at the [[Base building tips]].&lt;br&gt;
And if you aren't a good strategist, you can look into the [[Spring guide!]] (long).&lt;br&gt;

----
If you have more Questions look in the FAQ, if theres nothing there, you are welcome to ask me (Metaltrash)

I hope I could help you and have fun battling.
Feel free to edit, or enhance this i.e. with little explaining pictures.
It is supposed to be short so that its an easy quick read.

[[Category:Playing]]</text>
      <sha1>d6en96rccqr70trxlzz27as0wod3ae0</sha1>
    </revision>
  </page>
  <page>
    <title>Spring guide</title>
    <ns>0</ns>
    <id>967</id>
    <revision>
      <id>30771</id>
      <parentid>26858</parentid>
      <timestamp>2018-09-16T11:20:22Z</timestamp>
      <contributor>
        <username>Kixxe</username>
        <id>18</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="40605">{{deprecated}}
'''
This page describes the gameplay of TA-based games on the Spring engine.
The Spring engine can run a wide selection of [[Games]] and thus this text does not apply to every one of them.
----

Keep in mind that Spring is still in beta, therefore crashes can occur (a lot) and we (well, not me!) haven't got everything fixed yet.

Before we start, let's have some background info.

== TA: so what's so cool about this game? ==

[[OTA | TA (Total Annihilation)]] was created by Cavedog (R.I.P) in 1997, about half a year before(!!!) Starcraft was released. It was revolutionary in many ways, with 3D graphics (but a fixed camera), good animations (aircraft barrel rolled and leaned when they turned etc.), 3D terrain and many units (150 in the original game.) But in my not so humble opinion, the 3 greatest things that set TA apart were...

* Its physics! Every shot trajectory was calculated! An artillery shell could try to get over a hill and hit an aircraft, which exploded into bits, damaging other troops nearby, which could also explode and set forests on fire. Yeah, might not sound that big after 7 years, but back then we had Starcraft, which defied at least a half dozen laws of physics.

(Example of the tentacle through space. Yeah, really realistic)
[http://fast.filespace.org/Kixxe/WTF.png Click here]

* The order system! You could have 300 units waiting to be built, and when they were done, they could go and patrol an area and attack anyone in it. Order queues were limitless. You could build your whole base and drink tea while it was getting built. Construction units on patrol would repair damaged units, help build things and reclaim stuff (sucking it in and transforming it into resources.)

* The resource system! Contrary to other RTS games, the resources in TA are infinite. What limits resource consumption is the rate at which they can be gathered. This sole fact would make for longer and more epic games, with hundreds or thousands of units fighting in the endgame.

Pretty cool game. If you want, check out their old website for more info. [http://www.fileuniverse.com/Total_Annihilation_Mirror/totala/index.html Click here]


Anyway, enough of my rambling, onto Spring!

Now, as I told you, Spring was inspired by TA and has the same features TA had. Plus a few new things, check out the Spring features page for more info.
[http://taspring.clan-sy.com/wiki/Features Click here]



----

==Controls==
Keyboard controls here:
[http://img108.imagevenue.com/img.php?image=03721_PK06A_Compact_Keyboard_ProdImage_Black_V2_122_972lo.jpg]

Don't forget: shift+ right click to queue orders.
----

==Resources==

There are two types of resources in Spring, namely ''metal'' and ''energy''. Each of these two resources can be collected in a number of different ways. The amount of each resource that you currently have stockpiled is represented by a colored bar, one for each resource, along the upper edge of the screen. The rate at which you are presently collecting and consuming each of the two types is represented by a number and a + or - sign. If you are collecting at a faster rate then the rate at which you are consuming you will see your colored bar grow as resources accumulate. Your stockpiled resources are being depleted whenever the colored bar is shrinking. There are storage buildings which you can build for each type of resource and these will increase the amount of each which can be stored. Units and structures cost both metal and energy to build, while some units or structures also require energy to walk, shoot or operate in general.

Metal is collected continuously from either a metal extractor, often called &quot;mexes&quot; which extract from certain areas of the map, or by using a metal maker, abbreviated as &quot;MM&quot; which convert energy into metal. Both will only operate so long as there is sufficient energy to power them. However, metal makers require a lot of energy. 
A faster way to gather metal is by using either your commander or a construction bot to 'reclaim' it from the remains of destroyed units and buildings! They can even reclaim buildings which have not been destroyed and they don't have to belong to your enemy to be reclaimed.

Energy can be produced by a number of different buildings or it can be reclaimed (you can reclaim trees to gather energy). There are many different types of energy producers, including solar collectors and power plants, but they will be covered in another section.

In a game, always keep an eye on your metal and energy bar because if one of them goes to zero, particularly energy, your building rate will stall,(metal makers and extractors will stop producing) and some units will be unable to fire their energy weapons (eg. LRPCs, Annihilators, Doomsday Machines). 


----

==A Normal Spring Game==

Anyway, now you will learn the basics of a normal Spring game, as I see it. 
Every Spring game starts with all players only having:


'''The COMMANDER'''! (Insert DUN DUN DUUUUUNN)

The Commander is the unit you start with and the most important one in the game. He is unique and cannot be rebuilt. In fact, there is a mode where the game ends when the commander dies, so never leave him alone.

The fastest builder, he can walk and build underwater, he makes a nuke-sized explosion when he dies, he has a laser and the privilege of a Disintegrator Gun (alias D-Gun). 
The D-Gun is the single most powerful weapon in the whole game, which kills ANY (ANY, I mean it!) unit in one hit (friend or foe no difference, be careful!). Even if that sounds a like a little overkill, keep in mind that the Commander has a very limited range, is defenceless against any aircraft and long range artillery, and when submerged, he cannot shoot. (Subs! Onoz!)

The Commander is used for setting up a base, and early base defences. The D-Gun should protect him against any level 1 unit that tries to kill him, so if you lose your Commander in the beginning of the game, then you're dead. You lose your best (only?) builder and attacker, plus you have a nuke-sized explosion that may destroy half or all of your base.


Anyway, if you're seeing everything in a top down perspective, click the Commander (type Ctrl+C if you can't find him) with left mouse button to select him.

(If you have a crosshair as a mouse, press j. If your camera is zoomed out or all jerky, press ctrl+j until you find the OTA(Original Total Annihilation) camera.)

Okay, let's now discuss '''how to build stuff'''.

Like any normal RTS, it's choose a unit and click a location, but there is more with Spring. Hold shift and click on different locations to make the unit build the same building there. Hold shift and drag and you will make a line of the building. Hold ctrl and shift to make boxes/rectangular shapes of buildings. Use these! Make a line of DT (Dragon Teeth, small piece of wall/cover) instead of clicking each and every one. The controls are there to help you.
This is called queuing up stuff. You can use almost every single command in a queue. Buildings can be queued to build lots of different units, and then the other orders in the behaviour of the unit. You can make them walk to something, or guard/follow a unit by pressing G and selecting the unit to guard. Try it.
Selecting a unit and pressing shift key will show the orders queue.

Build 2 solar generators, or 4 wind generators to gather energy. Keep in mind that wind is pretty unstable, and that a number of maps (like lunar ones) have no wind at all! (The level of wind and tides in the map is indicated in the Map Selector in the Lobby).

Now select the Metal extractors and the whole screen turns black and green. Okay, place one on the green stuff. (The greener, the better! Like broccoli!)

Oh, and the minimap controls in spring are reversed. Meaning that you have to right-click to move the screen to the location. Once the new GUI is out and official, this will be fixed.

----

==The TA Bestiary==

Okay, time to describe the cool units that are at your disposal to make your enemies bleed. 8)

(Disclaimer : This will discuss the types of units, not every unit. Therefore, if I say that vehicles have large armour, I don't mean artillery of course.)

On to the first level 1 lab/plant to build. The categories are:

===Vehicles===

These babies are all about armour. The level 1 units are pretty basic, with more armour and (build) speed and than their K-bot counterparts. Level 2 vehicles show even more of the same pattern: better armour than their K-bot counterparts. Level 2 also offers the mobile Flak unit, which is the only real level 2 mobile AA.
Their weakness is that they are clumsy, turn slowly, and most of them can't climb mountains at all. Leads to trouble when an explosion makes a crater; units survive but can get stuck in the crater. Or just when they are trying to get up a steep hill. But sooner or later, you'll learn what kind of destruction a rush of 30 Goliaths can do!

===K-Bots===

K-bots generally have less powerful weapons than tanks, and are also less heavily armored.
So why build them in the first place?
Because they are cheaper!  And since they are cheaper, you can build more and outnumber your enemies. This doesn't work out that good in game though, since tanks ARE stronger. K-bots are also smaller, and will slip through DT and such alike easier than tanks.
And finally, the third advantage (which IMO is the biggest) of K-bots are that they can climb most mountains with ease! Climb by defences, up on mountains, through holes, these are all-purpose units.

===Aircraft===

Planes are planes. In Spring, there's a plane for every role. Bombers, fighters, gunships, flying radar, transports, stealth fighters and torpedo bombers. Planes are fast, and are not affected by terrain. There is no wall or relief that can stop a plane. You can just swoop into a base and take out AA with your gunship, and then bomb the crap out of their important structures. To stop them, you've got to rely on Anti Air (AA) units.

On the downside, planes are quite expensive to build and are relatively fragile. They are also the only units that have an anti unit against them (Except subs). When someone finds out you're building a large air fleet, they just cram their base full of AA and their army with mobile AA. And the only counter is more planes than their AA can handle, or a ground troop to take the AA down. A combined ground and air attack can be very destructive. Good luck!

===Ships===

Ships are good on a map with water. (DUH!) Ships come in many different kinds, but mostly for taking out other ships or bombing the crap out of land units in some way or another. The ships' strength is their powerful weaponry and their long range. All ships made to take out land have long range. Ships also have lots of armor. Another thing that's good about ships is that there is not much you can do to stop them because they are usually out of range. Once you see that the enemy has ships, either build a dock and a navy real fast or build planes and pray that he doesn't have too many AA ships. 
Their weaknesses are slowness (especially when turning), they can be taken out by submarines, and of course they are confined to water, meaning that they are often stuck with units just outside of their reach.

And they are *extremely* expensive, metal-wise.

===Hovercraft===

(These are counted as level 2 units, so I would not recommend them as the first to build unless it's the perfect map for them)

Hovercrafts are a tank and a ship(some say plane, but I find ships to be more accurate for some reason O.o) mixed. Sure it's weaker than your average tank, and slower than your average boat. Whats their use? They are meant for swampy maps that means that both tanks and ships are a weakness, and offcourse since none can't be used, everyone just spams out AA since they think aircrafts are the only way. Great suprise for the enemy when 50 hovercrafts comes in agsint their flakkers and MT...
Long story short, Hovercrafts are good for those who like (or must) attack from the ground, but can't since there is too much water. 

Their weakness is their low climbing ability, and that they're weaker than a tank and boats. (Don't build them on a land map, tanks ARE better.)

===Towers and Turrets===

The impressive range of fixed towers, cannons and turrets from Total Annihilation is again at your disposal. Proper use of these structures will help you control a map and stop your opponents in their tracks.

*'''Light Laser Towers (LLTs):'''
These cheap and fast lasers boast pinpoint accuracy and respectable damage against level 1 units. They suffer from short range, and are vulnerable to artillery and missile units which can kill them from out of reach. Since they fire faster than their bigger brothers, LLTs have an advantage against hordes of small weak units.

*'''Heavy Laser Towers (HLTs):'''
With a lower rate of fire but much more power than LLTs, these upgraded lasers are ideal for those pesky level 2 units that just don't want to die. They also have a longer range, and can be quite effective against aircraft. They cost a fair amount and take a long time to build, but in the right situation they can be extremely dangerous.

*'''Missile Towers (MTs):'''
The cheap yet deadly missile tower is guaranteed to shred airborne attackers, and its low cost and long range also makes it a good early-game point defense against weaker level 1 units. MTs are very fragile, and tend to chain-explode if placed too close together; they work best when scattered as random surprises for invading aircraft or with natural terrain or dragon's teeth to provide some cover from ground attacks. The huge damage bonus of missiles against aircraft makes these effective against even level 2 planes, though it would be wise to back them up with a few flak towers as well.

*'''Pop-up Cannons:'''
Pop-ups are the smallest and wiliest fixed plasma cannons. When not firing they retreat down into the ground, where they are extremely resistant to damage; a closed pop-up in XTA 9.1 can survive two consecutive direct nuclear missile impacts! They can be installed by lowly level 1 construction units, and outclass virtually all level 1 opponents in range and firepower. Their durability and effectiveness is not without cost, however, as even a single pop-up represents a huge gamble of time and resources in the early stages of a game. Consider carefully whether rushing a pop-up will cripple the enemy forces or your own economy...

*'''Medium Range Plasma Cannons (MRPCs):'''
MRPCs are huge, brutal plasma turrets that really suck on your energy reserves but inflict serious pain over a wide area. Fast and accurate targeting combined with excellent damage and range make them a sound defensive investment against level 2 armies. Remember that a smart enemy will look for a way to simply bypass your expensive static emplacements, and that even if you don't leave any way around these guns still make big fat targets; they work best when used to lock down choke points with overlapping fields of fire, and deserve supporting defenses against air raids and skirmishers. Put one on a hill, cover it with a HLT and some flak or missile towers behind a wall of DT, and don't forget to occasionally send in a builder to reclaim the resulting wreckage.

*'''Long Range Plasma Cannons (LRPCs):'''
When you want to hammer an enemy installation into gravel from the comfort of your own base, an Intimidator or Big Bertha might be the tool for the job. The enormous range and hitting power of a single LRPC can dominate the whole of a small map or take an enthusiastic bite out of a large one, and a battery of them can obliterate just about anything in only a few volleys. Too slow to effectively track moving targets, the LRPC is not a defensive emplacement but an offensive weapon of mass destruction; as such, building one is a challenge that simply can't be ignored. Surround these with AA and ground troops to fend off your victim's inevitable desperate attempt to halt the rain of destruction.

*'''Very Long Range Cannons (VLRCs):'''
The ultimate, absurd limit of long-range artillery is the repeating Buzzsaw or Vulcan. These guns are incredibly expensive and ludicrously energy hungry (be prepared to dedicate a couple of fusion plants to powering just one such monster) but have ''double'' the range of a &quot;mere&quot; LRPC and a withering rate of fire. Just don't forget to go equally overboard defending your Uber-gun, because it doesn't have very much health compared to its build cost and it screams &quot;kick me&quot; like nothing else.

===The first steps===

Now comes the tricky part. The first minute is always the same really, so what after that?
Well, it's hard to judge. But here are some paths that can be taken.

'''1.''' Build many construction units and send them out to build mexxes and Geothermal Power Plants. Then a defence and maybe some DT.

'''2.''' Build some construction units, and then start building defences. Follow the line defence guide lines.
Build Fusion Power Plants and Metal makers, and then an army. After that, use the army how armies are used best.
This strategy is called PORCING, and is considered by many as BAD.
There are disadvantages with this. You can't use many metal extractors or Geos, so you have slim to no resources to build your base. A popular strategy is to kill the anti-nuke, and then blow the whole compact base to bits.

'''3.''' Build a small army of 3-6 units and attack the enemy. The goal isn't to kill him, but to do as much damage as possible to his resources and hinder his economy. Mexxes are the most important, and then look for wind or solar generators.
Try to keep on attacking him, but remember to still tech up and build defences.

Anyway, use your construction units to build defences of SOME kind. Take advantage of Geothermal gases. Yeah the smoking stuff. You can place Geo plants there for good, cheap and space saving energy. If you're expanding, use every Mex' positions, and try to find a place to settle your defence line.

When you can defend yourself from most level 1 units, start on your level 2 building.

When it's done, ALWAYS build a construction unit first. Use it for your first mini Fusion. (Or build some mobile fusion at the vehicle plant if you're Arm)
Build level 2 units in the meantime.
Low on metal? Upgrade the finest of your Mexxes to Moho Mexxes. They are bigger and better (but they suck up energy).
You can also build a Moho Metal maker if you have enough energy to support it. (MMM :p)
Okay, if you made this far, you must really start thinking about how to defeat the enemy. Look for his weak spot. Maybe a K-bot assault from the mountains ? Maybe planes. Maybe using amphibious units. That part is for you to figure out.


----

==STRATEGY==

I read through this guide, and suddenly realized. 

''where is the strategy?'' 

So I fiddled this section up. Hope you'll learn something from it and thereby increase your Spring gaming experience.

===Defence===

Ah, the overall defence. There are many different ways to make a good defence, but here are 4 oft seen approaches.

''Compact defence!''

The most common type of defence is a single line of defence, often with Dragon Teeth (DT) in front. Inside your base is some AA, and that's about it. The good thing about this is that it's pretty easy and fast to set up, and you know where your territory ends, which can make the game much easier. Problem is, if something makes it past the line of defence, then you're screwed, unless you're building line after line of defence, or have some units to stop them.

''Spread out defence!''

I saw a guy pull this off one time, and he won by a large margin. The trick with this is to never really have a defined line of defence, just a Heavy Laser Tower (HLT) here, a radar there, some DT there, a mine here and there.
Basically, you expand every time you build a defence building, so in the end you have ENORMOUS space to move in. Since the defence is spread out, no one is gonna rush past it with some Goliaths. You can have some units hide behind mountains and attack. He used Merls who he trapped in fortification walls. I tried to run past the defence with an army of 30 Bulldogs. His HLT and missile/plasma batteries stopped me before I even reached his final defence line.
Even though this defence is the best of them all, it's hard to build up, and requires lots of resources and time. IF you're able to pull it off, the only problem may be if they are fast enough to run by all of it, or if you don't have much AA and 30 Brawlers are coming.

''No defence at all?''

Yes, this is an option. Okay, you may want some mines here and there, and some DT to stop them from running right through the door and AA in your base if they're building planes. But how do you defend with no defence?
With units; the whole concept is that you put all your effort into making units. This works pretty well, since when you see where the enemy is going to attack, you can MOVE your whole defence to that location.
The problem with this defence is that when you are attacking, you lose most of your defence. Sure, you can leave units behind, but I find it hard mentally to leave half the army at home when I am attacking. 
If you manage to pull this off, and make enough units to both attack and defend, then you have not wasted any money on defence, and you have a strong army!

''The All Out Defence''

''-- addendum by Cain''

The opposite of the &quot;no defence&quot; strategy, mixed with the &quot;spread out defence&quot; strategy: the main concept is to invest resources in lots of level 1 build planes, and use them to quickly gather huge amounts of territory and resources, while keeping a lot of planes building/repairing turrets all over the map. This could be very effective on maps with few choke points where your defence can be concentrated in a small area, or mostly flat maps where the overlapping range of defensive structures will create a large grid of protected territory. The concept is to expand the defence line until you can shoot straight into the enemy base. When using this strategy, it is wise to have a lot of level 2 aircraft defending the construction point, as you will need to constantly move your mobile defences around the map, protecting under-contruction defensive areas. I usually end up with a hundred builder planes and 20 to 50 Brawlers floating around... keep them away from Kroghot!

These are the defensive strategies I have found effective.

Also, one thing to remember is to eliminate the largest threat first. If you're relying on DT, take out the FARK or construction planes first.

Okay, you've built a good defence.
The next thing you should do is attempt to get into the mindset of your enemy.  Put yourself in his shoes, and determine how he would most likely proceed given your defensive strategy.  Would he attempt a gunship raid, or launch an attack from a defenceless mountain position?  Once you know what his most likely plan of attack will be, rethink your defences with this in mind.  If there is an area that is defenceless under your current strategy, and you believe it is a prime spot for your enemy to attack, set up some sort of defence there as well.

===Moving===
Moving or attacking is pretty easy right? Just move from point a to point b and attack c?
Nope.
First, you have to have your units move TOGETHER. . If some are trailing behind, then you just have to wait a little for them. A way of having your units stick together is to take a pretty slow unit, like a Can, and have others guard it.
Pressing control while moving units will make them keep their position in the formation, but not their speed. (they will spread out along the way, but ''try'' to get back into the position they were in when reaching the destination)
The ''Simple formation'' is also a way of doing this, and the units will automatically form a couple of lines, often with the right units first, too!
Transports are useful for moving units, but use the air transports (Valkyrie /Atlas) intelligently and protect them. The other transportation units are harder to use, since they take more time to load/unload.

===Attacking===

When attacking, remember what each unit's role is in the fight. Farks are used to repair important units that have been damaged. Bulldogs are meant to take damage and give damage back. Merls are used to shoot missiles from a distance, and don't require a clear LOS (line of sight). The question is what to repair. Merls die quickly, so one shot = dead. Knowing this, your first instinct might be to repair a Bulldog instead. Bulldogs are often the first thing that the enemy targets, and thus their HP often drops too rapidly to repair. Therefore, it is often wise to repair the middle-range units; not the giant HP monsters, not the units with a weak defence and strong/useful attack, but the average units that have acceptable HP and are not an enemy's first choice when selecting targets. One exception to this is mobile artillery. While it only has enough HP to survive one or two attacks, its attacks are well worth it, and the enemy still may not target them first, giving them a chance to deal massive damage.

===Army vs Army===

Many units attacking one unit is the best thing you can do, as when you kill one of their units, they lose one source of firepower. Focusing your fire is very important. Using focus fire in a group of weak units is very effective. Focus fire is, however, less effective on HP powerhouses.
When you're facing an army, always try to attack from behind or the side. Keep your units a little spread out when attacking. Not to far, but just so that area of effect weapons don't do as much damage. Have your HP powerhouses at the front, or at the front and sides. Keep em pretty close together but not side by side. Having your units spread out in this manner allows the units in the back to attack, and prevents splash damage units such as Zippers and Pyros from damaging many of your units at once.

This is the normal way of attacking an enemy army. There is the classical pincher movement too.
In this, you run one third of your HP powerhouses to the left, one third to the right and have the last third stay where they are. 
This gives you 3 advantages: 
*it's easier to get past the units and attack their weak units, or just run past them into the base
*you do more damage, since their units will have to change their target all the time and can't escape
*it makes it MUCH harder for the enemy to run away or try to get past you.

===Army vs Base===

Okay, you may have made it past the ground troops, but the fight is not over (unless your enemy used up his units to defend.) Now you must face his base defence, and act depending on the type of defence he has.

''Line defence''

Gather your army and set up for battle a bit away from his base, and get ready to move in. Have the FARKS guard your main HP powerhouses, so they are in the front but can still hide behind em. Everything else behind that. When attacking, have several units attacking the HLT and plasma batteries, and use the FARKS to reclaim his Dragon Teeth. When you have a hole in the DT wall, just run into the heart of the base like a maniac. Split your tanks into 2 groups, 1 guarding your long range/high damage units and the other going into the heart of the base. Find the Fusion reactors with your second group of tanks, and try to move the other big group to a place that is easy to defend while hitting the Fusions. Behind buildings is perfect! Kill as much as you can, or kill everything ^^ 
If there are several lines of defence, make a hole in each DT wall and repeat the same tactics.

''Spread out defence''

Argh The tough one. While the individual towers are easy to beat, you can't run past his defences unless you enjoy suicide. (and if you do, ctrl+a and then ctrl+d will do the trick. A slice of the wrist works well, too.)
Use your army to begin killing the defence step by step, structure by structure. Keep building units, and moving them into the fray (you can use air transports with the repeat command and make them drop the units a little ways from the fight). Once you start getting close to his last line of defence, think of it as a line defence and act accordingly.

''Units defence''

Think army vs army. Don't rush past them with all your units. Your units will spread out and try to go through holes in the enemy's formation. In a word, they are dead meat. If you MUST get to the base, have half of the tanks go around the units.

===Naval Battles===

Naval battles are hard to predict if you don't play island maps a lot, since there are many factors to take into account. Since land units are removed, you have to think in a WHOLE new perspective. No land means that only Sea, Air and Hover units can fight (and LRC of course).
Anyway, try to have air units scouting land and sea, and determine how much AA the enemy has. Ships roam around assaulting other ships, with a mix of subs, sub killers, AA ships and normal ships. Hovercrafts are the unit to use when assaulting land that's a little far from shore. Provide them with an escort consisting of planes and/or ships.

====Ships====
When using ships, have scout ships or planes scout the area in front, then send in subs and sub killers. Use long range ships at the sides to protect anything of value you might have with you (a sea transport or an aircraft carrier). When in battle, try to have the subs run away from sub killers, while your sub killers kill the enemy subs. Your subs should try to attack the most important ship in the area, and then just go crazy.
When facing land, you're pretty much in for an easy win. Just have your ships blow it all up. If you face LRC, take them out first. The rest of it is out of your hands.
Remember if your opponent has air superiority or LRPCs use subs as they can't hit them :)

====Hovercraft====
Use the Army vs Army or Army vs Base strategy here.

''-- addendum by Cain.''

Hovercraft are quite expensive compared to other land units, but are very useful in maps with a bit of water, able to target enemies without worrying about those pesky Goliaths... note that they're much cheaper than ships, anyway.

===Planes===
Hohoho, planes. Fun stuff to attack with. Anyway, most of the strategy involving planes is simple.
First, always attack the AA first, unless you are going to do a suicide mission. Kill the AA with gunships, and use bombers to kill structures. Many players use gunships only, which is a bad idea. Bombers take a little time to master but combined with gunships, they do a very good job. Scout early, so you can quickly see WHAT the enemy has and WHERE he has it. Use gunships to take out AA and act as overall decoys. Have Bombers fly in and bomb the crap out of his Fusion or whatever strategic point, and use the fighters to guard the bombers.
When facing units, do the same.
When facing sea, do the same thing, but add Torpedoes to bombers and gunships.

''-- addendum by Cain''

Know where the enemy commander is! In games where the commander's death is a winning condition, a lot of bombers could just converge on him, killing him on the first run.. especially the 2nd level bombers that have a nice turreted fast targeting laser! Also, gunships could create a diversion to keep the main enemy defences away from your main attack force, or you could use them to make the defences of distracted players shoot their own base...

===Using Terrain===

Using terrain wisely is very important. The issue of a game can depend on a good use of terrain.
First, Line of Sight (LOS) and RADAR. Both are blocked by terrain. So build your radars as high up as possible, otherwise you may not see anything. Use the relief to your advantage to hide an army or your important buildings from enemy radars.
Of course, one can also take advantage of altitude to increase fire range. A couple of Guardians on top of two high hills can easily devastate a small army.
Terrain also helps shield your units against attacks. Therefore, when you're building something high on top of a hill, try placing it a little behind the top. This is like crouching behind a crate where just your head and gun sticks up. But remember that terrain in Spring is deformable and can be leveled by impacts!
Know the climbing ability of your units. Hovercrafts and vehicles have pretty low climbing ability. But if a foe thinks he has sealed up all exits, your K-bots can still climb the mountains where he hasn't put any Dragon Teeth
Another good thing about terrain is that it mentally makes you feel safe. If there is a water barrier between me and the enemy, with 3 land bridges here and there, I probably won't have much ground defence at a location AWAY from the bridges. Presuming the map is pretty flat (like &quot;Flooded Desert&quot;) a hovercraft assault would do A LOT of damage, right?

===Energy and all the problems with it===
(in XTA)
As I said before, most level 2 units require energy to move, shoot and operate in general, meaning that if you have no energy to support your army, you can't do anything! You can use this in your favor, by attacking your enemy's Fusions, or
by ''giving'' Metal makers to your enemy when you are attacking him(although Metal makers are now turned off when given to an enemy), or he is attacking you!  Things that drain a lot of energy include LRPC, Goliaths, HLT, and most level 2 units.
(/in XTA)

===Paper-rock-scissors?===

Try to look at all units as individuals. Even if I didn't write much about every single unit, know your favorite ones and how to use them effectively in conjunction with the others. You'll find that some units are very complementary. The only real paper-rock relationships are AA and planes... Maybe subs vs sub killers...

I didn't even mention cloaking, radar jamming, troops behaviour facing attacks, mines, etc, etc. The possibilities are immense, but I don't want to spoil your pleasure any longer, so I'll let you discover them by yourself.

'''Have fun !!!'''

----

===Strategy Tips===

* Expand! Metal is scarce. The more you get, the more you can build. Even if you have a good base, making it bigger is not a bad thing.
* Scout! Knowledge is power. You must know what your enemy is planning, and what the enemy knows about you. (Or thinks he knows about you) Check what he has, and what he is building. If he's building aircrafts, do something about it. Look for weaknesses in defense and such. If you or your ally are scouting, don't look away. Gather as much information as possible. ALL buildings once in sight range will remain visible as 'ghost' buildings if this option isn't turned off by the host.
* Radar = GOOD ^^ Radar checks areas for units, increases your units LOS and is, overall, quite helpful. A radar with your army makes a big difference when attacking. But so is Jamming. Jamming is good for sneak attacks. They are cheap, so just build one and make your units guard it.
* Work Together! Often I see allies who just mind their own business and don't care what the other person's doing. DON'T DO THIS!!! Listen to each other, make up a plan. Prepare combined attacks. If there is a 2v2, then it's 2 allies vs 2 allies. Not a FFA with neutral partners. Type h to share units. Left click on your resource bars to auto share resources with allies.
* Power Plants. In order to level out the building costs, it is important to make a smooth transition from the least powerful generators to the most powerful ones in succession. First solar, then Geo, then mobile/mini Fusion then Fusion.
* Check your resource bar. Try to keep a fine line between having too many resources/wasting, and having a nanostall. Use your factories and such accordingly. If you have a lot of resources, try using your old level 1 factories to build some units. Also, try to find the time to build an energy/metal storage...
* Spread out your buildings/units. Since every unit explodes, they damage units close to them. This is especially important with Fusions... (I once saw someone put 13 mobile fusions close to each other... blew up half his base with 2 (!!!) LRPC shots...)
* Queue (yeah, easy word for it too :/) up orders! You can almost win the game by pausing, queuing up some stuff, and then go eat lunch. Not really, but holding shift is good whilst putting up buildings.
* Guard = following and protection. Use planes to guard your tanks, subs to guard your transports, construction units to automatically repair important units and so on. They will choose to attack whatever is hurting their guard object first. You can even do this to structures, for units who are built to move to a unit's position or AA to attack whatever is shooting on the Fusion reactors, etc... Overall, this makes working with several unit types easier.
* Reclaim stuff (sucking it in and transforming it into resources). When you're starting to run low on metal, reclaim the enemy's and your own corpses. Trees give energy, so if you're out of energy in the beginning... You can reclaim a whole area by shift-clicking.
* The key for porcers are to build LRPC. Or even better, build a nuke and use LOTS of planes to kill his anti-nuke. Then BOOM! Also as you have way loads more metal and space to move in than your opponent, you can easily afford 2 nukes. An anti-nuke can't deal with 2 nukes heading towards it(and if you aim the nukes at the anti-nuke...^^!
* Experiment! I suggest you go into single player and try every unit. Use commanders for arm, and small battle (watch that Krogoth!) for core. Try every approach to a problem. Remember, just because a unit is good, it's not invincible. Also, try how much metal and energy a building uses while in operation. For instance, a level 1 factory uses about 50 energy and 5 metal. This varies depending on what you build. This could help you prevent nanostalling.
* Several types of factories. Yeah, even if it costs money. An advanced building costs as much as a Bulldog or 2... You've got the time, and the money. Build it.
* Raid. Take the Weasel or a couple of Peewees on a cruise right by the enemy's mexes. Having trouble finding them? Type F4 to see where the ground is drained ^^ (Edit) This doesn't apply anymore, but you can still see where a mex is by trying to build one of your own there. If you can't, there's already one on the spot... A tip is to stay away from the Commander, or use buildings as hostages. Hide behind stuff and kill it off, then move on. If you're sure you're going to die, move close to a building and self-destruct.
* Just because Peewees are better then AK's doesn't meant that AK's are useless. (And so on). In fact, no unit is useless. If you believe it is, try it once. On what it was meant to do.
* Mix armies. Oh boy, if you haven't heard this one a thousand times before, you've only been playing Half-Life for the last 7 years or something. Even if Goliaths rule, a couple of missile units will make them much more effective.
* FARKs are useful in combat. Always have 1-3 with you. Reclaiming DT, or doing what they were meant to do: Repair -.-* (also, when I say FARKs somewhere in the guide, construction units work too...)
* Ask questions. No one is going to laugh at you. And if someone does, he's an ass and should be paid no mind. No question is too stupid. Just don't expect anyone in the heat of a battle to answer to ''how do I play''?.
* Learn! If you lost, use the replay to watch the game and try to understand why you died. What did the enemy do better than you? What was their key to winning? And so on.
* ''The Readme'' file has some cool keyboard shortcuts... check it out.
* Develop! Are you a programmer, a 3D design artist or just some regular Joe? Come to the forum for a talk, chatter, and make wacky suggestions! In the end you may contribute to making Spring better! Remember, Spring is open source. So just dive into there and replace AK's with flying monkeys in space suits or whatever.
* Try having some good music on when playing. It can give you a good kick. I recommend the War of the Worlds (the strategy game, yes it exists) Eve of the War Another great choice is, of course, [http://www.fileuniverse.com/?page=listing&amp;ID=54 the original TA music]! You can choose whatever music you like, though.
* Need more strategy and tips? Since Spring is a remake of TA, any TA strategy guide works...
* LAST BUT NOT LEAST: '''Don't get too serious. It's only a game.'''

This guide was written by Kixxe before everyone edited (and improved!) it mercilessly.

[[Category:Playing]]</text>
      <sha1>23cv9e5mqmu6418nmok4r5akz0r6uj9</sha1>
    </revision>
  </page>
  <page>
    <title>Spring guide!</title>
    <ns>0</ns>
    <id>2987</id>
    <redirect title="Spring guide" />
    <revision>
      <id>20420</id>
      <timestamp>2010-11-09T14:08:03Z</timestamp>
      <contributor>
        <username>Razacs2</username>
        <id>2823</id>
      </contributor>
      <comment>moved [[Spring guide!]] to [[Spring guide]]: &quot;!&quot; is crappy</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="26">#REDIRECT [[Spring guide]]</text>
      <sha1>2kuji7njhx7a3rzifel5xe95p28l85e</sha1>
    </revision>
  </page>
  <page>
    <title>Spring on ARM</title>
    <ns>0</ns>
    <id>3180</id>
    <revision>
      <id>31289</id>
      <parentid>26693</parentid>
      <timestamp>2020-09-20T12:06:39Z</timestamp>
      <contributor>
        <username>Gajop</username>
        <id>2804</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1649">'''Note: currently it doesn't compile at many places. some of them can maybe fixed by changing compiler flags. Also the emulation is horrible slow, so better get a real arm computer.
'''

==Setting up a virtualized environment for arm on ubuntu==

see https://wiki.ubuntu.com/ARM/RootfsFromScratch
&lt;pre&gt;
   sudo apt-get install qemu-system rootstock
   sudo rootstock \
         --fqdn ubuntu \
         --login ubuntu \
         --password ubuntu \
         --imagesize 3G \
         --seed openssh-server,linux-image-omap \
         --notarball

  mv qemu-armel-*.img qemu-armel.img
  mkdir tmp
  sudo mount -o loop qemu-armel.img tmp
  echo &quot;auto eth0
iface eth0 inet dhcp&quot; &gt;&gt; tmp/etc/network/interfaces
  sudo umount tmp
  rmdir tmp
  wget http://ports.ubuntu.com/ubuntu-ports/dists/lucid/main/installer-armel/current/images/versatile/netboot/vmlinuz
&lt;/pre&gt;

start with:
&lt;pre&gt;
qemu-system-arm -M versatilepb -cpu cortex-a8 -kernel ./vmlinuz \
        -hda qemu-armel.img -m 256 -append &quot;root=/dev/sda&quot; \
        -net nic -net user,hostfwd=tcp::2222-:22
&lt;/pre&gt;

login with ubuntu:ubuntu

or with 
&lt;pre&gt;
ssh ubuntu@localhost -p 22222
&lt;/pre&gt;

==install required build tools==

&lt;pre&gt;
sudo apt-get install build-essentials cmake
sudo apt-get install libglew1.6-dev libsdl1.2-dev libdevil-dev libopenal-dev \
libogg-dev libvorbis-dev libfreetype6-dev p7zip-full libxcursor-dev \
libboost-thread1.46-dev libboost-regex1.46-dev libboost-system1.46-dev \
libboost-program-options1.46-dev libboost-signals1.46-dev
&lt;/pre&gt;

since here it should be possible to follow the [[Building_Spring_on_Linux#Ubuntu|linux build instructions]].

[[Category:Engine Dev]]</text>
      <sha1>89gnk8aw2r8s9pw1yr7kusq7umquvbh</sha1>
    </revision>
  </page>
  <page>
    <title>Spring on MacOSX</title>
    <ns>0</ns>
    <id>2001</id>
    <revision>
      <id>28486</id>
      <parentid>28059</parentid>
      <timestamp>2014-04-12T10:20:49Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>/* Lobbies */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5901">{{deprecated|This howto is deprecated, please use the [[Download|official package]], else you can [[Building_Spring_on_MacOSX|compile]] it yourself.}}

'''Important notice: as of the next engine release, this tutorial will be discontinued, as Spring will be available as a standalone Mac OS X .app bundle (so will SpringLobby).'''

Last page update: 2011/08/01 by daftalx (updated SpringLobby to 0.135)

Current milestones available:
* Spring: 0.82.7.1
* SpringLobby: 0.135

=Preamble=

This tutorial is intended for Mac OS X Snow Leopard (10.6.*) users running in 32bit kernel mode. Although Spring compiles and runs in 64 bits, '''it does not work in 64bit kernel mode''' (thanks to ''frequencyandsulphur'' for digging this one out).


This tutorial has not been tested on older releases of Mac OS X (10.5-). Yet, there are big chances that you can get through and still be able to run Spring. Keep in mind though that due to architecture incompatibilities, Intel-powered macs will be able to discuss online together, as well as with PCs, but not with PPC-powered Macs.


Finally, please bear in mind that this tutorial is mostly for testing purposes and proof of concept. Although no manual compilation is required, using the Terminal application is necessary (for now). Due to the little amount of time people are dedicating to the Mac version of Spring, things will move only slowly and often behind the other platforms. Once things get stabilized, an all-in-one installer will (hopefully one day) replace this tutorial.


Good luck, and have fun !

=Basics=

==Install the XCode tools==

These are available on your Mac OS X install DVD, the installer is called &quot;XCode Tools&quot; in the &quot;Optional installs&quot; folder.

==Install the Java developer packages==

As of Apple's &quot;Java for Mac OS X 10.6 Update 3&quot;, headers for JNI (among other stuff) are no longer provided by default. In order to build spring AIs but also various dependencies, you should download and install the Java Developer package available on Apple's support site [http://connect.apple.com/cgi-bin/WebObjects/MemberSite.woa/wa/getSoftware?bundleID=20719 here] (NOTE: you must have an Apple ID to access this page. Feel free to post any public hard link in the forum to be added here instead).

==Install MacPorts==

*If you never had MacPorts installed, the latest version is available as a &quot;.dmg&quot; installer on [http://www.macports.org/install.php this page]
*If you already have MacPorts, make sure you run the latest version with

     sudo port selfupdate

==Configure MacPorts==

Spring and it's lobbies are published in a different repository than MacPorts's official one. So you must edit (as root) the MacPorts sources file (located by default in /opt/local/etc/macports/sources.conf), and add the following line '''before''' the last one:

     rsync://daftserve.dyndns.org/macports/

==Keep MacPorts up-to-date==

To sync your MacPorts install with the latest repositories hit

     sudo port sync

and upgrade any outdated ports with

     sudo port upgrade outdated

From now on I assume your Portfiles will always be up-to-date, therefore I will get straight to the point during the remainder of this tutorial.

=Spring=

==Install spring==

Crazy as it may seem, installing spring now comes down to this command:

     sudo port install springrts binutils

WARNING: this will take a *long* while, especially on a fresh system (ballpark figure: over an hour with an Intel C2D 2.2GHz cpu).

the binutils are required for finding the source of a crash of spring, the utility addr2line is used.

==Setup game data==

create a &quot;.spring&quot; folder in your home directory, and create the usual &quot;games&quot;, &quot;maps&quot; and &quot;demos&quot; folder. There you can store your favorite game data (most of the content is cross-platform compatible).

==Check if Spring works==

     spring

should launch the standalone GUI in window mode, which allows offline gaming, e.g. if you have demo scripts or single player games (my favorite these days is Chicken BA).

=Lobbies=

==SpringLobby==

Although the Mac OS port of SpringLobby should be considered &quot;barely alpha&quot;-stage, quite a lot of features are already functional, so you should be able to play online with patience and little effort.

===Install SpringLobby===

As for the engine, installing SpringLobby comes down to a simple command:

     sudo port install springlobby

In the end you should get two &quot;double-clickable&quot; .app bundles (springlobby and [[SpringSettings]]) in MacPorts's binary folder (/opt/local/bin by default).

===Setup SpringLobby===

Upon first run, you'll have to tell SpringLobby where to find the spring executable and unitsync library manually. The spring executable is in &quot;/opt/local/bin/spring&quot; and the unitsync library in &quot;/opt/local/lib/libunitsync.so&quot;.

As mentioned earlier the lobby is in a very early port stage. One major feature that does *NOT* work yet is to join (or autojoin) an IRC channel (but you may chat inside a battleroom). So before connecting to the main server, open the &quot;Autojoin channels&quot; options window and remove all default channels.

That's it, connect and enjoy  
NOTE: SpringLobby will mostly crash upon startup (much less afterwards). Don't worry, just keep trying until you get through...

===Known bugs===

*Add bot in a game opens a tiny (one-pixel wide) window. Clicking it restores its size, but be precise !

=Troubleshooting=

In case you encounter compile or install errors on the way, MacPorts will let you know that a log file has been stored somewhere like /opt/local/var/macports/logs/??/main.log, where the &quot;??&quot; describes the port you are installing. Paste the contents of this file into a paste bin (http://www.pastebin.ca) and post the shortlink to the pastebin in [http://springrts.com/phpbb/viewtopic.php?f=65&amp;t=23455 this topic], together will your full system info (OS, CPU, ARCH, MacPorts version).

That's it ! Enjoy !</text>
      <sha1>safuex1e483rg9vieofhtxfnw3tq5rg</sha1>
    </revision>
  </page>
  <page>
    <title>Spring on a LAN</title>
    <ns>0</ns>
    <id>1060</id>
    <revision>
      <id>30397</id>
      <parentid>30396</parentid>
      <timestamp>2017-07-08T12:13:13Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>fix link</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1883">=Playing on a LAN=

==Introduction==
Hosting a LAN game of Spring is very simple.

First, you must have a working LAN. Obviously this is not within the scope of this article, so you are on your own there.

Once you have your network working, you can proceed. You must first install the [[Download|Latest version of Spring]].

We will now discuss startup and configuration.

=Running the Server=

currently there are two lobby server available:
* [[uberserver]] (recommonded, is used for official server)
* [[SpringLS]] (unmaintained, broken with current lobby clients)

=Joining the local lobby server=


After the server has successfully been started, the players have to log in the local lobby server by entering its IP followed by &quot;:8200&quot; (to specify the port) in the server field of their lobby clients (SpringLobby by default). The player hosting the lobby server can use &quot;localhost:8200&quot; or &quot;127.0.0.1:8200&quot; instead of his own IP. If running uberserver, you must first register your nickname. The nickname must not contain space nor special characters. Once the IP &amp; port are entered in the server field, go to the register tab, enter a nickname and password, and click &quot;Ok&quot;. Accept the terms of use by clicking &quot;Yes&quot; when they pop up. Then log in using the registered nickname.

[[Image:Connect_to_lan_lobby-withnote.png]]
[[Image:Register_on_lan_lobby.png]]

Once every one is logged into the local lobby server you can host battle in the usual way and play spring in your LAN.

=How to get the lobby server IP=

The player hosting the lobby server has to give his IP to all the players in the LAN. He can retrieve his IP by doing this:
==Windows==
* Press ''Windows Key + R''
[[Image:Windows-run-start-menu.gif]]
* Type &quot;cmd&quot;
* Click &quot;run&quot;
* In the terminal window, type &quot;ipconfig&quot;
[[Image:lan_hostip.gif]]

==Linux==
* Open a terminal and type: ifconfig

[[Category:Lobby]]</text>
      <sha1>0kf5jtvq71qcxb0fxbvjms4iv2h4y0e</sha1>
    </revision>
  </page>
  <page>
    <title>Springcontent.sdz</title>
    <ns>0</ns>
    <id>3577</id>
    <redirect title="Gamedev:Glossary" />
    <revision>
      <id>27820</id>
      <timestamp>2013-10-27T20:19:12Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>redirect to glossary</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="48">#REDIRECT [[Gamedev:Glossary#springcontent.sdz]]</text>
      <sha1>20ur70txw0tcczmg04kwto7pqf3purw</sha1>
    </revision>
  </page>
  <page>
    <title>Springie</title>
    <ns>0</ns>
    <id>2421</id>
    <revision>
      <id>26964</id>
      <parentid>16945</parentid>
      <timestamp>2013-04-02T02:48:30Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="116">Page is see topic on the forums: [http://spring.clan-sy.com/phpbb/viewtopic.php?t=7921 link]
[[Category: Autohosts]]</text>
      <sha1>i6bh8h77ejsd7xpyf5w13vncnkydgeu</sha1>
    </revision>
  </page>
  <page>
    <title>Springignore.txt</title>
    <ns>0</ns>
    <id>3755</id>
    <revision>
      <id>29960</id>
      <parentid>29951</parentid>
      <timestamp>2016-04-26T20:50:01Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>categorise</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="389">==Location==
springignore.txt is a file in the root directory of a Spring archive (game or map)

==Purpose==
Tells Spring which directories and files to ignore within an archive when calculating checksums. Useful for multiplayer with archives that are git or svn repositories.

==Links==
http://imolarpg.dyndns.org/trac/balatest/browser/branches/BAR/springignore.txt

[[Category:Game Dev]]</text>
      <sha1>fhmk4nub9buxyrvc6wxlj6glxyvaoco</sha1>
    </revision>
  </page>
  <page>
    <title>Springlobby.log</title>
    <ns>0</ns>
    <id>3767</id>
    <revision>
      <id>31565</id>
      <parentid>31564</parentid>
      <timestamp>2021-05-18T15:15:33Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="400">
springlobby.log (since springlobby 0.248) is the log file of [[SpringLobby]].

On windows it can be found in %LobbyWriteDir%\logs\(year)(month)(day)_(hour)(minute)(second)-springlobby.log, usually %APPDATA%\springlobby\logs\(year)(month)(day)_(hour)(minute)(second)-springlobby.log .

On linux its ~/.springlobby/logs/(year)(month)(day)_(hour)(minute)(second)-springlobby.log .



[[Category:Lobby]]</text>
      <sha1>gn8uo9xu29i1xh0strd9re5uzy5zlc5</sha1>
    </revision>
  </page>
  <page>
    <title>Springrc</title>
    <ns>0</ns>
    <id>3146</id>
    <redirect title="Springsettings.cfg" />
    <revision>
      <id>27540</id>
      <parentid>26625</parentid>
      <timestamp>2013-08-19T17:12:45Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>double redirect</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="39701">#REDIRECT [[Springsettings.cfg]]

config file for the spring rts engine. can be edited with [[SpringSettings]].

to list all possible settings, run

   spring --list-config-vars

this will dump all config vars in json format to stdout. springrc is used to detect the portable mode.

=Linux=
can be found in ~/.springrc (linux)

=Windows=
usally found in %USERNAME%\Local Settings\AppData\springsettings.cfg or next to spring.exe when installed in portable mode.

=possible values=
output of

spring --list-config-vars: (spring 91.0)

{
  &quot;3DTrees&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Rendering/Env/ITreeDrawer.cpp&quot;,
    &quot;declarationLine&quot;: 22,
    &quot;defaultValue&quot;: 1,
    &quot;safemodeValue&quot;: 0,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;AI_UnpauseAfterInit&quot;: {
    &quot;declarationFile&quot;: &quot;rts/ExternalAI/EngineOutHandler.cpp&quot;,
    &quot;declarationLine&quot;: 30,
    &quot;defaultValue&quot;: 1,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;AdvMapShading&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Map/SMF/SMFGroundDrawer.cpp&quot;,
    &quot;declarationLine&quot;: 34,
    &quot;defaultValue&quot;: 1,
    &quot;safemodeValue&quot;: 0,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;AdvSky&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Rendering/Env/ISky.cpp&quot;,
    &quot;declarationLine&quot;: 16,
    &quot;defaultValue&quot;: 0,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;AdvUnitShading&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Rendering/UnitDrawer.cpp&quot;,
    &quot;declarationLine&quot;: 82,
    &quot;defaultValue&quot;: 1,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;AllowAdditionalPlayers&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/GameServer.cpp&quot;,
    &quot;declarationLine&quot;: 73,
    &quot;defaultValue&quot;: 0,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;AtiHacks&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Rendering/GlobalRendering.cpp&quot;,
    &quot;declarationLine&quot;: 19,
    &quot;defaultValue&quot;: -1,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;AtiSwapRBFix&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Rendering/GL/FBO.cpp&quot;,
    &quot;declarationLine&quot;: 17,
    &quot;defaultValue&quot;: 0,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;AutoAddBuiltUnitsToFactoryGroup&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/SelectedUnits.cpp&quot;,
    &quot;declarationLine&quot;: 51,
    &quot;defaultValue&quot;: 0,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;AutoAddBuiltUnitsToSelectedGroup&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/SelectedUnits.cpp&quot;,
    &quot;declarationLine&quot;: 52,
    &quot;defaultValue&quot;: 0,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;AutohostIP&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/GameServer.cpp&quot;,
    &quot;declarationLine&quot;: 75,
    &quot;defaultValue&quot;: &quot;127.0.0.1&quot;,
    &quot;type&quot;: &quot;std::string&quot;
  },
  &quot;AutohostPort&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/GameServer.cpp&quot;,
    &quot;declarationLine&quot;: 76,
    &quot;defaultValue&quot;: 0,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;BuildIconsFirst&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/SelectedUnits.cpp&quot;,
    &quot;declarationLine&quot;: 50,
    &quot;defaultValue&quot;: 0,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;BumpWaterAnisotropy&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Rendering/Env/BumpWater.cpp&quot;,
    &quot;declarationLine&quot;: 49,
    &quot;defaultValue&quot;: 0,
    &quot;type&quot;: &quot;float&quot;
  },
  &quot;BumpWaterBlurReflection&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Rendering/Env/BumpWater.cpp&quot;,
    &quot;declarationLine&quot;: 52,
    &quot;defaultValue&quot;: 0,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;BumpWaterDepthBits&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Rendering/Env/BumpWater.cpp&quot;,
    &quot;declarationLine&quot;: 51,
    &quot;defaultValue&quot;: 24,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;BumpWaterDynamicWaves&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Rendering/Env/BumpWater.cpp&quot;,
    &quot;declarationLine&quot;: 55,
    &quot;defaultValue&quot;: 1,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;BumpWaterEndlessOcean&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Rendering/Env/BumpWater.cpp&quot;,
    &quot;declarationLine&quot;: 54,
    &quot;defaultValue&quot;: 1,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;BumpWaterOcclusionQuery&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Rendering/Env/BumpWater.cpp&quot;,
    &quot;declarationLine&quot;: 57,
    &quot;defaultValue&quot;: 1,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;BumpWaterReflection&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Rendering/Env/BumpWater.cpp&quot;,
    &quot;declarationLine&quot;: 47,
    &quot;defaultValue&quot;: 1,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;BumpWaterRefraction&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Rendering/Env/BumpWater.cpp&quot;,
    &quot;declarationLine&quot;: 48,
    &quot;defaultValue&quot;: 1,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;BumpWaterShoreWaves&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Rendering/Env/BumpWater.cpp&quot;,
    &quot;declarationLine&quot;: 53,
    &quot;defaultValue&quot;: 1,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;BumpWaterTexSizeReflection&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Rendering/Env/BumpWater.cpp&quot;,
    &quot;declarationLine&quot;: 46,
    &quot;defaultValue&quot;: 512,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;BumpWaterUseDepthTexture&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Rendering/Env/BumpWater.cpp&quot;,
    &quot;declarationLine&quot;: 50,
    &quot;defaultValue&quot;: 1,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;BumpWaterUseUniforms&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Rendering/Env/BumpWater.cpp&quot;,
    &quot;declarationLine&quot;: 56,
    &quot;defaultValue&quot;: 0,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;CamFreeAngVelTime&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/Camera/FreeController.cpp&quot;,
    &quot;declarationLine&quot;: 30,
    &quot;defaultValue&quot;: 1,
    &quot;type&quot;: &quot;float&quot;
  },
  &quot;CamFreeAutoTilt&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/Camera/FreeController.cpp&quot;,
    &quot;declarationLine&quot;: 28,
    &quot;defaultValue&quot;: 150,
    &quot;type&quot;: &quot;float&quot;
  },
  &quot;CamFreeEnabled&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/Camera/FreeController.cpp&quot;,
    &quot;declarationLine&quot;: 19,
    &quot;defaultValue&quot;: 0,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;CamFreeFOV&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/Camera/FreeController.cpp&quot;,
    &quot;declarationLine&quot;: 22,
    &quot;defaultValue&quot;: 45,
    &quot;type&quot;: &quot;float&quot;
  },
  &quot;CamFreeGoForward&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/Camera/FreeController.cpp&quot;,
    &quot;declarationLine&quot;: 21,
    &quot;defaultValue&quot;: 0,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;CamFreeGravity&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/Camera/FreeController.cpp&quot;,
    &quot;declarationLine&quot;: 24,
    &quot;defaultValue&quot;: -500,
    &quot;type&quot;: &quot;float&quot;
  },
  &quot;CamFreeGroundOffset&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/Camera/FreeController.cpp&quot;,
    &quot;declarationLine&quot;: 26,
    &quot;defaultValue&quot;: 16,
    &quot;type&quot;: &quot;float&quot;
  },
  &quot;CamFreeInvertAlt&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/Camera/FreeController.cpp&quot;,
    &quot;declarationLine&quot;: 20,
    &quot;defaultValue&quot;: 0,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;CamFreeScrollSpeed&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/Camera/FreeController.cpp&quot;,
    &quot;declarationLine&quot;: 23,
    &quot;defaultValue&quot;: 500,
    &quot;type&quot;: &quot;float&quot;
  },
  &quot;CamFreeSlide&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/Camera/FreeController.cpp&quot;,
    &quot;declarationLine&quot;: 25,
    &quot;defaultValue&quot;: 0.5,
    &quot;type&quot;: &quot;float&quot;
  },
  &quot;CamFreeTiltSpeed&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/Camera/FreeController.cpp&quot;,
    &quot;declarationLine&quot;: 27,
    &quot;defaultValue&quot;: 150,
    &quot;type&quot;: &quot;float&quot;
  },
  &quot;CamFreeVelTime&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/Camera/FreeController.cpp&quot;,
    &quot;declarationLine&quot;: 29,
    &quot;defaultValue&quot;: 1.5,
    &quot;type&quot;: &quot;float&quot;
  },
  &quot;CamMode&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/CameraHandler.cpp&quot;,
    &quot;declarationLine&quot;: 36,
    &quot;description&quot;: &quot;Defines the used camera. Options are:\n0 = FPS\n1 = Overhead\n2 = TotalWar\n3 = RotOverhead\n4 = Free\n5 = SmoothOverhead\n6 = Orbit\n7 = Overview&quot;,
    &quot;defaultValue&quot;: 5,
    &quot;minimumValue&quot;: 0,
    &quot;maximumValue&quot;: 7,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;CamModeName&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/CameraHandler.cpp&quot;,
    &quot;declarationLine&quot;: 34,
    &quot;defaultValue&quot;: &quot;&quot;,
    &quot;type&quot;: &quot;std::string&quot;
  },
  &quot;CamTimeExponent&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/CameraHandler.cpp&quot;,
    &quot;declarationLine&quot;: 55,
    &quot;defaultValue&quot;: 4,
    &quot;minimumValue&quot;: 0,
    &quot;type&quot;: &quot;float&quot;
  },
  &quot;CamTimeFactor&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/CameraHandler.cpp&quot;,
    &quot;declarationLine&quot;: 51,
    &quot;defaultValue&quot;: 1,
    &quot;minimumValue&quot;: 0,
    &quot;type&quot;: &quot;float&quot;
  },
  &quot;CatchAIExceptions&quot;: {
    &quot;declarationFile&quot;: &quot;rts/ExternalAI/EngineOutHandler.cpp&quot;,
    &quot;declarationLine&quot;: 29,
    &quot;defaultValue&quot;: 1,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;ColorElev&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Map/HeightLinePalette.cpp&quot;,
    &quot;declarationLine&quot;: 7,
    &quot;defaultValue&quot;: 1,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;CompressTextures&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Rendering/GlobalRendering.cpp&quot;,
    &quot;declarationLine&quot;: 18,
    &quot;defaultValue&quot;: 0,
    &quot;safemodeValue&quot;: 1,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;CrossAlpha&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/UI/MouseHandler.cpp&quot;,
    &quot;declarationLine&quot;: 67,
    &quot;defaultValue&quot;: 0.5,
    &quot;type&quot;: &quot;float&quot;
  },
  &quot;CrossMoveScale&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/UI/MouseHandler.cpp&quot;,
    &quot;declarationLine&quot;: 68,
    &quot;defaultValue&quot;: 1,
    &quot;type&quot;: &quot;float&quot;
  },
  &quot;CrossSize&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/UI/MouseHandler.cpp&quot;,
    &quot;declarationLine&quot;: 66,
    &quot;defaultValue&quot;: 12,
    &quot;type&quot;: &quot;float&quot;
  },
  &quot;CubeTexSizeReflection&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Rendering/Env/CubeMapHandler.cpp&quot;,
    &quot;declarationLine&quot;: 17,
    &quot;defaultValue&quot;: 128,
    &quot;minimumValue&quot;: 1,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;CubeTexSizeSpecular&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Rendering/Env/CubeMapHandler.cpp&quot;,
    &quot;declarationLine&quot;: 16,
    &quot;defaultValue&quot;: 128,
    &quot;minimumValue&quot;: 1,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;DemoFromDemo&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/PreGame.cpp&quot;,
    &quot;declarationLine&quot;: 54,
    &quot;defaultValue&quot;: 0,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;DepthBufferBits&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/SpringApp.cpp&quot;,
    &quot;declarationLine&quot;: 85,
    &quot;defaultValue&quot;: 24,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;DisableCrappyGPUWarning&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Rendering/GL/myGL.cpp&quot;,
    &quot;declarationLine&quot;: 24,
    &quot;defaultValue&quot;: 0,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;DoubleClickTime&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/UI/MouseHandler.cpp&quot;,
    &quot;declarationLine&quot;: 59,
    &quot;defaultValue&quot;: 200,
    &quot;type&quot;: &quot;float&quot;
  },
  &quot;DualScreenMiniMapOnLeft&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Rendering/GlobalRendering.cpp&quot;,
    &quot;declarationLine&quot;: 21,
    &quot;defaultValue&quot;: 0,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;DualScreenMode&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Rendering/GlobalRendering.cpp&quot;,
    &quot;declarationLine&quot;: 20,
    &quot;defaultValue&quot;: 0,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;DynamicSky&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Rendering/Env/BasicSky.cpp&quot;,
    &quot;declarationLine&quot;: 22,
    &quot;defaultValue&quot;: 0,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;DynamicSun&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Rendering/Env/ISky.cpp&quot;,
    &quot;declarationLine&quot;: 15,
    &quot;defaultValue&quot;: 0,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;DynamicSunMinElevation&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Rendering/Env/SkyLight.cpp&quot;,
    &quot;declarationLine&quot;: 16,
    &quot;defaultValue&quot;: 0.1,
    &quot;type&quot;: &quot;float&quot;
  },
  &quot;EnableDrawCallIns&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/GlobalConfig.cpp&quot;,
    &quot;declarationLine&quot;: 59,
    &quot;defaultValue&quot;: 1,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;ExtraTextureUpdateRate&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Map/BaseGroundDrawer.cpp&quot;,
    &quot;declarationLine&quot;: 28,
    &quot;defaultValue&quot;: 45,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;FPSEnabled&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/Camera/FPSController.cpp&quot;,
    &quot;declarationLine&quot;: 19,
    &quot;defaultValue&quot;: 1,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;FPSFOV&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/Camera/FPSController.cpp&quot;,
    &quot;declarationLine&quot;: 20,
    &quot;defaultValue&quot;: 45,
    &quot;type&quot;: &quot;float&quot;
  },
  &quot;FPSMouseScale&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/Camera/FPSController.cpp&quot;,
    &quot;declarationLine&quot;: 18,
    &quot;defaultValue&quot;: 0.01,
    &quot;type&quot;: &quot;float&quot;
  },
  &quot;FPSScrollSpeed&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/Camera/FPSController.cpp&quot;,
    &quot;declarationLine&quot;: 17,
    &quot;defaultValue&quot;: 10,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;FSAALevel&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/SpringApp.cpp&quot;,
    &quot;declarationLine&quot;: 87,
    &quot;defaultValue&quot;: 0,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;FeatureDrawDistance&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Rendering/FeatureDrawer.cpp&quot;,
    &quot;declarationLine&quot;: 38,
    &quot;defaultValue&quot;: 6000,
    &quot;minimumValue&quot;: 0,
    &quot;type&quot;: &quot;float&quot;
  },
  &quot;FeatureFadeDistance&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Rendering/FeatureDrawer.cpp&quot;,
    &quot;declarationLine&quot;: 42,
    &quot;defaultValue&quot;: 4500,
    &quot;minimumValue&quot;: 0,
    &quot;type&quot;: &quot;float&quot;
  },
  &quot;FixAltTab&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/SpringApp.cpp&quot;,
    &quot;declarationLine&quot;: 91,
    &quot;defaultValue&quot;: 0,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;FontFile&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/SpringApp.cpp&quot;,
    &quot;declarationLine&quot;: 92,
    &quot;defaultValue&quot;: &quot;fonts/FreeSansBold.otf&quot;,
    &quot;type&quot;: &quot;std::string&quot;
  },
  &quot;FontOutlineWeight&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/SpringApp.cpp&quot;,
    &quot;declarationLine&quot;: 97,
    &quot;defaultValue&quot;: 25,
    &quot;type&quot;: &quot;float&quot;
  },
  &quot;FontOutlineWidth&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/SpringApp.cpp&quot;,
    &quot;declarationLine&quot;: 96,
    &quot;defaultValue&quot;: 3,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;FontSize&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/SpringApp.cpp&quot;,
    &quot;declarationLine&quot;: 94,
    &quot;defaultValue&quot;: 23,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;Fullscreen&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/SpringApp.cpp&quot;,
    &quot;declarationLine&quot;: 100,
    &quot;defaultValue&quot;: 1,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;FullscreenEdgeMove&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/Game.cpp&quot;,
    &quot;declarationLine&quot;: 174,
    &quot;defaultValue&quot;: 1,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;GrassDetail&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Rendering/Env/GrassDrawer.cpp&quot;,
    &quot;declarationLine&quot;: 28,
    &quot;defaultValue&quot;: 3,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;GroundDecals&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Rendering/GroundDecalHandler.cpp&quot;,
    &quot;declarationLine&quot;: 44,
    &quot;defaultValue&quot;: 1,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;GroundDetail&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Map/SMF/SMFGroundDrawer.cpp&quot;,
    &quot;declarationLine&quot;: 28,
    &quot;defaultValue&quot;: 60,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;GroundLODScaleReflection&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Map/BaseGroundDrawer.cpp&quot;,
    &quot;declarationLine&quot;: 24,
    &quot;defaultValue&quot;: 1,
    &quot;type&quot;: &quot;float&quot;
  },
  &quot;GroundLODScaleRefraction&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Map/BaseGroundDrawer.cpp&quot;,
    &quot;declarationLine&quot;: 25,
    &quot;defaultValue&quot;: 1,
    &quot;type&quot;: &quot;float&quot;
  },
  &quot;GroundLODScaleUnitReflection&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Map/BaseGroundDrawer.cpp&quot;,
    &quot;declarationLine&quot;: 26,
    &quot;defaultValue&quot;: 1,
    &quot;type&quot;: &quot;float&quot;
  },
  &quot;GroundNormalTextureHighPrecision&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Map/SMF/SMFReadMap.cpp&quot;,
    &quot;declarationLine&quot;: 29,
    &quot;defaultValue&quot;: 0,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;GroundScarAlphaFade&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Rendering/GroundDecalHandler.cpp&quot;,
    &quot;declarationLine&quot;: 45,
    &quot;defaultValue&quot;: 0,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;GuiOpacity&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/Game.cpp&quot;,
    &quot;declarationLine&quot;: 181,
    &quot;defaultValue&quot;: 0.8,
    &quot;type&quot;: &quot;float&quot;
  },
  &quot;HangTimeout&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/Platform/Watchdog.cpp&quot;,
    &quot;declarationLine&quot;: 24,
    &quot;description&quot;: &quot;Number of seconds that, if spent in the same code segment, indicate a hang; -1 to disable.&quot;,
    &quot;defaultValue&quot;: 10,
    &quot;minimumValue&quot;: -1,
    &quot;maximumValue&quot;: 600,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;HardwareCursor&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/UI/MouseHandler.cpp&quot;,
    &quot;declarationLine&quot;: 57,
    &quot;defaultValue&quot;: 0,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;HardwareThreadCount&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/SpringApp.cpp&quot;,
    &quot;declarationLine&quot;: 107,
    &quot;defaultValue&quot;: 0,
    &quot;safemodeValue&quot;: 1,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;HeightMapTexture&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Map/HeightMapTexture.cpp&quot;,
    &quot;declarationLine&quot;: 13,
    &quot;defaultValue&quot;: 1,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;HighResLos&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Map/BaseGroundDrawer.cpp&quot;,
    &quot;declarationLine&quot;: 27,
    &quot;defaultValue&quot;: 0,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;InfoConsoleGeometry&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/UI/InfoConsole.cpp&quot;,
    &quot;declarationLine&quot;: 20,
    &quot;defaultValue&quot;: &quot;0.26 0.96 0.41 0.205&quot;,
    &quot;type&quot;: &quot;std::string&quot;
  },
  &quot;InfoMessageTime&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/UI/InfoConsole.cpp&quot;,
    &quot;declarationLine&quot;: 19,
    &quot;defaultValue&quot;: 400,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;InitialNetworkTimeout&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/GlobalConfig.cpp&quot;,
    &quot;declarationLine&quot;: 16,
    &quot;defaultValue&quot;: 30,
    &quot;minimumValue&quot;: 10,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;InputTextGeo&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/Game.cpp&quot;,
    &quot;declarationLine&quot;: 182,
    &quot;defaultValue&quot;: &quot;&quot;,
    &quot;type&quot;: &quot;std::string&quot;
  },
  &quot;InvertMouse&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/UI/MouseHandler.cpp&quot;,
    &quot;declarationLine&quot;: 58,
    &quot;defaultValue&quot;: 0,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;InvertQueueKey&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/UI/GuiHandler.cpp&quot;,
    &quot;declarationLine&quot;: 64,
    &quot;defaultValue&quot;: 0,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;JoystickEnabled&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/Input/Joystick.cpp&quot;,
    &quot;declarationLine&quot;: 12,
    &quot;defaultValue&quot;: 1,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;JoystickUse&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/Input/Joystick.cpp&quot;,
    &quot;declarationLine&quot;: 13,
    &quot;defaultValue&quot;: 0,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;LODScale&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Rendering/UnitDrawer.cpp&quot;,
    &quot;declarationLine&quot;: 83,
    &quot;defaultValue&quot;: 1,
    &quot;type&quot;: &quot;float&quot;
  },
  &quot;LODScaleReflection&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Rendering/UnitDrawer.cpp&quot;,
    &quot;declarationLine&quot;: 85,
    &quot;defaultValue&quot;: 1,
    &quot;type&quot;: &quot;float&quot;
  },
  &quot;LODScaleRefraction&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Rendering/UnitDrawer.cpp&quot;,
    &quot;declarationLine&quot;: 86,
    &quot;defaultValue&quot;: 1,
    &quot;type&quot;: &quot;float&quot;
  },
  &quot;LODScaleShadow&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Rendering/UnitDrawer.cpp&quot;,
    &quot;declarationLine&quot;: 84,
    &quot;defaultValue&quot;: 1,
    &quot;type&quot;: &quot;float&quot;
  },
  &quot;LastSelectedMap&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Menu/SelectionWidget.cpp&quot;,
    &quot;declarationLine&quot;: 18,
    &quot;defaultValue&quot;: &quot;No map selected&quot;,
    &quot;type&quot;: &quot;std::string&quot;
  },
  &quot;LastSelectedMod&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Menu/SelectionWidget.cpp&quot;,
    &quot;declarationLine&quot;: 17,
    &quot;defaultValue&quot;: &quot;No game selected&quot;,
    &quot;type&quot;: &quot;std::string&quot;
  },
  &quot;LastSelectedScript&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Menu/SelectionWidget.cpp&quot;,
    &quot;declarationLine&quot;: 19,
    &quot;defaultValue&quot;: &quot;No script selected&quot;,
    &quot;type&quot;: &quot;std::string&quot;
  },
  &quot;LastSelectedSetting&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Menu/SelectMenu.cpp&quot;,
    &quot;declarationLine&quot;: 47,
    &quot;defaultValue&quot;: &quot;&quot;,
    &quot;type&quot;: &quot;std::string&quot;
  },
  &quot;LinkIncomingMaxPacketRate&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/GlobalConfig.cpp&quot;,
    &quot;declarationLine&quot;: 44,
    &quot;defaultValue&quot;: 64,
    &quot;minimumValue&quot;: 0,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;LinkIncomingMaxWaitingPackets&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/GlobalConfig.cpp&quot;,
    &quot;declarationLine&quot;: 50,
    &quot;defaultValue&quot;: 512,
    &quot;minimumValue&quot;: 0,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;LinkIncomingPeakBandwidth&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/GlobalConfig.cpp&quot;,
    &quot;declarationLine&quot;: 40,
    &quot;defaultValue&quot;: 32768,
    &quot;minimumValue&quot;: 0,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;LinkIncomingSustainedBandwidth&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/GlobalConfig.cpp&quot;,
    &quot;declarationLine&quot;: 36,
    &quot;defaultValue&quot;: 2048,
    &quot;minimumValue&quot;: 0,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;LinkOutgoingBandwidth&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/GlobalConfig.cpp&quot;,
    &quot;declarationLine&quot;: 32,
    &quot;defaultValue&quot;: 65536,
    &quot;minimumValue&quot;: 0,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;LoadingMT&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/LoadScreen.cpp&quot;,
    &quot;declarationLine&quot;: 41,
    &quot;defaultValue&quot;: -1,
    &quot;safemodeValue&quot;: 0,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;LobbyServer&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Menu/LobbyConnection.cpp&quot;,
    &quot;declarationLine&quot;: 12,
    &quot;defaultValue&quot;: &quot;lobby.springrts.com&quot;,
    &quot;type&quot;: &quot;std::string&quot;
  },
  &quot;LogFlush&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/LogOutput.cpp&quot;,
    &quot;declarationLine&quot;: 36,
    &quot;description&quot;: &quot;Instantly write to the logfile, use only for debugging as it will cause a slowdown&quot;,
    &quot;defaultValue&quot;: 0,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;LogSections&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/LogOutput.cpp&quot;,
    &quot;declarationLine&quot;: 34,
    &quot;description&quot;: &quot;Comma seperated list of enabled logsections, see infolog.txt / console output for possible values&quot;,
    &quot;defaultValue&quot;: &quot;&quot;,
    &quot;type&quot;: &quot;std::string&quot;
  },
  &quot;LuaModUICtrl&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/Game.cpp&quot;,
    &quot;declarationLine&quot;: 183,
    &quot;defaultValue&quot;: 1,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;LuaShaders&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Lua/LuaOpenGL.cpp&quot;,
    &quot;declarationLine&quot;: 81,
    &quot;defaultValue&quot;: 1,
    &quot;safemodeValue&quot;: 0,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;LuaSocketEnabled&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Lua/LuaUI.cpp&quot;,
    &quot;declarationLine&quot;: 63,
    &quot;description&quot;: &quot;Enable LuaSocket support, allows a lua-widget to make TCP/UDP Connections&quot;,
    &quot;readOnly&quot;: 1,
    &quot;defaultValue&quot;: 0,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;MTInfoThreshold&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/Game.cpp&quot;,
    &quot;declarationLine&quot;: 179,
    &quot;defaultValue&quot;: 1,
    &quot;type&quot;: &quot;float&quot;
  },
  &quot;MaxDynamicMapLights&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Map/SMF/SMFGroundDrawer.cpp&quot;,
    &quot;declarationLine&quot;: 30,
    &quot;defaultValue&quot;: 1,
    &quot;minimumValue&quot;: 0,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;MaxDynamicModelLights&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Rendering/UnitDrawer.cpp&quot;,
    &quot;declarationLine&quot;: 78,
    &quot;defaultValue&quot;: 1,
    &quot;minimumValue&quot;: 0,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;MaxNanoParticles&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Sim/Projectiles/ProjectileHandler.cpp&quot;,
    &quot;declarationLine&quot;: 39,
    &quot;defaultValue&quot;: 2500,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;MaxParticles&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Sim/Projectiles/ProjectileHandler.cpp&quot;,
    &quot;declarationLine&quot;: 38,
    &quot;defaultValue&quot;: 1000,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;MaxPathCostsMemoryFootPrint&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Sim/Path/Default/PathEstimator.cpp&quot;,
    &quot;declarationLine&quot;: 35,
    &quot;defaultValue&quot;: 536870912,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;MaxSounds&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/Sound/Sound.cpp&quot;,
    &quot;declarationLine&quot;: 34,
    &quot;defaultValue&quot;: 128,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;MaximumTransmissionUnit&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/GlobalConfig.cpp&quot;,
    &quot;declarationLine&quot;: 28,
    &quot;defaultValue&quot;: 1400,
    &quot;minimumValue&quot;: 400,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;MetalMapPalette&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Map/MetalMap.cpp&quot;,
    &quot;declarationLine&quot;: 10,
    &quot;defaultValue&quot;: 0,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;MiddleClickScrollSpeed&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/Camera/OverheadController.cpp&quot;,
    &quot;declarationLine&quot;: 19,
    &quot;defaultValue&quot;: 0.01,
    &quot;type&quot;: &quot;float&quot;
  },
  &quot;MiniMapButtonSize&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/UI/MiniMap.cpp&quot;,
    &quot;declarationLine&quot;: 60,
    &quot;defaultValue&quot;: 16,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;MiniMapCursorScale&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/UI/MiniMap.cpp&quot;,
    &quot;declarationLine&quot;: 67,
    &quot;defaultValue&quot;: -0.5,
    &quot;type&quot;: &quot;float&quot;
  },
  &quot;MiniMapDrawCommands&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/UI/MiniMap.cpp&quot;,
    &quot;declarationLine&quot;: 70,
    &quot;defaultValue&quot;: 1,
    &quot;minimumValue&quot;: 0,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;MiniMapDrawProjectiles&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/UI/MiniMap.cpp&quot;,
    &quot;declarationLine&quot;: 74,
    &quot;defaultValue&quot;: 1,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;MiniMapFullProxy&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/UI/MiniMap.cpp&quot;,
    &quot;declarationLine&quot;: 59,
    &quot;defaultValue&quot;: 1,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;MiniMapGeometry&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/UI/MiniMap.cpp&quot;,
    &quot;declarationLine&quot;: 58,
    &quot;defaultValue&quot;: &quot;2 2 200 200&quot;,
    &quot;type&quot;: &quot;std::string&quot;
  },
  &quot;MiniMapIcons&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/UI/MiniMap.cpp&quot;,
    &quot;declarationLine&quot;: 68,
    &quot;defaultValue&quot;: 1,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;MiniMapMarker&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/UI/GuiHandler.cpp&quot;,
    &quot;declarationLine&quot;: 63,
    &quot;defaultValue&quot;: 1,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;MiniMapUnitExp&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/UI/MiniMap.cpp&quot;,
    &quot;declarationLine&quot;: 66,
    &quot;defaultValue&quot;: 0.25,
    &quot;type&quot;: &quot;float&quot;
  },
  &quot;MiniMapUnitSize&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/UI/MiniMap.cpp&quot;,
    &quot;declarationLine&quot;: 62,
    &quot;defaultValue&quot;: 2.5,
    &quot;minimumValue&quot;: 0,
    &quot;type&quot;: &quot;float&quot;
  },
  &quot;MouseDragScrollThreshold&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/UI/MouseHandler.cpp&quot;,
    &quot;declarationLine&quot;: 69,
    &quot;defaultValue&quot;: 0.3,
    &quot;type&quot;: &quot;float&quot;
  },
  &quot;MultiThreadDrawUnit&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Rendering/UnitDrawer.cpp&quot;,
    &quot;declarationLine&quot;: 75,
    &quot;defaultValue&quot;: 1,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;MultiThreadDrawUnitShadow&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Rendering/UnitDrawer.cpp&quot;,
    &quot;declarationLine&quot;: 76,
    &quot;defaultValue&quot;: 1,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;MultiThreadLua&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/GlobalConfig.cpp&quot;,
    &quot;declarationLine&quot;: 62,
    &quot;defaultValue&quot;: 0,
    &quot;minimumValue&quot;: 0,
    &quot;maximumValue&quot;: 6,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;NetworkLossFactor&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/GlobalConfig.cpp&quot;,
    &quot;declarationLine&quot;: 11,
    &quot;defaultValue&quot;: 0,
    &quot;minimumValue&quot;: 0,
    &quot;maximumValue&quot;: 2,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;NetworkTimeout&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/GlobalConfig.cpp&quot;,
    &quot;declarationLine&quot;: 20,
    &quot;defaultValue&quot;: 120,
    &quot;minimumValue&quot;: 0,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;NoHelperAIs&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Menu/SelectMenu.cpp&quot;,
    &quot;declarationLine&quot;: 46,
    &quot;defaultValue&quot;: 0,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;NoSound&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/Sound/ISound.cpp&quot;,
    &quot;declarationLine&quot;: 13,
    &quot;defaultValue&quot;: 0,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;OrbitControllerEnabled&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/Camera/OrbitController.cpp&quot;,
    &quot;declarationLine&quot;: 16,
    &quot;defaultValue&quot;: 1,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;OrbitControllerOrbitSpeed&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/Camera/OrbitController.cpp&quot;,
    &quot;declarationLine&quot;: 17,
    &quot;defaultValue&quot;: 0.25,
    &quot;minimumValue&quot;: 0.1,
    &quot;maximumValue&quot;: 10,
    &quot;type&quot;: &quot;float&quot;
  },
  &quot;OrbitControllerPanSpeed&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/Camera/OrbitController.cpp&quot;,
    &quot;declarationLine&quot;: 18,
    &quot;defaultValue&quot;: 2,
    &quot;minimumValue&quot;: 0.1,
    &quot;maximumValue&quot;: 10,
    &quot;type&quot;: &quot;float&quot;
  },
  &quot;OrbitControllerZoomSpeed&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/Camera/OrbitController.cpp&quot;,
    &quot;declarationLine&quot;: 19,
    &quot;defaultValue&quot;: 5,
    &quot;minimumValue&quot;: 0.1,
    &quot;maximumValue&quot;: 10,
    &quot;type&quot;: &quot;float&quot;
  },
  &quot;OscStatsSenderDestinationAddress&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/OSCStatsSender.cpp&quot;,
    &quot;declarationLine&quot;: 22,
    &quot;defaultValue&quot;: &quot;127.0.0.1&quot;,
    &quot;type&quot;: &quot;std::string&quot;
  },
  &quot;OscStatsSenderDestinationPort&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/OSCStatsSender.cpp&quot;,
    &quot;declarationLine&quot;: 24,
    &quot;defaultValue&quot;: 6447,
    &quot;minimumValue&quot;: 0,
    &quot;maximumValue&quot;: 65535,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;OscStatsSenderEnabled&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/OSCStatsSender.cpp&quot;,
    &quot;declarationLine&quot;: 21,
    &quot;defaultValue&quot;: 0,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;OverheadEnabled&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/Camera/OverheadController.cpp&quot;,
    &quot;declarationLine&quot;: 22,
    &quot;defaultValue&quot;: 1,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;OverheadFOV&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/Camera/OverheadController.cpp&quot;,
    &quot;declarationLine&quot;: 23,
    &quot;defaultValue&quot;: 45,
    &quot;type&quot;: &quot;float&quot;
  },
  &quot;OverheadScrollSpeed&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/Camera/OverheadController.cpp&quot;,
    &quot;declarationLine&quot;: 20,
    &quot;defaultValue&quot;: 10,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;OverheadTiltSpeed&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/Camera/OverheadController.cpp&quot;,
    &quot;declarationLine&quot;: 21,
    &quot;defaultValue&quot;: 1,
    &quot;type&quot;: &quot;float&quot;
  },
  &quot;PitchAdjust&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/Sound/Sound.cpp&quot;,
    &quot;declarationLine&quot;: 35,
    &quot;defaultValue&quot;: 0,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;ROAM&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Map/SMF/SMFGroundDrawer.cpp&quot;,
    &quot;declarationLine&quot;: 36,
    &quot;description&quot;: &quot;Use ROAM for terrain mesh rendering. 1=VBO mode, 2=DL mode, 3=VA mode&quot;,
    &quot;defaultValue&quot;: 1,
    &quot;safemodeValue&quot;: 2,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;ReconnectTimeout&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/GlobalConfig.cpp&quot;,
    &quot;declarationLine&quot;: 24,
    &quot;defaultValue&quot;: 15,
    &quot;minimumValue&quot;: 0,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;ReflectiveWater&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Rendering/Env/IWater.cpp&quot;,
    &quot;declarationLine&quot;: 17,
    &quot;defaultValue&quot;: 1,
    &quot;safemodeValue&quot;: 0,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;RotOverheadEnabled&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/Camera/RotOverheadController.cpp&quot;,
    &quot;declarationLine&quot;: 15,
    &quot;defaultValue&quot;: 1,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;RotOverheadFOV&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/Camera/RotOverheadController.cpp&quot;,
    &quot;declarationLine&quot;: 16,
    &quot;defaultValue&quot;: 45,
    &quot;type&quot;: &quot;float&quot;
  },
  &quot;RotOverheadMouseScale&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/Camera/RotOverheadController.cpp&quot;,
    &quot;declarationLine&quot;: 13,
    &quot;defaultValue&quot;: 0.01,
    &quot;type&quot;: &quot;float&quot;
  },
  &quot;RotOverheadScrollSpeed&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/Camera/RotOverheadController.cpp&quot;,
    &quot;declarationLine&quot;: 14,
    &quot;defaultValue&quot;: 10,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;RotateLogFiles&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/LogOutput.cpp&quot;,
    &quot;declarationLine&quot;: 32,
    &quot;description&quot;: &quot;rotate logfiles, valid values are \&quot;always\&quot; (default in debug builds) and \&quot;never\&quot; (default in release builds).&quot;,
    &quot;defaultValue&quot;: &quot;auto&quot;,
    &quot;type&quot;: &quot;std::string&quot;
  },
  &quot;SM3ForceFallbackTex&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Map/SM3/SM3Map.cpp&quot;,
    &quot;declarationLine&quot;: 26,
    &quot;defaultValue&quot;: 0,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;SM3MaxTextureStages&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Map/SM3/SM3Map.cpp&quot;,
    &quot;declarationLine&quot;: 27,
    &quot;defaultValue&quot;: 10,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;SM3TerrainDetail&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Map/SM3/SM3GroundDrawer.cpp&quot;,
    &quot;declarationLine&quot;: 22,
    &quot;defaultValue&quot;: 200,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;SMFTexAniso&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Map/SMF/SMFReadMap.cpp&quot;,
    &quot;declarationLine&quot;: 30,
    &quot;defaultValue&quot;: 0,
    &quot;type&quot;: &quot;float&quot;
  },
  &quot;ScreenshotCounter&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Rendering/Screenshot.cpp&quot;,
    &quot;declarationLine&quot;: 20,
    &quot;defaultValue&quot;: 0,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;ScrollWheelSpeed&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/UI/MouseHandler.cpp&quot;,
    &quot;declarationLine&quot;: 61,
    &quot;defaultValue&quot;: 25,
    &quot;minimumValue&quot;: -255,
    &quot;maximumValue&quot;: 255,
    &quot;type&quot;: &quot;float&quot;
  },
  &quot;SetCoreAffinity&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/SpringApp.cpp&quot;,
    &quot;declarationLine&quot;: 84,
    &quot;description&quot;: &quot;Defines a bitmask indicating which CPU cores the main-thread should use.&quot;,
    &quot;defaultValue&quot;: &quot;0&quot;,
    &quot;safemodeValue&quot;: &quot;1&quot;,
    &quot;type&quot;: &quot;unsigned&quot;
  },
  &quot;ShadowMapSize&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Rendering/ShadowHandler.cpp&quot;,
    &quot;declarationLine&quot;: 31,
    &quot;defaultValue&quot;: 2048,
    &quot;minimumValue&quot;: 1,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;ShadowProjectionMode&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Rendering/ShadowHandler.cpp&quot;,
    &quot;declarationLine&quot;: 32,
    &quot;defaultValue&quot;: 1,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;Shadows&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Rendering/ShadowHandler.cpp&quot;,
    &quot;declarationLine&quot;: 30,
    &quot;defaultValue&quot;: 0,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;ShowClock&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/Game.cpp&quot;,
    &quot;declarationLine&quot;: 176,
    &quot;defaultValue&quot;: 1,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;ShowFPS&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/Game.cpp&quot;,
    &quot;declarationLine&quot;: 175,
    &quot;defaultValue&quot;: 0,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;ShowHealthBars&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Rendering/UnitDrawer.cpp&quot;,
    &quot;declarationLine&quot;: 74,
    &quot;defaultValue&quot;: 1,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;ShowMTInfo&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/Game.cpp&quot;,
    &quot;declarationLine&quot;: 178,
    &quot;defaultValue&quot;: 1,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;ShowPlayerInfo&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/Game.cpp&quot;,
    &quot;declarationLine&quot;: 180,
    &quot;defaultValue&quot;: 1,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;ShowRezBars&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Rendering/FeatureDrawer.cpp&quot;,
    &quot;declarationLine&quot;: 36,
    &quot;defaultValue&quot;: 1,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;ShowSpeed&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/Game.cpp&quot;,
    &quot;declarationLine&quot;: 177,
    &quot;defaultValue&quot;: 0,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;SimpleMiniMapColors&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/UI/MiniMap.cpp&quot;,
    &quot;declarationLine&quot;: 75,
    &quot;defaultValue&quot;: 0,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;SmallFontFile&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/SpringApp.cpp&quot;,
    &quot;declarationLine&quot;: 93,
    &quot;defaultValue&quot;: &quot;fonts/FreeSansBold.otf&quot;,
    &quot;type&quot;: &quot;std::string&quot;
  },
  &quot;SmallFontOutlineWeight&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/SpringApp.cpp&quot;,
    &quot;declarationLine&quot;: 99,
    &quot;defaultValue&quot;: 10,
    &quot;type&quot;: &quot;float&quot;
  },
  &quot;SmallFontOutlineWidth&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/SpringApp.cpp&quot;,
    &quot;declarationLine&quot;: 98,
    &quot;defaultValue&quot;: 2,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;SmallFontSize&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/SpringApp.cpp&quot;,
    &quot;declarationLine&quot;: 95,
    &quot;defaultValue&quot;: 14,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;SmoothEnabled&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/Camera/SmoothController.cpp&quot;,
    &quot;declarationLine&quot;: 22,
    &quot;defaultValue&quot;: 1,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;SmoothFOV&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/Camera/SmoothController.cpp&quot;,
    &quot;declarationLine&quot;: 23,
    &quot;defaultValue&quot;: 45,
    &quot;type&quot;: &quot;float&quot;
  },
  &quot;SmoothLines&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/SpringApp.cpp&quot;,
    &quot;declarationLine&quot;: 88,
    &quot;description&quot;: &quot;Smooth lines.\n 0 := off\n 1 := fastest\n 2 := don't care\n 3 := nicest&quot;,
    &quot;defaultValue&quot;: 2,
    &quot;minimumValue&quot;: 0,
    &quot;maximumValue&quot;: 3,
    &quot;safemodeValue&quot;: 0,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;SmoothPoints&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/SpringApp.cpp&quot;,
    &quot;declarationLine&quot;: 89,
    &quot;description&quot;: &quot;Smooth points.\n 0 := off\n 1 := fastest\n 2 := don't care\n 3 := nicest&quot;,
    &quot;defaultValue&quot;: 2,
    &quot;minimumValue&quot;: 0,
    &quot;maximumValue&quot;: 3,
    &quot;safemodeValue&quot;: 0,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;SmoothScrollSpeed&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/Camera/SmoothController.cpp&quot;,
    &quot;declarationLine&quot;: 20,
    &quot;defaultValue&quot;: 10,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;SmoothTiltSpeed&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/Camera/SmoothController.cpp&quot;,
    &quot;declarationLine&quot;: 21,
    &quot;defaultValue&quot;: 1,
    &quot;type&quot;: &quot;float&quot;
  },
  &quot;SourcePort&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/NetProtocol.cpp&quot;,
    &quot;declarationLine&quot;: 26,
    &quot;defaultValue&quot;: 0,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;SpeedControl&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/GameServer.cpp&quot;,
    &quot;declarationLine&quot;: 72,
    &quot;defaultValue&quot;: 0,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;SpringData&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/FileSystem/DataDirLocater.cpp&quot;,
    &quot;declarationLine&quot;: 34,
    &quot;description&quot;: &quot;List of addidional data-directories, separated by ';' on windows, ':' on other OSs&quot;,
    &quot;readOnly&quot;: 1,
    &quot;defaultValue&quot;: &quot;&quot;,
    &quot;type&quot;: &quot;std::string&quot;
  },
  &quot;StencilBufferBits&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/SpringApp.cpp&quot;,
    &quot;declarationLine&quot;: 86,
    &quot;defaultValue&quot;: 8,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;TCPAllowConnect&quot;: {
    &quot;declarationFile&quot;: &quot;rts/lib/luasocket/src/restrictions.cpp&quot;,
    &quot;declarationLine&quot;: 19,
    &quot;readOnly&quot;: 1,
    &quot;defaultValue&quot;: &quot;&quot;,
    &quot;type&quot;: &quot;std::string&quot;
  },
  &quot;TCPAllowListen&quot;: {
    &quot;declarationFile&quot;: &quot;rts/lib/luasocket/src/restrictions.cpp&quot;,
    &quot;declarationLine&quot;: 20,
    &quot;readOnly&quot;: 1,
    &quot;defaultValue&quot;: &quot;&quot;,
    &quot;type&quot;: &quot;std::string&quot;
  },
  &quot;TWEnabled&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/Camera/TWController.cpp&quot;,
    &quot;declarationLine&quot;: 19,
    &quot;defaultValue&quot;: 1,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;TWFOV&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/Camera/TWController.cpp&quot;,
    &quot;declarationLine&quot;: 20,
    &quot;defaultValue&quot;: 45,
    &quot;type&quot;: &quot;float&quot;
  },
  &quot;TWScrollSpeed&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/Camera/TWController.cpp&quot;,
    &quot;declarationLine&quot;: 18,
    &quot;defaultValue&quot;: 10,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;TeamHighlight&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/GlobalConfig.cpp&quot;,
    &quot;declarationLine&quot;: 54,
    &quot;defaultValue&quot;: 1,
    &quot;minimumValue&quot;: 0,
    &quot;maximumValue&quot;: 2,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;TeamNanoSpray&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Rendering/GlobalRendering.cpp&quot;,
    &quot;declarationLine&quot;: 22,
    &quot;defaultValue&quot;: 1,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;TextureLODBias&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/SpringApp.cpp&quot;,
    &quot;declarationLine&quot;: 90,
    &quot;defaultValue&quot;: 0,
    &quot;type&quot;: &quot;float&quot;
  },
  &quot;TooltipGeometry&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/UI/TooltipConsole.cpp&quot;,
    &quot;declarationLine&quot;: 27,
    &quot;defaultValue&quot;: &quot;0.0 0.0 0.41 0.1&quot;,
    &quot;type&quot;: &quot;std::string&quot;
  },
  &quot;TooltipOutlineFont&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/UI/TooltipConsole.cpp&quot;,
    &quot;declarationLine&quot;: 28,
    &quot;defaultValue&quot;: 1,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;TreeRadius&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Rendering/Env/ITreeDrawer.cpp&quot;,
    &quot;declarationLine&quot;: 18,
    &quot;defaultValue&quot;: 1408,
    &quot;minimumValue&quot;: 0,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;UDPAllowConnect&quot;: {
    &quot;declarationFile&quot;: &quot;rts/lib/luasocket/src/restrictions.cpp&quot;,
    &quot;declarationLine&quot;: 21,
    &quot;readOnly&quot;: 1,
    &quot;defaultValue&quot;: &quot;&quot;,
    &quot;type&quot;: &quot;std::string&quot;
  },
  &quot;UDPAllowListen&quot;: {
    &quot;declarationFile&quot;: &quot;rts/lib/luasocket/src/restrictions.cpp&quot;,
    &quot;declarationLine&quot;: 22,
    &quot;readOnly&quot;: 1,
    &quot;defaultValue&quot;: &quot;&quot;,
    &quot;type&quot;: &quot;std::string&quot;
  },
  &quot;UnitIconDist&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Rendering/UnitDrawer.cpp&quot;,
    &quot;declarationLine&quot;: 72,
    &quot;defaultValue&quot;: 10000,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;UnitLodDist&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Rendering/UnitDrawer.cpp&quot;,
    &quot;declarationLine&quot;: 71,
    &quot;defaultValue&quot;: 1000,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;UnitTransparency&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Rendering/UnitDrawer.cpp&quot;,
    &quot;declarationLine&quot;: 73,
    &quot;defaultValue&quot;: 0.7,
    &quot;type&quot;: &quot;float&quot;
  },
  &quot;UseDistToGroundForIcons&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/Camera/CameraController.cpp&quot;,
    &quot;declarationLine&quot;: 11,
    &quot;defaultValue&quot;: 0.95,
    &quot;type&quot;: &quot;float&quot;
  },
  &quot;UseEFX&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/Sound/EFX.cpp&quot;,
    &quot;declarationLine&quot;: 19,
    &quot;defaultValue&quot;: 1,
    &quot;safemodeValue&quot;: 0,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;UsePBO&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Rendering/GL/PBO.cpp&quot;,
    &quot;declarationLine&quot;: 17,
    &quot;defaultValue&quot;: 1,
    &quot;safemodeValue&quot;: 0,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;VSync&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Rendering/VerticalSync.cpp&quot;,
    &quot;declarationLine&quot;: 17,
    &quot;description&quot;: &quot;Vertical synchronization, update render frames in monitor's refresh rate.\n &lt;=0: off\n 1: enabled \n x: render with monitor-Hz/x FPS&quot;,
    &quot;defaultValue&quot;: 0,
    &quot;minimumValue&quot;: 0,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;WhiteListAdditionalPlayers&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/GameServer.cpp&quot;,
    &quot;declarationLine&quot;: 74,
    &quot;defaultValue&quot;: 1,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;WindowBorderless&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/SpringApp.cpp&quot;,
    &quot;declarationLine&quot;: 106,
    &quot;defaultValue&quot;: 0,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;WindowPosX&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/SpringApp.cpp&quot;,
    &quot;declarationLine&quot;: 103,
    &quot;defaultValue&quot;: 32,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;WindowPosY&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/SpringApp.cpp&quot;,
    &quot;declarationLine&quot;: 104,
    &quot;defaultValue&quot;: 32,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;WindowState&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/SpringApp.cpp&quot;,
    &quot;declarationLine&quot;: 105,
    &quot;defaultValue&quot;: 0,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;WindowedEdgeMove&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Game/Game.cpp&quot;,
    &quot;declarationLine&quot;: 173,
    &quot;defaultValue&quot;: 1,
    &quot;type&quot;: &quot;bool&quot;
  },
  &quot;XResolution&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/SpringApp.cpp&quot;,
    &quot;declarationLine&quot;: 101,
    &quot;defaultValue&quot;: 0,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;YResolution&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/SpringApp.cpp&quot;,
    &quot;declarationLine&quot;: 102,
    &quot;defaultValue&quot;: 0,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;address&quot;: {
    &quot;declarationFile&quot;: &quot;rts/Menu/SelectMenu.cpp&quot;,
    &quot;declarationLine&quot;: 45,
    &quot;defaultValue&quot;: &quot;&quot;,
    &quot;type&quot;: &quot;std::string&quot;
  },
  &quot;name&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/SpringApp.cpp&quot;,
    &quot;declarationLine&quot;: 108,
    &quot;defaultValue&quot;: &quot;UnnamedPlayer&quot;,
    &quot;type&quot;: &quot;std::string&quot;
  },
  &quot;snd_airAbsorption&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/Sound/EFX.cpp&quot;,
    &quot;declarationLine&quot;: 18,
    &quot;defaultValue&quot;: 0.1,
    &quot;type&quot;: &quot;float&quot;
  },
  &quot;snd_device&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/Sound/Sound.cpp&quot;,
    &quot;declarationLine&quot;: 42,
    &quot;defaultValue&quot;: &quot;&quot;,
    &quot;type&quot;: &quot;std::string&quot;
  },
  &quot;snd_volbattle&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/Sound/Sound.cpp&quot;,
    &quot;declarationLine&quot;: 39,
    &quot;defaultValue&quot;: 100,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;snd_volgeneral&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/Sound/Sound.cpp&quot;,
    &quot;declarationLine&quot;: 37,
    &quot;defaultValue&quot;: 100,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;snd_volmaster&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/Sound/Sound.cpp&quot;,
    &quot;declarationLine&quot;: 36,
    &quot;defaultValue&quot;: 60,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;snd_volmusic&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/Sound/Sound.cpp&quot;,
    &quot;declarationLine&quot;: 41,
    &quot;defaultValue&quot;: 100,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;snd_volui&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/Sound/Sound.cpp&quot;,
    &quot;declarationLine&quot;: 40,
    &quot;defaultValue&quot;: 100,
    &quot;type&quot;: &quot;int&quot;
  },
  &quot;snd_volunitreply&quot;: {
    &quot;declarationFile&quot;: &quot;rts/System/Sound/Sound.cpp&quot;,
    &quot;declarationLine&quot;: 38,
    &quot;defaultValue&quot;: 100,
    &quot;type&quot;: &quot;int&quot;
  }
}</text>
      <sha1>5750zympcvti7z0vrr23jgczs13cma6</sha1>
    </revision>
  </page>
  <page>
    <title>Springsettings.cfg</title>
    <ns>0</ns>
    <id>3441</id>
    <revision>
      <id>30587</id>
      <parentid>30209</parentid>
      <timestamp>2017-12-26T00:10:58Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>104.0</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="48657">__NOTOC__
[[Category:Help]]
=Springsettings.cfg=

springsettings.cfg is the configuration file of the Spring Engine.

Below is a comprehensive list of all the values available. This page is an attempt to thoroughly document them all. 

Such list can be created by starting Spring with &lt;code&gt;--list-config-vars&lt;/code&gt; as commandline parameter. For example on windows:
&lt;code&gt;spring.exe --list-config-vars &gt; cfgdoc.txt&lt;/code&gt;

A setting can be changed by starting spring (.exe) without parameters and clicking edit settings. Some changes require spring to be restarted.

==Location==
===99.0+===
The (non-default) contents of the config are now printed in users' [[infolog.txt]]. 
Deprecated locations are no longer read from, as follows:

* Windows: &lt;code&gt;AppData\Local\springsettings.cfg&lt;/code&gt;
* Linux/MacOSX: &lt;code&gt;~/.config/spring/springsettings.cfg&lt;/code&gt;

===95.0+===
On Windows it's &lt;code&gt;../My Documents/My Games/Spring/springsettings.cfg&lt;/code&gt;,
and on Linux/MacOSX it's &lt;code&gt;~/.config/spring/springsettings.cfg&lt;/code&gt;

===&lt; 95.0===
On Windows it's &lt;code&gt;%APPDATA%\Local\springsettings.cfg&lt;/code&gt;,
and on Linux/MacOSX it has a different name and is &lt;code&gt;~/.springrc&lt;/code&gt;

==Portable Mode==
If spring detects &lt;code&gt;springsettings.cfg&lt;/code&gt; next to spring.exe it runs in portable mode (meaning it writes config settings / infolog.txt / etc in the same directory where spring.exe exists).

=Safemode=
Spring supports a safemode, which can be enabled with &lt;code&gt;spring --safemode&lt;/code&gt;. There is a startmenu link to it and some lobbies got an option for it, too.
But it's not meant for regular gaming, it's just a debugmode to find out if runtime problems are caused by incorrect settings. So you can try it and discuss it with devs for further help.

=Available Options=
{{HeaderNotice|(last update: 104.0)}}
&lt;center&gt;&lt;span class=warning&gt;'''THIS SECTION IS AUTOMATICALLY GENERATED! DON'T EDIT IT!'''&lt;/span&gt;&lt;/center&gt;
{{ConfigValue |name=3DTrees|type=bool|defvalue=true|safevalue=false |description=Defines whether or not the trees generated by the engine (Default trees) will be shown as 3d or as cross sectioned ( + ) flat sides. }}
{{ConfigValue |name=AdvMapShading|type=bool|defvalue=true|safevalue=false |description=Enable shaders for terrain rendering. }}
{{ConfigValue |name=AdvSky|type=bool|defvalue=false|safevalue= |description=Enables High Resolution Clouds. }}
{{ConfigValue |name=AdvUnitShading|type=bool|defvalue=true|safevalue=false |description=Determines whether specular highlights and other lighting effects are rendered for units. }}
{{ConfigValue |name=AllowDeferredMapRendering|type=bool|defvalue=false|safevalue=false |description=[https://github.com/spring/spring/blob/develop/rts/Map/SMF/SMFGroundDrawer.cpp#L44 source pos] }}
{{ConfigValue |name=AllowDeferredModelBufferClear|type=bool|defvalue=false|safevalue=false |description=[https://github.com/spring/spring/blob/develop/rts/Rendering/LuaObjectDrawer.cpp#L28 source pos] }}
{{ConfigValue |name=AllowDeferredModelRendering|type=bool|defvalue=false|safevalue=false |description=[https://github.com/spring/spring/blob/develop/rts/Rendering/LuaObjectDrawer.cpp#L27 source pos] }}
{{ConfigValue |name=AllowSpectatorJoin|type=bool|defvalue=true|safevalue= |description=allow any unauthenticated clients to join as spectator with any name, {{taglink|name}} will be prefixed with ~ }}
{{ConfigValue |name=AtiHacks|type=int|defvalue=-1|minvalue=-1|maxvalue=1|safevalue= |description=Enables graphics drivers workarounds for users with ATI video cards.
 -1:=runtime detect, 0:=off, 1:=on }}
{{ConfigValue |name=AtiSwapRBFix|type=bool|defvalue=false|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Rendering/GL/FBO.cpp#L16 source pos] }}
{{ConfigValue |name=AutoAddBuiltUnitsToFactoryGroup|type=bool|defvalue=false|safevalue= |description=Controls whether or not units built by factories will inherit that factory's unit group. }}
{{ConfigValue |name=AutoAddBuiltUnitsToSelectedGroup|type=bool|defvalue=false|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/SelectedUnitsHandler.cpp#L49 source pos] }}
{{ConfigValue |name=AutohostIP|type=string|defvalue=&quot;127.0.0.1&quot;|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Net/GameServer.cpp#L76 source pos] }}
{{ConfigValue |name=AutohostPort|type=int|defvalue=0|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Net/GameServer.cpp#L67 source pos] }}
{{ConfigValue |name=BlockCompositing|type=bool|defvalue=false|safevalue=true |description=Disables kwin compositing to fix tearing, possible fixes low FPS in windowed mode, too. }}
{{ConfigValue |name=BuildIconsFirst|type=bool|defvalue=false|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/SelectedUnitsHandler.cpp#L47 source pos] }}
{{ConfigValue |name=BumpWaterAnisotropy|type=float|defvalue=0|minvalue=0|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Rendering/Env/BumpWater.cpp#L46 source pos] }}
{{ConfigValue |name=BumpWaterBlurReflection|type=bool|defvalue=false|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Rendering/Env/BumpWater.cpp#L49 source pos] }}
{{ConfigValue |name=BumpWaterDepthBits|type=int|defvalue=24|minvalue=16|maxvalue=32|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Rendering/Env/BumpWater.cpp#L48 source pos] }}
{{ConfigValue |name=BumpWaterDynamicWaves|type=bool|defvalue=true|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Rendering/Env/BumpWater.cpp#L52 source pos] }}
{{ConfigValue |name=BumpWaterEndlessOcean|type=bool|defvalue=true|safevalue= |description=Sets whether Bumpmapped water will be drawn beyond the map edge. }}
{{ConfigValue |name=BumpWaterOcclusionQuery|type=bool|defvalue=false|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Rendering/Env/BumpWater.cpp#L54 source pos] }}
{{ConfigValue |name=BumpWaterReflection|type=int|defvalue=1|minvalue=0|maxvalue=2|safevalue= |description=Determines the amount of objects reflected in Bumpmapped water.
0:=off, 1:=fast (skip terrain), 2:=full }}
{{ConfigValue |name=BumpWaterRefraction|type=int|defvalue=1|minvalue=0|maxvalue=1|safevalue= |description=Determines the method of refraction with Bumpmapped water.
0:=off, 1:=screencopy, 2:=own rendering cycle (disabled) }}
{{ConfigValue |name=BumpWaterShoreWaves|type=bool|defvalue=true|safevalue=false |description=Enables rendering of shorewaves. }}
{{ConfigValue |name=BumpWaterTexSizeReflection|type=int|defvalue=512|minvalue=32|safevalue= |description=Sets the size of the framebuffer texture used to store the reflection in Bumpmapped water. }}
{{ConfigValue |name=BumpWaterUseDepthTexture|type=bool|defvalue=true|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Rendering/Env/BumpWater.cpp#L47 source pos] }}
{{ConfigValue |name=BumpWaterUseUniforms|type=bool|defvalue=false|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Rendering/Env/BumpWater.cpp#L53 source pos] }}
{{ConfigValue |name=CamFreeAngVelTime|type=float|defvalue=1|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/Camera/FreeController.cpp#L29 source pos] }}
{{ConfigValue |name=CamFreeAutoTilt|type=float|defvalue=150|safevalue= |description=When free camera is locked, AutoTilt will point the camera in the direction of the ground's slope }}
{{ConfigValue |name=CamFreeEnabled|type=bool|defvalue=false|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/Camera/FreeController.cpp#L18 source pos] }}
{{ConfigValue |name=CamFreeFOV|type=float|defvalue=45|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/Camera/FreeController.cpp#L21 source pos] }}
{{ConfigValue |name=CamFreeGoForward|type=bool|defvalue=false|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/Camera/FreeController.cpp#L20 source pos] }}
{{ConfigValue |name=CamFreeGravity|type=float|defvalue=-500|safevalue= |description=When free camera is locked, Gravity will be used if you jump off of a ground ramp. }}
{{ConfigValue |name=CamFreeGroundOffset|type=float|defvalue=16|safevalue= |description=Determines ground handling for the free camera.
0 - the camera can move anywhere,
&lt; 0 - the camera is always offset from the ground height by -CamFreeGroundOffset
&gt; 0 - the camera can be &quot;locked&quot; to the ground by using SHIFT UP_ARROW. (and will use CamFreeGroundOffset as the offset). To release the lock, simply press SHIFT DOWN_ARROW. }}
{{ConfigValue |name=CamFreeInvertAlt|type=bool|defvalue=false|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/Camera/FreeController.cpp#L19 source pos] }}
{{ConfigValue |name=CamFreeScrollSpeed|type=float|defvalue=500|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/Camera/FreeController.cpp#L22 source pos] }}
{{ConfigValue |name=CamFreeSlide|type=float|defvalue=0.5|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/Camera/FreeController.cpp#L24 source pos] }}
{{ConfigValue |name=CamFreeTiltSpeed|type=float|defvalue=150|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/Camera/FreeController.cpp#L26 source pos] }}
{{ConfigValue |name=CamFreeVelTime|type=float|defvalue=1.5|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/Camera/FreeController.cpp#L28 source pos] }}
{{ConfigValue |name=CamMode|type=int|defvalue=2|minvalue=0|maxvalue=5|safevalue= |description=Defines the used camera. Options are:
0 = FPS
1 = Overhead
2 = Spring
3 = RotOverhead
4 = Free
5 = Overview }}
{{ConfigValue |name=CamModeName|type=string|defvalue=&quot;&quot;|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/CameraHandler.cpp#L35 source pos] }}
{{ConfigValue |name=CamSpringEdgeRotate|type=bool|defvalue=false|safevalue= |description=Rotate camera when cursor touches screen borders. }}
{{ConfigValue |name=CamSpringEnabled|type=bool|defvalue=true|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/Camera/SpringController.cpp#L18 source pos] }}
{{ConfigValue |name=CamSpringFOV|type=float|defvalue=45|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/Camera/SpringController.cpp#L20 source pos] }}
{{ConfigValue |name=CamSpringLockCardinalDirections|type=bool|defvalue=true|safevalue= |description=Whether cardinal directions should be `locked` for a short time when rotating. }}
{{ConfigValue |name=CamSpringScrollSpeed|type=int|defvalue=10|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/Camera/SpringController.cpp#L19 source pos] }}
{{ConfigValue |name=CamSpringZoomInToMousePos|type=bool|defvalue=true|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/Camera/SpringController.cpp#L22 source pos] }}
{{ConfigValue |name=CamSpringZoomOutFromMousePos|type=bool|defvalue=false|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/Camera/SpringController.cpp#L23 source pos] }}
{{ConfigValue |name=CamTimeExponent|type=float|defvalue=4|minvalue=0|safevalue= |description=Camera transitions happen at lerp(old, new, timeNorm ^ CamTimeExponent). }}
{{ConfigValue |name=CamTimeFactor|type=float|defvalue=1|minvalue=0|safevalue= |description=Scales the speed of camera transitions, e.g. zooming or position change. }}
{{ConfigValue |name=ColorElev|type=bool|defvalue=true|safevalue= |description=If heightmap (default hotkey [F1]) should be colored or not. }}
{{ConfigValue |name=CompressTextures|type=bool|defvalue=false|safevalue=true |description=Runtime compress most textures to save VideoRAM. }}
{{ConfigValue |name=CrossAlpha|type=float|defvalue=0.5|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/UI/MouseHandler.cpp#L63 source pos] }}
{{ConfigValue |name=CrossMoveScale|type=float|defvalue=1|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/UI/MouseHandler.cpp#L64 source pos] }}
{{ConfigValue |name=CrossSize|type=float|defvalue=12|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/UI/MouseHandler.cpp#L62 source pos] }}
{{ConfigValue |name=CubeTexSizeReflection|type=int|defvalue=128|minvalue=1|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Rendering/Env/CubeMapHandler.cpp#L18 source pos] }}
{{ConfigValue |name=CubeTexSizeSpecular|type=int|defvalue=128|minvalue=1|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Rendering/Env/CubeMapHandler.cpp#L17 source pos] }}
{{ConfigValue |name=DebugGL|type=bool|defvalue=false|safevalue= |description=Enables GL debug-context and output. (see GL_ARB_debug_output) }}
{{ConfigValue |name=DebugGLStacktraces|type=bool|defvalue=false|safevalue= |description=Create a stacktrace when an OpenGL error occurs }}
{{ConfigValue |name=DefaultLuaMenu|type=string|defvalue=&quot;&quot;|safevalue= |description=Sets the default menu to be used when spring is started. }}
{{ConfigValue |name=DefaultStartScript|type=string|defvalue=&quot;&quot;|safevalue= |description=file{{taglink|name}} of script.txt to use when no command line parameters are specified. }}
{{ConfigValue |name=DemoFromDemo|type=bool|defvalue=false|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/PreGame.cpp#L61 source pos] }}
{{ConfigValue |name=DisableDemoVersionCheck|type=bool|defvalue=false|safevalue= |description=Allow to play every replay file (may crash / cause undefined behaviour in replays) }}
{{ConfigValue |name=DoubleClickTime|type=float|defvalue=200|safevalue= |description=Double click time in milliseconds. }}
{{ConfigValue |name=DualScreenMiniMapOnLeft|type=bool|defvalue=false|safevalue= |description=When set, will make the left half of the screen the minimap when {{taglink|DualScreenMode}} is set. }}
{{ConfigValue |name=DualScreenMode|type=bool|defvalue=false|safevalue= |description=Sets whether to split the screen in half, with one half for minimap and one for main screen. Right side is for minimap unless {{taglink|DualScreenMiniMapOnLeft}} is set. }}
{{ConfigValue |name=DynamicSky|type=bool|defvalue=false|safevalue= |description=Sets whether the clouds in the sky will be procedurally generated and moved. Resource heavy! }}
{{ConfigValue |name=EdgeMoveDynamic|type=bool|defvalue=true|safevalue= |description=If EdgeMove scrolling speed should fade with edge distance. }}
{{ConfigValue |name=EdgeMoveWidth|type=float|defvalue=0.02|minvalue=0|safevalue= |description=The width (in percent of screen size) of the EdgeMove scrolling area. }}
{{ConfigValue |name=EnableDrawCallIns|type=bool|defvalue=true|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/System/GlobalConfig.cpp#L61 source pos] }}
{{ConfigValue |name=ExtraTextureUpdateRate|type=int|defvalue=45|safevalue= |description=EXTREME CPU-HEAVY ON MEDIUM/BIG MAPS! DON'T CHANGE DEFAULT! }}
{{ConfigValue |name=FPSClampPos|type=bool|defvalue=true|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/Camera/FPSController.cpp#L21 source pos] }}
{{ConfigValue |name=FPSEnabled|type=bool|defvalue=true|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/Camera/FPSController.cpp#L19 source pos] }}
{{ConfigValue |name=FPSFOV|type=float|defvalue=45|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/Camera/FPSController.cpp#L20 source pos] }}
{{ConfigValue |name=FPSMouseScale|type=float|defvalue=0.01|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/Camera/FPSController.cpp#L18 source pos] }}
{{ConfigValue |name=FPSScrollSpeed|type=int|defvalue=10|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/Camera/FPSController.cpp#L17 source pos] }}
{{ConfigValue |name=FSAALevel|type=int|defvalue=0|minvalue=0|maxvalue=32|safevalue= |description=Deprecated, set {{taglink|MSAALevel}} instead. }}
{{ConfigValue |name=FeatureDrawDistance|type=float|defvalue=6000|minvalue=0|safevalue= |description=Maximum distance at which features will be drawn. }}
{{ConfigValue |name=FeatureFadeDistance|type=float|defvalue=4500|minvalue=0|safevalue= |description=Distance at which features will begin to fade from view. }}
{{ConfigValue |name=FontFile|type=string|defvalue=&quot;fonts/FreeSansBold.otf&quot;|safevalue= |description=Sets the font of Spring engine text. }}
{{ConfigValue |name=FontOutlineWeight|type=float|defvalue=25|safevalue= |description=Sets the opacity of Spring engine text, such as the title screen version number, clock, and basic UI. Does not affect LuaUI elements. }}
{{ConfigValue |name=FontOutlineWidth|type=int|defvalue=3|safevalue= |description=Sets the width of the black outline around Spring engine text, such as the title screen version number, clock, and basic UI. Does not affect LuaUI elements. }}
{{ConfigValue |name=FontSize|type=int|defvalue=23|safevalue= |description=Sets the font size (in pixels) of the MainMenu and more. }}
{{ConfigValue |name=ForceCoreContext|type=int|defvalue=0|minvalue=0|maxvalue=1|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Rendering/GlobalRendering.cpp#L38 source pos] }}
{{ConfigValue |name=ForceDisableClipCtrl|type=int|defvalue=0|minvalue=0|maxvalue=1|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Rendering/GlobalRendering.cpp#L37 source pos] }}
{{ConfigValue |name=ForceDisableShaders|type=int|defvalue=0|minvalue=0|maxvalue=1|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Rendering/GlobalRendering.cpp#L36 source pos] }}
{{ConfigValue |name=ForceSwapBuffers|type=int|defvalue=1|minvalue=0|maxvalue=1|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Rendering/GlobalRendering.cpp#L39 source pos] }}
{{ConfigValue |name=Fullscreen|type=bool|defvalue=true|safevalue= |description=Sets whether the game will run in fullscreen, as opposed to a window. For Windowed Fullscreen of Borderless Window, set this to 0, {{taglink|WindowBorderless}} to 1, and {{taglink|WindowPosX}} and {{taglink|WindowPosY}} to 0. }}
{{ConfigValue |name=FullscreenEdgeMove|type=bool|defvalue=true|safevalue= |description=see {{taglink|WindowedEdgeMove}}, just for fullscreen mode }}
{{ConfigValue |name=GLContextMajorVersion|type=int|defvalue=3|minvalue=3|maxvalue=4|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Rendering/GlobalRendering.cpp#L31 source pos] }}
{{ConfigValue |name=GLContextMinorVersion|type=int|defvalue=0|minvalue=0|maxvalue=5|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Rendering/GlobalRendering.cpp#L32 source pos] }}
{{ConfigValue |name=GameEndOnConnectionLoss|type=bool|defvalue=true|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/Game.cpp#L129 source pos] }}
{{ConfigValue |name=GrassDetail|type=int|defvalue=7|minvalue=0|safevalue= |description=Sets how detailed the engine rendered grass will be on any given map. }}
{{ConfigValue |name=GroundDecals|type=int|defvalue=3|safevalue= |description=Controls whether ground decals underneath buildings and ground scars from explosions will be rendered. Values &gt;1 define how long such decals will stay. }}
{{ConfigValue |name=GroundDecalsParallaxMapping|type=bool|defvalue=true|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Rendering/Env/Decals/DecalsDrawerGL4.cpp#L45 source pos] }}
{{ConfigValue |name=GroundDetail|type=int|defvalue=60|minvalue=4|maxvalue=200|safevalue= |description=Controls how detailed the map geometry will be. On lowered settings, cliffs may appear to be jagged or &quot;melting&quot;. }}
{{ConfigValue |name=GroundLODScaleReflection|type=float|defvalue=1|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Map/BaseGroundDrawer.cpp#L7 source pos] }}
{{ConfigValue |name=GroundLODScaleRefraction|type=float|defvalue=1|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Map/BaseGroundDrawer.cpp#L8 source pos] }}
{{ConfigValue |name=GroundLODScaleTerrainReflection|type=float|defvalue=1|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Map/BaseGroundDrawer.cpp#L9 source pos] }}
{{ConfigValue |name=GroundNormalTextureHighPrecision|type=bool|defvalue=false|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Map/SMF/SMFReadMap.cpp#L32 source pos] }}
{{ConfigValue |name=GroundScarAlphaFade|type=int|defvalue=0|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Rendering/Env/Decals/GroundDecalHandler.cpp#L55 source pos] }}
{{ConfigValue |name=GuiOpacity|type=float|defvalue=0.8|minvalue=0|maxvalue=1|safevalue= |description=Sets the opacity of the built-in Spring UI. Generally has no effect on LuaUI widgets. Can be set in-game using shift+, to decrease and shift+. to increase. }}
{{ConfigValue |name=HangTimeout|type=int|defvalue=10|minvalue=-1|maxvalue=600|safevalue= |description=Number of seconds that, if spent in the same code segment, indicate a hang; -1 to disable. }}
{{ConfigValue |name=HardwareCursor|type=bool|defvalue=false|safevalue= |description=Sets hardware mouse cursor rendering. If you have a low framerate, your mouse cursor will seem &quot;laggy&quot;. Setting hardware cursor will render the mouse cursor separately from spring and the mouse will behave normally. Note, not all GPU drivers support it in fullscreen mode! }}
{{ConfigValue |name=HeightMapTexture|type=bool|defvalue=true|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Map/HeightMapTexture.cpp#L12 source pos] }}
{{ConfigValue |name=HighResInfoTexture|type=bool|defvalue=true|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Rendering/Map/InfoTexture/Modern/Combiner.cpp#L14 source pos] }}
{{ConfigValue |name=HighResLos|type=bool|defvalue=false|safevalue= |description=Controls whether LOS (&quot;L view&quot;) edges are rendered in high resolution. Resource heavy! }}
{{ConfigValue |name=HostIPDefault|type=string|defvalue=&quot;localhost&quot;|safevalue= |description=Default IP to use for hosting if not specified in script.txt }}
{{ConfigValue |name=HostPortDefault|type=int|defvalue=8452|minvalue=0|maxvalue=65535|safevalue= |description=Default Port to use for hosting if not specified in script.txt }}
{{ConfigValue |name=InfoConsoleGeometry|type=string|defvalue=&quot;0.26 0.96 0.41 0.205&quot;|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/UI/InfoConsole.cpp#L16 source pos] }}
{{ConfigValue |name=InfoMessageTime|type=int|defvalue=10|safevalue= |description=Timeout till old messages disappear from the ingame console. }}
{{ConfigValue |name=InitialNetworkTimeout|type=int|defvalue=30|minvalue=10|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/System/GlobalConfig.cpp#L14 source pos] }}
{{ConfigValue |name=InputTextGeo|type=string|defvalue=&quot;&quot;|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/Game.cpp#L137 source pos] }}
{{ConfigValue |name=InvertMouse|type=bool|defvalue=false|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/UI/MouseHandler.cpp#L54 source pos] }}
{{ConfigValue |name=InvertQueueKey|type=bool|defvalue=false|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/UI/GuiHandler.cpp#L60 source pos] }}
{{ConfigValue |name=JoystickEnabled|type=bool|defvalue=true|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/System/Input/Joystick.cpp#L13 source pos] }}
{{ConfigValue |name=JoystickUse|type=int|defvalue=0|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/System/Input/Joystick.cpp#L14 source pos] }}
{{ConfigValue |name=KeyChainTimeout|type=int|defvalue=750|minvalue=0|safevalue= |description=Timeout in milliseconds waiting for a key chain shortcut. }}
{{ConfigValue |name=LODScale|type=float|defvalue=1|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Rendering/LuaObjectDrawer.cpp#L30 source pos] }}
{{ConfigValue |name=LODScaleReflection|type=float|defvalue=1|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Rendering/LuaObjectDrawer.cpp#L32 source pos] }}
{{ConfigValue |name=LODScaleRefraction|type=float|defvalue=1|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Rendering/LuaObjectDrawer.cpp#L33 source pos] }}
{{ConfigValue |name=LODScaleShadow|type=float|defvalue=1|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Rendering/LuaObjectDrawer.cpp#L31 source pos] }}
{{ConfigValue |name=LastSelectedMap|type=string|defvalue=&quot;No map selected&quot;|safevalue= |description=Stores the previously played map. }}
{{ConfigValue |name=LastSelectedMod|type=string|defvalue=&quot;No game selected&quot;|safevalue= |description=Stores the previously played game. }}
{{ConfigValue |name=LastSelectedScript|type=string|defvalue=&quot;No script selected&quot;|safevalue= |description=Stores the previously played AI. }}
{{ConfigValue |name=LastSelectedSetting|type=string|defvalue=&quot;&quot;|safevalue= |description=Stores the previously selected setting, when editing settings within the Spring main menu. }}
{{ConfigValue |name=LinkIncomingMaxPacketRate|type=int|defvalue=64|minvalue=0|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/System/GlobalConfig.cpp#L42 source pos] }}
{{ConfigValue |name=LinkIncomingMaxWaitingPackets|type=int|defvalue=512|minvalue=0|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/System/GlobalConfig.cpp#L48 source pos] }}
{{ConfigValue |name=LinkIncomingPeakBandwidth|type=int|defvalue=32768|minvalue=0|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/System/GlobalConfig.cpp#L38 source pos] }}
{{ConfigValue |name=LinkIncomingSustainedBandwidth|type=int|defvalue=2048|minvalue=0|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/System/GlobalConfig.cpp#L34 source pos] }}
{{ConfigValue |name=LinkOutgoingBandwidth|type=int|defvalue=65536|minvalue=0|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/System/GlobalConfig.cpp#L30 source pos] }}
{{ConfigValue |name=LoadingMT|type=int|defvalue=0|safevalue=0 |description=[https://github.com/spring/spring/blob/develop/rts/Game/LoadScreen.cpp#L43 source pos] }}
{{ConfigValue |name=LogClientData|type=bool|defvalue=false|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Net/NetCommands.cpp#L40 source pos] }}
{{ConfigValue |name=LogFlushLevel|type=int|defvalue=50|safevalue= |description=Flush the logfile when a message's level exceeds this value. ERROR is flushed by default, WARNING is not. }}
{{ConfigValue |name=LogRepeatLimit|type=int|defvalue=10|safevalue= |description=Allow at most this many consecutive identical messages to be logged. }}
{{ConfigValue |name=LogSections|type=string|defvalue=&quot;&quot;|safevalue= |description=Comma-separated list of enabled logsections, see infolog.txt / console output for possible values. }}
{{ConfigValue |name=LuaShaders|type=bool|defvalue=true|safevalue=false |description=[https://github.com/spring/spring/blob/develop/rts/Lua/LuaOpenGL.cpp#L80 source pos] }}
{{ConfigValue |name=LuaSocketEnabled|type=bool|defvalue=true|safevalue= |description=Enable LuaSocket support, allows a lua-widget to make TCP/UDP Connections }}
{{ConfigValue |name=LuaWritableConfigFile|type=bool|defvalue=true|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/System/GlobalConfig.cpp#L59 source pos] }}
{{ConfigValue |name=MSAALevel|type=int|defvalue=0|minvalue=0|maxvalue=32|safevalue= |description=Enables multisample anti-aliasing; 'level' is the number of samples used. }}
{{ConfigValue |name=MapBorder|type=bool|defvalue=true|safevalue= |description=Draws a solid border at the edges of the map. }}
{{ConfigValue |name=MaxDynamicMapLights|type=int|defvalue=1|minvalue=0|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Map/SMF/SMFGroundDrawer.cpp#L39 source pos] }}
{{ConfigValue |name=MaxDynamicModelLights|type=int|defvalue=1|minvalue=0|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Rendering/UnitDrawer.cpp#L56 source pos] }}
{{ConfigValue |name=MaxLuaGarbageCollectionTime|type=float|defvalue=5|minvalue=1|safevalue= |description=in MilliSecs }}
{{ConfigValue |name=MaxNanoParticles|type=int|defvalue=2000|minvalue=1|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Sim/Projectiles/ProjectileHandler.cpp#L42 source pos] }}
{{ConfigValue |name=MaxParticles|type=int|defvalue=10000|minvalue=1|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Sim/Projectiles/ProjectileHandler.cpp#L41 source pos] }}
{{ConfigValue |name=MaxPathCostsMemoryFootPrint|type=int|defvalue=512|minvalue=64|safevalue= |description=Maximum memusage (in MByte) of multithreaded pathcache generator at loading time. }}
{{ConfigValue |name=MaxSounds|type=int|defvalue=128|minvalue=1|safevalue= |description=Maximum parallel played sounds. }}
{{ConfigValue |name=MaximumTransmissionUnit|type=int|defvalue=1400|minvalue=400|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/System/GlobalConfig.cpp#L26 source pos] }}
{{ConfigValue |name=MenuArchive|type=string|defvalue=&quot;Spring Bitmaps&quot;|safevalue= |description=Archive {{taglink|name}} for the default Menu. }}
{{ConfigValue |name=MetalMapPalette|type=bool|defvalue=false|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Map/MetalMap.cpp#L11 source pos] }}
{{ConfigValue |name=MiddleClickScrollSpeed|type=float|defvalue=0.01|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/Camera/OverheadController.cpp#L18 source pos] }}
{{ConfigValue |name=MiniMapButtonSize|type=int|defvalue=16|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/UI/MiniMap.cpp#L47 source pos] }}
{{ConfigValue |name=MiniMapCursorScale|type=float|defvalue=-0.5|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/UI/MiniMap.cpp#L54 source pos] }}
{{ConfigValue |name=MiniMapDrawCommands|type=int|defvalue=1|minvalue=0|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/UI/MiniMap.cpp#L57 source pos] }}
{{ConfigValue |name=MiniMapDrawProjectiles|type=bool|defvalue=true|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/UI/MiniMap.cpp#L59 source pos] }}
{{ConfigValue |name=MiniMapFullProxy|type=bool|defvalue=true|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/UI/MiniMap.cpp#L46 source pos] }}
{{ConfigValue |name=MiniMapGeometry|type=string|defvalue=&quot;2 2 200 200&quot;|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/UI/MiniMap.cpp#L45 source pos] }}
{{ConfigValue |name=MiniMapIcons|type=bool|defvalue=true|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/UI/MiniMap.cpp#L55 source pos] }}
{{ConfigValue |name=MiniMapMarker|type=bool|defvalue=true|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/UI/GuiHandler.cpp#L59 source pos] }}
{{ConfigValue |name=MiniMapRefreshRate|type=int|defvalue=0|minvalue=0|safevalue= |description=The refresh rate of the async MiniMap texture. Needs {{taglink|MiniMapRenderToTexture}} to be true. Value of &quot;0&quot; autoselects between 10-60FPS. }}
{{ConfigValue |name=MiniMapRenderToTexture|type=bool|defvalue=true|safevalue=false |description=Asynchronous render MiniMap to a texture independent of screen FPS. }}
{{ConfigValue |name=MiniMapUnitExp|type=float|defvalue=0.25|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/UI/MiniMap.cpp#L53 source pos] }}
{{ConfigValue |name=MiniMapUnitSize|type=float|defvalue=2.5|minvalue=0|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/UI/MiniMap.cpp#L49 source pos] }}
{{ConfigValue |name=MinimizeOnFocusLoss|type=int|defvalue=0|minvalue=0|maxvalue=1|safevalue= |description=When set to 1 minimize Window if it loses key focus when in fullscreen mode. }}
{{ConfigValue |name=MouseDragScrollThreshold|type=float|defvalue=0.3|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/UI/MouseHandler.cpp#L65 source pos] }}
{{ConfigValue |name=NetworkLossFactor|type=int|defvalue=0|minvalue=0|maxvalue=2|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/System/GlobalConfig.cpp#L9 source pos] }}
{{ConfigValue |name=NetworkTimeout|type=int|defvalue=120|minvalue=0|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/System/GlobalConfig.cpp#L18 source pos] }}
{{ConfigValue |name=NoHelperAIs|type=bool|defvalue=false|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/System/StartScriptGen.cpp#L12 source pos] }}
{{ConfigValue |name=OverheadEnabled|type=bool|defvalue=true|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/Camera/OverheadController.cpp#L21 source pos] }}
{{ConfigValue |name=OverheadFOV|type=float|defvalue=45|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/Camera/OverheadController.cpp#L22 source pos] }}
{{ConfigValue |name=OverheadMaxHeightFactor|type=float|defvalue=1|safevalue= |description=float multiplier for maximum overhead camera height }}
{{ConfigValue |name=OverheadScrollSpeed|type=int|defvalue=10|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/Camera/OverheadController.cpp#L19 source pos] }}
{{ConfigValue |name=OverheadTiltSpeed|type=float|defvalue=1|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/Camera/OverheadController.cpp#L20 source pos] }}
{{ConfigValue |name=PathingThreadCount|type=int|defvalue=0|minvalue=0|safevalue=1 |description=[https://github.com/spring/spring/blob/develop/rts/System/SpringApp.cpp#L97 source pos] }}
{{ConfigValue |name=PitchAdjust|type=bool|defvalue=false|safevalue= |description=When enabled adjust sound speed/pitch to game speed. }}
{{ConfigValue |name=ROAM|type=int|defvalue=1|minvalue=0|maxvalue=3|safevalue=2 |description=Use ROAM for terrain mesh rendering: 0 to disable, {1=VBO,2=DL,3=VA}-mode to enable. }}
{{ConfigValue |name=ReconnectTimeout|type=int|defvalue=15|minvalue=0|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/System/GlobalConfig.cpp#L22 source pos] }}
{{ConfigValue |name=RotOverheadEnabled|type=bool|defvalue=true|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/Camera/RotOverheadController.cpp#L15 source pos] }}
{{ConfigValue |name=RotOverheadFOV|type=float|defvalue=45|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/Camera/RotOverheadController.cpp#L16 source pos] }}
{{ConfigValue |name=RotOverheadMouseScale|type=float|defvalue=0.01|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/Camera/RotOverheadController.cpp#L13 source pos] }}
{{ConfigValue |name=RotOverheadScrollSpeed|type=int|defvalue=10|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/Camera/RotOverheadController.cpp#L14 source pos] }}
{{ConfigValue |name=RotateLogFiles|type=bool|defvalue=false|safevalue= |description=Rotate logfiles, old logfiles will be moved into the subfolder &quot;log&quot;. }}
{{ConfigValue |name=SMFTexAniso|type=float|defvalue=4|minvalue=0|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Map/SMF/SMFReadMap.cpp#L33 source pos] }}
{{ConfigValue |name=SSMFTexAniso|type=float|defvalue=4|minvalue=0|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Map/SMF/SMFReadMap.cpp#L34 source pos] }}
{{ConfigValue |name=ScreenshotCounter|type=int|defvalue=0|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Rendering/Screenshot.cpp#L19 source pos] }}
{{ConfigValue |name=ScrollWheelSpeed|type=float|defvalue=25|minvalue=-255|maxvalue=255|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/UI/MouseHandler.cpp#L57 source pos] }}
{{ConfigValue |name=ServerLogDebugMessages|type=bool|defvalue=false|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Net/GameServer.cpp#L75 source pos] }}
{{ConfigValue |name=ServerLogInfoMessages|type=bool|defvalue=false|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Net/GameServer.cpp#L74 source pos] }}
{{ConfigValue |name=ServerRecordDemos|type=bool|defvalue=false|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Net/GameServer.cpp#L73 source pos] }}
{{ConfigValue |name=ServerSleepTime|type=int|defvalue=5|safevalue= |description=number of milliseconds to sleep per tick }}
{{ConfigValue |name=SetCoreAffinity|type=unsigned|defvalue=0|safevalue=1 |description=Defines a bitmask indicating which CPU cores the main-thread should use. }}
{{ConfigValue |name=SetCoreAffinitySim|type=unsigned|defvalue=0|safevalue=1 |description=Defines a bitmask indicating which CPU cores the sim-thread should use. }}
{{ConfigValue |name=ShadowMapSize|type=int|defvalue=2048|minvalue=32|safevalue= |description=Sets the resolution of shadows. Higher numbers increase quality at the cost of performance. }}
{{ConfigValue |name=ShadowProjectionMode|type=int|defvalue=1|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Rendering/ShadowHandler.cpp#L34 source pos] }}
{{ConfigValue |name=Shadows|type=int|defvalue=2|minvalue=-1|safevalue=-1 |description=Sets whether shadows are rendered.
-1:=forceoff, 0:=off, 1:=full, 2:=fast (skip terrain) }}
{{ConfigValue |name=ShowClock|type=bool|defvalue=true|safevalue= |description=Displays a clock on the top-right corner of the screen showing the elapsed time of the current game. }}
{{ConfigValue |name=ShowFPS|type=bool|defvalue=false|safevalue= |description=Displays current framerate. }}
{{ConfigValue |name=ShowLoadMessages|type=bool|defvalue=true|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/LoadScreen.cpp#L44 source pos] }}
{{ConfigValue |name=ShowPlayerInfo|type=int|defvalue=1|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/Game.cpp#L135 source pos] }}
{{ConfigValue |name=ShowRezBars|type=bool|defvalue=true|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Rendering/FeatureDrawer.cpp#L35 source pos] }}
{{ConfigValue |name=ShowSpeed|type=bool|defvalue=false|safevalue= |description=Displays current game speed. }}
{{ConfigValue |name=SimpleMiniMapColors|type=bool|defvalue=false|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/UI/MiniMap.cpp#L60 source pos] }}
{{ConfigValue |name=SmallFontFile|type=string|defvalue=&quot;fonts/FreeSansBold.otf&quot;|safevalue= |description=Sets the font of Spring engine small text. }}
{{ConfigValue |name=SmallFontOutlineWeight|type=float|defvalue=10|safevalue= |description=see {{taglink|FontOutlineWeight}} }}
{{ConfigValue |name=SmallFontOutlineWidth|type=int|defvalue=2|safevalue= |description=see {{taglink|FontOutlineWidth}} }}
{{ConfigValue |name=SmallFontSize|type=int|defvalue=14|safevalue= |description=Sets the font size (in pixels) of the engine GUIs and more. }}
{{ConfigValue |name=Sound|type=bool|defvalue=true|safevalue= |description=Select the Sound driver, true = OpenAL, false = NullAudio }}
{{ConfigValue |name=SourcePort|type=int|defvalue=0|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Net/Protocol/NetProtocol.cpp#L21 source pos] }}
{{ConfigValue |name=SpeedControl|type=int|defvalue=1|minvalue=1|maxvalue=2|safevalue= |description=Sets how server adjusts speed according to player's load (CPU), 1: use average, 2: use highest }}
{{ConfigValue |name=SplashScreenDir|type=string|defvalue=&quot;.&quot;|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/System/SpringApp.cpp#L111 source pos] }}
{{ConfigValue |name=SpringData|type=string|defvalue=&quot;&quot;|safevalue= |description=List of addidional data-directories, separated by ';' on windows, ':' on other OSs }}
{{ConfigValue |name=TCPAllowConnect|type=string|defvalue=&quot;*&quot;|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/lib/luasocket/src/restrictions.cpp#L22 source pos] }}
{{ConfigValue |name=TCPAllowListen|type=string|defvalue=&quot;*&quot;|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/lib/luasocket/src/restrictions.cpp#L23 source pos] }}
{{ConfigValue |name=TeamHighlight|type=int|defvalue=1|minvalue=0|maxvalue=2|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/System/GlobalConfig.cpp#L52 source pos] }}
{{ConfigValue |name=TeamNanoSpray|type=bool|defvalue=true|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Rendering/GlobalRendering.cpp#L46 source pos] }}
{{ConfigValue |name=TextureLODBias|type=float|defvalue=0|minvalue=-4|maxvalue=4|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Rendering/GlobalRendering.cpp#L47 source pos] }}
{{ConfigValue |name=TooltipGeometry|type=string|defvalue=&quot;0.0 0.0 0.41 0.1&quot;|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/UI/TooltipConsole.cpp#L26 source pos] }}
{{ConfigValue |name=TooltipOutlineFont|type=bool|defvalue=true|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/UI/TooltipConsole.cpp#L27 source pos] }}
{{ConfigValue |name=TreeRadius|type=int|defvalue=1408|minvalue=0|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Rendering/Env/ITreeDrawer.cpp#L20 source pos] }}
{{ConfigValue |name=UDPAllowConnect|type=string|defvalue=&quot;&quot;|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/lib/luasocket/src/restrictions.cpp#L24 source pos] }}
{{ConfigValue |name=UDPAllowListen|type=string|defvalue=&quot;*&quot;|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/lib/luasocket/src/restrictions.cpp#L25 source pos] }}
{{ConfigValue |name=UDPConnectionLogDebugMessages|type=bool|defvalue=false|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/System/Net/UDPConnection.cpp#L21 source pos] }}
{{ConfigValue |name=UnitIconDist|type=int|defvalue=200|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Rendering/UnitDrawer.cpp#L53 source pos] }}
{{ConfigValue |name=UnitLodDist|type=int|defvalue=1000|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Rendering/UnitDrawer.cpp#L52 source pos] }}
{{ConfigValue |name=UnitTransparency|type=float|defvalue=0.7|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Rendering/UnitDrawer.cpp#L54 source pos] }}
{{ConfigValue |name=UseDistToGroundForIcons|type=float|defvalue=0.95|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Game/Camera/CameraController.cpp#L10 source pos] }}
{{ConfigValue |name=UseEFX|type=bool|defvalue=true|safevalue=false |description=[https://github.com/spring/spring/blob/develop/rts/System/Sound/ISound.cpp#L36 source pos] }}
{{ConfigValue |name=UseHighResTimer|type=bool|defvalue=false|safevalue= |description=On Windows, sets whether Spring will use low- or high-resolution timer functions for tasks like graphical interpolation between game frames. }}
{{ConfigValue |name=UseLuaMemPools|type=bool|defvalue=true|safevalue= |description=Whether Lua VM memory allocations are made from pools. }}
{{ConfigValue |name=UseNetMessageSmoothingBuffer|type=bool|defvalue=true|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/System/GlobalConfig.cpp#L57 source pos] }}
{{ConfigValue |name=UsePBO|type=bool|defvalue=true|safevalue=false |description=[https://github.com/spring/spring/blob/develop/rts/Rendering/GL/VBO.cpp#L18 source pos] }}
{{ConfigValue |name=UseShaderCache|type=bool|defvalue=true|safevalue= |description=If already compiled shaders should be shared via a cache, reducing compiles of already compiled shaders. }}
{{ConfigValue |name=UseVBO|type=bool|defvalue=true|safevalue=false |description=[https://github.com/spring/spring/blob/develop/rts/Rendering/GL/VBO.cpp#L17 source pos] }}
{{ConfigValue |name=VSync|type=int|defvalue=0|minvalue=-6|maxvalue=6|safevalue= |description=Synchronize buffer swaps with vertical blanking interval. Modes are -N (adaptive), +N (standard), or 0 (disabled). }}
{{ConfigValue |name=Water|type=int|defvalue=1|minvalue=0|maxvalue=4|safevalue=0 |description=Defines the type of water rendering. Can be set in game. Options are: 0 = Basic water, 1 = Reflective water, 2 = Reflective and Refractive water, 3 = Dynamic water, 4 = Bumpmapped water }}
{{ConfigValue |name=WhiteListAdditionalPlayers|type=bool|defvalue=true|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/Net/GameServer.cpp#L72 source pos] }}
{{ConfigValue |name=WindowBorderless|type=bool|defvalue=false|safevalue= |description=When set and Fullscreen is 0, will put the game in Borderless Window mode, also known as Windowed {{taglink|Fullscreen}}. When using this, it is generally best to also set {{taglink|WindowPosX}} and {{taglink|WindowPosY}} to 0 }}
{{ConfigValue |name=WindowPosX|type=int|defvalue=32|safevalue= |description=Sets the horizontal position of the game window, if {{taglink|Fullscreen}} is 0. When {{taglink|WindowBorderless}} is set, this should usually be 0. }}
{{ConfigValue |name=WindowPosY|type=int|defvalue=32|safevalue= |description=Sets the vertical position of the game window, if {{taglink|Fullscreen}} is 0. When {{taglink|WindowBorderless}} is set, this should usually be 0. }}
{{ConfigValue |name=WindowedEdgeMove|type=bool|defvalue=true|safevalue= |description=Sets whether moving the mouse cursor to the screen edge will move the camera across the map. }}
{{ConfigValue |name=WorkerThreadCount|type=int|defvalue=-1|minvalue=-1|safevalue=0 |description=Number of workers (including the main thread!) used by ThreadPool. }}
{{ConfigValue |name=XResolution|type=int|defvalue=0|minvalue=0|safevalue= |description=Sets the width of the game screen. If set to 0 Spring will autodetect the current resolution of your desktop. }}
{{ConfigValue |name=XResolutionWindowed|type=int|defvalue=0|minvalue=0|safevalue= |description=See {{taglink|XResolution}}, just for windowed. }}
{{ConfigValue |name=YResolution|type=int|defvalue=0|minvalue=0|safevalue= |description=Sets the height of the game screen. If set to 0 Spring will autodetect the current resolution of your desktop. }}
{{ConfigValue |name=YResolutionWindowed|type=int|defvalue=0|minvalue=0|safevalue= |description=See {{taglink|YResolution}}, just for windowed. }}
{{ConfigValue |name=address|type=string|defvalue=&quot;&quot;|safevalue= |description=Last Ip/host{{taglink|name}} used as direct connect in the menu. }}
{{ConfigValue |name=name|type=string|defvalue=&quot;UnnamedPlayer&quot;|safevalue= |description=Sets your name in the game. Since this is overridden by lobbies with your lobby username when playing, it usually only comes up when viewing replays or starting the engine directly for testing purposes. }}
{{ConfigValue |name=snd_airAbsorption|type=float|defvalue=0.1|safevalue= |description=[https://github.com/spring/spring/blob/develop/rts/System/Sound/ISound.cpp#L35 source pos] }}
{{ConfigValue |name=snd_device|type=string|defvalue=&quot;&quot;|safevalue= |description=Sets the used output device. See &quot;Available Devices&quot; section in infolog.txt. }}
{{ConfigValue |name=snd_volbattle|type=int|defvalue=100|minvalue=0|maxvalue=200|safevalue= |description=Volume for &quot;battle&quot; sound channel. }}
{{ConfigValue |name=snd_volgeneral|type=int|defvalue=100|minvalue=0|maxvalue=200|safevalue= |description=Volume for &quot;general&quot; sound channel. }}
{{ConfigValue |name=snd_volmaster|type=int|defvalue=60|minvalue=0|maxvalue=200|safevalue= |description=Master sound volume. }}
{{ConfigValue |name=snd_volmusic|type=int|defvalue=100|minvalue=0|maxvalue=200|safevalue= |description=Volume for &quot;music&quot; sound channel. }}
{{ConfigValue |name=snd_volui|type=int|defvalue=100|minvalue=0|maxvalue=200|safevalue= |description=Volume for &quot;ui&quot; sound channel. }}
{{ConfigValue |name=snd_volunitreply|type=int|defvalue=100|minvalue=0|maxvalue=200|safevalue= |description=Volume for &quot;unit reply&quot; sound channel. }}</text>
      <sha1>1fge2ur573i0sgcrxrgocr6a91c5zm7</sha1>
    </revision>
  </page>
  <page>
    <title>Squad Tactics</title>
    <ns>0</ns>
    <id>1848</id>
    <revision>
      <id>11662</id>
      <parentid>6779</parentid>
      <timestamp>2006-11-13T02:08:26Z</timestamp>
      <contributor>
        <username>Neddiedrow</username>
        <id>428</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3681">'''Squad Tactics: What they are? How to use them?'''

A squad is a group of units specialized for a specific purpose.

Squads can cover almost any roll in any mod, provided they are set up correctly.

'''Squad Tactics: What they are made of.'''

Squads should comprise of a versatile assortment of units, infantry, kbots, or whatever. A squad should have several artillery units in the case it happens to come across a defended position. Squads also need skirmish troops, or anything you send in to fight first. These guys are what commences the attack. You should always have a scout-ish type of unit or several. The increased sight radius will help the squad all the way around. Several slow and fast units could help in the tactical department. Medical aiding units are also important, especially if you are trying to get veterans.

'''Squad Tactics: Strategies and Tactics.'''

Strategies and tactics are what makes, and breaks, a squad. You wouldn't send a speedy raiding and scout party at a defensive line, just wasted supplies. Squads can be stand alone, which means they are given a standard order (attack the line, try to break through), or commander controlled. Commander controlled squads survive to fight another day quite often, and are normally veterans after a few missions. A mission is an order given to a squad by the commander, you. However, for commander controlled squads, these can be long and harsh, but can deliver unto your enemies a world of pain.

'''On to the actual strategies during a fight''':

'''Flanking''': Several fast units in your group may move around to attack the enemy from behind, this is moderately hard to do in flat terrain, but easier in forest or mountain terrain. This draws enemy fire in two directions, splitting his damage.

'''Drawing Enemy Attention''': This tactic is most used for speedy raiding groups to keep the enemy guessing. When doing this, attacking economy, then the front lines could make him pull all his forces to the area you attacked, thinking that you may be mounting an extremely large offensive, when it was a small group of 5-10 units, just causing some hell and mayhem. Some times good to have an arty to give a &quot;lasting&quot; impression.

'''Defensive Breaker''': This squad has artillery and units good at breaking defensive lines. Afterwards your main force can rush through the gap. These squads can be fast, slow, or long range. It doesn't make any difference in the long run under a good commander.

'''Flash''': Flash, as in, gone in an instant. This squad is based around ultra speedy units, or even planes. These squads can be used for reconnaisance, raids, bomb runs, or assassination. These squads are good at most of the other things, but get slaughtered easily.

'''Assassination''': Cold-Hearted Murder, just for all of you people that send hundreds of robots to the scrap heap everyday. Assassination squads can be planes, or speedy assault units. These guys rush past the line and attack the commander, normally a failed mission is the target not being destroyed.

'''Construction Squad:''' Used in tasks such as building walls, defences or mexes in enemy territory, this is the hardest, but most devastating. It's annoying to have an artillery attacking you from your own base, somewhere. Building mines in an enemies territory is also in this squad. Mines are destructive mean things to use, but only when they work. Mines can take a whole convoy from a commander who is not paying attention..

-Snipawolf

This article is of particular interest to Gundam RTS, E&amp;E, Star Wars Spring and AA players.


''' [[Strategy_and_Tactics|&lt;- Back to Strategy and Tactics page]]'''

[[category:Strategy]]</text>
      <sha1>j8v63c6hwru25uvmbi92vulcpa4sfcv</sha1>
    </revision>
  </page>
  <page>
    <title>Statistics</title>
    <ns>0</ns>
    <id>3166</id>
    <revision>
      <id>29779</id>
      <parentid>29778</parentid>
      <timestamp>2016-01-11T18:23:09Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="206">=Some Links / Infos to statistics=

* https://www.openhub.net/p/springrts
* http://replays.springrts.com/browse/

website: {{forumlink|topic=27650|title=webpage stats of springrts.com}}

[[Category:Spring]]</text>
      <sha1>qh87py5pfuf9ozxgh1z3560bybrgk60</sha1>
    </revision>
  </page>
  <page>
    <title>Strategem</title>
    <ns>0</ns>
    <id>968</id>
    <redirect title="Strategy and Tactics" />
    <revision>
      <id>10803</id>
      <timestamp>2005-07-04T05:55:54Z</timestamp>
      <contributor>
        <username>FoeOfTheBee</username>
        <id>20</id>
      </contributor>
      <comment>Strategem moved to Strategy and Tactics</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="35">#REDIRECT [[Strategy and Tactics]]
</text>
      <sha1>nkjdq3ygii44xa2h47jf8uwgpm5ux3a</sha1>
    </revision>
  </page>
  <page>
    <title>Strategy, part 1 - Resources</title>
    <ns>0</ns>
    <id>1346</id>
    <redirect title="Resources" />
    <revision>
      <id>11163</id>
      <timestamp>2006-03-21T23:32:03Z</timestamp>
      <contributor>
        <username>Tweenk</username>
        <id>224</id>
      </contributor>
      <comment>Strategy, part 1 - Resources moved to Resources</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="24">#REDIRECT [[Resources]]
</text>
      <sha1>2k0p04xrvkz320fko59cg1jkmoewtqi</sha1>
    </revision>
  </page>
  <page>
    <title>Strategy:Absolute Annihilation</title>
    <ns>0</ns>
    <id>1129</id>
    <revision>
      <id>13401</id>
      <parentid>10957</parentid>
      <timestamp>2007-11-12T08:00:53Z</timestamp>
      <contributor>
        <username>Heavylancer</username>
        <id>2341</id>
      </contributor>
      <comment>Killed off the spam in this page.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1693">==Game Strategy==
Absolute Annihilation is a modification of TA. Therefore, the same basic strategies and tactics that good TA players utilize are also utilized by good AA players. Although the best players heavily analyze famous military works such as &lt;i&gt;The Art of War&lt;/i&gt;, the essence of the message lies in the following points: 

# Always Expand
# Be Offensive
# Practice

Indeed, the actual units present in AA are irrelevant; it takes little time to learn what they all do. The key lies in utilizing them effectively. Always keep the following points in mind when playing, and above all, practice, and even if you lose, ask the person to whom you lost what you did wrong and right.

==Strategies and their counters==
This is a list of strategies, and a good way to counter them
{| border=&quot;0&quot; cellpadding=&quot;4&quot;
|width=&quot;150px&quot;|		'''Strategy'''
|width=&quot;*&quot;|		Counter
|-
|'''Skirmishers'''
|Planes, heavy  defenses with a fair bit of range
|-
|'''Stationary Defenses'''
|Mid range units with jammers and radar or scouts
|-
|'''Arty'''
|Jammers
|-
|'''Jammers'''
|Scouts
|-
|'''Defense Swarming'''
|Mass Expansion
|-
|'''Mass Expansion'''
|Mass Raiding
|-
|'''Unit Swarming'''
|Defense Swarming ( reclaim wrecks)
|-
|'''Commander'''
|Radar Skirmish
|-
|'''Level One Swarming'''
|Defense Swarming, Microed L2 (especially skirmishers)
|-
|'''Heavy Short Range Defenses'''
|Assault Units (slow but powerful), long range units with radar or scouts
|-
|'''Assault Units'''
|Heavily raid his econ to cripple production (air are good), brawlies, lvl1 short range (cost effective but you need a load of them)
|-
|'''Porcers'''
|Porc more, it annoys Kelson which is always fun
|}


[[Category:Strategy]]</text>
      <sha1>g9phoix3hvk1e4a0wsq5ui2q9kzjbjl</sha1>
    </revision>
  </page>
  <page>
    <title>Strategy and Tactics</title>
    <ns>0</ns>
    <id>964</id>
    <revision>
      <id>30982</id>
      <parentid>30980</parentid>
      <timestamp>2019-02-22T03:02:33Z</timestamp>
      <contributor>
        <username>Hawara</username>
        <id>2945</id>
      </contributor>
      <minor/>
      <comment>/* External Resources */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4499">{|border=&quot;0&quot; cellpadding=&quot;4&quot; cellspacing=&quot;10&quot; width=&quot;100%&quot;
|width=&quot;100%&quot; valign=&quot;top&quot; style=&quot;border: #aaa solid;&quot;|
Strategy and Tactics are best described as &quot;Concepts on how to achieve victory&quot;. Strategy is a chosen global method of action, while tactics are short-term actions to attain specific goals. Please keep in mind that these are general real-time strategy game strategies and tactics, but some are specific to TA-based mods. 
|}

{|border=&quot;0&quot; cellpadding=&quot;4&quot; cellspacing=&quot;10&quot; width=&quot;100%&quot;

|width=&quot;33%&quot; valign=&quot;top&quot; style=&quot;border: #aaa solid;&quot;|

===Common Strategies===
'''[[Rushing]]''' - Speed Slaughter&lt;br/&gt;&lt;br/&gt;
'''[[Porcing]]''' - If I Hold Out Long Enough, I'll Be The Last Man Standing&lt;br/&gt;&lt;br/&gt;
'''[[Map Control]]''' - Everywhere At Once&lt;br/&gt;&lt;br/&gt;
'''[[Uberweapon]]''' - Nukes, LRPCS &amp; Superunits&lt;br/&gt;&lt;br/&gt;
'''[[Expansion]]''' - The Eradication Of Base Mentality&lt;br/&gt;&lt;br/&gt;
'''[[Planned Delaying]]''' - Just Need To Slow Them Down...&lt;br/&gt;&lt;br/&gt;
'''[[The Secret Front]]''' - Victory Through Misinformation&lt;br/&gt;&lt;br/&gt;
'''[[A Good Offense is the Best Defense]]''' - Speed, No Defense&lt;br/&gt;&lt;br/&gt;

'''Note On Strategies'''&lt;br/&gt;
Many of the strategies listed here are not viable in all the games which run on the Spring engine. Some have more application than others, and many may seem less than relevant to many players.

|width=&quot;33%&quot; valign=&quot;top&quot; style=&quot;border: #aaa solid;&quot;|

===Common Tactics===
'''[[Commander bombing|Commander Bombing]]'''&lt;br/&gt;&lt;br/&gt;
'''[[Commander kidnapping|Commander Kidnapping]]'''&lt;br/&gt;&lt;br/&gt;
'''[[Raiding]]'''&lt;br/&gt;&lt;br/&gt;
'''[[Swarming]]'''&lt;br/&gt;&lt;br/&gt;
'''[[Nuke strike|Nuclear Strike]]'''&lt;br/&gt;&lt;br/&gt;
'''[[Chokepoint]]'''&lt;br/&gt;&lt;br/&gt;
'''[[Teching]]'''&lt;br/&gt;&lt;br/&gt;
'''[[Defensive Lines]]'''&lt;br/&gt;&lt;br/&gt;
'''[[Transports and setting up supply Lines|Transports &amp; Supply Lines]]'''&lt;br/&gt;&lt;br/&gt;
'''[[Dedicated Spamming]]'''&lt;br/&gt;&lt;br/&gt;
'''[[Classic Pincer]]'''&lt;br/&gt;&lt;br/&gt;
'''[[Air Domination]]'''&lt;br/&gt;&lt;br/&gt;
'''[[Squad Tactics]]'''&lt;br/&gt;&lt;br/&gt;
'''[[Artillery Creep]]'''&lt;br/&gt;&lt;br/&gt;
'''Ace In The Hole'''&lt;br/&gt;&lt;br/&gt;
|width=&quot;33%&quot; valign=&quot;top&quot; style=&quot;border: #aaa solid;&quot;|

===Specific Supplements===
'''[[NOTA_players_guide| NOTA Player's Guide]]'''&lt;br/&gt;&lt;br/&gt;
'''[[New to xta|The basics of XTA]]'''&lt;br/&gt;&lt;br/&gt;
'''[[NOTA_OTA_differences_guide| NOTA vs OTA Guide]]'''&lt;br/&gt;&lt;br/&gt;
'''[[Xta commander|Commander Tactics]]'''&lt;br/&gt;&lt;br/&gt;
'''[[Base building tips|Base Construction]]'''&lt;br/&gt;&lt;br/&gt;
'''[[Spring for RTS Players]]'''&lt;br/&gt;&lt;br/&gt;
'''[[Spring Replays]]'''&lt;br/&gt;&lt;br/&gt;
'''[[Mods, and their strategies/tactics|Tactics For Individual Mods]]'''&lt;br/&gt;&lt;br/&gt;
'''[[Resources]]'''&lt;br/&gt;&lt;br/&gt;
'''[[Theory On Strategy]]'''&lt;br/&gt;&lt;br/&gt;
'''[[Aggressive Vs. Passive Strategy]]'''&lt;br/&gt;&lt;br/&gt;
'''[[How to be good at 1v1|One Vs. One Tactics &amp; Strategy]]'''&lt;br/&gt;&lt;br/&gt;
'''[[Delaying Inevitable Defeat: Development Time]]'''&lt;br/&gt;&lt;br/&gt;
'''[[Multiplayer Strategy]]'''&lt;br/&gt;&lt;br/&gt;
'''[[SOP|Strategic, Operational &amp; Tactical Warfare]]'''&lt;br/&gt;&lt;br/&gt;
'''[[Manored's Guide about BA units]]'''&lt;br/&gt;&lt;br/&gt;

|}

{|border=&quot;0&quot; cellpadding=&quot;4&quot; cellspacing=&quot;10&quot; width=&quot;100%&quot;
|width=&quot;33%&quot; valign=&quot;top&quot; style=&quot;border: #aaa solid;&quot;|

===Discussions On Strategy===
'''[[Advanced Strategy Discussion|Lobby Client Discussion December 2005]]'''&lt;br/&gt;&lt;br/&gt;
'''[[Tactics And Hills]]'''&lt;br/&gt;&lt;br/&gt;
'''[[Airdrop Efficiency]]'''&lt;br/&gt;&lt;br/&gt;
&lt;br/&gt;&lt;br/&gt;

|width=&quot;33%&quot; valign=&quot;top&quot; style=&quot;border: #aaa solid;&quot;|

===Other===
'''[[Spring guide!|Spring Guide!]]'''&lt;br/&gt;&lt;br/&gt;
'''Subjects Of Study In Relation To Strategy'''&lt;br/&gt;&lt;br/&gt;
'''Comparison Of Tactics In Different Mods'''&lt;br/&gt;&lt;br/&gt;
'''[[Gameplay Strategy For The Mod Developer]]'''&lt;br/&gt;&lt;br/&gt;
'''Gameplay Strategy For The AI Developer'''&lt;br/&gt;&lt;br/&gt;
'''Gameplay Strategy For The Map Developer'''&lt;br/&gt;&lt;br/&gt;




|width=&quot;33%&quot; valign=&quot;top&quot; style=&quot;border: #aaa solid;&quot;|

===External Resources===
'''[http://uk.pc.ign.com/articles/700/700747p1.html IGN: The State of the RTS]''' has interview with [[Wikipedia:Chris Taylor (game designer)|Chris Taylor]], the creator of [[OTA]]&lt;br/&gt;&lt;br/&gt;
'''[https://www.gutenberg.org/ebooks/17405 Sun Tzu's The Art Of War]'''&lt;br/&gt;&lt;br/&gt;
|}

{|border=&quot;0&quot; cellpadding=&quot;4&quot; cellspacing=&quot;10&quot; width=&quot;100%&quot;
|width=&quot;100%&quot; valign=&quot;top&quot; style=&quot;border: #aaa solid;&quot;|
Feel free to contribute as you see fit to the Strategy and Tactics section of the Wiki as you would elsewhere, but remember to respect the work of other contributors and consult them if you seek to overhaul their contributions.
|}

__NOTOC__

''' [[Main_Page|&lt;- Back to Main page]]'''

[[Category:Playing]]
[[category:Strategy]]</text>
      <sha1>oifl8vgnqly95pj3ervm88a91u7vtn1</sha1>
    </revision>
  </page>
  <page>
    <title>Suggested maps for 1v1</title>
    <ns>0</ns>
    <id>1363</id>
    <revision>
      <id>11180</id>
      <parentid>3546</parentid>
      <timestamp>2006-04-16T21:55:57Z</timestamp>
      <contributor>
        <username>SeanHeron</username>
        <id>3</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1470">by Mongus 

'''FIRST SELECTION'''

- Cliff Run+ (part of River Dale pack).

- Core Faf

- Dueling Bases+

- Icy Run

- Dueling Forts

- Foothill Basin (v2)

- Hill Haven (part of River Dale pack).

- Lava and Two Hills

- Small Divide+

- Sparewood+ (part of River Dale pack).

- Tombstone Desert (v2)

- Core Pyramid (v6) (closer starts are welcome)

- Rolling Hills (closer starts are welcome)

- Mountain Lake+ (start boxes required, borked defaults...must walk :p )

- The Cold Place (remake recommended)

- Omega

- Island Alpha+

- Gods of War

- Sands of War

- Green River

'''ON THE METAL LIMIT'''

- Blue Planet

- Brazilian Battlefield

- Karst

- Highway to skull (Beta 1)

'''SLOW (but good) GAMEPLAY'''

- Grassy Paradox +

'''MAYBE TOO BIG, BUT GOOD TO TRY, GOOD DEFAULT STARTS.'''

- Flooded Desert

- County Crossing (v3)

- Pincushion Remake

- Sunken Outpost

- Lava HighGround

'''TOO BIG. NEEDS CLOSER STARTS TO BE OK.'''

- Island Hopping (windy..)

- Evergreen Haven (v3)

- Foothills (v6-7-8 ).

- Island in the Sun + (maybe too much metal, but its naval..)


'''THE UKNOWN MAP'''

- Fortress+ (dare to play a map you know nothing bout its gameplay? Razz)

'''NOT TESTED'''

- Rusted Divide (water map)

- Marshlands (v5), is a water vs ground map, and its fine as that.


Note: Due to gameplay/balance, the smaller of the &quot;first selection&quot; maps' gameplay will range from &quot;too fast gameplay&quot; to &quot;insane&quot; in other mods than xta.

[[Category:Maps]]</text>
      <sha1>o6hsdtjt04wpdb8e6d7g9n300duf29z</sha1>
    </revision>
  </page>
  <page>
    <title>Suggested maps for 3ffa</title>
    <ns>0</ns>
    <id>2772</id>
    <revision>
      <id>24726</id>
      <parentid>18202</parentid>
      <timestamp>2012-06-17T13:36:42Z</timestamp>
      <contributor>
        <username>Funkencool</username>
        <id>2872</id>
      </contributor>
      <comment>/* Maps for 3 free for all games (xta) */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1439">= Maps for 3 free for all games (xta) =



'''Good maps'''

*[http://www.springfiles.com/show_file.php?id=569 SaltRockColony]

*[http://www.springfiles.com/show_file.php?id=878 Ternion]

*[http://www.springfiles.com/show_file.php?id=579 Sherwood]

*[http://www.springfiles.com/search_result.php?search=Red%2520Triangle&amp;select=select_all Red Triangle] (v2 or remake).

*[http://www.springfiles.com/show_file.php?id=2291 Sparewood Remake]

*[http://mapinfo.adune.nl/?map=Chernobyl Chernobyl] is sort of lol map, but has interesting gameplay.

*[http://mapinfo.adune.nl/?map=Curved_Focus Curved Focus] is an interesting alternative, it looks like chernobyl's less lol version.

*[http://www.springfiles.com/show_file.php?id=304 Gods of war 2 remake] it has 6 islands, so it can be setup for 3ffa, and let an island in between each player. A sea 3ffa map!.

*[http://springfiles.com/spring/spring-maps/trefoilv1 Trefoil v1] I may be biased as its my map, but I have a lot of fun with it!


'''Overplayed ones'''

*[http://www.springfiles.com/show_file.php?id=189 Desert triad] (this map is also thought to be unbalanced, as right side hill has terrain disponibility advantage.)


'''unbalanced'''

*[http://www.springfiles.com/show_file.php?id=699 The Cold Place] (remake is not suggested, as its too big, and has too much metal for a 3ffa, otoh it *may be well balanced for 3ffa unlike the original, reviewing upon testing)

[[Category:Maps]]</text>
      <sha1>8z8vpsx2re283fa4cdj2kwe8p9cdole</sha1>
    </revision>
  </page>
  <page>
    <title>Suggested maps for 4ffa</title>
    <ns>0</ns>
    <id>2788</id>
    <revision>
      <id>17973</id>
      <parentid>17937</parentid>
      <timestamp>2009-12-26T15:23:16Z</timestamp>
      <contributor>
        <username>Mongus</username>
        <id>53</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="134">small ones

*Ashap_Plateau_III.smf
*Lava Highground.smf
*Hard_Charge-v1.smf


big ones

*SplinteredTropicsV2.smf




[[Category:Maps]]</text>
      <sha1>0thp87m9600j5no8abh72lf7r8b0zs1</sha1>
    </revision>
  </page>
  <page>
    <title>Sun Position Direction sunDir</title>
    <ns>0</ns>
    <id>3849</id>
    <revision>
      <id>31173</id>
      <parentid>31171</parentid>
      <timestamp>2020-02-14T02:10:35Z</timestamp>
      <contributor>
        <username>Forboding angel</username>
        <id>2578</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="94">The droids you are looking for are in another castle: https://springrts.com/wiki/Mapdev:sunDir</text>
      <sha1>sb89rqpoxjejl8tcjxfs0cpehkus0mn</sha1>
    </revision>
  </page>
  <page>
    <title>Swarming</title>
    <ns>0</ns>
    <id>1344</id>
    <revision>
      <id>16834</id>
      <parentid>12297</parentid>
      <timestamp>2009-08-08T16:12:18Z</timestamp>
      <contributor>
        <username>Seanheron</username>
        <id>2595</id>
      </contributor>
      <minor/>
      <comment>remove links to deprecated pages</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1912">'''Swarming''' is an offensive battle tactic which uses a great number of (preferably) low cost, low armor, high speed and high attack power units to destroy enemy defenses or kill a very powerful unit. It is particularly effective when the enemy unit uses weapons that don't have a large area of effect, like laser weapons. As each weapon can target only a single unit at once and it takes some time to reload and retarget, a swarm of weak units can often destroy even a very powerful piece of weaponry. This can also be very useful against more powerful forms of static defense, as they often cannot effectively attack targets that get too close to them.

Swarming is particularly effective when:
* Enemy is [[porcing]] using hit-or-miss (non-area) weapons
* Enemy is using powerful, but slow-reload weapons
* Enemy is relying heavily on a handful of very powerful units or an uberweapon
* The enemy has left a gap in their defensive lines. (High speed/attack power units can cause considerable destruction if let loose inside an enemy base.)

Swarming is likely to fail if:
* Enemy is porcing using area weapons i. e. rockets, mortars etc.
* Enemy's defenses are fast reloading or scattered (large number of weak defenses instead of a few super-strongholds)
* There are no appropriate units available
* The enemy has a swarm of fast units of their own that they can respond with.

Swarming is sometimes termed [[spamming]] by annoyed players, partly because displaying a large number of weak units results in a devastating slowdown on lower-grade systems. However, making a good swarm unit available is seen as a countermeasure to porcing, which deteriorates gameplay. Some sort of swarming is therefore possible in almost every balanced mod, though counters (often in the form of mobile units) are also available.



''' [[Strategy_and_Tactics|&lt;- Back to Strategy and Tactics page]]'''

[[Category:Strategy]]</text>
      <sha1>3azubeqwyfahnbbi1ihc4etbhunrbbp</sha1>
    </revision>
  </page>
  <page>
    <title>SyncingSystem</title>
    <ns>0</ns>
    <id>1184</id>
    <redirect title="Syncing System" />
    <revision>
      <id>11011</id>
      <timestamp>2005-12-26T05:40:51Z</timestamp>
      <contributor>
        <username>Maelstrom</username>
        <id>32</id>
      </contributor>
      <comment>SyncingSystem moved to Syncing System</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29">#REDIRECT [[Syncing System]]
</text>
      <sha1>48lt5m7knplqk4wxmfrzaghvt9b5hjf</sha1>
    </revision>
  </page>
  <page>
    <title>Syncing System</title>
    <ns>0</ns>
    <id>1183</id>
    <revision>
      <id>26702</id>
      <parentid>12744</parentid>
      <timestamp>2013-03-20T19:58:22Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>recat</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4849">== Why is syncing necessary ==
Due to the variety of processors, C standard math libraries, and other configuration differences spring might be encountering in the future, it can be assumed that there will always be sync errors. Small differences in floating point numbers will not be an actual problem for the users, but these small differences are cumulative and can eventually lead to a completely different game state.

== Determining out-of-sync state ==
Determining sync is fairly straightforward: A checksum value based on certain gamestate properties can be calculated on every client, and compared with the checksum of the host.
As said above there will always be small differences, so an exact match of gamestate is not possible. A solution is to make the checksum calculation less strict, for example to cast position float3 vectors to int3 vectors, so small floating point differences do not change the checksum.

== Re-syncing ==
Resyncing gamestate (restoring sync between host and clients) is the real problem to solve here. Due to network lag and different CPU speeds, the host game simulation could be running ahead of the client simulation. 
The best way of keeping things in control would be to pause the game completely, and then start sending over the data to restore sync. This is also how the linux rts game &quot;Boson&quot; seems to handle sync restoration.
How it could work in spring:

#When the client detects an out-of-sync situation (checksums don't match), it sends an out-of-sync message to the host
#The host sends when receiving this message, sends pausing messages to all clients. With the pause message, the server also sends checksum values for individual units, unit groups, or all the units on a map sector. This larger set of checksum values allows to client to only request data that is actually out-of-sync. 
#Game situations need to be the same, so the clients run the simulation (even if it's not in sync) until they reach the same gameframe as the host simulation.
#Clients compare the set of checksum values with their own gamestate, and report back to the server which parts of their simulation were unsynced. 
#Server sends the gamestate requested by the client
#Server starts running the game again

==== Resyncing using a full savegame ====
Sending the complete gamestate would result in several MBs of network traffic, so that is something that should only be considered if everything else fails (or maybe it shouldn't be considered at all)

==== Resyncing invidual units ====
Resyncing individual units is already somewhat within range, although probably still heavy on network traffic. sizeof(CUnit) is 832 bytes, so sending complete unit instance contents is not possible. I have noticed that a lot of the CUnit and derivative members can be calculated from others, or are only used in specific situations (such as building/terraform/attacking). This is were unit specific optimizations could be done, if every unit has a function which selects which class members have to be synced in that game situation.


== Possible optimizations ==

*If network traffic is too high, it might be reduced by adding more steps to the syncing process (possibly at the expense of a longer resync time due to lag). Step 2 and 4 of the resync process would be applied multiple times
**1. The gamestate set of out-of-sync data starts with ALL gamestate
**2. Server sends checksum values for specific sections of this set of gamestate (checksum per map sector for example)
**3. Client compares with own gamestate and reports back.
**4. Server now has a reduced set of out-of-sync gamestate and calculates a new set of checksums for that (per object checksum value for example)
*When one client goes out-of-sync, a more strict checksum calculation is applied to all client, to catch emerging differences in gamestate. The game is already paused anyway, so using that time would be useful.
*Use replay data to reduce resync data volumes.  Have a 'running checksum' embedded in the replay data, which calculates periodically during gameplay.  When a client loses sync, the host and client run back through these checksums from last to first until they identify the one that agrees (ie they were last in sync at that point).  Then the host resends the subsequent gamestate changes in the same 'replay' format.  Given that a replay is only a couple of megs, resending a few seconds worth of replay data should require little data and would only need the host and the affected client.
**Note: assuming that the cause of desync is deterministic, this would have a good chance of triggering the same desync again just after the client got in sync. Also it is impossible to go back in time in the engine, so the act of starting at the last known good point in time is (almost) impossible to implement. -- Tobi

[[Category:Engine Dev]]</text>
      <sha1>nlc561w4bcgz5vawsy3n888fvnw0mcx</sha1>
    </revision>
  </page>
  <page>
    <title>TA-WD</title>
    <ns>0</ns>
    <id>1001</id>
    <revision>
      <id>18873</id>
      <parentid>16892</parentid>
      <timestamp>2010-03-13T16:35:54Z</timestamp>
      <contributor>
        <username>Koshi</username>
        <id>2371</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="957">{{historical}}

TA : World Domination, See the mod forum for an extensive thread with many screenshots.

[http://wd.tadesigners.com/ Click here to find out more]

Looking for the TAS Client? [http://www.fileuniverse.com/?p=show&amp;a=it&amp;id=1453 Download from File Universe]

TA:WD is a mod based on modern warfare and tries to make a realistic (as far that is possible in a RTS engine) simulation of modern warfare, units are detailed, have the weapons you would expect, have real names like M1A2 Abrams and not Main Battle Tank or Abrams like many real life warfare games out there, damage is relatively realistic, however for gameplay purposes, some units will be able to take several hits.

The Story so far: It's 20xx, NATO and the newly formed Moskva Pact declared WAR! both sides won't stop until they have complete control of the planet, which side are you on?

[[Image:TA-WDBannerStyle.png|center]]

Back to [[Mods]]

{{Category:Mods}}
[[Category:Mods]]</text>
      <sha1>sqxz0fine9u32iofp9rs288mmm9mr4k</sha1>
    </revision>
  </page>
  <page>
    <title>TA: Infinite War</title>
    <ns>0</ns>
    <id>2562</id>
    <revision>
      <id>21295</id>
      <parentid>20597</parentid>
      <timestamp>2011-02-24T17:00:25Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1669">{{historical}}

TA Infinite War (TAIF or Infinite War) is a new MOD in progress of development by '''BytesBR''' and '''Bozoman''', he want prolong the battles and start a new  name in air transport, is basead in [[Balanced Annihilation]].

==Preview==
'''BytesBR''', The Founder, say want creat a new type of air transport, Core and Arm will recieve 3 types of flights. Hes can transport 8, 16, and 32 units, some names for arm arealdy released: Traveller, Taticker and Commodore.

Other new released by Bytes is a new layout for game, will apperars a really Strategic Game, giving a most power of vision for player.

==News Confirmed==
===Air Transport===
The new air transport system is too simple: The tranports ships can be construct by Air Lab, but you need the Loading Bay; the loading bay have a space for load. Lets use the example of Travveler, the level air transport: a metal bay ''(In a form of Car Wash bay)'' support 8 medium tanks ''(Krogoths cant be supporteds by Lvl 1, but in Lvl 2 can support, but use 3 spaces)'', the Traveller fast load the Tanks, bring at place and return to bay, if damaged will be repair.

===New Layout===
The new layout remember the Supreme Commander, but have the idea is create a new style of vision for player, Strategic stays but the visio will be best.

==Current Status==
'''Note:'''''Bytes will upload every time after test's''

The current status is the principal change, at last test the Traveller (Fist unit), can't load, at second test with bugs fixed hes load all units in middle of ship, at third he load correctily, but dont unload at same time all units.

==Links==
*Alpha 1.0 - Comming Soon


[[Category:Mods]]</text>
      <sha1>dduh1ud7c3l1oozg6as58jzik75hxqx</sha1>
    </revision>
  </page>
  <page>
    <title>TASClient</title>
    <ns>0</ns>
    <id>3698</id>
    <revision>
      <id>29664</id>
      <parentid>29645</parentid>
      <timestamp>2015-10-11T00:03:41Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="601">[https://springrts.com/phpbb/viewtopic.php?f=64&amp;t=33300 TASClient is unmaintained, maintainer wanted!]

If you want to help, respond at https://github.com/spring-archive/TASClient/issues/1

TASClient is a lobby client written in Delphi by Satirik.


You can download the sources from the [https://github.com/spring-archive/TASClient git repository].

[http://springrts.com/phpbb/viewtopic.php?f=12&amp;t=18999 How to compile TASClient]

[http://springrts.com/phpbb/viewtopic.php?f=14&amp;t=19014 How to customize TASClient]

Bug Tracker: https://github.com/spring-archive/TASClient/issues

[[Category: Lobby]]</text>
      <sha1>3yj3928s6ohjr314c4dhxzw4v6e7vzm</sha1>
    </revision>
  </page>
  <page>
    <title>TA BattleFleet</title>
    <ns>0</ns>
    <id>1916</id>
    <revision>
      <id>30432</id>
      <parentid>22555</parentid>
      <timestamp>2017-09-16T02:28:35Z</timestamp>
      <contributor>
        <username>Vongratz</username>
        <id>730</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10137">{{historical}} 

            == TA_BattleFleet Mod ==
----
https://www.facebook.com/rsrc.php/v3/y4/r/-PAXP-deijE.gif
https://scontent.fgig4-1.fna.fbcdn.net/v/t1.0-9/428074_394947210532434_1899585886_n.jpg?oh=539885d0e48f3afce05d2f3d3cd23087&amp;oe=5A184B92
https://www.facebook.com/rsrc.php/v3/y4/r/-PAXP-deijE.gif
----


For while ported from OTA TA_BattleFleet mod,to enhance &lt;br&gt;gameplay according
to Spring,and create new units &lt;br&gt;to balance the game.

TA_BattleFleet was a balance mod originally done for &lt;br&gt;years for TA,
but never delivered, being developed by VonGratz.

Link for better info:

Mod stats in ModWeb made by Maesltrom.
[http://modweb.unknown-files.net/BFv1.5/]


[http://www.geocities.com/ta_batlefleet/TA_BattleFleet_Spring.html]

[http://www.ifilm.com/profile/VonGratz/video/2820317]

Last version, still without limited plane fuel and ammo:
[http://www.unknown-files.net/index.php?page=browse&amp;dlid=1927]

Limited Fuel &amp; Ammo for planes Mutator:
http://www.unknown-files.net/index.php?page=browse&amp;dlid=1968


'''Details of the first concept are as follows:'''

My own view was to create something more &quot;human&quot;,&lt;br&gt; and, because this,
I avoided third party giant kbots&lt;br&gt; or super-units that could 
destroy all the enemies, and  unfortunatelly &lt;br&gt;also the game balance.

As I love air-naval battles, a large number of &lt;br&gt;units were created 
or utilized from 3d party unit makers (for while).

Ive started the OTA TA-BattleFleet years ago&lt;br&gt; with UH in mind,
IMHO, the best of balancers,but after so many &lt;br&gt;modifications and tests,
these led to a diferent concept,&lt;br&gt; pointing still more the 
ARM versus CORE strategies and tactics.
The former utilizing more hit and run tactics&lt;br&gt; and attacks,
and the later ever a massive ,heaviest and slow war.
In that fashion, XTA enhanced a lot the CORE&lt;br&gt; carachteristics. 

Several new ship types are included, and the level&lt;br&gt; one is a complete set,
with slow and small battleships, escort carriers,&lt;br&gt; escorts and construction subs,these later units,inspired in TLL Race,perform &lt;br&gt;an incredible change to a better fighting in sea maps.
Other &quot;special&quot; units at first look can appear as redundant,&lt;br&gt; but the gunboats,for example, are very shalow in the water and&lt;br&gt; can sail where not other ships will.

The AAI ai is very compatible with the kind of war Ive&lt;br&gt; dreamed to fight, full of adrenaline ,remembering for me old TA massive&lt;br&gt; battles, and, with Submarine authorization Ive included it in the mod&lt;br&gt; with new specially created files.

Some land units are included as a test,more especifically&lt;br&gt; heavy tanks and vehicles, to decide after&lt;br&gt; what will stay there.

About 30 units still not are finished, and some maybe&lt;br&gt; never will came to light, but about ten are very important to the final balance.
Strategic and tactic nuclear weapons are part of this mod, that will include several Nuke launchers:
Two subs for both sides.
One kbot for ARM.
One vehicle for CORE.
One low range navy attack plane for CORE.

The balance Im looking for,not is &quot;one for the A ,one for the B&quot;,&lt;br&gt; with same caractheristics, but diferent models.
What Im trying to do is the inverse.   
If you would see the US and Soviet weapon development, several times they have radically diferent approaches.Imagine three or four diferent races.... 
The balance Im trying to get is for example.. 

CORE NAVY have an Air Command Ship, the Fireshield, with long range AA weapons, ARM balance not was done creating a counterpart, but a long(not so long, because a plane have far better mobility) range missile plane, the SeaRavager.
 
The Leviathan, an ooolde Cavedog CORE battlesub, now a true sub, with cruising missiles (that are already shown in the original model, but not were implemented)not have an ARM counter, but ARMada now have a little ASW plane level one, not a fast torpedo seaplane to help the balance. 

Also, because the ARM philosophy of hit-and-run tactics, a new sub, the Tiburon was created as a &quot;torpedo sniper&quot; with very long range torps and sonar.
 
CORE will have an only missile battleship - the Nightmare, ARM a very
slow and vulnerable ARSENAL ship.The former was designed for naval combat,
the later to smash shore resistance. 
CORE have heavier bombers for massive devastation like the Core Carnage 
- that still needs some enhancing in weapons, ARM new planes are mainly for hit and run attacks. 

Core armored vehicles are massive, like german Tigers in WW2.
ARM have faster and not so well protected tanks like the COVERT.
A nearly all-terrain ARM anti-tank kbot will help to stand the CORE hordes.
All of this will be ported for free copyright models, sounds and textures in the Phase II.
----


'''LIMITED FUEL &amp; AMMO SUPPLY FOR PLANES'''

Im testing this and Ive resolved to put the fuel/ammo limit for 
planes not as option,but as part of the mod development. 
I loved this style of gameplay very much.
Planes now have a more realistic behavior.They wait landed to be refueled when pads are full,stop attacks 
when fuel is low,and my ammo balancing do not gave any trouble,
because they fire all times that are needed.
Now carriers and long range strategic bombers have a new role, very close to the reality.
Of couse the Sidedata buiding list needed changes, 
and more builders have pads in their menus.Also two mobile pads 
were put ingame to supply small planes. 
I will resurect one project, a carrier-cruiser, the Convoyeur for the ARM, 
that was planned to support planes in long range missions, 
but in the case of TA, planes flighting all time, it not are needed. 
Also I intend to put a landing pad in the 
CORE Nightmare only missile battleship.
Future models will have landing gears that are already being tested.

'''MOD Pad Especifications''' 

SMALL - For fighters and other little planes, that are the 2 new mobile ones. 

MEDIUM - Only for the Navies, in the carriers and floating pads, 
to supply heavier planes (but not the last listed below) and sea-plane bombers. 

HEAVY - They are the land based pads, for long range patrol planes and bombers. 

Note that all &quot;lower&quot; level planes can be replenished by the &quot;higher&quot; level pads, but not the inverse. 

 ----

  

'''PROJECT PHASES'''

''PHASE I''
 
Complete the units stuff and balance the game.

Create new textures for FOUR races.

Create new sounds for FOUR races.

Aircraft landing gears

Media: http://cs.selu.edu/~ssmith/BB/files/thumbs/t_corelgversion1_834.jpg

Media: http://cs.selu.edu/~ssmith/BB/files/thumbs/t_lgandbur_316.jpg

Troop transports
Media: http://cs.selu.edu/~ssmith/BB/files/thumbs/t_concept_823.jpg

Carriers producing airplanes.
Media: http://cs.selu.edu/~ssmith/BB/files/thumbs/t_new_carrier_115.jpg

''PHASE II''  
Create new races - Four at all - Their concept design and models,
to substitute the Cavedog ones and old models &amp; units 
from 3d party and my own made.It will utilize the gameplay, sounds 
and textures of the above, but migrating to UVMapping.

----

''' '''TO DO LIST''' '''
For the last TA related, now an epic version.

Im still finishing the following for the epic version: 

'' UNITS ''___________________________
 
'''''Aircrafts''''' 
ARM Alkemist 
Chemical attack low level stealth aircraft. 
CORE HUGE ATTACK Transport. 
Maybe a WIG, with lower speed and more payload.The wing-in-Ground effect I made by chance while testing 
seaplanes interface subwater/air effects. 
 
'''''Ships'''''
 
CORE Tempest armored carrier 3pad &amp; airplant producing only defense planes.
 
CORE Horizon nuke sub.
 
ARM Arsenal.A slow platform to attack shores.
 
CORE Nightmare Missile Battleship with tactical nuke weapons.
 
ARM Thunderer nuke sub.
 
CORE Abyss MHD adv sub that includes subSAMs weapons.
 
ARM Heavy carrier - the biggest ship ingame.
 
 
'''''Land &amp; Amphi'''''
 
CORE TRPTR - Troop carrier.DONE 
ARM TRPTR - Troop carrier. 
ARM AT-kbot. 
ARM tactical nuke kbot . 
CORE tactical nuke vehicle 
New Royal panther model - Disrruptor tank. 
ARM Dreadnought - Big attack transport hover. 
CORE Hellfire - or Hell big hover &quot;base destroyer&quot;. 
ARM Ground control vehicle - A kind of mobile base/bunker. 
 
'''''NEW Bases'''''
 
Only Airplants &amp; Shipyards remains the same. 

CORE &amp; ARM MARINERS.
CORE &amp; ARM MARINERS NS. 
Both sides now build hovers, amphis, Pelikan(ARM). 
Land version can also produce some vehicles and kbots. 
Sea version can produce also gunboats, very shalow in the water and capable for riverine ops. 

CORE &amp; ARM Adv land plant - To produce all monster level units. 

CORE &amp; ARM Strategic center. The only hubs. 
Both build nukes, Antis, AA adv. 
Will substitute the Automatic Radar Targeting. 

ARM &amp; CORE landplant 1 - To produce all level one land units. 

ARM &amp; CORE landplant 2 - To produce all level two land units. 

CORE Hidden Ark - Undersea secret only sub plant. 

ARM Undersea Lab - A bluebolt from the ocean. 

CORE Walls &amp; ARM Fortress complex - ARM is the larger and better protected to launch raiding and flanking forces. 
and for CORE the biggest defended walls to limit the territory conquered before the next expansion. 

 
'''''Builders now:'''''
 
Vehicles only for engineering production - they are faster to expand limits. 
Kbots only for defense - They are capable to climb and build defences where vehicles cannot.
 
RESOLVE MineLaying affair.
Reduce types. 
Remove minelayers. 
Only kbot defence engineer, advcons subs &amp; spyes 
build it. 

'''NEW WEAPONS, EFFECTS &amp; GENERAL IMPROVEMENTS'''
 
 
Afterburn.
 
Gas bomb.
 
(Both above thanks to Smoth) 
Landing gears MODELS &amp; SCRIPTS 

Nuke mushroom.
 
New sounds data.
 
PULSE Active Sonar - Anti-jammer.
 
NO nano planes tag.
 
airpad limit will be removed next version?
 
WIG effect plenty of wakes.
 
Missing BuildPics - New ones still 
not made.
 
Passable structures..will be implemented or not in next version? 
If not, utilize Noruas solution to be finished.Its necessary to implement the 
ARM &amp; CORE defense complexes.
 
 
TESTS ON 

Vertical bombers -  Stuka fashion - NO WAY
 
Bomb spray.
 
Schrapnel Gun.
 
Landing Gears - Done for half of the ~ 30 aircraft models.

Vertical take-off burners Script.


[[Category:Mods]]</text>
      <sha1>4gxw0nwn7n2j18yzhce2lelimxqj1wl</sha1>
    </revision>
  </page>
  <page>
    <title>Tech Levels</title>
    <ns>0</ns>
    <id>1549</id>
    <revision>
      <id>24352</id>
      <parentid>21338</parentid>
      <timestamp>2012-05-02T08:39:54Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1035">{{Balanced_Annihilation_deprecated}}


[[category:Balanced Annihilation]]
A Tech Level is a group of units that can be built by a certain construction unit.

-There are 3 Tech Levels.-
 
* Tech Level 1, also sometimes mistaken as Tech Level 0 (May be my fault for this mixup -[[Eaglebird]]), is any unit the [[Commander]] can build. This includes the first resource facilities/collectors, the basic unit plants, the LLT, and the first radar facility available.

* Tech Level 2 is any unit built by the first available unit plants, and any structure built by the first construction units excluding the commander.

* Tech Level 3 is any unit built by a Tech Level 2 unit plant, and any structure built by the advanced construction units.

Tech Level 0: This Tech Level is often disputed, sometimes forgotten altogether, and some call it Tech Level 1, and just move each level down a notch, so the levels go up to 4. Tech Level 0 is assumed to be the [[Commander]] itself, as he is not built by any unit plant, and cannot be ressurrected.</text>
      <sha1>scihd3ws6og3sl7hw3z8yy4uuhvg422</sha1>
    </revision>
  </page>
  <page>
    <title>Teching</title>
    <ns>0</ns>
    <id>1401</id>
    <revision>
      <id>12528</id>
      <parentid>11217</parentid>
      <timestamp>2007-07-18T17:55:44Z</timestamp>
      <contributor>
        <username>Neddiedrow</username>
        <id>428</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1357">''Teching'' refers to the process from basic Level 1 factories, units, and ecomony structures to more capable (and expensive) Level 2 (or Level 3, depending on the mod) alternatives. Teching at the right pace is vital to victory. Attempting to tech too early results in an unmanageable drain on resources, often preventing a player from effectively responding to enemy attacks. Teching too late means one is liable to be out-produced by the enemy's superior economy and out-fought by their superior units.

The right time to tech is as soon as your level 1 economy's on solid footing. You want enough combat units and fixed defences to protect your base against enemy assaults and conduct a few raids. Exactly when this point is will vary from map to map. If your enemy hasn't been raiding you, you might be able to put off teching a little longer... Or might be forced to do it earlier, as he's been spending less on combat units.

Once one L2 factory has been established, the first priority is generally to build Advanced Construction Units, to begin construction of a L2 economy (Moho Mines, Fusions, etc) and defences. During and after this, construction of L2 combat units can begin, along with construction of other L2 factories to diversify one's forces.


''' [[Strategy_and_Tactics|&lt;- Back to Strategy and Tactics page]]'''


[[Category:Strategy]]</text>
      <sha1>td1l71owoj3x24g2vot07h25ursq1il</sha1>
    </revision>
  </page>
  <page>
    <title>Terms of Service</title>
    <ns>0</ns>
    <id>3812</id>
    <revision>
      <id>31023</id>
      <parentid>31018</parentid>
      <timestamp>2019-04-06T07:20:43Z</timestamp>
      <contributor>
        <username>Silentwings</username>
        <id>2883</id>
      </contributor>
      <minor/>
      <comment>/* Terms of Service of the SpringRTS lobby server */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3787">[[Main_Page|Wiki]] &lt; [[Community_Docs|Community]] &lt; {{FULLPAGENAME}}

== Terms of Service of the SpringRTS lobby server ==

''You agree not to use any abusive, obscene, vulgar, slanderous, hateful, threatening, sexually-oriented or any other material that may violate any applicable laws. Doing so may lead to you being immediately and permanently banned, and to your service provider and relevant legal authorities being informed of your actions and of data which personally identifies you.'' 

''You agree that the administrators and moderators of this server have the right to mute, kick or ban you at any time should they see fit, and you agree to abide by any such restrictions imposed on you.''

''You agree not to share, relay or otherwise publish the content of any passworded channels, passworded hosts or other contexts with restricted access, without the explicit permission of both the channel owner and server adminstrators.''

''You confirm that you are at least 13 years of age.''

''The SpringRTS server and its managed game hosts process and retain data generated by their users:''
&lt;ol style=&quot;list-style-type:upper-alpha&quot;&gt;
&lt;li&gt; ''Registration &amp; login details: email address, IP address, chosen username, (hashed) password.''&lt;/li&gt;
&lt;li&gt; ''Actions taking place via Springs infrastructure: chat, games and all associated ingame commands, related hardware and connectivity information, client software used; and derived statistics of these data.'' &lt;/li&gt;
&lt;li&gt; ''Source files, artwork and other content relating to games and development of games.'' &lt;/li&gt;
&lt;/ol&gt;
''The data are used to provide services that would normally be expected from an online gaming platform, primarily: ''
# ''Publicly available replays of games that were played in publicly accessible contexts. These include all actions taken by players, including chat, within the game.''
# ''Persistent game and chat elements, which make users aware of publicly visible events that previously occurred on the platform.''
# ''Development and provision of the Spring engine, plus supporting infrastructure, including a lobbyserver in which users chat to each other. ''
# ''Bridging of publicly accessible chat channels to external locations, typically those managed by our own users or subprojects for purposes explicitly related to SpringRTS.''
# ''Verification of user identity on login and within battle hosts.''
# ''Moderator action in the event of disputes and suspected misconduct.''
''We process and retain information on basis of legitimate interest, to provide the above services. See the [[Data_Usage|data usage]] page on the springrts.com wiki for further information.''

''Battle hosts listed on our server are typically provided and hosted by our users. When you join to a battle host your IP address will become known to this battle host. If you choose to operate a battle host yourself, your IP address will be shared with other users.''

''We allow connections to our server using external and bespoke client software; which you may be using. In such cases you must refer to your client software data usage policies for information concerning its treatment of the data you provide to it; the data usage policies summarised in this notice ONLY cover our usage of the data that is sent by you or your client software to our server.''

''While the administrators and moderators of this server will attempt to keep users from violating this agreement, it is impossible for them to maintain order at all times. Therefore you acknowledge that any messages or actions within our server expresses the views and opinions of its author and not those of the administrators and moderators, who will not be held liable for other users actions.''

''By using this service you hereby agree to all of the above terms.''</text>
      <sha1>ppby7y7zztqk1nuuweo6egv4e1ah9wm</sha1>
    </revision>
  </page>
  <page>
    <title>TestingYourGame</title>
    <ns>0</ns>
    <id>3608</id>
    <revision>
      <id>28224</id>
      <parentid>28159</parentid>
      <timestamp>2014-02-15T20:30:40Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>correct category Gamedev -&gt; Game Dev</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2666">=About this page=
Commands or tricks useful during spring modding.
Only add things average player does not know, ex not &quot;F4 shows metalmap.&quot;


==General==
* Start spring.exe directly to quickly test games or maps.

* To see some general info like game name, spring version: Press '''i''' or type '''/gameinfo'''

* Instead of packing your WIP game or map, use an .sdd folder: [[Gamedev:Structure#.sdd_directories]]

* In windowed mode it is easier to switch being playing and editing. See [[Springsettings.cfg#Fullscreen]]


==Console==
* The chat is the console. It is also logged to [[Infolog.txt]]

* See [[UI_commands]] how to use the console.

* Most commands require to type '''/cheats''' to enable cheating.


==Resources==
'''/atm''' - get 1000m,1000e (still needs storage)


==Spawn or destroy a unit or feature==
'''/give [amount] &lt;objectName | 'all'&gt; [team] [@x, y, z]'''

Example: '''/give supertank''' - This spawns one &quot;supertank&quot;

Can have parameters: '''/give 25 supertank 3 @1000,100,750'''

This spawns 25 &quot;supertank&quot; units to team 3 at coordinates 1000,100,750

'''/destroy''' - kill selected units

==Lua==
'''/luarules reload''' - reloads gadgets

'''/luaui reload''' - reloads widgets. Click an widget twice in widget menu to reload only this one.

'''/luagaia reload''' - reloads gaia gadgets


==See unitIDs==
Use widget such as http://springrts.com/phpbb/viewtopic.php?f=23&amp;t=25029&amp;p=467318&amp;hilit=unitids#p467318 to see unitIDs above units.


==Widget menu==
Hotkey: F11

In default widget menu:
*green name = running widget
*yellow name = widget crashed or disabled itself
*red name = disabled widget
*White stars left and right of name = Widget is contained in game.
*No stars = local widget (user added)

==Collision volumes==
See [[Gamedev:CollisionVolumes#How_to_see_them_ingame]]


==Performance==
Type '''/fps''' for framerate.
Type '''/debug''' for various info. (default hotkey: alt+b) 


==Teams/players, vision==
'''/info''' for a list.

'''/team X''' to change team. For example '''/team 2''' to controll units of team 2.

'''/spec''' - become spectator

'''/globallos''' - full vision (see the whole map)

'''/godmode''' - controll all teams. Generally you will want to combine with /spec or /globallos

'''/sharedialog''' (default hotkey: h) - give selected units to other teams.

==Unit scripts==
'''/reloadcob''' - COB scripts
'''/luarules reload''' - LUS

==CEG, particle effects==
Type '''/reloadcegs''' to reload from files.

==Weapons==
FPS-mode lists weapons of unit + status.
Can be useful to see why a unit is not firing to its weapon.

==Various==
* '''/wiremap''' - Can see units under terrain

[[Category:Game Dev]]</text>
      <sha1>nnlc7mw88wdsj1y7zbj14x21pyfkqjk</sha1>
    </revision>
  </page>
  <page>
    <title>The Complete Guide To Making A Spring Game</title>
    <ns>0</ns>
    <id>2985</id>
    <revision>
      <id>30954</id>
      <parentid>30703</parentid>
      <timestamp>2019-02-18T05:32:22Z</timestamp>
      <contributor>
        <username>Hawara</username>
        <id>2945</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="44443">= The Complete Guide to Making a Spring Game =

by PTSnoop. Everything you could want to know about making games for the Spring engine, all on one page.

&lt;!-- 
TODO:
Make a separate download for all the resources, instead of forcing people to use the example mod.
Split it up into multiple pages.
Fix some of the wiki formatting.
--&gt;

== Useful Downloads ==
 &lt;span class=&quot;warning&quot;&gt;ATTENTION: Engine changes mean the games/examples &lt;br/&gt;below DO NOT WORK 100% CORRECT ANYMORE:&lt;/span&gt; 
For exampe {{forumlink|topic=31015|title=no start units are spawned.}} Instead try [[SpringTutorialGame|SpringTutorialGame]]
----------
[https://springfiles.com/spring/games/empty-mod Empty Game] - the basic folder structure, and the files you need to get one cube model in game.

[https://springfiles.com/spring/games/empty-mod-plus-tank Empty Game Plus Tank] - the basic folder structure, plus one working tank unit.

[https://springfiles.com/spring/games/example-mod Example Game] - a very simple example game. Contains a Factory, Tank, Builder, and Energy Tower.

== Ideas ==

Presumably you already have some of these. If not, just wait around on the forums until someone makes a &quot;this would be a great game can someone make it plz&quot; thread.

It's probably worth sketching out some unit designs, concept art, game mechanics, and so forth, at this point, before you learn what can and can't be easily done with the engine. This way, you'll probably end up with a much more original game at the end of the process. Just bear in mind that you'll have to change around a lot of these ideas once you start finding out what works and what doesn't.

== Getting Spring ==

On Windows: Go to the [[Download]] page and download the installer. Install it.

On Linux: Depends on your distro. There's a [https://launchpad.net/~spring/+archive/ppa ppa] for Ubuntu, and [[SetupGuide | various guides]] for various other distros.

This'll give you the engine and lobby, but no games or maps. It's probably best if you download the [https://springfiles.com/spring/games/example-mod basic example mod] and a [https://springfiles.com/spring/spring-maps/smallsupremebattlefieldv2 smallish map], and put them in your /games and /maps folder respectively (for Windows, those'll be in C:\Users\YOURUSERNAME\My Documents\My Games\Spring ; for Linux, ~/.spring . You may have to create some folders.) Then load up SpringLobby and start a game against a computer RAI to make sure it's working fine.

== Tools Used in this Tutorial == 
*Texture Editing
**[https://www.gimp.org/downloads/ Gimp]
*Modeling
**[http://www.wings3d.com/ Wings 3D]
*Coding
**[https://notepad-plus-plus.org/ Notepad++]

== Making a 3D Model ==

There are [http://www.wings3d.com/?page_id=676 far] [https://wiki.beyondunreal.com/Legacy:Wings3D/Getting_Started better] [https://tutorial-index.com/index.php/site/site_category/tut_wings_3d/ tutorials] for learning Wings3D than this one I'm about to write. I suggest you go through a few of them rather than this one. Having said that, I'm still going to rush through the basics here. Because otherwise, it wouldn't really be a &quot;Complete Guide&quot;.

If you want to skip this bit, I've put the complete untextured model inside the [https://www.springfiles.com/show_file.php?id=2821 Example Mod]; just extract it as a zip file and look inside /objects3d.

Once you've opened up Wings3D, it'll look something like this:

[[Image:Wings1.png]]

Click your middle mouse button, and move your mouse around. The screen should rotate. Left click to escape rotation mode.
Roll the middle mouse button to zoom in and out.
While in rotation mode, drag your middle mouse button to pan around.

Right click on the background; it'll give you a menu.

[[Image:Wings2.png]]

Click the square to the right of the word &quot;Cube&quot;. It'll give you some more options (namely, the dimensions of the cube). Choose 20x20x20, and click OK.
(If you'd just clicked on the word &quot;Cube&quot; rather than the square, it'd have just given you a 2x2x2 cube.)

You should have a fairly large cube. (You may have to zoom out to see it properly.)

[[Image:Wings3.png]]

At the top of the screen, you'll notice four buttons:

[[Image:Wings4.png]]

These are for selecting vertices, edges, faces, and bodies. Play around with each of them; you'll soon figure out how they work. You'll notice clicking on one thing doesn't deselect the last thing; to deselect, you'll have to click on the thing again, or press space to deselect everything.

These four buttons also have keyboard shortcuts v, e, f, b. These are really useful, and worth getting used to.

You'll notice the cube is half-submerged in the ground. To move it above ground, select the whole cube body, and right-click.

You'll see a new bunch of options. Click &quot;Move&quot;. You'll see some more options. Click &quot;Y&quot;.
( The Y axis points upwards; the X and Z point to the side and front of your unit, respectively. )

The cube will start moving as you move your mouse left and right. The number in the top left hand corner tells you how much it's moving by. To place the cube in a new position, left-click; to snap it back to where it was originally, right-click instead.

To move in fixed units, rather than just continuous up/down, hold down the shift key while moving. This is useful for positioning things carefully, and for knowing where things are later on. Ctrl and Ctrl+Shift move in tenths and hundreds of units. Try to put the cube such that it's 10 units above where it was before (the undo button may be useful here).

[[Image:Wings5.png]]

Choose Face mode, and select the top face of the cube. Right click, and select &quot;Scale Uniform&quot;. Scale the face to 50% (Ctrl will help here) and click.
Now right click again, and move this face down 10 units in the same way you moved the whole box before.

[[Image:Wings6.png]]

Okay, now let's create another cube for the turret. There's no need for the options here, so just click on the word &quot;Cube&quot;.

[[Image:Wings6.png]]

Oh noes! Where's the new cube gone?

Okay, don't panic. Click on &quot;Window&quot; (on the File Edit View... row), and open up the Outliner. Then repeat for the Geometry Graph.

[[Image:Wings7.png]]

These are useful windows, since they show you everything in your model. Drag and resize these windows to somewhere sensible.

From the geometry graph, you can select specific pieces of your model. Pick the top one by clicking on its grey cube.

[[Image:Wings8.png]]

Deselect this piece, then select the other one. Then right click anywhere and try to move it upwards.

[[Image:Wings9.png]]

It should appear out of the top of the other shape. Put it 12 units above where it was before, so it hovers above the other shape.

Now select the face pointing in the Z direction, towards the front of the unit. The blue letter Z should show the right face.
Right-click and move this face a reasonably long way in the Z direction.

[[Image:Wings10.png]]

Now create a sphere, with radial x and y values of 10 and 10, and move it up to the top of the model.

[[Image:Wings11.png]]

Now let's give this incredibly ugly tank some tracks. Pick the edge tool, and select two edges along one side. 

[[Image:Wings12.png]]

Press C. A new edge should appear, connecting the previous two.
Now select the face that's now the lower half of that side (not both halves!), right-click, extrude, X. Extrude it out 2 units.

[[Image:Wings13.png]]

Do the same for the other side.

Now extrude the fronts and backs of the tracks, forwards and backwards in the Z direction.

[[Image:Wings14.png]]

And there we have our first tank model!

Now at this stage, before we texture anything, it would be a good idea to use the edge tool, to select all the edges of the cube blocks (you can do this from the geometry graph), and right-click set Hardness to Hard. This makes all those edges orange.

But when you click on this button here:

[[Image:Wings15.png]]

Then it gives you a more rendered look, blurring soft edges together and keeping hard edges clean and distinct. It doesn't look that amazing at this stage (especially without textures) but once your properly-modelled original units are in game, the proper hard/soft edges make them look that bit better. (Actually, you could do this later on in the process if you want, at any point before exporting to 3ds later on. But this seemed like a good time to mention it.)

[[Image:Wings16.png]]

So now we have a fairly basic clunky tank, ready for texturing. I think it's worth stressing at this point that it's worth going through lots more modelling tutorials and/or playing around with all the options to see what they do; also, when making models for real, it's worth bearing in mind that it's much better to make your own intriguing creative shapes than to just bolt cubes together. It takes longer, and isn't as good for easy tutorials, but it's worth it.

== UVMapping and Texturing a 3D Model ==

This section is based loosely on the tutorial  [https://springrts.com/phpbb/viewtopic.php?t=10612 here].

Okay, so we have a clunky tank model, but it's all grey. It needs texture.

To do this, we'll need to UVMap the model. What this means is to take the surface of the model and map it onto a 2d surface, so you can edit the 2d surface (in an image editor) and then it'll wrap around the model nicely. In theory.

At the moment, the model is in three parts; the base, the sphere turret, and the barrel. If we dived straight in and started uvmapping now, we'd end up with three texture files, which at the moment the engine can't cope with. We need to combine the parts into one body.

Using the body tool (shortcut b), select all the pieces, right-click, select &quot;Combine&quot;. You should end up with one body.

[[Image:Uv_1.png]]

With the body selected, right-click, then right-click on &quot;UV Mapping&quot;. A new window will appear; once you zoom out in the new window, it should look something like this.

[[Image:Uv_2.png]]

To uvmap this model, you'll need to split it up into faces. There are three main ways you can do this.

1) You can select edges, right click &gt; &quot;Mark edges for cut&quot;. The computer will cut along these edges, and leave you with a pretty decent net. This gives you control over which faces end up next to each other, on what sides.

2) You can select faces, right click, and mark them as different colours. The computer will take each side separately, keeping same-coloured faces together. This gives you control over which faces end up grouped together.

3) You can right click &gt; &quot;Segment by&quot; &gt; &quot;Projection&quot;. The computer does all the work, and leaves you with a bunch of coloured faces. This is the cheating way, gives you not much control over what goes next to what, and gives you some pretty strange results sometimes. But it's soooooo much faster. This is what I normally use, occasionally with a bit of neatening-up of colours afterwards.

[[Image:Uv_3.png]]

Once you've got all your edges or faces marked, right click, and Continue, Unfolding. The computer will give you something like this.

[[Image:Uv_4.png]]

At this point, it's probably worth moving and resizing your windows (with the bottom right hand corner) so you can see both your model and your texture.

[[Image:Uv_5.png]]

You'll notice the computer's given you a default letter-number texture. This is quite useful, since it shows you what kind of level of detail you can get with your model. Smaller letters means more detail.

You'll notice the uvmap has quite a lot of duplicated shapes. For example, there's one trapezoid for the left-hand-side tracks, and a different one for the right-hand-side tracks. We may as well just use the same texture for both, so let's move one onto the other.

The easiest way to do this is to select both trapezoids, right-click &gt; Move To &gt; Center, then right-click &gt; Move and move them to where you want them.

[[Image:Uv_6.png]]

Do this for all the duplicated shapes.

[[Image:Uv_7.png]]

You may have to rotate or flip some shapes to get them to line up. These tools are fairly self-explanatory.

Now if you look at the barrel of the main gun, then you'll probably have some sides have letters running from the turret to the end, and some have the end to the turret (if that makes any sense.)

[[Image:Uv_8.png]]

The final model'll probably look better if we have them all running the same direction. In the 3d model window, select the faces running the wrong direction, then flip them in the 2d texture window.

[[Image:Uv_9.png]]

Now if you look at the texture window, you'll see a lot of wasted space. We can scale each shape to use some of that space, and allow for more detailed textures.

(Beware: if you have multiple shapes overlapping, and you click on them, you'll just select the top one. To select multiple shapes in the same place, drag a box over some of the shape, and it'll pick all layers.)

[[Image:Uv_10.png]]

You'll notice I've made the main body texture pieces much larger, since they're going to have the most important texture on them. You'll also notice I've made the underside texture piece quite a lot smaller, since it's not really going to be seen by anyone unless they flip your tank over. Also, I've left slight gaps between each piece; otherwise, texture from one might bleed into the other.

You'll also notice there's still a lot of unused space; if I spent more time on this I could tighten it up a bit more. But I'd much rather get on with writing this tutorial.

Now the UVMapping is finished, you can create a texture for it. Right-click in the 2D window, click Create Texture.

[[Image:Uv_11.png]]

First of all, click Delete Unused Pass. This should leave you with a background and a &quot;draw edges&quot;; have a look at the options for each. Check the colour of the background; make sure it's got A (alpha) set to 1.0 rather than 0.0 (some versions of Wings3D handle this differently).

There are options for texture size. The general rule for texture size is that the more of this type of unit your players are going to be using, the smaller the texture. 256x256 is a good number for normal units; you might give your end-of-game epic unit of doom something closer to 1024x1024.

Click OK, and you should get something like this:

[[Image:Uv_12.png]]

Now you can close down the 2d uv-editor window, and look at your Outliner. You should see your black-and-white square texture in there. Select it, right-click on it, click &quot;Make External&quot; and save it somewhere as a .tga file.

Okay, now you can minimise Wings3D and open up the .tga file in an image editor. I'll be using GIMP here. Keep Wings3D open, though; we'll need it later on.

[[Image:Uv_13.png]]

GIMP is easy enough to use, so I'm not going to cover it in very much detail here. Start out with just bucket fill and pencil with different brush sizes, then have a look at the Pattern Fill tool option for bucket fill, and you should be able to get something like:

[[Image:Uv_14.png]]

...or hopefully much better and more interesting. I'm rushing here, hence the flat-colour areas (generally a bad idea) and generic blobby camoflage.

One thing that isn't very clear from the screenshots is that I've gone around the edge of a few areas with more colour. If you just go with the black lines you've been given, then white borders may start to bleed into your final textures. If you paint over the white around things, then this won't happen.

Now we can move back into Wings3D, where I've turned more-rendered-mode back on again.

[[Image:Uv_15.png]]

You'll notice the old texture is still in place. To bring the new texture in, right-click on the white square texture, and Refresh.

[[Image:Uv_16.png]]

And now everything looks so much more textured!

(In practice, leaving this step until the end is a bad idea. It's best to flick between Wings3D and Gimp, trying things out.)

Now the model's been textured, we'll need to separate out those pieces we combined together before. If everything's in one body, then the turret won't be able to move independently of the base, etc. Using the body tool, select the tank, then right click &gt; Separate.

Everything'll split back into constituent parts, with fairly generic names (cube2_sep7). You might want to rename these back to something sensible in the Geometry Graph at this point (right click &gt; Rename). I've gone for &quot;body&quot;, &quot;turret&quot; and &quot;gun&quot;.

And there we have the completed textured model. It's looking very blockish and plain, but hopefully you'll be able to do better once you start modelling properly.

(This finished textured model can be found in the Example Mod.)

Don't close GIMP just yet; we'll need it for the next part.

== Preparing a Model for the Engine ==

The original tutorial this part is based on can be found [https://springrts.com/phpbb/viewtopic.php?f=14&amp;t=13034 here]. Thanks, Pressure Line!

Okay, so we've got our model in Wings3D, uvmapped and textured. But at the moment, all the texture is fixed; there isn't anywhere for team colours. For that, switch back to GIMP.

In Spring, the main texture for each model uses the Alpha channel for teamcolour. Most programs use Alpha for transparency, so this may make your image previews slightly odd. But it'll all look fine once it's in game. In the alpha channel, white is teamcolour, black is no teamcolour, and greys in between are in between. If this doesn't make sense, just keep reading and hopefully it'll all be fine once we've finished.

(I say &quot;main texture&quot; because Spring also allows for secondary textures, which use red for glow, green for reflectivity, and alpha for transparency. I won't cover these here in any detail; play around with these if you want to learn more.)

In GIMP, collapse everything into one layer if you've got more than one. Right click on the layer, and click Add Alpha Channel if it's available. (If it's not, you've probably already got an alpha channel.)

Click Colors &gt; Components &gt; Decompose. This'll give you a box; set it to RGBA and press OK.

[[Image:Upspr_2.png]]

This should give you a second GIMP window, with greyscale and four layers. These are your Red, Green, Blue and Alpha channels. You'll notice the Alpha channel is completely white; we don't want this, because it'll make your whole unit teamcoloured instead of the grey-and-camoflage that we want for most of it.

Copy one of the other layers into the Alpha layer, so you can see where things are. Then make everything black, except for the texture for the turret at the top; make that white.

[[Image:Upspr_3.png]]

Then select Colors &gt; Components &gt; Recompose, and swap back to your first image. You'll see that most of it's vanished, except for the part you want in teamcolour. Don't panic; it's still there, it's just transparent. Save this as TGA.

(Alternatively, at this point, you could save it as DDS (you'll want DXT3 or DXT5, and lots and lots of mipmaps). I personally use TGA, because I've never got round to getting the GIMP DDS plugin working on my machine. If you use DDS, you'll get better performance.)

You can close GIMP down at this point, unless you're going to be still tweaking things.

Now we'll need to get the model out of Wings3D and into [[Upspring]]. Swap back to Wings3D, click File &gt; Export, and click on the box next to 3D Studio (3ds). This'll give you some options.

[[Image:Upspr_4.png]]

You want &quot;Swap X and Y axes&quot; off, Export normals and UV coords both on, and default texture file type set to Targa (tga). Click OK, and save it somewhere you'll remember.

(At this point, if you wanted to, you could use OBJ instead of 3DS; there's no real difference for [[Upspring]] as far as I can tell.)

Now open up [[Upspring]]. You should see something like this.

[[Image:Upspr_5.png]]

Click File &gt; Open, browse to your folder,  tell it to look for 3ds files, open the file.

[[Image:Upspr_6.png]]

It'll ask you what you want to do with the multiple meshes. Tell it 2) Load all objects as childs (children?) of an empty root object.

[[Image:Upspr_7.png]]

There's your model, looking small and untextured. On the right, choose the Objects tab.

[[Image:Upspr_8.png]]

You've got a hierarchy of model pieces. These determine what moves when what piece moves. We want the gun to move when the turret moves, and we want both of those to move when the whole body moves, so use the cut and paste buttons above to arrange things more like this:

[[Image:Upspr_9.png]]

I've also renamed the root piece to &quot;base&quot;, because it looks better.

Next, we need to move the origin for each piece, to define the points that things rotate around. Zoom in so you can see things properly (by dragging with the right mouse button), then select the &quot;only move origin&quot; option, and select the turret in the hierarchy.

[[Image:Upspr_10.png]]

The X pos, Y pos and Z pos options specify the position of the origin. By default everything's at (0,0,0). Now at this point, you could move into Wings3D, look at the actual height, and put it in the box. Or you can do what I do, and type guesses into the Y pos box until I get the red dot in what looks like the right place. (0,12,0) looks fine.

[[Image:Upspr_11.png]]

Now, interestingly, the gun origin will automatically have moved to (0,-12,0) to stay at the same place. This is because, when we set the origin of the turret, all pieces below the turret in the hierarchy will now measure their positions relative to that piece. Set the turret value to (0,0,0) so the origin's in the same place as the turret.

We'll need another piece later on, to mark the end of the barrel of the gun, so bullets know where to fire from. To do this, select the gun, click &quot;Add empty&quot;, call it &quot;flare&quot;.Position it just in front of the end of the barrel. (0,0,15) looks good to me.

[[Image:Upspr_12.png]]

Now move onto the Model tab. This gives you options for model centre and radius (this defines the hitsphere), and model height (this defines where the health bar goes). Again, you can measure these carefully in Wings3D, or just guess. There are Estimate buttons, but they often need a bit of adjusting afterwards.

To see what your numbers are doing, click on the &quot;3D&quot; to the top left hand corner of the 3D view, and tell it &quot;Draw model radius and height&quot;.

[[Image:Upspr_13.png]]

Now all the unit needs is the texture. Click over to the Mapping tab, click Browse for Texture 1, and load your texture from before.

[[Image:Upspr_14.png]]

And there we have the texture, with a teamcolour turret. If you've got a second texture for reflectivity and so on, you can put that as Texture 2.

Now if you're using TGA textures rather than DDS, you'll need one extra step. Click Texture Mapping &gt; Show UV Mapping. It'll show your texture; click Edit &gt; Flip UVs. Close the UV editor.

[[Image:Upspr_15.png]]

Now your texture looks strange and mangled. In fact, this is what your unit would have looked like if you'd put it in game without flipping UVs like that. Once it's in game, it'll be fine. This strange texture-flipping is a consequence of the way DDS files measure coordinates, I think. If you're using DDS, you won't need to do this step. 

One last thing: click on Object &gt; Recalculate vertex normals, 3d0 style &gt; All objects, then OK. This'll sort out some normals or something, I'm not too sure what it does but it makes your textures look better.

Now all you need to do is save the model as an s3o file.

And there we have our finished model and texture! Now to get them in game.

== Putting the Unit in a Game ==

The Spring engine uses .sdz or .sd7 files to load game content. In practice, these are just .zip and .7z files with renamed suffixes; to open up any mod, just rename it and extract it. Also, the Spring engine lets you just put all your game files in a folder in your /games directory, as long as it ends in .sdd .

The best place to get started here is to download the [https://springfiles.com/spring/games/empty-mod Empty Mod], extract it to a folder called EmptyMod.sdd in your /games directory. This is basically the bare minimum to get a unit in game.

Open up SpringLobby; if you've put it in the right place and everything else's correct, you should see an entry for &quot;Empty Mod&quot; in your games list. (You might need to tell it to Tools &gt; Reload Maps/Games first.) If you try playing it, it'll put a blank immobile cube at your start point.

To get the tank unit in game, you'll need as bare minimum an s3o file in /objects3d, a texture file in /unittextures, and a unitdef in /units. You already have two out of three; put them in the right folders.

Next, you'll need to make a unitdef. There are two ways of doing this: the old TA-ish way or the new lua way. You can write an FBI file, which is a text file with a list of variables, or you can write a lua file, which is a text file with a list of variables with slightly different syntax. In general, older tutorials and a fair bit of documentation will talk about FBI, but I'm going to use lua instead because it's more flexible and (I vaguely remember) slightly faster. Here's an example lua unitdef:

&lt;pre&gt;
local unitName  =  &quot;tank&quot;

local unitDef  =  {
--Internal settings
    BuildPic = &quot;filename.bmp&quot;,
    Category = &quot;TANK SMALL NOTAIR NOTSUB&quot;,
    ObjectName = &quot;tank3.s3o&quot;,
    name = &quot;Generic Tank&quot;,
    Side = &quot;TANKS&quot;,
    TEDClass = &quot;TANK&quot;,
    UnitName = &quot;tank&quot;,
    script = &quot;tankscript.lua&quot;,
    
--Unit limitations and properties
    BuildTime = 1000,
    Description = &quot;A generic tank unit.&quot;,
    MaxDamage = 800,
    RadarDistance = 0,
    SightDistance = 400,
    SoundCategory = &quot;TANK&quot;,
    Upright = 0,
    
--Energy and metal related
    BuildCostEnergy = 100,
    BuildCostMetal = 0,
    
--Pathfinding and related
    Acceleration = 0.15,
    BrakeRate = 0.1,
    FootprintX = 2,
    FootprintZ = 2,
    MaxSlope = 15,
    MaxVelocity = 2.0,
    MaxWaterDepth = 20,
    MovementClass = &quot;Default2x2&quot;,
    TurnRate = 900,
    
--Abilities
    Builder = 0,
    CanAttack = 1,
    CanGuard = 1,
    CanMove = 1,
    CanPatrol = 1,
    CanStop = 1,
    LeaveTracks = 0,
    Reclaimable = 0,
    
--Hitbox
--    collisionVolumeOffsets    =  &quot;0 0 0&quot;,
--    collisionVolumeScales     =  &quot;20 20 20&quot;,
--    collisionVolumeTest       =  1,
--    collisionVolumeType       =  &quot;box&quot;,
    
--Weapons and related
    BadTargetCategory = &quot;NOTAIR&quot;,
    ExplodeAs = &quot;TANKDEATH&quot;,
    NoChaseCategory = &quot;AIR&quot;,

}

return lowerkeys({ [unitName]  =  unitDef })

&lt;/pre&gt;

It's worth looking through this and understanding what each entry does. Most are fairly self-explanatory; for the ones that aren't, there's [[Gamedev:UnitDefs | this page]].

Put this file in your /units folder, then open up /gamedata/sidedata.lua and change 'startunit = &quot;cube&quot;' to 'startunit = &quot;tank&quot;. Then start up the mod in Spring.

[[Image:Mod_2.png]]

We should now have a model in game! You should be able to select it, and right-click it around the place. It can't attack anything yet, but one step at a time.

We're going to make this tank shoot small orange blobs. For this we need three things: a small orange blob image for it to fire, a weapon entry in the unitdef, and a unit animation script.

For the small orange blob image, I'm going to use flame.tga from Evolution RTS (it's a good game, with models and textures under CC-BY-NC-ND and almost everything else under a do-whatever-you-want license; well worth checking out).  It's in the /bitmaps folder of the example mod; put it in your own /bitmaps folder. Next, we need to open up /gamedata/resources.lua and tell the engine we've got a flame texture; just put a line &quot;flame = 'flame.tga' &quot; in the projectiletextures brackets (or comment out the one I've already left in there).

Here's the lua unitdef from before, with the new weapon data in place:

&lt;pre&gt;
local unitName  =  &quot;tank&quot;

local unitDef  =  {
--Internal settings
    BuildPic = &quot;filename.bmp&quot;,
    Category = &quot;TANK SMALL NOTAIR NOTSUB&quot;,
    ObjectName = &quot;tank3.s3o&quot;,
    name = &quot;Generic Tank&quot;,
    Side = &quot;TANKS&quot;,
    TEDClass = &quot;TANK&quot;,
    UnitName = &quot;tank&quot;,
    script = &quot;tankscript.lua&quot;,
    
--Unit limitations and properties
    BuildTime = 1000,
    Description = &quot;A generic tank unit.&quot;,
    MaxDamage = 800,
    RadarDistance = 0,
    SightDistance = 400,
    SoundCategory = &quot;TANK&quot;,
    Upright = 0,
    
--Energy and metal related
    BuildCostEnergy = 100,
    BuildCostMetal = 0,
    
--Pathfinding and related
    Acceleration = 0.15,
    BrakeRate = 0.1,
    FootprintX = 2,
    FootprintZ = 2,
    MaxSlope = 15,
    MaxVelocity = 2.0,
    MaxWaterDepth = 20,
    MovementClass = &quot;Default2x2&quot;,
    TurnRate = 900,
    
--Abilities
    Builder = 0,
    CanAttack = 1,
    CanGuard = 1,
    CanMove = 1,
    CanPatrol = 1,
    CanStop = 1,
    LeaveTracks = 0,
    Reclaimable = 0,
    
--Hitbox
--    collisionVolumeOffsets    =  &quot;0 0 0&quot;,
--    collisionVolumeScales     =  &quot;20 20 20&quot;,
--    collisionVolumeTest       =  1,
--    collisionVolumeType       =  &quot;box&quot;,
    
--Weapons and related
    BadTargetCategory = &quot;NOTAIR&quot;,
    ExplodeAs = &quot;TANKDEATH&quot;,
    NoChaseCategory = &quot;AIR&quot;,

    weapons = {
        [1] = {
            def = &quot;orangeblob&quot;,
        },
    },
}

local weaponDefs = {
    orangeblob = {
    name = &quot;Orange Plasma Cannon&quot;,
    weapontype = &quot;Cannon&quot;,
    accuracy = 10,
    areaofeffect = 100,
    avoidfeature = false,
    avoidfriendly = true,
    canattackground = true,
    collidefriendly = true,
    collisionsize = 8,
    commandfire = false,
    craterboost = 0,
    cratermult = 0,
    edgeeffectiveness = 0.1,
    explosionspeed = 128,
    impulseboost = 0,
    impulsefactor = 0,
    intensity = 1,
    noselfdamage = true,
    size = 4,
--        soundstart = &quot;tank_fire&quot;,
--        soundhit = &quot;explo01&quot;,
    range = 250,
    reloadtime = 1.5,
    rgbcolor = &quot;1.0 1.0 1.0&quot;,
    turret = true,
    texture1 = &quot;flame&quot;,
    weaponvelocity = 400,
--		explosiongenerator = &quot;custom:TANKGUN_FX&quot;,
    damage =
    {
        default = 55,
    },
    },
}


    unitDef.weaponDefs = weaponDefs
    return lowerkeys({ [unitName]  =  unitDef })
&lt;/pre&gt;

Finally, the animation script. This tells the unit what things to move when firing, moving, exploding etc. All we really want at this point is for the turret to rotate and pitch to the right angle. 

Again there are two ways of doing this: the old TA-style method, and the new lua method. You've got the choice of writing the animation script in BOS, then compiling it into COB using Scriptor; this is the best-documented method, but it needs the compiler, and it isn't as flexible. The other method is to write the animation script in lua; this lets you reload scripts mid-game without needing to recompile anything, and allows for the whole lua api in your animation scripts (more on lua later). The only real reason for using COB at the moment is &quot;I already have a working game with vast hordes of COB animations, and it would take a long time to change them all&quot;. If you're starting out a new game, then lua is really the best option.

here's an example animation script to go in /scripts/tankscript.lua :

&lt;pre&gt;
local base = piece &quot;base&quot;
local body = piece &quot;body&quot;
local turret = piece &quot;turret&quot;
local gun = piece &quot;gun&quot;
local flare = piece &quot;flare&quot;
-- declares all the pieces we'll use in the script.

local SIG_AIM = 2

local RESTORE_DELAY = Spring.UnitScript.GetLongestReloadTime(unitID) * 2
-- picks a sensible time to wait before trying to turn the turret back to default.

function script.Create()
    return 0
end

local function RestoreAfterDelay(unitID)
    -- defines a local funtion to wait a bit, then move the turret back to how it was originally.
	Sleep(RESTORE_DELAY)
	Turn(turret, y_axis, 0, math.rad(35))
	Turn(gun, x_axis, 0, math.rad(30))
end

function script.AimWeapon(weaponID, heading, pitch)
	Signal(SIG_AIM)
	SetSignalMask(SIG_AIM)
    -- each time the Signal is called, all other functions with the same SignalMask will stop running. This makes sure the tank isn't trying to fire at something, and restore the turret position, at the same time.
	Turn(turret, y_axis, heading, math.rad(35))
	Turn(gun, x_axis, -pitch, math.rad(30))
	WaitForTurn(turret, y_axis)
	WaitForTurn(gun, x_axis)
	StartThread(RestoreAfterDelay)
	return true
end

function script.FireWeapon(weaponID)
	EmitSfx(flare, 0)
end

function script.QueryWeapon() return flare end
-- The piece that the bullet/laser/whatever comes out of.

function script.AimFromWeapon() return gun end
-- The unit looks from this piece down the QueryWeapon piece, to see whether it's aiming at anything.

function script.Killed(recentDamage, maxHealth)
	return 0
end

function script.HitByWeapon(x,z,weaponDef,damage)
    -- This stops the unit taking damage until it's been built.
	if GetUnitValue(COB.BUILD_PERCENT_LEFT)&gt;2 then return 0
	else return damage
	end
end
&lt;/pre&gt;

Now all these files are in the right folders, start the game. You should now have a small tank, able to drive around and shoot at things!

You'll probably have noticed two things. Firstly, the explosion from being hit by an orange blob isn't very dramatic. Secondly, there's no sound. Let's fix the sound first.

First of all, you'll need an explosion sound. I'm using Explosion3 from https://www.partnersinrhyme.com/soundfx/PDsoundfx/gunsbombs.shtml, chopped around a bit in Audacity: again, you can get it from the Example Mod.  Put it in /sounds .

Next, we'll need to tell the engine about the sound file. Open up /gamedata/sounds.lua , and add in a new entry, so it looks something like:

&lt;pre&gt;
local Sounds = {
	SoundItems = {
		--- RESERVED FOR SPRING, DON'T REMOVE
		IncomingChat = {
			file = &quot;sounds/incoming_chat.wav&quot;,
			 rolloff = 0.1, 
			maxdist = 10000,
			priority = 100, --- higher numbers = less chance of cutoff
			maxconcurrent = 1, ---how many maximum can we hear?
		},
		MultiSelect = {
			file = &quot;sounds/multiselect.wav&quot;,
			 rolloff = 0.1, 
			maxdist = 10000,
			priority = 100, --- higher numbers = less chance of cutoff
			maxconcurrent = 1, ---how many maximum can we hear?
		},
		MapPoint = {
			file = &quot;sounds/mappoint.wav&quot;,
			rolloff = 0.1,
			maxdist = 10000,
			priority = 100, --- higher numbers = less chance of cutoff
			maxconcurrent = 1, ---how many maximum can we hear?
		},
		--- END RESERVED

--WEAPONS

		orangeblob_explo = { 
            file = &quot;sounds/Explosi3.wav&quot;, 
			rolloff=3, dopplerscale = 0, maxdist = 6000,


			priority = 10, --- higher numbers = less chance of cutoff
			maxconcurrent = 4, ---how many maximum can we hear?
		},

		--[[DefaultsForSounds = { -- this are default settings
			file = &quot;ThisEntryMustBePresent.wav&quot;,
			gain = 1.0,
			pitch = 1.0,
			priority = 0,
			maxconcurrent = 16, --- some reasonable limits
			--maxdist = FLT_MAX, --- no cutoff at all
		},
		--- EXAMPLE ONLY!
		MyAwesomeSound = {			
			file = &quot;sounds/booooom.wav&quot;,
			preload, -- put in memory!
			loop,  -- loop me!
			looptime=1000, --- milliseconds!
			gain = 2.0, --- for uber-loudness
			pitch = 0.2, --- bass-test
			priority = 15, --- very high
			maxconcurrent = 1, ---only once
			--maxdist = 500, --- only when near
		},]]
	},
}

return Sounds
&lt;/pre&gt;

Finally, we need to tell the unitdef what sound to use. Open it up, and in the weapondef, add the line

    soundhit = &quot;orangeblob_explo&quot;,

Now, if you try the game in Spring, you should get an explosion sound every time an orange blob hits something. To add a sound on firing, do the same, but add

    soundstart = &quot;whatevername&quot;,

to the weapondef instead. 

&lt;span class=&quot;warning&quot;&gt;Note: If SpringRTS displays errors when loading the sound, try using OGG format instead. See this [https://springrts.com/phpbb/viewtopic.php?f=52&amp;t=36920 thread for more error details].&lt;/span&gt;

Now for the explosion. For particle effects like this, there are two ways (the old TA-style way and the new lua way, again). You can write a CEG tdf file defining what sprites and particles go where and do what, or you can use LUPS (Lua Particle System). Now, this time I'm going to recommend the old TA-style way, because it's well documented and I know how to use it (whereas I don't have a clue how to use LUPS, or where to find out how to use it), but more importantly because it doesn't work on some ATI graphics cards. LUPS is much more flexible, but for now it's best only used for aeroplane trails and other effects that people won't complain about if they're missing.

To use CEG, first you'll need to put a tdf file like this one in the /gamedata/explosions folder:

&lt;pre&gt;
[TANKGUN_FX]
{
[groundflash]
   {
      flashSize = 45;
      flashAlpha = 0.9;
      circleGrowth = 3;
      circleAlpha = 0.3;
      ttl = 30;
      color = 1, 0.5, 0;
air=1;
     ground=1;
      water=1;
}
[heatcloud_MED_EXPLOSION_FX01]
   {
class=heatcloud;
      [properties]
      {
texture=explodeheat;
      heat = 30;
      maxheat = 30;
      heatFalloff = 1;
      size = 30;
      sizeGrowth = -0.3;
      sizemod = 0;
      sizemodmod = 0;
      speed = 0, 1.5, 0;
      pos = 0, 5, 0;
      }
air=1;
      water=1;
      ground=1;
      count=1;
}


[MOREDOTS]
  {
class=CSimpleParticleSystem;

   [properties]
   {     
   alwaysVisible=1;
   Texture=randdots;

   colorMap = 1.0 1.0 1.0 0.05   0.2 0.9 0.5 0.01  0.1 0.8 0.1 0.00;

   pos      = 0, 2, 0;
   gravity     = 0, -0.1, 0;
   emitVector  = 0, 1, 0;
   emitRot     = 45;
   emitRotSpread  = 32;

   sizeGrowth  = 0.5;
   sizeMod     = 1;

   airdrag        = 0.8;
   particleLife      = 5;
   particleLifeSpread   = 7;
   numParticles      = 16;
   particleSpeed     = 8;
   particleSpeedSpread  = 3;
   particleSize      = 20;
   particleSizeSpread   = 0;

   directional    = 1;
   useAirLos      = 0;
   }
air=1;
ground=1;
count=1;
}

}
&lt;/pre&gt;

You'll also need some more explosion images (also shamelessly stolen from EvoRTS), again available in the Example Mod.

You'll need to put these in /bitmaps, then name them in /gamedata/resources.lua . Also in the weapondef, you'll need to put

    explosiongenerator = &quot;custom:TANKGUN_FX&quot;,

And now, in game, you should have a working moving tank that shoots things! Congratulations!

== Other Small Things ==

In SpringLobby, you'll notice a &quot;Side: 1&quot; option whenever you mouse over one of the players. It's easy enough to change the &quot;1&quot; to something a bit more descriptive of your side, by putting a 16x16 bmp in /sidepics . If your faction is called &quot;TANK&quot; in sidedata.lua, then call it /sidepics/tank.bmp .

Once you have construction units, it'll help if players have pictures of whatever it is they're building. Put these in /unitpics, and put lines in the unitdefs like
    BuildPic = &quot;filename.bmp&quot;,   

== Structure of a Game ==

Before moving on to factories, builders, and other types of unit, I think it's worth going through the structure of what folder means what in a mod file.

* /bitmaps - This contains the .tga files for explosions, lasers, and so on. Each image here needs to be named in /gamedata/resources.lua before it can be used.
** /bitmaps/loadpictures - Any jpg files in here will be shown while the game is loading.

* /gamedata - Lua files defining game information.
** gamedata/armordefs.lua - defines different armour groupings. More information: [[Armordefs.lua]].
** /gamedata/explosions - TDF files for CEG explosions.
** /gamedata/messages.lua - messages given whenever a team loses the game. More information:  [[Messages.lua]]
** /gamedata/modrules.lua - various parameters for your game, like flanking bonuses, rate at which experience is gained, etc. Have a look at existing games to see what they do. More information: [[Modrules.lua]]
** /gamedata/movedefs.lua - defines different types of movement (hovercraft, tank, ship etc). More information: [[Movedefs.lua]].
** /gamedata/resources.lua - all the bitmaps in /bitmaps, with names and what they do (are they for projectiles, groundflares, etc)
** /gamedata/sidedata.lua - defines the different factions, and what unit they start off with. In theory, you could do all this with a lua gadget (more on this later), but sidedata.lua works pretty well anyway.
** /gamedata/sounds.lua - defines all the sound files, with values for volume, priority, doppler effect, etc.

* /LuaRules - contains gadgets. These are scripting files that change gameplay; more info later.
** /LuaRules/Gadgets/spawnPlayer.lua - creates a starting unit at the beginning of the game, depending on /gamedata/sidedata.lua . In theory, you could adapt this to generate random units, create whole bases at the start of games, etc.
** /LuaRules/Gadgets/unit_script.lua - this is needed for lua animation scripts to work, for some reason.
* /LuaUI - contains widgets. These are scripting files that change the user interface; more info later.

* /music - contains music for the music widget.
* /sounds - contains sound.

* /objects3d - contains all the s3o models.
* /scripts - contains all the unit animation scripts.
* /units - contains unit definitions.
* /unittextures - contains textures for the s3o models.

* /unitpics - pictures for each unit, shown on build mens.
* /sidepics - pictures for each faction, shown in lobby.

* /[[modinfo.lua]] - defines the mod name, description, and if it requires any pre-existing content.
* /EngineOptions.txt - exactly what it says on the tin. Look at different games to see what they do.

== Other Types of Unit ==

At the moment, you've got a tank unit. This is useful, but for your game, you'll probably need some factories, builders, buildings, and so on (depending on how unconventional your game is). I think the best way to show how to make these units is by example, so here's a basic mod with about one of each:


Load up a game against RAI (that AI works for pretty much any mod, as long as your lua isn't too strange). Then extract it open (it's really just a .zip file), look through the code and see what the scripts and unitdefs are like.

== Lua Gadgets and Widgets ==

Now this is where things start getting really interesting. Gadgets are small lua script files that let you add things to the basic Spring gameplay. And by &quot;things&quot;, I mean &quot;anything&quot;. Want units that morph into other units? Lua. Want tech trees and unit prerequisites? Lua. Want units that fire other units? Lua. Want meteor strikes and random dinosaurs to spawn out of the map and attack players? Lua. Want napalm? Lua. Want time travel? Well, [https://achrongame.com/ maybe a separate engine designed for RTS time travel would help you better here], but presumably it can be done with enough Lua.

And because it's so versatile, for now I'm just going to point you to [[Lua Scripting | the lists of callouts and callins]] and stand back. Maybe I'll come back to this bit and write a basic gadget tutorial at a later date, but for now the forums are your friend.

It's not very big yet, though, so for more examples just look at the [https://github.com/Balanced-Annihilation/Balanced-Annihilation/tree/master/luarules/gadgets Balanced Annihilation gadget source code].

Widgets are like Gadgets, but instead of changing gameplay they change the user interface. So if you want to add a bunch more buttons along the right hand side, or glowing outlines around certain types of unit, you'd probably use a widget. You can also add widgets to your local copy of Spring that aren't in the mod file itself; this can be useful to give yourself debug information that other players won't have, but bear in mind that it's pretty likely other players will also be using their own array of widgets to enhance their gaming abilities when playing against you.

Have a look at the [https://github.com/Balanced-Annihilation/Balanced-Annihilation/tree/master/luaui/Widgets_BA Balanced Annihilation widget source code] for some examples.

== Maps and Missions ==

Okay, so you've got a working multiplayer game. Now how about single player?

There aren't really any Spring games at the moment with a single player campaign. All the tools are in place, but no-one's actually used them yet. Now, I'm willing to bet that if you manage to give your game a decent SP campaign, and the multiplayer and graphics aren't too bad, it could quickly be adopted as the Spring engine's flagship game. No, I'm serious here.

To make some maps, see [https://springrts.com/wiki/Mapdev:Main Map Development]

For single player missions, there's a [https://springrts.com/phpbb/viewtopic.php?f=14&amp;t=24278 Mission Editor] &lt;s&gt;with a [https://code.google.com/p/zero-k/wiki/MissionEditorTutorial good tutorial] of its own, so I don't need to write one&lt;/s&gt;. Enjoy!

[[Category:Game Dev]]</text>
      <sha1>qwvst91gakdgzcsfyx5si6rry6dbfwp</sha1>
    </revision>
  </page>
  <page>
    <title>The Lighter Side Of Spring</title>
    <ns>0</ns>
    <id>1898</id>
    <revision>
      <id>26462</id>
      <parentid>26441</parentid>
      <timestamp>2013-03-10T14:13:25Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>/* Comics, Images */ kill dead link</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2155">{{Historical}}

Even developers, content creators and rabid players occassionally have abberant moments of comedic genius. Therefore, there is a section of the Spring Wiki dedicated to the lighter side of what we as a community do and who we as a community are.

===Comics, Images===
*Spring Comix!
**[http://springrts.com/phpbb/viewtopic.php?p=376911 By Gota]
**[http://springrts.com/phpbb/viewtopic.php?p=292939 By Jazcash]
**[http://springrts.com/phpbb/viewtopic.php?p=379962 By CarRepairer]
*[[1v0ry_k1ng's Works]]
*[http://h-4.abload.de/img/toolongdidntreadgsbs.jpg knorke unit developement comic]
*[http://springrts.com/wiki/File:SPRING8BW15J.jpg BuildersWars15J loadscreen]
*[http://springrts.com/phpbb/viewtopic.php?f=10&amp;t=15187&amp;start=36 The Battlefield in CORE SUXXX from the-middleman]
*[http://springrts.com/phpbb/viewtopic.php?f=10&amp;t=15405 The Battlefield in Roleplay from the-middleman]
*[http://commanderlookingatthings.tumblr.com/ commander looking at things]

===Sound &amp; Video===
*[[ Rox Knorke ingame experimental moddev ]]
*[http://www.youtube.com/watch?v=Mtz7arOBZnQ XTA Video: The best ally ever]
*Spring Beatz [http://springrts.com/phpbb/viewtopic.php?f=1&amp;t=9127 Volume one] and [http://tindeck.com/listen/yasv Volume Two] -- Caution: Explicit lyrics!
*[http://springrts.com/phpbb/viewtopic.php?f=9&amp;t=26805 youtube channels of various spring people.]

===Quotations===

*[http://quotes.springlobby.info/ SpringBash] - Real quotes from lobby, often taken out of context!

===Ingame art===
*[http://springrts.com/phpbb/viewtopic.php?f=1&amp;t=25124 some screenshots]

===Forum===
*[http://springrts.com/phpbb/viewtopic.php?f=9&amp;t=24802&amp;start=78 Random PicassoCT post]
*[http://springrts.com/phpbb/viewtopic.php?f=11&amp;t=27387 awesome graphic bug]
*[http://springrts.com/phpbb/viewtopic.php?f=44&amp;t=24689&amp;start=1064 AF's newspaper] &amp; [http://springrts.com/phpbb/viewtopic.php?f=44&amp;t=24689&amp;start=1080 part 2]
*[http://springrts.com/phpbb/viewtopic.php?f=12&amp;t=25266 who put rapid in a subfolder?]
*[http://springrts.com/phpbb/viewforum.php?f=50 AA:Forever]

===Diverse===
https://github.com/spring/spring/blob/master/rts/Rendering/Models/AssIO.cpp</text>
      <sha1>f0qi3lte811101cmkgsw19r3v60n9wa</sha1>
    </revision>
  </page>
  <page>
    <title>The Lost Legacy</title>
    <ns>0</ns>
    <id>1236</id>
    <revision>
      <id>18886</id>
      <parentid>16909</parentid>
      <timestamp>2010-03-13T16:42:42Z</timestamp>
      <contributor>
        <username>Koshi</username>
        <id>2371</id>
      </contributor>
      <comment>made historical</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="761">{{historical}}

== The Lost Legacy ==

The Lost Legacy Race, originally by [[User:M3G|M3G]], ported to Spring by [[User:NOiZE|NOiZE]].

This is the TA:Spring version of the masterpiece race created by the TA creation veterans M3G and Nik. Striving for perfection, they have completed an astoundishing number of 150 new units. This is by far the most expanded and carefully balanced race that has been created to this point. Explore the strategic values of the new submarine pens, defensive constructions and the many supersized monsters that let you toy with the opponent.

== Links ==
* [http://taspring.clan-sy.com/phpbb/viewtopic.php?t=2860 Forum Thread]
* [http://www.fileuniverse.com/?p=showitem&amp;ID=1967 Download - The Lost Legacy v1.04]

[[Category:Mods]]</text>
      <sha1>3ex1l37u6ujyyya8lmfdraz6fy8uofd</sha1>
    </revision>
  </page>
  <page>
    <title>The Secret Front</title>
    <ns>0</ns>
    <id>1850</id>
    <revision>
      <id>19029</id>
      <parentid>14374</parentid>
      <timestamp>2010-03-13T18:14:49Z</timestamp>
      <contributor>
        <username>Koshi</username>
        <id>2371</id>
      </contributor>
      <comment>fix category</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="556">Possibly the least employed strategy in Spring, due to structural difficulties, the concept is as thus - one keeps his or her actions completely unknown, striking in secrecy and indeed having no easily targetable structures or units.

Cloaking, stealth, quick wits - this overhead strategy requires many tactical concessions to achieve.

It will not be viable in most mods due to the lack of stealthed or cloakable resource structures... however, try it out as ARM in Balanced/Complete Annihilation... or URC in Expand &amp; Exterminate.
[[Category: Strategy]]</text>
      <sha1>tap8z722ayqac3lk8g5z5xoit432blu</sha1>
    </revision>
  </page>
  <page>
    <title>Theory On Strategy</title>
    <ns>0</ns>
    <id>1413</id>
    <revision>
      <id>19030</id>
      <parentid>12570</parentid>
      <timestamp>2010-03-13T18:15:00Z</timestamp>
      <contributor>
        <username>Koshi</username>
        <id>2371</id>
      </contributor>
      <comment>fix category</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10079">Disclamer:  This page is almost entirely the opinion of Lindir The Green.  It is '''not''' meant to be considered fact; it is merely my analysis of Strategy, particularly how it relates to the genre of the RTS.  Take it or leave it.

I appreciate merciless editing, but please don't change the ''meaning'' of anything.


== Basics of Strategy ==

In real life, strategy is trying to figure out the &quot;rules&quot; of the universe and then using them to accomplish something.  But in a game, the rules are (usually) already known.  So strategy in a game is using those rules to accomplish an objective without a prior learning phase.

In reality, strategy mostly requires observation.

In a game, strategy mostly requires logic and creativity.

In a multiplayer game, the new element of trying to outguess your opponent is added.  The simplest multiplayer game is Rock/Paper/Scissors, which requires no logic or creativity.  It is pure multiplayer strategy.  The only differences between the rock, the paper, and the scissors are that they come in different orders in your mind.  So if you are playing an opponent that you have a low oppinion of, you usually use paper.  But if you are playing an opponent that you have a slightly higher opinion of, you usually use scissors.  And so on.

The only way to predict what your opponent is going to use is to try to guess what your opponent thinks you are going to use, based on how smart you think that your opponent thinks that you are.

Almost every multiplayer strategy game involves figuring out what your opponent is going to do, and then reacting accordingly.

The multiplayer game that requires no multiplayer strategy is Tic-Tac-Toe.  If you logically think about the game for 10 minutes, you will become unbeatable. The game will turn into a stalemate as no creativity or effort is required with so few effective choices.

Most multiplayer card and board games are a cross between &quot;normal&quot; strategy and &quot;multiplayer&quot; strategy.  But if you completely understand the game (like some chess masters, and me at Euchre) the game for you becomes '''only''' &quot;multiplayer&quot; strategic.

But some multiplayer board games also require diplomacy, which is just using social skills to your advantage.

Magic the Gathering requires insane amounts of &quot;normal&quot; strategy, moderate amounts of diplomacy, and significant &quot;multiplayer&quot; strategy, though this value seems to increase with an increase in the number of participants.

Roleplaying games are very different from other games.  They require creativity above all, with some &quot;normal&quot; strategy if the players are competitive. Multiplayer strategy enters in at the most impossible moments, and the rules theoretically can change at any time. But, since there are many different games and many different DMs, there are many exceptions to these tentative rules.

== Strategy in Video Gmes ==

In video games, the rules are much much more complicated, and in non-turned based games, the elements of reflexes and hand-eye coordination are added to the brew. This complexity of rules is, of course, secondary only to the complexity in some roleplaying games.

I think that even the most hard c0r3 action games have more strategic depth than any board game, because of their extreme complexity.  I would estimate Jazz Jackrabbit (my first computer game) to be at least 20x more complex than the nerdiest military combat board game.

Conter Strike is probably around 500x more complex.

The reason most people don't think that action games are strategic is because the strategy is &quot;diluted&quot; by action, a common myth. Action simply places strategy in a time-limited frame.

Most video games, even if all the rules are known, require lots of observation to figure out how they all interact.

But once you figure out (or are told by a walkthrough), the game stop requiring any &quot;normal&quot; strategy, and become pure hand eye coordination and reflxes.  But that level of understanding would only be possible by a computer program.

Multiplayer video games are often really just extremely complex games of r/p/s, but with significant differences between the different choices.  The realism of the games makes it easier to figure out how the r/p/s arrangements work; it is easier to remember that early anti-air defense beats an early air raid thant it is to remember that if a construction unit builds a certain type of building, that building will make the fast units from a certain type of building less effective.

== The RTS ==

The Real Time Strategy game is IMHO the greatest video game genre ever, because a (good) RTS is so intellectually stimulating.  Someone playing a good RTS is trying to come up with good unit combos, trying to figure out what the enemy is doing, trying to figure out how to best counter what the enemy is doing, trying to keep  track of all units and how the overall battle is going, and looking out for emergency situations that require immediate attention.  The winner has the best combination of:

*&quot;Normal&quot; Strategy
*&quot;Multiplayer&quot; Strategy
*Diplomacy
*H/E coordination
*Reflexes
*Multitasking skillz

But, like all games with static rules, once the rules are theoretically perfectly analysed, all &quot;Normal&quot; strategy disapears.

However, since the rules are so complex, and there are almost infinite combinations of units, maps, and starting resources, it is impossible for a human to perfectly analyse an RTS.  But, fortunately, Humans are very good at abstractly coming up with generalizations, that often carry over from the real world.  For example, for a human, it is common sense that tanks are good against  standard infantry, buildings, and on plains.  We shouldn't even have to analyse the game to figure that out.

== Micro in an RTS ==

Micromanagement is probably the single most fought over subject in an RTS.  Starcraft players like a lot of it, TA players like less of it.  But in the end, it all boils down a few simple concepts.

The more things you can pay attention to, the more skill you have at multitasking.  And so the more micromanagement in a game, the higher the gap between the skillful multitaskers and the non-skillful multitaskers

There are two different types of micromanagement in real-time strategy games, which I call &quot;tactical&quot; and &quot;pointless&quot;.

&quot;Tactical&quot; micromanagement is comprised of small scale activities and maneuvers, sometimes of a r/p/s nature.  Deciding which unit should attack which and where each unit should move, for optimal enemy destruction.  It involves split second assesments of the situation, and out guessing your opponent.  According to general opinion, some &quot;tactical&quot; micromanagement in a game is a good component of balanced play, with the perfect amount varying depending on the player.

&quot;Pointless&quot; micromanagement consists of the multitude of little tasks that require little to no intellect or forethought to pull off.  Clicking 100 checkboxes requires manual skill to do quickly, but doesn't require any &quot;strategy.&quot;  Telling every unit to attack a single unit for increased efficiency requires valuble brain time, which skilled multitaskers have more of, but doesn't really add strategic depth to the game.  Telling all of your hawks to go forwards and backwards and forward and backwards requires a lot of thinking, but it doesn't really provide options for strategy.

&quot;Pointless&quot; micromanagement isn't neccesarily bad though.  Arcade games consist almost entirely of it, and, while there is little strategy in its execution, it requires strategy to decide how much of it to use.

Starcraft uses large amounts of both types of micro, TA uses much less &quot;pointless micro&quot;, and it seems like Supreme Commander will use very little of either.  

The interesting about the Spring engine is that it offers (as of now) unparalleled flexibility in exactly how much micro to use, because so much can be delegated to an AI, freeing up the player for large scale multiplayer strategy. It's always a tradeoff which level of control to do different things off, which adds yet another dimension to gameplay.

== Gameplay and Balance in an RTS ==

A Real Time Strategy game, or Spring mod, is comprised mostly out of units that players build.  What determines the balance and much of the gameplay is when exactly specific units should be build.

The only time that a mod definitely is '''not''' balanced is when there is never any reason to build a certain unit; if another unit or group of units would always be &quot;better&quot; for a player to build. The huge variety of maps and specific conditions that occur make achieving an unbalanced game difficult. It is also important to remember though the effects of player perception. Even a completely useless unit on paper could be the best thing to build if it is considered useful by players, or to decieve the oponent about the extent of a player's experience or abilities.  Which makes the number of unbalanced mods approach 0.

However, even a balanced mod can be no fun to play, which is where the real act of balancing comes in.  And it is generally a good idea to ensure that any unit could be the best thing to build in a significant proportion of situations.

While there may always be a &quot;best&quot; unit to build, since the information (and processing speed) of a player is restricted, there are usually several good units to build at any given time.  How many depends on the mod.

A mod is usually less fun to play, and called imbalanced, if at any given time there are very few best units to build.  This is why there is so much criticism of mods/games where a certain build order is neccesary to even have a chance.  It requires much &quot;Normal&quot; strategy to figure out what that build order is... But very little &quot;Multiplayer&quot; strategy once the optimal build order is know.

While more options generally allow for a mod to have more opportunities for &quot;Multiplayer&quot; strategy, options also increase the learning curve, and too many options can decrease the importance of &quot;Multiplayer&quot; strategy, by &quot;watering it down,&quot; and making individual choices less risky.
[[Category: Strategy]]</text>
      <sha1>kcs9mydmpi4sjdy09zfgttw892z9rx8</sha1>
    </revision>
  </page>
  <page>
    <title>Timberwolf Mod</title>
    <ns>0</ns>
    <id>1841</id>
    <revision>
      <id>21297</id>
      <parentid>20587</parentid>
      <timestamp>2011-02-24T17:00:51Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="578">{{deprecated}}

A mini-mod produced by the Battletech mod team, the Timberwolf mod consists of one Timberwolf per player, and can be used in a crude sense to emulate the gameplay of  the Mechwarrior series, albeit with a certain amount of limitations due to the FPS system currently included in Spring.

This mini-mod was packaged with the Community Mod Pack v1 distributed by Caydr. It may be noted that the original distribution features a few incomplete files, and thus the Timberwolf is not as effective as it should be.

Back to [[Mods]]
[[Category:Mods]]
{{Category:Mods}}</text>
      <sha1>ia9i1z9fwcrx23na6998x83ra2xa1pa</sha1>
    </revision>
  </page>
  <page>
    <title>ToolBox</title>
    <ns>0</ns>
    <id>3538</id>
    <revision>
      <id>28045</id>
      <parentid>28044</parentid>
      <timestamp>2013-11-30T11:10:00Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>/* Where do I get it? */ clarify</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2273">==What is it?==
A bunch of handy game and map dev tools bundled into one package, accessed through a handy [[Chili]]-driven GUI with [[Chili]] already included in the package.

==How do I use it?==
Open up the sdd, open up modinfo.lua, set your mod as a dependency.

Run spring.exe and choose ToolBox.

(Mappers can run it stand-alone without a dependency. You may have to clear / edit ArchiveCache.lua if you switch to dev-ing another mod with it - Alternatively make it into an sdz/7 and it should be rechecked each time it is loaded).

Most of the tools are accessible through the menu (Spanner then ToolBox) some are accessible through F11 directly.

==Where do I get it?==
Automatically packaged .zip files are available on [https://github.com/gajop/Toolbox github] but you will have to collect the submodules (i.e. Chili) seperately:

* [https://github.com/gajop/Toolbox/archive/master.zip ToolBox ZIP]
* [https://github.com/gajop/chiliui/archive/master.zip Chili ZIP] Extract this into ToolBox.sdd, not into your game

Instead it is better to get it using git directly:
 
&lt;code&gt;&lt;pre&gt;git clone --recursive https://github.com/gajop/Toolbox.git &lt;/pre&gt;&lt;/code&gt;
(--recursive call will pick up submodules)

==What tools does it give me?==
So far it includes:
* {{forumlink|topic=24882|title=Boxxy}} - For tweaking unit collision volumes
* {{forumlink|topic=25104|title=Animator (aka Unit Poser)}} - For animating units
*{{forumlink|topic=24499|title=CEG Spawner - For testing CEG's in game}}
* Water Configure - For tweaking map water settings
* Widget Profiler - For profiling your widgets


==Who is responsible for this abomination?==
In no particular order:
* knorke - Made Boxxy, Unit Poser
* CarRepairer - Made CEG Spawner, made all the Chili GUIs for the tools and the menu
* FLOZi - Had the idea of using a dependency and badgered Car into making it happen
* jK - For Chili and the water config and profiler widgets (and for reminding me about lockluaui.txt)
* Tobi - For LUS
* gajop - Updates to Chili and creating scenario &amp; map editor on the basis of ToolBox

==Suggestions welcome==
So far FBI2Lua, buildpic generator, feature placer have been suggested

Discussion, questions etc:  {{forumlink|topic=27268|title=ToolBox thread on forum}}

[[Category:Game Dev]]</text>
      <sha1>ttosvl42vrufpft3qhekult8k5mqxll</sha1>
    </revision>
  </page>
  <page>
    <title>Transport scripts</title>
    <ns>0</ns>
    <id>3344</id>
    <revision>
      <id>26355</id>
      <parentid>25385</parentid>
      <timestamp>2013-03-08T16:15:46Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>[[Category:Emmanuel]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2498">--'''&lt;big&gt;transportation&lt;/big&gt;'''--

==ground sea transports ==

*to check and improve
&lt;code&gt;
:local loader=piece &quot;loader&quot;

:function script.QueryTransport(passengerID)
:return loader
:end

:function script.TransportPickup (passengerID)
:Spring.Echo(passengerID)  
:SetUnitValue(6, 1)-- BUSY      set BUSY to 1;
:Spring.UnitScript.AttachUnit(slot, passengerID)
:currSlot=currSlot+1
:SetUnitValue(6, 0)--set BUSY to 0;
:end

:function script.EndTransport(each, passengerID)--ground UnloadLandFlood  after the last unit unloaded.
:end


:function script.TransportDrop (passengerID, x, y, z )
:SetUnitValue(6,1)-- BUSY    
:Spring.UnitScript.DropUnit(passengerID)
:SetUnitValue(6,0)
:end
&lt;/code&gt;


==Air transports==
*todo
:function script.BeginTransport(passengerID) end



===ModRule tags involved in transportation :===
:bool transportAir Default: false  
Can aircraft be transported?
:bool transportShip Default: false  
Can ships be transported?
:bool transportHover Default: false  
Can hovercraft be transported?
:bool transportGround Default: true  
Can ground units be transported?
:bool targetableTransportedUnits Default: false New in version 89.0 
Can transported units be targeted by weapons? true allows both manual and automatic targeting.


===UnitDef tags involved in transportation :===

:transportCapacity=1,-- - Int - This is simply the number of units it can hold

:transportMass=15000,-- Float - This is the total maximum mass of units it can hold (Mass being another unitdef tag which defaults to the buildCostMetal)

:transportSize=6,-- - Int - This is the maximum size of unit it can hold, in terms of the transportees footprintX

:minTransportSize=1,-- - Int - The minimum size of footprint that this transport can hold

:minTransportMass=1,-- - Float - The minimum mass a unit must have to be transported by this (N.B. this is not quite the inverse of transportMass)

:cantBeTransported=true,-- - bool - This unit can / cannot be transported by any transport

:transportByEnemy=true,-- - bool - This unit can / cannot be transported by enemy transports

:ReleaseHeld = true,		--transported units survive if transporter dies

:HoldSteady=1,	--useless for ground transport	--maybe transported units tilt and turn like the transporter
 
:transportUnloadMethod = 0,--UnloadLand (0)defaultunload 	--UnloadDrop (1)fly over and drop unit-- 	UnloadLandFlood (2) land, then release all units at once

:loadingRadius=999,--defaults to 220

:isfireplatform=true,

[[Category:Emmanuel]]</text>
      <sha1>ph1nd4eo81l62nzzut719ish7dal8td</sha1>
    </revision>
  </page>
  <page>
    <title>Transports and setting up supply Lines</title>
    <ns>0</ns>
    <id>1434</id>
    <revision>
      <id>19031</id>
      <parentid>11249</parentid>
      <timestamp>2010-03-13T18:15:18Z</timestamp>
      <contributor>
        <username>Koshi</username>
        <id>2371</id>
      </contributor>
      <comment>fix category</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5590">Talking about transports, its a good time to mention a tactic using transports with the repeat button.

Lets say you notice that player X has left the back wall of his base in a map such as castles relatively undefended, believing that you cannot mount an airbased assault easily. (Often this is thought to be so, esp if you only use air)

To pull this off you will need a cover force of 20 odd brawlers, a similar number of air transports, -heavy transports if you wish to be serious as well as a similar number of assault units, pref heavily armoured since the first wave will have to weather most of the players fire power at least initially. Assign each of these groups numbers for quick control.

(It'd also be a good idea to consider which would be the best units for the job since you can't get down from the walls of the bases in castles easily and the assault needs to be very effective very quickly to work.)

Also make sure that you have sufficient manufacturing capacity on hand with all factories sending units to one specific area.

Select your transports make sure they all pick up their first load. the difficult part comes when you coordinate the brawler assault so that they arrive first and draw most of the flak. Fortunately they are usually faster than air transports so there shouldn't be a problem there. Your transports should arrive next but make sure that they unload to a sufficiently wide area (press u and click and drag) to avoid them trying to unload on top of each other. As soon as they have started unloading queue up the order to load from the area your new units are waiting at back in your base then go back and set the unload area again,.. If you hit the repeat button now these transports will continue to shuttle units from your base into the back of theirs.

Why this strategy is good:
-Allows ground assault in late game where you would otherwise be hampered by metal wreckage everywhere
-player X's long range artillery effect on your assault force is effectively bypassed since you can get closer that much more quickly
-also allows you to move forces past your own fortifications easily. For example press repeat then set the load and unload areas as well as a 'wait' position where your transports can go and wait safely while not transporting. This is advantageous when the ground outside your base is completely deformed and covered in wreckage. You can set up a couple of different supply routes to different areas and move forces into the different loading areas where they will automatically be shipped out.
-Once the supply routes are set up, it allows you to concentrate on the assault itself without worrying about how to get reinforcements out from your base again.

Problems with this strategy:
-Takes a fair bit of preparation and micro-management 
--[[User:Mecha|Mecha]] 23:42, 28 Apr 2006 (W. Europe Daylight Time)

----

I have a few suggestions to cut down on micromanagement.

You need the following:

* A squadron of ground attack aircraft. One or two bombers may be useful for some extra bang.
* A secure staging area. It sometimes helps to draw a circle around the stagin area so units you dont want to be tranported arent accidentally ordered into the staging area.
* A good bunch of transports. The tougher the better.
* An attacking force, whatever you need to get the job done. Maybe artillery, maybe a mob of low level units.

Okay, to set up the mission, you need to do the following:

# Order your units to wait somewhere in the staging area (shift W)
# Then add the mission you want the units to perform when they are dropped off. Maybe its a straightforward attack order for all the units, maybe its a complex series of orders for each of the different type of unit in the staging area.
# Now select your transports and turn on repeat. Press L to select the Load order, click and drag a circle over the whole staging area, then press U and drag a circle to define a landing zone (choice of LZ is critical, to far from the objective, you wont get there soon enough, too close to defences, you're gonna get wiped out before you can get a shot off). Finally, order your tranports to move next to the staging area. This ensures they dont land at the LZ when they run out of things to transport.

And you're done. The transports will ferry all your units to the LZ. When the units get there, they will perform all the queued up actions you added after the wait command. Things should largely take care of themselves, you're only dealing with the high level stragetic decisions (where to drop, where to attack, what to attack with etc).

Some after thoughts:
# You can also automate a beach head with defences by adding some construction units to the attacking force and having them build up some defences around the staging area if you plan to make this a prolonged attack.
# Setting the waypoints on the factory will mean a steady stream of reinforcements for the front line. This mean you can easily change the type of units going to the front line by simply changing factories' build orders. You might even want to set up several factories of the same type, each ordered to go to the waypoint and execute a different mission after drop off.
# Adding another wait command after the intial one will mean that all your forces will gather into another staging post before proceeding. Useful, if you want to wait for your troops to all be transported first. You can tell waiting units to proceed by selecting them and pressing W.


''' [[Strategy_and_Tactics|&lt;- Back to Strategy and Tactics page]]'''
[[Category: Strategy]]</text>
      <sha1>fxcvnxem2tig1pcpe8haw2b8q01zcq9</sha1>
    </revision>
  </page>
  <page>
    <title>Trouble-shooting s3o units</title>
    <ns>0</ns>
    <id>2395</id>
    <revision>
      <id>26996</id>
      <parentid>26793</parentid>
      <timestamp>2013-04-13T08:48:51Z</timestamp>
      <contributor>
        <username>Knorke</username>
        <id>833</id>
      </contributor>
      <comment>black model http://springrts.com/phpbb/viewtopic.php?f=9&amp;p=539691</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3018">This page assumes you have a working knowledge of Spring unit creation, and will address some common pitfalls in creating s30 units.

=Invisible Unit=
'''Problem:'''
Unit spawns projectiles, engine flare, and other fx, as well as functioning correctly, but the model is invisible at any view distance.

'''Check:'''
* That your s3o has both a radius and height set in [[upspring]].
==Not even emited effects are visible==
Make sure the model offset is centered and above ground in [[upspring]].

=Disappearing Unit=
'''Problem:'''
Unit operates correctly, including being visible at low zoom levels, but disappears at higher zoom levels, often leaving a small grey blob. Example:
http://img54.imageshack.us/img54/1278/problemga6.jpg

'''Check:'''
* The reduction to grey blob is done by the LOD (Level Of Detail) process in spring. For 3do units, this nicely scales down a full 3d unit to a sprite as you scale out. For s3o, this doesn't work as nicely. There are two things you can do:
** 1: Make sure your unit has a radius that reflect the model size accurately. The view distance at which LOD kicks in is proportional to unit radius.
** 2: Make sure your LOD setting in Spring is high enough to actually display the unit correctly.

=Messed up unit texture=
'''Problem:'''
Unit looks normal in Upspring but in the game the textures is messed up.

'''Solution:'''
in Upspring, open this menu:
Texture Mapping -&gt; Show UV mapping -&gt; Edit -&gt; Flip UV

This will make the model look strange in Upspring but ingame it will actually look normal.

=Unit orientation is wrong=
'''Problem''':
Unit drives sidewards or backwards.

'''Solution:'''
In Upspring rotate your model like this:
http://springrts.com/mediawiki/images/thumb/1/1d/UnitInUpspring_4views.jpg/767px-UnitInUpspring_4views.jpg

=Model is all white=
'''Problem''':
The unit is all white.

'''Solution:'''
Check if the .s3o has a texture assigned to it and if that texture exists.
Upspring usually deletes texture assigment on loading a .s3o, so you have to reassign the texture every time you edit the model.

=Model is all black=
'''Problem''':
The unit is all black. Turning off shadows fixes it.

'''Solution:'''
Normals on model are wrong. Invert the normals in [[Upspring]]

=Model is all blue or another solid color=
'''Problem''':
The unit is completly covered in team color.

'''Solution:'''
No alpha channel on texture, add one.

=Edges supposed to be rounded/smooth are angular=
'''Problem''':
On cylinders, spheres, cones etc. hard edges are visible.

'''Solution:'''
Try the advice from this thread: {{forumlink|topic=27122|title=round edges on models}}

=Spawning the unit crashes the engine (pre 85.0)=
'''Problem''':
If the unit is spawned, Spring crashes. It works fine with a different .s3o file.

'''Solution:'''
Check if the .s3o has a texture assigned to it and if that texture exists.
Upspring usually deletes texture assigment on loading a .s3o, so you have to reassign the texture every time you edit the model.

[[Category: 3D Models]]</text>
      <sha1>n3bqlecox7alymzgjcjh7lr3dh9qm03</sha1>
    </revision>
  </page>
  <page>
    <title>Troubleshooting linux</title>
    <ns>0</ns>
    <id>2485</id>
    <revision>
      <id>28638</id>
      <parentid>28636</parentid>
      <timestamp>2014-06-14T12:27:57Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1804">= Linux specific Troubleshooting =

== Ingame ==

=== Slow Mouse ===

Run:
&lt;code&gt;&lt;pre&gt;
echo '# Slow fullscreen cursor fix for Spring' &gt;&gt; ~/.xsessionrc
echo 'SDL_MOUSE_RELATIVE=0' &gt;&gt; ~/.xsessionrc
echo 'export SDL_MOUSE_RELATIVE' &gt;&gt; ~/.xsessionrc
&lt;/pre&gt;&lt;/code&gt;
And log out and log in again.

The mouse should now be as fast as in windowed mode.

=== Rotating Buildings ===

You can rotate a building before you give the build order, but the keys that do this do not work in Linux by default for some users. Issue the following commands in the beginning of the game:

&lt;code&gt;&lt;pre&gt;
/bind keycodex buildfacing inc
/bind keycodey buildfacing dec
&lt;/pre&gt;&lt;/code&gt;

Keycodex and keycodey above are just placeholders. What you want to write depends on which key you want to use. To see what keycodes any keys have, do:

&lt;code&gt;&lt;pre&gt;
/keydebug yes
&lt;/pre&gt;&lt;/code&gt;

And then hit the keys you want to use, and spring prints the keycodes in the message buffer.

If you want to save these keys you have to edit the uikeys.txt.

=== Problems with Audio ===

The engine needs at least OpenAL Soft 1.6 for its sound. If you still have the old openal-0.0.8 installed, you should update it. 

Additionally, ''pulseaudio'' causes lots of issues, so try to disable it for spring if you have sound problems.

== Desync in game ==

Spring only send the commands and not the result over the network, so it needs to run all math in a repeatable manner,  so all other clients in a multiplayer match get the same results. So some CPU specific features have to enabled/disabled. If you desync, you either have a CPU that is not SSE1 capable, or you set the wrong -march/-mtune compiler flags. If you compile Spring via CMake, remove ''CMakeCache.txt'', and leave the march flag at the default.

= See also =
* [[IRC]]


[[Category:Linux]]</text>
      <sha1>ay4naxm2u4ip8duui1nkcrgownubqax</sha1>
    </revision>
  </page>
  <page>
    <title>Tutorial:BasicMapMaking(Maelstrom)</title>
    <ns>0</ns>
    <id>1073</id>
    <revision>
      <id>28921</id>
      <parentid>28920</parentid>
      <timestamp>2014-10-19T09:04:15Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>Flozi moved page [[Maps:Tutorial]] to [[Tutorial:BasicMapMaking(Maelstrom)]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8772">[[Engine_Development|Development]] &lt; [[Map_development|Map Development]] &lt; {{FULLPAGENAME}}


== Basic Map making ==

This tutorial is designed to help people make a basic map in an image editor like Photoshop. Things covered in this tutorial include:
* Making a basic concept drawing
* Making and using tiles
* Placing major map features
* Making use of layers to easily design and modify the map

First things first, we need to set up some folders and stuff to make all our lives easier. As the map compiler does not accept path names with spaces in them, it is easier if we just place the files in a folder straight on the C:\ drive. So, heres what folders to make:

* C:\Maps\
** MapName\
*** Tiles\
*** Texture\
*** Metal\
*** Height\

When we save each file, save them to the relevant folder. When we have finished that file, export it as a .bmp into the MapName folder for convinience. Remeber to save regularly, so as not to loose any work!

Whenever you create another map, make the same folders again. It makes life just that little bit easier.

=== Step 1: Concept Drawing ===

First things first, we need an idea of what the map will be about. For this map, I have made the following picture:&lt;br&gt;
[[Image:Rough Design.jpg]]

Green areas will be grass, Grey is mountains and Blue is water. This design does not need to be a major work of art, it just needs to convey the basic idea of the map, so that you have something to work off later.

=== Step 2: Making Tiles ===

The secret to small file sizes for maps is tiles. A Tile is a small picture that is repeated on the texture many times. This texture is then tiled by the map converter, and a 400mb 10240x10240 pixel big bitmap is transformed into a 200kb map file. The tiling system is very powerfull and very handy, but we still need to give it a hand.

Tiles in spring are based on 32x32 peices of the texture. Therefore, for our tiling to work correctly, our tile needs to be a size that is a multiple of 32. Sizes include:
* A basic, but boring looking 32x32 pixels
* A slightly better, but still slightly repetetive 64x64 pixels
* A good size of 128x128 pixels
* A large 256x256 pixels

Tiles can also be rectangular, and can be anything between the numbers mentioned above, but still need to be multiples of 32. To look good, tiles also need to be seamless, so when they are repeated no obvious join can be seen between the tiles.

For my map, as it has grass, mountains and a river I need three tiles.
* A green Grass Tile
[[Image:Grass.jpg]]
* A grey Mountain Tile
[[Image:Rock.jpg]]
* A blue River tile
[[Image:Water.jpg]]

=== Step 3: Setting up the Texture layers ===

A textures needs to be a certain size for it to work in the Spring engine. Textures must always be a size that is a multiple of 1024 pixels. 1024 pixels will equal 2 map 'size units' in the Spring engine, so a map of 5120x5120 pixels will be a 10x10 map. For a better description, go to one of the other pages.

We will need 4 layers for our map texture. One layer for our Grass texture, one for our Mountains, one for the River and one for the Concept drawing. First things first, make 4 layers. Fill the very bottom layer with the Water texture. The next layer is for the mountain texture, and the next is for the grass layer. Then, over all that, you draw in your concept again, but this time only the borders of the area's. Doing all this will make your life alot easier, and will help out alot in the long run.

Your texture should now look something like this, but just alot bigger:&lt;br&gt;
[[Image:Texture1.jpg]]

=== Step 4: Placing the major features ===

Now that you have your layers set up, you can start placing things like mountains and rivers. To do this, select the grass layer, and grab the eraser tool. Following the outline from your Concept design, rub out an area for the mountain to poke through.&lt;br&gt;
[[Image:Texture2.jpg]]

Then, do the other mountain:&lt;br&gt;
[[Image:Texture3.jpg]]

Now, we need to do the river. As the river layer is 'below' the gras layer AND the mountain layer, we need to rub a hole in each of them. So, pull out the eraser again, and get rubbing!&lt;br&gt;
[[Image:Texture4.jpg]]

After that, turn the concept drawing off, and there you have one tile base, small filesize texture! With a bit of playing around, blurring the edges, adding more layers, and little stuff like that you can make a really good looking map by just using an image editor. Just look at River Dale for an example!

=== Step 5: Making a height map ===
This is one of the tricker bits to get right. But without a good height map, your map is also no good. So, down to buisness!

A height map is a picture that the Spring uses to work out the height of different bits of land. Hence, a height map. A height map looks a little strange at first, but you get the hang of the pretty quickly. A height map will be a greyscale image (an image made up of shades of grey, as opposed to colours), where white represents mountains, and black valleys, or water. 

First off, the height map needs to be a different size to the texture. The height map needs to be 1/8th of the size of the texture, plus one pixel. So, to make this easier, here is a nice formula!
 Height map size = (Texture size / 8)   1
For this tutorial my height map will be the same size as my texture, but thats just so I can show you how to make it easier.

OK, now onto the height map! Make 2 layers. On the bottom layer, put your Texture, just resized to the right size. The top layer will be where we are going to draw our height map. To help us do this, we need to set the Opcaity (how transparent an image is) of the height map layer to around 50%. Some people like more, some people like less.

Grab the paint bucket tool and fill the whole of the height map dark grey. This will be the flat, grassy bit of our map. Then, grab the paint brush tool, set it to White, make it big and make the edges soft. When you paint with this brush you should get a white dot in the middle, with a steady fall off towards the grey that you have as your grass. Use this brush to paint in some mountains, with the White in the center, slowly fading out to the grey grass on the out side. 

[[Image:Maelstrom-Height2.jpg]]

Then, make the same brush black, and draw a big long line for the river.

[[Image:Maelstrom-Height3.jpg]]

When this is done, make the Opacity of the Height map 100% again, and save the picture. The Height map is done! It may require some tweaking later, but its fine for now.

[[Image:Maelstrom-Height.jpg]]

=== Step 6: Metal Map ===

The metal map is alot like the height map. It is 1/8th the size   one pixel. You can still underlay the texture for reference. It is still just a simple picture, like the height map. But this time, you need to do it in 'redscale', instead of greyscale. That is, using only red, and no green or blue. The more red the colour, the more metal is given. Depending on the style of map you want is how you make your metal map. For this map, we are going with an OTA style map with metal patches.

Make 2 layers. On the bottom layer, we will have our texture. On the top layer we will draw in the metal. For now, we can leave the metal layer empty, with full opacity, unlike the metal map.

Grab a brush. Make it about 3 pixels big and square. Make the colour about half red, with all the other colours all the way down. This will be some low metal patches for the starting positions. Place a couple of patches around the corners, enough to start with, like so:

[[Image:Maelstrom-Metal1.jpg]]

Then, make the brush full red. Place some more patches in places like the mountains, and the middle of the map. Places that will be under constant attack. These will be the good spots for the players willing to risk it for the extra metal.

[[Image:Maelstrom-Metal2.jpg]]

Now we need to hide the texture. To do this, grab the paint bucket tool and fill in the empty area black. You have now finished your metal map. Save the picture and your done!

[[Image:Maelstrom-Metal.jpg]]

=== Feature Map ===
A feature map is used to place Grass, Trees, Geovents and Features on a map. The tutorial will not cover how to make this, however the file is still needed. So we will just make a blank Feature map.

Feature maps are a bit like the other maps, however instead of being one eighth of the texture   1 pixel, they are just one eighth of the texture. So, for example, instead of being 129x129 pixels, your Feature map will be 128x128 pixels. Create a picture that is the required size, and fill it black. If you fill it white, you will overload the game, and it will probably crash. Which is a bad thing.

== Compiling ==
For compiling, see the [[Maps:Compiling|compiling tutorial]]

[[Category:Tutorial]]
[[Category:Map making]]</text>
      <sha1>gqxviu912jj05q1vtehia7eq9j6nvgw</sha1>
    </revision>
  </page>
  <page>
    <title>Tutorial:CompleteMapMaking(Wannes)</title>
    <ns>0</ns>
    <id>1106</id>
    <revision>
      <id>28903</id>
      <parentid>28902</parentid>
      <timestamp>2014-10-18T21:48:46Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>Flozi moved page [[A Complete Map Making Tutorial]] to [[Tutorial:CompleteMapMaking(Wannes)]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6519">[[Engine_Development|Development]] &lt; [[Map_development|Map Development]] &lt; {{FULLPAGENAME}}

== Complete Map Making tutorial by Wannes == 

Hello everyone,
In this tutorial i'm gonna try to teach you everything you need to know to make your first decent map.

First i want to thank Maelstorm and aGorm for their tutorials, they tought me a lot. 


=== Things You need: ===

An image editing program like Photoshop (which I will use in the rest of this tutorial), Paintshop Pro, . . .
Or 'the Gimp': [ ftp://ftp.gimp.org/pub/gimp/v2.2/ ]


Mapconv: This is the program that converts the Bitmap files you will be making into something that Spring can use (meaning a .smf and .smt file)
This program comes in 2 versions, Mothers mapconv and the &quot;normal&quot; one
In the rest of this tutorial I will be using [[Mothers MapConv]]


Map creation tools (optional): These programs help you making heightmaps, generate heightmaps, and apply textures to them.
Examples are: 
* Terragen (Mars was made with the random terrain function in terragen by SJ)[ http://www.planetside.co.uk/terragen/download.shtml ]
* L3DT[ http://www.bundysoft.com/L3DT/downloads/standard.php ]
* World Machine.[ http://www.world-machine.com/download.html ]


If you are planning to make big maps 16x16 and more you really need a good cpu and alot of memory and HD space. Especially when you are going to make everything in Photoshop.

=== The Parts of the Map ===

Each map contains 4 parts (3 parts on the normal mapconv)


=== The texture Map: ===

This defines how the terrain for your map will look.
It needs to be a 24 bit bitmap, with dimensions that are a multiple of 1024.
A 16x16 map (you see this at spring lobby) equals a 8192x8192 pixels bitmap.
As you will soon notice these bitmaps have huge sizes. In order to compress these large bitmaps to a small mapfiles they created somethign named tiles.

A tile is a a small picture of a terrain like grass or sand or water. when you fill up your whole map with 1 or more tiles, mapconv can see this and make good use of it to compress your map. So its important you use tiles because it makes the map sizes alot smalle but you should pay attention your maps don't get too boring because of the same tile you see everywhere.

You can't just use tiles of any size. mapconv will check your map for tiles that are a multiple of 32 pixels. So you can use 32x32 64x64 . . .   bigger tiles will usually be nicer on your map because its harder to spot u repeat the same tile over and over, but this also makes you map bigger.
You can even use tiles like 32x64, as long as its a multiple of 32

So it important that you find a good balance between the number of tiles you use and their size.



If you want to use tiles in Photoshop, do this:
open the tile picture, resize it to a multiple of 32, do edit-&gt;define pattern
then go to the terrain picture and use edit -&gt; fill and select the wanted pattern. On large bitmaps this may take some time.
When you have applied a couple of tiles like this you can make them blend in to each other using the eraser on a low opacity.

You can also use terragen to generate you a texture map, using an imported height map or one you made inside terragen. Although I can give you no further info about the use of terragen because I don't know alot about it either.



===The Heightmap===

This is the key part of your map. It defines everything about the heights of your map (including water).


These are the basics: your heightmap must only contain black and white colors, and must be textmapsizeX/8  1   x  textmapsizeY/8 1   so if you have a 8192 x 8192 texture map you got to have a 1025 x 1025 heightmap.
The whiter something is, the higher it will be in spring and black is the lowest your map can be.

so basically what you do is you paint your whole map grey (usually I take 127 127 127) and then add white and black where you want mountains and valleys


I'm not very good at making heightmaps myself so maybe someone else can write some things here.
The way I do it: I only use photoshop , take a white brush on very low opacity and start drawling a mountain on my map. It takes alot of time and patience making it very smooth. The blur tools helps alot and the surface blur filter helps alot too (or any other blur filter).   If you want to make your terrain more interesting you shouldn't leave it all perfectly flat. There are many ways of doing this, you can use the filter-&gt;render-&gt; clouds or some things in the filer-&gt;noise menu (remember not to use colors!)
After applying these filers you can try to put opacity of that layer low or merge it with the other layers (don't use this, but might be better)

===The Metal Map===

Aah this is an easy one : )
it uses the same dimensions as the heightmap.
The normal mapconv uses this map to place the metal and geovents on, but mothers mapconv has a special feature layer for the geo's (see later) so the metal map just keeps track of all the metal on your map.

It uses red to represent Metal , so you can use red going from 0 -255 to define your metal.
Remember that white = all colors so when you make a white map with red dots your whole map will be covered with metal. On the normal mapconv this will be even worse because white also contains green (which it uses for geo's) so the entire map wille be full of geo's. Because each green pixel represents a geo this will cause a big error when you start your map.

So always paint your map black (love that song) first and then add red dots (unless you are making a metal map)


===The Feature Map===

This is for Mothers mapconv only
It uses same dimensions as the height and metalmap.

GEO's:
It uses green 255 to represent a geo   add 1 pixel to add one geo on your map   don't place alot of green pixels next to eachother because this will make spring crash.

TREE's
It uses green color 200-215 to represent trees of 16 differant types

GRASS:

It uses blue color 0-255 0 = no grass 255 = full grass

FEATURES:
***taken from mothers mapconv readme***
Red Channel:
255	- feature of type on first line of text file specified with
254	-     &quot;		&quot;    second &quot;		&quot;		&quot;

ie.  fs.txt has armjeth_dead on the first line, so a pixel of 255 Blue places an armjeth_dead !

Format is one feature type per line. 
These features currently must be found in the .tdf files in the mods/&lt;modname.sd7&gt;/features filesystem.
*** taken from mothers mapconv readme ***


To compile these four files together, use [[Mothers MapConv]].

[[Category:Tutorial]]
[[Category:Map making]]</text>
      <sha1>l8j9k02bi626qqyrtdyenozc3kujitg</sha1>
    </revision>
  </page>
  <page>
    <title>Tutorial:CreateMaps(Fnordia et al)</title>
    <ns>0</ns>
    <id>939</id>
    <revision>
      <id>28912</id>
      <parentid>28911</parentid>
      <timestamp>2014-10-19T08:24:23Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>Flozi moved page [[Create maps]] to [[Tutorial:CreateMaps(Fnordia et al)]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="12361">[[Engine_Development|Development]] &lt; [[Map_development|Map Development]] &lt; {{FULLPAGENAME}}

==The Idea==
First of all you need an idea. There is no point (OK, there is some point for test purposes) in making a map just like another one that already exists. You need to think of certain things before you make your map.
# Is this map idea different, not just a copy of someone else's?
# Does my map idea give each player a fair share of the cover and high ground?
# Is my map idea possible to make?
# Is it possible with the amount of time I'm willing to spend?

If you answered yes to the above, then you are 25% of the way towards making your map!

You should probably doodle it on a piece of paper to act as a guide later.

==The Tools==
With your idea hopefully sketched out, it's time to get the tools to make the map! (You can skip this if you already have them.)

For all your map compiling needs you should first download the newest [[MapConv]] program.

You will also need some image editing software. Favorites are Photoshop, the [http://www.gimp.org/ GIMP], And Paintshop Pro.
The GIMP, however, is the only one that's free!
(I'm going to have to assume you know how to use the program you choose. If you can't there are loads of tutorials on the net.)

You may also want to check out [http://www.planetside.co.uk/terragen/ Terragen] for generating terrain. But as you have to pay to render anything of a good size, I won't mention it other than here.

Another tool you might find useful is the freeware tool [http://www.delphigl.de/projects/terrtexgen/eng_index.html TerrTexGen].  It's useful for previewing your heightmap before compiling, but unless your texturemap is 4096 on both sides, you might find that the texturemaps that it creates are too small.

Finally, there is tool called [http://www.bundysoft.com/L3DT/ L3DT] which you might also find useful.  It seems to be a program that is specificly designed for creating large height/texture maps.  The free version is capable of rendering a heightmap as big as 4096x4096, and can generate a texturemap that is proportional to the heightmap.  Of the mentioned packages, this seems the most useful and complete.

==Preparing your map==
This is the fun part! And also, often, the longest part.

For a map you will need several different things:
# a texture map
# a height map
# a metal map


They all have certain needs! Read this bit carfully!

===Texture Map===
All maps are based on a texture image. This image's width and height must be an exact multiple of 1024 pixels. So, for instance, you can have a &quot;4096 by 8192&quot; image, but not a &quot;4096 by 4608&quot; image, as 4608 does not divide by 1024. It, like  all three maps, must be saved as a 24 bit BMP. A 1024x1024 Texture will produce a map shown as '2x2' in the launcher.

It may look like whatever you want! Find a texture (preferably, one that you can tile seamlessly) and fill your texture map with it. You could, for instance, fill the whole image with a sand texture. This would make your whole world look like sand. You could then decide to add a few patches of grass to it by finding a suitable grass texture and adding it on patches. So you'd have a map that was mostly sand with a few patches of green.

Because of the way the map compiler works, it will '''greatly''' reduce your map filesize if you use 32x32 tiles on your texture map. So, whenever you have to fill a large area with a repeating pattern, make sure the small square you're repeating is 32x32 (or a multiple of it).

===Height Map===
Next is the height map. This must be exactly one eighth (1/8) of the size of the texture map '''+ 1 pixel!''' For instance, if the dimensions of your texture map are &quot;4096 by 8192&quot;, divide 4096 and 8192 each by 8 and add one to the result of each. The result for this example would be &quot;513 by 1025&quot;. The height map is a black and white BMP. Only use black and white, no colour! (well its better to work it as a greyscale image, and when saving to process, convert to rgb and save as bmp, that way you get a 24 bit bmp)

White areas are the tops of mountains; black areas are the sea floor or the bottom of valleys. The shades of grey between are the different heights between! When you draw your heightmap, make sure the white blends into the black with greys. I suggest you use the blur tool. If you have a white splodge in a patch of black you will have a very tall pillar that won't look natural at all!

===Metal Map===
Finally, you need a metal map. This is the same size as the height map, one eighth (1/8) of the size of the texture map '''+ 1 pixel.''' On this one you paint down red (in verying degrees) to represent metal. So a red spot that is RGB(50,0,0) will provide about a 5th of the metal patch of red RGB(255,0,0) will give.

On this map you can also place green pixels. Each green pixel will create 1 geothermal vent. If you put down a green splodge you will get a cluster of geo vents! Only place 1 pixel.

Ensure you have all three saved as 24 bit BMPs and you're ready to convert it all to a map!

== MapConv.exe ==

Instructions pulled from the newest [[MapConv]] program. If all goes well, the &lt;code&gt;MapConv.exe&lt;/code&gt; should create four new files: &lt;code&gt;mini.bmp&lt;/code&gt;, &lt;code&gt;mini.dds&lt;/code&gt;, &lt;code&gt;yourmapname.smf&lt;/code&gt;, and &lt;code&gt;yourmapname.smt&lt;/code&gt;

Converts a series of .bmp/.raw files to a Spring map. This just creates the .smf file, you will also have to create a .smd file using a text editor or Maelstrom's SMD creator.

==Mothers MapConv==

[[Mothers MapConv]] is nearly the same Program but it allows to place all Features on their own Featuremap.

===But what are these 'Arbitrary Features,' Im so confused!===
They are 'features' found in the /features/All Worlds or /features/corpses filesystems.  Which feature is 'type 1' is defined on a map-by-map basis via a new file called 'fs.txt'.  This file should contain &lt;cr&gt; delimited feature names. The first line is the feature placed when a red=255 dot is found, etc.

=== Ok, Now what do I do? ===
If you are using any custom features, and/or you want to mod-proof your map, you should include them in the [[sd7]] that you package the map in.  The tree structure should look something like:

 &lt;mapname.sd7&gt;
 -maps/
 -mapname.smf
 -mapname.smt
 -mapname.smd
 -Objects3d/
 -&lt;featurename[s]&gt;.3do(specified in the tdf)
 -features/
 -All Worlds/
 (and/or)
 -Corpses/
 -&lt;featurename[s]&gt;.tdf
 -textures/
 -tatex/
 -&lt;texname[s]&gt;00.bmp or .tga

Without getting into modding/unit making I will say that the &lt;code&gt;.tdf&lt;/code&gt; tells you the name of the &lt;code&gt;.3do&lt;/code&gt; (&quot;&lt;code&gt;Object=&lt;/code&gt;&quot;), and the name of the 'feature' is in the top brackets.  The &lt;code&gt;.3do&lt;/code&gt; specifies the texture names.  The engine looks for those texture names + 00 in either bmp or tga format in tatex. 

Examples of a built-in XTA wreckage name would be &lt;code&gt;armckfus_dead&lt;/code&gt; which would be looking for a tdf (likely &lt;code&gt;armckfus_dead.tdf&lt;/code&gt;) that has a &lt;code&gt;[armckfus_dead]&lt;/code&gt; section which then specified something like:
&lt;code&gt;Object=armckfus_dead&lt;/code&gt;
&lt;code&gt;armckfus_dead.3do&lt;/code&gt; would then specify some texture like &lt;code&gt;wreck01b&lt;/code&gt; which would go looking for either a &lt;code&gt;wreck01b00.bmp&lt;/code&gt; or &lt;code&gt;wreck01b00.tga&lt;/code&gt; file.

==Making your map work==
This is the final push. Once Sharp map has finshed it will spit out a .sm2 file. This needs to be copied to the MAPS folder in Spring. But you still need one more thing: an .smd file. Basically, this file tells the game things like the maximum metal, the light colours, the clouds, etc. (All the bits you were thinking that you hadn't done yet!)

I would suggest you copy the .smd of another map and fiddle with the settings until you get what you want. smd's can be opened in notepad or similar. Look at all the .smd's so you can get a jist of what each option does. Make sure both the .sm2 and .smd have the same file name then start up Spring (not the client!) in [http://taspring.clan-sy.com/wiki/FAQ#People_talk_about_.27Single_Player.27._How_do_I_start_a_single_player_game.3F single-player mode] and run the commanders script. Choose your map and away you go!

==SMD Rundown==
What follows is all that we (aGorm and LathanStanley) have figured out in the SMD's. Its by no means the be all and end all, but it's the next best thing.

* Goto [[Maps:SMD]] for a more detailed listing
 
===General Map Information===
* Description is just a short description of your map. Keep it simple.
* TidalStrength determines how much energy tidal generators will produce. A normal figure is around 20.
* Gravity, as you would expect, affects ballisitcs and how far units fly after an explosion.
* MaxMetal is the maximum amount of metal you will gain from one game square in 1 second from an area of metal that had a red value of 255 in your metal map. If making an old style metal deposit map, then this will be quite high: maybe 2 or 3. If you are making a new style metal-all-over-the-place-map, then it will be low: perhaps 0.2. Also for old style maps, you'll have to fiddle with the...
* ExtractorRadius, which is the area that is harvested by 1 metal extractor. For old style maps make this very small, so as they only take from one deposit.

=== Atmosphere, Water Colours ===
Each value (it would appear this bit is by no means gospel) is a representation of the RGB values for that parameter. It would appear to be relative, i.e. you can put in what ever numbers you like and the game will work out what you want. 

The best way to go about it is to look at it as percentages.
The numbers 1, 0.5, 0.2 refer to 100% red, 50% green and 20% blue. But 2, 1, 0.4, will get the same result. Using numbers below one for all the numbers will result in the colour being less bright.

This is all a bit confusing so an example will be given:

 SkyColor=0.2 0.1 0.5;

In this example the sky is coloured with 20% red, 10% green, and 50% blue, approximatly RGB(51,25,127), resulting in a very deep night-time blue. Other colours are added to the initial sky colour. If you set your sun as being a pale yellow and it came out rather green, this is why. 

One helpful tip is ''negative'' colour. That's right: you can type in a negative number for a colour and it will remove it from the base sky colour. Just be careful not to go below the original values or you may get a surprise.

===The Sun System/Shadow System===
The Sun System/Shadow System is quite a useful tool as well in making your maps look ''well done''.  
Within the &lt;code&gt;.smd&lt;/code&gt; file there is a line: 

: &lt;code&gt;SunDir=-1 1 -.5;	//direction of sun&lt;/code&gt; &lt;small&gt;(The part after the &quot;//&quot; is a comment)&lt;/small&gt;

The numbers &quot;-1&quot;, &quot;1&quot;, &quot;.5&quot; determine the angle and elevation of the sunlight system. 

The first number is the X angle (East/West) (from -1 to 1) where any negative number means the sun is on the West (and therefore shadows will be cast east), and any positive number means the sun is on the East (and therefore shadows will be cast west), and if the number is 0 there are no east or west shadows, the sun is directly above you. 

The second is its elevation, (0 to 1), this number is how far from the horizion the sun is, ignoring it's angle. Thus, 1 puts the sun directly overhead (while still casting angular shadows) and 0 putting it directly on the horizion. 

The final number is the Z angle (North/South). (I know, I know, they wrote the engine with Y as elevation and Z as vertical. Don't blame me.) It is just like the East West positioning, where negative numbers put them on the North, and positive numbers put them on the South. 

'''Example Usage:''' If you want the shadows ''in'' one of the boxes (your shadow casting surface is in the middle), use the numbers provided, or start from them and tweak the angle and sun height as seen fit.

[[Image:ShadowDirection.gif]]

'''Note:''' on the current build, it ''will'' cast the shadows in the proper direction, etc. Negative direction numbers tend to make some maps unstable and cause crashes. The best solution would be to rotate or flip your map to where the shadows point up or right (North or West). I do believe these bugs are being worked on and will be fixed soon.

We can only hope this has been helpful! Any questions, or things you think we have missed, please ask us in the maps section.

[[Category:Tutorial]]
[[Category:Map making]]</text>
      <sha1>t2z3ktvlyoi74g3g1f1y6o5u2c1g0k4</sha1>
    </revision>
  </page>
  <page>
    <title>Tutorial:HeightMapWithPOVRay(RogerN)</title>
    <ns>0</ns>
    <id>2091</id>
    <revision>
      <id>28906</id>
      <parentid>28905</parentid>
      <timestamp>2014-10-18T21:53:53Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>Flozi moved page [[Height Map Tutorial]] to [[Tutorial:HeightMapWithPOVRay(RogerN)]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9287">[[Engine_Development|Development]] &lt; [[Map_development|Map Development]] &lt; {{FULLPAGENAME}}


==Overview==

Most of the other Spring mapping tutorials focus primarily on the technical aspects of mapping related to compilation (e.g. how to compile your map, what size your height map should be, how to place features, etcÃ¢â‚¬Â¦). Consequently, this tutorial will not go into those details. Instead, this document will focus solely on some tips for creating height maps.

==Required Tools==

In order to make this tutorial accessible to everyone, the tools weÃ¢â‚¬â„¢ll be using are free, open source programs. WeÃ¢â‚¬â„¢re going to be using a generic painting / image processing program and a ray-tracer. These programs are:

[http://www.gimp.org GIMP]: Best described as a Photoshop clone, this is an extremely useful image processing tool. It offers many of the same features as Adobe Photoshop at a much more reasonable price ($0).

[http://www.povray.org POV-Ray]: As a ray-tracer, POV-Ray is primarily designed to render 3D images. WeÃ¢â‚¬â„¢ll be using it to preview our height map in 3D. However, the program also has some tricks we can use to tweak our height map directly. Eventually we can also use POV-Ray to render the final texture for our map (covered in a different tutorial).

Once youÃ¢â‚¬â„¢ve installed the above programs (or Photoshop instead of GIMP), thereÃ¢â‚¬â„¢s one other file you ought to download and extract:

[http://webpages.charter.net/kgnorris/HeightMapTut/HeightMapTutorialFiles.zip Tutorial POV-Ray files]: This archive contains some POV-Ray input files that weÃ¢â‚¬â„¢ll be using throughout the tutorial.

==A Simple Hill==

{|
|- valign=&quot;top&quot;
|
In this first section of the tutorial weÃ¢â‚¬â„¢ll be creating a height map for a 4x4 Spring map. This means that our height map needs to be 257 x 257 pixels. So, start up GIMP and create a new image by clicking &quot;File &gt; New&quot;.
|[[Image:RogerNTut1_CreateImage.png]]
|}

{|
|- valign=&quot;top&quot;
|
[[Image:RogerNTut1_BucketFill.png]]
|To get our image ready for use, fill the entire image with black. Select black as your foreground color and then use the bucket fill tool to paint the whole thing black.
|}
&lt;br&gt;
{|
|- valign=&quot;top&quot;
|
[[Image:RogerNTut1_Lasso.png]]
|Now we want to create a simple hill in the center of our map. Begin by selecting white as your foreground color. Next, we want to select the region which is going to be the top of our hill. Activate the lasso tool.
|}
&lt;br&gt;
{|
|- valign=&quot;top&quot;
|
Use the lasso tool to outline a region in the center of the height map. This will be the top of our hill. DonÃ¢â‚¬â„¢t make your selection too close to any of the sides because weÃ¢â‚¬â„¢ll need some space around the edges later (the slopes going up our hill need space).
|[[Image:RogerNTut1_SelectRegion.png]]
|}
&lt;br&gt;
{|
|- valign=&quot;top&quot;
|
Before we fill our selected region we want to ensure that our hill has gradual slopes (rather than a sheer face). Right-click the image and click &quot;Select &gt; Feather...&quot; WeÃ¢â‚¬â„¢re going to use 30 pixels here to give a very gradual slope.
|[[Image:RogerNTut1_Feather.png]]
|}
&lt;br&gt;
{|
|- valign=&quot;top&quot;
|
Now weÃ¢â‚¬â„¢re ready to draw the hill. Select white as your foreground color. Then right-click the image and click &quot;Edit &gt; Fill with FG color.&quot; Now we ought to have a hill in the center of our image with a nice gradient for the slopes.
|[[Image:RogerNTut1_Feathered.png]]
|}

Our relatively simple hill is complete for now, so save the image as a bitmap in the same folder as the tutorial files downloaded previously. Right-click the image and click &quot;File &gt; Save as...&quot;

==Viewing in 3D==

Before we continue to tweak our hill, weÃ¢â‚¬â„¢d like to know what it looks like in 3D. POV-Ray can help us quickly render the height map in 3D.

Start up POV-Ray. Open the provided tutorial file, &quot;Render3DHeight.pov&quot;. We have a few settings we want to check before we click run.

Near the top of the POV-Ray file you should see a section for Spring settings. We need to modify these settings for our current project. Specifically, we need to change the height map file name, the map size, and the altitude settings.

Change the height map file to match the name of the bitmap we saved in step 1. The next setting, ViewAngle, is fine at the default for now. The altitude settings need to match what weÃ¢â‚¬â„¢ll eventually use for the map compiler Ã¢â‚¬â€œ for now, choose 100 for the min and 500 for the max. Our Spring map size should be set to 4 x 4.

[[Image:RogerNTut1_SpringSettings1.png]]

WeÃ¢â‚¬â„¢re almost ready to render the 3D image. The last thing to do is pick the render resolution. Either use the drop-down box in the toolbar to select one of the common resolutions, or use the adjacent text box to type the resolution options directly:

[[Image:RogerNTut1_Resolution.png]]

Now click the Run button on the tool bar. You ought to get a 3D picture of our simple hill.

[[Image:RogerNTut1_SimpleHill3D.jpg]]

==Making it realistic==

Unfortunately, our simple hill looks quite unrealistic at the moment. The slopes are too regular to be believable. There are many techniques we can use to spice it up a bit. In this step weÃ¢â‚¬â„¢ll be examining a simple POV-Ray trick for improving our height map.

Using POV-Ray again, open the provided tutorial file &quot;RenderTurbulence.pov&quot;. This file will help us add some entropy to our height map to make it look more natural.

Once again, we need to modify some settings near the top of the file. Locate the Spring settings near the top and modify them to match our current project. We need to set the name of our height map file, and the map size:

[[Image:RogerNTut1_SpringSettings2.png]]

Immediately below the map size are settings for turbulence and noise. These settings control the style and amount of randomness or distortion that will be added to our height map. The default values ought to work fine. However, feel free to play around with the settings to get results that you like.

One important task remains before rendering a new height map. We need to ensure that POV-Ray is set to use the correct resolution! Remember that our height map needs to be 257 x 257 pixels. Use the text box in the POV-Ray tool bar to specify the output resolution:

[[Image:RogerNTut1_OverrideRes.png]]

When you click the Run button in the tool bar, you should see a new version of the height map for our simple hill. POV-Ray has taken our original height map as input and added some turbulence to the image:

[[Image:RogerNTut1_Turbulence.jpg]]

Note that POV-Ray has saved the new image as &quot;RenderTurbulence.bmp&quot;, and has not overwritten our original height map. Also, after applying turbulence in this fashion it is sometimes necessary to apply a small Gaussian blur to smooth out the rough edges (using GIMP, choose &quot;Filters &gt; Blur &gt; Gaussian Blur...&quot;, radius 2). If POV-Ray renders the height map in 3D with small holes in some areas then the height map ought to be smoothed / blurred.

So what does our height map look like in 3D now that weÃ¢â‚¬â„¢ve added turbulence? Return to &quot;Render3DHeight.pov&quot; in order to find out. Remember that our original height map hasnÃ¢â‚¬â„¢t changed, so we need to update the file name to &quot;RenderTurbulence.bmp&quot;.

The new height map looks something like this when rendered in 3D:

[[Image:RogerNTut1_Turbulence3d.jpg]]

Not bad! ItÃ¢â‚¬â„¢s definitely more realistic than our first attempt. At this point I recommend that you play around with the various turbulence / noise settings, to see how they affect the results. The default values use only turbulence; be sure to try increasing the NoiseAmplitude.

==Create a mountain range==

In creating the template for our simple hill (step #1) we used a feathered selection to generate a rounded hilltop. This section of the tutorial will demonstrate a slightly different approach which may yield better results for mountains (not hills). Mountains differ from hills in that they tend to be pointed at the top and more angular in shape.

Start up GIMP and create another 257 x 257 height map. Fill the image with black, as before.

Now, using the lasso tool, select a roughly triangular region:

[[Image:RogerNTut1_Triangle.png]]

Next we want to use the gradient tool to fill in our triangular region. First, select the gradient tool.

[[Image:RogerNTut1_Gradient.png]]

Ensure that the foreground color is set to white, and that the background color is set to black. With the gradient tool selected, ensure that the Shape is set to &quot;Shaped (angular).&quot;

[[Image:RogerNTut1_GradientSettings.png]]

Click anywhere inside the selected region and drag the mouse a short distance. When you release the mouse button, the gradient tool will fill our selection:

[[Image:RogerNTut1_FilledTriangle.png]]

By itself this would be a pretty poor (and lonely) mountain, even with turbulence and noise added. But by repeating the process several times (with different shades of gray) we can make a nice mountain range. Use GIMP layers set to Screen in order to overlay mountains effectively.

[[Image:RogerNTut1_mount1.jpg]]

[[Image:RogerNTut1_mount2.jpg]]

In the 3D screenshot note that weÃ¢â‚¬â„¢ve added some turbulence (settings were tweaked to get good results) and blurred the results a bit.

[[Category:Tutorial]]
[[Category:Map making]]</text>
      <sha1>go8dpw7o54k5xsuopm1vc1dpfwwdgme</sha1>
    </revision>
  </page>
  <page>
    <title>Tutorial:MapDesignHelp(IceXuick)</title>
    <ns>0</ns>
    <id>1440</id>
    <revision>
      <id>28899</id>
      <parentid>28898</parentid>
      <timestamp>2014-10-18T20:35:43Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>Flozi moved page [[IceXuick Map Design Help]] to [[Tutorial:MapDesignHelp(IceXuick)]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="21021">[[Engine_Development|Development]] &lt; [[Map_development|Map Development]] &lt; {{FULLPAGENAME}}

===How to build a map===

Hello, welcome to the IceXuick map Design help. On this wiki page i will try to make a complete and organized 'topic' how to build a map, from A-Z. Tips, add-ons or other suggestions are always welcome. OKAY.


===What do you need:===

First of all i'll sum up the thing you need:

- Photoshop / Gimp (or other image editor)&lt;br&gt;
- Bryce / L3dT (optional, if you don't want a great looking texture)&lt;br&gt;
- [[MapConv]] (map converter program)&lt;br&gt;
- Patience &amp; passion&lt;br&gt;

If you have most of these things, you can start thinking about the map you want to make. It is very smart to make sketches of your map, before creating it. Try to design the map, so that in your 'mind' it could play well. Think of possible problems as porcing probabilities, turtling, strategic important places, but also metal layouts, geo-vent locations, and maybe even feature-placement.

===What are you going to make:===

Well, how much different things you might have read, these are the things i use, and work very well, so i suggest you use this, and nothing else :). To know how big your map will be, the factor is 512 times the TA:S size: here are some (total)map sizes and corresponding dimensions:

'''TA Spring ---- Actual Pixels'''&lt;br&gt;
32 x 24 ------ 16384 x 12288&lt;br&gt;
16 x 12 ------ 8192  x 6144&lt;br&gt;
8 x 4 -------- 4096  x 2048&lt;br&gt;
&lt;br&gt;

This is the best order in which you should work:&lt;br&gt;
&lt;br&gt;

- '''Heightmap''' ... bmp 24-bit - 1/8 +1 of Total map size&lt;br&gt;
- '''Metalmap''' ..... bmp 24-bit - 1/8 +1 of Total map size&lt;br&gt;
- '''Featuremap''' .. bmp 24-bit - 1/8 of Total map size&lt;br&gt;
- '''Typemap''' ...... bmp 24-bit - 1/16 of Total map size&lt;br&gt;
- '''TestTexture''' .. bmp 24-bit - Total map size&lt;br&gt;
- '''Compiling''' ..... your maps with Mothers MapConv&lt;br&gt;
- '''SMD file''' ........ script of all kinds of things, including atmosfear, colors of sky and water, fog settings, but more important, metaloutput, winds, tidal, start locations and terraintypes.&lt;br&gt;
- '''Test Phase''' ... debug your map a much as possible&lt;br&gt;
- '''Texturemap''' .. bmp 24-bit - Total map size&lt;br&gt;

&lt;br&gt;

===The Heightmap:===

Here are in following order the things that are to be done:&lt;br&gt;

- roughly outlining large mountains/valleys&lt;br&gt;
- go deeper into detail by lowering size of drawing brush&lt;br&gt;
- finalize details with 15px brush (in Photoshop)&lt;br&gt;
- make slopes/passages on your map with smudge/blur tools&lt;br&gt;
- Texturemap - bmp 24-bit - Total map size&lt;br&gt;
&lt;br&gt;

The heightmap is one the the most important things you make for a map, and therefor i always start with it. After you have drawn your concept of your map (sketches) you may want to digitize them (if you don't already have that) and you should think which mapsize would be best. If you want your map to be a 8x8 map you should (first) also make the heightmap this size. By doing so, you can use Bryce or L3dT to render your texture at the highest possible quality.&lt;br&gt;
&lt;br&gt;

So you now are going to start working in Photoshop (or other image program). Try to remake your sketch by drawing different shades of grey. White is the highest (255) and black (0) is the lowest. You can start drawing roughly, to outline every hill or valley. After that, try and go deeper into detail, and finally use  a brush size of 15px in Photoshop for the final details.&lt;br&gt;
&lt;br&gt;

To make your map work for all the units, it should have passable slopes and passages: use a 'Smudge'-tool (optionally also Blur-tool). A lot of programs have this, so you should be able to figure it out. For every slope or passage that needs to be passable, the gradient from the lowest to the brightest color of that slope should be as smooth as possible. You need to get the feel of the smudge-tool in Photoshop, but after a while you'll get the hang of it. Also try to make slopes that have a big difference in highest and lowest point, long and smooth.&lt;br&gt;
&lt;br&gt;

When you think everything is smooth and detailed, save that image as FullHeight.bmp, at the same size as the Total Map. After that, scale down this file to 1/8th of the size of the Total map, +1 pixel (x and y), and save this one as Height.bmp&lt;br&gt;
&lt;br&gt;


===The Metalmap:===
&lt;br&gt;

Okay, for playtesting value, you can now make your metal map. This is at first quite simple, and easily done, but the placement and balance is very hard. You can only try and think of good locations, and the output should be 15 metal per player (non-moho), if they have their part of the map (on a four player map, this would be 1/4th of the map)

In Photoshop, make another layer onto your heightmap, and put metal places around the map. Use a 6 or 8px '''PENCIL''' for the metal patches, and paint with red 255 (make sure there is no antialiasing, so that every pixel is RED 255.

When done, you can save this file as Metal.bmp (1/8th of Total map size +1).&lt;br&gt;
&lt;br&gt;


===The Featuremap:===
&lt;br&gt;

In the featuremap you can place Geo-vents, Trees, grass, and extra features like rocks,  palms, energy spires. You need to have these 'extra' features, later to be compiled within the map. Geo's, tree's and grass will work automatically. For the extra features, you need to get the whole pack, which consists of a couple of maps with files for the model, the texture and the script. Check the &quot;maps&quot; forum for features that were created.&lt;br&gt;
&lt;br&gt;

'''Geo's''' are represented by '''GREEN''' (255), single pixels. Every green (255), pixel will (most likely) be compiled as a geo-vent.&lt;br&gt;
&lt;br&gt;
The shades 200-215 of GREEN are different '''Tree-types'''. Remember to use 1 single pixel for tree's as well. 200-206 seem to be coniferous tree, 207-215 seem to be decidious.&lt;br&gt;
&lt;br&gt;
'''BLUE''' represents the ammount of '''Grass''' to be placed, where black means none, and BLUE (255) means full spreading of grass)&lt;br&gt;
&lt;br&gt;
Than Last but not least, '''RED''', for the '''Features'''. In the FS.txt file (that comes with Mothers MapConv, you can list all your features, that you want to use. The first feature that is listed in this file, will be represented as RED 255. The second feature will be RED 254, the third RED 253, and so on. Also features will need only one pixel.&lt;br&gt;
&lt;br&gt;
Try to make sure that no one of those pixel are next to each other within 4-5 pixels. This may crash during compiling, or gives strange results in-game.&lt;br&gt;
&lt;br&gt;


===The Typemap:===
&lt;br&gt;

Okay, the Typemap, also known as the TerrainType map, let'a you set the '''terrain name''', the unit categories '''speed multipliers''', and also the '''hardness multiplier'''. This map works again with RED only. Every Shade of RED can be set in the SMD file, on which i'll return later on. The Typemap that worked for me is '''NOT''' the same as the height- and metalmap, but is '''1/16th''' of the Total Map size.&lt;br&gt;
&lt;br&gt;
So an 8x8 map is Total 4096 x 4096 pixels. If we then do the math: 4096 /16 = 256. (otherwise there will be a default terraintype (that you did not set) between different terraintypes, and this can be very annoying)&lt;br&gt;
&lt;br&gt;

Draw your 'terrain' onto your heightmap (make sure you again use the '''PENCIL''' mode, without antialiasing around your pixels), and save it as a BMP in 1/16th of the Total Map size (Typemap.bmp).&lt;br&gt;
&lt;br&gt;


===Test Texture:===
&lt;br&gt;

You need to have a 'test'-texture in order to compile, so you can simply make a big grey image, that has the '''right dimensions''' (for 16x16 it will be 8192x8192). Save this as Texture.bmp&lt;br&gt;
&lt;br&gt;


===Compiling your map:===
&lt;br&gt;

Before rendering your final, huge, super shweet texture, you want to know if your map plays okay, and that's why we first going to compile the map:&lt;br&gt;
&lt;br&gt;
- how is the heightmap, '''check it for all units''' if everything works&lt;br&gt;
- is the metal placing and spacing okay? are there spots on slopes or unbuildable terrain, or unreachable.&lt;br&gt;
- are the geo's working, and also well placed (no clusters of geo's?)&lt;br&gt;
- do units move quite right, or do they get stuck all the time&lt;br&gt;
- how is the water level (if there is any)&lt;br&gt;
- are the starting locations allright?&lt;br&gt;
- maybe you already want to check the other features, as grass, trees or extra's?&lt;br&gt;
&lt;br&gt;

Therefor, we are going to compile this thing first, to check all these things in-game. This will save you numerous re-renderings. And changes in the heightmap after the render, is '''NOT''' recommended. Esspecially for the people that play in '''TA-cam mode''', because they have to be able to tell from above what the terrain is like.&lt;br&gt;
&lt;br&gt;

Okay, if you did all of the above, and did it perfect, than this will be your first and second last compile... but trust me, you will compile a '''couple of times''' more, if you want the map to play well!&lt;br&gt;
&lt;br&gt;

Although there is a mapcompiler in the works as i type this, for now we need to do it the old fashioned way, by DOS.&lt;br&gt;
&lt;br&gt;

Unpack the files of [[MapConv]] into your directory with all your previously saved files. '''Make sure''' that all the (sub-)directories to this location '''DON'T have SPACES''' in them! After this being said, you will need to go to DOS mode.&lt;br&gt;
&lt;br&gt;
In Windows, go to &quot;start&quot;, and then &quot;run&quot;, and type 'cmd' (without the quotes). This will bring up the commandline prompt. Navigate to your directory in which all bmp's and Mothers Mapconv are located. I ain't gonna explain how you navigate is DOS, if you got this far, you probably know your way around with computers.&lt;br&gt;
&lt;br&gt;

Once in the right directory/folder, type 'MapConv --help' for a explaination of all parameters. This is not nescesary if you use it as following:&lt;br&gt;
&lt;br&gt;

'''MapConv -f Features.bmp -i -l -c 0.5 -x 300 -n -150 -o YourMapName.smf -y Typemap.bmp -m Metal.bmp -a Height.bmp -t Texture.bmp'''&lt;br&gt;
&lt;br&gt;

This line will compile your map will the above created files, and compresses it only half (normal compression is 0.8), what will leave a bit more of your original texture in tact, however your filesize will be higher.&lt;br&gt;
&lt;br&gt;
* The -i -l commands are nescesary.&lt;br&gt;
* The 0.5 compression can be altered to 0.8 or for high quality to 0.2 or 0.3&lt;br&gt;
* the -x is the maximum height and -n the, yes, minimum&lt;br&gt;
&lt;br&gt;

To get the water level right you can '''calculate the best values''' for the max. and min. height. Check your height.bmp and look which grey value you like to be the surface of the water (darker is submerged, higher is land). If this is grey 80, than you know that 80/(255/100) = 31.4% should be submerged. Depending on what total height you want to use, be sure that the zero-0-point (which is the water level) is at 31.4%. So if you want around 600 height difference in total, then you should use -x 412 -n -188 (you may do the math yourself). This should get near the water altitude that you want. Otherwise recompile and test again!&lt;br&gt;
&lt;br&gt;

If all went well, you should now have '''4 new files''' in that same directory.&lt;br&gt;
&lt;br&gt;
* '''mini.bmp''' - absolete, you don't need this.&lt;br&gt;
* '''mini.dds''' - needed for minimap 1024x1024 (texture in DirectX format DTX1)&lt;br&gt;
* '''YourMapName.smf''' - Feature file&lt;br&gt;
* '''YourMapName.smt''' - Texture file&lt;br&gt;

Now you have the basic files that TA:Spring can read, BUT you need to ''''sd7'''' them. SD7-ing kind of 'zips' these files into 'one map-zip-file-archive'. How you do this, is quite important.&lt;br&gt;
&lt;br&gt;
First make a '''new''' sub-directory, i always name it after the version, so 'v01' wil be right. In this directory, you need to make '''another sub-directory''' called 'maps'. In THIS directory, you need to place your .dds, .smf and .smt files. If you have downloaded extra features (with directories included such as 'features', 'objects3d' and 'unittextures') you need to copy them to the 'v01' directory as well, so it's '''next''' to your 'maps' subdirectory, not in the 'maps' dir. Also do '''NOT forget''' to copy your '''fs.txt''' file from your 'edit' directory, into the 'v01' directory.&lt;br&gt;
&lt;br&gt;


'''Create or Edit an SMD file:'''&lt;br&gt;
&lt;br&gt;

Now you have to create (or copy paste) a .smd file, that will be put next to the other files in the 'maps' sub-directory. I will post the most important stuff needed. You may also use the '''SMD Creator''', which is also available for download somewhere, and quite '''handy for sun direction and colors''', but 'sometimes' a bit buggy when opening and re-saving a file '''(crashes)'''. The most important stuff,'''--''' means that i've deleted something, and the '''//''' + remarks are to be removed:&lt;br&gt;
&lt;br&gt;

[MAP]&lt;br&gt;
{&lt;br&gt;
Description=Describe your map shortly, it can be seen in the lobby;&lt;br&gt;
TidalStrength=10; //Energy that Tidal generators will give. (10-30)&lt;br&gt;
Gravity=120; //variable, 120-150 is kinda standard, test on map&lt;br&gt;
MaxMetal=1.2; //metal output rate. &lt;1 is more OTA, &gt;1 is more XTA&lt;br&gt;
ExtractorRadius=100; // radius of mexxes, 40-50 tiny, '''100 desirable'''&lt;br&gt;
MapHardness=100; // Global hardness of terrain 100 will deform from shots&lt;br&gt;
&lt;br&gt;
[ATMOSPHERE]&lt;br&gt;
{&lt;br&gt;
--&lt;br&gt;
MinWind=1; // minimum wind&lt;br&gt;
MaxWind=25; // max wind, know that a '''average of 10 is almost equal to solar'''&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
--&lt;br&gt;
&lt;br&gt;
[TERRAINTYPE50]&lt;br&gt;
{&lt;br&gt;
name=SoftTerrain; // name that will be shown in-game on mouse-hover&lt;br&gt;
hardness=2; // multiplier of Global MapHardness&lt;br&gt;
tankmovespeed=0.9; // The speed multiplier of the different units&lt;br&gt;
kbotmovespeed=1; &lt;br&gt;
hovermovespeed=1; &lt;br&gt;
shipmovespeed=0; // '''0 means impassable'''&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
[TEAM0]&lt;br&gt;
{&lt;br&gt;
StartPosX=250; // start x-coord. of player 1&lt;br&gt;
StartPosZ=250; // start y-coord. of player 1&lt;br&gt;
}&lt;br&gt;
[TEAM1] // '''TEAM0 is player 1 and TEAM1 is player 2'''&lt;br&gt;
{&lt;br&gt;
StartPosX=4950;&lt;br&gt;
StartPosZ=4950;&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
etc..&lt;br&gt;
&lt;br&gt;

After you are satisfied with all the settings, you can then save this file as 'YourMapName.smd'. PLace it '''next''' to the other YourMapName.* files, in the 'maps' subdirectory, so that there are now '''4 files''' there.&lt;br&gt;
&lt;br&gt;

Assuming you have downloaded a '''7z zip program''' (which you can (re)name to .sd7) you then go into your 'v01' directory, and zip all those directories, including the fs.txt file if you use extra features. Three important things:&lt;br&gt;
&lt;br&gt;

* name your map 'YourMapName.sd7' and '''NOT else''' (use '''exact''' same name as with compile)&lt;br&gt;
* Compression can be set to '''ultra'''&lt;br&gt;
* Dictionary Size = 32 mb&lt;br&gt;
* Word size = 64 mb&lt;br&gt;
* do '''NOT''' make it an '''SOLID''' archive&lt;br&gt;
* Multi-threading, if you like&lt;br&gt;
&lt;br&gt;

When this is done, copy 'YourMapName.sd7' into the maps folder of TA Spring, and off you go! '''You can now start your game from within TA:Spring!!'''&lt;br&gt;
&lt;br&gt;

===The Testing Phase===
&lt;br&gt;

Start up your map. If you did everything i told you to, '''it should work'''! The things i always do is build the following units to test the 'pathfinding' and movement areas:&lt;br&gt;
&lt;br&gt;
* '''Peewee's''' - k-bot footprint - same movement for all k-bots&lt;br&gt;
* '''Flashes''' - Tank footpring&lt;br&gt;
* '''Hover Tank''' - Hover footpring&lt;br&gt;
* Build '''all metal spots''' with mexxes to check if their location is buildable&lt;br&gt;
* If watermap, build boats and subs&lt;br&gt;
* Optionally build exp. bots like Krogoth &amp; Orcone&lt;br&gt;
&lt;br&gt;

When you've build these units, select one, and '''press F2'''. You can now see where that unit can go (GREEN), where it will move slow (or fast downhill)(ORANGE), and where it '''CAN'T move'''(RED). This last one is particulary important. Test all units this way, and check the whole map, if some type or more types of units can't go somewhere. If this is so, you need to '''smoothen out that slope''' in your heightmap (and make it probably longer as well, or change the '''heightdifference'''). It can also be that units '''CAN''' pass certain 'ridges' that it weren't supposed to do. You can always do 2 things. '''OR''' you change the '''heightdifference''' (bigger is higher ridges), this is often the easiest way, '''OR''' you '''change your heightmap''', and make it right, what very often is the way to do it best.&lt;br&gt;
&lt;br&gt;

Make sure you '''check''' these things as well:&lt;br&gt;
&lt;br&gt;

* is the '''water level''' right?&lt;br&gt;
* How does the water look, do you need to change the colors?&lt;br&gt;
* How is the '''wind''', do you like it, is it too much or too little&lt;br&gt;
* How is the '''sun''' working out (more on this after Final Texture)&lt;br&gt;
* Can '''hovercrafts''' go onto the water easily
* Do all the '''boats''' work fine (maybe water level too deep)&lt;br&gt;
* How does your map look in FPS or sort of view?&lt;br&gt;
* are the '''Geo's''' working?&lt;br&gt;
* Do all '''features''' work?&lt;br&gt;
* Is the '''metal output''' okay, too much, too little?&lt;br&gt;
&lt;br&gt;

You see, there is a '''LOT''' to test and check, So do play and test and play and test alot! '''If''' one or more of these things aren't working allright, you need to change it in the SMD or in your bmp's and recompile. If you are playing against AAI as a testing method, be '''SURE''' that if you recompile a '''changed height, metal or feature map''', you need to '''delete all cached and cfg files''' in the AAI folders. Otherwise the AAI won't see the difference.&lt;br&gt;
&lt;br&gt;

After multiple testrounds, you should have a good working map. If you like to 'organic-ize' your map, you can/must do it now. If you make it too organic, the pathfinding and passable slopes could be distorted, and you don't want that! So you can heighten or lower certain parts, or even throw in a noize overlay, but be '''SURE''' that you check if the map still plays okay!&lt;br&gt;
&lt;br&gt;

===The Texture:===
&lt;br&gt;

Remember the heightmap &quot;fullHeight.bmp&quot; we made bigger than we eventually will need? Well now you will see. Personally i use Bryce for rendering maps. I makes them nice and gives a perfect OTA feel to them. If you have Bryce, you must do the following steps:&lt;br&gt;
&lt;br&gt;

- create a terrain&lt;br&gt;
- edit the terrain, go to the picture tab, and load &quot;FullHeight.bmp&quot;&lt;br&gt;
- optionally add some height- or slopenoise, but do not overdo this&lt;br&gt;
- set the material, choose one, alter it a bit, so you like it!&lt;br&gt;
- set the atmosfear, light angle, and play with the icons and colors&lt;br&gt;
- last but not least, make the camera settings right!&lt;br&gt;
&lt;br&gt;

To do this you need to enter camera mode (you'll a camera icon). Then you must click the grey triangle next to the round sphere thing. There you can click on &quot;edit current camera&quot;. In this menu, you must set the following where '''A''' an '''B''' are variables:&lt;br&gt;
&lt;br&gt;

- - - - - '''x''' --- '''y''' --- '''z'''&lt;br&gt;
origin -- 0 --- '''A''' --- 0&lt;br&gt;
pos - -- 0 --- '''A''' --- 0&lt;br&gt;
rotate - 90 -- 0 --- 0&lt;br&gt;

FOV: 1 degree
Scale: '''B'''

Only the first time, you need to tweak this, then you can save it as an template. The scale '''B''' should at least be 100% (but bigger ain't a problem).&lt;br&gt;
&lt;br&gt;
After that, you need to set the 'altitude' of the camera with '''A'''. You need to tweak this, so that you terrain completely fills the map. It will be a '''large number''', my template uses 25600. If you have a square map, set your document settings to square (800x800 for example). If it's not, make that change, just make sure the map fits the scene/screen.&lt;br&gt;
&lt;br&gt;
When you are sure your map 'fits' you can start your render. You must &quot;Render to Disk&quot; and you should also set the antialiasing to ultrafine for the best results (you can do this also in &quot;document setup&quot;).&lt;br&gt;
&lt;br&gt;
If you are not sure the map fits 100% (in any case, don't make it TOO big, because you will '''loose map''' that way), than you should consider rendering a bit larger, let's say 3-5% bigger (for a render of 8192, render to 8500) and you can then later cut of the edges and change it to the desired size of your image in Photoshop. (Although this is '''NOT recommended''')&lt;br&gt;
&lt;br&gt;

'''Voila''', after a couple of hours (depending on your system en scene settings) you'll probably have a nice render. (on which you can work later, to add more details...)&lt;br&gt;
&lt;br&gt;

Now you can open this file again in Photoshop, and start working on the details. Most important of all, is that you add the metalspots. The best way to do this, is to open your Metal.bmp, scale it to you Total Map size (8192x8192 for example) and put this image in a layer on top of your final texture layer, and set the opacity to 30-50%. Now you can see where the metal is supposed to be, and you can start drawing these in the map. (You can also download the original TA Metal patches somewhere, and add these)

After you have done all this, and are '''satisfied''' with the result, save your texture as Texture.bmp. You are now ready to compile it. You should use the settings that you now know (min. &amp; max. height and compression setting). After Compiling, copy the files to your 'maps' directory, SD7 them, and finally place the final 'YourMapName.sd7' in your TA:Spring 'maps' folder,&lt;br&gt;
&lt;br&gt;

===you can now play it!!===
&lt;br&gt;

If you also want to play it against other people, you should upload this sd7 file.

[[Category: Tutorial]]
[[Category:Map_making]]</text>
      <sha1>mtssfarv6ve60grnq1xkx81ab2b78g9</sha1>
    </revision>
  </page>
  <page>
    <title>Tutorial:MapDevWithBlueprint(Forb)</title>
    <ns>0</ns>
    <id>3402</id>
    <revision>
      <id>30282</id>
      <parentid>30281</parentid>
      <timestamp>2016-11-18T01:34:40Z</timestamp>
      <contributor>
        <username>Forboding angel</username>
        <id>2578</id>
      </contributor>
      <comment>/* Specular Map */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="15895">[[Engine Development|Development]] &lt; {{FULLPAGENAME}}

= Getting Started (Tools) =

'''Blueprint:&amp;nbsp;'''[https://github.com/jk3064/Map-Blueprint https://github.com/jk3064/Map-Blueprint]&amp;nbsp;

The only other tool really needed is &quot;Mapconv&quot;. The other tools available are there simply to make your life easier. A list of common mapping tools are as follows:


[[MapConv|Mapconv]]


[[MapConvNG|MapConvNG - For use with Linux]]


SMFED '''(Deprecated, no longer useful)'''


Grout '''(Deprecated, no longer useful unless texture was generated with L3dt utilizing tiles)'''


SMD Creator '''(Deprecated, no longer useful)'''


[http://springfiles.com/spring/tools/mapping-tools Start Position Editor]


[http://springfiles.com/spring/tools/mapping-tools Das Bruce's Mapconv frontend]


These tools have been compiled into a zip available here:&amp;nbsp;[http://springfiles.com/spring/tools/mapping-tools http://springfiles.com/spring/tools/mapping-tools]


Keep in mind that mapconv is still being developed, so it may be necessary to update the included Mapconv to a later version, located here:&amp;nbsp;[http://springrts.com/phpbb/viewtopic.php?f=56&amp;t=21458 http://springrts.com/phpbb/viewtopic.php?f=56&amp;t=21458]

= The Components of a Map =

== Texture Map ==

&lt;code&gt;'''Texture map size is related in pixels and in spring map size. 2x2 MapSquares in spring are equal to 1024x1024 Pixels. Texture maps mus be in multiples of 2. I.E. 2x2, 6x10, 12x16, 16x16, etc. No odd sizes are allowed (Example: 15x10).'''&lt;/code&gt;

This guide assumes that you understand how to make a texture map and it also assumes that you know how to use terrain generation software.

Commonly used terrain generation programs are:

Spring Map Edit (Does not work on 64bit machines)

L3DT

WorldMachine

Bryce3D

Carrara



Example Texture Map (generated by Carrara):

[[File:exampletexturemap.jpg]]


== Heightmap ==

&lt;code&gt;'''Height Maps are Texture Map size / 8 + 1 pixel. In other words, if your texture map is 8192x8192 (16x16), 8192 / 8 + 1 = 1025x1025'''&lt;/code&gt;

You will need a good image editing program to make heightmaps. Many of the aforementioned terrain generation programs will also generate heightmaps as well, but you can draw them by hand. They can be either 8bit or 16bit greyscale PNG. If you have photoshop or the gimp, you can use these programs to help you create your heightmap.



Here is an example of a 16bit heightmap:

[[File:Heightmapexample.png]]

Heightmaps work upon the idea of height according to color values. Black is the lowest, white is the heighest. In spring mapping, the waterline is defined by a negative height value. In other words, you define the heights of the map, &amp;nbsp;anything below 0 is under water. So on this heightmap, you might use -50 for the lowest value and 300 for the highest height value. The aforementioned tool &quot;Mapconv Gui (a.k.a Das Bruce's MapConv Gui) has a waterline calculator that will help you calculate the correct waterline for your map.


== Metal Map ==

&lt;code&gt;'''Metal Map dimensions are Texture Map size / 8 + 1 pixel. In other words, if your texture map is 8192x8192 (16x16), 8192 / 8 + 1 = 1025x1025'''&lt;/code&gt;


In Spring, metal maps are used for the built in resourcing scheme (Metal/Energy). You do not have to use this scheme. In fact, there are several games for Spring who use their own resourcing systems added on using Lua. If you are creating this map for one of those games, a metal map is not strictly necessary (in other words you can just us a black image), however, it is always nice if you can make your maps as compatible with other games as possible, but this is a choice left entirely up to you.


Metalmaps show metal areas on a map based upon the amount of red on the image (make sure red is the only color used!). On this map you can see that the &quot;Patch Technique&quot; is used, which is pretty common among spring maps, but you are not limited to using this scheme.


If you do want perfect metal patches, use a 6x6 pixel pencil in your image editor with a red value of 255. This combined with setting the &quot;MaxMetal&quot; tag in the definitions to 1, will result in a perfect 2.0 metal generation per patch (using Balanaced Annihilation values). The game use isn't the point however. The fact is that if you can predict how much each spot will output (typically), using the &quot;MaxMetal&quot; parameter, you can easily scale the values up and down. As an example of another extreme, Evolution RTS dictates that all metal patches will output 0.5 metal regardless of the map settings. So whether you need to put a lot of thought into your metal map values depends entirely upon the game for which you are creating the map.



Example Metal Map:

[[File:Examplemetal.jpg]]


== Feature Map ==

This part is easy...

'''DO NOT USE THIS FOR ANY REASON WHATSOEVER!!!''' Just use a flat black image for the featuremap.

&lt;code&gt;'''Feature Map dimensions are Texture Map size / 8. In other words, if your texture map is 8192x8192 (16x16), 8192 / 8 = 1024x1024'''&lt;/code&gt;

Feature maps used to be quite complicated, but all that changed with the advent of Smoth's FeaturePlacer (short featuremap history below).

Now featuremaps are use simply for the purpose of placing grass. Grass coverage is defined by blue pixels on the feature map. The more blue the pixel is (the closer to blue 255 it is), the thicker grass will be at that location. Grass is entirely optional, but can be customized via map parameters and adds a nice touch to your map.



Example Feature Map:

[[File:examplefeature.jpg]]

=== A brief history of featuremaps ===

Feature maps were (and still are) a single RGB image where features such as grass, geothermal vents and trees, as well as structures, etc were &quot;placed&quot; using pixels on the image. This method was extremely imprecise and involved recompiling the map many times in order to simply move a tree from one location to another.

= Compiling a Map (MapConv) =

== Texture Specifications ==

Texture map size is related in pixels and in spring map size. 2x2 MapSquares in spring are equal to 1024x1024 Pixels. Texture maps must be in multiples of 2. I.E. 2x2, 6x10, 12x16, 16x16, etc. No odd sizes are allowed (Example: 15x10).



Height Map dimensions are Texture Map size / 8 + 1 pixel. In other words, if your texture map is 8192x8192 (16x16), 8192 / 8 + 1 = 1025x1025



Metal Map dimensions are Texture Map size / 16 pixel. In other words, if your texture map is 8192x8192 (16x16), 8192 / 16 = 512x512



Feature Map dimensions are Texture Map size / 8. In other words, if your texture map is 8192x8192 (16x16), 8192 / 8 = 1024x1024

== Using MapConv ==

[[MapConv]] is a command line program that is generally started via a batch file .

Below is an example set of parameters given to mapconv:

&lt;code&gt;'''MapConv -i -l -c 0 -x 101 -n 100 -o EvoRTS-Craggy_Creek-v01.smf -t terrain.png -a height6.png -m metal.png -f feature.png -z &quot;nvdxt.exe -dxt1a -nmips 4 -Sinc -quality_highest -file&quot;'''&lt;/code&gt;

Once compiled, you will get 2 new files: &amp;lt;mapname.smt&amp;gt; and &amp;lt;mapname.smf&amp;gt;

= Utilizing Blueprint =

Unzip the blueprint archive into your Spring Maps folder.

[[File:mapcontainer.jpg]]

You will notice a new folder called &quot;mapcontainer.sdd&quot;. The .sdd ending on the folder name is very important for testing as &amp;lt;foldername&amp;gt;.sdd tells spring to load map files from that folder. This way you can work on your maps without having to zip them up over and over again.

== mapcontainer.sdd ==

Inside the map container folder you have the following file/folder structure.


&lt;div&gt;'''&lt;code&gt;LuaGaia&lt;/code&gt;'''&lt;/div&gt;&lt;div&gt;'''&lt;code&gt;mapconfig&lt;/code&gt;'''&lt;/div&gt;&lt;div&gt;'''&lt;code&gt;maphelper&lt;/code&gt;'''&lt;/div&gt;&lt;div&gt;'''&lt;code&gt;maps&lt;/code&gt;'''&lt;/div&gt;&lt;div&gt;'''&lt;code&gt;mapinfo.lua&lt;/code&gt;'''&lt;/div&gt;&lt;div&gt;'''&lt;code&gt;mapoptions.lua&lt;/code&gt;'''&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
Now, copy your compiled map files (the &lt;code&gt;.smt&lt;/code&gt; and &lt;code&gt;.smf&lt;/code&gt; files) into the &quot;maps&quot; folder.

= Texture Splatting using SSMF =

SSMF mapping is adding detail textures all over the map based upon specified distribution areas. This will make your map infinitely more detailed and beautiful.

Adding SSMF to a map consists of the following steps:

== Distribution Map ==

The Distribution map is essentially an atlas telling spring where to spread your detail textures. Lets have a look at an example distribution map:

http://www.evolutionrts.info/random/examplesplatdistribution.jpg

Each channel corresponds to a different texture referenced in the detail texture map. These areas are set using the channels of the image and are generally saved using the Targa format ( .tga ), sized at 1024x1024.

http://www.evolutionrts.info/random/examplechannels.jpg

Save your distribution map as splatdistribution.tga, and place it in the maps folder alongside the smf and smt files.

Once you have your distribution map, you need to set up your detail textures


== Detail Textures ==

Detail textures are made by adding a texture to each channel of an image.

http://www.evolutionrts.info/random/examplesplattex.jpg

There are a total of 4 texture slots available. One for R, G, B, and one for the Alpha Channel. When you have your detail textures ready, save the file as splattex.tga (Targa - 1024x1024) and place it in the maps folder alongside splatdistribution.tga


== Specular Map ==

A specular map controls brightness and &quot;shinyness&quot; of your map. The more light you add to a particular portion of your specular map, the brighter and more reflective that portion of the map will be. Specular maps should be 1024x1024 and saved as specularmap.bmp. Of course placed in the maps folder with the other ssmf maps.

A specular map can cause your map to look like molten plastic. Most of us don't really use specular maps except for certain circumstances.

http://www.evolutionrts.info/random/examplespecularmap.jpg

== Grass Shading Map ==
By default spring's grass pulls the minimap to use for coloration of the grass patches. You can override this with ''grassShadingTex''. Below is an example


&lt;table&gt;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;Grass map&lt;/td&gt;&lt;td&gt;Grass map in game&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;[[File:Grassmap_Map_example.jpegâ€Ž|120px|alt=grassmap example |grassmap]]&lt;/td&gt;&lt;td&gt;This is a section of grassmap image. This image applied to the entire map which determines the color of grass.&lt;/td&gt;&lt;td&gt;[[File:Grassmap_Map_ingame.jpgâ€Ž|300px|alt=grassmapp applied in game|in game]]&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;Click image for larger picture&lt;/td&gt;&lt;td&gt;Click image for larger picture&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;


== Normal Map ==

Normal maps (in this case) are used to add &quot;fake&quot; 3d detail to a flat 2d image. It is a technique of manipulating lighting to give the appearance of looking at a 3d object, when actually it is just 2D.

This is what a normal map looks like:
[[File:examplenormalmap.jpg]]

= Placing Features =

As previously mentioned, features can now be placed via LUA based upon a coordinate system that looks similar to this:


&lt;div&gt;&lt;code&gt;local features = {&amp;nbsp;&lt;/code&gt;&lt;/div&gt; 
&lt;div&gt;&lt;code&gt;		unitlist = {&lt;/code&gt;&lt;/div&gt; 
&lt;div&gt;&lt;code&gt;		},&lt;/code&gt;&lt;/div&gt; 
&lt;div&gt;&lt;code&gt;		buildinglist = {&lt;/code&gt;&lt;/div&gt; 
&lt;div&gt;&lt;code&gt;		},&lt;/code&gt;&lt;/div&gt; 
&lt;div&gt;&lt;code&gt;		objectlist = {&lt;/code&gt;&lt;/div&gt; 
&lt;div&gt;&lt;code&gt;			{ name = 'btreeclo_4', x = 7760, z = 112, rot = &quot;0&quot; },&lt;/code&gt;&lt;/div&gt; 
&lt;div&gt;&lt;code&gt;			{ name = 'btreea_3', x = 2520, z = 6904, rot = &quot;0&quot; },&lt;/code&gt;&lt;/div&gt; 
&lt;div&gt;&lt;code&gt;			{ name = 'btreeblo_5', x = 7736, z = 536, rot = &quot;0&quot; },&lt;/code&gt;&lt;/div&gt; 
&lt;div&gt;&lt;code&gt;			{ name = 'btreeclo_1', x = 2504, z = 7112, rot = &quot;0&quot; },&lt;/code&gt;&lt;/div&gt; 
&lt;div&gt;&lt;code&gt;			{ name = 'geovent', x = 177, z = 192, rot = &quot;0&quot; },&lt;/code&gt;&lt;/div&gt; 
&lt;div&gt;&lt;code&gt;		},&lt;/code&gt;&lt;/div&gt; 
&lt;div&gt;&lt;code&gt;},&lt;/code&gt;&lt;/div&gt; 
&lt;div&gt;&lt;code&gt;return features&lt;/code&gt;&lt;/div&gt; 


&lt;div&gt;Of course, features can be placed by editing the set.lua file in a text editor, but that would take an extremely long time. Enter FeaturePlacer.&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;
== Feature Placer ==

* [[Map Making: Feature Placer|Feature Placer]]

= Configuring Map Parameters (Mapinfo.lua) =

Admittedly, the default values used in blueprint mapinfo are awful. It may be wise for you to download another map that has used blueprint and copy and paste it's mapinfo contents into yours. However, you are also free to use the default or use the provided example.

In time, the mapinfo tags will be documented and this will like to that page. As it is the tags and values are pretty easy to figure out for the most part.

== MapInfo.lua ==
* [[Map_Making:mapinfo.lua|MapInfo.lua]]

= Skyboxes =

*[[Skyboxcreation|Notes about skyboxes]] notes on a prerendered sky box or cube map.



= Mutators =

Mutators are files that add new content to exiting game files. &quot;[http://springfiles.com/spring/tools/spring-features Spring Features]&quot; is an example of a mutator.

This section needs a proper description.

[http://springrts.com/phpbb/viewtopic.php?f=13&amp;t=21808 http://springrts.com/phpbb/viewtopic.php?f=13&amp;t=21808]

= Archiving a Map =

&lt;div&gt;Spring reads two different archive formats, 7zip and zip. Both archives are named sd7 and sdz, respectively. 7zip files are made by The 7zip archive program, available at&amp;nbsp;[http://www.7-zip.org/ http://www.7-zip.org/]&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;Navigate to your mapcontainer.sdd folder and zip it's contents into either a .7z file or .zip (7zip format is '''HIGHLY RECOMMENDED'''!), usually naming schemes follow the actual mapname (&amp;lt;mapname.sd7&amp;gt;, such as&amp;nbsp;EvoRTS-Craggy_Creek-v08.sd7&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;

&lt;span style=&quot;color:red&quot;&gt;'''Make sure that the archive is non-solid!''' &lt;/span&gt;


[[File:examplearchivewith7zip.jpg]]&lt;br/&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;Once completed, copy the sd7/sdz file to your maps folder. At this point, be sure to remove the .sdd ending from your mapcontainer.sdd folder (or change the map name/version contained withing), otherwise you might get sync errors because spring is reading from the wrong archive source.&lt;/div&gt;
&lt;br/&gt;

= Tools =

*[[Maps:SpringMapEdit|Frostregen's SpringMapEdit]]. 3D editing, Compiles and import SM2 directly. Beginner friendly but still powerful.
*[[MapConv]] Map converter program, compiles maps.
*[[MapConvNG]] Rewrite of MapConv that works on linux / 64 bit.
*[[Maps:Map Designer]]&amp;nbsp;'''(Outdated, Deprecated)''' Hugh's 3D map designer. Splatting, heightmap editing, splat painting, SM3
*[http://www.springfiles.com/show_file.php?id=1679 Starting position creator]: Or you can always find out the hard way which x/y coordinates are good by starting spring and having a look at the mouse cursor coordinates.
*[http://code.google.com/p/conflictterra/source/browse/games/CT/luaui/widgets/tp_coordinate_help.lua Coordinate Helper widget] A small widget that helps you with finding coordinates ie for start positions. Every time you put down a marker it will log its position in [[Infolog.txt]] and also in MAPNAME_coordinates.txt Helpfull if you need to get lots of map coordinates and do not want to write them down by hand. (it writes SpawnResource in front of the coordinates but you can ignore or edit the widget)

= Minimal barebones template with no extras =
If you want a completely barebones template with no extra configuration needed (useful for testing), Extract the  blueprint files, then delete everything except mapinfo.lua and everything in maps folder (except your .smf and .smt files). Next copy paste following to mapinfo.lua (not the most minimal but minimal enough):
&lt;pre&gt;
local mapinfo = {
   name        = &quot;MyMap&quot;,
   shortname   = &quot;&quot;,
   description = &quot;&quot;,
   author      = &quot;&quot;,
   version     = &quot;&quot;,
   modtype     = 3, --// 3=map

   teams = {
      [0] = {startPos = {x = 8, z = 8}},
      [1] = {startPos = {x = 16, z = 16}},   
   },
}
return mapinfo
&lt;/pre&gt;
In summary: maps folder with .smf.and .smt files and single mapinfo.lua file. You should be now able to test your map immediately (if files are placed to mapcontainer.sdd).

[[Category:Tutorial]]
[[Category:Map making]]</text>
      <sha1>btylcrrs6lbwfautx2cbcmien1hsjgn</sha1>
    </revision>
  </page>
  <page>
    <title>Tutorial:MapMaking(Runecrafter)</title>
    <ns>0</ns>
    <id>1227</id>
    <revision>
      <id>28924</id>
      <parentid>28923</parentid>
      <timestamp>2014-10-19T09:08:51Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>Flozi moved page [[Runecrafter]] to [[Tutorial:MapMaking(Runecrafter)]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6094">{{deprecated}}

[[Engine_Development|Development]] &lt; [[Map_development|Map Development]] &lt; {{FULLPAGENAME}}

==Runecrafter's Map Tutorial==


Greetings, Myself (Runecrafter) and my fiancee (Moonchime) have been working on a map tutorial where we are going to try to teach you how to make maps quickly and easily.

==A list of what you will require.==

*'''Idea'''
**You will need to at least have an idea of what kind of map you&lt;br&gt;wish to make.

*'''Art App'''
**Some kind of 2D art program, like [http://www.adobe.com/products/photoshop/main.html Photoshop], [http://www.corel.com/servlet/Satellite?pagename=Corel3/Products/Display&amp;pfid=1047024307383&amp;pid=1047025487586&amp;cid=1047025488099&amp;trkid=googlepsp&amp;trkid=14679803 Paint Shop Pro], or [http://www.gimp.org/ The Gimp].

*'''5 Images'''
**You will need to create 5 images: Height, Metal, Type, Featuremap, Texture&lt;br&gt;(Type is optional).

*[[MapConv]]

**A program  to compile the 5 images into the map for Spring.

*'''[http://www.7-zip.org/ 7Zip]'''
**You will need this program (alot like WinZip) to compress the map&lt;br&gt;into a .sd7 or .sdz after you are done compiling with Mother's Mapconv.

==Ok Let's Get Started...==

*'''Step 1: Size'''
**First we will need to determine the size that our map will be.Think of it this way,&lt;br&gt; a Spring map that is 2x2 in size will use a texture image that is 1024x1024&lt;br&gt;where a 4x4 map uses a texture image of 2048x2048 etc..&lt;br&gt;To get an idea of how big a map is,&lt;br&gt;10x10 or less is small&lt;br&gt;12x12 - 16x16 Medium&lt;br&gt;18x18 - 24x24 Large&lt;br&gt;26x26 - 30x30 Giant&lt;br&gt;32x32 and up OMG!&lt;br&gt;To my knowledge, 64x64 is the largest that Spring can take at this time.&lt;br&gt;For this tutorial we will make a 16x16 (Medium) Map.&lt;br&gt;

*'''Step 2: Height Map'''
**The Height map is the image that determines the shape of the map(i.e.- hills,&lt;br&gt; valleys, mountains, etc.). It is a &lt;font color=&quot;red&quot;&gt;Gray Scale&lt;/font&gt; image, that means that it only&lt;br&gt; uses the colors of Black and White. Where black is the lowest point on the map&lt;br&gt;and white is the highest point on the map.&lt;br&gt;There are 255 shades in the gray scale- where 0,0,0 is black and 255,255,255&lt;br&gt;is white.&lt;br&gt;&lt;br&gt;http://spring.clan-sy.com/w/images/3/34/Rune_Height.jpg&lt;br&gt;&lt;br&gt;
**Ok, now to make our Height map.&lt;br&gt;First, we need to determine the size that our Height map image needs to be.&lt;br&gt;Since our map is 16x16 that means that our Texture image will be 8192x8192,&lt;br&gt;&lt;font color=&quot;red&quot;&gt;the Height map is 1/8 the size of our Texture map +1&lt;/font&gt; pixel on both heighth&lt;br&gt;and width.&lt;br&gt;So with that in mind our Height map image should be 1025x1025. After you&lt;br&gt;are done creating your height map save it and leave the image open.

*'''Step 3: Metal Map'''
**The Metal map is the image that determines metal placement on the map.&lt;br&gt;This map uses the &lt;font color=&quot;red&quot;&gt;Red Channel&lt;/font&gt;. The Red Channel consists solely of the&lt;br&gt;colors red and black. Black on the Red Channel is equivalent to zero or no&lt;br&gt;metal(in game). Pure red is equivalent to the maximum amount of metal.&lt;br&gt;&lt;br&gt;http://spring.clan-sy.com/w/images/3/3e/Rune_Metal.jpg&lt;br&gt;&lt;br&gt;
**&lt;font color=&quot;red&quot;&gt;The Metal map should be the same size as your Height map.&lt;/font&gt; For example,&lt;br&gt;for our map the Height map is 1025x1025; therefore; the metal map should&lt;br&gt;also be 1025x1025.
**'''Some Advice''' Make sure to disperse the metal equally on all sides of the map&lt;br&gt;as people will be playing on all sides of the map. Also, take note that if you&lt;br&gt;place large amounts of metal in the center of the map or in any one location,&lt;br&gt;people will fight for that particular location above all others. While this might&lt;br&gt;make for interesting game play, the downfall to this is that whoever obtains it&lt;br&gt;will most surely be the victor. Therefore, if you are going to place a large amount&lt;br&gt;of metal in a certain location-make sure the amount is not so large that it destroys&lt;br&gt;game play.

*'''Step 4: Type Map (Optional)'''
**The Type map is the image that determines the terrain properties (such as ground&lt;br&gt;hardness and unit movement speed). The Type map uses the &lt;font color=&quot;red&quot;&gt;Red Channel&lt;/font&gt;. The&lt;br&gt;color black or zero is the default terrain type.  The varying shades between black&lt;br&gt;and pure red (255 shades) determine other terrain types.  For example, 0,0,0 =&lt;br&gt;[TERRAINTYPE0] (default), 1,0,0 = [TERRAINTYPE1], and 2,0,0 = [TERRAINTYPE2].&lt;br&gt;You can have up to 255 different terrain types. The terrain types are defined in the&lt;br&gt;.SMD file.
**&lt;font color=&quot;red&quot;&gt;The Type map should be the same size as your Height map.&lt;/font&gt; For example, for our map&lt;br&gt;the Height map is 1025x1025; therefore; the Type map should also be 1025x1025.

*'''Step 5: Featuremap'''
**The Featuremap is the image that determines the placement of features such as:&lt;br&gt;trees, grass, geovents, and custom features (i.e.-rocks, buildings, crystals, etc.).&lt;br&gt;
**&lt;font color=&quot;red&quot;&gt;The Feature map should be the same size as your Height map - 1 pixel&lt;/font&gt; on both&lt;br&gt;heighth and width. For example, for our map the Height map is 1025x1025; therefore;&lt;br&gt; the feature map should be 1024x1024.&lt;br&gt;
**To place a feature you simply place 1 pixel of the appropriate color on the featuremap&lt;br&gt;in the place where you wish it to appear on your map.&lt;br&gt;&lt;br&gt;
**&lt;font color=&quot;green&quot;&gt;Geovents - Green - 255&lt;/font&gt;&lt;br&gt;
**&lt;font color=&quot;green&quot;&gt;Trees - Green - 200-215&lt;/font&gt;&lt;br&gt;
**&lt;font color=&quot;blue&quot;&gt;Grass - Blue - 0-255&lt;/font&gt;&lt;br&gt;
**&lt;font color=&quot;red&quot;&gt;Features - Red - 255-0&lt;/font&gt;&lt;br&gt;&lt;br&gt;
**'''Some Advice''' Open the height map, resize the height map the the size of your&lt;br&gt;featuremap, Make a new layer, on this layer place the pixels where you want&lt;br&gt;your features, under this layer make a new layer and fill it in with the color black&lt;br&gt;0,0,0 then flaten the image and save it as Featuremap.bmp&lt;br&gt;

*'''Step 6: Texture Map'''&lt;br&gt;&lt;br&gt;
**http://spring.clan-sy.com/w/images/b/b6/Rune_Texture.jpg&lt;br&gt;&lt;br&gt;
*'''The End Result'''&lt;br&gt;&lt;br&gt;
**http://spring.clan-sy.com/w/images/f/f3/Demo_screen001.jpg&lt;br&gt;&lt;br&gt;http://spring.clan-sy.com/w/images/e/e1/Demo_screen002.jpg

[[Category:Tutorial]]
[[Category:Map making]]</text>
      <sha1>6v2o6smb51lwjokt466slxdkwid3t41</sha1>
    </revision>
  </page>
  <page>
    <title>Tutorial:MapMakingGuide(aGorm)</title>
    <ns>0</ns>
    <id>1200</id>
    <revision>
      <id>28915</id>
      <parentid>28914</parentid>
      <timestamp>2014-10-19T08:33:10Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>Flozi moved page [[Map Making Guide]] to [[Tutorial:MapMakingGuide(aGorm)]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9032">[[Engine_Development|Development]] &lt; [[Map_development|Map Development]] &lt; {{FULLPAGENAME}}

=aGorm's Ultimate Map Making Guide=


== Stage A Ã¢â‚¬â€œ Pre-Preparation ==


So you want to make a map? Want to give something back? Good! However there are several things you're going to have to make sure you know before you start. And that's what this section is about.

===Have you the Time?===

Believe me when I say, making a map will take a lot of your time. Hours. Days. Some take weeks to finish. So make sure you want to commit yourself to it first (this isn't a StarCraft style, make a map in 5 minuets sort of situation)

===Have you the Hardware?===

Making a map unfortunately requires a computer better than that need to actually play spring. Sounds daft? You're dealing with very large images, which take up a lot of ram. Seeing as Windows needs 512 just to run, you'll need at least a gig if you want any joy. Also you'll need a half decent processor, or compiling will take forever. Some people will disagree, but honestly, at least a 2 GHz and a gig of ram would be useful.

===Have you the Software?===

First off, you will need Several Different pieces of software.

====Mapconv:====
There are actually two versions; however, I will strongly recommend that you use Mothers Mapconv program. All the advice given below will assume you will be using it. And whilst the vast majority of this will be relevant for the original one, there are a few vital differences in what does what etc.

====Art Program:====
You will need an art program. Paint will not be sufficient. You can use whatever you are comfortable with, but this guild is written with Photoshop in mind. However many of the options are the same, they all do the same thing in the end.
Suggestions of programs to use:

* Photoshop
* Paint shop Pro
* GIMP
* Fireworks

The following are not required, but are useful, or needed for more advanced maps.

====Terrain Generators:====
Terragen / TerrTexGen both of these programs take a height map, and create a realistic render of terrain based of it, using values you input.

====3D software:====
There are HUNDREDS of different 3D packages out there, any one of them can be used to make a feature for you map, however you'll only be able to finish the model off in ONE program, named 3DO Builder. In this program you can create the final file that spring can read.

===Beverages:===
Making a map sucks you in; I suggest you keep [http://www.onebob.co.uk/darren/pics/water.jpg water handy] at all times, along with a light snack.

===Music:===
I Suggest you put your favourite Music on, that way your doing two things at once. However If you gonna head bang put down the mouse first...


==Stage B Ã¢â‚¬â€œ Preparation==

Now you have prepared your self of the task ahead, its time to actually think about making the map. This section is about map concepts, ideas, and to help you decided what sections of this tutorial your going top want to read (After all, not all maps require the same things, most maps have no features, don't use a custom skybox, and may not make use of the terrain type map. So you will not want to bother with those sections!)

===Concepts:===
This is something all maps need in one degree or another. What purpose do you want your map to serve? This can be as simple as &quot;I want the map to be really huge so that we can enjoy huge battles&quot; to something more conceptual like &quot;I want to make a platform style map, with limited access and lots of cover, with most of the resources in the middle&quot;. It doesn't matter too much what your concept is, as long as you have one. Maps made without a concept tend to be boring, dull, uneven, and unplayed. And you don't want that, do you?

===What makes it special:===
So what do you want your map to include? For instance, say I was going to take the first concept and just make a really huge map. What am I going to do to make it special? Shall I use custom features? Or a radical skybox? Maybe there should be reclaimable wreckages strewn over the battle field. There are many different things you can add to a map to make it unique, and often it's a case of striking a balance between them all. All the different things you can add to a map have there own section in this tutorial, so once you know what you want you'll be able to go and read up on how to make your dream a reality.

===Very First Steps:===
No turning back now!! Before we get to the nitty gritty, you need to make several key decisions:
* How Big is your map? A small map would be between 10 x 10 and 16 x 16. Medium maps are 16x 16 to 24 x 24, anything over that can be safely called big, and If you manage to make one over 32 x 32 then its Huge!
* Rough drawing. Which is self explanatory, make a rough drawing of what you are imagining. I can be as crap as you like, but believe me its much easier to map when you have a reference. Only people with a vivid imagination can skip this...

==Stage C Ã¢â‚¬â€œ Height Map==

Some people will be thinking, hold on, why is Height Map first! We'll, it's quite simple... textures may change, but heightmaps don't! Let me explain that... Two maps with the same heightmap will play exactly the same as each other, irrespective of what texture you use. For instance, when making a map I once made a snowy Mountain one. However while it played nicely, I decided it looked crap, so I changed it to being a sandy island. Lots of maps out there have had several revisions of texture map!

Now I'm going to explain the stages of making a heightmap (for which you'll need a graphics program, I use Photoshop, and an Idea of were your mountains and valleys are.)

===Basic heightmap:===
First things first, make a black canvas with the following dimensions:
X dimension: (map width) x 64   1
Y dimension: (map height) x 64   1
For instance a 16 x 16 map will need a 102&lt;b&gt;5&lt;/b&gt; x 102&lt;b&gt;5&lt;/b&gt; heightmap.

[[Image:Height1.jpg]]

Black is the lowest point on the map. So valleys, or on water maps, water are going to be in these areas. 
White is the highest point on the map. So the top of a mountain will be white.
Greys are the levels in between, of which there are 256 levels.

===Adding a mountain:===
To add a mountain (all be it, a very unnatural one) take a paint brush and put down a splodge of white were the mountain will be. Tada! In game that will already be a mountain! Now your probably thinking, wait it can't be that easy... Well as I said early, that will make a mountain, but It won't look very natural. However we'll deal with that later. For now, you want to paint on roughly were your highest points are. If you want smaller hills, use a shade of grey to draw with.

[[Image:Height2.jpg]]

===Making Some Variation:===
So the land looks like a kids rendition of a landscape, with perfect hills, and smoth valleys. Not to realistic right? Well there are several techniques to add that bit of variation to the land. Bare in mind these steps will work in other software besides photoshop, but that you may have to go about them in a different way...

====Noise:====
Create a New layer on top of your current heightmap and fill it black. Next, drop down the filters menu, go to noise, add noise, and it will open the noise dialogue box. Make sure you select &quot;Monochromatic&quot; (for black and white)and drag the slider till it looks about half and half. Click OK and you should have noise!
Now go to filters, blur, gaussian blur. Set it to between 2 and 4 pixels and click OK again. Now you should have a greyish black mess.
Now mess around with the layer blending settings (in photoshop there in the drop down just above the layers, and start with normal) I normally use something like a &quot;linear dodge&quot;, and set the opacity to 50% ish, but Its best to play around.

[[Image:Height3.jpg]]

What this will have done Is lightened small areas of your map by a small amount, causing minor variations in the height, which means your land wont be entirely flat. And because its only a minor variation you can normally still build on it (if you cant build on the land, drop the opacity a bit more, which of course means make sure you save with layers ON)

====Sharpness:====
OK, so you got all that, but your still thinking that those mountains are a bit... odd? Well that's because most mountains are in fact not perfectly rounded hills. They have steep sides, sharp transitions, sheer drops, as well as the pleasant rolling hills that you get.
To begin to get the effect, go to the layer below the layer with your noise on it (else it will overwrite it!) and get a black brush. Make sure you turn the hardness up a bit (50% should do for a basic test). Then carve out a section on the hill. That makes a shear drop! But you may not want that, so turn down the opacity of that layer.

[[Image:Height4.jpg]]

I then generally build up these layers (each with maybe 20%-40% opacity) till I have made the sort of hills I'd like. Bear in mind this is all personal preference!

[[Image:Height5.jpg]]

[[Category:Tutorial]]
[[Category:Map making]]</text>
      <sha1>mpdj3mq8td9w40t70cymxcq0k18qg23</sha1>
    </revision>
  </page>
  <page>
    <title>Tutorial:MapWithPOVRay(Tinnut)</title>
    <ns>0</ns>
    <id>2475</id>
    <revision>
      <id>28909</id>
      <parentid>28908</parentid>
      <timestamp>2014-10-18T21:57:53Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>Flozi moved page [[Create map texture with povray]] to [[Tutorial:MapWithPOVRay(Tinnut)]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="15671">[[Engine_Development|Development]] &lt; [[Map_development|Map Development]] &lt; {{FULLPAGENAME}}


== Howto ==
'''Create a map's texture using Povray to generate the texture'''


!! This is currently a work in progress and make take some time to complete. !!

=== Intro ===
This guide will take you through creating a texture for a Spring map using the freeware Povray program.  Povray is an excellent [http://en.wikipedia.org/wiki/Ray_tracing raytracing] application that generates &quot;scene&quot; images using a scene definition language in a text file.  We can use it to create a map's texture by creating a heightfield object, putting our &quot;camera&quot; directly over the object, setting the camera to orthographic, and rendering a bitmap at our map's dimension.  The steps below will give you an easy enough to follow process to generate a nice map, but if you want to create different maps you'll need to learn Povray's scene definition language.  This language is easy enough to follow, but depending on your tastes you could be better off using a tool that specialises in maps and map textures, such as the excellent [http://www.bundysoft.com/L3DT/ L3DT].  

The guide does not cover other aspects of map creation (heighmaps, features, metal, compiling, etc), but there are a few excellent guides within the Wiki that already cover those steps.

Povray is available for both Windows and Linux.  I have only tested these steps under Windows, but they should work under Linux.

Please note that a lot of the maths used in the scene definition file has only been tested on a 16x16 map (8192x8192 pixels).

Warning:  The base textures I use in this example are all mostly rubbish that I created in a couple of minutes.  I would suggest that you do not use them in your own maps :)

=== Initial Steps ===
1) Download and install Povray: [http://www.povray.org/ Povray Site]

2) Create a working folder for your map, for this example, we'll make C:\PovMap

3) Create a heightmap using whatever program (I like [http://www.gimp.org/ The GIMP], which is good, and it's free).  Here is the one we'll use for our map (I created this in a hurry and it was quite a mistake that it ended up so similar to Altered Divide):

[http://img441.imageshack.us/my.php?image=povmapheightbp9.png http://img441.imageshack.us/img441/8862/povmapheightbp9.th.png]

Your map will need to be named povmap_height.png, but if you want to use another name, just update the pov script below to use your heightmap's actual name.

4) For our example, we'll be defining three different elevation levels for which there are different terrain textures, these will be (each at 512x512):

4.1) Lowest elevation (low lying areas):

[http://img176.imageshack.us/my.php?image=level1zd7.png http://img176.imageshack.us/img176/953/level1zd7.th.png]

4.2) Middle elevation (main map surface):

[http://img170.imageshack.us/my.php?image=level2pf6.png http://img170.imageshack.us/img170/6473/level2pf6.th.png]

4.3) Highest elevation (mountains):

[http://img176.imageshack.us/my.php?image=level3wv7.png http://img176.imageshack.us/img176/6159/level3wv7.th.png]

5) Now also for our example, we'll be defining two different textures to be used by sloping areas, one for slopes in the lower elevation areas of the map, and another for slopes in the higher elevations:

5.1) Lower elevations:

[http://img411.imageshack.us/my.php?image=slope1on6.png http://img411.imageshack.us/img411/2153/slope1on6.th.png]

5.2) Higher elevations:

[http://img411.imageshack.us/my.php?image=slope2fk7.png http://img411.imageshack.us/img411/8908/slope2fk7.th.png]

6) Create an empty text file in your C:\Povmap folder named gen_pov_texture.pov

7) Copy the following povray scene code into the above file:
{| class=&quot;wikitable&quot; style=&quot;font-style:italic; font-size:90%; border:1px dashed white; background-color: rgb(56, 70, 79);&quot;
|
&lt;pre&gt;

// Setup some parameters that we will use within the script
#declare MAP_WIDTH=8192;
#declare MAP_HEIGHT=8192;
#declare MAP_EL=600; // elevation

global_settings { 
  // ambient light level
  ambient_light rgb&lt;1,1,1&gt; 
}

// Set a directional light
light_source {
  &lt;100,-100,100&gt; * 20, color rgb 1
  parallel
  point_at &lt;1, 0, 0&gt;
}

// Set the background colour
background {rgb&lt;1,1,1&gt;}

// Define our camera position, and set it to &quot;orthographic&quot; (important :)
camera {
  orthographic
  location &lt;0,0,MAP_EL + 90&gt;    // position &amp; direction of view
  look_at  &lt;0,0,0&gt;
  right MAP_WIDTH*x            // horizontal size of view
  up MAP_HEIGHT*z               // vertical size of view
}

// ** Define our primary textures **
 
// lowest texture (512 x 512)
// Found in low lying areas of the heightfield
#declare level1_texture =
texture {
  pigment {
    image_map {
      png &quot;level1.png&quot;
    }
  }
  finish {ambient 1 diffuse 0}
  scale &lt;512/MAP_WIDTH, 512/MAP_WIDTH, 512/MAP_WIDTH&gt;
}

// middle texture (512 x 512)
// Found in the middle areas of the heightfield
#declare level2_texture =
texture {
  pigment {
    image_map {
      png &quot;level2.png&quot;
    }
  }
  finish {ambient 1 diffuse 0}
  scale &lt;512/MAP_WIDTH, 512/MAP_WIDTH, 512/MAP_WIDTH&gt;
}

// highest texture (512 x 512)
// Found in the peaks / hills / mountains of the heightfield
#declare level3_texture =
texture {
  pigment {
    image_map {
      png &quot;level3.png&quot;
    }
  }
  finish {ambient 1 diffuse 0}
  scale &lt;512/MAP_WIDTH, 512/MAP_WIDTH, 512/MAP_WIDTH&gt;
}

// Define a texture that blends from one level's texture to the next, 
// depending on elevation:
#declare levels_elevation_texture=
texture {
  gradient z
  
  texture_map {
    [0.00 level1_texture]  // from 0.0 to 0.1 we have just level1.png
    [0.10 level1_texture]
                    // from 0.1 to 0.2 we blend from level1.png to level2.png
    [0.30 level2_texture]  // from 0.2 to 0.5 we have just level2.png
    [0.40 level2_texture]
                    // from 0.5 to 0.6 we blend from level2.png to level3.png
    [0.60  level3_texture]  // from 0.6 to 1.0 we have just level2.png
    [1.00  level3_texture]
  }
}


// ** Define textures used on areas of slope

// lower slope texture (512 x 512)
#declare slope1_texture =
texture {
  pigment {
    image_map {
      png &quot;slope1.png&quot;
    }
  }
  finish {ambient 1 diffuse 0}
  scale &lt;512/MAP_WIDTH, 512/MAP_WIDTH, 512/MAP_WIDTH&gt;
}

// upper slope texture (512 x 512)
#declare slope2_texture =
texture {
  pigment {
    image_map {
      png &quot;slope2.png&quot;
    }
  }
  finish {ambient 1 diffuse 0}
  scale &lt;512/MAP_WIDTH, 512/MAP_WIDTH, 512/MAP_WIDTH&gt;
}

// Define a texture that blends from one slope's texture to the next, 
// depending on elevation:
#declare slopes_elevation_texture=
texture {
  gradient z
  
  texture_map {
    [0.00 slope1_texture]
    [0.30 slope1_texture]
    
    [0.65  slope2_texture]
    [1.00  slope2_texture]
  }
}

// ** Now define the final texture blending between the height textures 
// and the slope textures:
#declare final_texture = 
texture {
  slope {
    &lt;0,0,-1&gt;, 0, 0.5
  } 
  texture_map {
    [0.00    levels_elevation_texture]
    [0.06    levels_elevation_texture]
    [0.40    slopes_elevation_texture]
    [1.00    slopes_elevation_texture]
  }
}  

// *** Now we declare our heightfield object that uses this texture
#declare primaryHF=
height_field {
  png &quot;povmap_height.png&quot;                                  
  smooth              // smooth the heightfield
  no_shadow           // you may want to remove this
  translate &lt;-.5, -.5, -.5&gt;
  rotate &lt;90,0,0&gt;     // rotate it so that the projection of the texture is correct
  scale &lt;1,-1,1&gt;      // invert the y axis
  translate &lt;0.5, 0.5, 0.5&gt;
  texture {
    final_texture
  }
  
  // now scale to the maps height x width
  scale &lt;MAP_WIDTH, MAP_HEIGHT, MAP_EL&gt;    
  // and center it for the camera
  translate &lt;-MAP_WIDTH/2, -MAP_HEIGHT/2, -MAP_EL/2&gt;   
}


// ** If you're going to add the metal placement stuff
// ** described below, you need to put it here!


object {primaryHF}

&lt;/pre&gt;
|}

What we're essentially doing above is:

* Setting up scene parameters: lighting, the orthographic camera, etc.

* Defining a set of textures to display at different elevations and different slopes; and

* Defining a heightmap that uses our png image and applies our texture to this object

8) Double click on your gen_pov_texture.pov file so that it opens up in Povray.

9) Add a new render size (8192 x 8192):

9.1)	Drop down menu &quot;Render&quot; &gt; &quot;Edit Settings/Render&quot; &gt; Click &quot;Edit&quot; button

9.2)	Add text at bottom of file:
{| class=&quot;wikitable&quot; style=&quot;font-style:italic; font-size:90%; border:1px dashed white; background-color: rgb(56, 70, 79);&quot;
|
&lt;pre&gt;
[8192x8192, No AA  Spring]
Width=8192
Height=8192
Antialias=Off
&lt;/pre&gt;
|}

9.3) Save file

10) Restart Povray so that it re-reads the ini-file

11) Select your new render size and click Render.  This creates a bitmap file: gen_pov_texture.bmp

12) Convert to gen_pov_texture.bmp to a png file if you're using the new mapconv (it doesn't seem to like bitmaps).  I personally use [http://www.imagemagick.org/ imagemagick] to do this as it has a simple command line program &quot;convert.exe&quot; that will convert an image from one format to another and it works well with the very large bitmap image that comes out of the above steps.

13) Do all the other map stuff: metal placement bitmap, feature placement bitmap, smd file

14) Compile your map with mapconv

15) Test it :)

== Advanced stuff ==
Check out your help file that came with Povray.  There is a LOT that you can do!

=== Complex Texture Map Combinations ===
As you can see from the pov code above, a &quot;texture&quot; declaration can be an image (called an &quot;image_map&quot;), but it can also be a definition of a blend between any number of earlier defined textures (called a &quot;texture_map&quot;), which is based on a function.  In the above example, it uses the &quot;gradient&quot; function for changes in elevation, and the &quot;slope&quot; function for changes in slope.  It is possible to define much more complex sets of textures than those defined above, such as mixing different combination of slope mapings with combinations of elevation mapings.

Our blend function could actually be an image if you wanted finer control of a map's texture, by having sections of metal mixed with sections of wilderness, for example.  To do this, you would:

1) Create a new png image the same size as your heightmap (although you could make it larger or smaller) and paint sections of the map that are to use your wilderness textures in white, and the sections that are to use your metal texture in black.  For effect you could do a slight blur on the image to create grey coloured transitions where the two sections meet.  For our example I created this:

[http://img185.imageshack.us/my.php?image=texturedistributionpa8.png http://img185.imageshack.us/img185/2641/texturedistributionpa8.th.png]

3) Change the &quot;final_texture&quot; texture name in your script to &quot;final_nature_texture&quot;

4) Define a set of textures in a similar manner that define your metal textures (based on heights and slopes), with the final blended metal texture named &quot;final_metal_texture&quot;.  Don't forget to give them different names than the wilderness texture names are.

5) Create a new &quot;final_texture&quot; that is:

{| class=&quot;wikitable&quot; style=&quot;font-style:italic; font-size:90%; border:1px dashed white; background-color: rgb(56, 70, 79);&quot;
|
&lt;pre&gt;
#declare final_texture = 
texture {
  image_pattern { png &quot;texture_distribution.png&quot; }
  texture_map {
    [0.00    final_metal_texture]
    [1.00    final_nature_texture]
  }
}  
&lt;/pre&gt;
|}

Here is a screen shot of our map using this:

[http://img341.imageshack.us/my.php?image=screen000wd0.png http://img341.imageshack.us/img341/43/screen000wd0.th.png]

=== Procedural Textures ===
It is also possible to use &quot;procedural textures&quot; instead of image_map textures.  These can be quite useful for areas on your map that have a high slope as they can create a better looking texture, including effects such as the layered rock textures - like &quot;Painted Rock&quot;.  Unfortunately these types of textures can result in larger map sizes, but if you just use them on the high slope areas of your map it should not be too bad.

Some good examples used in terrains can be found at the [http://geomorph.sourceforge.net/povray/en/Geomorph%20-%20Predefined%20Povray%20Scripts.html Geomorph website].

The povray install also includes a number of nice example procedural textures.

=== Placing Metal Textures ===
There are quite a few posible ways to have Povray place metal textures for you.  One approach that I have used is:

1) Define a function that will return the current metal locations in a pov kind of way:
{| class=&quot;wikitable&quot; style=&quot;font-style:italic; font-size:90%; border:1px dashed white; background-color: rgb(56, 70, 79);&quot;
|
&lt;pre&gt;
  #declare getMetal = function {
    pigment {
      image_map {
        png &quot;metallocations.png&quot;
      }
      scale &lt;1,-1,1&gt;
    }
  }
&lt;/pre&gt;
|}
This function, when called for a given coordinate (0 to 1), returns a vector of the three colours for that point.

2) We now define a texture that we'll use for our metal (this is made up of a number of subcomponent textures):
{| class=&quot;wikitable&quot; style=&quot;font-style:italic; font-size:90%; border:1px dashed white; background-color: rgb(56, 70, 79);&quot;
|
&lt;pre&gt;
// A transparent texture
#declare Transparent_Texture=
texture {
	pigment {color rgbt&lt;0,0,0,1&gt;}
}

// A simple brownish texture
#declare dirt_Texture=
texture {
  pigment { rgb &lt;0.75,0.55,0.35&gt;*0.7 }
  normal {
    granite 0.5  // for use with normal{} (0...1 or more)
    //scale MAP_WIDTH
  }
  finish {
    ambient 0.5
    diffuse .9
  }
}

// A shiny metalish texture
#declare metal_TextureBase = 
texture { 
  pigment {
    rgb&lt;1,1,1&gt;    
  }
  normal {
      granite 0.9  // for use with normal{} (0...1 or more)
    scale 80/5
  }
  finish {
    ambient 0.6
    brilliance 4
    diffuse 1
    specular 0.90
    roughness 1/80
  }
}

// A combination of the metal_TextureBase, the dirt_Texture and the
// Transparent_Texture
#declare metal_Texture=
texture {
  bozo              // very smooth, random noise function
  turbulence 0.3  // turbulence often useful

  texture_map {
    [0.0  metal_TextureBase]  //T_Silver_3B
    [0.42  metal_TextureBase]
    [0.47  dirt_Texture]
    [0.50  dirt_Texture]
    [0.55  Transparent_Texture]
    [1.0  Transparent_Texture]
  }
  //scale &lt;16, 16, 16&gt; //even
  scale &lt;7, 32, 16&gt; //stretched 
  rotate z*40  //set it at an angle so it looks betterer ;)
}

#declare blob_Texture=
texture {
  slope { z, 0.0, 0.5 }
  texture_map {
    [0.0  Transparent_Texture]
    [0.6  Transparent_Texture]
    [1.0  metal_Texture]
  }
}  
&lt;/pre&gt;
|}
3) Finally, we define a &quot;blob&quot; object that adds a sphere object to the master blob object for each point in the metal map: 
{| class=&quot;wikitable&quot; style=&quot;font-style:italic; font-size:90%; border:1px dashed white; background-color: rgb(56, 70, 79);&quot;
|
&lt;pre&gt;  #declare metalBlob=
  blob {
  #declare geos=0;
  #declare ix=4.0;
  #declare num=0;
  #while (ix &lt; MAP_WIDTH)
    #declare iy=0.0;
    #while (iy &lt; MAP_WIDTH)
      #declare metal=getMetal(ix/MAP_WIDTH, iy/MAP_WIDTH, 0);
      #if (metal.red)
        #declare Pos = trace(primaryHF,&lt;ix-MAP_WIDTH/2, -iy+MAP_WIDTH/2, MAP_EL*2&gt;,-z);
        sphere {
            //Pos-&lt;0,0,5&gt;, 8*6, 8  
            Pos-&lt;0,0,5&gt;, 8*2, 8  
        }
      #end 
      #declare iy=iy+8;
    #end
    #declare ix=ix+8;
  #end
  
    texture {
      blob_Texture
    }
    scale &lt;1,1,0.5&gt;  
  }  //metalBlob

  object {metalBlob}&lt;/pre&gt;
|}
This all adds some time to the rendering time, but seems to work well enough (although it could be nicer).

[[Category:Tutorial]]
[[Category: Map_making]]</text>
      <sha1>6d2i1jd1u7w8sl1jftdejvld5ptk3w1</sha1>
    </revision>
  </page>
  <page>
    <title>TutorialBlenderWorkFlow</title>
    <ns>0</ns>
    <id>3444</id>
    <redirect title="Assimp" />
    <revision>
      <id>26199</id>
      <timestamp>2013-02-22T14:13:08Z</timestamp>
      <contributor>
        <username>Jk</username>
        <id>2584</id>
      </contributor>
      <comment>Jk moved page [[TutorialBlenderWorkFlow]] to [[Assimp]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20">#REDIRECT [[Assimp]]</text>
      <sha1>g3eptm67rv66h89gk0acdgs0n0bqr31</sha1>
    </revision>
  </page>
  <page>
    <title>Tutorial blender quick workflow testpage</title>
    <ns>0</ns>
    <id>3486</id>
    <revision>
      <id>27825</id>
      <parentid>26764</parentid>
      <timestamp>2013-10-28T10:35:24Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>/* texture uvmap : */ nuke wanted file links</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5328">=each step for make a model in blender and export in .dae format to blender and make a texture for it=
::&lt;big&gt;required :&lt;/big&gt;
::blender2.65
::paint.net or gimp
::springrts 0.91 or more

==blender basic usage :==

===blender default keys:===
:wheel mouse zoom
:midle mouse rotate view
:shift midle mouse move view
:keypad 0 camera
:keypad 1 3 7 orthogonal views
:keypad 5 perspective onn off
:left mouse click select
:right mouse click move cursor
:midle mouse click unselect when B or C key
:B box select
:C circle select (wheel for scale the circle)
:shift S snap
:P separate
:ctrl J join
:ctrl P parent 
:alt P unparent
:G move
:S scale
:E extrud
:use local axe (piece axes) :double key the axe (G+z+z) or mode local than global
::scaling all else an axee :shift axe ( S+shift+z)

*===the Windows in blender :===

*views
:3dview edit windows
:tabs : edit object modes (face edge vertice when edit), magnet to grid , wireframe color textured
:propreties seting windows
:uvmap uvamp window
:info add mesh save load files  infolog windows


*&quot;3D View&quot; windows
: z switch to wireframe or material mode show
: TAB switch to edit mode or object mode

*&quot;info&quot; windows
: open save file 
: export import /colladata(only selected to switch)
: add mesh plane cube circle UVsphere (F6 for edit the number of ring and segment and size)
: &lt;small&gt;optionnaly :add lamp and camera for make render&lt;/small&gt;

*&quot;properties&quot; windows
:tabs are:
::add material alow making uvmap colored (else use the same material dfor all pieces)
::add texture new, type:image or movie , coordinates:uv 
::render for make picture or movies of the model
::object data : camera light edit

*&quot;UVimage editor&quot; windows
:select an object in 3Dview TAB to edit mode select all A key
:in UV image editor open image select a image exponant of 2(1024),A key select all ,UVs / export uv layout with diferent name for each objects
:view/draw other objects
:in 3Dview windows back to object mode keep the previous piece selected and tab edit mode for the new (highlighted
:in UVimage editor you see in dark the other selected piece and must use scale move for all the piece can not colide on the same image 
::this will only erxport the material color on the picture and the shapes of the faces



::export model to  springrts : export/colladata dae format (selection only)

:for springrts the model must have a main piece object where all other must be parented  depending of the anim you want make in animDef lua later
:take care of the center of evry object because springrts will only considere them during anims


== texture uvmap :==
*each piece must have a texture who will be merged in 2d editor
::3dview ,edit mode , select all faces ,mesh/smart uv project , uvmap layer editor windows , UVs/export uv layer , open in gimp or paint.net , select transparent background , invert selection , copy , paste to main uvmap picture , select a the part to colorise , invert selection , copy ,paste on the color picture (same size) ,select all of the colored picture , paste on the main uvmap picture , redo for each diferent part to color

[[File:Blender_3D_View_F6.jpg|200px|left|Blender_3D_View_F6]]
[[File:Blender 3D View Mesh VUUnwrap SmartUVProject.jpg|320px|right|Blender 3D View Mesh VUUnwrap SmartUVProject]]

[[  File:Blender 3D View Mesh VUUnwrap.jpg|320px|right| Blender 3D View Mesh VUUnwrap ]]

[[ File:Blender 3D View Object Mode.jpg |320px|right| Blender 3D View Object Mode  ]]
[[ File:Blender 3D View Pivot Point.jpg |320px|right|  Blender 3D View Pivot Point]]

[[ File:Blender 3D View Viewport Shading.jpg |320px|right| Blender 3D View Viewport Shading ]]
[[ File:Blender Info Add Mesh UV Sphere.jpg |320px|right|Blender Info Add Mesh UV Sphere]]

[[File:Blender info File Export Colladata.jpg |320px|right| Blender info File Export Colladata ]]
[[ File:Blender info File Export Colladata Selection Only.jpg |320px|right|Blender info File Export Colladata Selection Only ]]

[[File:Blender UV Image Editor Image Open Image.jpg  |320px|right|Blender UV Image Editor Image Open Image  ]]
[[ File:Blender UV Image Editor UVs Export UV Layout.jpg |320px|right| Blender UV Image Editor UVs Export UV Layout  ]]
[[ File:Blender windows 3D View.jpg |320px|right| Blender windows 3D View  ]]
[[File:Blender windows info.jpg  |320px|right| Blender windows info ]]

[[ File:Blender windows Properties.jpg |320px|right| Blender windows Properties  ]]
[[ File:Blender windows UV Image Editor.jpg |320px|right|Blender windows UV Image Editor  ]]

[[ File:Blender 3D View N GLSL.jpg |320px|right|  Blender 3D View N GLSL ]]
[[ File:Blender Properties Textures Texture Coordinates UV.jpg |320px|right|  Blender Properties Textures Texture Coordinates UV ]]

[[File:Blender Properties Textures Texture Open Image.jpg  |320px|right| Blender Properties Textures Texture Open Image  ]]
[[ File:Blender Properties Textures Type.jpg |320px|right| Blender Properties Textures Type ]]

[[ File:Blender Properties Textures New.jpg |320px|right| Blender Properties Textures New]]
[[ File:Blender Properties Material New.jpg |320px|right|Blender Properties Material New ]]

[[ File:Blender Properties Material Diffuse Color.jpg |320px|right|Blender Properties Material Diffuse Color  ]]
[[  |320px|right|   ]]
[[  |320px|right|   ]]
[[  |320px|right|   ]]







[[Category:Emmanuel]]</text>
      <sha1>3eqhxuwtfulxetcju9ck7h8cfjq4r36</sha1>
    </revision>
  </page>
  <page>
    <title>Tutorial testpage</title>
    <ns>0</ns>
    <id>3346</id>
    <revision>
      <id>26604</id>
      <parentid>26376</parentid>
      <timestamp>2013-03-19T11:32:37Z</timestamp>
      <contributor>
        <username>Emmanuel</username>
        <id>557</id>
      </contributor>
      <minor/>
      <comment>damn color seting</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2356">

== &lt;big&gt;what you can make in SpringRTS depending of your owns:&lt;/big&gt; ==
{| class=&quot;wikitable sortable&quot;
|-
! Time !! Work !! Social !! Idea !! hardware !! Allow to
|-
| not || not || not || not || not || nothing
|-
| few || few || lot || not || not || search friendly neightboor with few hardware
|-
| lot || few || lot || not || not || search friendly neightboor with lot hardware
|-
| lot || lot || lot || not || not || team friend neightboor with lot hardware
|-
| few || few || not || not || few || watch youtube game records
|-
| few || few || not || not || lot || watch springRTS replay
|-
| few || few || not || not || huge || watch springRTS replay all seting top
|-
| few || few || not || not || lot ||crushed in minutes at springRTS game
|-
| few || few || not || not || huge ||crushed in minutes at springRTS game seting top
|-
| few || lot || not || few || lot ||rank at springRTS game
|-
| few || lot || not || few || huge ||rank at springRTS game seting top
|-
| lot || lot || few || few || lot ||teamplay at springRTS game
|-
| lot || lot || few || few || huge ||teamplay at springRTS game seting top
|-
| lot || huge || lot || few || lot ||troll noobs at springRTS game
|-
| lot || huge || lot || few || huge ||troll noobs at springRTS game seting top
|-
| few || few || not || few || few || draw map &amp; model design
|-
| lot || few || lot || few || Huge || game tester
|-
| lot || lot || lot || few || Huge || engine tester
|-
| lot || lot || huge || lot || few || website owner or wiki maintener
|-
| lot || lot || not || lot || Huge || make your own map or unit alone
|-
| huge || lot || few || huge || Huge || make your own game alone
|-
| lot || lot || few || lot || Huge || make parts for an existing game and submit
|-
| huge || lot || huge || few || lot || team leader of a popular player clan
|-
| huge || huge || few || few || Huge || make your mod/mutator/fanart
|-
| huge || huge || huge || few || Huge || team leader of a popular mod/mutator
|-
| huge || huge || huge || lot || Huge || team leader of a commercial game project
|-
| lot || huge || lot || lot || Huge || become engine dev of a branch
|-
| huge || huge || huge || huge || huge || lead springRTS or a derivative
|}



{{LuaCallout
|parent = grey
|name = greybold
|params = green1  
|return = yelow1 
|description = coloring strings}}
&lt;hr/&gt;




[[Category:Emmanuel]]</text>
      <sha1>2p394yf7b3vqegpjncgumlhnphyrw9e</sha1>
    </revision>
  </page>
  <page>
    <title>UH</title>
    <ns>0</ns>
    <id>1187</id>
    <redirect title="UberHack" />
    <revision>
      <id>11014</id>
      <timestamp>2005-12-28T22:14:13Z</timestamp>
      <contributor>
        <username>Hoehrer</username>
        <id>103</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="22">#REDIRECT [[UberHack]]</text>
      <sha1>5ubuvjl9cyi0qaexvu4tr3jq0qvxd4u</sha1>
    </revision>
  </page>
  <page>
    <title>UI:Development</title>
    <ns>0</ns>
    <id>3434</id>
    <redirect title="Chili" />
    <revision>
      <id>26097</id>
      <timestamp>2013-02-16T17:36:58Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>Flozi moved page [[UI:Development]] to [[Chili]]: * Chili specific page, not general about UI development
* Chili page is a wanted page
* Sunspot should have listened to me and knorke in the first place</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="19">#REDIRECT [[Chili]]</text>
      <sha1>4zn6w83qtikoie4oh0lgniesqz79z6g</sha1>
    </revision>
  </page>
  <page>
    <title>UI commands</title>
    <ns>0</ns>
    <id>2563</id>
    <revision>
      <id>31306</id>
      <parentid>31305</parentid>
      <timestamp>2020-12-19T09:58:51Z</timestamp>
      <contributor>
        <username>Tulipe</username>
        <id>2938</id>
      </contributor>
      <comment>/* 3 commands added */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="21757">[[Engine_Development|Development]] &lt; [[Lua_Scripting|Lua Scripting]] &lt; {{FULLPAGENAME}}
=How to use the console=
The ingame chat is the console. Open with hitting the `&lt;code&gt;return&lt;/code&gt;` or `&lt;code&gt;enter&lt;/code&gt;` key.
If you want to enter a command into ingame chat, you must add a &lt;code&gt;/&lt;/code&gt; in front&lt;br&gt;
for example: &lt;code&gt;/commandhelp&lt;/code&gt;&lt;br&gt;
Some commands will also autocomplete if you press &lt;code&gt;TAB&lt;/code&gt;. So if you enter &quot;/com&quot; and then to press TAB, it will complete it to `/command` and tells you there is `/commandhelp` &amp; `/commandlist`, if you now enter either `l` or `h` and press TAB again it will complete to one of them.

Also commands are not case-sensitive.

=Lists of commands, some are even explained=

For a complete (excluding Lua commands &amp; some engine `actions`) use:
&lt;code&gt;/commandlist&lt;/code&gt;

Example output (104.0):
&lt;pre style=&quot;overflow:auto; width:auto;&quot;&gt;
Chat commands plus description
==============================
/Atm                             (synced)    Gives 1000 metal and 1000 energy to the issuing players team
/Cheat                           (synced)    Enables/Disables cheating, which is required for a lot of other commands to be usable
/Destroy                         (synced)    Destroys one or multiple units by unit-ID, instantly
/DevLua                          (synced)    Enables/Disables Lua dev-mode (can cause desyncs if enabled)
/EditDefs                        (synced)    Allows/Disallows editing of unit-, feature- and weapon-defs through Lua
/Give [amount] &lt;objectName|'all'&gt;(synced)    Places one or multiple units of a single or multiple types on the map, instantly; by default to your own team.
                                             Example: /give 10 corkrog 3 - gives team 3 10 corkrogs.
/GlobalLOS                       (synced)    Enables/Disables global line-of-sight, which makes the whole map permanently visible to everyone or to a specific allyteam
/GodMode                         (synced)    Enables/Disables god-mode, which allows all players (even spectators) to control all units (even during replays, which will DESYNC them)
/LuaGaia                         (synced)    Allows reloading or disabling LuaGaia, and to send a chat message to LuaGaia scripts
/LuaRules                        (synced)    Allows reloading or disabling LuaRules, and to send a chat message to LuaRules scripts
/NoCost                          (synced)    Enables/Disables everything-for-free, which allows everyone to build everything for zero resource costs
/NoHelp                          (synced)    Enables/Disables widgets (LuaUI control)
/NoSpecDraw                      (synced)    Allows/Disallows spectators to draw on the map
/NoSpectatorChat                 (synced)    Enables/Disables spectators to use the chat
/ReloadCEGs                      (synced)    Reloads CEG scripts
/ReloadCOB                       (synced)    Reloads COB scripts
/Skip                            (synced)    Fast-forwards to a given frame, or stops fast-forwarding
/Take                            (synced)    Transfers all units of allied teams without any active players to the team of the issuing player
/AdvMapShading                   (unsynced)  Set or toggle advanced map shading mode
/AdvModelShading                 (unsynced)  Set or toggle advanced model shading mode
/AIControl                       (unsynced)  Creates a new instance of a Skirmish AI, to let it controll a specific team
/AIKill                          (unsynced)  Kills the Skirmish AI controlling a specified team
/AIList                          (unsynced)  Prints a list of all currently active Skirmish AIs
/AIReload                        (unsynced)  Reloads the Skirmish AI controlling a specified team
/AirMesh                         (unsynced)  Show/Hide the smooth air-mesh map overlay
/AllMapMarks                     (unsynced)  Show/Hide all map marks drawn so far
/Ally                            (unsynced)  Starts/Ends alliance of the local players ally-team with another ally-team
/ATM                             (unsynced)  Redirects command /ATM to its synced processor
/BufferText                      (unsynced)  Write the argument string(s) directly to the console history, but not anywhere else. This is useful for fast manual issuing of the command,
                                             later on
/Chat                            (unsynced)  Starts waiting for intput to be sent to 
/ChatAll                         (unsynced)  Starts waiting for intput to be sent to All
/ChatAlly                        (unsynced)  Starts waiting for intput to be sent to Ally
/ChatSpec                        (unsynced)  Starts waiting for intput to be sent to Spec
/ClearMapMarks                   (unsynced)  Remove all map marks drawn so far
/Clock                           (unsynced)  Shows a small digital clock indicating the local time
/CmdColors                       (unsynced)  Reloads cmdcolors.txt
/CommandHelp                     (unsynced)  Prints info about a specific chat command (so far only synced/unsynced and the description)
/CommandList                     (unsynced)  Prints all the available chat commands with description (if available) to the console
/Console                         (unsynced)  Enables/Disables the in-game console
/ControlUnit                     (unsynced)  Start to first-person-control a unit
/Crash                           (unsynced)  Invoke an artificial crash through a NULL-pointer dereference (SIGSEGV)
/CreateVideo                     (unsynced)  Start/Stop capturing a video of the game in progress
/Cross                           (unsynced)  Allows one to exchange and modify the appearance of the cross/mouse-pointer in first-person-control view
/CtrlPanel                       (unsynced)  Reloads GUI config
/Debug                           (unsynced)  Enable/Disable debug rendering mode
/DebugColVol                     (unsynced)  Enable/Disable drawing of collision volumes
/DebugDrawAI                     (unsynced)  Enables/Disables debug drawing for AIs
/DebugGL                         (unsynced)  Enable/Disable OpenGL debug-context output
/DebugGLErrors                   (unsynced)  Enable/Disable OpenGL debug-errors
/DebugInfo                       (unsynced)  Print debug info to the chat/log-file about either: sound, profiling
/DebugPath                       (unsynced)  Enable/Disable drawing of pathfinder debug-data
/DebugTraceRay                   (unsynced)  Enable/Disable drawing of traceray debug-data
/DecGUIOpacity                   (unsynced)  Decreases the opacity(see-through-ness) of GUI elements
/DecreaseViewRadius              (unsynced)  Decrease the view radius (higher performance, uglier view)
/Deselect                        (unsynced)  Deselects all currently selected units
/Destroy                         (unsynced)  Destroys one or multiple units by unit-ID, instantly
/DistDraw                        (unsynced)  Set the distance between units and camera, at which they turn into far-textures (flat/texture-only representation) (Graphic setting)
/DistIcon                        (unsynced)  Set the distance between units and camera, at which they turn into icons (Graphic setting)
/DivByZero                       (unsynced)  Invoke an artificial crash by performing a division-by-Zero
/DrawInMap                       (unsynced)  Enables drawing on the map
/DrawLabel                       (unsynced)  Draws a label on the map at the current mouse-pointer position
/DrawTrees                       (unsynced)  Enable/Disable engine-tree rendering
/DumpState                       (unsynced)  dump game-state to file
/DynamicSky                      (unsynced)  Enable/Disable dynamic-sky rendering
/Echo                            (unsynced)  Write a string to the log file
/EndGraph                        (unsynced)  Enables/Disables the statistics graphs shown at the end of the game
/Exception                       (unsynced)  Invoke an artificial crash by throwing an std::runtime_error
/Font                            (unsynced)  Reloads the fonts
/FPS                             (unsynced)  Shows/Hides the frames-per-second indicator
/FPSHud                          (unsynced)  Enables/Disables HUD (GUI interface) shown in first-person-control mode
/Fullscreen                      (unsynced)  Switches fullscreen mode
/GameInfo                        (unsynced)  Enables/Disables game-info panel rendering
/GatherMode                      (unsynced)  Enter/Leave gather-wait command mode
/Give                            (unsynced)  Places one or multiple units of a single or multiple types on the map, instantly; by default to your own team
/GrabInput                       (unsynced)  Prevents/Enables the mouse from leaving the game window (windowed mode only)
/GroundDecals                    (unsynced)  Disable/Enable ground-decals rendering. Ground-decals are things like scars appearing on the map after an explosion.
/GroundDetail                    (unsynced)  Set the level of ground detail
/Group                           (unsynced)  Allows modifying the members of a group
/Group0                          (unsynced)  Allows modifying the members of group 0
/Group1                          (unsynced)  Allows modifying the members of group 1
/Group2                          (unsynced)  Allows modifying the members of group 2
/Group3                          (unsynced)  Allows modifying the members of group 3
/Group4                          (unsynced)  Allows modifying the members of group 4
/Group5                          (unsynced)  Allows modifying the members of group 5
/Group6                          (unsynced)  Allows modifying the members of group 6
/Group7                          (unsynced)  Allows modifying the members of group 7
/Group8                          (unsynced)  Allows modifying the members of group 8
/Group9                          (unsynced)  Allows modifying the members of group 9
/HardwareCursor                  (unsynced)  Enables/Disables hardware mouse-cursor support
/HideInterface                   (unsynced)  Hide/Show the GUI controlls
/IncGUIOpacity                   (unsynced)  Increases the opacity(see-through-ness) of GUI elements
/IncreaseViewRadius              (unsynced)  Increase the view radius (lower performance, nicer view)
/Info                            (unsynced)  Shows/Hides the player roster
/InputTextGeo                    (unsynced)  Move and/or resize the input-text field (the &quot;Say: &quot; thing)
/LastMsgPos                      (unsynced)  Moves the camera to show the position of the last message
/LessClouds                      (unsynced)  Decreases the density of clouds (higher performance)
/LessTrees                       (unsynced)  Decreases distance from the camera at which trees are still drawn
/LODScale                        (unsynced)  Set the scale for either of: LOD (level-of-detail), shadow-LOD, reflection-LOD, refraction-LOD
/LuaGaia                         (unsynced)  Redirects command /LuaGaia to its synced processor
/LuaRules                        (unsynced)  Redirects command /LuaRules to its synced processor
/LuaSave                         (unsynced)  Save the game state to a specific file, add -y to overwrite when file is already present
/LuaUI                           (unsynced)  Allows one to reload or disable LuaUI, or alternatively to send a chat message to LuaUI
/MapBorder                       (unsynced)  Set or toggle map-border rendering
/MapMarks                        (unsynced)  Enables/Disables map marks rendering
/mapmeshdrawer                   (unsynced)  Switch map-mesh rendering modes: 0=GCM, 1=HLOD, 2=ROAM
/MapShadowPolyOffset             (unsynced)  
/MaxNanoParticles                (unsynced)  Set the maximum number of nano-particles (Graphic setting)
/MaxParticles                    (unsynced)  Set the maximum number of particles (Graphics setting)
/MiniMap                         (unsynced)  FIXME document subcommands. There may be more beyond minimize, maximize and geometry.
/MiniMap Minimize                (unsynced)  Performs the same action as pressing the red button under the minimap.
/MiniMap Maximize                (unsynced)  Performs the same action as holding Shift and pressing the yellow button under the minimap, i.e, maintains map aspect ratio.
/MiniMap Geometry X Y W H        (unsynced)  Sets the size of the minimap. X and Y are the coordinates of the top left corner while W and H are the width and height. Both pairs are in
                                             pixels corresponding to monitor resolution.
/MoreClouds                      (unsynced)  Increases the density of clouds (lower performance)
/MoreTrees                       (unsynced)  Increases distance from the camera at which trees are still drawn
/Mouse1                          (unsynced)  Simulates a mouse button press of button 1
/Mouse2                          (unsynced)  Simulates a mouse button press of button 2
/Mouse3                          (unsynced)  Simulates a mouse button press of button 3
/Mouse4                          (unsynced)  Simulates a mouse button press of button 4
/Mouse5                          (unsynced)  Simulates a mouse button press of button 5
/MoveBack                        (unsynced)  Moves the camera Back a bit
/MoveDown                        (unsynced)  Moves the camera Down a bit
/MoveFast                        (unsynced)  Moves the camera Fast a bit
/MoveForward                     (unsynced)  Moves the camera Forward a bit
/MoveLeft                        (unsynced)  Moves the camera Left a bit
/MoveRight                       (unsynced)  Moves the camera Right a bit
/MoveSlow                        (unsynced)  Moves the camera Slow a bit
/MoveUp                          (unsynced)  Moves the camera Up a bit
/MuteSound                       (unsynced)  Mute/Unmute the current sound system
/NoLuaDraw                       (unsynced)  Allow/Disallow Lua to draw on the map
/PasteText                       (unsynced)  Paste either the argument string(s) or if none given, the content of the clip-board to chat input
/Pause                           (unsynced)  Pause/Unpause the game
/QuitForce                       (unsynced)  Exits game to system
/QuitMenu                        (unsynced)  Opens the quit-menu, if it is not already open
/QuitMessage                     (unsynced)  Deprecated, see /Quit instead (was used to quite the game immediately)
/ReloadForce                     (unsynced)  Exits game to menu
/ReloadGame                      (unsynced)  Restarts the game with the initially provided start-script
/ReloadShaders                   (unsynced)  Reloads all engine shaders
/ResBar                          (unsynced)  Shows/Hides team resource storage indicator bar
/Resync                          (unsynced)  Redirects command /Resync to its synced processor
/SafeGL                          (unsynced)  Enables/Disables OpenGL safe-mode
/Save                            (unsynced)  Save the game state to a specific file, add -y to overwrite when file is already present
/SaveGame                        (unsynced)  Save the game state to QuickSave.ssf (BROKEN)
/Say                             (unsynced)  Say something in (public) chat
/ScreenShot                      (unsynced)  Take a low quality JPG screen-shot of the current view
/ScreenShot png                  (unsynced)  Take a high quality PNG screen-shot of the current view
/Select                          (unsynced)  &lt;chat command description: Select&gt;
/SelectCycle                     (unsynced)  &lt;chat command description: SelectUnits&gt;
/SelectUnits                     (unsynced)  &lt;chat command description: SelectUnits&gt;
/Send                            (unsynced)  Send a string as raw network message to the game host (for debugging only)
/Set                             (unsynced)  Set a config key=value pair
/Shadows                         (unsynced)  Disables/Enables shadows rendering: -1=disabled, 0=off, 1=full shadows, 2=skip terrain shadows
/ShareDialog                     (unsynced)  Opens the share dialog, which allows you to send units and resources to other players
/ShowElevation                   (unsynced)  Enable rendering of the auxiliary height-map overlay
/ShowMetalMap                    (unsynced)  Enable rendering of the auxiliary metal-map overlay
/ShowPathCost                    (unsynced)  Enable rendering of the path cost-map overlay
/ShowPathFlow                    (unsynced)  Enable/Disable rendering of the path flow-map overlay
/ShowPathHeat                    (unsynced)  Enable/Disable rendering of the path heat-map overlay
/ShowPathTraversability          (unsynced)  Enable rendering of the path traversability-map overlay
/ShowPathType                    (unsynced)  Shows path traversability for a given MoveDefName, MoveDefID or UnitDefName
/ShowStandard                    (unsynced)  Disable rendering of all auxiliary map overlays
/SlowDown                        (unsynced)  Decreases the simulation speed. The engine will try to simulate less frames per second
/SoundChannelEnable              (unsynced)  Enable/Disable specific sound channels: UnitReply, General, Battle, UserInterface, Music
/SoundDevice                     (unsynced)  Switch the sound output system (currently only OpenAL / NullAudio)
/SpecFullView                    (unsynced)  Sets or toggles between full LOS or ally-team LOS, if the local user is a spectator
/Spectator                       (unsynced)  Lets the local user give up control over a team, and start spectating
/SpecTeam                        (unsynced)  Lets the local user specify the team to follow, if he is a spectator
/Speed                           (unsynced)  Shows/Hides the simulation speed indicator
/SpeedControl                    (unsynced)  Sets how server adjusts speed according to player's load (CPU), 1: use average, 2: use highest,
/SpeedUp                         (unsynced)  Increases the simulation speed. The engine will try to simulate more frames per second
/Take                            (unsynced)  Redirects command /Take to its synced processor
/Team                            (unsynced)  Lets the local user change to another team
/TeamHighlight                   (unsynced)  Enables/Disables uncontrolled team blinking
/ToggleInfo                      (unsynced)  Toggles current info texture view
/ToggleLOS                       (unsynced)  Enable rendering of the auxiliary LOS-map overlay
/ToolTip                         (unsynced)  Enables/Disables the general tool-tips, displayed when hovering over units. features or the map
/Track                           (unsynced)  Start following the selected unit(s) with the camera
/TrackMode                       (unsynced)  Shift through different ways of following selected unit(s)
/TrackOff                        (unsynced)  Stop following the selected unit(s) with the camera
/TSet                            (unsynced)  Set a config key=value pair in the overlay, meaning it will not be persisted for future games
/ViewSelection                   (unsynced)  Moves the camera to the center of the currently selected units
/VSync                           (unsynced)  Enables/Disables vertical-sync (Graphics setting)
/W                               (unsynced)  Say something in private to a specific player, by player-name
/Water                           (unsynced)  Set water rendering mode: 0=basic, 1=reflective, 2=dynamic, 3=reflective&amp;refractive, 4=bump-mapped
/WByNum                          (unsynced)  Say something in private to a specific player, by player-ID
/WireMap                         (unsynced)  Toggle wireframe-mode drawing of map geometry
/WireModel                       (unsynced)  Toggle wireframe-mode drawing of model geometry
/WireSky                         (unsynced)  Toggle wireframe-mode drawing of skydome geometry
/WireTree                        (unsynced)  Toggle wireframe-mode drawing of tree geometry
/WireWater                       (unsynced)  Toggle wireframe-mode drawing of water geometry
&lt;/pre&gt;
More commands:
&lt;pre style=&quot;overflow:auto; width:auto;&quot;&gt;
/bind &lt;keyset&gt; &lt;action&gt;                      Binds a key or key combination. Example with a key: /bind a reclaim. Example with a &quot;key combination&quot;: /bind ctrl+a reclaim
/luarules halfhealth                         Give to all units half health
/luarules loadmissiles                       Load tacnuks, junos etc, to their max stockpile
/luagaia reload                              Reloads gaia gadgets
/luarules reload                             Reloads gadgets
/luaui reload
/luaui tweakgui                              Tweak mode on
/luaui selector                              Open the default widget selector (similar to pressing F11).
/options                                     Open the options interface for some games and mods
/Setmaxspeed #	                             Changes the maximum speed (default is 3.0)
/Setminspeed #                               Changes the minimum speed (default is 0.3)
/unbind &lt;keyset&gt; &lt;action&gt;                    Unbinds a key or key combination. Example: /unbind a reclaim.
/unbindaction &lt;action&gt;	                     Unbinds all keybinds that uses &lt;action&gt;.
/unbindkeyset &lt;keyset&gt;	                     Unbinds all bindings that uses &lt;keyset&gt;.
/unbindall	                             Unbinds all keys except the chat keybinding.

&lt;/pre&gt;

=Scripting=
In Lua scripts, these commands can be used like this:&lt;br&gt;
Spring.SendCommands(&quot;resbar 0&quot;)&lt;br&gt;
notice the missing / when used like this.&lt;br&gt;


[[Category:Help]]</text>
      <sha1>3pv4mnur6i6rjnjwaa3oqc7r634hin1</sha1>
    </revision>
  </page>
  <page>
    <title>URC Unit Guid</title>
    <ns>0</ns>
    <id>2014</id>
    <redirect title="URC Unit Guide" />
    <revision>
      <id>11827</id>
      <timestamp>2007-02-20T18:55:47Z</timestamp>
      <contributor>
        <username>SeanHeron</username>
        <id>3</id>
      </contributor>
      <comment>URC Unit Guid moved to URC Unit Guide</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29">#REDIRECT [[URC Unit Guide]]
</text>
      <sha1>12i7xy82aywaaglcdd9j6z93imkp85y</sha1>
    </revision>
  </page>
  <page>
    <title>URC Unit Guide</title>
    <ns>0</ns>
    <id>2013</id>
    <revision>
      <id>19143</id>
      <parentid>11826</parentid>
      <timestamp>2010-03-13T21:26:48Z</timestamp>
      <contributor>
        <username>Koshi</username>
        <id>2371</id>
      </contributor>
      <comment>fix category</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7940">==Level One: Land==



'''Grasshopper: Light ECM Mech'''

Capable of projecting a small scanner interference field, the Grasshopper is capable of protecting a small squadron of bots against enemy radar.



'''Spider: Light Plasma Mech'''
[[Image:Spider.jpg|left|100px]]
Sporting a four legged chassis and two light plasma weapons, the Spider is a deadly tool. Weaker, armor wise, than GD tanks, the Spider is faster and more maneuverable, capable of mounting hills and other forms of difficult terrain. 


'''Fire Ant: Flame thrower Mech'''
[[Image:FireAnt.jpg|left|100px]]
Fast, deadly, and short ranged, the Fire Ant is a quick raider that is capable of burning down enemy bases with unprecedented speed. They're armor is weak, so getting them into the fight can be a problem, but at close ranges, the Fire Ant is a deadly mech. 


'''Cricket: Light rocket mech'''
[[Image:Crickit.jpg|left|100px]]
Using the Spider chassis, the Cricket has switched the plasma pods for a rocket pod capable of firing arching missiles that have a high area of effect. Use these to back up the direct fire of your Spiders. 



'''Fly Trap: SAM mech'''
[[Image:FlyTrap.jpg|left|100px]]
Using the Spider chassis, the Fly Trap has switched the plasma pods for a Surface to Air Missile pod. The Fly Trap is able to take down enemy helos with disturbing efficiency, though heavier helicopters can withstand its fire for longer, tough repeated shots can even bring down a level 3 GD heli after a while.



'''Stink Bug: Light Mortar Mech'''
[[Image:StinkBug.jpg|left|100px]]
The Stink Bug is not as powerful as the GD's artillery. The Spider frame is simply not big enough to handle the kick back from anything stronger than a light mortar. That, coupled with the GD's heavier armor, makes the Stink Bug seem ineffective. But they, like all URC mechs, are cheap enough to be built en mass, and their long range support is still very useful. 



'''Lice: Stealth Plasma Mech'''
[[Image:Lice.jpg|left|100px]]
The Lice is nothing more than a Spider mech with a single add on. But when that add on is the Optical Camoflague Jamming System or OCJS, its an add on that can tilt the balance of battle. Completely invisible, for all intents and purposes, a few Lice can sneak through the enemy's lines and devastate and unsuspecting base. 



'''LFC Mech: Light Field Construction'''
[[Image:LFCM.jpg|left|100px]]
The LFC is equipped with a Field Construction Set (FCS) capable of cranking out Level 1 structures and turrets. The LFC is also capable of building the next generation of HUB, allowing the URC to move up to the next level of technology.



'''Tick: Scout Mech'''
[[Image:Tick.jpg|left|100px]]
Equipped with a specialized FCS and a OJCS, the Tick is capable of building Recon Poles, very small land mines and perimeter cameras. Use these to shore up your defenses, keep an eye on your enemy and generally be a nuisance.

==Tales from the Front==

September, 24, 3129. Alaskan Defense Campaign. 22 Km East of the Siberian Land Bridge.


	XZ-229. The name was printed under the Spider in probably the most inconvenient place imaginable. Which made it a freaken pain for someone (like me) to find the one that wasn't working. So who had thought that up? Maybe some stupid Compy that thought that names would help the enemy identify the spiders that had improved their programming using battlefield experience. 

	Yeah, it had blown my mind when they had let that out. Now not only were our armies bloodless, but they also learned from every engagement. Becoming better. 

	I slid out from under this Spider (XZ-331) and moved to the next one in line. The report had said, Ã¢â‚¬Å“Erratic Algorithmic BehaviorÃ¢â‚¬Â but it hadn't said what or where. Maybe using too much ink for a human was a 'inefficient' 

	Ã¢â‚¬Å“Damn it, where are you?Ã¢â‚¬Â I muttered. One of the Spiders stepped out of line, it's footsteps echoing loudly in the factory. I looked at it and glimpsed, under one of it's legs, the lettering Ã¢â‚¬Å“XZ-229Ã¢â‚¬Â.

	Ã¢â‚¬Å“There you are-Ã¢â‚¬Â I started. 229 opened fire. Bolts of plasma slammed into the wall of the factory and I staggered as a wave of cold air hit me. The Alaskan night filled the room as 229 walked out of the factory wall. 

	It got as far as the defense perimeter of our base. I saw a plasma turret turn it's barrels on the 229 and fire. The faulty unit exploded violently and a LFC walked up. It started to spray a protective polymer over the side of the wall. 

	Ã¢â‚¬Å“Well...my work here is done,Ã¢â‚¬Â I muttered, picking up my tool kit and walking out of the factory.



==Level One: Air==

'''Gnat: Sonar/Radar VTOL'''
[[Image:Gnat.jpg|left|100px]]
	Though completely unarmed and unarmored, the Gnat is still a useful asset to your aerial forces. Capable of extending your radar and sonar ranges, the Gnat is able to spot enemy forces at longer ranges than simple scouts. 


'''Fly: Interceptor VTOL'''
[[Image:Fly.jpg|left|100px]]
	A deadly little fighter, the Fly is capable of taking down enemy aircraft with deadly missile barrages. 




'''Bumble Bee: Ground Attack VTOL'''
[[Image:BumbleBee.jpg|left|100px]]
	A small VTOL armed with two small plasma cannons, the Bumble Bee is a swift attack vehicle, capable of harassing the enemy's forces.



==Tales from the Front==

October 14th, 3157 AD. Indonesian Retreat. 15 Km East of the Coral Sea


	I looked at the map...and wondered if this war could get any worse. If only I knew. This was what the 'book' called a 'Tri-engagement'. 

	Its what I called a Level A Crash Up. The computers had computed a 78% chance that our bots could drive the GD into the sea and destroy them, giving us Australia. And, for half a year, it had worked. We had pushed the GD out of Sydney, the Abo-zones and the bitox villages. Then the strangers had shown up. 

	Calling themselves the New Initiative, they hit both of us and the tankers...hard. I had been airlifted out of our forward base in a hurry. Now that had been frightening. When I lose a battle, normally the worst thing that happens is some of our robos get destroyed and we lose territory. Not like the barbarians...if they lost, they lose men and women. Ugh. Made me shake when I think about it. 

	But this time it had been scary. The VTOL had lifted into the air, fifteen or so Flies covering it. The NI's weird hover craft started to breach the outwards defenses. Plasma shots were smashing into them and I was heartened to see that yes, they did die. 

	Then lighting struck. The front three NI tanks opened fire and lighting arced from their weird guns. The plasma turrets exploded and the base's entire left flank was left wide open. More NI hover tanks began to fill the base and I turned away. No sense getting worked up over destroyed parts and pieces. 

	Ã¢â‚¬Å“Sir,Ã¢â‚¬Â A computerized voice said. Ã¢â‚¬Å“Expect incoming turbulence.Ã¢â‚¬Â 

	I looked up from the map. The VTOL shook and I wondered who was shooting at us, the GD or the NI. Did it really matter? I glanced back at the map. The radar said 'unknown aerial targets'. NI.

	The craft shook some more and I glanced out the window. I caught a glimpse of something smooth, silvery and very fast. Maybe being airlifted wasn't enough. Then I saw a missile impact in the side of the silvery thing and it exploded, falling out of the air.

	Ã¢â‚¬Å“Nice shot boys,Ã¢â‚¬Â I murmured. Then a Helicopter flew past, marked with red and green. 

	I glanced back at the map. GD dots were falling on NI dots. I grabbed my command stylus and tapped the map a few times. URC dots started to move in as well, a few bots I had kept in reserve. The VTOL shook again and I heard a missile streak past. 

	A glance out the window showed a Fly blowing apart a GD helo. I grinned. The Gnat was then struck by a strange blue sphere, fired from a NI  fighter. 

	Ã¢â‚¬Å“Now it gets interesting,Ã¢â‚¬Â I mutter, tapping my stylus some more.
[[Category: Mods]]</text>
      <sha1>azv5kefc0q5rs4y2p4ak3gfmb3u41td</sha1>
    </revision>
  </page>
  <page>
    <title>UberHack</title>
    <ns>0</ns>
    <id>995</id>
    <revision>
      <id>18879</id>
      <parentid>16894</parentid>
      <timestamp>2010-03-13T16:39:34Z</timestamp>
      <contributor>
        <username>Koshi</username>
        <id>2371</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="865">{{historical}}

UberHack or UH is one of the most popular mods for OTA.

It is a balancing mod produced and overseen by the excellent Brave Sir Robin - widely acknowledged as one of the best balancers around. Sadly he seems to have disspeared from the TA scene a few years back, but he did leave us a final version of UH - 4.0.

You can download the Spring version from [http://www.fileuniverse.com/?p=showitem&amp;ID=1633 File Universe], it's a full conversion to spring only the multidirection factory's aren't availible.

For more details on the original mod, see [http://www.rakrent.com/rtsc/html/tauh.htm this review] or [http://www.planetannihilation.com/bsr/ BSR's web site] or even  [http://en.wikipedia.org/wiki/Uberhack Wikipedia].

[[Absolute Annihilation]] took the mod as BSR left it and built on it.


See [[Glossary]]

Back to [[Mods]]

[[Category:Mods]]</text>
      <sha1>kdrbtqt8rn4a0rrtxyim3ey31ksds8s</sha1>
    </revision>
  </page>
  <page>
    <title>Uberserver</title>
    <ns>0</ns>
    <id>3285</id>
    <revision>
      <id>30909</id>
      <parentid>30662</parentid>
      <timestamp>2019-02-11T22:36:55Z</timestamp>
      <contributor>
        <username>Silentwings</username>
        <id>2883</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="501">uberserver is a lobbyserver written in python for spring lobby clients.

its currently used as the main lobby server running at lobby.springrts.com port 8200.

its the home of the server bot [[ChanServ]]

see https://github.com/spring/uberserver for more details


= bugs / features=

please report bug / feature requests to the [https://github.com/spring/uberserver/issues bug tracker]

= Documentation =
see the [https://github.com/spring/uberserver/blob/master/README.md README].
[[Category:Lobby]]</text>
      <sha1>9t7rlyypjdnnh325qe80wer8jaz0h6f</sha1>
    </revision>
  </page>
  <page>
    <title>Uberweapon</title>
    <ns>0</ns>
    <id>1342</id>
    <revision>
      <id>16832</id>
      <parentid>13830</parentid>
      <timestamp>2009-08-08T16:09:15Z</timestamp>
      <contributor>
        <username>Seanheron</username>
        <id>2595</id>
      </contributor>
      <minor/>
      <comment>see last edit - though this might be an easier salvage</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2762">{{deprecated}}

'''Uberweapon''' is a term used to describe an unit that takes a great deal of resources and time to build, but when finished, gives a great advantage and usually victory to the constructing player.

'''Uberweapon strategy''' is a strategy in which a player concentrates on reaching top technology level in shortest possible time while expanding economy. After attaining highest possible technology level, all resources are concentrated on building very powerful and expensive unit(s) (uberweapon), which in turn is used to attack enemy base and demolish it (or at least damage beyond recovery). Defensive structures and combat units are built in small quantities only, because of the great strain on economy put by building the uberweapon.

Uberweapon strategy has best chances of succeeding when:
* There is a very powerful unit available (this is fundamental)
* There are natural boundaries separating portions of the map (i. e. water)
* The map is big and resource-rich
* Enemy is [[porcing]] and doesn't plan to use [[mass destruction weapon]]
* The resources are limited (which is not the case in TA)

It is likely to fail when:
* Enemy is [[rushing]]
* Enemy uses mass destruction weapons
* Map has few natural obstacles and is easy to maneuver
* Map is resource-poor or small

Generally, when it is possible to successfully implement an uberweapon strategy, the game is considered off-balance. This strategy is also sometimes successful against &quot;stupid&quot; AI which is not willing to push any attacks until disturbed. Effective counters are i. e. making long-range or mass destruction weapons readily available and cheap or setting a fixed build / research time. However, if nukes become too easy to build, they will temselves become an uberweapon. The most common aproach is therefore to increase the build time of the most powerful units until uberweapon strategy is no longer an option, even on very large maps, or to create units allowing fast, early attack.

In some mods such as [[Absolute Annihilation]], level 3 mechs or units are candidates for an uberweapon. Players building them often overestimate their power and send them with no anti-air or ground support against swarms or level 2 defense lines, which results in quick destruction of the unit. However, if the defender is not prepared, deploying such powerful units may be effective.

Never build lots of nukes, energy weapons or long range plasma cannons. You'll either get nuked by an ally, commander bombed by an ally, commander captured by an ally, banned or kicked, and hated for life! No, 10 energy weapons cannot stop a krogoth attack, by the time it gets close it'll destroy all them very easily.


''' [[Strategy_and_Tactics|&lt;- Back to Strategy and Tactics page]]'''</text>
      <sha1>svf3v0z5zgeccv78cmyj5u506ylhurh</sha1>
    </revision>
  </page>
  <page>
    <title>Ubuntu install</title>
    <ns>0</ns>
    <id>2487</id>
    <revision>
      <id>30959</id>
      <parentid>29944</parentid>
      <timestamp>2019-02-21T20:50:32Z</timestamp>
      <contributor>
        <username>Hawara</username>
        <id>2945</id>
      </contributor>
      <comment>delete dead links to playdeb.net</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5896">[[Linux|Linux Setup Guide]] &lt; {{FULLPAGENAME}}

__TOC__
[[Image:Ubuntulogo.png]]

packages are available for: 12.10, 12.04, 11.04, 10.10, 10.04, 9.10, 9.04, 8.10

For packaging &lt;font color=&quot;#00DD00&quot;&gt;requests&lt;/font&gt; or &lt;font color=&quot;#FF0000&quot;&gt;complaints&lt;/font&gt;, please contact [[Linux:Packaging#Ubuntu | the packagers]].

= Ubuntu 9.10 and newer =

10.04 &amp; 10.10 have propretary drivers for ATI &amp; Nvidia GPU's in the menu aplication / system / additionnal drivers (they are not free but mandatory if spring is very slow and the ground of the map ingame is full white );
ATI catalyst config panel ask password for be edited but always get a bad password error for open it it need to open console and write :&quot; sudo amdcccle &quot;then that will ask the password and accept it

== Installation Instructions ==
Go to ''Applications - Ubuntu Software Center'', search for ''springlobby'' and click go.
If you want to be able to play online, see [[#Updating to newer releases|the next section]].

== Updating to newer releases ==
Go to ''System - Administration - Software Sources'', click the Other tab, click ''Add''.  Type '''ppa:spring/ppa''' and close the window. Allow it to reload the packages, and you will find the new version of Spring and Spring Lobby in update manager.

If you're running Ubuntu 10.10, see &quot;Missing repositories in Ubuntu 10.10 on this help page for software sources: https://help.ubuntu.com/community/Repositories/Ubuntu.

= Ubuntu 9.04 and 8.10 =
We now have a maintained and up to date APT repository for Ubuntu 9.04 (Jaunty) and 8.10 (Intrepid). If you have some older version of Ubuntu, you can easily upgrade with these instructions: http://www.ubuntu.com/getubuntu/upgrading.

You will need to add the Spring PPA below and install the ''springlobby'' package.  Or you can upgrade to Ubuntu 9.10 and just install the ''springlobby'' package from the new Software Center.

== Installing the repository key ==
First, we need to add the Launchpad PPA package-signing key; this allows Ubuntu to know the packages have been provided by the right people can can be trusted to be installed. If you skip this step then Ubuntu will complain about an unverifiable package every time there's an update for Spring.

Go to:
[http://keyserver.ubuntu.com:11371/pks/lookup?op=get&amp;search=0xFC66403D8670A035]

Cut and paste the page contents to a file called ''ppa-spring.pgp'' or something recognizable like that. Do not use ''Save As'' in your browser, as this will likely not work because of added HTML formatting. You can use ''Applications - Accessories - Text Editor'' to copy&amp;paste into and save to disk.

Security-conscious people can go to the Spring Developers PPA page at [https://launchpad.net/~spring/+archive/ppa launchpad.net] to verify that the key mentioned above is indeed the right one to trust. 

Now go to ''System - Administration - Software Sources'' and click on the ''Authentication'' tab to add the saved ''ppa-spring.pgp'' with the ''Import Key File'' button. The new key should now pop up in the list.

== Installing the repository ==
In ''System - Administration - Software Sources'', click on the ''Third-Party Software'' tab. Then, click the ''Add'' button, and paste one of the two lines corresponding to your Ubuntu release (9.04 or 8.10).

'''Ubuntu 9.04 &quot;Jaunty Jackalope&quot;''':
&lt;code&gt;&lt;pre&gt;
deb http://ppa.launchpad.net/spring/ubuntu jaunty main
&lt;/pre&gt;&lt;/code&gt;

'''Ubuntu 8.10 &quot;Intrepid Ibex&quot;''':
Note: Please note if out of date. (It i easy enough to try.)
&lt;code&gt;&lt;pre&gt;
deb http://ppa.launchpad.net/spring/ubuntu intrepid main
&lt;/pre&gt;&lt;/code&gt;

Close the dialog, and click on ''Reload'' when it asks.

After that is done, you can just [http://springoo.mooo.com CLICK HERE TO INSTALL EVERYTHING]. Alternatively, you can head to ''System - Administration - Synaptic Package Manager'', and search for ''spring''. For the bare essentials, you will need to install the ''spring-engine'' and ''springlobby'' packages.

SpringLobby can be found in ''Applications - Games'' after install. (Please note that you also need mods and maps to play. The easiest way to get them is to download them from within SpringLobby itself.


= Alternative installation using the terminal =
Press ''Alt-F2'' to run a command. Enter:

&lt;code&gt;&lt;pre&gt;
gksudo -- wget -O - &quot;http://keyserver.ubuntu.com:11371/pks/lookup?op=get&amp;search=0xFC66403D8670A035&quot; | \
apt-key add -
&lt;/pre&gt;&lt;/code&gt;

This will add the Spring-Developers PPA package-signing key to the list of keys that Ubuntu should trust for software packages. (See above for more info).

==Ubuntu 10.10 and newer==
&lt;code&gt;&lt;pre&gt;
sudo add-apt-repository ppa:spring
sudo apt-get update
sudo apt-get install spring
&lt;/pre&gt;&lt;/code&gt;

==Older==

Then do:
&lt;code&gt;&lt;pre&gt;
gksudo gedit /etc/apt/sources.list.d/springproject.list
&lt;/pre&gt;&lt;/code&gt;

Copy and paste the following into the file:


===Ubuntu 9.04:===
&lt;code&gt;&lt;pre&gt;
deb http://ppa.launchpad.net/spring/ubuntu jaunty main
deb-src http://ppa.launchpad.net/spring/ubuntu jaunty main
&lt;/pre&gt;&lt;/code&gt;

===Ubuntu 8.10:===
&lt;code&gt;&lt;pre&gt;
deb http://ppa.launchpad.net/spring/ubuntu intrepid main
deb-src http://ppa.launchpad.net/spring/ubuntu intrepid main
&lt;/pre&gt;&lt;/code&gt;


Save the file. You can then either use the graphical package manager Synaptic (''System - Administration - Synaptic Package Manager'') and search for ''spring'' related packages, or just install spring from a terminal using:
&lt;code&gt;&lt;pre&gt;
sudo apt-get update
sudo apt-get install spring spring-maps-default
&lt;/pre&gt;&lt;/code&gt;

== Other information ==
You can view the web page for the repository [https://edge.launchpad.net/~spring/+archive here]. Additional packages (such as one for Kernel Panic) are there as well.

The package installs the Spring executable at &lt;code&gt;/usr/games/spring&lt;/code&gt; and read-only data in &lt;code&gt;/usr/share/games/spring&lt;/code&gt;.

= See Also: =
* [[Finalizing_linux_install]]
* [[Troubleshooting_linux]]

[[Category: Linux]]</text>
      <sha1>nw6znhxpw6jj5jakkayt4tgnu5l2i9y</sha1>
    </revision>
  </page>
  <page>
    <title>Uikeys.txt</title>
    <ns>0</ns>
    <id>2483</id>
    <revision>
      <id>30706</id>
      <parentid>30705</parentid>
      <timestamp>2018-07-14T05:50:35Z</timestamp>
      <contributor>
        <username>Tulipe</username>
        <id>2938</id>
      </contributor>
      <comment>/* selections */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6393">= uikeys.txt =

==Location==
The file has to be placed into the SpringData dir, most common next to [[springsettings.cfg]].

==example==

{{sourcelink|file=doc/uikeys.txt}}

==get key codes==
to see what keycodes are triggered when a key is pressed, enable keydebug mode with

&lt;code&gt;&lt;pre&gt;
/keydebug
&lt;/pre&gt;&lt;/code&gt;


== 97.0 ==
In 97.0 support was added for '''KeyChains''' for example: 
&lt;code&gt;/bind Ctrl+a,Ctrl+b say Hello World!&lt;/code&gt;

You can double bind a button this way, e.g.:
&lt;code&gt;/bind e,e say Bar
/bind e say Foo&lt;/code&gt;
Results in the 1st press printing Foo, 2nd press printing Bar.

Additionally '''KeyChains''' are now used for several defaults:
* Double hitting drawbutton sets label
* Switching between ally, spec &amp; all chat is now done by double hitting &lt;code&gt;alt&lt;/code&gt;, &lt;code&gt;shift&lt;/code&gt; or &lt;code&gt;ctrl&lt;/code&gt;
* &lt;code&gt;alt+return&lt;/code&gt; now toggles fullscreen (default shortcut for fullscreen toggle on most OS)

== 104.0 ==
In 104.0 the default bindings for chat switching changed again;
* &lt;code&gt;alt+ctrl+(a,a)&lt;/code&gt; now toggles chatswitchally
* &lt;code&gt;alt+ctrl+(s,s)&lt;/code&gt; now toggles chatswitchspec
* &lt;code&gt;chatswitchall&lt;/code&gt; now has to be bound manually

==selections==
For details consult the source: SelectionKeyHandler.cpp. 

In the following, &quot;+&quot; and &quot;_&quot; are taken as literal plus and underscore characters, respectively. &quot;|&quot; means &quot;or&quot;, and &quot;[...]&quot; means that ... is optional.

uikeys.txt has the format
 KEY SOURCE+FILTER+CONCLUSION+
&quot;SOURCE+FILTER+CONCLUSION+&quot; will be called the ''selector''.
Generally, all elements of the selector are separated by _, where the + does not count as a separator on its own. You'll see what I mean.

Note that:
* SOURCE, FILTER and CONCLUSION are case sensitive, at least sometimes
* Spaces are significant. Do not insert any spaces in the selector string!
* Do not use a KEY that has already been bound to something else (this holds for SelectionEditor too).

The format for KEY is different from uikeys.txt: Use a combination of &lt;code&gt;Shift&lt;/code&gt; &lt;code&gt;Control&lt;/code&gt; &lt;code&gt;Alt&lt;/code&gt; followed by a key A-Z or 0-9, all separated by an underscore _.
Example:
 Control_W
 Alt_Shift_0

SOURCE describes the set of units that you want to filter and pick a selection from.
It can be one of
* &lt;code&gt;AllMap&lt;/code&gt;: obvious
* &lt;code&gt;Visible&lt;/code&gt;: obvious
* &lt;code&gt;FromMouse_D&lt;/code&gt;, where D is some number: all units that are at most a distance of D away from the mouse cursor
* &lt;code&gt;PrevSelection&lt;/code&gt;: the previous selection; that is, the one active before you hit the selection key

FILTER is an arbitrarily long list of filters.
Every filter can be preceded by &lt;code&gt;Not&lt;/code&gt; to negate it.
You will still have to use a _ to separate the &lt;code&gt;Not&lt;/code&gt; from the filter, as in &lt;code&gt;Not_Commander&lt;/code&gt;.

Here are the filters. Note that &quot;units&quot; generally means both buildings and units. Typing both got old real quick.
* &lt;code&gt;AbsoluteHealth_N&lt;/code&gt;: only units that have an absolute health &gt; N
* &lt;code&gt;Aircraft&lt;/code&gt;
* &lt;code&gt;Builder&lt;/code&gt;: only construction units
* &lt;code&gt;Building&lt;/code&gt;: only buildings
* &lt;code&gt;Category_C&lt;/code&gt;: only units of category C -- XXX what are the categories?
* &lt;code&gt;Commander&lt;/code&gt;: do not works since at least version 104
* &lt;code&gt;Idle&lt;/code&gt;
* &lt;code&gt;InHotkeyGroup&lt;/code&gt;: only units that are in a group
* &lt;code&gt;InPrevSel&lt;/code&gt;: only units of the same type as a unit in the previous selection
* &lt;code&gt;NameContain_S&lt;/code&gt;: only units whose name contains the string S
* &lt;code&gt;Radar&lt;/code&gt;: only units with either radar, sonar, or a jammer
* &lt;code&gt;RelativeHealth_P&lt;/code&gt;: only units that have health &gt; P percent
* &lt;code&gt;Transport&lt;/code&gt;
* &lt;code&gt;Waiting&lt;/code&gt;: only units that are under a wait command (usually W)
* &lt;code&gt;WeaponRange_D&lt;/code&gt;: only units that have a weapon range &gt; D
* &lt;code&gt;Weapons&lt;/code&gt;: only units that have weapons

CONCLUSION is
 [_ClearSelection]_HOWMANY
If you specify &lt;code&gt;ClearSelection&lt;/code&gt;, your new selection will replace the old one; otherwise, it will just add to it.
HOWMANY must be exactly one of 
* &lt;code&gt;SelectAll&lt;/code&gt;: all units
* &lt;code&gt;SelectOne&lt;/code&gt;: one unit, will also center the camera on that unit
* &lt;code&gt;SelectNum_N&lt;/code&gt;: at most N units -- XXX I think this includes the previously selected units (without ClearSelection), check!
* &lt;code&gt;SelectPart_P&lt;/code&gt;: P percent of the units

Recall that between every two tokens, there ''must'' be an underscore _, even if there is also a +. Another way to put it is that before every word in your selector except the SOURCE, there must be an underscore.

Some examples, first the standard bindings. Again, &quot;unit&quot; also includes buildings.
 Control_A AllMap++_ClearSelection_SelectAll+
Selects everything on the entire map.
 Control_B AllMap+_Builder_Idle+_ClearSelection_SelectOne+
Selects any (one) idle builder on entire map.
 Control_C AllMap+_Commander+_ClearSelection_SelectOne+
Selects your commander.
 Control_R AllMap+_Radar+_ClearSelection_SelectAll+
Selects all units with radar/sonar/jammer.
 Control_W AllMap+_Not_Aircraft_Weapons+_ClearSelection_SelectAll+
Selects all non-aircraft armed units
 Control_Z AllMap+_InPrevSel+_ClearSelection_SelectAll+
Selects all units of a type that was in your previous selection.

Note that up to now, all keys said &lt;code&gt;ClearSelection&lt;/code&gt;, hence they replaced your old selection.
 Control_X AllMap+_InPrevSel_Not_InHotkeyGroup+_SelectAll+
Selects all units of a type that was in your previous selection, unless they are already in a hotkey group. (Use case: if you have a set of tanks on group 1, and have since produced more of the same type(s), you could hit 1 Ctrl+V Ctrl+1 to include them in the group.)
 Control_V AllMap+_Not_Builder_Not_Commander_InPrevSel_Not_InHotkeyGroup+_SelectAll+
Selects all units of a type that was in your previous selection, except builders and commander, unless they are already in a hotkey group.

And finally, an example from the forums:
 Control_W PrevSelection+_Not_Building_Not_RelativeHealth_30+_ClearSelection_SelectAll+
From your previous selection, leaves everything that is below 30% health, and not a building. (Use this to quickly retreat damaged units.)

==make uikeys.txt read only for SpringSettings==

If you wish to aviod [[SpringSettings]] parsing and possibly ovewriting your uikeys.txt, add this line to uikeys.txt:
&lt;code&gt;&lt;pre&gt;//SPRINGSETTINGS DO NOT TOUCH&lt;/pre&gt;&lt;/code&gt;

[[Category:Help]]</text>
      <sha1>je6my1zin1t15h76qd5znjplyj2yvl5</sha1>
    </revision>
  </page>
  <page>
    <title>Unbalanced Maps</title>
    <ns>0</ns>
    <id>2784</id>
    <revision>
      <id>17855</id>
      <parentid>17854</parentid>
      <timestamp>2009-11-17T00:58:42Z</timestamp>
      <contributor>
        <username>Mongus</username>
        <id>53</id>
      </contributor>
      <comment>/* Mirrored asymmetry (metal, geography...) */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3019">== Bugs or other unbalances ==

[http://mapinfo.adune.nl/?map=TheColdPlace The cold place] has several details.
The 3ffa play, is not balanced in the usual setup, which is 1 player top left, 1 player top right and the advantaged player in bottom.
The third player, the one in the bottom, has more metal available, and a geo spot at each side, unchallenged for taking.

The player at the bottom is less harassed (if not focused expressly by a veteran who knows the map caveats), get more resources.
The players at the top, have a much closer encounter, fighting for a single geo spot and less metal patches for every one.

Its no surprise the bottom player wins usually.

This unbalance, however, makes for a good 3ffa, when one of the players is not at pair with the other two, working like a sort of handicap for the less good of the three.

This is acceptable.

What is not acceptable, is the fact, if the map is divided vertically, the right side, has 2 more metal patches at middle. Giving around 5+ ,more metal to the player in that place compared to his opponent.

This more likely a bug than a natural/geographic unbalance.

Looking forward to a fixed release (not the remakes ones).


[http://mapinfo.adune.nl/?map=DesertTriad Desert Triad], seems very equally done.
Ive not pondered exactly, the metal distribution, but from playing it, i know the right hand player has better chances.
This is, because that spot has more space between his opponents, with 2 extensive zones (that have metal patches) between them.
This, while top and bottom left, have a smaller gap between their hills, whit less metal in it, and end up engaged in a war easier because of the size of this gap.
This information will be rechecked later.


== Mirrored asymmetry (metal, geography...)==

A map that could fall in this category (needs rechecking), is [http://mapinfo.adune.nl/?map=Small_Supreme_Battlefield_V2 Small supreme battlefield], in this map, one of the the sea players, has advantage over the other.

More specifically, the top right player, has advantage over the bottom right sea player.

Why? Because the top right sea player, has more metal, (if not shared, which is usually not the case), quite some more metal, compared to the bottom right sea player. 

This mirrored asymmetry, however, is &quot;balanced&quot;, as its mirrored, because, the bottom left sea player, has the same advantage over the top left sea player.

Although, this seems to be ok, i think its a serious map unbalance, and shall be checked in real game.


Another known map with a big asymmetry in its metal spots is [http://mapinfo.adune.nl/?map=Drab Drab].
Same thing happens here (although its more noticeable, as the map is smaller, the results are more immediate).

The metal distribution is mirrored vertically, giving a good more of metal to the top left and bottom right start positions. This has not much influence in 1v1 games, but in 2v2 games, the guys that start with more metal, can steamroll their opponents much easily.


[[Category:Maps]]</text>
      <sha1>apm5w4wiva3h8vjjd0bymegn95bozrq</sha1>
    </revision>
  </page>
  <page>
    <title>Unit collision volumes</title>
    <ns>0</ns>
    <id>3585</id>
    <redirect title="Gamedev:CollisionVolumes" />
    <revision>
      <id>27897</id>
      <timestamp>2013-10-29T17:16:05Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>Flozi moved page [[Unit collision volumes]] to [[Gamedev:CollisionVolumes]]: standardise</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="38">#REDIRECT [[Gamedev:CollisionVolumes]]</text>
      <sha1>jk8llvhyl4ijfh18wv5c5fuducrnjve</sha1>
    </revision>
  </page>
  <page>
    <title>Units</title>
    <ns>0</ns>
    <id>1179</id>
    <revision>
      <id>25267</id>
      <parentid>24353</parentid>
      <timestamp>2012-10-29T12:27:34Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>remove wanted links</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="631">{{Balanced_Annihilation_deprecated}}


[[category:Balanced Annihilation]]

'''Units''' are smallest player- or AI-controllable in-game entities. They may be stationary (buildings) or mobile (kbots, vehicles, airplanes, etc.). However, in common language &quot;units&quot; are understood as &quot;mobile units&quot;.

* Before you read, please understand the [[Tech Levels]]

==Types of units==

By function:
* [[Commander]]
* [[Construction units]]
* Combat units
* [[Production buildings]]
* [[Defense buildings]]

By mobility type:
* [[Vehicles]]
* Kbots
* Hovercraft
* Seaplanes
* Airplanes
* Ships and Submarines
* Structures

[[category:Playing]]</text>
      <sha1>3z5uoytyei7347jxwf402gdmw3pmxn1</sha1>
    </revision>
  </page>
  <page>
    <title>Units-FeatureDefs</title>
    <ns>0</ns>
    <id>3581</id>
    <redirect title="Gamedev:FeatureDefs" />
    <revision>
      <id>27851</id>
      <timestamp>2013-10-28T22:28:41Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>Flozi moved page [[Units-FeatureDefs]] to [[Gamedev:FeatureDefs]]: bye bye, Units-</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="33">#REDIRECT [[Gamedev:FeatureDefs]]</text>
      <sha1>jp0ym4u6x89tebawp9f9u5t1s806xx3</sha1>
    </revision>
  </page>
  <page>
    <title>Units-UnitDefs</title>
    <ns>0</ns>
    <id>3582</id>
    <redirect title="Gamedev:UnitDefs" />
    <revision>
      <id>27853</id>
      <timestamp>2013-10-28T22:28:59Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>Flozi moved page [[Units-UnitDefs]] to [[Gamedev:UnitDefs]]: bye bye, Units-</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30">#REDIRECT [[Gamedev:UnitDefs]]</text>
      <sha1>tor4gaomudjkleae1bdb4lziielzebv</sha1>
    </revision>
  </page>
  <page>
    <title>Units-UnitsOfMeasurement</title>
    <ns>0</ns>
    <id>3523</id>
    <redirect title="Gamedev:UnitsOfMeasurement" />
    <revision>
      <id>26937</id>
      <timestamp>2013-03-25T20:41:00Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>Flozi moved page [[Units-UnitsOfMeasurement]] to [[Gamedev:UnitsOfMeasurement]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="40">#REDIRECT [[Gamedev:UnitsOfMeasurement]]</text>
      <sha1>7665j9sv4kihud1oon6zk5di6prhvxc</sha1>
    </revision>
  </page>
  <page>
    <title>Units-WeaponDefs</title>
    <ns>0</ns>
    <id>3583</id>
    <redirect title="Gamedev:WeaponDefs" />
    <revision>
      <id>27855</id>
      <timestamp>2013-10-28T22:29:10Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>Flozi moved page [[Units-WeaponDefs]] to [[Gamedev:WeaponDefs]]: bye bye, Units-</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="32">#REDIRECT [[Gamedev:WeaponDefs]]</text>
      <sha1>tv07klnp5r3j34nr8u0s50bhw2gr0e9</sha1>
    </revision>
  </page>
  <page>
    <title>Units:Buildpics</title>
    <ns>0</ns>
    <id>3584</id>
    <redirect title="Gamedev:Buildpics" />
    <revision>
      <id>27890</id>
      <timestamp>2013-10-29T11:02:50Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>Flozi moved page [[Units:Buildpics]] to [[Gamedev:Buildpics]]: bye bye, Units:</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="31">#REDIRECT [[Gamedev:Buildpics]]</text>
      <sha1>tla3majzsnd6tvq3l8umb25hxtty4xb</sha1>
    </revision>
  </page>
  <page>
    <title>Units:CreateModel</title>
    <ns>0</ns>
    <id>3587</id>
    <redirect title="3DModels:Wings3DTutorial" />
    <revision>
      <id>27914</id>
      <timestamp>2013-10-29T18:13:32Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>Flozi moved page [[Units:CreateModel]] to [[3DModels:Wings3DTutorial]]: bye bye, Units:</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="38">#REDIRECT [[3DModels:Wings3DTutorial]]</text>
      <sha1>rpgbo0ypl0811kaza615sejevsqixtl</sha1>
    </revision>
  </page>
  <page>
    <title>Units:Design</title>
    <ns>0</ns>
    <id>1369</id>
    <revision>
      <id>27884</id>
      <parentid>26891</parentid>
      <timestamp>2013-10-28T23:33:15Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>basically irrelevant? tag for delete</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6224">{{delete}}
== Idea ==

Is what kick starts your unit.

It can range from a simple tweak to one existing unit to a new unit from scratch.

But dont lose much time in this, just remember at some point you have to &quot;think&quot; in what you want to do.

In this tutorial we will work from this basic idea:


&lt;center&gt;'''Here goes Proposed Basic Unit Idea'''&lt;/center&gt;

The unit will be a &quot;light Anti-Air Tank&quot;.

Prolly this can go in lvl1 labs.

I like the idea of small missiles chasing planes, launching fast, but not very powerfull. Good for taking scouts down.

On this subject you must sketch.



== Sketch ==


Nobody *knows* how to sketch. You must give it a try and you will improve and learn.

A sketch IS NOT a cool drawing, its just a basic guideline. It helps get things clear to start modelling.  Sketching can help you soldify your unit idea, so if it helps do it, other wise it is an optional step.


&lt;center&gt;'''Here goes sketches based in first step'''&lt;/center&gt;

here the basic thank thread i drawn, it guess its basic enough, its not intended to have moving tracks.

[http://i36.photobucket.com/albums/e35/6u0W/base.jpg]

I liked this track and is what the final unit will use.


here are some variations to the turrets, it was supposed to have 2 missile racks..

[http://i36.photobucket.com/albums/e35/6u0W/var01.jpg]

but later changed for only one headlike rack, like a central turret.

Its supposed to be the lines more at the bottom. 

[http://i36.photobucket.com/albums/e35/6u0W/var02.jpg]

Here is a quick way of &quot;joinig&quot; toguether the torso-like part, that contains the missile rack, and the tracks. (i know the scale is not right..)

There are 2 axles that suppose to join them.

[http://i36.photobucket.com/albums/e35/6u0W/final01.jpg]

A sketch of the completed unit, and some details.

The missiel rack is supposed to rotate over itself (z axis).

Maybe, because of this, that joining could be made more circular, and not so square.

[http://i36.photobucket.com/albums/e35/6u0W/final02.jpg]

In a &quot;bottom view&quot; there is a detail of the joinig axle.

[http://i36.photobucket.com/albums/e35/6u0W/final03.jpg]

Well, sketching is playing with the unit. 

In the first 3-4 sketches variations where made of the rack

Some variations were discarded, and some taken.



Keep in mind its Basic stuff.

== More sketch ==


Once you get a basic sketch that you like, try to improve it, make more sketches of this concept, get the idea more rounded.

In this unit for example, an engine would be a nice addition.

Also, maybe details in the tracks, the missile rack or the missile support part.


== Model ==
 (tests can be done at this stage)

Here is where you put the sketches to real use. you will appreciate the dirty lines you did earlier.


At this point you can start modeling based in the first sketches.

&lt;center&gt;'''If some Modeler can provide a overview on how to do that unit, and the model, in any 3D tool you like, its very appreciated.'''&lt;/center&gt;


First thing to do is get familar with which ever 3D modeling program you are using.  There should be tutorial avalable for the differnt functions or ask around.  Once you know how to use it, you can make your model.

Keep the final product of your unit in mind, such as which parts need to be animated.  If you want to animate a tenticle you are going to need several segments (differnt objects) to get it to look right.

Once you have your model, you need to UV map it.  This requires you to map out the seems of the modle, and designate which parts of it go were.  Unfortnatly you have to get it all on one map, is the unit needs to be one model when you UV map it.  You 3D modeling program may give you the option to temparaly combine the model into one unit for this purpose.  If not, export it as an obj (the whole model)  which will turn it into one unit.  reload it and UV map that (with out changing any of the model).  You can also us UPspring (the program that makes your models into .s3o files for springs use) to spit out an obj of your finished unit.

Once you have your unit mapped, its time to mess with the file.  You will most likly need to tell your 3d modeling program to make the file external.  save it as a tga.  after that the first thing you should do is copy it.  It turns out you need two versions of your UV map in order to use all the nifty skinning features, so you may want a copy, although you don't need it, better to have it and not need it. . .That being said, lets move onto the skinning.

The tga file will need to be opend with a program like gimp (free ware).  When you do open it, go ahead and texture it to the best of your abilities, once done, any area you want to have team color needs have modifications done to an alpha channel.  You can add this with your gimp/photo shop/something type program.  You will likly need to first add the alpha channel, then get the program to display the differnt channels of the picture.  Alpha is in grey scale, in gimp every thing you make colored in the Alpha channel will be the side color.  The darker it is, the more like a solid color that spot will be.  Every thing else (in gimp at least) needs to be erease (just in the alpha channel, NOT the rest of the channels) in order for your true texture to show up.  This makes it so the only parts of the unit you can see are the ones that are going to have team color on it.

Next, you need to load up your model with UPspring, and load in your textures to the unit.  The first texture is the basic texture.  The second texts atributes will be talked about later(when I feel like posting more stuff).  Once those are loaded up, go ahead and look at your model, pretty huh? well now you need to flip the loaded UV map.  Go to texture mapping and select show UV texture, then tell it to flip.  you model looks like it when through a blender now right?  well thats fine it will show up correctly in spring.

Last but not least, you want to go estimate the size of your unit.  its the tab farthest to the left.  just fill in all the boxes and valla! your unit will look as snazy as you managed to model and UV map it.

== Animation ==


== Scripting ==


*Setting up for hard testing

at some point goes user feedback aswell.</text>
      <sha1>mb4fwdss7nkytii8haaqhcmbpqnzfki</sha1>
    </revision>
  </page>
  <page>
    <title>Units:Files</title>
    <ns>0</ns>
    <id>2255</id>
    <revision>
      <id>27909</id>
      <parentid>26892</parentid>
      <timestamp>2013-10-29T17:58:09Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>recat to delete, useful stuff merged into Gamedev:Structure</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4442">{{delete}}

==Unit File Heirarchy==

Here is a very brief view of the different types of files that a unit needs to work:

'''1 - The FBI File (/units)'''
Contains most of the active data that a unit uses, such as its health, a list of which weapons it has, speed, metal/energy cost, whether it is a construction unit or not, so on and so forth.

'''2 - The COB File (/scripts)'''
This contains all of the scripting for this unit. Animation scripting, as well as variables, and lots of other goodies the likes of which only zwzsh can think up. The .COB file is the compiled form of the file that Spring reads; it can be decompiled into a .BOS file which is readily open to editing. Scripts work by calling on pieces of the unit's model to do things, such as rotate a turret to aim at a target, or emit smoke when the unit is damaged. The pieces named in the script file must reflect actual parts of the unit's...

'''3 - The 3DO/S3O File (/objects3d)'''
This contains the actual 3d model that the unit uses in-game. Most units have a variety of different pieces that are put together in a heirarchy type form (for instance, a tank has a hull, a turret attached to that, and a barrel attached to that). There are two types of files. 3DO is native to Total Annihilation and being that it is over 10 years old now, it's rather... crap. It uses a single-face texture system, where you individually set which texture goes on which individual face. S3O's are by far superior, and accept proper skinning as well as a massive amount of other features, such as reflectivity, light generation, teamcolour, etc. The tag determining which model a unit uses is in the FBI file; note that in order to properly use an .S3O model file it MUST have the extension in the tag -- ie, model=ARMCOMM.S3O.

'''4 - The WEAPON File(s) (/weapons)'''
Most units have weapons. The characteristics of these weapons, from its behaviour to how it acts in the air, is determined in the weapon file.

'''5 - The SIDEDATA File (/gamedata)'''
Every unit must be build somewhere, right? Whether its a building built by a construction vehicle, or a K-Bot built in a K-Bot Plant, everything needs to be properly placed so that it can be available to any player. Thusly, the Sidedata file contains all information pertaining to where a unit is built. Open it up and look. You'll get it. 

'''6 - The SOUND File (/gamedata)'''
All units use sound (or should) when performing various basic functions, such as being selected, confirming an order or announcing its arrival somewhere. Every unit FBI contains a tag called &quot;SoundCatagory&quot;, which lists a catagory as given in the Sound file. The Sound file contains a bunch of catagories which list which functions perform which sounds, for which units. So if you want to make a recording of yourself screaming, and want to make a unit play that when it moves.. well, there you go.

'''7 - The CORPSE File (/features/corpses)'''
Most units have some sort of corpse file, ie, a burnt wreck that it leaves when it dies. The corpse files are like mini FBI files but contain a lot less data, usually containing only basic information such as what model to use as the wreckage, how much metal the wreck will give if reclamated, etc...

'''8 - The TEXTURES File(s) (/unittextures and /unittextures/tatex)'''
There are two different types of texture files. First are Total Annihilation-style single-face textures, which are saved as .bmp files in the unittexutres/tatex folder. 3DO units use these archaic things. Then there are skins, which are usually .DDS but often .PNG or .TGA files. They are a single image file which is stretched over the unit, and contains everything from which parts should reflect light, to which parts should generate light, to where to show teamcolour and of course the basic graphical design of the unit. Go find out how to skin for yourself. 

'''9 - The UNIT PICTURE File(s) (/unitpics)'''
Unit pictures are those little thumbnails which show up in the build menus of units ingame. They're just a little graphical representation of the unit so people know what they're building when they click it. These are just basic graphic files, like .BMPs, which are named in the unit's FBI file (with the Buildpic=xxxx.bmp; tag). 

Well, that's basically it. Took me all of 15 minutes to write. Well, it's very basic but I hope it helps introduce some new potential modders in a nice, easy-to-understand way.

C'est la vie!</text>
      <sha1>laqog7our7hvmh5d9bk6fkx6t5x0575</sha1>
    </revision>
  </page>
  <page>
    <title>Units:FlankingBonus</title>
    <ns>0</ns>
    <id>2457</id>
    <revision>
      <id>27888</id>
      <parentid>26893</parentid>
      <timestamp>2013-10-29T10:11:18Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>decategorise (deprecated, covered by Gamedev:UnitDefs &amp; Modrules.lua)</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5254">{{deprecated}}
=History=
FlankingBonus is a quick, integrated way to give units a resistance to damage from certain directions.  It started life long ago, in the dark ages of spring, under the name of BonusShield.  In its default form it hid there, secretly manipulating the damage dealt to units in an attempt to encourage flanking.  And there it worked its special little magic, known to very few, until July of 2007, when the great lurking presence felt it brush by, and exposed bonusShield to the world.

This mysterious code had few parameters at the time, and each one of them was hardcoded.  There was the direction it was facing, that would determine where there would be minimum damage, which started at south.  But it was more complicated than that.  You see, bonusShield could move, and did so by building up a reserve of mobility as time ticked by.  When an attack would hit, it would use this reserve to swing and face the attacker, buying a precious bit of extra health as long as no units could sneak by to the other direction.  But bonusShield had its flaws.  It completely ignored the way a unit was facing, so a unit spinning in place while being shot from the West could recieve minimum damage from each shot.  It was also 'mandatory hardcoded crap', completely unchangeable by any unit settings.

But lo, the lurking presence had a plan: a plan to not only rid the world of the scourge of hardcoded bonusShield, but dreams of something better, something usefull, something that could make a tank's armor realistic, give units the ability to have variable armor layout at the push of a button, not merely a 'bonusShield', but a flankingBonus, a fully configurable system built out of the ashes of the old.  And so it set to work, making an extensive patch to be applied to spring's core.

This patch held the ability to banish bonusShield at a modder's whim, but held so much more for those willing to dig deeper.  Suddenly, direction, mobility, damage levels, and more were all configurable.  A tank could have extra armor in its front, or following the main turret, and click this power on and off in a second.  Rejoicing was farspread, and history books were filled with the inspiring tale.


=Specifics=

flankingBonus takes the following tags:&lt;br&gt;
==int flankingBonusMode;==
0: no flanking bonus&lt;br&gt;
1: global coords, mobile&lt;br&gt;
2: unit coords, mobile&lt;br&gt;
3: unit coords, locked&lt;br&gt;
==float3 flankingBonusDir;==
units takes less damage when attacked from this dir (encourage flanking fire)
==float  flankingBonusMax;==
damage factor for the least protected direction
==float  flankingBonusMin;==
damage factor for the most protected direction
==float  flankingBonusMobilityAdd;==
how much the ability of the flanking bonus direction to move builds up each frame


==flankingBonusMode==
Defaults to what is set in modrules, which itself defaults to 1, the old way.
Mode 0 is self explanitory.&lt;br&gt;
Mode 1 builds up the ability to move over time, and swings to face attacks, but does not respect the way the unit is facing.&lt;br&gt;
Mode 2 also can swing, but moves with the unit as it turns.&lt;br&gt;
Mode 3 stays with the unit as it turns and otherwise doesn't move, the ideal mode to simulate something such as tank armor.&lt;br&gt;
To set the default in modrules.tdf, use the following code:

[flankingBonus]
{
  defaultMode=1;  // defaults to 1
}

==flankingBonusDir==
This is the direction where the armor is facing; where damage is least.  It is in the form of a standard spring vector.  In global coordinates mode, &lt;x,y,z&gt; = East, Up, South.  In unit coordinates mode, &lt;x,y,z&gt; = Left, Up, Front.

==flankingBonusMax==
the maximum damage, when hit from the oppisite direction from flankingBonusDir

==flankingBonusMin==
the minimum damage, when hit from the same direction as flankingBonusDir

==flankingBonusMobilityAdd==
This defines the ability of flankingBonusDir to move over time.  Its value is added to the mobility every slowupdate.  When the unit is attacked, the build up mobility value is multiplied by a vector facing the attack, which is added to flankingBonusDir to find the new direction of flankingBonusDir.  As an example, if flankingBonusMobilityAdd is .1, after 20 seconds the mobility will have added up to 2, meaning that the added direction has 2x the influence as the previous, and the new direction will roughly match the attack.

=How damage is calculated=
It uses the dot product of the attack direction and flankingBonusDir to find where the damage falls between max and min.  If you don't know what that is, it doesn't matter.  Basically, this is equivalent to taking the cosine of the angle between the two directions, and dealing minimum damage at 1, and maximum damage at -1.  flankingBonusDir points in the direction that is best defended, and attacks from there will do a default of 90% damage, and attacks hitting the exact opposite direction do a default of 190% damage.  Attacks in the middle will do 140% damage, and it scales smoothly between all these values.

Currently flankingBonus only uses the direction of the attacker, not the actual projectile, because of the innacuracy of projectiles moving through the hitsphere, something I am working on rectifying.


coming soon: how to set per-unit in cob</text>
      <sha1>ffy3manh9t5i5ofc3jd1piwjtjqztpk</sha1>
    </revision>
  </page>
  <page>
    <title>Units:MoveTypes</title>
    <ns>0</ns>
    <id>3191</id>
    <redirect title="Movedefs.lua" />
    <revision>
      <id>23510</id>
      <timestamp>2012-02-12T20:22:40Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>moved [[Units:MoveTypes]] to [[Movedefs.lua]]: standardise naming with other gamedata files</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="26">#REDIRECT [[Movedefs.lua]]</text>
      <sha1>hd71q9crknkwo71wu7b18uhwlrk0485</sha1>
    </revision>
  </page>
  <page>
    <title>Units:Textures</title>
    <ns>0</ns>
    <id>3588</id>
    <redirect title="3DModels:Textures" />
    <revision>
      <id>27918</id>
      <timestamp>2013-10-29T18:15:15Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>Flozi moved page [[Units:Textures]] to [[3DModels:Textures]]: bye bye, Units:!</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="31">#REDIRECT [[3DModels:Textures]]</text>
      <sha1>kzrcztrfb5bqnu2xj5uw2usg9rhkaae</sha1>
    </revision>
  </page>
  <page>
    <title>Units:WeaponMainDir</title>
    <ns>0</ns>
    <id>3586</id>
    <redirect title="Gamedev:WeaponMainDir" />
    <revision>
      <id>27905</id>
      <timestamp>2013-10-29T17:33:24Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>Flozi moved page [[Units:WeaponMainDir]] to [[Gamedev:WeaponMainDir]]: bye bye, Units:!</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="35">#REDIRECT [[Gamedev:WeaponMainDir]]</text>
      <sha1>751fuujkeuvyoyx8dqd8hggd0x14qw0</sha1>
    </revision>
  </page>
  <page>
    <title>Unity Lobby</title>
    <ns>0</ns>
    <id>2003</id>
    <revision>
      <id>21454</id>
      <parentid>19034</parentid>
      <timestamp>2011-03-03T16:15:37Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="599">{{historical}}
&lt;p&gt;UnityLobby is a lobby written by hollowsoul in Python.  Getting it working right now is a little bit of a pain, but it is your only choice to play spring on linux if you do not wish to use wine.&lt;/p&gt;

&lt;p&gt;Steps to install UnityLobby:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install subversion.&lt;/li&gt;
&lt;li&gt;Install UnityLobby dependencies.&lt;/li&gt;
&lt;li&gt;Check out spring from the latest version, and Unity lobby from the trunk (https://taspring.clan-sy.com/svn/spring/).&lt;/li&gt;
&lt;li&gt;Compile unitsync.so and copy it into UnityLobby.&lt;/li&gt;
&lt;li&gt;Switch directories to the UnityLobby, and run ./Unity.py&lt;/li&gt;
&lt;li&gt;Have fun!&lt;/li&gt;</text>
      <sha1>34uep93the0rz4qml738ndla6hsle9o</sha1>
    </revision>
  </page>
  <page>
    <title>Universal Annihilation</title>
    <ns>0</ns>
    <id>3014</id>
    <revision>
      <id>22084</id>
      <parentid>20857</parentid>
      <timestamp>2011-06-08T18:30:03Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>currently available game -&gt; category:games</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3007">&lt;center&gt;[[Image:UniversalAnnihilation.jpg|350px|Universal Annihilation]]&lt;/center&gt;


==Where it is==
'''Download link can be found here:''' [http://www.springfiles.com/show_file.php?id=2884 Universal Annihilation RC3]

'''Hosted 24/7 on [teh]NixuHost for those looking to play'''

==What it is==
Universal Annihilation is a new mod that builds on Balanced Annihilation, seeking to improve the gameplay. The current version is RC3, meaning it is a release candidate, getting closer to what we think the first version will be but missing some polish. The point of this release is to get feedback about some of the initial changes and the current direction.

==What has changed==
* '''Merged factions:''' The arm and core factions have been merged into one, constructors and factories can build units from either side. Where units are duplicates of eachother (i.e. Sentinel and Gaat Gun), one has been removed.

* '''Metal Makers:''' Metal makers no longer require energy to operate, or have an on/off toggle. Instead, they generate a fixed amount of metal constantly, +1/+10 for T1/T2 respectively, and have had their costs adjusted to 300m/3000m.

* '''Modified units:'''
** '''Hammer:''' The Hammer now possesses the same weapon as vehicle artillery.
** '''Storm:''' The Storm now fires two Rocko rockets at once, with the tradeoff of doubled cost.
** '''Samson:''' The Samson now fires at air only, and has had its range boosted from 600 to 765.
** '''Slasher:''' The Slashers weapon has been replaced by the weapon of the Rocko, and line-of-sight has been reduced to 400.
** '''Pillager (T2 artillery vehicle):''' Shots now high trajectory, range increased to 1200.

* '''T2 fighters:''' T2 fighters are now available at the T1 air plant, replacing the T1 fighter. In addition T2 fighter health has been reduced to 100, which means they get killed in 1 shot from almost all anti-air. 

* '''Nukes and Antis:''' The nuke silo takes 3 minutes to stockpile and fires an arm nuke, only one missile can be stocked at a time. Antinukes have had their energy cost reduced from 59439 to 30000. Mobile antis have had their health increased to 2000 and take half damage from bombers.

* '''Long range plasma cannons:''' The Bertha was kept over the intimidator, and has had its range reduced from 6200 to 4000. The Vulcan superweapon retains its original range.

* '''Storage:''' Metal and energy storage is no longer tied to your commander, the base storage you start with will be with you the entire game.

* '''Fixes and Tweaks:''' Of course there are many bugs in BA at the moment, and we have certainly begun steps to correct alot of the major present bugs aswell as other bugs many players simply don't see in regular gameplay!

* '''Special Effects:''' Don't forget to check these out! Whilst only in the initial stage of redesign, we feel that with the impending new models the game clearly needs a graphical touchup in the effects department.

==Reasoning behind changes==
Coming soon...

[[Category:Games]]</text>
      <sha1>ey1ctfd8wzz4x3098red9w5ojw4gcxx</sha1>
    </revision>
  </page>
  <page>
    <title>Upq</title>
    <ns>0</ns>
    <id>3240</id>
    <revision>
      <id>31755</id>
      <parentid>31754</parentid>
      <timestamp>2022-02-14T22:49:35Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="650">Upq is a system for mirroring files. It allows to upload files to it, then it indexes and uploads it to mirrors. The files can be searched trough an xml-rpc interface. It extract some Images and metainfo.

[https://springfiles.springrts.com html-interface] shows its capabilities, parameters in json-rpc are the same as in the webinterface.

==Upload==

https://springfiles.springrts.com/upload/

==Source==
https://github.com/spring/upq


==clients==
there are a few example clients:

*[[pr-downloader]] written in c++
*[https://github.com/spring/upq/blob/master/doc/exampleclient.py example client] written in python

[[Category: Download Systems]]</text>
      <sha1>lfmu21771htzirpj3ks5jaj4ow6ne4l</sha1>
    </revision>
  </page>
  <page>
    <title>Upspring</title>
    <ns>0</ns>
    <id>3110</id>
    <revision>
      <id>31624</id>
      <parentid>26790</parentid>
      <timestamp>2021-09-18T03:36:56Z</timestamp>
      <contributor>
        <username>Rafal99</username>
        <id>598</id>
      </contributor>
      <comment>Updated link to UpSpring repo to a working one</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1376">[[Image:Upspring.jpg|600px|center|]]
&lt;center&gt;Shot of the UpSpring ui&lt;/center&gt;


==Upspring==
Upspring is a Model Converter/Editor for the Spring RTS Engine.


supported formats: 

*[[About s3o|.s3o]] 
*.3do
*.3ds 
*.obj 
*.opk 
*.c3o

==Download==

Win32 installer: 
*[http://springfiles.com/spring/tools/upspring Spring files Mirror]
*[http://www.warriorhut.org/spring/tools/modelling/UpspringInstaller-1.54-EulerAngles.exe Warrior hut Mirror]

Source Code:
*[https://github.com/spring/upspring Source Code]

== Common Issues ==

* [[Trouble-shooting_s3o_units]]
* [http://answers.springlobby.info/questions/690/why-does-upspring-mirror-my-model-when-i-import|Why does upspring mirror my model when I import?]
* [http://answers.springlobby.info/questions/398/upspring-how-to-set-piece-origin|upspring how to set piece origin]
=== Texture assignment not saved / models crash the engine ===
After loading a .s3o model, Upspring does not automatically reassign its texture.
Thus when you load and save a model, it will have no assigned texture. This can crash the engine.

Solution:
* reassign the texture every time you edit your .s3o files.
or
* Open views.cfg and edit the ''springTexDir'' entry to point to the unittextures path of your mod

==Tutorials==

* [http://springrts.com/phpbb/viewtopic.php?f=9&amp;t=15106 Argh's UpSpring Easy Workflow Guide]

[[Category: 3D Models]]</text>
      <sha1>mv6jygkfhyduby6l0o91zq6ospgimc9</sha1>
    </revision>
  </page>
  <page>
    <title>Using Camera</title>
    <ns>0</ns>
    <id>2877</id>
    <redirect title="Balanced Annihilation:Camera Control" />
    <revision>
      <id>19606</id>
      <timestamp>2010-07-14T07:02:33Z</timestamp>
      <contributor>
        <username>Enetheru</username>
        <id>2783</id>
      </contributor>
      <comment>[[Using Camera]] moved to [[Balanced Annihilation:Camera Control]]: removing the &quot;playing spring&quot; from the main menu and putting it into balanced annihilation</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="50">#REDIRECT [[Balanced Annihilation:Camera Control]]</text>
      <sha1>etwe6wj43466hx4abug7gg3wliiek5n</sha1>
    </revision>
  </page>
  <page>
    <title>Using Orders</title>
    <ns>0</ns>
    <id>2875</id>
    <redirect title="Balanced Annihilation:Giving Orders" />
    <revision>
      <id>19602</id>
      <timestamp>2010-07-14T06:59:12Z</timestamp>
      <contributor>
        <username>Enetheru</username>
        <id>2783</id>
      </contributor>
      <comment>[[Using Orders]] moved to [[Balanced Annihilation:Giving Orders]]: removing the &quot;playing spring&quot; from the main menu and putting it into balanced annihilation</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="49">#REDIRECT [[Balanced Annihilation:Giving Orders]]</text>
      <sha1>bwgb5jogy89e4mi4hcvy6z6bn02ycl1</sha1>
    </revision>
  </page>
  <page>
    <title>Using Selections</title>
    <ns>0</ns>
    <id>2874</id>
    <redirect title="Balanced Annihilation:Using Selections" />
    <revision>
      <id>19599</id>
      <timestamp>2010-07-14T06:55:49Z</timestamp>
      <contributor>
        <username>Enetheru</username>
        <id>2783</id>
      </contributor>
      <comment>[[Using Selections]] moved to [[Balanced Annihilation:Using Selections]]: removing the &quot;playing spring&quot; from the main menu and putting it into balanced annihilation</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="52">#REDIRECT [[Balanced Annihilation:Using Selections]]</text>
      <sha1>nzqkw15cv8i0xyurakotnr9xiashzjt</sha1>
    </revision>
  </page>
  <page>
    <title>Using Spring</title>
    <ns>0</ns>
    <id>1040</id>
    <redirect title="Read Me First" />
    <revision>
      <id>20628</id>
      <parentid>20425</parentid>
      <timestamp>2010-11-29T10:59:52Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>Redirected page to [[Read Me First]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="27">#REDIRECT [[Read_Me_First]]</text>
      <sha1>hxw7zme7rrx5lz4w8c28fpqksgsson8</sha1>
    </revision>
  </page>
  <page>
    <title>Using chat</title>
    <ns>0</ns>
    <id>2879</id>
    <redirect title="Balanced Annihilation:Chat" />
    <revision>
      <id>19610</id>
      <timestamp>2010-07-14T07:02:34Z</timestamp>
      <contributor>
        <username>Enetheru</username>
        <id>2783</id>
      </contributor>
      <comment>[[Using chat]] moved to [[Balanced Annihilation:Chat]]: removing the &quot;playing spring&quot; from the main menu and putting it into balanced annihilation</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="40">#REDIRECT [[Balanced Annihilation:Chat]]</text>
      <sha1>qb5ljbkc7d1t5lur5py1wsegtdfhavu</sha1>
    </revision>
  </page>
  <page>
    <title>Using custom keys</title>
    <ns>0</ns>
    <id>2882</id>
    <redirect title="Balanced Annihilation:Custom Keys" />
    <revision>
      <id>19616</id>
      <timestamp>2010-07-14T07:02:38Z</timestamp>
      <contributor>
        <username>Enetheru</username>
        <id>2783</id>
      </contributor>
      <comment>[[Using custom keys]] moved to [[Balanced Annihilation:Custom Keys]]: removing the &quot;playing spring&quot; from the main menu and putting it into balanced annihilation</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="47">#REDIRECT [[Balanced Annihilation:Custom Keys]]</text>
      <sha1>b8zc34dhix932jgmlunj1e47g26lq4o</sha1>
    </revision>
  </page>
  <page>
    <title>Using doodles</title>
    <ns>0</ns>
    <id>2881</id>
    <redirect title="Balanced Annihilation:Doodles" />
    <revision>
      <id>19614</id>
      <timestamp>2010-07-14T07:02:36Z</timestamp>
      <contributor>
        <username>Enetheru</username>
        <id>2783</id>
      </contributor>
      <comment>[[Using doodles]] moved to [[Balanced Annihilation:Doodles]]: removing the &quot;playing spring&quot; from the main menu and putting it into balanced annihilation</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="43">#REDIRECT [[Balanced Annihilation:Doodles]]</text>
      <sha1>5t5a5o84evkkb2kx0rnvhf4aiyesb62</sha1>
    </revision>
  </page>
  <page>
    <title>Validmaps.lua</title>
    <ns>0</ns>
    <id>3063</id>
    <revision>
      <id>26932</id>
      <parentid>23289</parentid>
      <timestamp>2013-03-25T20:18:09Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>Game development -&gt; Game Dev</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4486">==Location==
validmaps.lua is a file in the root folder of a Spring game.

==Purpose==
from http://springrts.com/wiki/The_Talking_Changelog
&lt;pre&gt;
Valid maps are listed in the mod's &quot;ValidMaps.lua&quot; file
A valid map count of 0 means that any map can be used with the mod
This can be used in concert with LuaRules to setup multi-player scenarios and tutorials
&lt;/pre&gt;
Basically this means that a Spring game can create a whitelist of maps and the lobbies will only display these maps in their selection menu. In the end it depends on the lobby how maps are listed.
All map names that are returned are playabe. 

To block a certain map, validmaps.lua has to loop through all maps to build a table of  mapnames, not inserting the unwanted map, and then return that table.&lt;br&gt;
&lt;font color=&quot;red&quot;&gt;
'''=&gt;'''is it that correct? Or is there an easy way, ie returning a second table of unvalid maps or is there an unvalidmaps.lua?
&lt;/font&gt;


==Source==
&lt;font color=&quot;red&quot;&gt;
'''=&gt;'''don't know, please add
&lt;/font&gt;

==Simple Example==
Just returning a table of map names is the easiest example:

&lt;pre&gt;
return {
   &quot;DesertCliffsV1&quot;,
   &quot;Eye_Of_Horus_v2&quot;,
}
&lt;/pre&gt;

'''Note:''' Use mapnames as returned by [[Lua_ConstGame|Game.mapName]]

===Example to filter maps by various aspects===
http://code.google.com/p/zero-k/source/browse/trunk/mods/zk/ValidMaps.lua by det
If I understand this correctly this not a working example (it is disabled with ''if (false)'' anyway) but more a reference:
&lt;pre&gt;
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--
--  ValidMaps.lua
--
--  This file can be added to a mod to dictate which maps
--  can (and can not) be used with it. The map information
--  is the map's default information, and is done before
--  MapOptions.lua can be used by maps.
--
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--
-- Map specific call-outs:
--
--   Spring.GetMapList() -&gt; { 'map1.smf', 'map2.smf', 'map3.sm3', etc... }
--
--   Spring.GetMapInfo('map1') -&gt; {
--     author  = 'string',
--     desc    = 'string',
--     mapX    = number,
--     mapY    = number,
--     tidal   = number,
--     gravity = number,
--     metal   = number,
--     windMin = number,
--     windMax = number,
--     extractorRadius = number,
--     startPos = {
--       [1] = { x = number, z = number },
--       [2] = { x = number, z = number },
--       [3] = { x = number, z = number },
--       etc ...
--     },
--   }
--
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--
--  Example filtering code
--

if (false) then
  local mapList = Spring.GetMapList()
  local validMaps = {}
  for _, mapName in ipairs(mapList) do
    if (mapName:lower():find('metal')) then
      local mapInfo = Spring.GetMapInfo(mapName)
      local minX = (16 * 512)
      local minY = (8  * 512)
      if ((mapInfo.mapX &gt;= minX) and
          (mapInfo.mapY &gt;= minY)) then
        validMaps[#validMaps + 1] = mapName
      end
    end
  end
  if (#validMaps == 0) then
    return { 'FAKEMAP' }
  else
    return validMaps
  end
end


--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

return {}  --  returning an empty table means  *ALL MAPS*  are valid
           --  for *NO MAPS*, return a fake map name, ex: { 'FakeMap' }

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
&lt;/pre&gt;

===Working exampe===
&lt;font color=&quot;red&quot;&gt;
'''=&gt;'''would be nice to have one&lt;br&gt;
&lt;/font&gt;
&lt;pre&gt;
--this validmaps.lua:
--blocks all &quot;speedmetal&quot; variants by name
--only allows square sized maps
--also allows the map &quot;Derpa Derp&quot;
EXAMPLE SCRIPT
&lt;/pre&gt;

==Compatible Lobbies==
&lt;font color=&quot;red&quot;&gt;
'''=&gt;'''What lobbies read and support this?&lt;br&gt;
&lt;/font&gt;
'''TASClient''' - yes (?) Satirik: ''just fixed it in tasclient'' http://springrts.com/phpbb/viewtopic.php?f=11&amp;t=19495 &lt;br&gt;
'''Spring Lobby''' - No, _koshi_: ''yeah, we actually can build a list of valid maps, it's just not used in the frontend''
&lt;br&gt;
'''zeroK Lobby''' - ?&lt;br&gt;
'''Alpha Lobby''' - ?&lt;br&gt;

[[Category:Game Dev]]</text>
      <sha1>lsmv1y3ki7cfk57lfdaud5n504rdf9t</sha1>
    </revision>
  </page>
  <page>
    <title>Vehicles</title>
    <ns>0</ns>
    <id>1511</id>
    <revision>
      <id>24354</id>
      <parentid>21326</parentid>
      <timestamp>2012-05-02T08:40:09Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11694">{{Balanced_Annihilation_deprecated}}

[[category:Balanced Annihilation]]

This is an overview of the Total Annihilation vehicles, both Arm and Core. This is not intended to be an extensive overview of the units, though it does provide a good look into each.

=Arm Vehicles=
==Tech Level 1==

===Arm Vehicle Plant===

http://img378.imageshack.us/img378/6426/armvp0hn.png

''The Arm vehicle plant, shown above, is built by the commander, and can be built by other Arm construction units as they are attained. The vehicle plant builds the basic, Tech Level 1 vehicles, such as the:''

====Construction Vehicle====

http://img355.imageshack.us/img355/2862/armcv3io.png

''The Construction Vehicle is an unarmed, mobile unit that builds Tech Level 2 structures and can reclaim metal from wreckage. It can also build the same basic structures that the Commander can, thus freeing the commander from those duties''

====Arm Jeffy====

http://img355.imageshack.us/img355/2424/armfav8aj.png

''The Jeffy is a fast scout vehicle that is cheap and quick to produce. It is very effective as a recon or patrol vehicle, and, endowed with a light laser, has the firepower to destroy unguarded enemy structures such as metal extractors. However, an enemy hit does a lot of damage, so this unit is not meant for slugging it out.''

====Arm Flash====

http://img355.imageshack.us/img355/9070/armflash5aq.png

''The Flash is a light assault tank. It moves fast, and with its relative low cost, the Flash becomes a good unit for recon patrols, assaults on light targets, and for just generally aggravating your enemy.''

====Arm Stumpy====

http://img378.imageshack.us/img378/96/armstump1fw.png

''The Arm Stumpy is a medium assault tank, stronger and slower than the [[#Arm Flash|Flash]], but faster and weaker compared to the [[#Arm Bulldog|Bulldog]] main battle tank. It is good in small groups for removing recon posts or fledgling enemy bases, and is also good in larger groups for a base assault.''

====Arm Samson====

http://img355.imageshack.us/img355/9739/armsam7mr.png

''The Arm Samson is an Anti-Air rocket vehicle, though capable of ground fire also. It is comparable to the jethro, but provides a more powerful anti-aircraft defense. Placed a bit sparsely and on patrol in your base, they can create a good anti-aircraft defense.''

==Tech Level 2==

===Arm Advanced Vehicle Plant===

http://img378.imageshack.us/img378/7129/armavp6io.png

''The Arm Advanced vehicle plant provides you with mobile artillery, amphibious tanks, mobile rocket launchers, and heavy assault tanks, as well as the Spider.''

====Arm Advanced Construction Vehicle====

http://img413.imageshack.us/img413/3338/armacv9ob.png

''This construction vehicle produces long-range cannons, nuclear missile launchers, other powerful weapons, and the most advanced radar available in game. It also produces more advanced resource collectors, capable of making the ones you have built at the start of the game obsolete.''

====Arm Bulldog====

http://img413.imageshack.us/img413/7168/armbull3tp.png

''The Arm Bulldog is a heavy assault tank, with about half the speed and acceleration, and turning rate, of the Stumpy. What it lacks in speed, though, it makes up for in its plasma cannon firepower. This is the Arm's main battle tank, slow, but durable and powerful.''

====Arm Jammer====

http://img413.imageshack.us/img413/8869/armjam9up.png

''The Jammer is synonymous with the Eraser, and jams enemy radar signals.

====Arm Seer====

http://img413.imageshack.us/img413/2583/armseer1sg.png

''The Arm Seer is a mobile radar vehicle. It gives you the ability to move your radar coverage to where it can reveal most about the enemy. It can also be set on a patrol route, giving it greater coverage, and making it harder to target.''

====Arm Luger====

http://img389.imageshack.us/img389/6219/armmart7ps.png

''The Luger is a mobile artillery vehicle. It can accurately hit targets within its range, and is quite powerful, making it a good support unit for assaults.''

====Arm Spider====

http://img413.imageshack.us/img413/861/armspid6zk.png

''The Spider is considered a vehicle in some senses, and a kbot in others. Its laser does not do damage, but stuns instead. In large groups, it can be useful to paralyze an attacking enemy so that the Commander can capture them.''

====Arm Penetrator====

http://img47.imageshack.us/img47/8499/armmanni3mj.png

''The Arm Penetrator is similar in weapon to the [[Energy Weapon|Annihilator]], except in the fact that it's mobile and has less range. It is useful for holding positions as an assault group advances, leaving a strong point for a group to fall back to if need be.''

====Arm Panther====

http://img47.imageshack.us/img47/2113/armlatnk3fd.png

''The Panther is a lightning tank, a special unit good when combined with assault groups a few at a time. It is also equipped with a missile launcher, which gives it an edge over the penetrator against air. It also requires no energy to fire, unlike the [[#Arm Penetrator|penetrator]].''

====Arm Phalanx====

http://img47.imageshack.us/img47/4817/armyork5gd.png

''The Phalanx is a mobile flak weapon, good for assault groups vulnerable to bombings or to patrol your base in place of flakkers.''

====Arm Merl====

http://img144.imageshack.us/img144/438/armmerl6mw.png

''The Arm Merl fires unguided rockets in the same way as the nuclear missile silo, up, and over. These rockets can travel up to a screen away to hit targets within the Merl's range. This unit is not a good anti-air defense.''

====Arm Triton====

http://img161.imageshack.us/img161/6347/armcroc2mh.png

''The Triton is a light assault tank, with an ability to submerge itself in water. It is not heavily armored, and is not intended for heavy fighting, though can be used in small groups to take over islands and small sentries. This unit, like all other water units, is susceptible to submarine attack, so escort it with a friendly submarine group. It will be exposed by sonar.''

=Core Vehicles=
==Tech Level 1==

===Core Vehicle Plant===

http://img231.imageshack.us/img231/3773/corvp0rt.png

''The Core vehicle plant is the counterpart to the Arm vehicle plant. It produces Tech Level 1 vehicles.''

====Construction Vehicle====

http://img105.imageshack.us/img105/5381/corcv1uv.png

''The Construction Vehicle is an unarmed, mobile unit that builds Tech Level 2 structures and can reclaim metal from wreckage. It can also build the same basic structures that the Commander can, thus freeing the commander from those duties''

====Core Weasel====

http://img231.imageshack.us/img231/9088/corfav5hz.png

''The Weasel scout vehicle has several uses early in the game. They can be positioned as sentries around metal extractors early in the game to ward off fast attackers, and can be sent into an undefended base to harass enemy construction units trying to build structures.''

====Core Instigator====

http://img105.imageshack.us/img105/8913/corgator2hk.png

''The Core Instigator is a fast, maneuverable unit. It relies on its speed, as the laser it carries is rather weak. It is good for quick attacks in groups of four to six tanks, and can be used one or two at a time in a patrol or stationed as a sentry.''

====Core Raider====

http://img231.imageshack.us/img231/5281/corraid7rb.png

''The Raider has the best combination of firepower, maneuverability, and speed, among the other vehicles and kbots in its class. However, it's slow enough to be easily destroyed by three or four PeeWees. Travel with these tanks in groups.''

====Core Slasher====

http://img105.imageshack.us/img105/1172/cormist2ji.png

''The Slasher is analogous to the [[#Arm Samson|Samson]]. It is great early in the game to defend against enemy air power, but is not particularly strong against ground units, though it can be deployed in this role if need be.''

==Tech Level 2==

===Core Advanced Vehicle Plant===

http://img231.imageshack.us/img231/3802/coravp4ek.png

''The Core Advanced vehicle plant produces Tech Level 2 vehicles. It is a key structure in battle. Protected by its own radar jammer, it can be set up some distance from your base, and provide itself with its own firepower.''

====Advanced Construction Vehicle====

http://img388.imageshack.us/img388/8897/coracv0kq.png

''The Core Advanced Construction Vehicle builds the Core Tech Level 2 structures. It is in most aspects, if not all, similar to the Arm ACV, building long range cannons and nuclear missile silos.''

====Core Reaper====

http://img116.imageshack.us/img116/4797/correap6le.png

''The Reaper is a slow but powerful unit. It is heavily armored, and is the Core main battle tank. It is not intended for hit-and-run operations. It is the Core equivalent of the [[#Arm Bulldog|Bulldog]], and will almost completely destroy a Bulldog alone.''

====Core Deleter====

http://img235.imageshack.us/img235/7540/coreter6wd.png

''An Electronic Counter Measures unit, this unit can be used to conceal a force of tanks within a small area, or to hide a single metal extractor from enemy radar. The jam radius is short, however. Don't expect it to cover an army by itself.''

====Core Informer====

http://img388.imageshack.us/img388/1074/corvrad5ip.png

''The Informer is a mobile radar units useful for providing dynamic radar coverage. It does not have the accessability that a KBot does, however, so its terrain access is limited. Be careful not to run it into enemy patrols or sentries without backup.''

====Core Pillager====

http://img388.imageshack.us/img388/2063/cormart1ed.png

''The Pillager is a Tech Level 2 artillery unit. It is an excellent choice for lobbing shells into large groups, and for base bombardment. Its range allows it to send shells over rough or uneven terrain and other obstructions.''

====Core Goliath====

http://img388.imageshack.us/img388/1701/corgol0kx.png

''This tank is the ace up Core's sleeve, as is the [[#Arm Spider|Spider]] to Arm. It is a super heavy tank, the only one in the game. It can be very effective in major base assaults. Although slow, this unit can provide invaluable support against tough opposition.''

====Core Diplomat====

http://img388.imageshack.us/img388/6052/corvroc6kh.png

''The Diplomat launches an unguided rocket at targets within its range. It can be very useful in standoff attacks on enemy bases, or, coupled with radar, can be used to provide an early advantage against incoming attackers.''

====Core Copperhead====

http://img388.imageshack.us/img388/3558/corsent4fp.png

''The Copperhead is synonymous with the [[#Arm Phalanx|Phalanx]]. It can be used as a roaming base patrol against bombing raids, or can be dispatched with a group of units to cover them against enemy fighters.''

====Core Crock====

http://img460.imageshack.us/img460/9648/corseal5hl.png

''The Crock, like crocodile, is an amphibious tank. It can be used to make a suprise attack on an enemy that is expecting boats or planes. However, it is not intended to be used as a heavy assault unit, it's good in larger groups. This unit can be exposed by sonar and attacked by subs.''

====Core Hedgehog====

[[Image:CORMIST.PNG|Build Pic]]

''The Hedgehog is a mobile missile defense, made for blocking enemy nuclear strikes. It has no normal weapons, so do not put this near combat if you can help it.''


====Core Leveler====

[[Image:CORLEVLR.png|Build Pic]]

''The Leveler is a riot tank that uses a flamethrower, which is very effective against light swarms, as it pierces most units and also does heavy damage. It is less effective against single, high-power units. It also has less health then the [[#Arm Bulldog|Bulldog]] and [[#Core Reaper|Reaper]].''</text>
      <sha1>06yy4horwfmqoimmuy5ts2ywmfvxbh7</sha1>
    </revision>
  </page>
  <page>
    <title>Videos featuring Spring</title>
    <ns>0</ns>
    <id>1755</id>
    <revision>
      <id>18765</id>
      <parentid>11569</parentid>
      <timestamp>2010-03-13T13:17:36Z</timestamp>
      <contributor>
        <username>Koshi</username>
        <id>2371</id>
      </contributor>
      <comment>made historical</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1190">{{Historical}}
This page tries to list all movies showing Spring's interresting graphics/gameplay/features. (maybe this should be broken into several sections)&lt;br&gt;
See also [http://taspring.clan-sy.com/download.php the Download section] for &quot;official&quot; videos.

* [http://link Name] / Short description / publication date
&lt;br&gt;
&lt;br&gt;
* [http://fileuniverse.com/?p=showitem&amp;ID=3592 Spring Showcase II] / Impressive video showing various mods in action / June 2006
* [http://www.youtube.com/watch?v=NBpZE9OGVOE&amp;search=ta%20spring Total Annihilation Spring] / Short video showing some battles / May 2006
* [http://video.google.com/videoplay?docid=-2102711383712578417&amp;q=ta+spring Spring Intro] / Similar to the OTA intro, but springy / November 2005
* [http://video.google.com/videoplay?docid=1298812193179674710&amp;q=ta+spring Ugly Units of Total Annihilation] / Movie featuring five poorly animated old TA units / July 2006
* [http://rapidshare.de/files/32443046/schach.wmv Schach] / Battle raging on a very small, chess map. Ends in a crash .. / ?
* [http://rapidshare.de/files/32490332/bulle_de_savon.avi.html Soap bubbles] / Using the new flamethrower weapon as a bubblethrower / September 2006</text>
      <sha1>svlacm4qte280f3ce36wsnjl08r58yd</sha1>
    </revision>
  </page>
  <page>
    <title>VirtualFileSystem</title>
    <ns>0</ns>
    <id>3079</id>
    <revision>
      <id>26933</id>
      <parentid>26786</parentid>
      <timestamp>2013-03-25T20:18:32Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>Game development -&gt; Game Dev</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2013">[[Engine_Development|Development]] &lt; {{FULLPAGENAME}}

=VFS=
The Virtual File System is an unified layer to access (read-only) the different archives used at runtime. So you can access map, game &amp; config files via the same interface.

==Archive Hierarchy==
When loading a new archive (sdz, sd7, sdd) it overrides existing file references in the VFS, so the order archives are loaded is very important. So here it is (in reverse):

# raw file system (only for unsynced data)
# map
## map archive itself
## map dependencies
## maphelper.sdz (engine supplied)
# game
## game archive itself
## game dependencies
## springcontent.sdz (engine supplied)
### bitmaps.sdz (engine supplied)

(top most are checked first when accessing a file -&gt; map overrides game files!)

==Extra Informations==
Spring's VFS is '''lowercase''' only.
Also it is '''extremely''' recommended to use linux style path separators, e.g. &quot;foo/bar.txt&quot; and not &quot;foo\bar.txt&quot;.

=Engine Read Files=
The engine access a few files directly, most of them are lua files which access other files themselves.
Here the list of files that must exist in the VFS (some of them don't have to be in the game/map archive cause there are fallback solutions in springcontent.sdz &amp; maphelper.sdz):

* ./
** anims/
*** [[MouseCursors|cursornormal.bmp/png]]
** gamedata/
*** [[defs.lua|defs.lua]]
*** [[Explosions.lua|explosions.lua]]
*** [[Explosion_alias.lua|explosion_alias.lua]]
*** [[Icontypes.lua|icontypes.lua]]
*** [[Messages.lua|messages.lua]]
*** [[Modrules.lua|modrules.lua]]
*** [[Resources.lua|resources.lua]]
*** [[Resources.lua|resources_map.lua]]
*** [[Sidedata.lua|sidedata.lua]]
*** [[Sounds.lua|sounds.lua]]
** luagaia/
*** main.lua
*** draw.lua
** luarules/
*** main.lua
*** draw.lua
** luaui/
*** main.lua
** shaders/
*** ?
** [[LuaAI.lua|luaai.lua]]
** [[Mapinfo.lua|mapinfo.lua]]
** [[Mapdev:MapOptions|mapoptions.lua]]
** [[Modinfo.lua|modinfo.lua]]
** [[Modoptions.lua|modoptions.lua]]
** [[Validmaps.lua|validmaps.lua]]

[[Category:Game Dev]]</text>
      <sha1>52j02i3rp3ss7upndmk7evsv4j17b1s</sha1>
    </revision>
  </page>
  <page>
    <title>WH - F</title>
    <ns>0</ns>
    <id>1141</id>
    <revision>
      <id>21281</id>
      <parentid>20608</parentid>
      <timestamp>2011-02-24T16:54:38Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1335">{{Historical}}

== Warhammer Fantasy ==

=== News ===

2/12/05
Wiki page added

=== Info ===
Warhammer Fantasy in Spring. The races won't be very large. First release will have the Bretonnians and possibly the Skinks, followed by the Orcs, High Elves, Dark Elves, Empire and the others

=== Resource System ===
Precious Metals and Food. Units will be constantly using up food resource/ PM is used for construction

=== Planned Features ===
Magic system similar to TA:K. Depending on how TA:K support is added (with the little magic bar thing) WH-F will use either that or in-script static-vars (that, unfortunately, will not be visible)

Melee and Ranged combat. Melee is obvious, and ranged with be from cannons and catapults to bows and throwing spears/axes.

Spells will be ranged too

Seiges
Hopefully. Walls will be included, though it will be some time before units will be walking on them

=== Tech Trees ===

BRETONNIANS

Peasant
* Village Hall
** Peasant Worker
*** Town Hall
**** Fire Archers
**** Yeomen
**** Mounted Yeomem
**** Squire
**** Mounted Squire
*** Wooden Fence
*** Large Farm
** Peasant Archer (Longbow) - longer range than rider, cheaper
** Men at Arms - Spear
** Men at Arms - Sword and Shield
** Rider - Bow - shorter range than Peasant Archer but faster, more expensive
* Mine
* Farmstead


[[Category:Mods]]</text>
      <sha1>a35rfjd5lwbxt03lwwtrmjhlovuihbf</sha1>
    </revision>
  </page>
  <page>
    <title>War Evolution</title>
    <ns>0</ns>
    <id>1842</id>
    <revision>
      <id>17873</id>
      <parentid>17872</parentid>
      <timestamp>2009-11-19T21:02:17Z</timestamp>
      <contributor>
        <username>Slogic</username>
        <id>2429</id>
      </contributor>
      <comment>/* Downloads */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3229">{{deprecated}}

== What is War Evolution ==

In short words, War Evolution is different. Different from all other mods. You dont have a base and you can not reinforce your &quot;army&quot;. In fact, you command only one single mech and if he dies, you can only spectate until the game is over. This makes a normal War Evolution game very short in comparison to other modsÃ¢â‚¬â€a normal game is over after 10Ã¢â‚¬â€œ15 minutes. If you know team fortress for first person shooters like half life, War Evolution would be the strategy equivalent.
To make the mod more interesting and fun to play, there are a lot of features included, which are unique.

== Features ==

Your mech can gain 6 levels, each level brings you a new extra (like weapons, armour or shield). All extras are completely visible and randomized, so every game can be different, even with the same mech.

You can switch between 2 main guns in game by clicking on or off. So you have one weapon for shorter range fire support and one for long distances.

You can select one out of 4 different mechs, each is very different from the other mechs and has its own abilities and skills.

A lot of weapons don't do much physical damage but a lot of impact damage. That means that your mech can be thrown short distances in a direction, you don't want him to be. This can be very useful to fall back, or to separate mechs from their team.

== The mech classes ==

=== Wargod ===

http://img225.imageshack.us/img225/6065/heavy1kf6.jpg

''The wargod is the strongest, but also slowest Mech on the battlefield. With his strong plasma cannons he can shoot over long distance and with his gattling guns hes able to attack in close combat with dealing high damage. The wargod has the strongest armour and the highest regeneration rate.''

=== Black Knight ===

http://img225.imageshack.us/img225/6295/flamer1hh6.jpg

''The Black Knight is the Close Combat Mech. He is the fastest mech, but is weak in ranged combat. With his flame thrower, he can even beat a worgod. He is the only mech who is completely stealthed. He also can jamm radars in on mode.'' 

=== Werewolf ===

http://img225.imageshack.us/img225/2994/engineer1ve8.jpg

''The Werewolf is a Combat Engineer Mech. He has medium speed, low Hit Points and only medium weapon power. But he has the ability to build defence turrets and repair other mechs. WARNING: he can only have 2 towers at the same time or they wont shoot anymore.''

=== Stormlord ===

http://img225.imageshack.us/img225/8939/minelayer1lx8.jpg

''The Stormlord is the mine layer and long range artillery mech. He is armed with a long range artillery which can shoot over mountains and crush defences while staying out of range of the enemy turrets. He has the ability to heal other mechs, but only very slow. He also can build two types of mines to build traps.''

== Downloads ==

* [http://www.springfiles.com/show_file.php?id=855 v1.7] ([http://springrts.com/phpbb/viewtopic.php?f=14&amp;t=6116 discussion thread])
* [http://www.springfiles.com/show_file.php?id=1417 v1.9 RC 2.3]

== Credits ==

War Evolution is made by [[User:Optimus Prime|Optimus Prime]] 14:04, 14 Oct 2006 (W. Europe Daylight Time)



Last Wiki Revision -- [[User:Neddiedrow|Neddiedrow]]</text>
      <sha1>pn7ckhu7n0wvajc6ccfmrv420sdzg4h</sha1>
    </revision>
  </page>
  <page>
    <title>Water Height: Mapconv vs. Heightmap</title>
    <ns>0</ns>
    <id>1562</id>
    <revision>
      <id>19032</id>
      <parentid>17523</parentid>
      <timestamp>2010-03-13T18:15:37Z</timestamp>
      <contributor>
        <username>Koshi</username>
        <id>2371</id>
      </contributor>
      <comment>fix category</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1579">[[Engine_Development|Development]] &lt; [[Map_development|Map Development]] &lt; {{FULLPAGENAME}}

===The Problem===

It has come up as a source of confusion as to what shade of grey in your heightmap is water level. The simple answer is that there isn't a simple answer, but don't worry it really isn't all that hard. It is determined by your height input parameters to mapconv (Does none of this make sense? You probably want to stop here, go back and read some of the [http://taspring.clan-sy.com/wiki/Map_development tutorials]. ) ''Note this assumes you have both 0% and 100% grey (black and white, respectively) on your heightmap, which should be the case (this maximises the range of greys you can play with for your heightmap)'' 

the '''-x''' value in mapconv is the altitude (in elmos?) of a 100% white surface 

the '''-n''' value is the altitude of a 0% white surface 

To find the altitude of an intermediate shade of grey, do this, 

'''n+(y*(x-n)) = a'''   or, simplified,   '''y*x + (1-y)*n = a''' 

Where '''y''' is your value (in percent or in RGB value / 255) 
'''x''' and '''n''' are the parameters from mapconv 
and '''a''' is the altitude of that value

'''The water level is always assumed to be 0 in mapconv''', so anything with a negative '''a''' value will be underwater.

===An Example===

So to make 50% grey underwater, you could for example set your water line at 55% grey. Then, some values for mapconv that would work are: 

*this would produce very low mountains 
: -x 82 -n -100
*this would probably be better
: -x 205 -n -250
[[Category: Map_making]]</text>
      <sha1>ptahso4jluam2s4jyf6xz2d6i2r44b7</sha1>
    </revision>
  </page>
  <page>
    <title>Weapon Variables</title>
    <ns>0</ns>
    <id>1766</id>
    <revision>
      <id>25224</id>
      <parentid>24791</parentid>
      <timestamp>2012-10-27T14:18:31Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>mark as deprecated, remove categories</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="44087">{{Deprecated}}
&lt;span style=&quot;text-align:center&quot;&gt;
=WeaponType=
This is a weapon tag! It allows you to bypass the&lt;br&gt;
engine's auto detection and force the weapontype.&lt;br&gt; (example weaponType=&quot;StarburstLauncher&quot;)
&lt;table width=730 border=&quot;2&quot; cellpadding=&quot;4&quot; cellspacing=&quot;0&quot; style=&quot;margin: 1em 1em 1em 0; background: #41545c; border: 1px #aaa solid; border-collapse: collapse;&quot;&gt;
&lt;TR&gt;&lt;th&gt;WeaponType&lt;/th&gt;&lt;th&gt; Description &lt;/th&gt; &lt;/tr&gt;
&lt;TR&gt;
&lt;TD&gt;AircraftBomb (dropped=1)&lt;/TD&gt;
&lt;TD&gt;Drops a ballistic projectile (aka Plasma) at the same movement vector as the unit itself. It's only meant for planes. A plane that has a CBombDropper as its weapon1 is a bomber. The CBombDropper automatically calculates its burst and burstrate tags from its reload time and uses 5 as its reload time instead. It will fire if the first bomb would drop within a circle roughly unitspeed*burst*burstrate so the longer the burst and the faster the unit the larger the circle in which it will drop instead of not firing and hoping the next attack run will pass that circle.&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;BeamLaser (beamlaser=1)&lt;/TD&gt;
&lt;TD&gt;Should be well known, this thing spawns a beam and does a portion of its total damage each frame. It can't have a burst or burstrate, it can't have collidefriendly=0, it can't be emit-sfxed if it has a beamtime longer than one frame and its damage decreases over range if the minIntensity=1 tag isn't used. The largebeamlaser tag allows changing the visual effect of the laser, doesn't affect the behaviour of the weapon itself in any way though. Beamlasers can be really annoying... BTW, their beam doesn't collide with water so if they're set to waterweapon=1 they can shoot normally even when underwater.&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;Cannon (anything that didn't trigger another weapon)&lt;/TD&gt;
&lt;TD&gt;Aka plasma. Shoots a ballistic projectile. Unlike the DGun it aims properly. Can't be emit-sfxed properly, maybe a ballistic DGun can fill that role.&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;DGun (weaponname contains the word &quot;disintegrator&quot;)&lt;/TD&gt;
&lt;TD&gt;This shoots a fireball that travels in a straight line. The fireball has no range limitation by itself so if it misses or is fired in FPS mode it will travel across the whole map and further. DGuns don't properly check their line of fire, if terrain is in the way they fire anyway. These things are meant to be used with noexplode=1 but of course you CAN use them without that, too. If ballistic=1 is set the fireball will be affected by gravity, the weapon won't compensate for it though so it will hit the ground before reaching the target. Might be useful for a Scorched Earth mod or something since you'd have to aim it manually to hit anything.&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;EmgCannon (lineofsight=1 and rendertype=4 and color=2)&lt;/TD&gt;
&lt;TD&gt;Few know about this, it's a line of sight (i.e. not ballistic) weapon that can use billboard rendering (looks like a sprite). No idea what drawbacks this has, noone ever uses it.&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;Flame (lineofsight=1 and rendertype=5)&lt;/TD&gt;
&lt;TD&gt;The flamethrower. A really annoying weapon. AFAIK it won't even aim ahead of moving targets. Can't say much else about it since I haven't tried using it much but overall I'd avoid the weapontype and fake the effect somehow, it's not pretty when fast and won't hit jack when slow.&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;LaserCannon (lineofsight=1 and either beamweapon=1 or weaponname contains &quot;laser&quot; (marked as &quot;workaround for SWTA))&lt;/TD&gt;
&lt;TD&gt;The OTA-style laser. Probably one of the least annoying weapons in the engine. Its length is defined by the duration tag (together with the speed), BTW.&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;LightningCannon (lineofsight=1 and rendertype=7)&lt;/TD&gt;
&lt;TD&gt;An instant hit weapon like the Beamlaser except with a lightning graphic and even more annoying. It won't damage shields and it has a hardcoded inaccuracy (comparable to targetMoveError, the code comment is &quot;should make it weaker against air&quot;...). Shares some of the weirdnesses with the beamlaser, e.g. being able to penetrate water.&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;Melee (only reachable through WeaponType)&lt;/TD&gt;
&lt;TD&gt;When it fires it simply damages the target, no ifs or buts. It doesn't use a projectile and doesn't care about the line of fire. It won't even report a proper heading and pitch to AimWeapon so if you plan on using it in 75b2 you have to slave it to another weapon to handle the aiming. May be useful to be the damage dealer for a cosmetic weapon, i.e. you slave the Melee to a weapon that does no damage but looks pretty and the Melee does the damage. Kinda like the weapons in Warcraft and so.&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;MissileLauncher (lineofsight=1 and smoketrail=1)&lt;/TD&gt;
&lt;TD&gt;Shoots a smoke-emitting projectile. It can use acceleration, etc. The projectile's lifetime depends on range/maxspeed so a slowly accelerating missile will fall short. It can also use trajectoryheight to have the shot arc but that has trouble with aiming at targets higher or lower than the shooter (see bug report, this REALLY could use some fixing). Pretty versatile weapon overall, if the laser rendering code was ported into this we could pretty much axe the LaserCannon completely.&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;Rifle (only reachable through WeaponType)&lt;/TD&gt;
&lt;TD&gt;An instant hit weapon but an apparently unmaintained one. It has a hardcoded firing and explosion effect. I wouldn't use it.&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;Shield (isShield=1)&lt;/TD&gt;
&lt;TD&gt;The shield. Really not much to say about this, the tags are all documented in the changelog.&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;StarburstLauncher(vlaunch=1)&lt;/TD&gt;
&lt;TD&gt;Fires a projectile that rises vertically (starts with no velocity) for &lt;weapontimer&gt; seconds, then turns at a fixed rate towards its target. The projectile's lifetime depends on its range divided by its max speed (ignores acceleration) and the weapontimer somehow so the weapon can fall short depending on how these values are set. This is the only weapon that can properly perform intercepts and be interceptable. Emits a smoketrail.&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;TorpedoLauncher (waterweapon=1)&lt;/TD&gt;
&lt;TD&gt;Fires a projectile that will behave ballistically out of water and like a missile in water. Since waterweapon=1 is usually set for them they can fire underwater and they will target underwater units. An aircraft carrying a TorpedoLauncher is a special case, the thing turns into a bomb dropper that will spawn a torpedo projectile, probably to get the whole bomber flight behaviour. Note that the waterweapon tag is also used to make a weapon fire underwater, independent of its type.&lt;/TD&gt;
&lt;/TR&gt;


&lt;TR&gt;
&lt;TD&gt;CNoWeapon (weaponname is NOWEAPON, not reachable by any tag)&lt;/TD&gt;
&lt;TD&gt;Apparently a placeholder used when a weapon isn't present. It's not really a weapondef but generated when the unit demands a NOWEAPON.&lt;/TD&gt;&lt;/TR&gt;
&lt;/table&gt;

=Descriptions=
&lt;table width=730 border=&quot;2&quot; cellpadding=&quot;4&quot; cellspacing=&quot;0&quot; style=&quot;margin: 1em 1em 1em 0; background: #41545c; border: 1px #aaa solid; border-collapse: collapse;&quot;&gt;
&lt;TR&gt;&lt;th&gt;Variable &lt;/th&gt;&lt;th&gt; Description &lt;/th&gt;&lt;th&gt; Examples&lt;/Th&gt; &lt;/tr&gt;
&lt;TR&gt;
	&lt;TD&gt;Accuracy&lt;/TD&gt;
	&lt;TD&gt;How accurate a weapon is.  A larger number is less accurate.  If this tag is missing entirely, it has perfect accuracy unless its target moves unexpectedly or there is another accuracy-effecting tag present (Sprayangle, Targetmoveerror, NovingAccuracy, Wobble).  Accuracy is relative to the distance to the target; for instance, if the target is very close, even a very high accuracy value will probably still hit.  If a target is very far away, even a very low accuracy value will likely cause the weapon to miss.  Can be any numeric value.&lt;/TD&gt;
	&lt;TD&gt;accuracy=400;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;AlwaysVisible&lt;/TD&gt;
	&lt;TD&gt;Ignore LOS handling and always draw the weapon effect. Can be 1 or 0.&lt;/TD&gt;
	&lt;TD&gt;alwaysVisible=0;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;AreaOfEffect&lt;/TD&gt;
	&lt;TD&gt;How large the weapon's impact explosion is.  This affects how powerful the weapon's default impulse strength will be.  Currently, BeamLasers with an AreaOfEffect of 16 or above will deform the ground at their point of impact regardless of whether it has been told not to.  Can be any numeric value, but should generally be at least 8, regardless of the type of weapon.&lt;/TD&gt;
	&lt;TD&gt;areaofeffect=192;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;AvoidFeature&lt;/TD&gt;
	&lt;TD&gt;This makes the weapon avoid features while targeting (the shoot will still collide with features). Can be 1 or 0.&lt;/TD&gt;
	&lt;TD&gt;avoidFeature=0;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;AvoidFriendly&lt;/TD&gt;
	&lt;TD&gt;If set to 0 units will not try to avoid friendly units in their line of fire. Can be 1 or 0.&lt;/TD&gt;
	&lt;TD&gt;avoidFriendly=1;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;Ballistic&lt;/TD&gt;
	&lt;TD&gt;&lt;font style=&quot;color:red&quot;&gt;depreciated in 77b1 (use gravityAffected)&lt;/font&gt;&lt;br&gt;
Set to 1 for the weapon to be subjected to gravity, travelling in an arc through the air, such as cannons. Can be 1 or 0.&lt;/TD&gt;
	&lt;TD&gt;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;BeamDecay&lt;/TD&gt;
	&lt;TD&gt;For BeamLasers, defines the speed of the fadeout (each frame the beam's intensity is multiplied with that value). Purely visual? Can be between 0 and 1.&lt;/TD&gt;
	&lt;TD&gt;beamDecay=0.9;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;BeamLaser&lt;/TD&gt;
	&lt;TD&gt;&lt;font style=&quot;color:red&quot;&gt;depreciated&lt;/font&gt;&lt;br&gt;
Used for autodetection of &quot;BeamLaser&quot; weapontypes. You're probably better off using WeaponType=BeamLaser than this tag.  Can be 1 or 0.&lt;/TD&gt;
	&lt;TD&gt;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;BeamTime&lt;/TD&gt;
	&lt;TD&gt;How long to fire the laser before waiting for ReloadTime to start. Damage is distributed over the duration of the beamtime, and the weapon will aim to hit the target when the beam is in the middle of its beamtime (IE using prediction). Can be any numeric value.  Defaults to 1.&lt;/TD&gt;
	&lt;TD&gt;beamtime=0.5;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;BeamTTL&lt;/TD&gt;
	&lt;TD&gt;For BeamLasers, defines the time (in frames) the beam will stay after being fired. Purely visual. Can be any numeric value.&lt;/TD&gt;
	&lt;TD&gt;beamTtl=10;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;BeamWeapon&lt;/TD&gt;
	&lt;TD&gt;&lt;font style=&quot;color:red&quot;&gt;depreciated&lt;/font&gt;&lt;br&gt;
Used for autodetection of &quot;LaserCannon&quot; weapontypes. You're probably better off using WeaponType=LaserCannon than this tag.  Can be 1 or 0.&lt;/TD&gt;
	&lt;TD&gt;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
        &lt;TD&gt;BounceRebound&lt;/TD&gt;
        &lt;TD&gt;The amount of vertical velocity a projectile keeps when it bounces. Generally .3-1, but 0 for a sticky bomb, or 2 for a flubber bomb. Defaults to 1&lt;/TD&gt;
        &lt;TD&gt;bouncerebound=.8;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
        &lt;TD&gt;BounceSlip&lt;/TD&gt;
        &lt;TD&gt;The amount of horizontal velocity a projectile keeps when it bounces. Generally .3-1, but 0 for a sticky bomb, or 2 for a flubber bomb. Defaults to 1&lt;/TD&gt;
        &lt;TD&gt;bounceslip=.8;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;BurnBlow&lt;/TD&gt;
	&lt;TD&gt;The weapon blows up when it reaches the range the target was at when the weapon fired. Only works on plasma (WeaponType=Cannon) weapons and should now work on Missiles.  Can be 1 or 0.  A common usage is on flak guns.&lt;/TD&gt;
	&lt;TD&gt;burnblow=1;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;Burst&lt;/TD&gt;
	&lt;TD&gt;How many shots are in a burst.  Must be accompanied by burstrate.  Can be any numeric value.&lt;/TD&gt;
	&lt;TD&gt;burst=3;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;BurstRate&lt;/TD&gt;
	&lt;TD&gt;How fast the Burst fires.  If set much below 0.1, it stops having any discernable effect.&lt;/TD&gt;
	&lt;TD&gt;burstrate=0.1&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;CameraShake&lt;/TD&gt;
	&lt;TD&gt;How much the camera shakes on impact. (needs the cameraShake widget to work). Can be any numeric value.&lt;/TD&gt;
	&lt;TD&gt;cameraShake=5;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;CanAttackGround&lt;/TD&gt;
	&lt;TD&gt;Determines if you can force-fire the weapon at the ground. Used for stopping exploitation of overshoot and force-firing on cloaked or unseen units, etc. Can be set to 1 or 0.&lt;/TD&gt;
	&lt;TD&gt;canAttackGround=0&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;CegTag&lt;/TD&gt;
	&lt;TD&gt;CegTag is the tag that emits a custom explosion every frame for a projectile. Can be used on any weapon to imitate dynamic lighting, smoke, fire, ball lightning, magic and many other things. Enter the name of your effect to make it emit once per frame.&lt;/TD&gt;
	&lt;TD&gt;cegtag=MISSILE_SMOKE_FX;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;Color&lt;/TD&gt;
	&lt;TD&gt;&lt;font style=&quot;color:red&quot;&gt;depreciated&lt;/font&gt;&lt;br&gt;
Use rgbColor instead.&lt;/TD&gt;
	&lt;TD&gt;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;Color2&lt;/TD&gt;
	&lt;TD&gt;&lt;font style=&quot;color:red&quot;&gt;depreciated&lt;/font&gt;&lt;br&gt;
Use rgbColor2 instead.&lt;/TD&gt;
	&lt;TD&gt;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;ColorMap&lt;/TD&gt;
	&lt;TD&gt;Only used by flamethrower. Must be a CColorMap type.&lt;/TD&gt;
	&lt;TD&gt;colorMap=1 0 0 1 &amp;nbsp;0 1 0 1;&lt;br&gt;(red to green fade)&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;CollideFriendly&lt;/TD&gt;
	&lt;TD&gt;If set to 0 this weapon will not hit friendly units. Can be set to 1 or 0.&lt;/TD&gt;
	&lt;TD&gt;collisionFriendly=1;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;CollisionSize&lt;/TD&gt;
	&lt;TD&gt;Defines the physical size of projectiles, percentage of size for flamethrower and absolute value emg, plasma and laser. Can be any numeric value.&lt;/TD&gt;
	&lt;TD&gt;collisionSize=30;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;CommandFire&lt;/TD&gt;
	&lt;TD&gt;When ordered to attack ground this weapon will only fire once, rather than continuously. This does not work when ordered to attack units (It will continue to fire until the target is dead). If the unit has CanDgun=1 in its FBI, commandfire will identify that weapon with the dgun button. The weapon wont fire unless the dgun button is pressed. Can be set to 1 or 0.&lt;/TD&gt;
	&lt;TD&gt;commandfire=1;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;CoreThickness&lt;/TD&gt;
	&lt;TD&gt;Thickness of the core of a laser (the part which use rgbcolor2).  Can be any numeric value.&lt;/TD&gt;
	&lt;TD&gt;coreThickness=0.25;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;Coverage&lt;/TD&gt;
	&lt;TD&gt;The area anti-weapon weapons, like antinukes, will protect.  This will be shown on the minimap as a guide if the weapon is stockpile=1.  Can be any numeric value.&lt;/TD&gt;
	&lt;TD&gt;coverage=1280;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;CraterBoost&lt;/TD&gt;
	&lt;TD&gt;Adds a constant factor to the terraform the explosion does. Can be any numeric value. (default 0)&lt;/TD&gt;
	&lt;TD&gt;craterMult=0.1;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;CraterMult&lt;/TD&gt;
	&lt;TD&gt;Multiplies with the terraform the explosion does. Can be any numeric value. (default :=impulsFactor)&lt;/TD&gt;
	&lt;TD&gt;craterMult=1.2;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;CylinderTargeting &lt;font style=&quot;color:red&quot;&gt;CylinderTargetting deprecated in 89.0&lt;/font&gt;&lt;/TD&gt;
	&lt;TD&gt;If greater than 0, range will be checked in a cylinder instead of a sphere:
half height=unitradius*cylinderTargeting
Defaults to 1 for Melee type weapons, 0 otherwise. In 0.76b1, does not work with BeamLaser weapons.([http://spring.clan-sy.com/phpbb/viewtopic.php?p=219659#p219659 image])&lt;/TD&gt;
	&lt;TD&gt;cylinderTargeting=0;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;Dance&lt;/TD&gt;
	&lt;TD&gt;For missles, unlike wobble it doesn't rotate the missile and it prevents the missile from going too far off course so a dancing swarm will remain coherent. Can be any numeric value.&lt;/TD&gt;
	&lt;TD&gt;dance=97;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;Dropped&lt;/TD&gt;
	&lt;TD&gt;&lt;font style=&quot;color:red&quot;&gt;depreciated&lt;/font&gt;&lt;br&gt;
Used for autodetection of &quot;AircraftBomb&quot; weapontypes. You're probably better off using WeaponType=AircraftBomb than this tag.  Can be 1 or 0.&lt;/TD&gt;
	&lt;TD&gt;dropped=1;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;Duration&lt;/TD&gt;
	&lt;TD&gt;Length of the beam of BeamWeapon projectiles. Purely visual. Effected by velocity (faster beam = longer).  Can be any numeric value.  Used for rendertype 0 and 7 weapons.&lt;/TD&gt;
	&lt;TD&gt;duration=.5;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;DynDamageExp&lt;/TD&gt;
	&lt;TD&gt;Exponent of the range damage formula, 0 (the default) disables dynamic damage. 1 means linear scaling. Only used by BeamLasers and LightingCannons. Can be any numeric value. ([http://spring.clan-sy.com/phpbb/viewtopic.php?p=263438#p263438 image])&lt;/TD&gt;
	&lt;TD&gt;dynDamageExp=0;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;DynDamageInverted&lt;/TD&gt;
	&lt;TD&gt;Inverts the damage curve (more damage at far range). Only used by BeamLasers and LightingCannons. Can be 0 or 1.&lt;/TD&gt;
	&lt;TD&gt;dynDamageInverted=0;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;DynDamageMin&lt;/TD&gt;
	&lt;TD&gt;Minimum dynamic range damage value. Only used by BeamLasers and LightingCannons. Can be any numeric value.&lt;/TD&gt;
	&lt;TD&gt;dynDamageMin=0;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;DynDamageRange&lt;/TD&gt;
	&lt;TD&gt;If set it will use this value in the dynamic range damage formula instead of the range value from the weapon in the calculation. Only used by BeamLasers and LightingCannons. Can be any numeric value.&lt;/TD&gt;
	&lt;TD&gt;DynDamageRange=400;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;EdgeEffectiveness&lt;/TD&gt;
	&lt;TD&gt;Determines what percent of a weapon's maximum damage value will be applied to units as they are closer to the outer edge of the weapon's AreaOfEffect.  Must have a decimal value between 0 and 1.  Default in OTA was 0, probably the same in Spring. ([http://spring.clan-sy.com/phpbb/viewtopic.php?p=251180#p251180 image])&lt;/TD&gt;
	&lt;TD&gt;edgeEffectiveness=0.25;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;EnergyPerShot&lt;/TD&gt;
	&lt;TD&gt;Energy used per shot.  If the specified amount of energy is not available, the weapon will not be able to shoot.  Can also be used to specify how much a Stockpile weapon wll cost to build.  Can be any numeric value.&lt;/TD&gt;
	&lt;TD&gt;energypershot=5;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;ExplosionSpeed&lt;/TD&gt;
	&lt;TD&gt;Explosion animation(?) speed/time. (only used by BeamLaser and LightingCannon?) default:
gd=max(30, DefaultDamage/20);&lt;br&gt;
expSpeed=(8+(gd*2.5))/(9+(sqrt(gd)*.7))/2;&lt;br&gt;
Can be any numeric value.
&lt;/TD&gt;
	&lt;TD&gt;explosionSpeed=5;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;FallOffRate&lt;/TD&gt;
	&lt;TD&gt;Rate at which the beamweapon fades out after it goes past its maximum range. 0 is never fade out, 1 is finish fading out exactly at max range, the default 0.5 is the previous behaviour. Purely visual.
	&lt;TD&gt;FallOffRate=0.5;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;FireStarter&lt;/TD&gt;
	&lt;TD&gt;How likely the weapon will set trees on fire.  High values make trees likey to be set on fire, low values make trees likely to just explode or tip over.  Can be any numeric value between 0 and 100.&lt;/TD&gt;
	&lt;TD&gt;fireStarter=75;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;FireSubmersed&lt;/TD&gt;
	&lt;TD&gt;If set the weapon can fire underwater, if not then not. Use it for weapons that cannot fire underwater but can hit underwater targets. Works even for torpedoes. Can be 0 or 1.&lt;/TD&gt;
	&lt;TD&gt;fireSubmersed=1;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;FixedLauncher&lt;/TD&gt;
	&lt;TD&gt;For missiles, starburst missiles and torpedoes, this makes the projectile spawn with the orientation of the shooting piece instead of their normal orientation. The weapon will not properly check if allies are in the way so make sure you align the launchers in a way that won't hammer right into your own forces and perhaps use collideFriendly=0. FixedLauncher conflicts with trajectoryHeight and IMO combining them is pointless anyway so don't use both on a weapon. Can be 0 or 1.&lt;/TD&gt;
	&lt;TD&gt;fixedLauncher=0;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;FlameGFXTime&lt;/TD&gt;
	&lt;TD&gt;Makes the flamethrower projectile stay alive as a graphical effect (doesnt do any damage) after it has reached maxrange. It is defined in percent, so 1.2 makes it remain 20% beyond maxrange. Can be any numeric value. 
	&lt;TD&gt;flamegfxtime=1.2;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;FlightTime&lt;/TD&gt;
	&lt;TD&gt;For missile weapons, how long before their engines turn off and they fall to the ground (becoming essentially ballistic projectiles). Can cause overshoot exploits if too high, or missiles falling short of their targets if too low. Can be any numeric value.&lt;/TD&gt;
	&lt;TD&gt;flightTime=10;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;GroundBounce&lt;/TD&gt;
	&lt;TD&gt;Weather the weapon projectile will bounce on the ground (on land or the ocean floor). The bounce angle is effected by the slope of the terrain. For non-water weapons, the projectile will still explode if it hits the water. Can be 0 or 1, defaults to 0 (off)&lt;/TD&gt;
	&lt;TD&gt;groundbounce=1;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;Guidance&lt;/TD&gt;
	&lt;TD&gt;&lt;font style=&quot;color:red&quot;&gt;depreciated&lt;/font&gt;&lt;br&gt;
(does nothing)&lt;/TD&gt;
	&lt;TD&gt;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;HardStop&lt;/TD&gt;
	&lt;TD&gt;For LaserCannon, defines if the laser effect stops or fades out. Can be 0 or 1.&lt;/TD&gt;
	&lt;TD&gt;hardStop=0;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;HeightBoostFactor&lt;/TD&gt;
	&lt;TD&gt;Gives control of cannon range boost from high terrain (more than 1 means increased range, 0 means the cannon has fixed range regardless of height difference to target. default is a magic value calculated on weapon init, based on range tag and theoretical max range.). Can be any numeric value, including negative ones (&lt;0 := automatically calculated).&lt;/TD&gt;
	&lt;TD&gt;heightBoostFactor=-1;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;HeightMod&lt;/TD&gt;
	&lt;TD&gt;Changes the sphere weapon range into an ellipsis. Values above 1.0 mean the weapon cant shoot as high as it can far, values below 1.0 mean it can shoot higher than it can far. 0.5 means it can shoot twice as heigh as far ([http://spring.clan-sy.com/phpbb/viewtopic.php?p=219659#p219659 image]). Note that this may not work well with beam weapons, as their minIntensity damage drop off over range is not effected. minIntensity=1 will remove the damage dropoff entirely.&lt;/TD&gt;
	&lt;TD&gt;heightMod=1;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;ImpulseBoost&lt;/TD&gt;
	&lt;TD&gt;A constant factor added on the weapon's impulsefactor.  Can be any numeric value, including negative ones.&lt;/TD&gt;
	&lt;TD&gt;impulseBoost=0.5;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;ImpulseFactor&lt;/TD&gt;
	&lt;TD&gt;The multiplier on the weapon's default impulsefactor, which is determined based on a weapon's default damage and AreaOfEffect.  The impulse of a weapon is how strong of a kinetic force will be applied to its target or anything near the point of impact.  Can be any numeric value, including negative ones.&lt;/TD&gt;
	&lt;TD&gt;impulsefactor=2.5;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;Intensity&lt;/TD&gt;
	&lt;TD&gt;Alpha (brighness and washout effect) of the weapon.  Can be used on any rendertype 0, 3, or 4 weapon.  Can be any numeric value.&lt;/TD&gt;
	&lt;TD&gt;intensity=1.5;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;InterceptedByShieldType&lt;/TD&gt;
	&lt;TD&gt;Bitfield representing the types of shields that can intercept this weapon. The best way to think about this is to think of it as the resulting binary. Every digit of binary that is set to one means that a shield with that digit set to one will intercept this weapon, for instance, the example will result in the weapons being blocked by shields with types 1 and/or 3. Maxium of 32 unique types. See [[Shield Interception Tag Use]].&lt;/TD&gt;
	&lt;TD&gt;InterceptedByShieldType=5;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;Interceptor&lt;/TD&gt;
	&lt;TD&gt;Can intercept missiles with the Targetable (or Cruise?) tag.&lt;/TD&gt;
	&lt;TD&gt;interceptor=1;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;LargeBeamLaser&lt;/TD&gt;
	&lt;TD&gt;If set to 1 a beamlaser uses an alternate graphics effect. Can be 0 or 1.&lt;/TD&gt;
	&lt;TD&gt;largeBeamLaser=0;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;LaserFlareSize&lt;/TD&gt;
	&lt;TD&gt;Size of the flare for laser weapons, multiplier for thickness. Can be set to any numeric value. (default: 15)&lt;/TD&gt;
	&lt;TD&gt;laserFlareSize=15;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;Leadbonus&lt;/TD&gt;
	&lt;TD&gt;Is multiplied with the unit's experience and added to the lead limit.&lt;/TD&gt;
	&lt;TD&gt;leadbonus=1;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;LeadLimit&lt;/TD&gt;
	&lt;TD&gt;Limits the maximum distance a unit will lead a target (default is -1 which means infinite).&lt;/TD&gt;
	&lt;TD&gt;leadLimit=1;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;LineOfSight&lt;/TD&gt;
	&lt;TD&gt;&lt;font style=&quot;color:red&quot;&gt;depreciated&lt;/font&gt;&lt;br&gt;
It is only used to detect the weapontype of ota weapon configs, just set the weapontype manually and dont use it.&lt;/TD&gt;
	&lt;TD&gt;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;LodDistance&lt;/TD&gt;
	&lt;TD&gt;Minimum camera distance at which the default beamweapon projectile is simplified to rectangle. Can be set to any numeric value. (default: 1000)&lt;/TD&gt;
	&lt;TD&gt;lodDistance=1000;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;ManualBombSettings&lt;/TD&gt;
	&lt;TD&gt;For Bombers, use burst and burstrate tags instead of hardcoded values.  Can be set to 1 or 0.&lt;/TD&gt;
	&lt;TD&gt;manualBombSettings=1;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;MetalPerShot&lt;/TD&gt;
	&lt;TD&gt;Metal used per shot.  If the specified amount is not available, the weapon cannot be fired.  Can also be used to specify how much a Stockpile weapon wll cost to build.  Can be set to any numeric value.&lt;/TD&gt;
	&lt;TD&gt;metalpershot=500;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;MinIntensity&lt;/TD&gt;
	&lt;TD&gt;Beamlaser damage falls off over its range. MinIntensity determines the minimum amount of damage done. 1=100%, and will thus turn off the damage falloff entirely. Default is 0.4? Can be set to any numeric value?  &lt;/TD&gt;
	&lt;TD&gt;minIntensity=0.1;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;Model&lt;/TD&gt;
	&lt;TD&gt;The 3DO or S3O model to be used as this weapon's physical representation.  3DO modesl do not need a .3do extension, but S3O weapon do.&lt;/TD&gt;
	&lt;TD&gt;model=missile;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;MovingAccuracy&lt;/TD&gt;
	&lt;TD&gt;A weapon's accuracy while moving.  See Accuracy.  Can be any numeric value.&lt;/TD&gt;
	&lt;TD&gt;movingaccuracy=1000;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;MyGravity&lt;/TD&gt;
	&lt;TD&gt;For ballistic weapons (Cannon and Bomb), it overrides the map gravity if used. Regular map gravity is around 0.2.&lt;/TD&gt;
	&lt;TD&gt;myGravity=0.2;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;NoExplode&lt;/TD&gt;
	&lt;TD&gt;Whether or not the weapon will expire on impact or continue. An example is the d-gun. Note that these weapons will do damage every single frame they are inside the hitsphere of an object, underground or under water, massively multiplying their damage. Can be set to 1 or 0.&lt;/TD&gt;
	&lt;TD&gt;noexplode=1;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;NoSelfDamage&lt;/TD&gt;
	&lt;TD&gt;This tag doesnt work. There is a kludgey gadget that can be used in its place. Theoretically, the weapon will not damage the unit that fired it.  For instance, a nuke silo could shoot itself and not take any damage. Can be set to 1 or 0.&lt;/TD&gt;
	&lt;TD&gt;noselfdamage=1;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;NumBounce&lt;/TD&gt;
	&lt;TD&gt;The maximum number of times a weapon will bounce. -1 for infinite. Defaults to -1&lt;/TD&gt;
	&lt;TD&gt;numbounce=5;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;Paralyzer&lt;/TD&gt;
	&lt;TD&gt;If active, this weapon will not cause any damage to its target, but will instead paralyze (aka EMP).  The default damage value of a weapon with this active will be applied to the target's HP; once the HP is overwhelmed, it will be paralyzed.  Can be set to 1 or 0.&lt;/TD&gt;
	&lt;TD&gt;paralyzer=1;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;ParalyzeTime&lt;/TD&gt;
	&lt;TD&gt;On Paralyzer weapons, determines the maximum length of time the target will be paralyzed (In seconds?). The timer is refreshed every time the target is hit by the weapon. Can be set to any numerical value.&lt;/TD&gt;
	&lt;TD&gt;paralyzetime=10;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;PredictBoost&lt;/TD&gt;
	&lt;TD&gt;How much should the weapon predict unit speeds (similar to targetMoveError). Default 0 for non-burnblow, 0.5 for burnblow weapons. Can be set to any numerical value (0.0-1.0).&lt;/TD&gt;
	&lt;TD&gt;predictBoost=1;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;Projectiles&lt;/TD&gt;
	&lt;TD&gt;The weapon fires this many projectiles at once (shotgun style). Make sure you put them on different trajectories somehow (sprayangle or different firepoints) because otherwise they'll all be clumped in one shot. Works well combined with bursts. Can be set to any integer value.&lt;/TD&gt;
	&lt;TD&gt;projectiles=1;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;ProximityPriority&lt;/TD&gt;
	&lt;TD&gt;Acts as a multiplier for the distance to the target in the priority calculation. Note that negative values make weapons prefer distant targets. Can be set to any numerical value.&lt;/TD&gt;
	&lt;TD&gt;proximityPriority=1;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;PulseSpeed&lt;/TD&gt;
	&lt;TD&gt;On LargeBeamLaser, how fast the pulsating effect at the beam start is. Can be set to any numerical value.&lt;/TD&gt;
	&lt;TD&gt;pulseSpeed=15;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;Range&lt;/TD&gt;
	&lt;TD&gt;The maximum range of the weapon.  If set to noexplode, the weapon will disappear after this range has been met.  If set to burnblow, the weapon will explode after this range has been met.  Can be set to any numerical value.&lt;/TD&gt;
	&lt;TD&gt;range=750;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;ReloadTime&lt;/TD&gt;
	&lt;TD&gt;The amount of time between shots.  If a unit is paralyzed, this stops counting down.  Can be set to any numerical value.&lt;/TD&gt;
	&lt;TD&gt;reloadtime=3.5;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;Rendertype&lt;/TD&gt;
	&lt;TD&gt;&lt;font style=&quot;color:red&quot;&gt;depreciated&lt;/font&gt;&lt;br&gt;
Used for auto detection of ota weapontypes.&lt;/TD&gt;
	&lt;TD&gt;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;RGBColor&lt;/TD&gt;
	&lt;TD&gt;The color of the rendertype 0, 3, 4, 7 weapon, specified in RED_GREEN_BLUE format.&lt;/TD&gt;
	&lt;TD&gt;rgbcolor=1 0.3 1; - this would make evul-purple&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
&lt;TR&gt;
	&lt;TD&gt;RGBColor2&lt;/TD&gt;
	&lt;TD&gt;The color at the core of a rendertype 0 (laser) weapon.  Specified the same as above.  Defaults to white.&lt;/TD&gt;
	&lt;TD&gt;RGBColor2=0 1 0; - this would make a weird green middle for the evul-purple laser&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;ScrollSeed&lt;/TD&gt;
	&lt;TD&gt;Only used by LargeBeamLaser. How fast the beam apears to be moving towards it target. Can be set to any numerical value.&lt;/TD&gt;
	&lt;TD&gt;scrollSeed=1;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;Selfprop&lt;/TD&gt;
	&lt;TD&gt;&lt;font style=&quot;color:red&quot;&gt;depreciated&lt;/font&gt;&lt;br&gt;
(does nothing)&lt;/TD&gt;
	&lt;TD&gt;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;Size&lt;/TD&gt;
	&lt;TD&gt;Defines the visible size of projectiles. Can be set to any numerical value. Default size is 2 + min(damage / 400, areaOfEffect / 10).&lt;/TD&gt;
	&lt;TD&gt;size=10;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;SizeGrowth&lt;/TD&gt;
	&lt;TD&gt;Defines how fast flame projectiles will grow in size. Can be set to any numerical value.&lt;/TD&gt;
	&lt;TD&gt;sizegrowth=0.6;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;SmokeTrail&lt;/TD&gt;
	&lt;TD&gt;Does the projectile leave a smoke trail or not.  Can be set to 1 or 0.&lt;/TD&gt;
	&lt;TD&gt;smoketrail=1;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;SoundHit&lt;/TD&gt;
	&lt;TD&gt;The sound made when the weapon hits.  Must reference a .wav file in the .\Sounds directory. &lt;span class=&quot;warning&quot;&gt;Deprecated in 89.0, use SoundHit{Dry,Wet}&lt;/span&gt;&lt;/TD&gt;
	&lt;TD&gt;soundhit=emghit;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;SoundHitDry&lt;/TD&gt;
	&lt;TD&gt;The sound made when the weapon hits land.  Must reference a .wav file in the .\Sounds directory.&lt;/TD&gt;
	&lt;TD&gt;soundhit=emghit;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;SoundHitWet&lt;/TD&gt;
	&lt;TD&gt;The sound made when the weapon hits water.  Must reference a .wav file in the .\Sounds directory.&lt;/TD&gt;
	&lt;TD&gt;soundhit=emghitwater;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;SoundHitVolume&lt;/TD&gt;
	&lt;TD&gt;Can be any numerical value between 0 and 1.&lt;/TD&gt;
	&lt;TD&gt;soundhitvolume=0.5;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;SoundStart&lt;/TD&gt;
	&lt;TD&gt;The sound made when the weapon begins to fire.  Will fire only once if the weapon is shot in a burst.  Must reference a .wav file in the .\Sounds directory.&lt;/TD&gt;
	&lt;TD&gt;soundstart=emgfire;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;SoundStartVolume&lt;/TD&gt;
	&lt;TD&gt;Can be any numerical value between 0 and 1.&lt;/TD&gt;
	&lt;TD&gt;soundstartvolume=0.5;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;SoundTrigger&lt;/TD&gt;
	&lt;TD&gt;If active, the weapon will sound every time a shot is fired in a burst sequence.  Can be set to 1 or 0.&lt;/TD&gt;
	&lt;TD&gt;soundtrigger=1;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;SprayAngle&lt;/TD&gt;
	&lt;TD&gt;How wide the the angle of a burst from a burst weapon can be.  Very similar to Accuracy, except that sprayangle effects each projectile in a burst, while Accuracy does not.&lt;/TD&gt;
	&lt;TD&gt;sprayangle=1024;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;StartVelocity&lt;/TD&gt;
	&lt;TD&gt;The starting speed of the weapon as it is first fired.  Only applicable to weapons that can accelerate.&lt;/TD&gt;
	&lt;TD&gt;startvelocity=200;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;Stockpile&lt;/TD&gt;
	&lt;TD&gt;Can this weapon be stockpiled, for instance like a nuke launcher.  Can be set to 1 or 0.&lt;/TD&gt;
	&lt;TD&gt;stockpile=1;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;StockpileTime&lt;/TD&gt;
	&lt;TD&gt;Time it takes to create one unit of ammunition (default is weapon's reload time).&lt;/TD&gt;
	&lt;TD&gt;stockpiletime=10;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;SubMissile&lt;/TD&gt;
	&lt;TD&gt;For TorpedoLaunchers, if set to 1 the torpedo will travel outside of water (But still behave like a torpedo, IE, falling with slower gravity etc). It will not emit a smoketrail. When fired from a plane it will behave the same way but the plane will probably be considered a fighter, not a bomber. Can be set to 1 or 0.&lt;/TD&gt;
	&lt;TD&gt;subMissile=0;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;SweepFire&lt;/TD&gt;
	&lt;TD&gt;If 1 (default 0) it will make the weapon continue firing while it aims for a new target. Only works on continous beam lasers currently. Doesnt seem to work very well at all. Can be set to 1 or 0.&lt;/TD&gt;
	&lt;TD&gt;SweepFire=1;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;TargeBorder&lt;/TD&gt;
	&lt;TD&gt;If nonzero, targeting units will TryTarget at the edge of collision sphere (radius*tag_value, [-1;1]) instead of its centre. Can be set between -1 and 1. Defaults to 1 for Melee type weapons, 0 otherwise. ([http://spring.clan-sy.com/phpbb/viewtopic.php?p=219659#p219659 image])&lt;/TD&gt;
	&lt;TD&gt;targetBorder=1;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;Targetable&lt;/TD&gt;
	&lt;TD&gt;If active, the weapon will be automatically targeted by any Interceptor weapons.&lt;/TD&gt;
	&lt;TD&gt;targetable=1;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;TargetMoveError&lt;/TD&gt;
	&lt;TD&gt;The degree to which a weapon's aiming will fail to keep up with its target's movement.  If set very low or not set at all, a weapon will lead its target and almost always hit unless there's a lot of micromanagement on the part of the person controlling the target.  If set too high (about 0.3 or above), the weapon will have a lot of difficulty even tracking its target enough to get a shot off.  Can probably only be set between 0 and 1.  Beyond 1, the weapon would be virtually useless.&lt;/TD&gt;
	&lt;TD&gt;targetmoveerror=0.15;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;Thickness&lt;/TD&gt;
	&lt;TD&gt;Thickness of a beamweapon or beamlaser, default is 2.  Can be set to any numerical value.&lt;/TD&gt;
	&lt;TD&gt;thickness=4;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;TileLength&lt;/TD&gt;
	&lt;TD&gt;Only used by LargeBeamLaser. Defines the length before the texture used is repeated (tiled).&lt;/TD&gt;
	&lt;TD&gt;tileLength=4;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;ToAirWeapon&lt;/TD&gt;
	&lt;TD&gt;If active, the weapon will only be capable of targeting units with category=VTOL. Also forbids the weapon from attacking ground. Prettymuch the same as an OnlyTargetCategory + CanAttackGround = 0? Can be set to 0 or 1.&lt;/TD&gt;
	&lt;TD&gt;toairweapon=1;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;Tolerance&lt;/TD&gt;
	&lt;TD&gt;The amount to which the weapon's &quot;real&quot; aim can be off while the weapon will still be able to fire accurately at the target. For some weapons (Fighters, Fixedlaunchers) this only determines in what arc the unit will fire, the weapon is still fired forwards and will miss unless it has tracking. Can be set to any numerical value.&lt;/TD&gt;
	&lt;TD&gt;tolerance=1500;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;Tracks&lt;/TD&gt;
	&lt;TD&gt;If the missile tracks a moving target. Can be set to 1 or 0.&lt;/TD&gt;
	&lt;TD&gt;tracks=1;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;TrajectoryHeight&lt;/TD&gt;
	&lt;TD&gt;The height of the arc of a missile weapon. It is useful for compensating for mountains or debris. Is relative to the weapons speed (Higher speed, higher arc) and the range the weapon is firing at (Lower range lower arc). Requires Guidance and Turnrate to hit its target when over 1. &lt;/TD&gt;
	&lt;TD&gt;trajectoryheight=0.8;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;Turnrate&lt;/TD&gt;
	&lt;TD&gt;How fast a guided weapon can turn.  Can be any numerical value between 0 and 64000.  If set to 0, the weapon can't turn at all, if set to 64000, the weapon can literally defy all known physics and turn 180 degrees in a fraction of a second.  This is relative to a weapon's velocity; a weapon with a very low velocity (~200) wouldn't need a very high turnrate to keep up with a fighter, although it would probably never catch it because of its slow speed.  A weapon with a very high velocity (~1000) would need a very high value in order to be able to hit targets that turn suddenly.
	&lt;TD&gt;turnrate=32000;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;Turret&lt;/TD&gt;
	&lt;TD&gt;Set to 1 if weapon is used by a turret that rotates. Set to 0 if weapon is forward firing, ie, has no rotating turret piece.&lt;/TD&gt;
	&lt;TD&gt;turret=1;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;TwoPhase&lt;/TD&gt;
	&lt;TD&gt;&lt;font style=&quot;color:red&quot;&gt;depreciated&lt;/font&gt;&lt;br&gt;
Unused in 76b1 and 77b1!&lt;/TD&gt;
	&lt;TD&gt;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;VLaunch&lt;/TD&gt;
	&lt;TD&gt;&lt;font style=&quot;color:red&quot;&gt;depreciated&lt;/font&gt;&lt;br&gt;
Used to autodetect &quot;StarburstLauncher&quot; weapontypes. Might as well use Weapontype=StarburstLauncher.&lt;/TD&gt;
	&lt;TD&gt;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;WaterBounce&lt;/TD&gt;
	&lt;TD&gt;Weather the weapon projectile will bounce on the surface of the water. Can be 0 or 1, defaults to 0 (off)&lt;/TD&gt;
	&lt;TD&gt;waterbounce=1;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;WaterWeapon&lt;/TD&gt;
	&lt;TD&gt;Determines if the weapon can pass through water, fire underwater (though FireSubmersed can change this) and target underwater units. Some weapontypes (Beamlasers, Lightning) can pass through water anyway (players can exploit this with force-firing), but will not auto-fire at underwater targets without this tag. Used for Torpedo weapontype auto-detection, so set the Weapontype manually to use for any other weapon type. Can be set to 1 or 0.&lt;/TD&gt;
	&lt;TD&gt;waterweapon=1;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;WeaponAcceleration&lt;/TD&gt;
	&lt;TD&gt;Tells the weapon how fast it should accelerate from its StartVelocity to its actual WeaponVelocity.  Increases the weapon's velocity every second by the amount specified.  Can be any numerical value.&lt;/TD&gt;
	&lt;TD&gt;weaponacceleration=50;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;WeaponTimer&lt;/TD&gt;
	&lt;TD&gt;For StarburstLauncher, how long until the weapon will travel before guidance takes effect. The weapon will turn to actually go towards its target after the specified number of seconds has expired.  Can be set to any numerical value.&lt;/TD&gt;
	&lt;TD&gt;weapontimer=5;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;WeaponVelocity&lt;/TD&gt;
	&lt;TD&gt;The speed the weapon moves after being fired. If StartVelocity is lower than this number, the weapon will increase speed to its WeaponVelocity at the rate specified by its WeaponAcceleration.&lt;/TD&gt;
	&lt;TD&gt;weaponvelocity=800;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;Wobble&lt;/TD&gt;
	&lt;TD&gt;The amount that a missile will wobble off-course. Requires TurnRate. Turnrate will wrestle with wobble to keep the weapon on course, so wobble must be high enough to compensate to have any effect. Can be set to any numerical value between 0 and 64000.&lt;/TD&gt;
	&lt;TD&gt;wobble=15000;&lt;/TD&gt;
&lt;/TR&gt;
&lt;/table&gt;
NOTE: Variables that are defined by either a 1 or a 0 are BOOLEAN, where 1 means TRUE and 0 means FALSE.

NOTE 2: &quot;Any numerical value&quot; for things that relate to angles really means any value between 0 and 64,000 since that's between 0 and 360 degrees in spring measurement. Setting it higher than 64,000 will bring it 'full circle' so to speak.
&lt;BR&gt;&lt;BR&gt;

=Texture Tags=
&lt;center&gt;
&lt;table width=500 border=&quot;2&quot; cellpadding=&quot;4&quot; cellspacing=&quot;0&quot; style=&quot;margin: 1em 1em 1em 1em; background: #41545c; border: 1px #aaa solid; border-collapse: collapse;&quot;&gt;
&lt;TR&gt;&lt;th&gt; Weapon &lt;/th&gt;&lt;th&gt; Used Texture Tags &lt;/th&gt; &lt;/tr&gt;
&lt;TR&gt;
	&lt;TD&gt;AircraftBomb&lt;/TD&gt;
	&lt;TD&gt;texture1 = projectile&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;BeamLaser&lt;/TD&gt;
	&lt;TD&gt;texture1 = beam&lt;br&gt;texture2 = beamend&lt;br&gt;texture3 = flare&lt;br&gt;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;Cannon&lt;/TD&gt;
	&lt;TD&gt;texture1 = projectile&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;EmgCannon&lt;/TD&gt;
	&lt;TD&gt;texture1 = projectile&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;FlameThrower&lt;/TD&gt;
	&lt;TD&gt;texture1 = flame&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;LargeBeamLaser&lt;/TD&gt;
	&lt;TD&gt;texture1 = beam&lt;br&gt;texture2 = beamend&lt;br&gt;texture3 = muzzle&lt;br&gt;texture4 = flare&lt;br&gt;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;LaserCannon&lt;/TD&gt;
	&lt;TD&gt;texture1 = beam&lt;br&gt;texture2 = beamend&lt;br&gt;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;LightingCannon&lt;/TD&gt;
	&lt;TD&gt;texture1 = beam&lt;br&gt;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;MissileLauncher&lt;/TD&gt;
	&lt;TD&gt;texture1 = flare&lt;br&gt;texture2 = smoketrail&lt;br&gt;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;Shield&lt;/TD&gt;
	&lt;TD&gt;texture1 = shield&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;StarburstLauncher&lt;/TD&gt;
	&lt;TD&gt;texture1 = flare&lt;br&gt;texture2 = smoketrail&lt;br&gt;texture3 = flame&lt;br&gt;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;TorpedoLauncher&lt;/TD&gt;
	&lt;TD&gt;texture1 = projectile&lt;br&gt;&lt;/TD&gt;
&lt;/TR&gt;
&lt;/TABLE&gt;
&lt;/center&gt;
NOTE: All textures need to be `atlased`. So you have to define them in the '''resources.tdf''' and use the reference name in the texture tags.
&lt;BR&gt;&lt;BR&gt;

=Cannon (Plasma) Visuals=
&lt;table width=730 border=&quot;2&quot; cellpadding=&quot;4&quot; cellspacing=&quot;0&quot; style=&quot;margin: 1em 1em 1em 0; background: #41545c; border: 1px #aaa solid; border-collapse: collapse;&quot;&gt;
&lt;TR&gt;&lt;th&gt;Variable &lt;/th&gt;&lt;th&gt; Description &lt;/th&gt;&lt;th&gt; Examples&lt;/Th&gt; &lt;/tr&gt;
&lt;TR&gt;
	&lt;TD&gt;AlphaDecay&lt;/TD&gt;
	&lt;TD&gt;How much a plasma particle is more transparent than the previous particle. Can be set to any numerical value. (default: 1)&lt;/TD&gt;
	&lt;TD&gt;AlphaDecay=0.95;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;NoGap&lt;/TD&gt;
	&lt;TD&gt;If set to 1, the distance between plasma particles is proportional to the size of the two particles. If set to 0, the distance between plasma particles will be proportional to the size of the first particle.
Can be set to 1 or 0. (default: 1)&lt;/TD&gt;
	&lt;TD&gt;NoGap=0;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;Separation&lt;/TD&gt;
	&lt;TD&gt;Distance between each plasma particle.  Can be set to any number value. (default: 1)&lt;/TD&gt;
	&lt;TD&gt;Separation=5;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;SizeDecay&lt;/TD&gt;
	&lt;TD&gt;How much a plasma particle is smaller than the previous within the same plasma shot. Can be set to any numerical value. (default: 0)&lt;/TD&gt;
	&lt;TD&gt;SizeDecay=0.2;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;Stages&lt;/TD&gt;
	&lt;TD&gt;Number of particles used in one plasma shot.  Can be set to any number value. (default: 5)&lt;/TD&gt;
	&lt;TD&gt;Stages=20;&lt;/TD&gt;
&lt;/TR&gt;
&lt;/table&gt;
&lt;BR&gt;&lt;BR&gt;

=Shield/Repulsor Descriptions=
&lt;table width=730 border=&quot;2&quot; cellpadding=&quot;4&quot; cellspacing=&quot;0&quot; style=&quot;margin: 1em 1em 1em 0; background: #41545c; border: 1px #aaa solid; border-collapse: collapse;&quot;&gt;
&lt;TR&gt;&lt;th&gt;Variable &lt;/th&gt;&lt;th&gt; Description &lt;/th&gt;&lt;th&gt; Examples&lt;/Th&gt; &lt;/tr&gt;
&lt;TR&gt;
	&lt;TD&gt;ExteriorShield&lt;/TD&gt;
	&lt;TD&gt;If set to 1, the shield/repulsor will not have any effect on weapons fired from within its field.  Can be 1 or 0.&lt;/TD&gt;
	&lt;TD&gt;exteriorshield=1;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;IsShield&lt;/TD&gt;
	&lt;TD&gt;If set to 1, this &quot;weapon&quot; is no longer a weapon, is now a repulsor or a shield, based on the other properties given to it.  Can be 1 or 0.&lt;/TD&gt;
	&lt;TD&gt;isshield=1;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;ShieldAlpha&lt;/TD&gt;
	&lt;TD&gt;How clearly visible the shield is, if you have VisibleShield turned on.  Value is between 0 and 1.&lt;/TD&gt;
	&lt;TD&gt;shieldalpha=0.4;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;ShieldEnergyUse&lt;/TD&gt;
	&lt;TD&gt;The amount of energy used to repulse or destroy weapons.  Will be used constantly while the weapon is in its area of effect if it is a repulsor, will be used only once on impact if it is a shield.&lt;/TD&gt;
	&lt;TD&gt;shieldenergyuse=1500;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;ShieldForce&lt;/TD&gt;
	&lt;TD&gt;The force applied to weapons, an arbitrary number.  Set to 1, it will not deflect very well.  Only for use on repulsor-type.  Can be set to any numerical value.&lt;/TD&gt;
	&lt;TD&gt;shieldforce=1.75;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;ShieldBadColor&lt;/TD&gt;
	&lt;TD&gt;The color the shield is when it is at 0% strength, if you have VisibleShield turned on.  Defined in R G B format.&lt;/TD&gt;
	&lt;TD&gt;shieldbadcolor=0 1 0;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;ShieldGoodColor&lt;/TD&gt;
	&lt;TD&gt;The color the shield is when it is at 100% strength, if you have VisibleShield turned on.&lt;/TD&gt;
	&lt;TD&gt;shieldgoodcolor=1 0 0;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;ShieldInterceptType&lt;/TD&gt;
	&lt;TD&gt;Bitfield representing the types of weapons that this shield can intercept. The best way to think about this is to think of it as the resulting binary. Every digit of binary that is set to one means that a weapon with that digit set to one will be intercepted by this shield, for instance, the example will result in the shield blocking weapons with types 2 and/or 3. Maxium of 32 unique types. See [[Shield Interception Tag Use]].&lt;/TD&gt;
	&lt;TD&gt;ShieldInterceptType=6;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;ShieldMaxSpeed&lt;/TD&gt;
	&lt;TD&gt;The maximum speed the repulsor will push weapons away at.  Only for use on repulsor-type.  Can be set to any numerical value.&lt;/TD&gt;
	&lt;TD&gt;shieldmaxspeed=400;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;ShieldPower&lt;/TD&gt;
	&lt;TD&gt;How much &quot;power&quot; a shield can store.  &quot;Power&quot; is not the same as energy; think of it as the shield/repulsor's private battery source.  It can be drained completely by defending against weapons, even if you have lots of energy.  ''Power is drained by the affected weapons damage.''  Can be set to any numerical value.&lt;/TD&gt;
	&lt;TD&gt;shieldpower=1000;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;ShieldPowerRegen&lt;/TD&gt;
	&lt;TD&gt;How quickly the shield regenerates its &quot;power&quot;, even when under attack.  Regenerates the amount specified every second.  Can be set to any numerical value.&lt;/TD&gt;
	&lt;TD&gt;shieldpowerregen=25;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;ShieldPowerRegenEnergy&lt;/TD&gt;
	&lt;TD&gt;How much energy is required to keep the shield regenerating its &quot;power&quot;.  For instance, you might have it set so that 100 units of energy are necessary for every 25 units of &quot;power&quot;.&lt;/TD&gt;
	&lt;TD&gt;shieldpowerregenenergy=100;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;ShieldRadius&lt;/TD&gt;
	&lt;TD&gt;Defines the size of the area the shield/repulsor protects.  Can be set to any numerical value.&lt;/TD&gt;
	&lt;TD&gt;shieldradius=500;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;ShieldRepulsor&lt;/TD&gt;
	&lt;TD&gt;If set to 1, the &quot;shield&quot;-type weapon will repulse projectiles.  If set to 0, it will destroy them.  Can be set to 1 or 0.&lt;/TD&gt;
	&lt;TD&gt;shieldrepulsor=1;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;ShieldStartingPower&lt;/TD&gt;
	&lt;TD&gt;If set the shield starts with this much power instead of 0.  Can be set to any numerical value.&lt;/TD&gt;
	&lt;TD&gt;shieldStartingPower=100;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;SmartShield&lt;/TD&gt;
	&lt;TD&gt;If set to 1, the shield/repulsor will not affect owned/allied weapons.  Can be set to 1 or 0.&lt;/TD&gt;
	&lt;TD&gt;smartshield=1;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;VisibleShield&lt;/TD&gt;
	&lt;TD&gt;If set to 1, the shield will be visible.  Only for use on shield-type.  Can be set to 1 or 0.&lt;/TD&gt;
	&lt;TD&gt;visibleshield=1;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;VisibleShieldHitFrames&lt;/TD&gt;
	&lt;TD&gt;Numbers of frames how long the shield should be visible after it got hit (the alpha value fades after the hit).  Can be set to any numerical value. (default: 0 frames)&lt;/TD&gt;
	&lt;TD&gt;visibleShieldHitFrames=5;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
	&lt;TD&gt;VisibleShieldRepulse&lt;/TD&gt;
	&lt;TD&gt;If set to 1, the repulsing effect will be visible.  Only for use on repulsor-type.  Can be set to 1 or 0.&lt;/TD&gt;
	&lt;TD&gt;visibleshieldrepulse=1;&lt;/TD&gt;
&lt;/TR&gt;
&lt;/table&gt;
&lt;/span&gt;</text>
      <sha1>scgid6earg72mo63pcq7ahgi97uhudu</sha1>
    </revision>
  </page>
  <page>
    <title>Weapon scripts</title>
    <ns>0</ns>
    <id>3337</id>
    <revision>
      <id>26603</id>
      <parentid>26352</parentid>
      <timestamp>2013-03-19T11:09:45Z</timestamp>
      <contributor>
        <username>Emmanuel</username>
        <id>557</id>
      </contributor>
      <minor/>
      <comment>completed exemple</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2446">=WEAPONERY:=

''following exemples are designed for being a vehicule with 3 weapons ''
::&lt;small&gt;(ex: a tank with a vertical missile launcher a turet canon a front flamer )&lt;/small&gt;


 keep in mind the fact that &lt;big&gt;weapon1 is the sight&lt;/big&gt; ,
that make the unit will &lt;big&gt;move at weapon1 range&lt;/big&gt; if order allow roam 
::(other weapon will not make the vehicule move )


 here the list of 3d model piece needed (can be jusqt some empty :
&lt;code&gt;
  local turet3,gun3 = piece ('turet3','gun3')
  local tir3 = piece &quot;tir3&quot;
  local turet2,gun2 = piece ('turet2','gun2')
  local tir2 = piece &quot;tir2&quot;
  local tir1 = piece &quot;tir1&quot;
  local aim1 = piece &quot;aim1&quot;
  local aim2 = piece &quot;aim2&quot;
  local aim3 = piece &quot;aim3&quot;
&lt;/code&gt;

== UNCONDITIONAL WEAPONS ==
&lt;code&gt; 
 function script.AimWeapon1()
 return 1
 end 

 function script.FireWeapon1()
 end

 function script.AimFromWeapon1()
 return aim1
 end

 function script.QueryWeapon1()
 return tir1
 end
&lt;/code&gt;


=== weapon with turret ===
&lt;code&gt; 
 function script.AimWeapon2(y2,x2)
   Signal(4)
   SetSignalMask(4)
   Turn(turet2,y_axis,y2,2)
   Turn(gun2,x_axis,- x2,2)
   WaitForTurn(turet2,y_axis)
   WaitForTurn(gun2,x_axis)
   return 1
 end 

 function script.FireWeapon2()
 end

 function script.AimFromWeapon2()
 return aim2
 end

 function script.QueryWeapon2()
 return tir2
 end
&lt;/code&gt;



==== weapon with limited rotation turet ====
 (the turet will turn only if target is between -0.5 to 3 radian mean on side)
 this can be done with elevation too
&lt;code&gt;
 function script.AimWeapon3(y3,x3)
   Signal(8)
   SetSignalMask(8)
   if  
     y3&lt;3   
   and 
     x3&gt;-0.5  
       then 
       Turn(turet3,y_axis,y3,2)
       Turn(gun3,x_axis, - x3 ,2)
       WaitForTurn(turet3,y_axis)
       WaitForTurn(gun3,x_axis)
       return 1
       end 
 end

 function script.FireWeapon3()
 EmitSfx (tir3,257) Sleep(50) --this unmandatory make smoke at shooting point
 end

 function script.AimFromWeapon3()
 return aim3
 end

 function script.QueryWeapon3()
 return tir3
 end
&lt;/code&gt;



* Signal(1) &amp;  SetSignalMask(1) are using ^2 if ever you need more than 30 of them you must use table names
**the folowing &lt;big&gt;UnitDef&lt;/big&gt; tag are involved :
&lt;code&gt;
::highTrajectory=0,
::weapons = {[1]=&quot;verti_missile1&quot;,[2]=&quot;canon2&quot;,[3]=&quot;flamethrower3&quot;,

::slaveTo=0.0, 
::mainDir={0.0, 0.0, 1.0},
::maxAngleDif=180.0,
&lt;/code&gt;


*[[SpringRtsTutorialAnimDef]] return to the list of animDef exemples
[[Category:Emmanuel]]</text>
      <sha1>qat04aipf68cyo2f76tp9g6ngaghlaj</sha1>
    </revision>
  </page>
  <page>
    <title>Weapons:Antinukes</title>
    <ns>0</ns>
    <id>2519</id>
    <revision>
      <id>25290</id>
      <parentid>24355</parentid>
      <timestamp>2012-10-29T15:39:16Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>not BA specific</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2341">{{deprecated}}

==What is an Antinuke?==

An antinuke is a stockpile, vlaunch, interceptor weapon. When it detects an enemy nuke launch targeted within its coverage radius, if it has at least one antinuke missile stockpiled, it launches one to intercept the nuke.

==Stockpile==

Currently all stockpile weapons have a hardcoded 2s reload time between shots (this is different than the stockpile time).

==Interception Basics==

Only one antinuke attempt will ever be made on a given nuke. If the antinuke misses, the nuke is home free.

The antinuke follows a pure pursuit course. That means it will attempt to turn toward the nuke's current position.

An antinuke will detonate a nuke by passing within twice its area of effect of the nuke. It can only detonate the nuke that it is targeted at.

The nuke and antinuke actually do explode, so if they are close to the ground when this happens, anything nearby will take damage.

Nuke and antinukes WILL collide with units. They will not collide with friendlies if you set collideFriendly to be false.

==Interception Success and Time==

===Distance===

The closer the nuke is to the antinuke, the shorter the time the antinuke has to intercept the nuke. However, the antinuke also has a better chance of catching the nuke when it is traveling slowly.

===areaOfEffect===
The greater the area of effect of the antinuke, the more tolerance it has for not meeting the nuke exactly.

===weaponTimer===
For vlaunch weapons, weaponTimer controls how long the missile will go upwards before turning towards its target; as such, it also affects the missile's maximum altitude. A short weaponTimer on an antinuke shortens the intercept time; a short weaponTimer on the nuke means that the antinuke has less time to intercept the nuke. Note that a very short weaponTimer on the antinuke can cause the interception to happen close to the nuke silo.

===turnRate===
Since the antinuke does not lead its target, a low turnRate can cause the antinuke to miss, especially if the nuke and/or antinuke is very fast. It has less of an effect on the nuke.

===weaponAcceleration===
vlaunch weapons continue accelerating after they turn towards their target.

===weaponVelocity===
If the antinuke is slower or not much faster than the nuke, it will be unlikely to intercept it if it misses on the initial pass.</text>
      <sha1>orsi9rpde8jdwsd2qmf6tzsapn6jhti</sha1>
    </revision>
  </page>
  <page>
    <title>Where files go</title>
    <ns>0</ns>
    <id>2640</id>
    <redirect title="Read Me First" />
    <revision>
      <id>21104</id>
      <parentid>21102</parentid>
      <timestamp>2011-02-01T04:58:27Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>redirect to Read_Me_First#Getting_.2F_Installing_Games</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="56">#Redirect [[Read_Me_First#Getting_.2F_Installing_Games]]</text>
      <sha1>bxbyzfao6lnz85lnjzmmw8ajfsve8tc</sha1>
    </revision>
  </page>
  <page>
    <title>WidgetDatabaseFAQ</title>
    <ns>0</ns>
    <id>3121</id>
    <revision>
      <id>30204</id>
      <parentid>30203</parentid>
      <timestamp>2016-08-08T12:35:22Z</timestamp>
      <contributor>
        <username>Floris</username>
        <id>2927</id>
      </contributor>
      <comment>/* Web Interfaces */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1563">[[Engine_Development|Development]] &lt; [[Lua_Scripting|Lua Scripting]] &lt; {{FULLPAGENAME}}

= What is the widget database? =

The widget database is a resource which contains most of the widgets that got ever released for the Spring engine. The database is stored online and can be accessed via an HTTP interface.
There are many different clients available to access the database. These are the most common:

== Web Interfaces ==
[https://springrts.com/dl/buildbot/doc/ Spring documentation]

== Major lobbies utilizing the widget database ==

[http://springlobby.info Springlobby]

[http://zero-k.info/ Zero-K]

TASClient

== Dedicated .NET application (offers all funcionalities) ==
[http://springrts.com/phpbb/viewtopic.php?f=23&amp;t=25908 WidgetManager]

= For widget developers =
If you want to see your widgets added to the widget DB, you can get an admin account for the database, which will enable you to add/edit/remove your widgets. Just PM [http://springrts.com/phpbb/memberlist.php?mode=viewprofile&amp;u=5267 me (very_bad_soldier)], and I will provide all you need. Big thanks to manolo_ at this point, who helped a lot in keeping the database up to date in the last few years!

[http://springrts.com/phpbb/viewtopic.php?f=23&amp;t=16122 Widget database announcement thread]

= For lobby developers =
If you want to build your own database client, you can find the HTTP protocol description here:

[http://trac.caspring.org/wiki/WidgetProtocol Widget database HTTP API]

'''BEWARE''': The URL to the database is http://widgetdb.springrts.de now!

[[category: Lua]]</text>
      <sha1>mn23ebud88knlx4awixlfwdufbwpxjj</sha1>
    </revision>
  </page>
  <page>
    <title>Wiki ToDo</title>
    <ns>0</ns>
    <id>2721</id>
    <redirect title="Spring:WikiToDo" />
    <revision>
      <id>21590</id>
      <parentid>17176</parentid>
      <timestamp>2011-04-02T18:15:30Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <comment>Redirected page to [[Spring:WikiToDo]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29">#REDIRECT [[Spring:WikiToDo]]</text>
      <sha1>nbaufaxr9fiu1utrrj1z0p6rq2qhvh7</sha1>
    </revision>
  </page>
  <page>
    <title>Wind extractor</title>
    <ns>0</ns>
    <id>3485</id>
    <revision>
      <id>26601</id>
      <parentid>26599</parentid>
      <timestamp>2013-03-18T19:44:29Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>[[Category:Emmanuel]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="903">=Read the wind speed and direction from the map randomiser=
::
::
the battle &lt;big&gt;seting or map maker define a wind minimal and maximal speed&lt;/big&gt;

so when the values are not equal its a gambling 

and generaly this values is used for being converted in energy by &lt;big&gt;&quot;elolienne&quot;&lt;/big&gt; 

&lt;small&gt;(seem english not use them...)&lt;/small&gt;
::
::
&lt;code&gt;
::winddirX,winddirY,winddirZ,windstrength,windnormDirX,windnormDirY,windnormDirZ=Spring.GetWind()
::rotorspeed=windstrength/5
::Spring.UnitScript.Spin(rotor,z_axis,rotorspeed,0.3)
::windradian=Spring.GetHeadingFromVector(windnormDirX,windnormDirZ)
::Turn(turet,y_axis,windradian,rotorspeed)
&lt;/code&gt;
*because windspeed is from 1 to 99 is often needed to divide it
*because the wind direction is gived as vector it must be converted in radian for turet direction



*[[SpringRtsTutorialAnimDef]] return to the list of animDef exemples
[[Category:Emmanuel]]</text>
      <sha1>syymxkp09sb9hf6a2vdk3wnz02bugha</sha1>
    </revision>
  </page>
  <page>
    <title>XTA</title>
    <ns>0</ns>
    <id>966</id>
    <revision>
      <id>30970</id>
      <parentid>30964</parentid>
      <timestamp>2019-02-22T01:31:25Z</timestamp>
      <contributor>
        <username>Hawara</username>
        <id>2945</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9242">[[category:Xta]]
'''[[Games|&lt;--Back to Games]]'''

                       [[Image:Xta_logo_white.jpg]]

== What is XTA? ==

XTA is one of the original games for Spring, and the one many players feel is &quot;more OTA than OTA itself&quot; due to the authentic feel combined with the Spring Engine's capabilities. 

XTA tests a player's tactical, teamwork and micro abilities whilst fostering diverse playing styles and giving many ways in which one action can change the outcome of battle.

'''But the best review for any player is to experience it for themselves.'''

== Download ==
The easiest way to download latest XTA is via the the automatic download system of your favorite multiplayer lobby.

== Gameplay ==

Here are just some of the many good aspects XTA has to offer.

*Perhaps XTA's greatest strength is that players must keep the balance of keeping their own units alive through repairing and avoiding projectiles, while still doing maximum damage to the enemy. Amongst this they also have to keep their economy on track and try guess their opponent's next move. Sound easy? Give it to a go!

*XTA is more micro than macro, although the latter is a vital feature. Units have more health than other games enabling players to keep units alive. Spamming is done less as units are more expensive and too many units means you will lose your units to the a few well microed enemies. It's not how many you build but how you use them.

*At the advanced levels of the tech tree, both factions really come into their own. Whereas Core may get the power of flame, Arm get the power of lightning, offering the quick and light to the strong and slow. Will you go for brute force and economical superiority or hit and run stealth tactics?

*XTA prides itself on being a mod of team play allowing teams to play strategically and work together to achieve goals as a simple macro victory is rare. The small community makes players able to have a greater understanding of each other giving the game a more rewarding victory.

*One of XTA's best selling points is the '''Commander'''. The versatility of this unit allows it to be used for aggressive, tactical, defensive and economical purposes as well as having the ability to Morph to be stronger.

*Very much similar to Spring itself, XTA has a friendly community and although it being relatively small, balance discussions are often held within the group. However, this also allows all players to know each other making games more between friends than foes. It also has one of the most active clan systems.

*XTA has a tough learning curve, however an intelligent player will quickly learn when to build and what, may it be lab or unit. This makes XTA a mod constantly keeping the player entertained and challenged. With different tactics being discovered all the time users have many ideas to choose from of how to start their game. XTA is renowned for players making comebacks by rebuilding their base.

----

== So where can I find out more? ==

'''XTA is proud to be a community-run development program.'''

The [http://springrts.com/phpbb/viewforum.php?f=48 XTA community and subforum] is always willing to listen to suggestions. From there you will be able to read on the latest plans of XTA here, read the change log, and contribute your own ideas on the mod itself. 

Something not to your liking about the current XTA? Talk about, maybe have it changed! Many balance issues are discussed from the introduction of new units to the changing of a single unit's DP

You can join the '''#xta channel''' to find other XTA players and see if anyone wishes for a game. There is nearly always a game of the most uptodate XTA being hosted.

Newer versions will continue to be released to incorporate more detailed visual effects/or models as the Spring Engine develops.

If you wish to learn the basics of XTA, you can read guides such as:

*[http://springrts.com/wiki/New_to_xta XTA Basics]
*[http://springrts.com/wiki/Xta_units XTA unit guide]
*[http://springrts.com/wiki/Xta_commander XTA Commander guide]


----

==History==

XTA was a balance mod for TA, developed by the [[SY]] clan.

For Spring, it was the first mod available to the public for online play, the first that was ported and for a long time came bundled with the installation of the Spring engine, ready to play.

The mod has gone through many developers, starting with the [[SY]] clan with the most ancient and famous to the oldest of players, SJ; and then moving onto other users. 

One of the most notable players has been Noize, a founder of BA. Noize started XTA's modern look, with updated graphics and flash explosions (XTA Pimped Edition), which would later be seen as unnecessary and extremely laggy. 

A short time afterwards the [KnoX] clan, the leading XTA clan ran by '''Myg''' and Gizmo starting to develop the mod. For a brief time a major debate became visible that XTA was KnoX's mod now, this would be shortly dismissed. 

After [KnoX] disbanded due to them feeling the time was right for the members to go their separate ways, they still maintained XTA until Noruas began upkeep of the mod. With XTA 7.1 being seen as a watershed moment due to the peak of XTA's player base due to the decline of AA and rise of BA, so too can XTA 8.1. With some debate to whether the current XTA is the best, the two main contenders would be 7.1 and 8.1. With 8.1 came updated graphics and what many players remember as &quot;The golden days&quot; whereas 7.1 can be called the heyday of XTA itself.

Noruas has introduced more units than any other developer of XTA, improved graphics and dragged XTA through the new Spring versions. With the community split about where they stand on many of his somewhat radical ideas, Noruas has certainly added to XTA. 

Noruas maintained XTA for some time. Players contribute and offer help on a multitude of scales. The current XTA balance offers something new and dynamic whilst still maintaining the roots of OTA and the older XTA versions giving a blend of classic and modern.

Recently Deadnight Warrior has taken over development, fixing bugs, optimizing scripts and tweaking balance. [https://github.com/xta-springrts/xta-springrts/issues A git repository with bugtracker] was also set up.


----

== Eye Candy ==


XTA is arguably the best-looking mod in terms of graphics.  With new unit models and new explosion/smoke effects being released with every update, the XTA mod keeps up to date with the Spring Engine and what it has to offer. 

Here are some pictures of what XTA has to offer:


[[image:Screen508.jpg|800px|Core Commander]]
[[image:Screen511.jpg|800px|Arm Commander]]
[[image:Screen620.jpg|800px|A Land boat]]


== Important Autohost Commands ==
Official XTA autohosts are:
&lt;pre&gt;
[semprini]Autohost - for all
[loganberry]Autohost - for beginners
[durian]Autohost - for fleabowl
[elderberry]Autohost - for testing new xta versions
&lt;/pre&gt;

Of course you can also use either of these hosts for other purposes.

== Managing the autohosts ==

To start up one of these hosts, if it is not running but another host is running, you can use the command:

&lt;code&gt;!spawn &lt;autohost&gt;&lt;/code&gt; - where &lt;autohost&gt; is one of semprini, logan, elder or durian.


In elderberry autohost you can also set another spring engine with the command:

&lt;code&gt;!setengine &lt;engine name or latest&gt;&lt;/code&gt; - for example !setengine 104.0 to set engine to Spring 104.0


To get a long, complete list type of commands: &lt;code&gt;!help&lt;/code&gt;

Below are some often used commands for quicker looking:
===Maps===
Pick a random &quot;good&quot; map: &lt;code&gt;!map&lt;/code&gt;

Download a map: &lt;code&gt;!dlmap &lt;mapname or url&gt;&lt;/code&gt; After this wait 30 seconds or issue the command &lt;code&gt;!reloadarchives&lt;/code&gt;

===Mapslists===

Maplists act like filters: when you (for example) set the !maplist 1v1 command, all subsequent listing of maps will be only from the 1v1 map list. So this will allow you to only use a subset of all maps. There are now these defined maplists, but more can be requested:
&lt;code&gt;!maplist 1v1 | 2v2 | 3v3 | 4v4 | 5v5 | 6v6 | teams | bigteams | 3ffa | 4ffa | 5ffa | fleas | good&lt;/code&gt;


To return to all maps, use this command:
&lt;code&gt;!maplist all&lt;/code&gt;

Show list of maplists: &lt;code&gt;!printmaplist&lt;/code&gt;

Show list of maps in a specific list: &lt;code&gt;!printmaplist &lt;listname&gt;&lt;/code&gt;, for example &lt;code&gt;!printmaplist 1v1&lt;/code&gt;

Add current map to a list: &lt;code&gt;!addmap &lt;listname&gt;&lt;/code&gt;, for example &lt;code&gt;!addmap 1v1&lt;/code&gt;

===King of the Hill===
Add an one more startbox than they are teams.

&lt;code&gt;!koth 1&lt;/code&gt; - enable King of the Hill mode.

&lt;code&gt;!koth 0&lt;/code&gt; - disable King of the Hill mode.

&lt;code&gt;!hilltime X&lt;/code&gt; - team has to control hill for X minutes to win.

&lt;code&gt;!gracetime Z&lt;/code&gt; - at game start hill stays neutral for Z minutes.

===Game options===
&lt;code&gt;!mode killall&lt;/code&gt; - destroy all enemy units to win

&lt;code&gt;!mode comends&lt;/code&gt; - destroy enemy Commanders to win

&lt;code&gt;!spidertortoise 0&lt;/code&gt; - Turn spiders &amp; turtle units off.


&lt;!--
=== For Helium===
Game end mode:
  !setoptions  mode=comends
or
  !setoptions  mode=killall

Make teams:
  !balance 2
  !balance 3
  ...
  !balance 10

Turn XTAaids units on/off:
  !setoptions xtaidunits=1
  !setoptions xtaidunits=0
--&gt;

[[Category:Games]]</text>
      <sha1>eqca9z80zjj131bt2rpgy86rbblx10c</sha1>
    </revision>
  </page>
  <page>
    <title>XTA Clans</title>
    <ns>0</ns>
    <id>2195</id>
    <revision>
      <id>23008</id>
      <parentid>23005</parentid>
      <timestamp>2011-12-12T22:43:26Z</timestamp>
      <contributor>
        <username>Knorke</username>
        <id>833</id>
      </contributor>
      <minor/>
      <comment>maybe no int. now?</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="373">List of active clans and their (active) members:

'''[AP]''' Armoured Peewees:

Babbles
&lt;br&gt;&lt;br&gt;
'''[CoW]''' Core of War:

HermuldSuuri
&lt;br&gt;&lt;br&gt;
'''[RoX]''' Rogues of XTA:

1v0ry_k1ng &lt;br&gt;
Janid &lt;br&gt;
John &lt;br&gt;
Knorke &lt;br&gt;
Pintle &lt;br&gt;
Tobi 
&lt;br&gt;&lt;br&gt;
'''[PRO]''' Pets Reunited Online:

Jools
&lt;br&gt;&lt;br&gt;
'''[tN]''' Terra Nubicus

Ray
&lt;br&gt;&lt;br&gt;
[[Category:Xta]]
[[Category:Clans]]</text>
      <sha1>myo3s829hgdwelsh1mom88exwoud6e4</sha1>
    </revision>
  </page>
  <page>
    <title>Xect vs. Mynn</title>
    <ns>0</ns>
    <id>1168</id>
    <revision>
      <id>22530</id>
      <parentid>18881</parentid>
      <timestamp>2011-07-17T19:31:15Z</timestamp>
      <contributor>
        <username>Flozi</username>
        <id>2583</id>
      </contributor>
      <minor/>
      <comment>external link to GPL</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2872">{{historical}}
{{Category:Mods}}

The '''Xect vs. Mynn''' Mod, aims to be a completely free (as in GNU [http://www.gnu.org/copyleft/gpl.html GPL]) data package for the Spring engine.

&lt;div align=&quot;center&quot;&gt;
http://www.ta-spring.com/mods/xectvsmynn/screen1.jpg
&lt;/div&gt;



== History ==
This mod was initialy created by Chris Jorgensen http://www.xenoclone.com/ for the original Total Annihilation engine.
For the Spring engine Chris Jorgensen decided to release his work under the GNU GPL so others could port it.  Michilus Nimbus made the first port that did not crash on startup.  FoeOfTheBee has made it somewhat playable, and probably GPL.

== Screenshots ==
* Early screenshots of Xect-Mynn running on [[Linux]] by [[User:Tim_Blokdijk|Tim Blokdijk]]:
** [http://www.timblokdijk.nl/spring/Xect-Mynn/Screenshots/0.1.0b-screen000.jpg 0.1.0b-screen000.jpg]
** [http://www.timblokdijk.nl/spring/Xect-Mynn/Screenshots/0.1.0b-screen001.jpg 0.1.0b-screen001.jpg]
** [http://www.timblokdijk.nl/spring/Xect-Mynn/Screenshots/0.1.0b-screen002.jpg 0.1.0b-screen002.jpg]

== Links ==

=== Relevant Forum threads ===
* [http://taspring.clan-sy.com/phpbb/viewtopic.php?t=7027  &quot;Mods&quot; -&gt; &quot;Xect vs. Mynn: let's GO!&quot;] - &quot;Fixing&quot; thread to get XvsM into playable state
* [http://taspring.clan-sy.com/phpbb/viewtopic.php?t=3005 &quot;Mods&quot; -&gt; &quot;Xect vs. Mynn - 0.6 released, now 100% legal&quot;]
* [http://taspring.clan-sy.com/phpbb/viewtopic.php?t=3005 &quot;Mods&quot; -&gt; &quot;Xect Vs. Mynn v .05 released&quot;]
* [http://taspring.clan-sy.com/phpbb/viewtopic.php?t=2997 &quot;Mods&quot; -&gt; &quot;Xect Vs. Mynn To-do List&quot;]
* [http://taspring.clan-sy.com/phpbb/viewtopic.php?t=2880 &quot;Mods&quot; -&gt; &quot;Xect vs. Mynn&quot;]
* [http://taspring.clan-sy.com/phpbb/viewtopic.php?t=1293 &quot;General discussion&quot; -&gt; &quot;Free, licenseless mods?&quot;]

=== Downloads ===
''Sorted from newer to older.''
* Get the '''most recent version''' from the [http://www.ta-spring.com/mods/xectvsmynn/ homepage] (0.6 as of ''2006-07-31'')
* [http://fileuniverse.com/?p=showitem&amp;ID=2140 Xect vs. Mynn .5] - New load screens and balance by formula (by [[User:FoeOfTheBee|Foe OfTheBee]])
* [http://blancandrin.dyndns.org/~foe/xect_vs_mynn03.sd7 Xect vs. Mynn .3] - (by [[User:FoeOfTheBee|Foe OfTheBee]])
* [http://www.fileuniverse.com/?p=showitem&amp;ID=2016 Xect vs. Mynn .2] - With updated cursors and trim FBI files. (by [[User:FoeOfTheBee|Foe OfTheBee]])
* [http://www.timblokdijk.nl/spring/Xect-Mynn/xect_vs_mynn_v0-1-1.sdz Xect vs. Mynn 0.1.1] - Version with custom cursors to replace the cursors from TA by [[User:Tim_Blokdijk|Tim Blokdijk]]
* [http://fileuniverse.com/?p=showitem&amp;ID=1882 Xect vs. Mynn 0.1.0b]

=== Homepage ===
* [http://www.ta-spring.com/mods/xectvsmynn/ Xect vs. Mynn homepage]
* [http://www.ta-spring.com/mods/xectvsmynn/unitguide/ Xect vs. Mynn Unit Guide]
* [http://www.ta-spring.com/mods/xectvsmynn/xect_vs_mynn/ Browse the MOD-content]

[[Category:Mods]]</text>
      <sha1>a0wcragvyvgqb91143tn0djgx7epnn9</sha1>
    </revision>
  </page>
  <page>
    <title>Xml-rpc</title>
    <ns>0</ns>
    <id>3241</id>
    <redirect title="Upq" />
    <revision>
      <id>24088</id>
      <timestamp>2012-03-15T05:09:06Z</timestamp>
      <contributor>
        <username>Abma</username>
        <id>2658</id>
      </contributor>
      <comment>moved [[Xml-rpc]] to [[Upq]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="17">#REDIRECT [[Upq]]</text>
      <sha1>1z5y2rp12pm75xh2omqqg9gb0mxfmf4</sha1>
    </revision>
  </page>
  <page>
    <title>Xta Lessons</title>
    <ns>0</ns>
    <id>2645</id>
    <revision>
      <id>18069</id>
      <parentid>17974</parentid>
      <timestamp>2010-01-02T14:28:10Z</timestamp>
      <contributor>
        <username>Mongus</username>
        <id>53</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="386">== Basic Lessons ==

*Radar
*Scouting/harrasing
*Llt placement
*DT placement
*Expanding
*Reclaiming
*Lab selection

*unit mixing



== Intermediate Lessons ==

*Destroying Hlt
*Using artillery
*Energy buildtree
*porcing/breaking
*porking/breaking
*defensive DT

== Advanced Lessons ==

*Strategy selection
*Microing Commander
*Wining long term war
*Unit Build setups



[[Category:xta]]</text>
      <sha1>4j86svp4qkhre9mbnpexaaa79svmoqk</sha1>
    </revision>
  </page>
  <page>
    <title>Xta commander</title>
    <ns>0</ns>
    <id>2632</id>
    <revision>
      <id>20270</id>
      <parentid>20188</parentid>
      <timestamp>2010-10-15T14:44:54Z</timestamp>
      <contributor>
        <username>Babbles</username>
        <id>2232</id>
      </contributor>
      <comment>Added logo</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5236">                       [[Image:Xta_logo_white.jpg]]

In XTA Commanders are the focal point.

Commanders should nearly always be on the front line.

Repairing units in lines is key to battles.

Have your Commander behind your unit lines to repair/give LoS/radar.

== Morphing ==

Only Morph if you have the Metal and Energy to do so.

It is best to get as many Metal Extractors prior to Morph to build up Metal.

Morphing requires 0.01 experience for level one so cannot be done immidiatly.

Only Morph if you have enough time away from Enemy as your Commander will be paralysed:
*Level 1 - 30 seconds
*Level 2 - 120 seconds
*Level 3 - 30 seconds
*Level 4 - 120 seconds

If your Commander comes under attack while Morphing do not be afraid to hit &quot;Stop&quot; (You will get half the resources spent back).

If your Commander is Morphed, try look for alternatives to Comm Bomb, yours is worth more than theirs.


First level of Morph gives: 
*+3 metal, +75 Energy (starts at +2 and +50)
*2,000 metal + Energy storage (starts at 1,000)
*Build speed increases by 25, gets full Tech one radar as well as increased LoS
*Range increases by 20, more powerful primary laser and +250 extra health
*When cloaked and moving Commander uses only 700 energy, not 1000

*Level Two requires 0.25 experience and gives improvement on level 1

*Level Three requires 0.10 experience (will go to 0.09 if excess after Level Two)

*Level Three gives improvement on Level Two as well as self repair option

*Level Four requires 0.25 experience and gives improvement on Level Three

----

== Commander versus Tech 1 ==

If you are alone it is best to run.

You can stand your ground, if so make Dragons Teeth.

Against rocket units make Dragons Teeth and a Light Laser Tower.

Against missile units make two rows and a Light Laser Tower, repair if damaged.

Against artillery approach and try to D-Gun or try run behind a hill.

Against Infantry/Assault Tanks/Scouts D-Gun.

If you have units with you, repair them.

----

== Commander versus Air ==

If Bombers/Gunships/Fighters attack, click Hold Fire, Stop and Cloak.

Try repairing your Anti Air units around you if you can.

Try get back to Anti Air and/or Jammer range.

Against Bombers zig zag your run to dodge bombs.

Against transports, try FPS D-Gun them while walking if Tech 2, ALWAYS move when one is near.
'''
Under NO conditions do you try to directly engage air.'''

----

== Commander at Tech 2 ==

Even at Tech 2, the Commander is vital.

If your Commander is on the front line try keep it in Jammer Range.

Do NOT put it directly in front of units, as the Enemy will shoot your Commander instead of the unit.

Always keep it cloaked when the Enemy is near.

Units to D-Gun if they approach:
*Warrior/Pyro
*Freaker/Zipper
*'''Panther'''/Leveller
*'''Bulldog/Reaper'''
*Triton/Crock
*Gimp/Pelican
*Can/Zeus
*'''Sumo'''
*'''Maverick'''
*'''Goliath'''

Bold units must be approached with care, only reveal yourself once in range and safe.

When attacking ranged units:
*Keep inside your own Jammer Range until in enemies.
*Make sure you do not hit any obstacles.
*Try to distract the Enemy (Scouts etc)
*D-Gun the biggest, hold shift and try D-Gun any others.
*Try not to D-Gun their Jammer, try to get their Radar if possible.
*As soon as you have done, run and get back in Jammer Range.
*Sacrifice your Jammer to save your Commander if you must.

----

== Commander versus Sea ==

If you see Enemy ships near the coastline Cloak and try D-Gun.

If an Enemy ship fires on your Commander, run and Clock.

When in the water against torpedoes run and try dodge the torpedoes (zig zag).

When against Depth Charge units run when underwater.

Try reclaiming or capturing Scouts when underwater.

Never send your Commander underwater without protection (unless fleeing).

----

== How to Escape ==

When close to death always Cloak, Hold Fire and run to Jammer coverage.

Make Dragons Teeth to hold off units temporarily.

Do not be afraid to go underwater, good against air.

Hide behind wreckages, especially Lab Wrecks, try not to crush them.

Hide behind Structures, Enemy and ally, be careful of Self Destructing Buildings.

Hills are effective for jamming your radar, keep Cloaked.

Decoy Commanders can be effective in aiding escape.

Try use distractions to save your Commander.

----

== Dragons Teeth Walk ==

'''PROS ONLY'''

It is possible to fight an army and Commander with your Commander alone.

It is advised you make an Energy Storage early, as well as a small amount of Energy structures.

Take Anti Air Units if possible.

Expand and get Metal Extractors until you reach Enemy.

Make a Light Laser Tower; place Dragons Teeth in front of it, repeat at least once.

Wait till Enemy retreats and make Dragons Teeth diagonally in their direction.

Make another Light Laser after 5th diagonal Tooth and repair.

Repeat as much as possible.

If Enemy Commander approaches run but keep Line of Sight.

If Enemy makes Heavy Laser Tower try get a Light Laser in range before complete.

Reclaim Towers in HLT's range if you cannot reach Heavy Laser Tower.

Use Light Laser Towers and force fire at max range to shoot slightly out or range, (useful for Enemy Light Laser Towers).



[[Category:xta]]</text>
      <sha1>cvcptwz5yr42jq2q3qenltwjepu4qrl</sha1>
    </revision>
  </page>
  <page>
    <title>Xta units</title>
    <ns>0</ns>
    <id>2796</id>
    <revision>
      <id>20271</id>
      <parentid>20044</parentid>
      <timestamp>2010-10-15T14:45:27Z</timestamp>
      <contributor>
        <username>Babbles</username>
        <id>2232</id>
      </contributor>
      <comment>Added logo</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11382">                       [[Image:Xta_logo_white.jpg]]


A brief guide to the Tech two units of XTA

== Arm Kbots ==


'''Warrior'''

*Best used in groups of 3-5 for quick raiding parties or harassing.

*Quite low health but enough to get past enemy lines.

*Can out range Commander, if microed well one can easily kill a Commander.

*In many ways a cross between Tech one Peewee and Zipper.


'''Mouse'''

*Medium priced Kbot, but needs to be spammed to be effective.

*Low damage for Tech two (still stronger than AK), fast firing laser. 

*Very quick and small, (hard to D-Gun/shoot).

*Best used in swarms against Commanders or through gaps in enemy defences.

*Very effective late game if group is large.

*Very hard to stop, pinpoint weapons are largely ineffective.

*Keep away from Anti Air.

*When using, always keep moving.


'''Fido'''

*Medium range Artillery Kbot, fairy accurate and good damage for cost.

*Not heavily armoured so keep away from enemy fire.

*Can be used with Commander/Decoy like a Jethro line, if in numbers.

*Fairly fast and can fire on move so good for &quot;kiting&quot; or hit and run.

*Loses accuracy when moving, so best used in groups.

*In one sense, a cross between a Hammer and Jethro, but faster.


'''Zeus'''

*Low range, high armour fairly high damage but slow Kbot.

*Avoid Commanders at all cost, only use once Commander is dead (or as bait).

*Good for breaking defences.

*Recieves a 10% armour increase if gun is packed (it unpacks to fire).


'''Pelican'''

*An Amphibious Kbot with Anti Air and small laser.

*Treated by type map as a Hovercraft.

*Has a Tech one missle and a quick firing laser.

*Good in swarms but avoid heavy contact.

*Only Tech Two Kbot with Anti Air.


'''Maverick'''

*High Energy cost, low health but very high DPS.

*Fast firing plasma shots that do high damage, range is just less than missile units.

*Good with Commander healing but keep away from close quater combat.

*Very good at killing Commanders due to high accuracy (with LoS) and damage.

*Best in groups of two, with healing support or supporting close quater units.


'''Sniper'''

*Long range support unit, slow but very high damage.

*Has the ability to Cloak at a high E cost, also costs Energy to fire.

*Good against structures and will hit most times if you have LoS.

*Will hit a radar dot nearly every time if you have three Radar Targetting Facilities.

*Commanders have a damage tag against this unit. (Snipers do less damage).

*However, still good at killing Commanders, best with multiple and units to occupy Commander/gain LoS.


'''Raven'''

*Longest ranged Kbot, outranges even Popup.

*Very inaccurate but fires six missles.

*Can cause for huge damage if multiple shots hit.

*Costs Energy to fire.

*Gains accuracy with Experience.

*Very high Metal cost to build, most expensive Arm Kbot.

*Best used against concentrated amounts of units or to suppress an enemy.

----

== Arm Vehicles ==


'''Panther'''

*Fastest Arm Tech Two Vehicle with medium health.

*Has Lightning attack (quick and high damage), and missile.

*Basically a Tech Two raider which can handle itself in a fight.

*Best used in groups and to get into bases (economy).


'''Luger'''

*Rapid fire, inaccurate but longed ranged artillery unit.

*Does not do a lot of damage on impact, but rapid fire means targets are hit.

*Expensive, but cheap enough to make two-three easily.

*Low health and lack of speed mean it is best kept at a distance from fighting.

*Best used in groups to compensate for inaccuarcy, and to supress an enemy or base fire.

*Has High Trajectory mode to fire over/onto hills. 


'''Penetrator'''

*Slow moving Energy weapon with constant firing Energy beam.

*Costs a lot to build, most expensive arm Vehicle, and energy to maintain fire but worth it.

*Long ranged and needs defending.

*Has low health for Tech Two so keep it at distance.

*Explodes when killed.

*Best used with scouts for LoS as the beam can constantly fire.

*One is enough, however additional ones work well.


'''Spider'''

*All terrain paralysing unit with low health and cost.

*Fast unit which can crawl anywhere, even vertically.

*Has &quot;EMP overload&quot;, does damage to self, paralyses self, but does same to surrounding units.

*Due to cheap nature, easy and best to spam.

*Many Spiders needed to paralyse enemies with large amounts of health.

*Good to suprise enemies, need support to be effective.

*Works very well against swarms and can be used to temporarily bring down Anti-Air.


'''Mobile Fusion'''

*Arm's only &quot;mini&quot; fusion.

*High health but very slow, high cost.

*Gives 260 energy but is second most expensive Arm Vehicle.

*Keep away from all battles.

*Best used at start of Tech Two economy.

*Has large explosion, can be used, when desperate, to Self Destruct near enemies for big blast.

----

== Core Kbots ==


'''Pyro'''

*Lightly armoured and cheap assault Kbot.

*Quite fast for Core allowing it go ahead of most Core armies.

*Uses flame weapon with low range however at close range does a lot of damage.

*Best used in groups against defences or microed against units.


'''Can'''

*Heavily armoured, slow moving assault Kbot.

*Has mounted Light Laser to deal moderate damage.

*Best used in line formation in a group to give LoS whilst dealing damage.


'''Morty'''

*Cheap, long ranged mortar unit.

*Fires fast plasma shots with moderate damage and accuracy.

*Able to keep up with most units meaning it can stay within range.

*Has slightly less range than Heavy Laser Tower.

*Low health but easily spammable and best used in line formation.

*Comparable to Tech One Crasher lines with Commander repairing.


'''Dominator'''

*Long range Rocket Kbot, with medium cost.

*Rockets have long flight time, so poor against moving targets.

*Low health so best used with protection.

*Best used against stationary targets or behind hills (can fire over).


'''Sumo'''

*Heaviest Tech Two Kbot.

*High cost however heavily armoured.

*Slow moving with twin Heavy Laser weapon (fires quicker).

*High damage and good accuracy with medium range.

*Slow but compensates with heavy armour, keep away from Commanders.

*Best used as supporting troops whilst shooting from range.

----


== Core Vehicles ==


'''Leveller'''

*The slower, heavier counterpart of the Arm Panther.

*Low cost, heavy armour with flame weapon.

*Closer range gives more damage.

*Good for assaulting defences or larger units.

*Not good against fast units.


'''Core Artillery'''

*Heaviest mobile land artillery.

*High cost, slow and moderatly armoured.

*Takes a lot of Energy to fire but delivers high damage AoE plasma shot.

*Long range and slow reload time, needs protection to be effective.

*Can have low accuracy and needs LoS to be effective, AoE can compensate.


'''Goliath'''

*Heaviest Vehicle and Tech Two land unit.

*Has a lot of health however costs over 4,000 Metal.

*Slow turnrate and speed makes it easily D-Gunnable.

*Medium range Plasma turret, similar in damage to Core Artillery.

*Medium fire rate and secondary mounted Light Laser weapon.

*Needs support but good for assaulting defence, units and drawing out Commanders.

*Keep weary of enemy Commanders.

----


== Similar units for the two Factions ==


'''Zipper/Freaker'''

*Tech 1.5, quick but weak, has ability to Stealth for 50 Energy a second.

*Has high Los but only useful if enemy has limited defences/firepower.


'''Radar/Jammer Kbots/Vehicles'''

*Radar has larger radar than Tech Onene Radar Tower.

*Vehicles have more health, but less range.

*Produce Energy, but loses same amount of Energy when on.

*Jammers will jam your own Radar, so keep them off unless needed.


'''Scarab/Hedgehog'''

*Mobile Missle Defence Systems, to stop Nuclear Missles or Tactical Nukes.

*Same price as stationary Anti-Nuke, (medium Metal, very high Energy).

*Same range as stationary Anti-Nuke.

*Can store missles like normal Anti-Nuke.

*Has a small explosion on death, very slow and should be kept far from enemy.

*Can be used to give front line forces Anti-Nuke coverage.

*Hedgehog is slightly more expensive.

*Turn to &quot;Hold Fire&quot; to avoid them trying to attack.

*Set them to Patrol or Repeat a Move order, to keep base in Anti-Nuke coverage and so Enemy does not spot them making them harder to bomb.

'''Merl/Diplomat'''

*Long range Rockets Vehicles, with medium cost.

*Rockets have long flight time, so poor against moving targets.

*Slow and low health so best used behind main force.

*Diplomat does more damage but costs more Metal and has higher Build Time.

*Best used against stationary targets or behind hills (can fire over).


'''Invader/Roach'''

*Crawling bomb Kbot, cheap, quite fast and can climb many surfaces.

*Not completly all terrain.

*Very low health, but has instant Self Destruct when activated.

*Small explosion if killed but very large explosion if Self Destructed.

*Best used in ambush or against preoccupied enemies.

*Can go underwater.

*One can kill a Commander if close enough.


'''Phalanx/Copperhead'''

*Mobile Tech two flakker Vehicles.

*Able to hit ground and air effectively.

*Fast firing flak weapon does small damage but constant fire.

*Has medium range and quite low cost.

*Due to low health, not a frontline unit.

*Is needed for any force due to Anti Air abilities, best if you have multiple ones.

*Copperhead costs more but has more health.


'''Bulldog/Reaper'''

*Upgrade of Tech One tank, second highest health/armour of Tech Two Vehicles.

*High damage per shot and medium rate of fire but slow.

*Quite expensive, but good in groups of three and to protect support units.

*Best used against defence, when no Commander is around or to bring Commander out of hiding.

*Reaper is slightly faster and cheaper in Metal.

*Bulldog has higher health and cheaper in Energy/buildtime.


'''Infiltrator/Parasite'''

*Spy Kbots with ability to Cloak and Stealth.

*Cheap in Metal but expensive in Energy.

*Costs Infiltrator 210 and Parasite 200 Energy to Cloak while stationary.

*Costs Infiltrator 420 and Parasite 400 Energy to Cloak while moving.

*Costs Infiltrator 1000 and Parasite 1300 Energy to Stealth (radar invisible).

*Infiltrator has longer Line of Sight, and costs less to build.

*Used to infiltrate enemy base to discover weak points, give LoS and find key structures.


'''Triton/Croc'''

*Amphibious Vehicles, very cheap at less than 500 metal.

*Low range and relatively low health.

*Triton has 3000 while Croc has 3500.

*Has low DPS, however good in groups and effective for price.

*Has good slope tolerance and can go underwater, so useful for flanking.

*Triton is useful with Spider due to slope tolerance.


'''Decoy Commanders'''

*Look exactly like real Commanders.

*Give 1000 storage in Metal and Energy but produce low amounts.

*Has fake D-Gun, activated by button.

*Primary weapon is laser.

*High buildspeed, LoS and radar, but no sonar.

*Same health as normal Commander but do not have Anti-Sniper damage tag.

*Have smaller decloak radius than Commander (harder to decloak).

*Can build everything normal Commander can, but cannot Morph or Capture.

*Expensive, but useful as builders, repairers, to give LoS or to trick Enemy.

*Can go underwater.

----

Additionally, there is a more in depth unit guide [http://www.springfiles.com/show_file.php?id=1016 here.]

[[Category:xta]]</text>
      <sha1>ctqnejx8z4djttsod2b4pz4zkdvp25f</sha1>
    </revision>
  </page>
  <page>
    <title>Zorbawic Map Design Help popolsku</title>
    <ns>0</ns>
    <id>2390</id>
    <redirect title="Zorbawic&#039;s Map Design Help in Polish language (Jak zrobiÃ„â€¡ mape do Springa - po Polsku)" />
    <revision>
      <id>12499</id>
      <parentid>12498</parentid>
      <timestamp>2007-07-16T13:31:50Z</timestamp>
      <contributor>
        <username>Zorbawic</username>
        <id>2230</id>
      </contributor>
      <minor/>
      <comment>Redirecting to [[Zorbawic's Map Design Help in Polish language (Jak zrobić mape do Springa - po Polsku)]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="101">#REDIRECT [[Zorbawic's Map Design Help in Polish language (Jak zrobiÃ„â€¡ mape do Springa - po Polsku)]]</text>
      <sha1>t0ailhaf5we372ast7j6v2wg7z779s4</sha1>
    </revision>
  </page>
</mediawiki>
